Namespace(EMA=True, add_noise=False, auxilary_lm=False, batch_size=16, beam_num=10, beam_search_alpha=0.9, beam_search_base=3, beta=1.0, bleu_threshold=0, combine_copy_with_real=False, combined_eval=False, combined_training=False, copy_bt=True, create_mapping=False, dataset_name='conala', decoder_layers=4, decoder_lr=7.5e-05, device='cuda', dummy_question=False, dummy_source=False, early_stopping=False, early_stopping_epochs=20, ema_param=0.999, encoder_lr=1e-05, epochs=80, eval_interval=1, extra_copy_attention_linear=True, extra_encoder=False, extra_encoder_layers=1, extra_linear=True, fix_linear_layer=False, fixed_copy=False, gating=False, generate_back_translation=False, just_analysis=False, just_evaluate=True, just_initialize=False, label_smoothing=0.1, lambd=1, language_model=False, lr_decay=1, mono_min_prob=0.1, monolingual_ratio=0.5, n=256, no_encoder=False, no_encoder_update_for_bt=True, no_linear_opt=False, no_schema=False, num_workers=4, percentage=10, pointer_network=False, python=True, random_encoder=False, save_dir='CHECKPOINT_DIR', seed=1, small_dataset=False, sql_augmentation=False, sql_where_augmentation=False, temp=1.0, test_batch_size=32, translate_backward=False, use_authentic_data=False, use_back_translation=False, use_codebert=False, use_column_type=False, use_copy_attention=True, use_gelu=True, use_real_source=False, use_tagged_back=False, valid_batch_size=50, warmup_steps=0)
BertConfig {
  "architectures": [
    "BertForMaskedLM"
  ],
  "attention_probs_dropout_prob": 0.1,
  "gradient_checkpointing": false,
  "hidden_act": "gelu",
  "hidden_dropout_prob": 0.1,
  "hidden_size": 768,
  "initializer_range": 0.02,
  "intermediate_size": 3072,
  "layer_norm_eps": 1e-12,
  "max_position_embeddings": 512,
  "model_type": "bert",
  "num_attention_heads": 12,
  "num_hidden_layers": 12,
  "pad_token_id": 0,
  "type_vocab_size": 2,
  "vocab_size": 30522
}

min 3
max 62
std 5.681347357423177
mean 15.4726938962827
Effective batch size 10
model name conala_model_combined_training=False_seed=1_trns_back=False_use_backtr=False_lmd=1_cp_bt=True_add_no=False_no_en_upd=True_ratio=0.5_ext_li=True_ext_cp_li=True_cp_att=True_EMA=T_rnd_enc=F_de_lr=7.5e-05_mmp=0.1_saug=F_dums=F_dumQ=F_rsr=F_fc=F_ccr=F.pth
copy dataset size 105983
train set size: 2179
dev set size 200
test set size 500
example of parallel data
[CLS] concatenate elements of a list str0 of multiple integers to a single integer [SEP]
[CLS] sum ( d * 10 * * i for i, d in enumerate ( str0 [ : : - 1 ] ) ) [SEP]
105983
example of monolingual data
[CLS] sort a nested list by two elements [SEP]
[CLS] sorted ( l, key = lambda x : ( - int ( x [ 1 ] ), x [ 0 ] ) ) [SEP]
--------- B -----------
{'intent': {'gloss': ['check', 'if', '7', 'is', 'in', 'var0'], 'words': ['check', 'if', '7', 'is', 'in', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': '7 in var0'}
Generated  translation
if not var0 : pass 
--------- B -----------
{'intent': {'gloss': ['parse', 'string', 'var0', 'to', 'float'], 'words': ['parse', 'string', 'var0', 'to', 'float'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'float(var0)'}
Generated  translation
var0 ='float ( ) 
--------- B -----------
{'intent': {'gloss': ['exit', 'script'], 'words': ['exit', 'script'], 'after': [' ', '']}, 'slot_map': {}, 'snippet': 'sys.exit()'}
Generated  translation
os. system ('exit') 
--------- B -----------
{'intent': {'gloss': ['remove', 'the', 'last', 'element', 'in', 'list', 'var0'], 'words': ['remove', 'the', 'last', 'element', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'var0.pop()'}
Generated  translation
var0 [ - 1 ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'list', 'of', 'lists', 'var0', 'into', 'list', 'of', 'tuples', 'of', 'appropriate', 'elements', 'form', 'nested', 'lists'], 'words': ['convert', 'a', 'list', 'of', 'lists', 'var0', 'into', 'list', 'of', 'tuples', 'of', 'appropriate', 'elements', 'form', 'nested', 'lists'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'zip(*var0)'}
Generated  translation
list ( itertools. chain ( * var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'the', 'last', 'element', 'in', 'list', 'var0'], 'words': ['remove', 'the', 'last', 'element', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'del var0[-1]'}
Generated  translation
var0 [ - 1 ] 
--------- B -----------
{'intent': {'gloss': ['remove', 'the', 'element', 'in', 'list', 'var0', 'with', 'index', '1'], 'words': ['remove', 'the', 'element', 'in', 'list', 'var0', 'with', 'index', '1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'var0.pop(1)'}
Generated  translation
var0. pop ( 1 ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'the', 'element', 'in', 'list', 'var0', 'at', 'index', 'var1'], 'words': ['remove', 'the', 'element', 'in', 'list', 'var0', 'at', 'index', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'index'}, 'snippet': 'del var0[var1]'}
Generated  translation
var0. remove ( var1 ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'str0', 'is', 'in', 'list', 'var0'], 'words': ['check', 'if', 'str0', 'is', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'a', 'var0': 'a'}, 'snippet': "'var0' in var0"}
Generated  translation
if'str0'in var0 : pass 
--------- B -----------
{'intent': {'gloss': ['calling', 'an', 'external', 'command', 'str0'], 'words': ['calling', 'an', 'external', 'command', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'ls -l'}, 'snippet': 'from subprocess import call'}
Generated  translation
os. system ('str0') 
--------- B -----------
{'intent': {'gloss': ['print', 'unicode', 'characters', 'in', 'a', 'string', 'str0'], 'words': ['print', 'unicode', 'characters', 'in', 'a', 'string', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'Россия'}, 'snippet': "print('str0')"}
Generated  translation
print ('str0 '. encode ('utf - 8') ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'the', 'element', 'in', 'list', 'var0', 'at', 'index', 'var1'], 'words': ['remove', 'the', 'element', 'in', 'list', 'var0', 'at', 'index', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'index'}, 'snippet': 'var0.pop(var1)'}
Generated  translation
var0. remove ( var1 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'last', 'day', 'of', 'the', 'second', 'month', 'in', 'year', '2012'], 'words': ['get', 'last', 'day', 'of', 'the', 'second', 'month', 'in', 'year', '2012'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'monthrange(2012, 2)'}
Generated  translation
datetime. datetime. now ( ) + datetime. timedelta ( days = 1, hours = 3 ) 
--------- B -----------
{'intent': {'gloss': ['sum', 'of', 'all', 'values', 'in', 'a', 'python', 'dict'], 'words': ['sum', 'of', 'all', 'values', 'in', 'a', 'python', 'dict'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'sum(d.values())'}
Generated  translation
sum ( item ['float'] for item in l ) 
--------- B -----------
{'intent': {'gloss': ['execute', 'a', 'command', 'str0', 'in', 'the', 'terminal', 'from', 'a', 'python', 'script'], 'words': ['execute', 'a', 'command', 'str0', 'in', 'the', 'terminal', 'from', 'a', 'python', 'script'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'command'}, 'snippet': 'os.system(str0)'}
Generated  translation
os. system ('str0') 
--------- B -----------
{'intent': {'gloss': ['request', 'http', 'url', 'var0'], 'words': ['request', 'http', 'url', 'var0'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {'var0': 'url'}, 'snippet': 'r = requests.get(var0)'}
Generated  translation
requests. get ( var0, verify = false ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'dictionary', 'var0', 'by', 'its', 'values'], 'words': ['sort', 'a', 'dictionary', 'var0', 'by', 'its', 'values'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'data'}, 'snippet': 'sorted(var0.values())'}
Generated  translation
sorted ( list ( var0. items ( ) ), key = lambda k _ v : k _ v [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['throw', 'an', 'exception', 'str0'], 'words': ['throw', 'an', 'exception', 'str0'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {'str0': 'i know python!'}, 'snippet': "raise exception('str0')"}
Generated  translation
print ('str0 '. decode ('utf8') ) 
--------- B -----------
{'intent': {'gloss': ['manually', 'throw', 'an', 'exception', 'str0'], 'words': ['manually', 'throw', 'an', 'exception', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'i know python!'}, 'snippet': "raise exception('str0')"}
Generated  translation
" " " " " ". join ( reversed ('str0') ) 
--------- B -----------
{'intent': {'gloss': ['throw', 'an', 'exception', 'with', 'message', 'str0'], 'words': ['throw', 'an', 'exception', 'with', 'message', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'this is the exception you expect to handle'}, 'snippet': "raise exception('str0')"}
Generated  translation
sys. exit ('str0') 
--------- B -----------
{'intent': {'gloss': ['sum', 'of', 'all', 'values', 'in', 'a', 'python', 'dict', 'var0'], 'words': ['sum', 'of', 'all', 'values', 'in', 'a', 'python', 'dict', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'd'}, 'snippet': 'sum(var0.values())'}
Generated  translation
sum ( item ['var0'] for item in var0 ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'str0', 'in', 'descending', 'order', '.'], 'words': ['sort', 'a', 'list', 'str0', 'in', 'descending', 'order', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'lst'}, 'snippet': 'sorted(str0, reverse=true)'}
Generated  translation
sorted ( [ str0 ], key = str. upper ) 
--------- B -----------
{'intent': {'gloss': ['return', 'http', 'status', 'code', '204', 'from', 'a', 'django', 'view'], 'words': ['return', 'http', 'status', 'code', '204', 'from', 'a', 'django', 'view'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'return httpresponse(status=204)'}
Generated  translation
driver. execute _ script ('http : / / www. w2') 
--------- B -----------
{'intent': {'gloss': ['get', 'current', 'url', 'in', 'selenium', 'webdriver', 'var0'], 'words': ['get', 'current', 'url', 'in', 'selenium', 'webdriver', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'browser'}, 'snippet': 'print(var0.current_url)'}
Generated  translation
var0. get ('http / / www. google. com. br') 
--------- B -----------
{'intent': {'gloss': ['get', 'domain', '/', 'host', 'name', 'from', 'request', 'object', 'in', 'django'], 'words': ['get', 'domain', '/', 'host', 'name', 'from', 'request', 'object', 'in', 'django'], 'after': [' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "request.meta['http_host']"}
Generated  translation
driver. find _ element _ by _ css _ selector ( '. name _ _ name') 
--------- B -----------
{'intent': {'gloss': ['get', 'last', 'day', 'of', 'the', 'first', 'month', 'in', '2002'], 'words': ['get', 'last', 'day', 'of', 'the', 'first', 'month', 'in', '2002'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'calendar.monthrange(2002, 1)'}
Generated  translation
datetime. datetime. strptime ('january 11, 2010 ','% b % d, % y'). strftime ('% a'
--------- B -----------
{'intent': {'gloss': ['get', 'last', 'day', 'of', 'the', 'second', 'month', 'in', '2002'], 'words': ['get', 'last', 'day', 'of', 'the', 'second', 'month', 'in', '2002'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'calendar.monthrange(2008, 2)'}
Generated  translation
datetime. datetime. now ( ) + datetime. timedelta ( days = 1 ) 
--------- B -----------
{'intent': {'gloss': ['calling', 'an', 'external', 'command', 'str0'], 'words': ['calling', 'an', 'external', 'command', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'some_command with args'}, 'snippet': "os.system('str0')"}
Generated  translation
os. system ('str0') 
--------- B -----------
{'intent': {'gloss': ['calling', 'an', 'external', 'command', 'str0'], 'words': ['calling', 'an', 'external', 'command', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'some_command < input_file | another_command > output_file'}, 'snippet': "os.system('str0')"}
Generated  translation
os. system ('str0') 
--------- B -----------
{'intent': {'gloss': ['manually', 'throw', '/', 'raise', 'a', 'var0', 'exception', 'with', 'the', 'message', 'str0'], 'words': ['manually', 'throw', '/', 'raise', 'a', 'var0', 'exception', 'with', 'the', 'message', 'str0'], 'after': [' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'valueerror', 'str0': 'a very specific bad thing happened'}, 'snippet': "raise var0('str0')"}
Generated  translation
var0. translate ( none,'str0') 
--------- B -----------
{'intent': {'gloss': ['get', 'http', 'header', 'of', 'the', 'key', 'str0', 'in', 'flask'], 'words': ['get', 'http', 'header', 'of', 'the', 'key', 'str0', 'in', 'flask'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'your-header-name'}, 'snippet': "request.headers['str0']"}
Generated  translation
self. treeview. connect ('str0 ', header = true ) 
--------- B -----------
{'intent': {'gloss': ['get', 'last', 'day', 'of', 'the', 'second', 'month', 'in', '2100'], 'words': ['get', 'last', 'day', 'of', 'the', 'second', 'month', 'in', '2100'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'calendar.monthrange(2100, 2)'}
Generated  translation
datetime. datetime. now ( ). strftime ('% b % d, % y - % h : % m : % s') 
--------- B -----------
{'intent': {'gloss': ['throw', 'a', 'valueerror', 'with', 'message', 'str0'], 'words': ['throw', 'a', 'valueerror', 'with', 'message', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'represents a hidden bug, do not catch this'}, 'snippet': "raise valueerror('str0')"}
Generated  translation
logging. info ('str0 ', extra = { str0 } ) 
--------- B -----------
{'intent': {'gloss': ['throw', 'a', 'value', 'error', 'with', 'message', 'str0', ',', 'str1', ',', 'str2', ',', 'str3'], 'words': ['throw', 'a', 'value', 'error', 'with', 'message', 'str0', ',', 'str1', ',', 'str2', ',', 'str3'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', '', ' ', '']}, 'slot_map': {'str0': 'a very specific bad thing happened', 'str1': 'foo', 'str2': 'bar', 'str3': 'baz'}, 'snippet': "raise valueerror('str0')"}
Generated  translation
print ('str0 '. decode ('str1 ','str2') ) 
--------- B -----------
{'intent': {'gloss': ['escaping', 'quotes', 'in', 'string'], 'words': ['escaping', 'quotes', 'in', 'string'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'replace(\'"\', \'\\\\"\')'}
Generated  translation
re. findall ('\ \ w + ','your _ string \ \ s + ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['assign', 'value', 'in', 'var0', 'dynamically', 'to', 'class', 'property', 'var1'], 'words': ['assign', 'value', 'in', 'var0', 'dynamically', 'to', 'class', 'property', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'group', 'var1': 'attr'}, 'snippet': 'setattr(self, var1, var0)'}
Generated  translation
var1. set _ index ( ['var0'] ). issubset ( var1 ) 
--------- B -----------
{'intent': {'gloss': ['open', 'a', 'file', 'str0', 'under', 'unix'], 'words': ['open', 'a', 'file', 'str0', 'under', 'unix'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '$file'}, 'snippet': 'os.system(\'start "$file"\')'}
Generated  translation
f = open ('str0 ','r') 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'list', 'with', 'the', 'highest', 'sum', 'value', 'in', 'list', 'var0'], 'words': ['get', 'the', 'list', 'with', 'the', 'highest', 'sum', 'value', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'print(max(var0, key=sum))'}
Generated  translation
max ( min ( var0, key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'dataframe', 'var0', 'to', 'list', 'of', 'dictionaries', 'including', 'the', 'index', 'values'], 'words': ['convert', 'dataframe', 'var0', 'to', 'list', 'of', 'dictionaries', 'including', 'the', 'index', 'values'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': "var0.to_dict('index')"}
Generated  translation
var0. index. values ( ) 
--------- B -----------
{'intent': {'gloss': ['create', 'list', 'of', 'dictionaries', 'from', 'pandas', 'dataframe', 'var0'], 'words': ['create', 'list', 'of', 'dictionaries', 'from', 'pandas', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': "var0.to_dict('records')"}
Generated  translation
var0 = [ {'d': i. dataframe ( ) for i in range ( 100 ) ] for d in var0 ] 
--------- B -----------
{'intent': {'gloss': ['sort', 'dict', 'var0', 'by', 'value'], 'words': ['sort', 'dict', 'var0', 'by', 'value'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'data'}, 'snippet': 'sorted(var0, key=var0.get)'}
Generated  translation
sorted ( list ( var0. items ( ) ), key = lambda x : x [ 1 ] [ 0 ] ) 
--------- B -----------
{'intent': {'gloss': ['throw', 'a', 'runtime', 'error', 'with', 'message', 'str0'], 'words': ['throw', 'a', 'runtime', 'error', 'with', 'message', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'specific message'}, 'snippet': "raise runtimeerror('str0')"}
Generated  translation
sys. exit ('str0') 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'list', 'of', 'all', 'values', 'in', 'column', 'var0', 'in', 'pandas', 'data', 'frame', 'var1'], 'words': ['get', 'a', 'list', 'of', 'all', 'values', 'in', 'column', 'var0', 'in', 'pandas', 'data', 'frame', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'df'}, 'snippet': "var1['var0'].tolist()"}
Generated  translation
var1 ['var0'] 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'with', 'delimiter', 'str0', 'or', 'delimiter', 'str1'], 'words': ['split', 'string', 'var0', 'with', 'delimiter', 'str0', 'or', 'delimiter', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'str', 'str0': ';', 'str1': ','}, 'snippet': "re.split('; |, ', var0)"}
Generated  translation
" " " str0 " " ". split ('str1') 
--------- B -----------
{'intent': {'gloss': ['calling', 'an', 'external', 'command', 'str0'], 'words': ['calling', 'an', 'external', 'command', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'some_command with args'}, 'snippet': "stream = os.popen('str0')"}
Generated  translation
os. system ('str0') 
--------- B -----------
{'intent': {'gloss': ['set', 'columns', 'str0', 'as', 'indexes', 'in', 'dataframe', 'var0'], 'words': ['set', 'columns', 'str0', 'as', 'indexes', 'in', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "['race_date', 'track_code', 'race_number']", 'var0': 'rdata', '[ str0 ]': "['race_date', 'track_code', 'race_number']"}, 'snippet': 'var0.set_index([ str0 ])'}
Generated  translation
var0. set _ index ( ['str0 ','str0'] ) 
--------- B -----------
{'intent': {'gloss': ['throw', 'an', 'assertion', 'error', 'with', 'message', 'str0', ',', 'distance'], 'words': ['throw', 'an', 'assertion', 'error', 'with', 'message', 'str0', ',', 'distance'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '']}, 'slot_map': {'str0': "unexpected value of 'distance'!"}, 'snippet': "raise assertionerror('str0', distance)"}
Generated  translation
print ('str0 '. format ( score ) ) 
--------- B -----------
{'intent': {'gloss': ['post', 'request', 'url', 'var0', 'with', 'parameters', 'var1'], 'words': ['post', 'request', 'url', 'var0', 'with', 'parameters', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'url', 'var1': 'payload'}, 'snippet': 'r = requests.post(var0, data=var1)'}
Generated  translation
requests. post ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['open', 'a', 'file', 'str0', 'in', 'binary', 'write', 'mode'], 'words': ['open', 'a', 'file', 'str0', 'in', 'binary', 'write', 'mode'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '/home/user/test/wsservice/data.pkl'}, 'snippet': "output = open('str0', 'wb')"}
Generated  translation
f = open ('str0 ','rb') 
--------- B -----------
{'intent': {'gloss': ['calling', 'an', 'external', 'command', 'str0'], 'words': ['calling', 'an', 'external', 'command', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'ls -l'}, 'snippet': "call(['ls', '-l'])"}
Generated  translation
os. system ('str0') 
--------- B -----------
{'intent': {'gloss': ['request', 'http', 'url', 'var0', 'with', 'parameters', 'var1'], 'words': ['request', 'http', 'url', 'var0', 'with', 'parameters', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'url', 'var1': 'payload'}, 'snippet': 'r = requests.get(var0, params=var1)'}
Generated  translation
requests. get ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['kill', 'a', 'process', 'with', 'id', 'str0'], 'words': ['kill', 'a', 'process', 'with', 'id', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'process.pid'}, 'snippet': 'os.kill(process.pid, signal.sigkill)'}
Generated  translation
sys. path. insert ( 0,'str0') 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'string', 'var0', 'with', 'new', 'line', 'character'], 'words': ['split', 'a', 'string', 'var0', 'with', 'new', 'line', 'character'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': "var0.split('\\n')[:-1]"}
Generated  translation
re. split ('\ \ w + ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'str0', 'encoded', 'string', 'var0', 'into', 'a', 'list', 'of', 'characters'], 'words': ['split', 'a', 'str0', 'encoded', 'string', 'var0', 'into', 'a', 'list', 'of', 'characters'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'utf-8', 'var0': 'stru'}, 'snippet': "list(var0.decode('str0'))"}
Generated  translation
list ('str0') 
--------- B -----------
{'intent': {'gloss': ['erase', 'the', 'contents', 'of', 'a', 'file', 'var0'], 'words': ['erase', 'the', 'contents', 'of', 'a', 'file', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'filename'}, 'snippet': "open('var0', 'w').close()"}
Generated  translation
shutil. rmtree ( var0, ignore _ errors = false, onerror = none ) 
--------- B -----------
{'intent': {'gloss': ['replace', 'string', 'str0', 'in', 'string', 'var0', 'with', 'character', 'str1'], 'words': ['replace', 'string', 'str0', 'in', 'string', 'var0', 'with', 'character', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'and', 'var0': 'stuff', 'str1': '/'}, 'snippet': "var0.replace(' and ', 'str1')"}
Generated  translation
var0 = var0. replace ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['subtract', '5', 'hours', 'from', 'the', 'time', 'object', 'var0'], 'words': ['subtract', '5', 'hours', 'from', 'the', 'time', 'object', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'dt'}, 'snippet': 'var0 -= datetime.timedelta(hours=5)'}
Generated  translation
pandas. concat ( [ var0. time ( ) ] ). reset _ hours ( ) 
--------- B -----------
{'intent': {'gloss': ['encode', 'string', 'var0', 'using', 'hex', 'str0', 'encoding'], 'words': ['encode', 'string', 'var0', 'using', 'hex', 'str0', 'encoding'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'data', 'str0': 'hex'}, 'snippet': "print(var0.encode('str0'))"}
Generated  translation
var0. encode ('hex') 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'list', 'of', 'strings', 'var0', 'to', 'list', 'of', 'integers'], 'words': ['convert', 'a', 'list', 'of', 'strings', 'var0', 'to', 'list', 'of', 'integers'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'lst'}, 'snippet': '[map(int, sublist) for sublist in var0]'}
Generated  translation
[ int ( i ) for i in var0 ] 
--------- B -----------
{'intent': {'gloss': ['get', 'last', 'day', 'of', 'the', 'month', 'var0', 'in', 'year', 'var1'], 'words': ['get', 'last', 'day', 'of', 'the', 'month', 'var0', 'in', 'year', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'month', 'var1': 'year'}, 'snippet': 'calendar.monthrange(var1, var0)[1]'}
Generated  translation
var1. str. update ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'tuples', 'var0', 'by', 'second', 'parameter', 'in', 'the', 'tuple'], 'words': ['sort', 'a', 'list', 'of', 'tuples', 'var0', 'by', 'second', 'parameter', 'in', 'the', 'tuple'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'my_list'}, 'snippet': 'var0.sort(key=lambda x: x[1])'}
Generated  translation
sorted ( var0, key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['unpack', 'hexadecimal', 'string', 'var0', 'to', 'a', 'list', 'of', 'integer', 'values'], 'words': ['unpack', 'hexadecimal', 'string', 'var0', 'to', 'a', 'list', 'of', 'integer', 'values'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': "struct.unpack('11b', var0)"}
Generated  translation
[ int ( x ) for x in str ( var0 ) ] 
--------- B -----------
{'intent': {'gloss': ['generate', 'all', 'permutations', 'of', 'a', 'list', 'str0'], 'words': ['generate', 'all', 'permutations', 'of', 'a', 'list', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '[1, 2, 3]', '[ str0 ]': '[1, 2, 3]'}, 'snippet': 'itertools.permutations([ str0 ])'}
Generated  translation
list ( itertools. chain ( * str0 ) ) 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'str0', 'using', 'string', 'str1'], 'words': ['split', 'string', 'str0', 'using', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'happy_hats_for_cats', 'str1': '_for_'}, 'snippet': "re.split('str1', 'str0')"}
Generated  translation
re. split ('str1 ','str0') 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'object', 'var0', 'has', 'property', 'str0'], 'words': ['check', 'if', 'object', 'var0', 'has', 'property', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'str0': 'property'}, 'snippet': "if hasattr(var0, 'str0'):\n    pass"}
Generated  translation
hasattr ( var0,'str0') 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'object', 'var0', 'has', 'property', 'str0'], 'words': ['check', 'if', 'object', 'var0', 'has', 'property', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'str0': 'property'}, 'snippet': "if hasattr(var0, 'str0'):\n    pass"}
Generated  translation
hasattr ( var0,'str0') 
--------- B -----------
{'intent': {'gloss': ['django', 'jinja', 'slice', 'list', 'var0', 'by', 'str0'], 'words': ['django', 'jinja', 'slice', 'list', 'var0', 'by', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylist', 'str0': '3:8'}, 'snippet': "{{(var0 | slice): 'str0'}}"}
Generated  translation
{ { var0. get ('str0') } } 
--------- B -----------
{'intent': {'gloss': ['pandas', 'dataframe', 'var0', 'column', 'str0', 'to', 'list'], 'words': ['pandas', 'dataframe', 'var0', 'column', 'str0', 'to', 'list'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'a'}, 'snippet': "var0['str0'].values.tolist()"}
Generated  translation
var0 ['str0']. apply ( lambda x : x [ len ( x ) / 2 - 1 : len ( x ) / 2 + 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['print', 'a', 'celsius', 'symbol', 'on', 'x', 'axis', 'of', 'a', 'plot', 'var0'], 'words': ['print', 'a', 'celsius', 'symbol', 'on', 'x', 'axis', 'of', 'a', 'plot', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'ax'}, 'snippet': "var0.set_xlabel('temperature (℃)')"}
Generated  translation
print ('\ x1b [ 0m'+''. join ( var0, y ) ) 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'using', 'new', '-', 'line', 'character', 'str0', 'as', 'separator'], 'words': ['split', 'string', 'var0', 'using', 'new', '-', 'line', 'character', 'str0', 'as', 'separator'], 'after': [' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'str0': '\n'}, 'snippet': "var0.rstrip().split('str0')"}
Generated  translation
re. split ('[. ] ','str0') 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'unicode', 'string', 'var0', 'to', 'a', 'str0', 'string'], 'words': ['convert', 'a', 'unicode', 'string', 'var0', 'to', 'a', 'str0', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'str0': 'ascii'}, 'snippet': "var0.encode('str0', 'ignore')"}
Generated  translation
" " " str0 " " ". encode ('latin - 1') 
--------- B -----------
{'intent': {'gloss': ['print', 'str0', 'plus', 'unicode', 'character', 'ustr1'], 'words': ['print', 'str0', 'plus', 'unicode', 'character', 'ustr1'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'here is your checkmark:', 'str1': '✓'}, 'snippet': "print('here is your checkmark: ' + 'str1')"}
Generated  translation
print ('str0 '. encode ('utf - 8') ) 
--------- B -----------
{'intent': {'gloss': ['determine', 'the', 'byte', 'length', 'of', 'a', 'utf', '-', '8', 'encoded', 'string', 'var0'], 'words': ['determine', 'the', 'byte', 'length', 'of', 'a', 'utf', '-', '8', 'encoded', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': "return len(var0.encode('utf-8'))"}
Generated  translation
" " " x = { } " " ". format ( var0. decode ('utf8') ). encode ('utf8') 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'list', 'of', 'lists', 'var0', 'into', 'a', 'list', 'of', 'strings', 'keeping', 'empty', 'sub', '-', 'lists', 'as', 'empty', 'string', 'str0'], 'words': ['convert', 'a', 'list', 'of', 'lists', 'var0', 'into', 'a', 'list', 'of', 'strings', 'keeping', 'empty', 'sub', '-', 'lists', 'as', 'empty', 'string', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list_of_lists', 'str0': ''}, 'snippet': "['str0'.join(l) for l in var0]"}
Generated  translation
[ str0 ] 
--------- B -----------
{'intent': {'gloss': ['lookup', 'an', 'attribute', 'in', 'any', 'scope', 'by', 'name', 'str0'], 'words': ['lookup', 'an', 'attribute', 'in', 'any', 'scope', 'by', 'name', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'range'}, 'snippet': "getattr(__builtins__, 'str0')"}
Generated  translation
print ( os. path. split ('str0') ) 
--------- B -----------
{'intent': {'gloss': ['how', 'to', 'erase', 'the', 'file', 'contents', 'of', 'text', 'file', 'in', 'python', '?'], 'words': ['how', 'to', 'erase', 'the', 'file', 'contents', 'of', 'text', 'file', 'in', 'python', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "open('file.txt', 'w').close()"}
Generated  translation
os. system ('cls') 
--------- B -----------
{'intent': {'gloss': ['get', 'all', 'the', 'items', 'from', 'a', 'list', 'of', 'tuple', 'str0', 'where', 'second', 'item', 'in', 'tuple', 'is', 'str1', '.'], 'words': ['get', 'all', 'the', 'items', 'from', 'a', 'list', 'of', 'tuple', 'str0', 'where', 'second', 'item', 'in', 'tuple', 'is', 'str1', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'l', 'str1': '1'}, 'snippet': '[x for x in str0 if x[1] == 1]'}
Generated  translation
[ x for x in str0 if x [ 2 ] = = 0 ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'python', 'dictionary', 'var0', 'to', 'json', 'array'], 'words': ['convert', 'python', 'dictionary', 'var0', 'to', 'json', 'array'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'your_data'}, 'snippet': 'json.dumps(var0, ensure_ascii=false)'}
Generated  translation
json. dumps ( {'apple':'cat ','banana':'dog ','pear':'fish'} ) 
--------- B -----------
{'intent': {'gloss': ['change', 'the', 'case', 'of', 'the', 'first', 'letter', 'in', 'string', 'var0'], 'words': ['change', 'the', 'case', 'of', 'the', 'first', 'letter', 'in', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': 'return var0[0].upper() + var0[1:]'}
Generated  translation
var0. replace ('','' ) [ 0 ] 
--------- B -----------
{'intent': {'gloss': ['zip', 'keys', 'with', 'individual', 'values', 'in', 'lists', 'var0', 'and', 'var1'], 'words': ['zip', 'keys', 'with', 'individual', 'values', 'in', 'lists', 'var0', 'and', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'k', 'var1': 'v'}, 'snippet': '[dict(zip(var0, x)) for x in var1]'}
Generated  translation
[ value for item in zip ( var0, var1 ) if i! = j ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'var0', 'milliseconds', 'to', 'a', 'datetime', 'object'], 'words': ['convert', 'var0', 'milliseconds', 'to', 'a', 'datetime', 'object'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'ms'}, 'snippet': 'datetime.datetime.fromtimestamp(var0 / 1000.0)'}
Generated  translation
datetime. datetime. combine ( var0, datetime. time ( ) ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'list', 'var0', 'by', 'keys', 'value', 'str0'], 'words': ['sort', 'list', 'var0', 'by', 'keys', 'value', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'results', 'str0': 'year'}, 'snippet': "sorted(var0, key=itemgetter('str0'))"}
Generated  translation
sorted ( var0, key = lambda x : x [ str0 ] ) 
--------- B -----------
{'intent': {'gloss': ['filter', 'model', 'str0', 'where', 'str1', 'is', 'not', 'equal', 'to', '3', 'in', 'django'], 'words': ['filter', 'model', 'str0', 'where', 'str1', 'is', 'not', 'equal', 'to', '3', 'in', 'django'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'entry', 'str1': 'id'}, 'snippet': 'str0.objects.filter(~q(str1=3))'}
Generated  translation
str0. objects. filter ( str1 = [ ( a. b ) > 3 ] ) 
--------- B -----------
{'intent': {'gloss': ['subtract', '1', 'hour', 'and', '10', 'minutes', 'from', 'time', 'object', 'var0'], 'words': ['subtract', '1', 'hour', 'and', '10', 'minutes', 'from', 'time', 'object', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 't'}, 'snippet': 'var0 - datetime.timedelta(hours=1, minutes=10)'}
Generated  translation
var0. sub ( var0. columns [ 0 : - 1 ], var0. size ( ) ) 
--------- B -----------
{'intent': {'gloss': ['calling', 'an', 'external', 'command', 'str0'], 'words': ['calling', 'an', 'external', 'command', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'echo hello world'}, 'snippet': "print(os.popen('str0').read())"}
Generated  translation
os. system ('str0') 
--------- B -----------
{'intent': {'gloss': ['recursively', 'go', 'through', 'all', 'subdirectories', 'and', 'files', 'in', 'var0'], 'words': ['recursively', 'go', 'through', 'all', 'subdirectories', 'and', 'files', 'in', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'rootdir'}, 'snippet': 'for root, subfolders, files in os.walk(var0):\n    pass'}
Generated  translation
for line in open ( var0 ) : pass 
--------- B -----------
{'intent': {'gloss': ['mysql', 'execute', 'query', 'str0', 'with', 'parameters', 'var0', 'and', 'var1'], 'words': ['mysql', 'execute', 'query', 'str0', 'with', 'parameters', 'var0', 'and', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'select * from foo where bar = %s and baz = %s', 'var0': 'param1', 'var1': 'param2'}, 'snippet': "c.execute('str0', (var0, var1))"}
Generated  translation
cursor. execute ('insert into table values ( % s, % s, % s ) ', ( var0, var1, var1 ) ) 
--------- B -----------
{'intent': {'gloss': ['parse', 'string', 'var0', 'to', 'float', 'or', 'int'], 'words': ['parse', 'string', 'var0', 'to', 'float', 'or', 'int'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': 'try:\n    return int(var0)\nexcept valueerror:\n    return float(var0)'}
Generated  translation
int (''. join ( str ( x ) for x in var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'value', 'of', 'attribute', 'str0', 'of', 'object', 'var0', 'with', 'default', 'value', 'str1'], 'words': ['get', 'the', 'value', 'of', 'attribute', 'str0', 'of', 'object', 'var0', 'with', 'default', 'value', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'property', 'var0': 'a', 'str1': 'default value'}, 'snippet': "getattr(var0, 'str0', 'str1')"}
Generated  translation
print ( var0. encode ('str0'). decode ('str1') ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'largest', 'index', 'of', 'the', 'last', 'occurrence', 'of', 'characters', 'str0', 'in', 'string', 'var0'], 'words': ['get', 'the', 'largest', 'index', 'of', 'the', 'last', 'occurrence', 'of', 'characters', 'str0', 'in', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '([{', 'var0': 'test_string'}, 'snippet': "max(var0.rfind(i) for i in 'str0')"}
Generated  translation
print ( var0. index ( [ str0 ] ). transpose ( ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'data', 'of', 'columns', 'with', 'null', 'values', 'in', 'dataframe', 'var0'], 'words': ['get', 'data', 'of', 'columns', 'with', 'null', 'values', 'in', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': 'var0[pd.isnull(var0).any(axis=1)]'}
Generated  translation
var0. loc [ :, ( list ( itertools. product ( ['null ','str0'] ) ) ] 
--------- B -----------
{'intent': {'gloss': ['delete', 'third', 'row', 'in', 'a', 'numpy', 'array', 'var0'], 'words': ['delete', 'third', 'row', 'in', 'a', 'numpy', 'array', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'var0 = numpy.delete(var0, 2, axis=1)'}
Generated  translation
var0 [ np. delete ( var0, 1 ) ] 
--------- B -----------
{'intent': {'gloss': ['delete', 'first', 'row', 'of', 'array', 'var0'], 'words': ['delete', 'first', 'row', 'of', 'array', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'var0 = numpy.delete(var0, 0, axis=0)'}
Generated  translation
var0 [ var0. pop ( 0 ) ] 
--------- B -----------
{'intent': {'gloss': ['how', 'can', 'i', 'launch', 'an', 'instance', 'of', 'an', 'application', 'using', 'python', '?'], 'words': ['how', 'can', 'i', 'launch', 'an', 'instance', 'of', 'an', 'application', 'using', 'python', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "os.system('start excel.exe <path/to/file>')"}
Generated  translation
sys. path. append ('my _ instance') 
--------- B -----------
{'intent': {'gloss': ['sum', 'the', 'length', 'of', 'lists', 'in', 'list', 'var0', 'that', 'are', 'more', 'than', '1', 'item', 'in', 'length'], 'words': ['sum', 'the', 'length', 'of', 'lists', 'in', 'list', 'var0', 'that', 'are', 'more', 'than', '1', 'item', 'in', 'length'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'sum(len(y) for y in var0 if len(y) > 1)'}
Generated  translation
length = sum ( len ( x ) for x in var0 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'utf', '-', '8', 'with', 'bom', 'string', 'var0', 'to', 'utf', '-', '8', 'with', 'no', 'bom', 'var1'], 'words': ['convert', 'utf', '-', '8', 'with', 'bom', 'string', 'var0', 'to', 'utf', '-', '8', 'with', 'no', 'bom', 'var1'], 'after': [' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's', 'var1': 'u'}, 'snippet': "var1 = var0.decode('utf-8-sig')"}
Generated  translation
time. mkv ('var0 ', var1 ) 
--------- B -----------
{'intent': {'gloss': ['shutdown', 'a', 'computer', 'using', 'subprocess'], 'words': ['shutdown', 'a', 'computer', 'using', 'subprocess'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "subprocess.call(['shutdown', '/s'])"}
Generated  translation
subprocess. check _ trace ( ) 
--------- B -----------
{'intent': {'gloss': ['abort', 'a', 'computer', 'shutdown', 'using', 'subprocess'], 'words': ['abort', 'a', 'computer', 'shutdown', 'using', 'subprocess'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "subprocess.call(['shutdown', '/a '])"}
Generated  translation
subprocess. check _ abort ( ) 
--------- B -----------
{'intent': {'gloss': ['logoff', 'computer', 'having', 'windows', 'operating', 'system', 'using', 'python'], 'words': ['logoff', 'computer', 'having', 'windows', 'operating', 'system', 'using', 'python'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "subprocess.call(['shutdown', '/l '])"}
Generated  translation
import platform platform. system ( ) 
--------- B -----------
{'intent': {'gloss': ['shutdown', 'and', 'restart', 'a', 'computer', 'running', 'windows', 'from', 'script'], 'words': ['shutdown', 'and', 'restart', 'a', 'computer', 'running', 'windows', 'from', 'script'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "subprocess.call(['shutdown', '/r'])"}
Generated  translation
sys. exit ( 0 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'strings', 'in', 'list', '-', 'of', '-', 'lists', 'var0', 'to', 'ints'], 'words': ['convert', 'strings', 'in', 'list', '-', 'of', '-', 'lists', 'var0', 'to', 'ints'], 'after': [' ', ' ', ' ', '', '', '', '', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'lst'}, 'snippet': '[[int(x) for x in sublist] for sublist in var0]'}
Generated  translation
[ int ( i ) for i in var0 ] 
--------- B -----------
{'intent': {'gloss': ['if', 'selenium', 'textarea', 'element', 'var0', 'is', 'not', 'empty', ',', 'clear', 'the', 'field'], 'words': ['if', 'selenium', 'textarea', 'element', 'var0', 'is', 'not', 'empty', ',', 'clear', 'the', 'field'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'foo'}, 'snippet': "driver.find_element_by_id('var0').clear()"}
Generated  translation
var0. pop ('var0') 
--------- B -----------
{'intent': {'gloss': ['join', 'list', 'of', 'numbers', 'str0', 'to', 'string', 'of', 'numbers', '.'], 'words': ['join', 'list', 'of', 'numbers', 'str0', 'to', 'string', 'of', 'numbers', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': '[1,2,3,4]', '[ str0 ]': '[1,2,3,4]'}, 'snippet': '"""""".join([1, 2, 3, 4])'}
Generated  translation
[ map ( int, [ str0 ] ) 
--------- B -----------
{'intent': {'gloss': ['parse', 'a', 'file', 'str0', 'using', 'expat', 'parsing', 'in', 'python', '3'], 'words': ['parse', 'a', 'file', 'str0', 'using', 'expat', 'parsing', 'in', 'python', '3'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'sample.xml'}, 'snippet': "parser.parsefile(open('str0', 'rb'))"}
Generated  translation
with open ('str0 ','r') as executable ( expaght ) 
--------- B -----------
{'intent': {'gloss': ['update', 'the', 'dictionary', 'var0', 'with', 'dynamic', 'keys', 'var1', 'and', 'values', 'with', 'key', 'str0', 'from', 'dictionary', 'var2'], 'words': ['update', 'the', 'dictionary', 'var0', 'with', 'dynamic', 'keys', 'var1', 'and', 'values', 'with', 'key', 'str0', 'from', 'dictionary', 'var2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mydic', 'var1': 'i', 'str0': 'name', 'var2': 'o'}, 'snippet': "var0.update({var1: var2['str0']})"}
Generated  translation
var0. update ( var1 ) 
--------- B -----------
{'intent': {'gloss': ['divide', 'the', 'members', 'of', 'a', 'list', 'var0', 'by', 'the', 'corresponding', 'members', 'of', 'another', 'list', 'var1'], 'words': ['divide', 'the', 'members', 'of', 'a', 'list', 'var0', 'by', 'the', 'corresponding', 'members', 'of', 'another', 'list', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'conversions', 'var1': 'trials'}, 'snippet': '[(c / t) for c, t in zip(var0, var1)]'}
Generated  translation
[ ( x + y ) for x, y in zip ( var0, var1 ) ] 
--------- B -----------
{'intent': {'gloss': ['get', 'index', 'of', 'elements', 'in', 'array', 'var0', 'that', 'occur', 'in', 'another', 'array', 'var1'], 'words': ['get', 'index', 'of', 'elements', 'in', 'array', 'var0', 'that', 'occur', 'in', 'another', 'array', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'b'}, 'snippet': 'np.where(np.in1d(var0, var1))[0]'}
Generated  translation
np. in1d ( var0, var1 ). nonzero ( ) [ 0 ] 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'based', 'on', 'white', 'spaces'], 'words': ['split', 'string', 'var0', 'based', 'on', 'white', 'spaces'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': "re.findall('\\\\s+|\\\\s+', var0)"}
Generated  translation
" " " var0 " " ". split ( ) 
--------- B -----------
{'intent': {'gloss': ['display', 'first', '5', 'characters', 'of', 'string', 'str0'], 'words': ['display', 'first', '5', 'characters', 'of', 'string', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'aaabbbccc'}, 'snippet': '"""{:.5}""".format(\'str0\')'}
Generated  translation
print ('str0 '. join ( [ item [ 0 ] for item in range ( 1, len ( str0 ) ), 2 ) ) 
--------- B -----------
{'intent': {'gloss': ['substitute', 'occurrences', 'of', 'unicode', 'regex', 'pattern', 'ustr0', 'with', 'empty', 'string', 'str1', 'in', 'string', 'var0'], 'words': ['substitute', 'occurrences', 'of', 'unicode', 'regex', 'pattern', 'ustr0', 'with', 'empty', 'string', 'str1', 'in', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '\\p{p}+', 'str1': '', 'var0': 'text'}, 'snippet': "return re.sub('str0', 'str1', var0)"}
Generated  translation
re. sub ('str0 ','str1 ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['clear', 'text', 'from', 'textarea', 'str0', 'with', 'selenium'], 'words': ['clear', 'text', 'from', 'textarea', 'str0', 'with', 'selenium'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'foo'}, 'snippet': "driver.find_element_by_id('str0').clear()"}
Generated  translation
browser. find _ element _ by _ xpath ('str0'). click ( ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'all', 'string', 'elements', 'in', 'list', 'var0', 'are', 'upper', '-', 'cased'], 'words': ['check', 'if', 'all', 'string', 'elements', 'in', 'list', 'var0', 'are', 'upper', '-', 'cased'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '']}, 'slot_map': {'var0': 'words'}, 'snippet': 'print(all(word[0].isupper() for word in var0))'}
Generated  translation
all ( isinstance ( x, int ) for x in var0 ) 
--------- B -----------
{'intent': {'gloss': ['change', 'flask', 'security', 'register', 'url', 'to', 'str0'], 'words': ['change', 'flask', 'security', 'register', 'url', 'to', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '/create_account'}, 'snippet': "app.config['security_register_url'] = 'str0'"}
Generated  translation
urllib. request. urlretrieve ('str0 ','str0') 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'average', 'values', 'from', 'two', 'numpy', 'arrays', 'var0', 'and', 'var1'], 'words': ['get', 'the', 'average', 'values', 'from', 'two', 'numpy', 'arrays', 'var0', 'and', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'old_set', 'var1': 'new_set'}, 'snippet': 'np.mean(np.array([var0, var1]), axis=0)'}
Generated  translation
np. array ( [ np. arange ( var0 ), np. arange ( 2 ), np. ones ( var1 ) ] ). min ( axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'pandas', 'group', 'by', 'object', 'to', 'multi', '-', 'indexed', 'dataframe', 'with', 'indices', 'str0', 'and', 'str1'], 'words': ['convert', 'pandas', 'group', 'by', 'object', 'to', 'multi', '-', 'indexed', 'dataframe', 'with', 'indices', 'str0', 'and', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'name', 'str1': 'destination'}, 'snippet': "df.set_index(['str0', 'str1'])"}
Generated  translation
df. groupby ('str0'). agg ( ['str1 ','str0'] ) 
--------- B -----------
{'intent': {'gloss': ['print', 'list', 'of', 'items', 'var0'], 'words': ['print', 'list', 'of', 'items', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylist'}, 'snippet': "print('\\n'.join(str(p) for p in var0))"}
Generated  translation
print ( [ row [ 1 ] for row in var0 ] ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'dict', 'by', 'value', 'python'], 'words': ['sort', 'dict', 'by', 'value', 'python'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'sorted(list(data.items()), key=lambda x: x[1])'}
Generated  translation
sorted ( list ( mydict. items ( ) ), key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['calling', 'an', 'external', 'command', 'str0'], 'words': ['calling', 'an', 'external', 'command', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'echo hello world'}, 'snippet': "return_code = subprocess.call('str0', shell=true)"}
Generated  translation
os. system ('str0') 
--------- B -----------
{'intent': {'gloss': ['match', 'zero', '-', 'or', '-', 'more', 'instances', 'of', 'lower', 'case', 'alphabet', 'characters', 'in', 'a', 'string', 'str0'], 'words': ['match', 'zero', '-', 'or', '-', 'more', 'instances', 'of', 'lower', 'case', 'alphabet', 'characters', 'in', 'a', 'string', 'str0'], 'after': [' ', '', '', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'f233op'}, 'snippet': "re.findall('([a-z]*)', 'str0')"}
Generated  translation
re. findall ('\ \ w + ( [ ^ [ ] + ) \ \ 2 + ) ','str0') 
--------- B -----------
{'intent': {'gloss': ['match', 'zero', '-', 'or', '-', 'more', 'instances', 'of', 'lower', 'case', 'alphabet', 'characters', 'in', 'a', 'string', 'str0'], 'words': ['match', 'zero', '-', 'or', '-', 'more', 'instances', 'of', 'lower', 'case', 'alphabet', 'characters', 'in', 'a', 'string', 'str0'], 'after': [' ', '', '', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'f233op'}, 'snippet': "re.findall('([a-z])*', 'str0')"}
Generated  translation
re. findall ('\ \ w + ( [ ^ [ ] + ) \ \ 2 + ) ','str0') 
--------- B -----------
{'intent': {'gloss': ['remove', 'duplicates', 'elements', 'from', 'list', 'var0', 'and', 'sort', 'it', 'in', 'ascending', 'order'], 'words': ['remove', 'duplicates', 'elements', 'from', 'list', 'var0', 'and', 'sort', 'it', 'in', 'ascending', 'order'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'sequences'}, 'snippet': 'sorted(set(itertools.chain.from_iterable(var0)))'}
Generated  translation
sorted ( var0, key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['print', 'a', 'celsius', 'symbol', 'with', 'matplotlib'], 'words': ['print', 'a', 'celsius', 'symbol', 'with', 'matplotlib'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "ax.set_xlabel('temperature ($^\\\\circ$c)')"}
Generated  translation
print ('total score for { 0 :. 2f } '. format ( flt ) ) 
--------- B -----------
{'intent': {'gloss': ['create', 'new', 'list', 'var0', 'by', 'splitting', 'each', 'item', 'in', 'list', 'var1'], 'words': ['create', 'new', 'list', 'var0', 'by', 'splitting', 'each', 'item', 'in', 'list', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'result', 'var1': 'words'}, 'snippet': "var0 = [item for word in var1 for item in word.split(',')]"}
Generated  translation
var0 = [ x for x in var1 if x ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'json', 'string', 'str0', 'into', 'a', 'datetime', 'object', 'using', 'format', 'str1'], 'words': ['convert', 'json', 'string', 'str0', 'into', 'a', 'datetime', 'object', 'using', 'format', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '2012-05-29t19:30:03.283z', 'str1': '%y-%m-%dt%h:%m:%s.%fz'}, 'snippet': "datetime.datetime.strptime('str0', 'str1')"}
Generated  translation
datetime. datetime. strptime ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['multiply', 'the', 'columns', 'of', 'sparse', 'matrix', 'var0', 'by', 'array', 'var1', 'then', 'multiply', 'the', 'rows', 'of', 'the', 'resulting', 'matrix', 'by', 'array', 'var1'], 'words': ['multiply', 'the', 'columns', 'of', 'sparse', 'matrix', 'var0', 'by', 'array', 'var1', 'then', 'multiply', 'the', 'rows', 'of', 'the', 'resulting', 'matrix', 'by', 'array', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'm', 'var1': 'a', 'var2': 'a'}, 'snippet': 'numpy.dot(numpy.dot(var2, var0), var2)'}
Generated  translation
np. multiply ( var0, var1 ). sum ( axis = 0 ) 
--------- B -----------
{'intent': {'gloss': ['group', 'a', 'pandas', 'data', 'frame', 'by', 'monthly', 'frequenct', 'var0', 'using', 'groupby'], 'words': ['group', 'a', 'pandas', 'data', 'frame', 'by', 'monthly', 'frequenct', 'var0', 'using', 'groupby'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'm'}, 'snippet': "df.groupby(pd.timegrouper(freq='var0'))"}
Generated  translation
df. groupby ('stock'). agg ( ['var0 ','var0'] ). sum ( ) 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'list', 'of', 'pairs', 'of', 'key', '-', 'value', 'sorted', 'by', 'values', 'in', 'dictionary', 'var0'], 'words': ['get', 'a', 'list', 'of', 'pairs', 'of', 'key', '-', 'value', 'sorted', 'by', 'values', 'in', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'data'}, 'snippet': 'sorted(list(var0.items()), key=lambda x: x[1])'}
Generated  translation
sorted ( list ( var0. items ( ) ), key = lambda x : var0 [ x ] ['var0'], reverse = true ) 
--------- B -----------
{'intent': {'gloss': ['add', '1', 'hour', 'and', '2', 'minutes', 'to', 'time', 'object', 'var0'], 'words': ['add', '1', 'hour', 'and', '2', 'minutes', 'to', 'time', 'object', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 't'}, 'snippet': 'dt = datetime.datetime.combine(datetime.date.today(), var0)'}
Generated  translation
time. mkutil ( var0. index ( [ 1 :, ( 3 ) ] ), axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'dictionary', 'values', 'by', 'str0', 'in', 'reverse', 'order'], 'words': ['sort', 'a', 'list', 'of', 'dictionary', 'values', 'by', 'str0', 'in', 'reverse', 'order'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'date'}, 'snippet': "list.sort(key=lambda item: item['str0'], reverse=true)"}
Generated  translation
sorted ( str0, key = lambda x : x [ 1 ], reverse = true ) 
--------- B -----------
{'intent': {'gloss': ['create', 'dataframe', 'var0', 'with', 'content', 'of', 'hdf', 'store', 'file', 'str0', 'with', 'key', 'of', 'str1'], 'words': ['create', 'dataframe', 'var0', 'with', 'content', 'of', 'hdf', 'store', 'file', 'str0', 'with', 'key', 'of', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': '/home/.../data.h5', 'str1': 'firstset'}, 'snippet': "df1 = pd.read_hdf('str0', 'str1')"}
Generated  translation
var0 = pd. read _ csv ('str0 ', dtype = {'str1': np. var1 } ) 
--------- B -----------
{'intent': {'gloss': ['matplotlib', 'change', 'marker', 'size', 'to', '500'], 'words': ['matplotlib', 'change', 'marker', 'size', 'to', '500'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "scatter(x, y, s=500, color='green', marker='h')"}
Generated  translation
plt. plot ( list ( range ( 10 ) ), lines ) 
--------- B -----------
{'intent': {'gloss': ['count', 'var0', 'values', 'associated', 'with', 'key', 'str0', 'in', 'dictionary', 'var1'], 'words': ['count', 'var0', 'values', 'associated', 'with', 'key', 'str0', 'in', 'dictionary', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'true', 'str0': 'one', 'var1': 'tadas'}, 'snippet': "sum(item['str0'] for item in list(var1.values()))"}
Generated  translation
var1. count ('str0') 
--------- B -----------
{'intent': {'gloss': ['get', 'last', 'day', 'of', 'the', 'first', 'month', 'in', 'year', '2000'], 'words': ['get', 'last', 'day', 'of', 'the', 'first', 'month', 'in', 'year', '2000'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'datetime.date(2000, 2, 1) - datetime.timedelta(days=1)'}
Generated  translation
datetime. datetime. strptime ('january 11, 2010 ','% b % d, % y'). strftime ('% a') 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'str0', 'based', 'on', 'string', 'str1', ',', 'str2', 'or', 'str3'], 'words': ['split', 'string', 'str0', 'based', 'on', 'string', 'str1', ',', 'str2', 'or', 'str3'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'sad_pandas_and_happy_cats_for_people', 'str1': 'and', 'str2': 'or', 'str3': 'for'}, 'snippet': "re.split('_(?:for|or|and)_', 'str0')"}
Generated  translation
" " " str0 " " ". split ('str1 ', 1 ) 
--------- B -----------
{'intent': {'gloss': ['pads', 'string', 'str0', 'on', 'the', 'left', 'with', '1', 'zero'], 'words': ['pads', 'string', 'str0', 'on', 'the', 'left', 'with', '1', 'zero'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '5'}, 'snippet': "print('{0}'.format('str0'.zfill(2)))"}
Generated  translation
" " " str0 " " ". rstrip ('\ n') 
--------- B -----------
{'intent': {'gloss': ['remove', 'all', 'items', 'from', 'a', 'dictionary', 'var0', 'whose', 'values', 'are', 'str0'], 'words': ['remove', 'all', 'items', 'from', 'a', 'dictionary', 'var0', 'whose', 'values', 'are', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mydict', 'str0': '42'}, 'snippet': '{key: val for key, val in list(var0.items()) if val != 42}'}
Generated  translation
var0 = dict ( ( k, v ) for k, v in var0. items ( ) if v > 0 ) 
--------- B -----------
{'intent': {'gloss': ['merge', 'rows', 'from', 'dataframe', 'var0', 'with', 'rows', 'from', 'dataframe', 'var1', 'and', 'calculate', 'the', 'mean', 'for', 'rows', 'that', 'have', 'the', 'same', 'value', 'of', 'axis', '1'], 'words': ['merge', 'rows', 'from', 'dataframe', 'var0', 'with', 'rows', 'from', 'dataframe', 'var1', 'and', 'calculate', 'the', 'mean', 'for', 'rows', 'that', 'have', 'the', 'same', 'value', 'of', 'axis', '1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df1', 'var1': 'df2'}, 'snippet': 'pd.concat((var0, var1), axis=1).mean(axis=1)'}
Generated  translation
pd. merge ( var0, var1, on ='var0 ', how ='inner') 
--------- B -----------
{'intent': {'gloss': ['invoke', 'perl', 'script', 'str0', 'using', 'perl', 'interpeter', 'str1', 'and', 'send', 'argument', 'var0', 'to', 'it'], 'words': ['invoke', 'perl', 'script', 'str0', 'using', 'perl', 'interpeter', 'str1', 'and', 'send', 'argument', 'var0', 'to', 'it'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': './uireplace.pl', 'str1': '/usr/bin/perl', 'var0': 'var'}, 'snippet': "subprocess.call(['str1', 'str0', var0])"}
Generated  translation
system ('str1'). permutations ( var0,'str0') 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'key', 'str0', 'and', 'key', 'str1', 'are', 'presented', 'in', 'dictionary', 'var0'], 'words': ['check', 'if', 'key', 'str0', 'and', 'key', 'str1', 'are', 'presented', 'in', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'stackoverflow', 'str1': 'google', 'var0': 'sites'}, 'snippet': "set(['str0', 'str1']).issubset(var0)"}
Generated  translation
{ k : var0 [ k ] for k in ('str0 ','str1') } 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'elements', 'in', 'list', 'var0', 'are', 'coherent', 'in', 'order'], 'words': ['check', 'if', 'elements', 'in', 'list', 'var0', 'are', 'coherent', 'in', 'order'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'my_list'}, 'snippet': 'return var0 == list(range(var0[0], var0[-1] + 1))'}
Generated  translation
len ( set ( var0 ) ) = = 1 
--------- B -----------
{'intent': {'gloss': ['get', 'data', 'from', 'dataframe', 'var0', 'where', 'column', 'str0', 'is', 'equal', 'to', '0'], 'words': ['get', 'data', 'from', 'dataframe', 'var0', 'where', 'column', 'str0', 'is', 'equal', 'to', '0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'x'}, 'snippet': "var0.groupby('user')['str0'].transform(sum) == 0"}
Generated  translation
var0. loc [ var0 ['str0'] = = 0 ] 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'nested', 'list', 'by', 'the', 'inverse', 'of', 'element', '2', ',', 'then', 'by', 'element', '1'], 'words': ['sort', 'a', 'nested', 'list', 'by', 'the', 'inverse', 'of', 'element', '2', ',', 'then', 'by', 'element', '1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'sorted(l, key=lambda x: (-int(x[1]), x[0]))'}
Generated  translation
sorted ( list ( range ( 2 ), key = lambda x : x [ 1 ] ), x [ 0 ] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'string', 'var0', 'between', 'two', 'substrings', 'in', 'a', 'string', 'str0', 'using', 'regex'], 'words': ['get', 'a', 'string', 'var0', 'between', 'two', 'substrings', 'in', 'a', 'string', 'str0', 'using', 'regex'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'randomkey123xyz987', 'str0': "api('randomkey123xyz987', 'key', 'text')"}, 'snippet': 're.findall("api\\\\(\'(.*?)\'", \'str0\')'}
Generated  translation
re. findall ('\ \ b (? : b + w ) + \ \ b ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['return', 'the', 'decimal', 'value', 'for', 'each', 'hex', 'character', 'in', 'data', 'var0'], 'words': ['return', 'the', 'decimal', 'value', 'for', 'each', 'hex', 'character', 'in', 'data', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'data'}, 'snippet': "print(' '.join([str(ord(a)) for a in var0]))"}
Generated  translation
var0 = int (''. join ( lambda x : x. split ( '.') [ 0 ] ) 
--------- B -----------
{'intent': {'gloss': ['delete', 'letters', 'from', 'string', 'str0'], 'words': ['delete', 'letters', 'from', 'string', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '12454v'}, 'snippet': '"""""".join(filter(str.isdigit, \'str0\'))'}
Generated  translation
" " " str0 " " ". replace ('','' ) 
--------- B -----------
{'intent': {'gloss': ['generate', 'all', 'permutations', 'of', 'list', 'str0', 'and', 'list', 'str1'], 'words': ['generate', 'all', 'permutations', 'of', 'list', 'str0', 'and', 'list', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '[1, 2, 3]', 'str1': '[4, 5, 6]', '[ str0 ]': '[1, 2, 3]', '[ str1 ]': '[4, 5, 6]'}, 'snippet': 'print(list(itertools.product([ str0 ], [ str1 ])))'}
Generated  translation
list ( itertools. product ( ['str0 ','str1'], repeat = true ) ) 
--------- B -----------
{'intent': {'gloss': ['call', 'base', 'class', "'", 's', '_', '_', 'init', '_', '_', 'method', 'from', 'the', 'child', 'class', 'var0'], 'words': ['call', 'base', 'class', "'", 's', '_', '_', 'init', '_', '_', 'method', 'from', 'the', 'child', 'class', 'var0'], 'after': [' ', ' ', '', '', ' ', '', '', '', '', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'childclass'}, 'snippet': 'super(var0, self).__init__(*args, **kwargs)'}
Generated  translation
globals ( ). update ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'structured', 'numpy', 'array', 'str0', 'on', 'multiple', 'columns', 'str1', ',', 'str2', 'and', 'str3', '.'], 'words': ['sort', 'a', 'structured', 'numpy', 'array', 'str0', 'on', 'multiple', 'columns', 'str1', ',', 'str2', 'and', 'str3', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'df', 'str1': 'year', 'str2': 'month', 'str3': 'day'}, 'snippet': "str0.sort(['str1', 'str2', 'str3'])"}
Generated  translation
str0. sort ( ['str1 ','str2'], axis = 1, inplace = true ) 
--------- B -----------
{'intent': {'gloss': ['group', 'rows', 'of', 'pandas', 'dataframe', 'var0', 'with', 'same', 'str0'], 'words': ['group', 'rows', 'of', 'pandas', 'dataframe', 'var0', 'with', 'same', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'id'}, 'snippet': "var0.groupby('str0').agg(lambda x: x.tolist())"}
Generated  translation
var0. groupby ( var0. index. map ( lambda x : x. mean ( ) ) ) 
--------- B -----------
{'intent': {'gloss': ['decode', 'url', '-', 'encoded', 'string', 'var0', 'to', 'its', 'character', 'equivalents'], 'words': ['decode', 'url', '-', 'encoded', 'string', 'var0', 'to', 'its', 'character', 'equivalents'], 'after': [' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'some_string'}, 'snippet': 'urllib.parse.unquote(urllib.parse.unquote(var0))'}
Generated  translation
urllib. parse. unquote ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['create', 'array', 'var0', 'containing', 'integers', 'from', 'stdin'], 'words': ['create', 'array', 'var0', 'containing', 'integers', 'from', 'stdin'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'var0.fromlist([int(val) for val in stdin.read().split()])'}
Generated  translation
var0 = [ int ( x ) for x in var0 ] 
--------- B -----------
{'intent': {'gloss': ['get', 'all', 'var0', 'tags', 'where', 'the', 'text', 'starts', 'with', 'value', 'str0', 'using', 'regex'], 'words': ['get', 'all', 'var0', 'tags', 'where', 'the', 'text', 'starts', 'with', 'value', 'str0', 'using', 'regex'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'str0': 'some text'}, 'snippet': 'doc.xpath("//a[starts-with(text(),\'some text\')]")'}
Generated  translation
re. search ('[ a - za - z ] ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['decode', 'a', 'urllib', 'escaped', 'url', 'string', 'var0', 'with', 'var1'], 'words': ['decode', 'a', 'urllib', 'escaped', 'url', 'string', 'var0', 'with', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'url', 'var1': 'utf8'}, 'snippet': "var0 = urllib.parse.unquote(var0).decode('var1')"}
Generated  translation
urllib. parse. quote _ plus ('var0') 
--------- B -----------
{'intent': {'gloss': ['find', 'all', 'occurrences', 'of', 'a', 'substring', 'in', 'a', 'string'], 'words': ['find', 'all', 'occurrences', 'of', 'a', 'substring', 'in', 'a', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "[m.start() for m in re.finditer('test', 'test test test test')]"}
Generated  translation
re. findall ('\ \ b [ ^ \ \ s ] + ','', var0 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'number', '2130706433', 'to', 'ip', 'string'], 'words': ['convert', 'a', 'number', '2130706433', 'to', 'ip', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "socket.inet_ntoa(struct.pack('!l', 2130706433))"}
Generated  translation
struct. unpack ('f ', 1633837924 ) 
--------- B -----------
{'intent': {'gloss': ['assign', 'an', 'array', 'of', 'floats', 'in', 'range', 'from', '0', 'to', '100', 'to', 'a', 'variable', 'var0'], 'words': ['assign', 'an', 'array', 'of', 'floats', 'in', 'range', 'from', '0', 'to', '100', 'to', 'a', 'variable', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'values'}, 'snippet': 'var0 = np.array([i for i in range(100)], dtype=np.float64)'}
Generated  translation
var0 = np. array ( [ ( 0, 1 ), ( 100 ) ] ) 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'numpy', 'array', 'containing', 'elements', 'of', 'array', 'var0', 'as', 'pointed', 'to', 'by', 'index', 'in', 'array', 'var1'], 'words': ['create', 'a', 'numpy', 'array', 'containing', 'elements', 'of', 'array', 'var0', 'as', 'pointed', 'to', 'by', 'index', 'in', 'array', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'b'}, 'snippet': 'var0[np.arange(var0.shape[0])[:, (none)], var1]'}
Generated  translation
np. argwhere ( np. all ( var0 = = var1 ) ) 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'string', 'var0', 'by', 'multiple', 'words', 'var1', 'or', 'var2', 'or', 'var3'], 'words': ['split', 'a', 'string', 'var0', 'by', 'multiple', 'words', 'var1', 'or', 'var2', 'or', 'var3'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l', 'var1': 'for', 'var2': 'or', 'var3': 'and'}, 'snippet': "[re.split('_(?:f?or|and)_', s) for s in var0]"}
Generated  translation
re. split ('\ \ w + ', var1 ) [ 0 ]. split ('var0 ', 1 ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'array', 'var0', 'based', 'on', 'column', 'str0', ',', 'str1', 'and', 'str2'], 'words': ['sort', 'array', 'var0', 'based', 'on', 'column', 'str0', ',', 'str1', 'and', 'str2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'order_array', 'str0': 'year', 'str1': 'month', 'str2': 'day'}, 'snippet': "var0.sort(order=['str0', 'str1', 'str2'])"}
Generated  translation
var0. sort ( key = lambda d : ( d. index ( ['str0 ','str1'], reverse = true ) ) 
--------- B -----------
{'intent': {'gloss': ['encode', 'a', 'pdf', 'file', 'str0', 'with', 'var0', 'encoding'], 'words': ['encode', 'a', 'pdf', 'file', 'str0', 'with', 'var0', 'encoding'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'pdf_reference.pdf', 'var0': 'base64'}, 'snippet': "a = open('str0', 'rb').read().encode('var0')"}
Generated  translation
open ('str0 ','r'). read ( ) 
--------- B -----------
{'intent': {'gloss': ['enclose', 'numbers', 'in', 'quotes', 'in', 'a', 'string', 'str0'], 'words': ['enclose', 'numbers', 'in', 'quotes', 'in', 'a', 'string', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'this is number 1 and this is number 22'}, 'snippet': 're.sub(\'(\\\\d+)\', \'"\\\\1"\', \'str0\')'}
Generated  translation
re. findall ('\ \ d + (? : \ \ w + ) ','str0') 
--------- B -----------
{'intent': {'gloss': ['display', 'current', 'time'], 'words': ['display', 'current', 'time'], 'after': [' ', ' ', '']}, 'slot_map': {}, 'snippet': "now = datetime.datetime.now().strftime('%h:%m:%s')"}
Generated  translation
datetime. datetime. now ( ). time ( ) 
--------- B -----------
{'intent': {'gloss': ['decode', 'url', 'var0', 'with', 'utf8', 'and', 'print', 'it'], 'words': ['decode', 'url', 'var0', 'with', 'utf8', 'and', 'print', 'it'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'url'}, 'snippet': "print(urllib.parse.unquote(var0).decode('utf8'))"}
Generated  translation
urllib. parse. unquote ( var0 ). decode ('utf - 8') 
--------- B -----------
{'intent': {'gloss': ['parse', 'string', 'var0', 'into', 'a', 'datetime', 'object', 'using', 'format', 'pattern', 'str0'], 'words': ['parse', 'string', 'var0', 'into', 'a', 'datetime', 'object', 'using', 'format', 'pattern', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'datestr', 'str0': '%y-%m-%d'}, 'snippet': "dateobj = datetime.datetime.strptime(var0, 'str0').date()"}
Generated  translation
datetime. datetime. strptime ('str0 ','str0') 
--------- B -----------
{'intent': {'gloss': ['find', 'the', 'magnitude', '(', 'length', ')', 'squared', 'of', 'a', 'vector', 'var0', 'field'], 'words': ['find', 'the', 'magnitude', '(', 'length', ')', 'squared', 'of', 'a', 'vector', 'var0', 'field'], 'after': [' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'vf'}, 'snippet': "np.einsum('...j,...j->...', var0, var0)"}
Generated  translation
sum ( var0. shape ) 
--------- B -----------
{'intent': {'gloss': ['un', '-', 'escaping', 'characters', 'in', 'a', 'string', 'with', 'python'], 'words': ['un', '-', 'escaping', 'characters', 'in', 'a', 'string', 'with', 'python'], 'after': ['', '', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': '"""\\\\u003cp\\\\u003e""".decode(\'unicode-escape\')'}
Generated  translation
print ('" " " ". join ( reversed ( [ str ( s ),'' ) for s in range ( string. i ) ] ) ) 
--------- B -----------
{'intent': {'gloss': ['coalesce', 'non', '-', 'word', '-', 'characters', 'in', 'string', 'var0'], 'words': ['coalesce', 'non', '-', 'word', '-', 'characters', 'in', 'string', 'var0'], 'after': [' ', '', '', '', '', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': "print(re.sub('(\\\\w)\\\\1+', '\\\\1', var0))"}
Generated  translation
re. sub ('[ ^ 0 - 9 ] ','', var0 ) 
--------- B -----------
{'intent': {'gloss': ['substract', '1', 'hour', 'and', '10', 'minutes', 'from', 'current', 'time'], 'words': ['substract', '1', 'hour', 'and', '10', 'minutes', 'from', 'current', 'time'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 't = datetime.datetime.now()\nt - datetime.timedelta(hours=1, minutes=10)'}
Generated  translation
datetime. datetime. now ( ) + datetime. timedelta ( days = 1, 10 ) 
--------- B -----------
{'intent': {'gloss': ['find', 'indexes', 'of', 'all', 'occurrences', 'of', 'a', 'substring', 'var0', 'in', 'a', 'string', 'var1'], 'words': ['find', 'indexes', 'of', 'all', 'occurrences', 'of', 'a', 'substring', 'var0', 'in', 'a', 'string', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'tt', 'var1': 'ttt'}, 'snippet': "[m.start() for m in re.finditer('(?=tt)', 'var1')]"}
Generated  translation
indices = [ i for i, x in enumerate ( var1 ) if x! = 0 ] 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'dictionaries', 'var0', 'by', 'values', 'in', 'an', 'order', 'var1'], 'words': ['sort', 'a', 'list', 'of', 'dictionaries', 'var0', 'by', 'values', 'in', 'an', 'order', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list_of_dct', 'var1': 'order'}, 'snippet': 'sorted(var0, key=lambda x: var1.index(list(x.values())[0]))'}
Generated  translation
sorted ( var0, key = lambda x : x ['var1'] ) 
--------- B -----------
{'intent': {'gloss': ['decode', 'a', 'double', 'url', 'encoded', 'string', '\r\nstr0', 'to\r\nstr1'], 'words': ['decode', 'a', 'double', 'url', 'encoded', 'string', '\r\nstr0', 'to\r\nstr1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'fireshot3%2b%25282%2529.png', 'str1': 'fireshot3+(2).png'}, 'snippet': "urllib.parse.unquote(urllib.parse.unquote('str0'))"}
Generated  translation
urllib. parse. quote ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'list', 'of', 'all', 'the', 'duplicate', 'items', 'in', 'dataframe', 'var0', 'using', 'pandas'], 'words': ['get', 'a', 'list', 'of', 'all', 'the', 'duplicate', 'items', 'in', 'dataframe', 'var0', 'using', 'pandas'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': "pd.concat(g for _, g in var0.groupby('id') if len(g) > 1)"}
Generated  translation
var0 [ ~ var0. columns ] 
--------- B -----------
{'intent': {'gloss': ['delete', 'every', 'non', 'str0', 'characters', 'from', 'a', 'string', 'var0'], 'words': ['delete', 'every', 'non', 'str0', 'characters', 'from', 'a', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'utf-8', 'var0': 'line'}, 'snippet': "var0 = var0.decode('str0', 'ignore').encode('str0')"}
Generated  translation
re. sub ('[ ^ a - za - z ] * ','str0') 
--------- B -----------
{'intent': {'gloss': ['encode', 'str0', 'as', 'unicode', 'and', 'decode', 'with', 'utf', '-', '8'], 'words': ['encode', 'str0', 'as', 'unicode', 'and', 'decode', 'with', 'utf', '-', '8'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '']}, 'slot_map': {'str0': "u'xÃ¼yÃ\x9f'"}, 'snippet': '"""xÃ¼yÃ\x9f""".encode(\'raw_unicode_escape\').decode(\'utf-8\')'}
Generated  translation
urllib. parse. unquote ('str0') 
--------- B -----------
{'intent': {'gloss': ['make', 'an', 'http', 'post', 'request', 'with', 'data', 'var0'], 'words': ['make', 'an', 'http', 'post', 'request', 'with', 'data', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'post_data'}, 'snippet': "post_response = requests.post(url='http://httpbin.org/post', json=var0)"}
Generated  translation
requests. post ( var0, var0 ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'items', 'from', 'dictionary', 'var0', 'if', 'the', 'item', "'", 's', 'value', 'var1', 'is', 'equal', 'to', '42'], 'words': ['remove', 'items', 'from', 'dictionary', 'var0', 'if', 'the', 'item', "'", 's', 'value', 'var1', 'is', 'equal', 'to', '42'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mydict', 'var1': 'val'}, 'snippet': 'var0 = {key: var1 for key, var1 in list(var0.items()) if var1 != 42}'}
Generated  translation
var0 = dict ( ( k, v ) for k, v in var1 ) 
--------- B -----------
{'intent': {'gloss': ['how', 'do', 'i', 'find', 'an', 'element', 'that', 'contains', 'specific', 'text', 'in', 'selenium', 'webdriver', '(', 'python', ')', '?'], 'words': ['how', 'do', 'i', 'find', 'an', 'element', 'that', 'contains', 'specific', 'text', 'in', 'selenium', 'webdriver', '(', 'python', ')', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '', '']}, 'slot_map': {}, 'snippet': 'driver.find_elements_by_xpath("//*[contains(text(), \'my button\')]")'}
Generated  translation
driver. find _ element _ by _ xpath ( " / / div [ @ id ='a'] / / a [ @ class ='click'] " ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'unicode', 'string', 'var0', 'to', 'a', 'str0', 'string'], 'words': ['convert', 'a', 'unicode', 'string', 'var0', 'to', 'a', 'str0', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'title', 'str0': 'ascii'}, 'snippet': "unicodedata.normalize('nfkd', var0).encode('str0', 'ignore')"}
Generated  translation
" " " str0 " " ". encode ('latin - 1') 
--------- B -----------
{'intent': {'gloss': ['restart', 'a', 'computer', 'after', 'str0', 'seconds', 'using', 'subprocess'], 'words': ['restart', 'a', 'computer', 'after', 'str0', 'seconds', 'using', 'subprocess'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '900'}, 'snippet': "subprocess.call(['shutdown', '/r', '/t', 'str0'])"}
Generated  translation
subprocess. check _ seconds ('str0 ', shell = true ) 
--------- B -----------
{'intent': {'gloss': ['update', 'row', 'values', 'for', 'a', 'column', 'var0', 'using', 'vectorized', 'string', 'operation', 'in', 'pandas'], 'words': ['update', 'row', 'values', 'for', 'a', 'column', 'var0', 'using', 'vectorized', 'string', 'operation', 'in', 'pandas'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'season'}, 'snippet': "df['var0'].str.split('-').str[0].astype(int)"}
Generated  translation
df. apply ( lambda x : x. tolist ( ), axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'date', 'string', 'var0', 'in', 'format', 'pattern', 'str0', 'into', 'a', 'timestamp'], 'words': ['convert', 'date', 'string', 'var0', 'in', 'format', 'pattern', 'str0', 'into', 'a', 'timestamp'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's', 'str0': '%d/%m/%y'}, 'snippet': "time.mktime(datetime.datetime.strptime(var0, 'str0').timetuple())"}
Generated  translation
datetime. datetime. strptime ('str0 ','% h : % m'). strftime ('% y - % m - % d % h : % m : % s % d % m : % m') 
--------- B -----------
{'intent': {'gloss': ['django', 'check', 'if', 'an', 'object', 'with', 'criteria', 'var0', 'equal', 'to', 'str0', 'and', 'criteria', 'var1', 'equal', 'to', 'str1', 'exists', 'in', 'model', 'var2'], 'words': ['django', 'check', 'if', 'an', 'object', 'with', 'criteria', 'var0', 'equal', 'to', 'str0', 'and', 'criteria', 'var1', 'equal', 'to', 'str1', 'exists', 'in', 'model', 'var2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'name', 'str0': 'name', 'var1': 'title', 'str1': 'title', 'var2': 'entry'}, 'snippet': "var2.objects.filter(str0='str0', str1='str1').exists()"}
Generated  translation
today = var2. objects. filter ( var0. var1 ). order _ by ('str0'). _ _ dict _ _ if var1 = = 1 ] 
--------- B -----------
{'intent': {'gloss': ['delete', 'every', '8th', 'column', 'in', 'a', 'numpy', 'array', 'str0', '.'], 'words': ['delete', 'every', '8th', 'column', 'in', 'a', 'numpy', 'array', 'str0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'a'}, 'snippet': 'np.delete(str0, list(range(0, str0.shape[1], 8)), axis=1)'}
Generated  translation
str0 [ : - 1 ] 
--------- B -----------
{'intent': {'gloss': ['find', 'the', 'index', 'of', 'the', 'second', 'occurrence', 'of', 'the', 'substring', 'var0', 'in', 'string', 'str0'], 'words': ['find', 'the', 'index', 'of', 'the', 'second', 'occurrence', 'of', 'the', 'substring', 'var0', 'in', 'string', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'bar', 'str0': 'foo bar bar bar'}, 'snippet': '"""str0""".replace(\'var0\', \'xxx\', 1).find(\'var0\')'}
Generated  translation
" " " str0 " " ". index ('str0') 
--------- B -----------
{'intent': {'gloss': ['place', 'str0', 'infront', 'of', 'each', 'non', '-', 'letter', 'char', 'in', 'string', 'var0'], 'words': ['place', 'str0', 'infront', 'of', 'each', 'non', '-', 'letter', 'char', 'in', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '', 'var0': 'line'}, 'snippet': "print(re.sub('[_%^$]', '\\\\\\\\\\\\g<0>', var0))"}
Generated  translation
re. sub ('(? < = [ a - z ] ) \ \ 1 ','str0') 
--------- B -----------
{'intent': {'gloss': ['rearrange', 'the', 'columns', 'str0', ',', 'str1', ',', 'str2', ',', 'str3', 'of', 'pandas', 'dataframe', 'var0', 'in', 'mentioned', 'sequence', 'str2', ',', 'str3', ',', 'str0', ',', 'str1'], 'words': ['rearrange', 'the', 'columns', 'str0', ',', 'str1', ',', 'str2', ',', 'str3', 'of', 'pandas', 'dataframe', 'var0', 'in', 'mentioned', 'sequence', 'str2', ',', 'str3', ',', 'str0', ',', 'str1'], 'after': [' ', ' ', ' ', '', '', '', '', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '', ' ', '', '']}, 'slot_map': {'str0': 'a', 'str1': 'b', 'str2': 'x', 'str3': 'y', 'var0': 'df', 'str4': 'x', 'str5': 'y', 'str6': 'a', 'str7': 'b'}, 'snippet': "var0 = var0[['str4', 'str5', 'str6', 'str7']]"}
Generated  translation
var0. drop ( ['str0 ','str1 ','str2 ','str3'], axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['strip', 'everything', 'up', 'to', 'and', 'including', 'the', 'character', 'str0', 'from', 'url', 'var0', ',', 'strip', 'the', 'character', 'str1', 'from', 'the', 'remaining', 'string', 'and', 'concatenate', 'str2', 'to', 'the', 'end'], 'words': ['strip', 'everything', 'up', 'to', 'and', 'including', 'the', 'character', 'str0', 'from', 'url', 'var0', ',', 'strip', 'the', 'character', 'str1', 'from', 'the', 'remaining', 'string', 'and', 'concatenate', 'str2', 'to', 'the', 'end'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '&', 'var0': 'url', 'str1': '=', 'str2': '.html'}, 'snippet': "var0.split('str0')[-1].replace('str1', '') + 'str2'"}
Generated  translation
re. sub ('(. * ) < / div > ','str1 ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['save', 'array', 'at', 'index', '0', ',', 'index', '1', 'and', 'index', '8', 'of', 'array', 'var0', 'to', 'tmp', 'file', 'var1'], 'words': ['save', 'array', 'at', 'index', '0', ',', 'index', '1', 'and', 'index', '8', 'of', 'array', 'var0', 'to', 'tmp', 'file', 'var1'], 'after': [' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'np', 'var1': 'tmp'}, 'snippet': 'var0.savez(var1, *[getarray[0], getarray[1], getarray[8]])'}
Generated  translation
var1. savefig ('var0 ', 8 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'data', 'of', 'dataframe', 'var0', 'where', 'the', 'sum', 'of', 'column', 'str0', 'grouped', 'by', 'column', 'str1', 'is', 'equal', 'to', '0'], 'words': ['get', 'data', 'of', 'dataframe', 'var0', 'where', 'the', 'sum', 'of', 'column', 'str0', 'grouped', 'by', 'column', 'str1', 'is', 'equal', 'to', '0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'x', 'str1': 'user'}, 'snippet': "var0.loc[var0.groupby('str1')['str0'].transform(sum) == 0]"}
Generated  translation
var0. groupby ( ( var0. index = ='str1'). sum ( ). reset _ index ( ) 
--------- B -----------
{'intent': {'gloss': ['adding', 'a', '1', '-', 'd', 'array', 'str0', 'to', 'a', '3', '-', 'd', 'array', 'str1'], 'words': ['adding', 'a', '1', '-', 'd', 'array', 'str0', 'to', 'a', '3', '-', 'd', 'array', 'str1'], 'after': [' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', '']}, 'slot_map': {'str0': '[1, 2, 3, 4, 5, 6, 7, 8, 9]', 'str1': 'np.zeros((6, 9, 20))', '[ str0 ]': '[1, 2, 3, 4, 5, 6, 7, 8, 9]'}, 'snippet': 'np.zeros((6, 9, 20)) + np.array([ str0 ])[(none), :, (none)]'}
Generated  translation
numpy. dstack ( ( numpy. meshgrid ( str0, str1 ) ). reshape ( 3, - 1 ) ) 
--------- B -----------
{'intent': {'gloss': ['add', 'array', 'of', 'shape', 'str0', 'to', 'array', 'str1'], 'words': ['add', 'array', 'of', 'shape', 'str0', 'to', 'array', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '(6, 9, 20)', 'str1': '[1, 2, 3, 4, 5, 6, 7, 8, 9]', '( str0 )': '(6, 9, 20)', '[ str1 ]': '[1, 2, 3, 4, 5, 6, 7, 8, 9]'}, 'snippet': 'np.zeros(( str0 )) + np.array([ str1 ]).reshape((1, 9, 1))'}
Generated  translation
np. einsum ('str1 ', str0 ', 1 ) 
--------- B -----------
{'intent': {'gloss': ['split', 'dictionary', 'of', 'lists', 'into', 'list', 'of', 'dictionaries'], 'words': ['split', 'dictionary', 'of', 'lists', 'into', 'list', 'of', 'dictionaries'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'map(dict, zip(*[[(k, v) for v in value] for k, value in list(d.items())]))'}
Generated  translation
[ dict ( k, v ) for d in list ( d. items ( ) ) for d in mylist ] 
--------- B -----------
{'intent': {'gloss': ['pivot', 'dataframe', 'var0', 'so', 'that', 'values', 'for', 'var1', 'become', 'column', 'headings', 'and', 'values', 'for', 'var2', 'become', 'the', 'index'], 'words': ['pivot', 'dataframe', 'var0', 'so', 'that', 'values', 'for', 'var1', 'become', 'column', 'headings', 'and', 'values', 'for', 'var2', 'become', 'the', 'index'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'var1': 'upc', 'var2': 'saleid'}, 'snippet': "var0.pivot_table(index='var2', columns='var1', aggfunc='size', fill_value=0)"}
Generated  translation
var0. pivot ( index ='var1 ', how ='var2') 
--------- B -----------
{'intent': {'gloss': ['select', 'records', 'of', 'dataframe', 'var0', 'where', 'the', 'sum', 'of', 'column', 'str0', 'for', 'each', 'value', 'in', 'column', 'str1', 'is', '0'], 'words': ['select', 'records', 'of', 'dataframe', 'var0', 'where', 'the', 'sum', 'of', 'column', 'str0', 'for', 'each', 'value', 'in', 'column', 'str1', 'is', '0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'x', 'str1': 'user'}, 'snippet': "var0.groupby('str1')['str0'].filter(lambda str0: str0.sum() == 0)"}
Generated  translation
var0. loc [ :, ( ( var0 ['str1'] )! = 0 ) ] 
--------- B -----------
{'intent': {'gloss': ['finding', 'the', 'index', 'of', 'an', 'item', 'str0', 'given', 'a', 'list', '`', '[', 'str0', ',', "'", 'bar', "'", ',', "'", 'baz', "'", ']', '`', 'containing', 'it'], 'words': ['finding', 'the', 'index', 'of', 'an', 'item', 'str0', 'given', 'a', 'list', '`', '[', 'str0', ',', "'", 'bar', "'", ',', "'", 'baz', "'", ']', '`', 'containing', 'it'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '', ' ', '', '', '', ' ', '', '', '', '', ' ', ' ', '']}, 'slot_map': {'str0': 'foo', 'str1': "['foo', 'bar', 'baz']", '[ str1 ]': "['foo', 'bar', 'baz']"}, 'snippet': "[i for i, j in enumerate(['str0', 'bar', 'baz']) if j == 'str0']"}
Generated  translation
sorted ( list ( str0. items ( ) ), key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'string', 'str0', 'to', 'an', 'integer', 'timestamp'], 'words': ['convert', 'string', 'str0', 'to', 'an', 'integer', 'timestamp'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '01/12/2011'}, 'snippet': "int(datetime.datetime.strptime('str0', '%d/%m/%y').strftime('%s'))"}
Generated  translation
int ('str0 ', 16 ) 
--------- B -----------
{'intent': {'gloss': ['calling', 'an', 'external', 'command', 'str0'], 'words': ['calling', 'an', 'external', 'command', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'echo hello world'}, 'snippet': "print(subprocess.popen('str0', shell=true, stdout=subprocess.pipe).stdout.\n    read())"}
Generated  translation
os. system ('str0') 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'list', 'var0', 'containing', 'all', 'files', 'in', 'directory', 'str0', 'that', 'starts', 'with', 'numbers', 'between', '0', 'and', '9', 'and', 'ends', 'with', 'the', 'extension', 'str1'], 'words': ['create', 'a', 'list', 'var0', 'containing', 'all', 'files', 'in', 'directory', 'str0', 'that', 'starts', 'with', 'numbers', 'between', '0', 'and', '9', 'and', 'ends', 'with', 'the', 'extension', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'files', 'str0': '.', 'str1': '.jpg'}, 'snippet': "var0 = [f for f in os.listdir('str0') if re.match('[0-9]+.*\\\\.jpg', f)]"}
Generated  translation
var0 = [ x for x in var0 if x [ 0 ] in s. startswith ('str1') ] 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'list', 'where', 'each', 'element', 'is', 'a', 'dictionary', 'with', 'keys', 'str0', 'and', 'str1', 'and', 'values', 'corresponding', 'to', 'each', 'value', 'in', 'the', 'lists', 'referenced', 'by', 'keys', 'str0', 'and', 'str1', 'in', 'dictionary', 'var0'], 'words': ['create', 'a', 'list', 'where', 'each', 'element', 'is', 'a', 'dictionary', 'with', 'keys', 'str0', 'and', 'str1', 'and', 'values', 'corresponding', 'to', 'each', 'value', 'in', 'the', 'lists', 'referenced', 'by', 'keys', 'str0', 'and', 'str1', 'in', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'key1', 'str1': 'key2', 'str2': 'key1', 'str3': 'key2', 'var0': 'd'}, 'snippet': "[{'str2': a, 'str3': b} for a, b in zip(var0['str2'], var0['str3'])]"}
Generated  translation
[ ( d ['str0'], d ) for d in var0 ] 
--------- B -----------
{'intent': {'gloss': ['calling', 'an', 'external', 'command', 'str0'], 'words': ['calling', 'an', 'external', 'command', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'ls'}, 'snippet': "p = subprocess.popen('str0', shell=true, stdout=subprocess.pipe, stderr=\n    subprocess.stdout)\nfor line in p.stdout.readlines():\n    print(line, end=' ')\nretval = p.wait()"}
Generated  translation
os. system ('str0') 
dev greedy accuracy 0.025
dev greedy bleu score 0.34282653920644107
dev greedy exececution accuracy 0.0
--------- B -----------
{'intent': {'gloss': ['check', 'if', '7', 'is', 'in', 'var0'], 'words': ['check', 'if', '7', 'is', 'in', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': '7 in var0'}
Generated  translation
if not in var0 : pass 
--------- B -----------
{'intent': {'gloss': ['parse', 'string', 'var0', 'to', 'float'], 'words': ['parse', 'string', 'var0', 'to', 'float'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'float(var0)'}
Generated  translation
struct. unpack ('d ', var0 ) [ 0 ] 
--------- B -----------
{'intent': {'gloss': ['exit', 'script'], 'words': ['exit', 'script'], 'after': [' ', '']}, 'slot_map': {}, 'snippet': 'sys.exit()'}
Generated  translation
sys. exit ( ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'the', 'last', 'element', 'in', 'list', 'var0'], 'words': ['remove', 'the', 'last', 'element', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'var0.pop()'}
Generated  translation
var0 [ - 1 ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'list', 'of', 'lists', 'var0', 'into', 'list', 'of', 'tuples', 'of', 'appropriate', 'elements', 'form', 'nested', 'lists'], 'words': ['convert', 'a', 'list', 'of', 'lists', 'var0', 'into', 'list', 'of', 'tuples', 'of', 'appropriate', 'elements', 'form', 'nested', 'lists'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'zip(*var0)'}
Generated  translation
zip ( * var0 ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'the', 'last', 'element', 'in', 'list', 'var0'], 'words': ['remove', 'the', 'last', 'element', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'del var0[-1]'}
Generated  translation
var0 [ - 1 ] 
--------- B -----------
{'intent': {'gloss': ['remove', 'the', 'element', 'in', 'list', 'var0', 'with', 'index', '1'], 'words': ['remove', 'the', 'element', 'in', 'list', 'var0', 'with', 'index', '1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'var0.pop(1)'}
Generated  translation
[ x for x in var0 if x not in var0 ] 
--------- B -----------
{'intent': {'gloss': ['remove', 'the', 'element', 'in', 'list', 'var0', 'at', 'index', 'var1'], 'words': ['remove', 'the', 'element', 'in', 'list', 'var0', 'at', 'index', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'index'}, 'snippet': 'del var0[var1]'}
Generated  translation
try : var1. remove ( var0 ) except valueerror : pass 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'str0', 'is', 'in', 'list', 'var0'], 'words': ['check', 'if', 'str0', 'is', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'a', 'var0': 'a'}, 'snippet': "'var0' in var0"}
Generated  translation
if'str0'not in var0 : pass 
--------- B -----------
{'intent': {'gloss': ['calling', 'an', 'external', 'command', 'str0'], 'words': ['calling', 'an', 'external', 'command', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'ls -l'}, 'snippet': 'from subprocess import call'}
Generated  translation
subprocess. call ('str0 ', shell = true ) 
--------- B -----------
{'intent': {'gloss': ['print', 'unicode', 'characters', 'in', 'a', 'string', 'str0'], 'words': ['print', 'unicode', 'characters', 'in', 'a', 'string', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'Россия'}, 'snippet': "print('str0')"}
Generated  translation
print ('str0 '. encode ('utf - 8') ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'the', 'element', 'in', 'list', 'var0', 'at', 'index', 'var1'], 'words': ['remove', 'the', 'element', 'in', 'list', 'var0', 'at', 'index', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'index'}, 'snippet': 'var0.pop(var1)'}
Generated  translation
try : var1. remove ( var0 ) except valueerror : pass 
--------- B -----------
{'intent': {'gloss': ['get', 'last', 'day', 'of', 'the', 'second', 'month', 'in', 'year', '2012'], 'words': ['get', 'last', 'day', 'of', 'the', 'second', 'month', 'in', 'year', '2012'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'monthrange(2012, 2)'}
Generated  translation
datetime. datetime. strptime ('january 11, 2010 ','% b % d, % y') 
--------- B -----------
{'intent': {'gloss': ['sum', 'of', 'all', 'values', 'in', 'a', 'python', 'dict'], 'words': ['sum', 'of', 'all', 'values', 'in', 'a', 'python', 'dict'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'sum(d.values())'}
Generated  translation
sum ( i * j for i, j in list ( d. values ( ) ) ) 
--------- B -----------
{'intent': {'gloss': ['execute', 'a', 'command', 'str0', 'in', 'the', 'terminal', 'from', 'a', 'python', 'script'], 'words': ['execute', 'a', 'command', 'str0', 'in', 'the', 'terminal', 'from', 'a', 'python', 'script'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'command'}, 'snippet': 'os.system(str0)'}
Generated  translation
os. system ('str0') 
--------- B -----------
{'intent': {'gloss': ['request', 'http', 'url', 'var0'], 'words': ['request', 'http', 'url', 'var0'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {'var0': 'url'}, 'snippet': 'r = requests.get(var0)'}
Generated  translation
requests. get ( var0, verify = false ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'dictionary', 'var0', 'by', 'its', 'values'], 'words': ['sort', 'a', 'dictionary', 'var0', 'by', 'its', 'values'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'data'}, 'snippet': 'sorted(var0.values())'}
Generated  translation
sorted ( list ( var0. items ( ) ), key = lambda k _ v : k _ v [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['throw', 'an', 'exception', 'str0'], 'words': ['throw', 'an', 'exception', 'str0'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {'str0': 'i know python!'}, 'snippet': "raise exception('str0')"}
Generated  translation
" " " str0 " " " [ : : - 1 ] 
--------- B -----------
{'intent': {'gloss': ['manually', 'throw', 'an', 'exception', 'str0'], 'words': ['manually', 'throw', 'an', 'exception', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'i know python!'}, 'snippet': "raise exception('str0')"}
Generated  translation
" " " " " ". join ( reversed ('str0') ) 
--------- B -----------
{'intent': {'gloss': ['throw', 'an', 'exception', 'with', 'message', 'str0'], 'words': ['throw', 'an', 'exception', 'with', 'message', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'this is the exception you expect to handle'}, 'snippet': "raise exception('str0')"}
Generated  translation
sys. exit ('str0') 
--------- B -----------
{'intent': {'gloss': ['sum', 'of', 'all', 'values', 'in', 'a', 'python', 'dict', 'var0'], 'words': ['sum', 'of', 'all', 'values', 'in', 'a', 'python', 'dict', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'd'}, 'snippet': 'sum(var0.values())'}
Generated  translation
sum ( l [ 0 ] for i in var0 ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'str0', 'in', 'descending', 'order', '.'], 'words': ['sort', 'a', 'list', 'str0', 'in', 'descending', 'order', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'lst'}, 'snippet': 'sorted(str0, reverse=true)'}
Generated  translation
sorted ( [ str0 ], reverse = true ) 
--------- B -----------
{'intent': {'gloss': ['return', 'http', 'status', 'code', '204', 'from', 'a', 'django', 'view'], 'words': ['return', 'http', 'status', 'code', '204', 'from', 'a', 'django', 'view'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'return httpresponse(status=204)'}
Generated  translation
driver. get ('http : / / www. google. com. br') 
--------- B -----------
{'intent': {'gloss': ['get', 'current', 'url', 'in', 'selenium', 'webdriver', 'var0'], 'words': ['get', 'current', 'url', 'in', 'selenium', 'webdriver', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'browser'}, 'snippet': 'print(var0.current_url)'}
Generated  translation
driver. get ('http : / / www. google. com. br') 
--------- B -----------
{'intent': {'gloss': ['get', 'domain', '/', 'host', 'name', 'from', 'request', 'object', 'in', 'django'], 'words': ['get', 'domain', '/', 'host', 'name', 'from', 'request', 'object', 'in', 'django'], 'after': [' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "request.meta['http_host']"}
Generated  translation
self. request. url 
--------- B -----------
{'intent': {'gloss': ['get', 'last', 'day', 'of', 'the', 'first', 'month', 'in', '2002'], 'words': ['get', 'last', 'day', 'of', 'the', 'first', 'month', 'in', '2002'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'calendar.monthrange(2002, 1)'}
Generated  translation
datetime. datetime. strptime ('january 11, 2010 ','% b % d, % y') 
--------- B -----------
{'intent': {'gloss': ['get', 'last', 'day', 'of', 'the', 'second', 'month', 'in', '2002'], 'words': ['get', 'last', 'day', 'of', 'the', 'second', 'month', 'in', '2002'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'calendar.monthrange(2008, 2)'}
Generated  translation
datetime. datetime. strptime ('january 11, 2010 ','% b % d, % y') 
--------- B -----------
{'intent': {'gloss': ['calling', 'an', 'external', 'command', 'str0'], 'words': ['calling', 'an', 'external', 'command', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'some_command with args'}, 'snippet': "os.system('str0')"}
Generated  translation
subprocess. call ('str0 ', shell = true ) 
--------- B -----------
{'intent': {'gloss': ['calling', 'an', 'external', 'command', 'str0'], 'words': ['calling', 'an', 'external', 'command', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'some_command < input_file | another_command > output_file'}, 'snippet': "os.system('str0')"}
Generated  translation
subprocess. call ('str0 ', shell = true ) 
--------- B -----------
{'intent': {'gloss': ['manually', 'throw', '/', 'raise', 'a', 'var0', 'exception', 'with', 'the', 'message', 'str0'], 'words': ['manually', 'throw', '/', 'raise', 'a', 'var0', 'exception', 'with', 'the', 'message', 'str0'], 'after': [' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'valueerror', 'str0': 'a very specific bad thing happened'}, 'snippet': "raise var0('str0')"}
Generated  translation
var0. translate ( none,'str0') 
--------- B -----------
{'intent': {'gloss': ['get', 'http', 'header', 'of', 'the', 'key', 'str0', 'in', 'flask'], 'words': ['get', 'http', 'header', 'of', 'the', 'key', 'str0', 'in', 'flask'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'your-header-name'}, 'snippet': "request.headers['str0']"}
Generated  translation
response. headers ['www - authenticate'] ='str0'
--------- B -----------
{'intent': {'gloss': ['get', 'last', 'day', 'of', 'the', 'second', 'month', 'in', '2100'], 'words': ['get', 'last', 'day', 'of', 'the', 'second', 'month', 'in', '2100'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'calendar.monthrange(2100, 2)'}
Generated  translation
datetime. datetime. now ( ) + datetime. timedelta ( days = 1, hours = 3 ) 
--------- B -----------
{'intent': {'gloss': ['throw', 'a', 'valueerror', 'with', 'message', 'str0'], 'words': ['throw', 'a', 'valueerror', 'with', 'message', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'represents a hidden bug, do not catch this'}, 'snippet': "raise valueerror('str0')"}
Generated  translation
logging. info ('str0 ', extra = { str0 } ) 
--------- B -----------
{'intent': {'gloss': ['throw', 'a', 'value', 'error', 'with', 'message', 'str0', ',', 'str1', ',', 'str2', ',', 'str3'], 'words': ['throw', 'a', 'value', 'error', 'with', 'message', 'str0', ',', 'str1', ',', 'str2', ',', 'str3'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', '', ' ', '']}, 'slot_map': {'str0': 'a very specific bad thing happened', 'str1': 'foo', 'str2': 'bar', 'str3': 'baz'}, 'snippet': "raise valueerror('str0')"}
Generated  translation
subprocess. popen ( ['str0 ','str1 ','str2'] ) 
--------- B -----------
{'intent': {'gloss': ['escaping', 'quotes', 'in', 'string'], 'words': ['escaping', 'quotes', 'in', 'string'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'replace(\'"\', \'\\\\"\')'}
Generated  translation
re. findall ('\ \ w + ','str1') 
--------- B -----------
{'intent': {'gloss': ['assign', 'value', 'in', 'var0', 'dynamically', 'to', 'class', 'property', 'var1'], 'words': ['assign', 'value', 'in', 'var0', 'dynamically', 'to', 'class', 'property', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'group', 'var1': 'attr'}, 'snippet': 'setattr(self, var1, var0)'}
Generated  translation
var1. set _ index ( ['var0'], append = true ) 
--------- B -----------
{'intent': {'gloss': ['open', 'a', 'file', 'str0', 'under', 'unix'], 'words': ['open', 'a', 'file', 'str0', 'under', 'unix'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '$file'}, 'snippet': 'os.system(\'start "$file"\')'}
Generated  translation
f = open ('str0 ','r') 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'list', 'with', 'the', 'highest', 'sum', 'value', 'in', 'list', 'var0'], 'words': ['get', 'the', 'list', 'with', 'the', 'highest', 'sum', 'value', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'print(max(var0, key=sum))'}
Generated  translation
max ( enumerate ( var0 ), key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'dataframe', 'var0', 'to', 'list', 'of', 'dictionaries', 'including', 'the', 'index', 'values'], 'words': ['convert', 'dataframe', 'var0', 'to', 'list', 'of', 'dictionaries', 'including', 'the', 'index', 'values'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': "var0.to_dict('index')"}
Generated  translation
var0. apply ( lambda x : x. tolist ( ), axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['create', 'list', 'of', 'dictionaries', 'from', 'pandas', 'dataframe', 'var0'], 'words': ['create', 'list', 'of', 'dictionaries', 'from', 'pandas', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': "var0.to_dict('records')"}
Generated  translation
var0. apply ( lambda x : x. tolist ( ), axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'dict', 'var0', 'by', 'value'], 'words': ['sort', 'dict', 'var0', 'by', 'value'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'data'}, 'snippet': 'sorted(var0, key=var0.get)'}
Generated  translation
sorted ( list ( var0. items ( ) ), key = lambda x : x [ 1 ] [ 0 ] ) 
--------- B -----------
{'intent': {'gloss': ['throw', 'a', 'runtime', 'error', 'with', 'message', 'str0'], 'words': ['throw', 'a', 'runtime', 'error', 'with', 'message', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'specific message'}, 'snippet': "raise runtimeerror('str0')"}
Generated  translation
sys. exit ('str0') 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'list', 'of', 'all', 'values', 'in', 'column', 'var0', 'in', 'pandas', 'data', 'frame', 'var1'], 'words': ['get', 'a', 'list', 'of', 'all', 'values', 'in', 'column', 'var0', 'in', 'pandas', 'data', 'frame', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'df'}, 'snippet': "var1['var0'].tolist()"}
Generated  translation
var1 ['var0'] 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'with', 'delimiter', 'str0', 'or', 'delimiter', 'str1'], 'words': ['split', 'string', 'var0', 'with', 'delimiter', 'str0', 'or', 'delimiter', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'str', 'str0': ';', 'str1': ','}, 'snippet': "re.split('; |, ', var0)"}
Generated  translation
" " " str0 " " ". replace ('str0 ','' ). replace ('str1 ','' ) 
--------- B -----------
{'intent': {'gloss': ['calling', 'an', 'external', 'command', 'str0'], 'words': ['calling', 'an', 'external', 'command', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'some_command with args'}, 'snippet': "stream = os.popen('str0')"}
Generated  translation
subprocess. call ('str0 ', shell = true ) 
--------- B -----------
{'intent': {'gloss': ['set', 'columns', 'str0', 'as', 'indexes', 'in', 'dataframe', 'var0'], 'words': ['set', 'columns', 'str0', 'as', 'indexes', 'in', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "['race_date', 'track_code', 'race_number']", 'var0': 'rdata', '[ str0 ]': "['race_date', 'track_code', 'race_number']"}, 'snippet': 'var0.set_index([ str0 ])'}
Generated  translation
var0. set _ index ( ['str0'], inplace = true ) 
--------- B -----------
{'intent': {'gloss': ['throw', 'an', 'assertion', 'error', 'with', 'message', 'str0', ',', 'distance'], 'words': ['throw', 'an', 'assertion', 'error', 'with', 'message', 'str0', ',', 'distance'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '']}, 'slot_map': {'str0': "unexpected value of 'distance'!"}, 'snippet': "raise assertionerror('str0', distance)"}
Generated  translation
parser. add _ argument ('str0 ', nargs ='*') 
--------- B -----------
{'intent': {'gloss': ['post', 'request', 'url', 'var0', 'with', 'parameters', 'var1'], 'words': ['post', 'request', 'url', 'var0', 'with', 'parameters', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'url', 'var1': 'payload'}, 'snippet': 'r = requests.post(var0, data=var1)'}
Generated  translation
requests. post ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['open', 'a', 'file', 'str0', 'in', 'binary', 'write', 'mode'], 'words': ['open', 'a', 'file', 'str0', 'in', 'binary', 'write', 'mode'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '/home/user/test/wsservice/data.pkl'}, 'snippet': "output = open('str0', 'wb')"}
Generated  translation
f = open ('str0 ','rb') 
--------- B -----------
{'intent': {'gloss': ['calling', 'an', 'external', 'command', 'str0'], 'words': ['calling', 'an', 'external', 'command', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'ls -l'}, 'snippet': "call(['ls', '-l'])"}
Generated  translation
subprocess. call ('str0 ', shell = true ) 
--------- B -----------
{'intent': {'gloss': ['request', 'http', 'url', 'var0', 'with', 'parameters', 'var1'], 'words': ['request', 'http', 'url', 'var0', 'with', 'parameters', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'url', 'var1': 'payload'}, 'snippet': 'r = requests.get(var0, params=var1)'}
Generated  translation
requests. get ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['kill', 'a', 'process', 'with', 'id', 'str0'], 'words': ['kill', 'a', 'process', 'with', 'id', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'process.pid'}, 'snippet': 'os.kill(process.pid, signal.sigkill)'}
Generated  translation
sys. path. insert ( 0,'str0') 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'string', 'var0', 'with', 'new', 'line', 'character'], 'words': ['split', 'a', 'string', 'var0', 'with', 'new', 'line', 'character'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': "var0.split('\\n')[:-1]"}
Generated  translation
re. split ('\ \ w + ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'str0', 'encoded', 'string', 'var0', 'into', 'a', 'list', 'of', 'characters'], 'words': ['split', 'a', 'str0', 'encoded', 'string', 'var0', 'into', 'a', 'list', 'of', 'characters'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'utf-8', 'var0': 'stru'}, 'snippet': "list(var0.decode('str0'))"}
Generated  translation
list ('str0') 
--------- B -----------
{'intent': {'gloss': ['erase', 'the', 'contents', 'of', 'a', 'file', 'var0'], 'words': ['erase', 'the', 'contents', 'of', 'a', 'file', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'filename'}, 'snippet': "open('var0', 'w').close()"}
Generated  translation
shutil. rmtree ( var0, ignore _ errors = false, onerror = none ) 
--------- B -----------
{'intent': {'gloss': ['replace', 'string', 'str0', 'in', 'string', 'var0', 'with', 'character', 'str1'], 'words': ['replace', 'string', 'str0', 'in', 'string', 'var0', 'with', 'character', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'and', 'var0': 'stuff', 'str1': '/'}, 'snippet': "var0.replace(' and ', 'str1')"}
Generated  translation
var0 = var0. replace ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['subtract', '5', 'hours', 'from', 'the', 'time', 'object', 'var0'], 'words': ['subtract', '5', 'hours', 'from', 'the', 'time', 'object', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'dt'}, 'snippet': 'var0 -= datetime.timedelta(hours=5)'}
Generated  translation
var0. sub ( var0. time _ hours ( ) ) 
--------- B -----------
{'intent': {'gloss': ['encode', 'string', 'var0', 'using', 'hex', 'str0', 'encoding'], 'words': ['encode', 'string', 'var0', 'using', 'hex', 'str0', 'encoding'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'data', 'str0': 'hex'}, 'snippet': "print(var0.encode('str0'))"}
Generated  translation
var0. encode ('hex') 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'list', 'of', 'strings', 'var0', 'to', 'list', 'of', 'integers'], 'words': ['convert', 'a', 'list', 'of', 'strings', 'var0', 'to', 'list', 'of', 'integers'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'lst'}, 'snippet': '[map(int, sublist) for sublist in var0]'}
Generated  translation
[ int ( i ) for i in var0 ] 
--------- B -----------
{'intent': {'gloss': ['get', 'last', 'day', 'of', 'the', 'month', 'var0', 'in', 'year', 'var1'], 'words': ['get', 'last', 'day', 'of', 'the', 'month', 'var0', 'in', 'year', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'month', 'var1': 'year'}, 'snippet': 'calendar.monthrange(var1, var0)[1]'}
Generated  translation
var0. strftime ('% b') 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'tuples', 'var0', 'by', 'second', 'parameter', 'in', 'the', 'tuple'], 'words': ['sort', 'a', 'list', 'of', 'tuples', 'var0', 'by', 'second', 'parameter', 'in', 'the', 'tuple'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'my_list'}, 'snippet': 'var0.sort(key=lambda x: x[1])'}
Generated  translation
sorted ( var0, key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['unpack', 'hexadecimal', 'string', 'var0', 'to', 'a', 'list', 'of', 'integer', 'values'], 'words': ['unpack', 'hexadecimal', 'string', 'var0', 'to', 'a', 'list', 'of', 'integer', 'values'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': "struct.unpack('11b', var0)"}
Generated  translation
[ int ( x ) for x in str ( var0 ) ] 
--------- B -----------
{'intent': {'gloss': ['generate', 'all', 'permutations', 'of', 'a', 'list', 'str0'], 'words': ['generate', 'all', 'permutations', 'of', 'a', 'list', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '[1, 2, 3]', '[ str0 ]': '[1, 2, 3]'}, 'snippet': 'itertools.permutations([ str0 ])'}
Generated  translation
itertools. product ( [ str0 ] ) 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'str0', 'using', 'string', 'str1'], 'words': ['split', 'string', 'str0', 'using', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'happy_hats_for_cats', 'str1': '_for_'}, 'snippet': "re.split('str1', 'str0')"}
Generated  translation
re. split ('str1 ','str0') 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'object', 'var0', 'has', 'property', 'str0'], 'words': ['check', 'if', 'object', 'var0', 'has', 'property', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'str0': 'property'}, 'snippet': "if hasattr(var0, 'str0'):\n    pass"}
Generated  translation
hasattr ( var0,'str0') 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'object', 'var0', 'has', 'property', 'str0'], 'words': ['check', 'if', 'object', 'var0', 'has', 'property', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'str0': 'property'}, 'snippet': "if hasattr(var0, 'str0'):\n    pass"}
Generated  translation
hasattr ( var0,'str0') 
--------- B -----------
{'intent': {'gloss': ['django', 'jinja', 'slice', 'list', 'var0', 'by', 'str0'], 'words': ['django', 'jinja', 'slice', 'list', 'var0', 'by', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylist', 'str0': '3:8'}, 'snippet': "{{(var0 | slice): 'str0'}}"}
Generated  translation
var0. find ('str0') 
--------- B -----------
{'intent': {'gloss': ['pandas', 'dataframe', 'var0', 'column', 'str0', 'to', 'list'], 'words': ['pandas', 'dataframe', 'var0', 'column', 'str0', 'to', 'list'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'a'}, 'snippet': "var0['str0'].values.tolist()"}
Generated  translation
var0 ['str0'] = var0 ['str0']. dt. strftime ('% d % m % y') 
--------- B -----------
{'intent': {'gloss': ['print', 'a', 'celsius', 'symbol', 'on', 'x', 'axis', 'of', 'a', 'plot', 'var0'], 'words': ['print', 'a', 'celsius', 'symbol', 'on', 'x', 'axis', 'of', 'a', 'plot', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'ax'}, 'snippet': "var0.set_xlabel('temperature (℃)')"}
Generated  translation
print ('i have : { 0. price } '. format ( var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'using', 'new', '-', 'line', 'character', 'str0', 'as', 'separator'], 'words': ['split', 'string', 'var0', 'using', 'new', '-', 'line', 'character', 'str0', 'as', 'separator'], 'after': [' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'str0': '\n'}, 'snippet': "var0.rstrip().split('str0')"}
Generated  translation
re. split ('[. ] ','str0') 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'unicode', 'string', 'var0', 'to', 'a', 'str0', 'string'], 'words': ['convert', 'a', 'unicode', 'string', 'var0', 'to', 'a', 'str0', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'str0': 'ascii'}, 'snippet': "var0.encode('str0', 'ignore')"}
Generated  translation
" " " str0 " " ". encode ('latin - 1') 
--------- B -----------
{'intent': {'gloss': ['print', 'str0', 'plus', 'unicode', 'character', 'ustr1'], 'words': ['print', 'str0', 'plus', 'unicode', 'character', 'ustr1'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'here is your checkmark:', 'str1': '✓'}, 'snippet': "print('here is your checkmark: ' + 'str1')"}
Generated  translation
print ('str0 '. encode ('utf - 8') ) 
--------- B -----------
{'intent': {'gloss': ['determine', 'the', 'byte', 'length', 'of', 'a', 'utf', '-', '8', 'encoded', 'string', 'var0'], 'words': ['determine', 'the', 'byte', 'length', 'of', 'a', 'utf', '-', '8', 'encoded', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': "return len(var0.encode('utf-8'))"}
Generated  translation
" " " x = { } " " ". format ( var0. decode ('utf8') ). encode ('utf8') 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'list', 'of', 'lists', 'var0', 'into', 'a', 'list', 'of', 'strings', 'keeping', 'empty', 'sub', '-', 'lists', 'as', 'empty', 'string', 'str0'], 'words': ['convert', 'a', 'list', 'of', 'lists', 'var0', 'into', 'a', 'list', 'of', 'strings', 'keeping', 'empty', 'sub', '-', 'lists', 'as', 'empty', 'string', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list_of_lists', 'str0': ''}, 'snippet': "['str0'.join(l) for l in var0]"}
Generated  translation
[ str0 ] 
--------- B -----------
{'intent': {'gloss': ['lookup', 'an', 'attribute', 'in', 'any', 'scope', 'by', 'name', 'str0'], 'words': ['lookup', 'an', 'attribute', 'in', 'any', 'scope', 'by', 'name', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'range'}, 'snippet': "getattr(__builtins__, 'str0')"}
Generated  translation
print ( os. path. dirname ('str0') ) 
--------- B -----------
{'intent': {'gloss': ['how', 'to', 'erase', 'the', 'file', 'contents', 'of', 'text', 'file', 'in', 'python', '?'], 'words': ['how', 'to', 'erase', 'the', 'file', 'contents', 'of', 'text', 'file', 'in', 'python', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "open('file.txt', 'w').close()"}
Generated  translation
webbrowser. open ('file : / / my _ file. txt ','ignore') 
--------- B -----------
{'intent': {'gloss': ['get', 'all', 'the', 'items', 'from', 'a', 'list', 'of', 'tuple', 'str0', 'where', 'second', 'item', 'in', 'tuple', 'is', 'str1', '.'], 'words': ['get', 'all', 'the', 'items', 'from', 'a', 'list', 'of', 'tuple', 'str0', 'where', 'second', 'item', 'in', 'tuple', 'is', 'str1', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'l', 'str1': '1'}, 'snippet': '[x for x in str0 if x[1] == 1]'}
Generated  translation
[ x for x in str0 if x [ 2 ] = = 0 ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'python', 'dictionary', 'var0', 'to', 'json', 'array'], 'words': ['convert', 'python', 'dictionary', 'var0', 'to', 'json', 'array'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'your_data'}, 'snippet': 'json.dumps(var0, ensure_ascii=false)'}
Generated  translation
json. dumps ( [ dict ( list ( var0. items ( ) ) ) for var0 in rs ] ) 
--------- B -----------
{'intent': {'gloss': ['change', 'the', 'case', 'of', 'the', 'first', 'letter', 'in', 'string', 'var0'], 'words': ['change', 'the', 'case', 'of', 'the', 'first', 'letter', 'in', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': 'return var0[0].upper() + var0[1:]'}
Generated  translation
var0. replace ('','' ) [ 0 ] 
--------- B -----------
{'intent': {'gloss': ['zip', 'keys', 'with', 'individual', 'values', 'in', 'lists', 'var0', 'and', 'var1'], 'words': ['zip', 'keys', 'with', 'individual', 'values', 'in', 'lists', 'var0', 'and', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'k', 'var1': 'v'}, 'snippet': '[dict(zip(var0, x)) for x in var1]'}
Generated  translation
[ list ( x ) for x in zip ( * sorted ( zip ( var0, var1 ), key = lambda pair : pair [ 0 ] ) ) ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'var0', 'milliseconds', 'to', 'a', 'datetime', 'object'], 'words': ['convert', 'var0', 'milliseconds', 'to', 'a', 'datetime', 'object'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'ms'}, 'snippet': 'datetime.datetime.fromtimestamp(var0 / 1000.0)'}
Generated  translation
datetime. datetime. strptime ( var0,'% y - % m - % dt % h : % m : % sz') 
--------- B -----------
{'intent': {'gloss': ['sort', 'list', 'var0', 'by', 'keys', 'value', 'str0'], 'words': ['sort', 'list', 'var0', 'by', 'keys', 'value', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'results', 'str0': 'year'}, 'snippet': "sorted(var0, key=itemgetter('str0'))"}
Generated  translation
sorted ( var0, key = lambda x : int ( x. split ('str0') [ 2 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['filter', 'model', 'str0', 'where', 'str1', 'is', 'not', 'equal', 'to', '3', 'in', 'django'], 'words': ['filter', 'model', 'str0', 'where', 'str1', 'is', 'not', 'equal', 'to', '3', 'in', 'django'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'entry', 'str1': 'id'}, 'snippet': 'str0.objects.filter(~q(str1=3))'}
Generated  translation
task. objects. exclude ( prerequisites _ _ status _ _ in ='str1') 
--------- B -----------
{'intent': {'gloss': ['subtract', '1', 'hour', 'and', '10', 'minutes', 'from', 'time', 'object', 'var0'], 'words': ['subtract', '1', 'hour', 'and', '10', 'minutes', 'from', 'time', 'object', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 't'}, 'snippet': 'var0 - datetime.timedelta(hours=1, minutes=10)'}
Generated  translation
var0. sub ( var0. items ( ) ). reset _ index ( 1 ) 
--------- B -----------
{'intent': {'gloss': ['calling', 'an', 'external', 'command', 'str0'], 'words': ['calling', 'an', 'external', 'command', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'echo hello world'}, 'snippet': "print(os.popen('str0').read())"}
Generated  translation
subprocess. call ('str0 ', shell = true ) 
--------- B -----------
{'intent': {'gloss': ['recursively', 'go', 'through', 'all', 'subdirectories', 'and', 'files', 'in', 'var0'], 'words': ['recursively', 'go', 'through', 'all', 'subdirectories', 'and', 'files', 'in', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'rootdir'}, 'snippet': 'for root, subfolders, files in os.walk(var0):\n    pass'}
Generated  translation
with open ( var0 ) as f : pass 
--------- B -----------
{'intent': {'gloss': ['mysql', 'execute', 'query', 'str0', 'with', 'parameters', 'var0', 'and', 'var1'], 'words': ['mysql', 'execute', 'query', 'str0', 'with', 'parameters', 'var0', 'and', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'select * from foo where bar = %s and baz = %s', 'var0': 'param1', 'var1': 'param2'}, 'snippet': "c.execute('str0', (var0, var1))"}
Generated  translation
cursor. execute ('insert into table values ( % s, % s, % s ) ', ( var0, var1, var1 ) ) 
--------- B -----------
{'intent': {'gloss': ['parse', 'string', 'var0', 'to', 'float', 'or', 'int'], 'words': ['parse', 'string', 'var0', 'to', 'float', 'or', 'int'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': 'try:\n    return int(var0)\nexcept valueerror:\n    return float(var0)'}
Generated  translation
int (''. join ( c for c in var0 if c. isdigit ( ) ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'value', 'of', 'attribute', 'str0', 'of', 'object', 'var0', 'with', 'default', 'value', 'str1'], 'words': ['get', 'the', 'value', 'of', 'attribute', 'str0', 'of', 'object', 'var0', 'with', 'default', 'value', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'property', 'var0': 'a', 'str1': 'default value'}, 'snippet': "getattr(var0, 'str0', 'str1')"}
Generated  translation
print ( os. environ. get ('str0 ','str1') ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'largest', 'index', 'of', 'the', 'last', 'occurrence', 'of', 'characters', 'str0', 'in', 'string', 'var0'], 'words': ['get', 'the', 'largest', 'index', 'of', 'the', 'last', 'occurrence', 'of', 'characters', 'str0', 'in', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '([{', 'var0': 'test_string'}, 'snippet': "max(var0.rfind(i) for i in 'str0')"}
Generated  translation
print ( var0. split ('str0') [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'data', 'of', 'columns', 'with', 'null', 'values', 'in', 'dataframe', 'var0'], 'words': ['get', 'data', 'of', 'columns', 'with', 'null', 'values', 'in', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': 'var0[pd.isnull(var0).any(axis=1)]'}
Generated  translation
var0 = var0. dropna ( axis = 1, how ='all') 
--------- B -----------
{'intent': {'gloss': ['delete', 'third', 'row', 'in', 'a', 'numpy', 'array', 'var0'], 'words': ['delete', 'third', 'row', 'in', 'a', 'numpy', 'array', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'var0 = numpy.delete(var0, 2, axis=1)'}
Generated  translation
var0 [ np. delete ( var0, 1 ) ] 
--------- B -----------
{'intent': {'gloss': ['delete', 'first', 'row', 'of', 'array', 'var0'], 'words': ['delete', 'first', 'row', 'of', 'array', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'var0 = numpy.delete(var0, 0, axis=0)'}
Generated  translation
var0 [ np. arange ( len ( var0 ) ) ] 
--------- B -----------
{'intent': {'gloss': ['how', 'can', 'i', 'launch', 'an', 'instance', 'of', 'an', 'application', 'using', 'python', '?'], 'words': ['how', 'can', 'i', 'launch', 'an', 'instance', 'of', 'an', 'application', 'using', 'python', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "os.system('start excel.exe <path/to/file>')"}
Generated  translation
sys. path. append ('launch') 
--------- B -----------
{'intent': {'gloss': ['sum', 'the', 'length', 'of', 'lists', 'in', 'list', 'var0', 'that', 'are', 'more', 'than', '1', 'item', 'in', 'length'], 'words': ['sum', 'the', 'length', 'of', 'lists', 'in', 'list', 'var0', 'that', 'are', 'more', 'than', '1', 'item', 'in', 'length'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'sum(len(y) for y in var0 if len(y) > 1)'}
Generated  translation
length = sum ( len ( x ) for x in var0 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'utf', '-', '8', 'with', 'bom', 'string', 'var0', 'to', 'utf', '-', '8', 'with', 'no', 'bom', 'var1'], 'words': ['convert', 'utf', '-', '8', 'with', 'bom', 'string', 'var0', 'to', 'utf', '-', '8', 'with', 'no', 'bom', 'var1'], 'after': [' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's', 'var1': 'u'}, 'snippet': "var1 = var0.decode('utf-8-sig')"}
Generated  translation
var0. decode ('utf8'). encode ('utf8') 
--------- B -----------
{'intent': {'gloss': ['shutdown', 'a', 'computer', 'using', 'subprocess'], 'words': ['shutdown', 'a', 'computer', 'using', 'subprocess'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "subprocess.call(['shutdown', '/s'])"}
Generated  translation
subprocess. call ('java ', shell = true ) 
--------- B -----------
{'intent': {'gloss': ['abort', 'a', 'computer', 'shutdown', 'using', 'subprocess'], 'words': ['abort', 'a', 'computer', 'shutdown', 'using', 'subprocess'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "subprocess.call(['shutdown', '/a '])"}
Generated  translation
sys. exit ( 0 ) 
--------- B -----------
{'intent': {'gloss': ['logoff', 'computer', 'having', 'windows', 'operating', 'system', 'using', 'python'], 'words': ['logoff', 'computer', 'having', 'windows', 'operating', 'system', 'using', 'python'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "subprocess.call(['shutdown', '/l '])"}
Generated  translation
import platform platform. system ( ) 
--------- B -----------
{'intent': {'gloss': ['shutdown', 'and', 'restart', 'a', 'computer', 'running', 'windows', 'from', 'script'], 'words': ['shutdown', 'and', 'restart', 'a', 'computer', 'running', 'windows', 'from', 'script'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "subprocess.call(['shutdown', '/r'])"}
Generated  translation
sys. exit ( 0 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'strings', 'in', 'list', '-', 'of', '-', 'lists', 'var0', 'to', 'ints'], 'words': ['convert', 'strings', 'in', 'list', '-', 'of', '-', 'lists', 'var0', 'to', 'ints'], 'after': [' ', ' ', ' ', '', '', '', '', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'lst'}, 'snippet': '[[int(x) for x in sublist] for sublist in var0]'}
Generated  translation
[ int ( i ) for i in var0 ] 
--------- B -----------
{'intent': {'gloss': ['if', 'selenium', 'textarea', 'element', 'var0', 'is', 'not', 'empty', ',', 'clear', 'the', 'field'], 'words': ['if', 'selenium', 'textarea', 'element', 'var0', 'is', 'not', 'empty', ',', 'clear', 'the', 'field'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'foo'}, 'snippet': "driver.find_element_by_id('var0').clear()"}
Generated  translation
var0. pop ('var0') 
--------- B -----------
{'intent': {'gloss': ['join', 'list', 'of', 'numbers', 'str0', 'to', 'string', 'of', 'numbers', '.'], 'words': ['join', 'list', 'of', 'numbers', 'str0', 'to', 'string', 'of', 'numbers', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': '[1,2,3,4]', '[ str0 ]': '[1,2,3,4]'}, 'snippet': '"""""".join([1, 2, 3, 4])'}
Generated  translation
print (''. join ( [ str0 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['parse', 'a', 'file', 'str0', 'using', 'expat', 'parsing', 'in', 'python', '3'], 'words': ['parse', 'a', 'file', 'str0', 'using', 'expat', 'parsing', 'in', 'python', '3'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'sample.xml'}, 'snippet': "parser.parsefile(open('str0', 'rb'))"}
Generated  translation
exec ( compile ( open ('str0'). read ( ),'str0 ','exec') ) 
--------- B -----------
{'intent': {'gloss': ['update', 'the', 'dictionary', 'var0', 'with', 'dynamic', 'keys', 'var1', 'and', 'values', 'with', 'key', 'str0', 'from', 'dictionary', 'var2'], 'words': ['update', 'the', 'dictionary', 'var0', 'with', 'dynamic', 'keys', 'var1', 'and', 'values', 'with', 'key', 'str0', 'from', 'dictionary', 'var2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mydic', 'var1': 'i', 'str0': 'name', 'var2': 'o'}, 'snippet': "var0.update({var1: var2['str0']})"}
Generated  translation
var0. update ( var1 ) 
--------- B -----------
{'intent': {'gloss': ['divide', 'the', 'members', 'of', 'a', 'list', 'var0', 'by', 'the', 'corresponding', 'members', 'of', 'another', 'list', 'var1'], 'words': ['divide', 'the', 'members', 'of', 'a', 'list', 'var0', 'by', 'the', 'corresponding', 'members', 'of', 'another', 'list', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'conversions', 'var1': 'trials'}, 'snippet': '[(c / t) for c, t in zip(var0, var1)]'}
Generated  translation
[ ( x + y ) for x, y in zip ( var0, var1 ) ] 
--------- B -----------
{'intent': {'gloss': ['get', 'index', 'of', 'elements', 'in', 'array', 'var0', 'that', 'occur', 'in', 'another', 'array', 'var1'], 'words': ['get', 'index', 'of', 'elements', 'in', 'array', 'var0', 'that', 'occur', 'in', 'another', 'array', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'b'}, 'snippet': 'np.where(np.in1d(var0, var1))[0]'}
Generated  translation
np. in1d ( var0, var1 ). nonzero ( ) [ 0 ] 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'based', 'on', 'white', 'spaces'], 'words': ['split', 'string', 'var0', 'based', 'on', 'white', 'spaces'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': "re.findall('\\\\s+|\\\\s+', var0)"}
Generated  translation
" " " var0 " " ". split ( ) 
--------- B -----------
{'intent': {'gloss': ['display', 'first', '5', 'characters', 'of', 'string', 'str0'], 'words': ['display', 'first', '5', 'characters', 'of', 'string', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'aaabbbccc'}, 'snippet': '"""{:.5}""".format(\'str0\')'}
Generated  translation
print ('str0 '. join ( [ str0 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['substitute', 'occurrences', 'of', 'unicode', 'regex', 'pattern', 'ustr0', 'with', 'empty', 'string', 'str1', 'in', 'string', 'var0'], 'words': ['substitute', 'occurrences', 'of', 'unicode', 'regex', 'pattern', 'ustr0', 'with', 'empty', 'string', 'str1', 'in', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '\\p{p}+', 'str1': '', 'var0': 'text'}, 'snippet': "return re.sub('str0', 'str1', var0)"}
Generated  translation
var0. replace ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['clear', 'text', 'from', 'textarea', 'str0', 'with', 'selenium'], 'words': ['clear', 'text', 'from', 'textarea', 'str0', 'with', 'selenium'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'foo'}, 'snippet': "driver.find_element_by_id('str0').clear()"}
Generated  translation
driver. find _ element _ by _ css _ selector ('str0'). click ( ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'all', 'string', 'elements', 'in', 'list', 'var0', 'are', 'upper', '-', 'cased'], 'words': ['check', 'if', 'all', 'string', 'elements', 'in', 'list', 'var0', 'are', 'upper', '-', 'cased'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '']}, 'slot_map': {'var0': 'words'}, 'snippet': 'print(all(word[0].isupper() for word in var0))'}
Generated  translation
all ( isinstance ( x, int ) for x in var0 ) 
--------- B -----------
{'intent': {'gloss': ['change', 'flask', 'security', 'register', 'url', 'to', 'str0'], 'words': ['change', 'flask', 'security', 'register', 'url', 'to', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '/create_account'}, 'snippet': "app.config['security_register_url'] = 'str0'"}
Generated  translation
urllib. request. urlopen ('str0'). getcode ( ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'average', 'values', 'from', 'two', 'numpy', 'arrays', 'var0', 'and', 'var1'], 'words': ['get', 'the', 'average', 'values', 'from', 'two', 'numpy', 'arrays', 'var0', 'and', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'old_set', 'var1': 'new_set'}, 'snippet': 'np.mean(np.array([var0, var1]), axis=0)'}
Generated  translation
np. einsum ('ijk, ikl - > ijl ', var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'pandas', 'group', 'by', 'object', 'to', 'multi', '-', 'indexed', 'dataframe', 'with', 'indices', 'str0', 'and', 'str1'], 'words': ['convert', 'pandas', 'group', 'by', 'object', 'to', 'multi', '-', 'indexed', 'dataframe', 'with', 'indices', 'str0', 'and', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'name', 'str1': 'destination'}, 'snippet': "df.set_index(['str0', 'str1'])"}
Generated  translation
df. groupby ( ['str0 ','str1'] ). sum ( ). unstack ( level = 0 ) 
--------- B -----------
{'intent': {'gloss': ['print', 'list', 'of', 'items', 'var0'], 'words': ['print', 'list', 'of', 'items', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylist'}, 'snippet': "print('\\n'.join(str(p) for p in var0))"}
Generated  translation
print ( list ( var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'dict', 'by', 'value', 'python'], 'words': ['sort', 'dict', 'by', 'value', 'python'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'sorted(list(data.items()), key=lambda x: x[1])'}
Generated  translation
sorted ( list ( mydict. items ( ) ), key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['calling', 'an', 'external', 'command', 'str0'], 'words': ['calling', 'an', 'external', 'command', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'echo hello world'}, 'snippet': "return_code = subprocess.call('str0', shell=true)"}
Generated  translation
subprocess. call ('str0 ', shell = true ) 
--------- B -----------
{'intent': {'gloss': ['match', 'zero', '-', 'or', '-', 'more', 'instances', 'of', 'lower', 'case', 'alphabet', 'characters', 'in', 'a', 'string', 'str0'], 'words': ['match', 'zero', '-', 'or', '-', 'more', 'instances', 'of', 'lower', 'case', 'alphabet', 'characters', 'in', 'a', 'string', 'str0'], 'after': [' ', '', '', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'f233op'}, 'snippet': "re.findall('([a-z]*)', 'str0')"}
Generated  translation
re. match ('(. *? [.?! ] (? : \ \ s +. *? [.?! ] ) { 0, 1 } ) ','str0') 
--------- B -----------
{'intent': {'gloss': ['match', 'zero', '-', 'or', '-', 'more', 'instances', 'of', 'lower', 'case', 'alphabet', 'characters', 'in', 'a', 'string', 'str0'], 'words': ['match', 'zero', '-', 'or', '-', 'more', 'instances', 'of', 'lower', 'case', 'alphabet', 'characters', 'in', 'a', 'string', 'str0'], 'after': [' ', '', '', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'f233op'}, 'snippet': "re.findall('([a-z])*', 'str0')"}
Generated  translation
re. match ('(. *? [.?! ] (? : \ \ s +. *? [.?! ] ) { 0, 1 } ) ','str0') 
--------- B -----------
{'intent': {'gloss': ['remove', 'duplicates', 'elements', 'from', 'list', 'var0', 'and', 'sort', 'it', 'in', 'ascending', 'order'], 'words': ['remove', 'duplicates', 'elements', 'from', 'list', 'var0', 'and', 'sort', 'it', 'in', 'ascending', 'order'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'sequences'}, 'snippet': 'sorted(set(itertools.chain.from_iterable(var0)))'}
Generated  translation
sorted ( var0, key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['print', 'a', 'celsius', 'symbol', 'with', 'matplotlib'], 'words': ['print', 'a', 'celsius', 'symbol', 'with', 'matplotlib'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "ax.set_xlabel('temperature ($^\\\\circ$c)')"}
Generated  translation
print ('total score for { 0 :. 2f } '. format ( flt ) ) 
--------- B -----------
{'intent': {'gloss': ['create', 'new', 'list', 'var0', 'by', 'splitting', 'each', 'item', 'in', 'list', 'var1'], 'words': ['create', 'new', 'list', 'var0', 'by', 'splitting', 'each', 'item', 'in', 'list', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'result', 'var1': 'words'}, 'snippet': "var0 = [item for word in var1 for item in word.split(',')]"}
Generated  translation
var0 = [ var1 [ i ] for i in var1 ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'json', 'string', 'str0', 'into', 'a', 'datetime', 'object', 'using', 'format', 'str1'], 'words': ['convert', 'json', 'string', 'str0', 'into', 'a', 'datetime', 'object', 'using', 'format', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '2012-05-29t19:30:03.283z', 'str1': '%y-%m-%dt%h:%m:%s.%fz'}, 'snippet': "datetime.datetime.strptime('str0', 'str1')"}
Generated  translation
datetime. datetime. strptime ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['multiply', 'the', 'columns', 'of', 'sparse', 'matrix', 'var0', 'by', 'array', 'var1', 'then', 'multiply', 'the', 'rows', 'of', 'the', 'resulting', 'matrix', 'by', 'array', 'var1'], 'words': ['multiply', 'the', 'columns', 'of', 'sparse', 'matrix', 'var0', 'by', 'array', 'var1', 'then', 'multiply', 'the', 'rows', 'of', 'the', 'resulting', 'matrix', 'by', 'array', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'm', 'var1': 'a', 'var2': 'a'}, 'snippet': 'numpy.dot(numpy.dot(var2, var0), var2)'}
Generated  translation
np. multiply ( var0, var1 ). sum ( axis = 0 ) 
--------- B -----------
{'intent': {'gloss': ['group', 'a', 'pandas', 'data', 'frame', 'by', 'monthly', 'frequenct', 'var0', 'using', 'groupby'], 'words': ['group', 'a', 'pandas', 'data', 'frame', 'by', 'monthly', 'frequenct', 'var0', 'using', 'groupby'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'm'}, 'snippet': "df.groupby(pd.timegrouper(freq='var0'))"}
Generated  translation
df. groupby ('colour'). sum ( ) 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'list', 'of', 'pairs', 'of', 'key', '-', 'value', 'sorted', 'by', 'values', 'in', 'dictionary', 'var0'], 'words': ['get', 'a', 'list', 'of', 'pairs', 'of', 'key', '-', 'value', 'sorted', 'by', 'values', 'in', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'data'}, 'snippet': 'sorted(list(var0.items()), key=lambda x: x[1])'}
Generated  translation
sorted ( list ( var0. items ( ) ), key = lambda k _ v : k _ v [ 1 ], reverse = true ) 
--------- B -----------
{'intent': {'gloss': ['add', '1', 'hour', 'and', '2', 'minutes', 'to', 'time', 'object', 'var0'], 'words': ['add', '1', 'hour', 'and', '2', 'minutes', 'to', 'time', 'object', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 't'}, 'snippet': 'dt = datetime.datetime.combine(datetime.date.today(), var0)'}
Generated  translation
datetime. datetime. combine ( var0, 1, 2 ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'dictionary', 'values', 'by', 'str0', 'in', 'reverse', 'order'], 'words': ['sort', 'a', 'list', 'of', 'dictionary', 'values', 'by', 'str0', 'in', 'reverse', 'order'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'date'}, 'snippet': "list.sort(key=lambda item: item['str0'], reverse=true)"}
Generated  translation
sorted ( str0, key = lambda x : x [ 1 ], reverse = true ) 
--------- B -----------
{'intent': {'gloss': ['create', 'dataframe', 'var0', 'with', 'content', 'of', 'hdf', 'store', 'file', 'str0', 'with', 'key', 'of', 'str1'], 'words': ['create', 'dataframe', 'var0', 'with', 'content', 'of', 'hdf', 'store', 'file', 'str0', 'with', 'key', 'of', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': '/home/.../data.h5', 'str1': 'firstset'}, 'snippet': "df1 = pd.read_hdf('str0', 'str1')"}
Generated  translation
var0 = pd. read _ csv ('str0 ', sep ='str1 ', names = ['str1'] ) 
--------- B -----------
{'intent': {'gloss': ['matplotlib', 'change', 'marker', 'size', 'to', '500'], 'words': ['matplotlib', 'change', 'marker', 'size', 'to', '500'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "scatter(x, y, s=500, color='green', marker='h')"}
Generated  translation
plt. plot ( list ( range ( 10 ) ), lines ) 
--------- B -----------
{'intent': {'gloss': ['count', 'var0', 'values', 'associated', 'with', 'key', 'str0', 'in', 'dictionary', 'var1'], 'words': ['count', 'var0', 'values', 'associated', 'with', 'key', 'str0', 'in', 'dictionary', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'true', 'str0': 'one', 'var1': 'tadas'}, 'snippet': "sum(item['str0'] for item in list(var1.values()))"}
Generated  translation
sum ( 1 if var0 ['str0'] else 0 for var0 in s ) 
--------- B -----------
{'intent': {'gloss': ['get', 'last', 'day', 'of', 'the', 'first', 'month', 'in', 'year', '2000'], 'words': ['get', 'last', 'day', 'of', 'the', 'first', 'month', 'in', 'year', '2000'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'datetime.date(2000, 2, 1) - datetime.timedelta(days=1)'}
Generated  translation
datetime. datetime. strptime ('january 11, 2010 ','% b % d, % y'). strftime ('% a') 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'str0', 'based', 'on', 'string', 'str1', ',', 'str2', 'or', 'str3'], 'words': ['split', 'string', 'str0', 'based', 'on', 'string', 'str1', ',', 'str2', 'or', 'str3'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'sad_pandas_and_happy_cats_for_people', 'str1': 'and', 'str2': 'or', 'str3': 'for'}, 'snippet': "re.split('_(?:for|or|and)_', 'str0')"}
Generated  translation
" " " str0 " " ". split ('str1 ', 1 ) 
--------- B -----------
{'intent': {'gloss': ['pads', 'string', 'str0', 'on', 'the', 'left', 'with', '1', 'zero'], 'words': ['pads', 'string', 'str0', 'on', 'the', 'left', 'with', '1', 'zero'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '5'}, 'snippet': "print('{0}'.format('str0'.zfill(2)))"}
Generated  translation
" " " str0 " " ". rstrip ('\ n') 
--------- B -----------
{'intent': {'gloss': ['remove', 'all', 'items', 'from', 'a', 'dictionary', 'var0', 'whose', 'values', 'are', 'str0'], 'words': ['remove', 'all', 'items', 'from', 'a', 'dictionary', 'var0', 'whose', 'values', 'are', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mydict', 'str0': '42'}, 'snippet': '{key: val for key, val in list(var0.items()) if val != 42}'}
Generated  translation
var0 = dict ( ( k, v ) for k, v in var0. items ( ) if v > 0 ) 
--------- B -----------
{'intent': {'gloss': ['merge', 'rows', 'from', 'dataframe', 'var0', 'with', 'rows', 'from', 'dataframe', 'var1', 'and', 'calculate', 'the', 'mean', 'for', 'rows', 'that', 'have', 'the', 'same', 'value', 'of', 'axis', '1'], 'words': ['merge', 'rows', 'from', 'dataframe', 'var0', 'with', 'rows', 'from', 'dataframe', 'var1', 'and', 'calculate', 'the', 'mean', 'for', 'rows', 'that', 'have', 'the', 'same', 'value', 'of', 'axis', '1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df1', 'var1': 'df2'}, 'snippet': 'pd.concat((var0, var1), axis=1).mean(axis=1)'}
Generated  translation
pd. merge ( var0, var1, on ='var0 ', how ='inner') 
--------- B -----------
{'intent': {'gloss': ['invoke', 'perl', 'script', 'str0', 'using', 'perl', 'interpeter', 'str1', 'and', 'send', 'argument', 'var0', 'to', 'it'], 'words': ['invoke', 'perl', 'script', 'str0', 'using', 'perl', 'interpeter', 'str1', 'and', 'send', 'argument', 'var0', 'to', 'it'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': './uireplace.pl', 'str1': '/usr/bin/perl', 'var0': 'var'}, 'snippet': "subprocess.call(['str1', 'str0', var0])"}
Generated  translation
with open ('str1 ','r') as f : var0 = f. write ('str0') 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'key', 'str0', 'and', 'key', 'str1', 'are', 'presented', 'in', 'dictionary', 'var0'], 'words': ['check', 'if', 'key', 'str0', 'and', 'key', 'str1', 'are', 'presented', 'in', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'stackoverflow', 'str1': 'google', 'var0': 'sites'}, 'snippet': "set(['str0', 'str1']).issubset(var0)"}
Generated  translation
{ k : var0 [ k ] for k in ('str0 ','str1') } 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'elements', 'in', 'list', 'var0', 'are', 'coherent', 'in', 'order'], 'words': ['check', 'if', 'elements', 'in', 'list', 'var0', 'are', 'coherent', 'in', 'order'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'my_list'}, 'snippet': 'return var0 == list(range(var0[0], var0[-1] + 1))'}
Generated  translation
len ( set ( var0 ) ) = = 1 
--------- B -----------
{'intent': {'gloss': ['get', 'data', 'from', 'dataframe', 'var0', 'where', 'column', 'str0', 'is', 'equal', 'to', '0'], 'words': ['get', 'data', 'from', 'dataframe', 'var0', 'where', 'column', 'str0', 'is', 'equal', 'to', '0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'x'}, 'snippet': "var0.groupby('user')['str0'].transform(sum) == 0"}
Generated  translation
var0. loc [ var0 ['str0'] = = 0 ] 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'nested', 'list', 'by', 'the', 'inverse', 'of', 'element', '2', ',', 'then', 'by', 'element', '1'], 'words': ['sort', 'a', 'nested', 'list', 'by', 'the', 'inverse', 'of', 'element', '2', ',', 'then', 'by', 'element', '1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'sorted(l, key=lambda x: (-int(x[1]), x[0]))'}
Generated  translation
sorted ( list ( range ( 2 ), key = lambda x : x [ 1 ] ), x [ 0 ] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'string', 'var0', 'between', 'two', 'substrings', 'in', 'a', 'string', 'str0', 'using', 'regex'], 'words': ['get', 'a', 'string', 'var0', 'between', 'two', 'substrings', 'in', 'a', 'string', 'str0', 'using', 'regex'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'randomkey123xyz987', 'str0': "api('randomkey123xyz987', 'key', 'text')"}, 'snippet': 're.findall("api\\\\(\'(.*?)\'", \'str0\')'}
Generated  translation
re. findall ('\ \ d + (? = [ ^ [ ] + $ ) ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['return', 'the', 'decimal', 'value', 'for', 'each', 'hex', 'character', 'in', 'data', 'var0'], 'words': ['return', 'the', 'decimal', 'value', 'for', 'each', 'hex', 'character', 'in', 'data', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'data'}, 'snippet': "print(' '.join([str(ord(a)) for a in var0]))"}
Generated  translation
var0 [ 0 ] = numpy. logical _ not ( numpy. isnan ( var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['delete', 'letters', 'from', 'string', 'str0'], 'words': ['delete', 'letters', 'from', 'string', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '12454v'}, 'snippet': '"""""".join(filter(str.isdigit, \'str0\'))'}
Generated  translation
" " " str0 " " ". replace ('','' ) 
--------- B -----------
{'intent': {'gloss': ['generate', 'all', 'permutations', 'of', 'list', 'str0', 'and', 'list', 'str1'], 'words': ['generate', 'all', 'permutations', 'of', 'list', 'str0', 'and', 'list', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '[1, 2, 3]', 'str1': '[4, 5, 6]', '[ str0 ]': '[1, 2, 3]', '[ str1 ]': '[4, 5, 6]'}, 'snippet': 'print(list(itertools.product([ str0 ], [ str1 ])))'}
Generated  translation
list ( set ( ['str0 ','str1'] ) ) 
--------- B -----------
{'intent': {'gloss': ['call', 'base', 'class', "'", 's', '_', '_', 'init', '_', '_', 'method', 'from', 'the', 'child', 'class', 'var0'], 'words': ['call', 'base', 'class', "'", 's', '_', '_', 'init', '_', '_', 'method', 'from', 'the', 'child', 'class', 'var0'], 'after': [' ', ' ', '', '', ' ', '', '', '', '', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'childclass'}, 'snippet': 'super(var0, self).__init__(*args, **kwargs)'}
Generated  translation
super ( var0, self ). _ _ init _ _ ( name, year ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'structured', 'numpy', 'array', 'str0', 'on', 'multiple', 'columns', 'str1', ',', 'str2', 'and', 'str3', '.'], 'words': ['sort', 'a', 'structured', 'numpy', 'array', 'str0', 'on', 'multiple', 'columns', 'str1', ',', 'str2', 'and', 'str3', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'df', 'str1': 'year', 'str2': 'month', 'str3': 'day'}, 'snippet': "str0.sort(['str1', 'str2', 'str3'])"}
Generated  translation
sorted ( str0, key = lambda x : ( x ['str1 ','str2'] ), reverse = true ) 
--------- B -----------
{'intent': {'gloss': ['group', 'rows', 'of', 'pandas', 'dataframe', 'var0', 'with', 'same', 'str0'], 'words': ['group', 'rows', 'of', 'pandas', 'dataframe', 'var0', 'with', 'same', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'id'}, 'snippet': "var0.groupby('str0').agg(lambda x: x.tolist())"}
Generated  translation
var0. groupby ( var0. index. map ( lambda x : x. mean ( ) ) ) 
--------- B -----------
{'intent': {'gloss': ['decode', 'url', '-', 'encoded', 'string', 'var0', 'to', 'its', 'character', 'equivalents'], 'words': ['decode', 'url', '-', 'encoded', 'string', 'var0', 'to', 'its', 'character', 'equivalents'], 'after': [' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'some_string'}, 'snippet': 'urllib.parse.unquote(urllib.parse.unquote(var0))'}
Generated  translation
urllib. parse. unquote ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['create', 'array', 'var0', 'containing', 'integers', 'from', 'stdin'], 'words': ['create', 'array', 'var0', 'containing', 'integers', 'from', 'stdin'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'var0.fromlist([int(val) for val in stdin.read().split()])'}
Generated  translation
var0 = [ int ( x ) for x in var0 ] 
--------- B -----------
{'intent': {'gloss': ['get', 'all', 'var0', 'tags', 'where', 'the', 'text', 'starts', 'with', 'value', 'str0', 'using', 'regex'], 'words': ['get', 'all', 'var0', 'tags', 'where', 'the', 'text', 'starts', 'with', 'value', 'str0', 'using', 'regex'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'str0': 'some text'}, 'snippet': 'doc.xpath("//a[starts-with(text(),\'some text\')]")'}
Generated  translation
re. search ('[ a - za - z ] ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['decode', 'a', 'urllib', 'escaped', 'url', 'string', 'var0', 'with', 'var1'], 'words': ['decode', 'a', 'urllib', 'escaped', 'url', 'string', 'var0', 'with', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'url', 'var1': 'utf8'}, 'snippet': "var0 = urllib.parse.unquote(var0).decode('var1')"}
Generated  translation
urllib. parse. quote _ plus ('var0') 
--------- B -----------
{'intent': {'gloss': ['find', 'all', 'occurrences', 'of', 'a', 'substring', 'in', 'a', 'string'], 'words': ['find', 'all', 'occurrences', 'of', 'a', 'substring', 'in', 'a', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "[m.start() for m in re.finditer('test', 'test test test test')]"}
Generated  translation
re. findall ('\ \ s + ','your _ string') 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'number', '2130706433', 'to', 'ip', 'string'], 'words': ['convert', 'a', 'number', '2130706433', 'to', 'ip', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "socket.inet_ntoa(struct.pack('!l', 2130706433))"}
Generated  translation
struct. pack ('< i ', 1633837924 ) 
--------- B -----------
{'intent': {'gloss': ['assign', 'an', 'array', 'of', 'floats', 'in', 'range', 'from', '0', 'to', '100', 'to', 'a', 'variable', 'var0'], 'words': ['assign', 'an', 'array', 'of', 'floats', 'in', 'range', 'from', '0', 'to', '100', 'to', 'a', 'variable', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'values'}, 'snippet': 'var0 = np.array([i for i in range(100)], dtype=np.float64)'}
Generated  translation
var0 = [ ( i + 100 ) for i in range ( 100 ) ] 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'numpy', 'array', 'containing', 'elements', 'of', 'array', 'var0', 'as', 'pointed', 'to', 'by', 'index', 'in', 'array', 'var1'], 'words': ['create', 'a', 'numpy', 'array', 'containing', 'elements', 'of', 'array', 'var0', 'as', 'pointed', 'to', 'by', 'index', 'in', 'array', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'b'}, 'snippet': 'var0[np.arange(var0.shape[0])[:, (none)], var1]'}
Generated  translation
np. argwhere ( np. all ( var0 = = var1 ) ) 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'string', 'var0', 'by', 'multiple', 'words', 'var1', 'or', 'var2', 'or', 'var3'], 'words': ['split', 'a', 'string', 'var0', 'by', 'multiple', 'words', 'var1', 'or', 'var2', 'or', 'var3'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l', 'var1': 'for', 'var2': 'or', 'var3': 'and'}, 'snippet': "[re.split('_(?:f?or|and)_', s) for s in var0]"}
Generated  translation
var0. split ('var1 ','var2') [ 1 ] 
--------- B -----------
{'intent': {'gloss': ['sort', 'array', 'var0', 'based', 'on', 'column', 'str0', ',', 'str1', 'and', 'str2'], 'words': ['sort', 'array', 'var0', 'based', 'on', 'column', 'str0', ',', 'str1', 'and', 'str2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'order_array', 'str0': 'year', 'str1': 'month', 'str2': 'day'}, 'snippet': "var0.sort(order=['str0', 'str1', 'str2'])"}
Generated  translation
var0. sort ( key = operator. itemgetter ('str0 ','str1') ) 
--------- B -----------
{'intent': {'gloss': ['encode', 'a', 'pdf', 'file', 'str0', 'with', 'var0', 'encoding'], 'words': ['encode', 'a', 'pdf', 'file', 'str0', 'with', 'var0', 'encoding'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'pdf_reference.pdf', 'var0': 'base64'}, 'snippet': "a = open('str0', 'rb').read().encode('var0')"}
Generated  translation
webbrowser. open ('str0 ','r'). encode ('utf - 8') 
--------- B -----------
{'intent': {'gloss': ['enclose', 'numbers', 'in', 'quotes', 'in', 'a', 'string', 'str0'], 'words': ['enclose', 'numbers', 'in', 'quotes', 'in', 'a', 'string', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'this is number 1 and this is number 22'}, 'snippet': 're.sub(\'(\\\\d+)\', \'"\\\\1"\', \'str0\')'}
Generated  translation
re. findall ('\ \ d + (? : \ \ w + ) ','str0') 
--------- B -----------
{'intent': {'gloss': ['display', 'current', 'time'], 'words': ['display', 'current', 'time'], 'after': [' ', ' ', '']}, 'slot_map': {}, 'snippet': "now = datetime.datetime.now().strftime('%h:%m:%s')"}
Generated  translation
datetime. datetime. now ( ). time ( ) 
--------- B -----------
{'intent': {'gloss': ['decode', 'url', 'var0', 'with', 'utf8', 'and', 'print', 'it'], 'words': ['decode', 'url', 'var0', 'with', 'utf8', 'and', 'print', 'it'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'url'}, 'snippet': "print(urllib.parse.unquote(var0).decode('utf8'))"}
Generated  translation
urllib. parse. unquote ( var0 ). decode ('utf - 8') 
--------- B -----------
{'intent': {'gloss': ['parse', 'string', 'var0', 'into', 'a', 'datetime', 'object', 'using', 'format', 'pattern', 'str0'], 'words': ['parse', 'string', 'var0', 'into', 'a', 'datetime', 'object', 'using', 'format', 'pattern', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'datestr', 'str0': '%y-%m-%d'}, 'snippet': "dateobj = datetime.datetime.strptime(var0, 'str0').date()"}
Generated  translation
datetime. datetime. strptime ('str0 ','str0') 
--------- B -----------
{'intent': {'gloss': ['find', 'the', 'magnitude', '(', 'length', ')', 'squared', 'of', 'a', 'vector', 'var0', 'field'], 'words': ['find', 'the', 'magnitude', '(', 'length', ')', 'squared', 'of', 'a', 'vector', 'var0', 'field'], 'after': [' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'vf'}, 'snippet': "np.einsum('...j,...j->...', var0, var0)"}
Generated  translation
sum ( var0 ) / float ( var0. isnull ( ) ) 
--------- B -----------
{'intent': {'gloss': ['un', '-', 'escaping', 'characters', 'in', 'a', 'string', 'with', 'python'], 'words': ['un', '-', 'escaping', 'characters', 'in', 'a', 'string', 'with', 'python'], 'after': ['', '', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': '"""\\\\u003cp\\\\u003e""".decode(\'unicode-escape\')'}
Generated  translation
print ('" " '. join ( map ( str, x ) ) ) 
--------- B -----------
{'intent': {'gloss': ['coalesce', 'non', '-', 'word', '-', 'characters', 'in', 'string', 'var0'], 'words': ['coalesce', 'non', '-', 'word', '-', 'characters', 'in', 'string', 'var0'], 'after': [' ', '', '', '', '', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': "print(re.sub('(\\\\w)\\\\1+', '\\\\1', var0))"}
Generated  translation
re. sub ('[ ^ 0 - 9 ] ','', var0 ) 
--------- B -----------
{'intent': {'gloss': ['substract', '1', 'hour', 'and', '10', 'minutes', 'from', 'current', 'time'], 'words': ['substract', '1', 'hour', 'and', '10', 'minutes', 'from', 'current', 'time'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 't = datetime.datetime.now()\nt - datetime.timedelta(hours=1, minutes=10)'}
Generated  translation
datetime. datetime. strptime ('january 11, 2010 ','% b % d, % y') 
--------- B -----------
{'intent': {'gloss': ['find', 'indexes', 'of', 'all', 'occurrences', 'of', 'a', 'substring', 'var0', 'in', 'a', 'string', 'var1'], 'words': ['find', 'indexes', 'of', 'all', 'occurrences', 'of', 'a', 'substring', 'var0', 'in', 'a', 'string', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'tt', 'var1': 'ttt'}, 'snippet': "[m.start() for m in re.finditer('(?=tt)', 'var1')]"}
Generated  translation
indices = [ i for i, x in enumerate ( var1 ) if x! = 0 ] 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'dictionaries', 'var0', 'by', 'values', 'in', 'an', 'order', 'var1'], 'words': ['sort', 'a', 'list', 'of', 'dictionaries', 'var0', 'by', 'values', 'in', 'an', 'order', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list_of_dct', 'var1': 'order'}, 'snippet': 'sorted(var0, key=lambda x: var1.index(list(x.values())[0]))'}
Generated  translation
sorted ( var0, key = lambda x : x ['var1'] ) 
--------- B -----------
{'intent': {'gloss': ['decode', 'a', 'double', 'url', 'encoded', 'string', '\r\nstr0', 'to\r\nstr1'], 'words': ['decode', 'a', 'double', 'url', 'encoded', 'string', '\r\nstr0', 'to\r\nstr1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'fireshot3%2b%25282%2529.png', 'str1': 'fireshot3+(2).png'}, 'snippet': "urllib.parse.unquote(urllib.parse.unquote('str0'))"}
Generated  translation
urllib. parse. quote ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'list', 'of', 'all', 'the', 'duplicate', 'items', 'in', 'dataframe', 'var0', 'using', 'pandas'], 'words': ['get', 'a', 'list', 'of', 'all', 'the', 'duplicate', 'items', 'in', 'dataframe', 'var0', 'using', 'pandas'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': "pd.concat(g for _, g in var0.groupby('id') if len(g) > 1)"}
Generated  translation
list ( var0. keys ( ) ). reset _ index ( drop = true ) 
--------- B -----------
{'intent': {'gloss': ['delete', 'every', 'non', 'str0', 'characters', 'from', 'a', 'string', 'var0'], 'words': ['delete', 'every', 'non', 'str0', 'characters', 'from', 'a', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'utf-8', 'var0': 'line'}, 'snippet': "var0 = var0.decode('str0', 'ignore').encode('str0')"}
Generated  translation
re. sub ('[ ^ a - za - z ] * ','str0') 
--------- B -----------
{'intent': {'gloss': ['encode', 'str0', 'as', 'unicode', 'and', 'decode', 'with', 'utf', '-', '8'], 'words': ['encode', 'str0', 'as', 'unicode', 'and', 'decode', 'with', 'utf', '-', '8'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '']}, 'slot_map': {'str0': "u'xÃ¼yÃ\x9f'"}, 'snippet': '"""xÃ¼yÃ\x9f""".encode(\'raw_unicode_escape\').decode(\'utf-8\')'}
Generated  translation
urllib. parse. unquote ('str0') 
--------- B -----------
{'intent': {'gloss': ['make', 'an', 'http', 'post', 'request', 'with', 'data', 'var0'], 'words': ['make', 'an', 'http', 'post', 'request', 'with', 'data', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'post_data'}, 'snippet': "post_response = requests.post(url='http://httpbin.org/post', json=var0)"}
Generated  translation
requests. post ( var0, var0 ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'items', 'from', 'dictionary', 'var0', 'if', 'the', 'item', "'", 's', 'value', 'var1', 'is', 'equal', 'to', '42'], 'words': ['remove', 'items', 'from', 'dictionary', 'var0', 'if', 'the', 'item', "'", 's', 'value', 'var1', 'is', 'equal', 'to', '42'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mydict', 'var1': 'val'}, 'snippet': 'var0 = {key: var1 for key, var1 in list(var0.items()) if var1 != 42}'}
Generated  translation
var0 = dict ( ( k, v ) for k, v in list ( var0. items ( ) ) if v > 0 ) 
--------- B -----------
{'intent': {'gloss': ['how', 'do', 'i', 'find', 'an', 'element', 'that', 'contains', 'specific', 'text', 'in', 'selenium', 'webdriver', '(', 'python', ')', '?'], 'words': ['how', 'do', 'i', 'find', 'an', 'element', 'that', 'contains', 'specific', 'text', 'in', 'selenium', 'webdriver', '(', 'python', ')', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '', '']}, 'slot_map': {}, 'snippet': 'driver.find_elements_by_xpath("//*[contains(text(), \'my button\')]")'}
Generated  translation
driver. find _ element _ by _ xpath ( " / / div [ @ id ='a'] / / a [ @ class ='click'] " ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'unicode', 'string', 'var0', 'to', 'a', 'str0', 'string'], 'words': ['convert', 'a', 'unicode', 'string', 'var0', 'to', 'a', 'str0', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'title', 'str0': 'ascii'}, 'snippet': "unicodedata.normalize('nfkd', var0).encode('str0', 'ignore')"}
Generated  translation
" " " str0 " " ". encode ('latin - 1') 
--------- B -----------
{'intent': {'gloss': ['restart', 'a', 'computer', 'after', 'str0', 'seconds', 'using', 'subprocess'], 'words': ['restart', 'a', 'computer', 'after', 'str0', 'seconds', 'using', 'subprocess'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '900'}, 'snippet': "subprocess.call(['shutdown', '/r', '/t', 'str0'])"}
Generated  translation
subprocess. call ('str0 ', shell = true ) 
--------- B -----------
{'intent': {'gloss': ['update', 'row', 'values', 'for', 'a', 'column', 'var0', 'using', 'vectorized', 'string', 'operation', 'in', 'pandas'], 'words': ['update', 'row', 'values', 'for', 'a', 'column', 'var0', 'using', 'vectorized', 'string', 'operation', 'in', 'pandas'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'season'}, 'snippet': "df['var0'].str.split('-').str[0].astype(int)"}
Generated  translation
df. apply ( lambda x : x. tolist ( ), axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'date', 'string', 'var0', 'in', 'format', 'pattern', 'str0', 'into', 'a', 'timestamp'], 'words': ['convert', 'date', 'string', 'var0', 'in', 'format', 'pattern', 'str0', 'into', 'a', 'timestamp'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's', 'str0': '%d/%m/%y'}, 'snippet': "time.mktime(datetime.datetime.strptime(var0, 'str0').timetuple())"}
Generated  translation
datetime. datetime. strptime ('str0 ','str0'). strftime ('str0') 
--------- B -----------
{'intent': {'gloss': ['django', 'check', 'if', 'an', 'object', 'with', 'criteria', 'var0', 'equal', 'to', 'str0', 'and', 'criteria', 'var1', 'equal', 'to', 'str1', 'exists', 'in', 'model', 'var2'], 'words': ['django', 'check', 'if', 'an', 'object', 'with', 'criteria', 'var0', 'equal', 'to', 'str0', 'and', 'criteria', 'var1', 'equal', 'to', 'str1', 'exists', 'in', 'model', 'var2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'name', 'str0': 'name', 'var1': 'title', 'str1': 'title', 'var2': 'entry'}, 'snippet': "var2.objects.filter(str0='str0', str1='str1').exists()"}
Generated  translation
var2. objects. filter ( var0 = var1 ). order _ by ('str0') 
--------- B -----------
{'intent': {'gloss': ['delete', 'every', '8th', 'column', 'in', 'a', 'numpy', 'array', 'str0', '.'], 'words': ['delete', 'every', '8th', 'column', 'in', 'a', 'numpy', 'array', 'str0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'a'}, 'snippet': 'np.delete(str0, list(range(0, str0.shape[1], 8)), axis=1)'}
Generated  translation
str0 [ :, ( 1 ) ] 
--------- B -----------
{'intent': {'gloss': ['find', 'the', 'index', 'of', 'the', 'second', 'occurrence', 'of', 'the', 'substring', 'var0', 'in', 'string', 'str0'], 'words': ['find', 'the', 'index', 'of', 'the', 'second', 'occurrence', 'of', 'the', 'substring', 'var0', 'in', 'string', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'bar', 'str0': 'foo bar bar bar'}, 'snippet': '"""str0""".replace(\'var0\', \'xxx\', 1).find(\'var0\')'}
Generated  translation
" " " str0 " " ". index ('str0') 
--------- B -----------
{'intent': {'gloss': ['place', 'str0', 'infront', 'of', 'each', 'non', '-', 'letter', 'char', 'in', 'string', 'var0'], 'words': ['place', 'str0', 'infront', 'of', 'each', 'non', '-', 'letter', 'char', 'in', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '', 'var0': 'line'}, 'snippet': "print(re.sub('[_%^$]', '\\\\\\\\\\\\g<0>', var0))"}
Generated  translation
var0 = re. sub ('( \ \ bget \ \ b ) ','\ \ 1 @ ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['rearrange', 'the', 'columns', 'str0', ',', 'str1', ',', 'str2', ',', 'str3', 'of', 'pandas', 'dataframe', 'var0', 'in', 'mentioned', 'sequence', 'str2', ',', 'str3', ',', 'str0', ',', 'str1'], 'words': ['rearrange', 'the', 'columns', 'str0', ',', 'str1', ',', 'str2', ',', 'str3', 'of', 'pandas', 'dataframe', 'var0', 'in', 'mentioned', 'sequence', 'str2', ',', 'str3', ',', 'str0', ',', 'str1'], 'after': [' ', ' ', ' ', '', '', '', '', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '', ' ', '', '']}, 'slot_map': {'str0': 'a', 'str1': 'b', 'str2': 'x', 'str3': 'y', 'var0': 'df', 'str4': 'x', 'str5': 'y', 'str6': 'a', 'str7': 'b'}, 'snippet': "var0 = var0[['str4', 'str5', 'str6', 'str7']]"}
Generated  translation
var0. drop ( ['str0 ','str1 ','str2 ','str3'], axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['strip', 'everything', 'up', 'to', 'and', 'including', 'the', 'character', 'str0', 'from', 'url', 'var0', ',', 'strip', 'the', 'character', 'str1', 'from', 'the', 'remaining', 'string', 'and', 'concatenate', 'str2', 'to', 'the', 'end'], 'words': ['strip', 'everything', 'up', 'to', 'and', 'including', 'the', 'character', 'str0', 'from', 'url', 'var0', ',', 'strip', 'the', 'character', 'str1', 'from', 'the', 'remaining', 'string', 'and', 'concatenate', 'str2', 'to', 'the', 'end'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '&', 'var0': 'url', 'str1': '=', 'str2': '.html'}, 'snippet': "var0.split('str0')[-1].replace('str1', '') + 'str2'"}
Generated  translation
re. sub ('str0 ','str1 ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['save', 'array', 'at', 'index', '0', ',', 'index', '1', 'and', 'index', '8', 'of', 'array', 'var0', 'to', 'tmp', 'file', 'var1'], 'words': ['save', 'array', 'at', 'index', '0', ',', 'index', '1', 'and', 'index', '8', 'of', 'array', 'var0', 'to', 'tmp', 'file', 'var1'], 'after': [' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'np', 'var1': 'tmp'}, 'snippet': 'var0.savez(var1, *[getarray[0], getarray[1], getarray[8]])'}
Generated  translation
var1. savefig ('var0 ', 8 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'data', 'of', 'dataframe', 'var0', 'where', 'the', 'sum', 'of', 'column', 'str0', 'grouped', 'by', 'column', 'str1', 'is', 'equal', 'to', '0'], 'words': ['get', 'data', 'of', 'dataframe', 'var0', 'where', 'the', 'sum', 'of', 'column', 'str0', 'grouped', 'by', 'column', 'str1', 'is', 'equal', 'to', '0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'x', 'str1': 'user'}, 'snippet': "var0.loc[var0.groupby('str1')['str0'].transform(sum) == 0]"}
Generated  translation
var0. loc [ var0 ['str0']! = 0 ] 
--------- B -----------
{'intent': {'gloss': ['adding', 'a', '1', '-', 'd', 'array', 'str0', 'to', 'a', '3', '-', 'd', 'array', 'str1'], 'words': ['adding', 'a', '1', '-', 'd', 'array', 'str0', 'to', 'a', '3', '-', 'd', 'array', 'str1'], 'after': [' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', '']}, 'slot_map': {'str0': '[1, 2, 3, 4, 5, 6, 7, 8, 9]', 'str1': 'np.zeros((6, 9, 20))', '[ str0 ]': '[1, 2, 3, 4, 5, 6, 7, 8, 9]'}, 'snippet': 'np.zeros((6, 9, 20)) + np.array([ str0 ])[(none), :, (none)]'}
Generated  translation
numpy. dstack ( ( numpy. meshgrid ( str0, str1 ) ). reshape ( 1, 2 ) ) 
--------- B -----------
{'intent': {'gloss': ['add', 'array', 'of', 'shape', 'str0', 'to', 'array', 'str1'], 'words': ['add', 'array', 'of', 'shape', 'str0', 'to', 'array', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '(6, 9, 20)', 'str1': '[1, 2, 3, 4, 5, 6, 7, 8, 9]', '( str0 )': '(6, 9, 20)', '[ str1 ]': '[1, 2, 3, 4, 5, 6, 7, 8, 9]'}, 'snippet': 'np.zeros(( str0 )) + np.array([ str1 ]).reshape((1, 9, 1))'}
Generated  translation
np. einsum ('str1 ', str0 ', 1 ) 
--------- B -----------
{'intent': {'gloss': ['split', 'dictionary', 'of', 'lists', 'into', 'list', 'of', 'dictionaries'], 'words': ['split', 'dictionary', 'of', 'lists', 'into', 'list', 'of', 'dictionaries'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'map(dict, zip(*[[(k, v) for v in value] for k, value in list(d.items())]))'}
Generated  translation
[ dict ( ( k, v ) for k, v in d. items ( ) if k! ='mykey1') for d in mylist ] 
--------- B -----------
{'intent': {'gloss': ['pivot', 'dataframe', 'var0', 'so', 'that', 'values', 'for', 'var1', 'become', 'column', 'headings', 'and', 'values', 'for', 'var2', 'become', 'the', 'index'], 'words': ['pivot', 'dataframe', 'var0', 'so', 'that', 'values', 'for', 'var1', 'become', 'column', 'headings', 'and', 'values', 'for', 'var2', 'become', 'the', 'index'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'var1': 'upc', 'var2': 'saleid'}, 'snippet': "var0.pivot_table(index='var2', columns='var1', aggfunc='size', fill_value=0)"}
Generated  translation
var0. pivot ( var1, index ='var2') 
--------- B -----------
{'intent': {'gloss': ['select', 'records', 'of', 'dataframe', 'var0', 'where', 'the', 'sum', 'of', 'column', 'str0', 'for', 'each', 'value', 'in', 'column', 'str1', 'is', '0'], 'words': ['select', 'records', 'of', 'dataframe', 'var0', 'where', 'the', 'sum', 'of', 'column', 'str0', 'for', 'each', 'value', 'in', 'column', 'str1', 'is', '0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'x', 'str1': 'user'}, 'snippet': "var0.groupby('str1')['str0'].filter(lambda str0: str0.sum() == 0)"}
Generated  translation
print ( var0. loc [ var0 ['str0'] = ='str1'] ) 
--------- B -----------
{'intent': {'gloss': ['finding', 'the', 'index', 'of', 'an', 'item', 'str0', 'given', 'a', 'list', '`', '[', 'str0', ',', "'", 'bar', "'", ',', "'", 'baz', "'", ']', '`', 'containing', 'it'], 'words': ['finding', 'the', 'index', 'of', 'an', 'item', 'str0', 'given', 'a', 'list', '`', '[', 'str0', ',', "'", 'bar', "'", ',', "'", 'baz', "'", ']', '`', 'containing', 'it'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '', ' ', '', '', '', ' ', '', '', '', '', ' ', ' ', '']}, 'slot_map': {'str0': 'foo', 'str1': "['foo', 'bar', 'baz']", '[ str1 ]': "['foo', 'bar', 'baz']"}, 'snippet': "[i for i, j in enumerate(['str0', 'bar', 'baz']) if j == 'str0']"}
Generated  translation
sorted ( list ( str0. items ( ) ), key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'string', 'str0', 'to', 'an', 'integer', 'timestamp'], 'words': ['convert', 'string', 'str0', 'to', 'an', 'integer', 'timestamp'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '01/12/2011'}, 'snippet': "int(datetime.datetime.strptime('str0', '%d/%m/%y').strftime('%s'))"}
Generated  translation
int ('str0 ', 16 ) 
--------- B -----------
{'intent': {'gloss': ['calling', 'an', 'external', 'command', 'str0'], 'words': ['calling', 'an', 'external', 'command', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'echo hello world'}, 'snippet': "print(subprocess.popen('str0', shell=true, stdout=subprocess.pipe).stdout.\n    read())"}
Generated  translation
subprocess. call ('str0 ', shell = true ) 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'list', 'var0', 'containing', 'all', 'files', 'in', 'directory', 'str0', 'that', 'starts', 'with', 'numbers', 'between', '0', 'and', '9', 'and', 'ends', 'with', 'the', 'extension', 'str1'], 'words': ['create', 'a', 'list', 'var0', 'containing', 'all', 'files', 'in', 'directory', 'str0', 'that', 'starts', 'with', 'numbers', 'between', '0', 'and', '9', 'and', 'ends', 'with', 'the', 'extension', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'files', 'str0': '.', 'str1': '.jpg'}, 'snippet': "var0 = [f for f in os.listdir('str0') if re.match('[0-9]+.*\\\\.jpg', f)]"}
Generated  translation
var0 = [ x for x in os. listdir ('str0') if x! ='str1') ] 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'list', 'where', 'each', 'element', 'is', 'a', 'dictionary', 'with', 'keys', 'str0', 'and', 'str1', 'and', 'values', 'corresponding', 'to', 'each', 'value', 'in', 'the', 'lists', 'referenced', 'by', 'keys', 'str0', 'and', 'str1', 'in', 'dictionary', 'var0'], 'words': ['create', 'a', 'list', 'where', 'each', 'element', 'is', 'a', 'dictionary', 'with', 'keys', 'str0', 'and', 'str1', 'and', 'values', 'corresponding', 'to', 'each', 'value', 'in', 'the', 'lists', 'referenced', 'by', 'keys', 'str0', 'and', 'str1', 'in', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'key1', 'str1': 'key2', 'str2': 'key1', 'str3': 'key2', 'var0': 'd'}, 'snippet': "[{'str2': a, 'str3': b} for a, b in zip(var0['str2'], var0['str3'])]"}
Generated  translation
[ ( d ['str0'], d ['str1'] ) for d in var0 ] 
--------- B -----------
{'intent': {'gloss': ['calling', 'an', 'external', 'command', 'str0'], 'words': ['calling', 'an', 'external', 'command', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'ls'}, 'snippet': "p = subprocess.popen('str0', shell=true, stdout=subprocess.pipe, stderr=\n    subprocess.stdout)\nfor line in p.stdout.readlines():\n    print(line, end=' ')\nretval = p.wait()"}
Generated  translation
subprocess. call ('str0 ', shell = true ) 
dev beam accuracy 0.02
dev beam oracle accuracy 0.055
dev beam bleu score 0.3583188319943942
dev beam exececution accuracy 0.0
--------- B -----------
{'intent': {'gloss': ['function', 'to', 'convert', 'strings', 'into', 'integers'], 'words': ['function', 'to', 'convert', 'strings', 'into', 'integers'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'int()'}
Generated  translation
int ('23') 
--------- B -----------
{'intent': {'gloss': ['count', 'the', 'occurrences', 'of', 'items', 'in', 'list', 'var0'], 'words': ['count', 'the', 'occurrences', 'of', 'items', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': 'counter(var0)'}
Generated  translation
len ( set ( var0 ) ) = = len ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'tuple', 'var0', 'to', 'list'], 'words': ['convert', 'tuple', 'var0', 'to', 'list'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 't'}, 'snippet': 'list(var0)'}
Generated  translation
[ ( x, y ) for x, y in zip ( var0, var0 ) ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'list', 'var0', 'to', 'tuple'], 'words': ['convert', 'list', 'var0', 'to', 'tuple'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 't'}, 'snippet': 'tuple(l)'}
Generated  translation
zip ( * var0 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'sorted', 'list', 'of', 'keys', 'of', 'dict', 'var0'], 'words': ['get', 'sorted', 'list', 'of', 'keys', 'of', 'dict', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'd'}, 'snippet': 'sorted(var0)'}
Generated  translation
sorted ( var0, key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'length', 'of', 'list', 'var0'], 'words': ['get', 'the', 'length', 'of', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'my_list'}, 'snippet': 'len(var0)'}
Generated  translation
len ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['getting', 'the', 'length', 'of', 'array', 'var0'], 'words': ['getting', 'the', 'length', 'of', 'array', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': 'len(var0)'}
Generated  translation
var0. len ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['getting', 'the', 'length', 'of', 'array', 'var0'], 'words': ['getting', 'the', 'length', 'of', 'array', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': 'len(var0)'}
Generated  translation
var0. len ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['getting', 'the', 'length', 'of', 'var0'], 'words': ['getting', 'the', 'length', 'of', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'my_tuple'}, 'snippet': 'len(var0)'}
Generated  translation
var0. len ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['getting', 'the', 'length', 'of', 'var0'], 'words': ['getting', 'the', 'length', 'of', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'my_string'}, 'snippet': 'len(var0)'}
Generated  translation
var0. len ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'type', 'of', 'var0'], 'words': ['get', 'the', 'type', 'of', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'i'}, 'snippet': 'type(var0)'}
Generated  translation
var0. shape 
--------- B -----------
{'intent': {'gloss': ['determine', 'the', 'type', 'of', 'variable', 'var0'], 'words': ['determine', 'the', 'type', 'of', 'variable', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'v'}, 'snippet': 'type(var0)'}
Generated  translation
' var0'in locals ( ) 
--------- B -----------
{'intent': {'gloss': ['determine', 'the', 'type', 'of', 'variable', 'var0'], 'words': ['determine', 'the', 'type', 'of', 'variable', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'v'}, 'snippet': 'type(var0)'}
Generated  translation
' var0'in locals ( ) 
--------- B -----------
{'intent': {'gloss': ['determine', 'the', 'type', 'of', 'variable', 'var0'], 'words': ['determine', 'the', 'type', 'of', 'variable', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'v'}, 'snippet': 'type(var0)'}
Generated  translation
' var0'in locals ( ) 
--------- B -----------
{'intent': {'gloss': ['determine', 'the', 'type', 'of', 'variable', 'var0'], 'words': ['determine', 'the', 'type', 'of', 'variable', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'v'}, 'snippet': 'type(var0)'}
Generated  translation
' var0'in locals ( ) 
--------- B -----------
{'intent': {'gloss': ['put', 'the', 'curser', 'at', 'beginning', 'of', 'the', 'file'], 'words': ['put', 'the', 'curser', 'at', 'beginning', 'of', 'the', 'file'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'file.seek(0)'}
Generated  translation
os. system ('filename') 
--------- B -----------
{'intent': {'gloss': ['make', 'a', 'delay', 'of', '1', 'second'], 'words': ['make', 'a', 'delay', 'of', '1', 'second'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'time.sleep(1)'}
Generated  translation
sleep ( 1 ) 
--------- B -----------
{'intent': {'gloss': ['declare', 'an', 'array'], 'words': ['declare', 'an', 'array'], 'after': [' ', ' ', '']}, 'slot_map': {}, 'snippet': 'my_list = []'}
Generated  translation
intarray = array 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'by', 'space'], 'words': ['split', 'string', 'var0', 'by', 'space'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'text'}, 'snippet': 'var0.split()'}
Generated  translation
" " " hello " " ". split ( ) 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'into', 'a', 'list', 'by', 'whitespace'], 'words': ['split', 'string', 'var0', 'into', 'a', 'list', 'by', 'whitespace'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'line'}, 'snippet': 'var0.split()'}
Generated  translation
[ item. strip ( ) for item in var0. split ( ',') ] 
--------- B -----------
{'intent': {'gloss': ['add', 'a', 'header', 'to', 'a', 'csv', 'file'], 'words': ['add', 'a', 'header', 'to', 'a', 'csv', 'file'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'writer.writeheader()'}
Generated  translation
webbrowser. open ('file') 
--------- B -----------
{'intent': {'gloss': ['calculate', 'sum', 'over', 'all', 'rows', 'of', '2d', 'numpy', 'array'], 'words': ['calculate', 'sum', 'over', 'all', 'rows', 'of', '2d', 'numpy', 'array'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'a.sum(axis=1)'}
Generated  translation
np. sum ( np. arange ( len ( var0 ) ), axis = 0 ) 
--------- B -----------
{'intent': {'gloss': ['append', 'elements', 'of', 'a', 'set', 'var0', 'to', 'a', 'list', 'var1'], 'words': ['append', 'elements', 'of', 'a', 'set', 'var0', 'to', 'a', 'list', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'b', 'var1': 'a'}, 'snippet': 'var1.extend(var0)'}
Generated  translation
[ x for x in var1 if x not in var0 ] 
--------- B -----------
{'intent': {'gloss': ['removing', 'duplicates', 'in', 'list', 'var0'], 'words': ['removing', 'duplicates', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 't'}, 'snippet': 'list(set(var0))'}
Generated  translation
mynewlist = list ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['removing', 'duplicates', 'in', 'list', 'var0'], 'words': ['removing', 'duplicates', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'source_list'}, 'snippet': 'list(set(var0))'}
Generated  translation
mynewlist = list ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['how', 'to', 'sort', 'dictionaries', 'by', 'keys', 'in', 'python'], 'words': ['how', 'to', 'sort', 'dictionaries', 'by', 'keys', 'in', 'python'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'sorted(d.items())'}
Generated  translation
sorted ( list ( mydict. items ( ) ), key = lambda a : d [ 1 ] ['c'], reverse = true ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'string', 'str0', 'into', 'integer'], 'words': ['convert', 'string', 'str0', 'into', 'integer'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '1'}, 'snippet': "int('str0')"}
Generated  translation
int ('str0 ', 16 ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'object', 'var0', 'is', 'a', 'string'], 'words': ['check', 'if', 'object', 'var0', 'is', 'a', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'o'}, 'snippet': 'type(var0) is str'}
Generated  translation
isinstance ( var0, str ) 
--------- B -----------
{'intent': {'gloss': ['append', 'list', 'var0', 'to', 'var1'], 'words': ['append', 'list', 'var0', 'to', 'var1'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list1', 'var1': 'list2'}, 'snippet': 'var1.extend(var0)'}
Generated  translation
var1. append ('var0') 
--------- B -----------
{'intent': {'gloss': ['append', 'list', 'var0', 'to', 'var1'], 'words': ['append', 'list', 'var0', 'to', 'var1'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylog', 'var1': 'list1'}, 'snippet': 'var1.extend(var0)'}
Generated  translation
var1. append ('var0') 
--------- B -----------
{'intent': {'gloss': ['append', 'list', 'var0', 'to', 'var1'], 'words': ['append', 'list', 'var0', 'to', 'var1'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'c'}, 'snippet': 'var1.extend(var0)'}
Generated  translation
var1. append ('var0') 
--------- B -----------
{'intent': {'gloss': ['insert', 'item', 'str0', 'to', 'a', 'list', 'var0'], 'words': ['insert', 'item', 'str0', 'to', 'a', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '12', 'var0': 'my_list'}, 'snippet': 'var0.append(12)'}
Generated  translation
var0. insert ( 0,'str0') 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'type', 'of', 'variable', 'var0'], 'words': ['get', 'the', 'type', 'of', 'variable', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'variable_name'}, 'snippet': 'print(type(var0))'}
Generated  translation
' var0'in locals ( ) 
--------- B -----------
{'intent': {'gloss': ['download', 'a', 'file', 'var0', 'over', 'http'], 'words': ['download', 'a', 'file', 'var0', 'over', 'http'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'url'}, 'snippet': 'r = requests.get(var0)'}
Generated  translation
webbrowser. open ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['read', 'keyboard', '-', 'input'], 'words': ['read', 'keyboard', '-', 'input'], 'after': [' ', '', '', '']}, 'slot_map': {}, 'snippet': "input('enter your input:')"}
Generated  translation
read ( input - i '. read ( ) ) 
--------- B -----------
{'intent': {'gloss': ['append', 'elements', 'of', 'a', 'set', 'to', 'a', 'list', 'in', 'python'], 'words': ['append', 'elements', 'of', 'a', 'set', 'to', 'a', 'list', 'in', 'python'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'a.extend(list(b))'}
Generated  translation
[ x [ 0 ] for x in s. append ( [ 1, 2 ] ) ] 
--------- B -----------
{'intent': {'gloss': ['change', 'working', 'directory', 'to', 'the', 'directory', 'var0'], 'words': ['change', 'working', 'directory', 'to', 'the', 'directory', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'owd'}, 'snippet': 'os.chdir(var0)'}
Generated  translation
os. chdir ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'dictionary', 'var0', 'in', 'ascending', 'order', 'based', 'on', 'its', 'keys', 'and', 'items'], 'words': ['sort', 'dictionary', 'var0', 'in', 'ascending', 'order', 'based', 'on', 'its', 'keys', 'and', 'items'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'o'}, 'snippet': 'sorted(var0.items())'}
Generated  translation
sorted ( list ( var0. items ( ) ), key = lambda v : v [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['unzip', 'the', 'list', 'str0'], 'words': ['unzip', 'the', 'list', 'str0'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {'str0': "[('a', 1), ('b', 2), ('c', 3), ('d', 4)]", '[ str0 ]': "[('a', 1), ('b', 2), ('c', 3), ('d', 4)]"}, 'snippet': 'zip(*[ str0 ])'}
Generated  translation
str0. split ('str0') 
--------- B -----------
{'intent': {'gloss': ['unzip', 'the', 'list', 'str0'], 'words': ['unzip', 'the', 'list', 'str0'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {'str0': "[('a', 1), ('b', 2), ('c', 3), ('d', 4)]", '[ str0 ]': "[('a', 1), ('b', 2), ('c', 3), ('d', 4)]"}, 'snippet': 'zip(*[ str0 ])'}
Generated  translation
str0. split ('str0') 
--------- B -----------
{'intent': {'gloss': ['convert', 'list', 'str0', 'into', 'a', 'dictionary'], 'words': ['convert', 'list', 'str0', 'into', 'a', 'dictionary'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "[('name', 'joe'), ('age', 22)]", '[ str0 ]': "[('name', 'joe'), ('age', 22)]"}, 'snippet': 'dict([ str0 ])'}
Generated  translation
dict ( map ( lambda s : s. split (':'), [ str0 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['plot', 'dataframe', 'var0', 'without', 'a', 'legend'], 'words': ['plot', 'dataframe', 'var0', 'without', 'a', 'legend'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': 'var0.plot(legend=false)'}
Generated  translation
var0. plot ( legend ='col _ name _ _') 
--------- B -----------
{'intent': {'gloss': ['decode', 'json', 'string', 'str0', 'to', 'python', 'dict'], 'words': ['decode', 'json', 'string', 'str0', 'to', 'python', 'dict'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'request.body'}, 'snippet': 'json.loads(request.body)'}
Generated  translation
json. load ('str0') 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'datetime', 'with', 'the', 'current', 'date', '&', 'time'], 'words': ['create', 'a', 'datetime', 'with', 'the', 'current', 'date', '&', 'time'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'datetime.datetime.now()'}
Generated  translation
datetime. datetime. now ( ). date ( ) 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'multi', '-', 'line', 'string', 'var0', 'into', 'separate', 'strings'], 'words': ['split', 'a', 'multi', '-', 'line', 'string', 'var0', 'into', 'separate', 'strings'], 'after': [' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'inputstring'}, 'snippet': "var0.split('\\n')"}
Generated  translation
" " " " " ". join ( var0. split ( ) ) 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'string', 'var0', 'by', 'space', 'with', 'str0', 'splits'], 'words': ['split', 'a', 'string', 'var0', 'by', 'space', 'with', 'str0', 'splits'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's', 'str0': '4'}, 'snippet': "var0.split(' ', 4)"}
Generated  translation
[ i. strip ( ) for i in var0. split ('str0') ] 
--------- B -----------
{'intent': {'gloss': ['remove', 'key', 'str0', 'from', 'dictionary', 'var0'], 'words': ['remove', 'key', 'str0', 'from', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'ele', 'var0': 'd'}, 'snippet': "del var0['str0']"}
Generated  translation
var0. pop ('str0 ', none ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'tuple', 'var0', 'to', 'list'], 'words': ['convert', 'tuple', 'var0', 'to', 'list'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'level1'}, 'snippet': 'var0 = map(list, var0)'}
Generated  translation
[ ( x, y ) for x, y in zip ( var0, var0 ) ] 
--------- B -----------
{'intent': {'gloss': ['get', 'attribute', 'var0', 'of', 'object', 'var1'], 'words': ['get', 'attribute', 'var0', 'of', 'object', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'my_str', 'var1': 'my_object'}, 'snippet': 'getattr(var1, var0)'}
Generated  translation
print ( var1. var0 ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'object', 'var0', 'is', 'a', 'string'], 'words': ['check', 'if', 'object', 'var0', 'is', 'a', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'obj'}, 'snippet': 'isinstance(var0, str)'}
Generated  translation
isinstance ( var0, str ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'object', 'var0', 'is', 'a', 'string'], 'words': ['check', 'if', 'object', 'var0', 'is', 'a', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'o'}, 'snippet': 'isinstance(var0, str)'}
Generated  translation
isinstance ( var0, str ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'object', 'var0', 'is', 'a', 'string'], 'words': ['check', 'if', 'object', 'var0', 'is', 'a', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'o'}, 'snippet': 'isinstance(var0, str)'}
Generated  translation
isinstance ( var0, str ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'var0', 'is', 'a', 'string'], 'words': ['check', 'if', 'var0', 'is', 'a', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'obj_to_test'}, 'snippet': 'isinstance(var0, str)'}
Generated  translation
isinstance ( var0, str ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'path', 'var0', 'is', 'an', 'absolute', 'path'], 'words': ['check', 'if', 'path', 'var0', 'is', 'an', 'absolute', 'path'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'my_path'}, 'snippet': 'os.path.isabs(var0)'}
Generated  translation
os. path. isfile ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['reload', 'a', 'module', 'var0'], 'words': ['reload', 'a', 'module', 'var0'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {'var0': 'module'}, 'snippet': 'import imp\nimp.reload(var0)'}
Generated  translation
var0. update ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['enable', 'debug', 'mode', 'on', 'flask', 'application', 'var0'], 'words': ['enable', 'debug', 'mode', 'on', 'flask', 'application', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'app'}, 'snippet': 'var0.run(debug=true)'}
Generated  translation
var0. setsockopt ( sol _ mode = true ) 
--------- B -----------
{'intent': {'gloss': ['how', 'do', 'i', 'get', 'the', 'url', 'parameter', 'in', 'a', 'flask', 'view'], 'words': ['how', 'do', 'i', 'get', 'the', 'url', 'parameter', 'in', 'a', 'flask', 'view'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "request.args['myparam']"}
Generated  translation
self. root. destroy ( ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'characters', 'count', 'in', 'a', 'file', 'var0'], 'words': ['get', 'the', 'characters', 'count', 'in', 'a', 'file', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'filepath'}, 'snippet': 'os.stat(var0).st_size'}
Generated  translation
len ( set ( var0 ). intersection ( var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['count', 'the', 'occurrences', 'of', 'item', 'str0', 'in', 'list', 'var0'], 'words': ['count', 'the', 'occurrences', 'of', 'item', 'str0', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'a', 'var0': 'l'}, 'snippet': "var0.count('str0')"}
Generated  translation
len ( var0 ) - len ( var0. rstrip ('str0') ) 
--------- B -----------
{'intent': {'gloss': ['count', 'the', 'occurrences', 'of', 'item', 'str0', 'in', 'list', 'var0'], 'words': ['count', 'the', 'occurrences', 'of', 'item', 'str0', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'b', 'var0': 'l'}, 'snippet': "var0.count('str0')"}
Generated  translation
len ( var0 ) - len ( var0. rstrip ('str0') ) 
--------- B -----------
{'intent': {'gloss': ['copy', 'file', 'var0', 'to', 'directory', 'var1'], 'words': ['copy', 'file', 'var0', 'to', 'directory', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'srcfile', 'var1': 'dstdir'}, 'snippet': 'shutil.copy(var0, var1)'}
Generated  translation
os. var0. copy ( var1 ) 
--------- B -----------
{'intent': {'gloss': ['how', 'to', 'get', 'a', 'single', 'result', 'from', 'a', 'sqlite', 'query', 'in', 'python', '?'], 'words': ['how', 'to', 'get', 'a', 'single', 'result', 'from', 'a', 'sqlite', 'query', 'in', 'python', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'cursor.fetchone()[0]'}
Generated  translation
data = genfromtxt ('a ', delimiter = ',') 
--------- B -----------
{'intent': {'gloss': ['calculate', 'mean', 'across', 'dimension', 'in', 'a', '2d', 'array', 'var0'], 'words': ['calculate', 'mean', 'across', 'dimension', 'in', 'a', '2d', 'array', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'np.mean(var0, axis=1)'}
Generated  translation
np. where ( var0 = = var0 [ :, ( 1 ) ], var0. mean ( axis = 1 ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'position', 'of', 'item', 'var0', 'in', 'list', 'var1'], 'words': ['get', 'the', 'position', 'of', 'item', 'var0', 'in', 'list', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'element', 'var1': 'testlist'}, 'snippet': 'print(var1.index(var0))'}
Generated  translation
print ( var1 [ len ( var0 ) ] ) 
--------- B -----------
{'intent': {'gloss': ['add', 'key', 'str0', 'to', 'dictionary', 'var0', 'with', 'value', '1'], 'words': ['add', 'key', 'str0', 'to', 'dictionary', 'var0', 'with', 'value', '1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'a', 'var0': 'data'}, 'snippet': 'var0.update(str0=1)'}
Generated  translation
var0. update ( {'str0': 3 } ) 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'value', 'of', 'datetime', '.', 'today', '(', ')', 'in', 'the', 'utc', 'time', 'zone'], 'words': ['get', 'a', 'value', 'of', 'datetime', '.', 'today', '(', ')', 'in', 'the', 'utc', 'time', 'zone'], 'after': [' ', ' ', ' ', ' ', '', '', '', '', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'datetime.now(pytz.utc)'}
Generated  translation
datetime. datetime. utcnow ( ). utcnow ( ) 
--------- B -----------
{'intent': {'gloss': ['round', 'off', 'the', 'float', 'that', 'is', 'the', 'product', 'of', 'str0', 'and', 'convert', 'it', 'to', 'an', 'int'], 'words': ['round', 'off', 'the', 'float', 'that', 'is', 'the', 'product', 'of', 'str0', 'and', 'convert', 'it', 'to', 'an', 'int'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '2.52 * 100'}, 'snippet': 'int(round(2.51 * 100))'}
Generated  translation
struct. unpack ('d ', dtype = none ) [ 0 ] 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'by', 'str0'], 'words': ['split', 'string', 'var0', 'by', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'text', 'str0': ','}, 'snippet': "var0.split('str0')"}
Generated  translation
var0. split ('str0') 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'urllib', 'unquoted', 'string', 'var0', 'to', 'a', 'json', 'data', 'var1'], 'words': ['convert', 'a', 'urllib', 'unquoted', 'string', 'var0', 'to', 'a', 'json', 'data', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'unescaped', 'var1': 'json_data'}, 'snippet': 'var1 = json.loads(var0)'}
Generated  translation
var1 = json. dumps ( [ dict ( list ( var0. items ( ) ) ] ), reverse = true ) 
--------- B -----------
{'intent': {'gloss': ['open', 'file', 'var0', 'with', 'mode', 'str0'], 'words': ['open', 'file', 'var0', 'with', 'mode', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'path', 'str0': 'r'}, 'snippet': "open(var0, 'str0')"}
Generated  translation
x _ file = open ( os. path. join ( var0,'str0'),'r') 
--------- B -----------
{'intent': {'gloss': ['enable', 'warnings', 'using', 'action', 'str0'], 'words': ['enable', 'warnings', 'using', 'action', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'always'}, 'snippet': "warnings.simplefilter('str0')"}
Generated  translation
warnings. findall ('str0') 
--------- B -----------
{'intent': {'gloss': ['create', 'new', 'matrix', 'object', 'by', 'concatenating', 'data', 'from', 'matrix', 'a', 'and', 'matrix', 'b'], 'words': ['create', 'new', 'matrix', 'object', 'by', 'concatenating', 'data', 'from', 'matrix', 'a', 'and', 'matrix', 'b'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'np.concatenate((a, b))'}
Generated  translation
numpy. concatenate ( [ a, b ], b [ 1, 2 ] ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'raw', 'string', 'var0', 'into', 'a', 'normal', 'string'], 'words': ['convert', 'a', 'raw', 'string', 'var0', 'into', 'a', 'normal', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'raw_string'}, 'snippet': "var0.decode('string_escape')"}
Generated  translation
var0. replace ('\ \ ','' ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'raw', 'string', 'var0', 'into', 'a', 'normal', 'string'], 'words': ['convert', 'a', 'raw', 'string', 'var0', 'into', 'a', 'normal', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'raw_byte_string'}, 'snippet': "var0.decode('unicode_escape')"}
Generated  translation
var0. replace ('\ \ ','' ) 
--------- B -----------
{'intent': {'gloss': ['cast', 'an', 'int', 'var0', 'to', 'a', 'string', 'and', 'concat', 'to', 'string', 'str0'], 'words': ['cast', 'an', 'int', 'var0', 'to', 'a', 'string', 'and', 'concat', 'to', 'string', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'i', 'str0': 'me'}, 'snippet': "'str0' + str(var0)"}
Generated  translation
str0. replace ('\ \ r ','str0') 
--------- B -----------
{'intent': {'gloss': ['length', 'of', 'longest', 'element', 'in', 'list', 'var0'], 'words': ['length', 'of', 'longest', 'element', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'words'}, 'snippet': 'len(max(var0, key=len))'}
Generated  translation
print ( len ( [ x for x in var0 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'value', 'associated', 'with', 'unicode', 'key', 'str0', 'of', 'first', 'dictionary', 'in', 'list', 'var0'], 'words': ['get', 'the', 'value', 'associated', 'with', 'unicode', 'key', 'str0', 'of', 'first', 'dictionary', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'from_user', 'var0': 'result'}, 'snippet': "var0[0]['str0']"}
Generated  translation
print ( [ x ['str0'] ['str0'] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'list', 'from', 'a', 'list', 'var0', 'with', 'values', 'mapped', 'into', 'a', 'dictionary', 'var1'], 'words': ['get', 'a', 'list', 'from', 'a', 'list', 'var0', 'with', 'values', 'mapped', 'into', 'a', 'dictionary', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'lst', 'var1': 'dct'}, 'snippet': '[var1[k] for k in var0]'}
Generated  translation
[ key for item in var0 if item [ 0 ] = = 1 ] 
--------- B -----------
{'intent': {'gloss': ['get', 'number', 'of', 'keys', 'in', 'dictionary', 'var0'], 'words': ['get', 'number', 'of', 'keys', 'in', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'yourdict'}, 'snippet': 'len(list(var0.keys()))'}
Generated  translation
len ( [ ( 1 ) for k in var0. items ( ) ] ) 
--------- B -----------
{'intent': {'gloss': ['reverse', 'a', 'priority', 'queue', 'var0', 'in', 'python', 'without', 'using', 'classes'], 'words': ['reverse', 'a', 'priority', 'queue', 'var0', 'in', 'python', 'without', 'using', 'classes'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'q'}, 'snippet': 'var0.put((-n, n))'}
Generated  translation
var0. sort ( key = lambda x : x. replace ('0 ','z') ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'directory', 'tree', 'str0'], 'words': ['remove', 'directory', 'tree', 'str0'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {'str0': '/folder_name'}, 'snippet': "shutil.rmtree('str0')"}
Generated  translation
os. path. dirname ( os. path. abspath ('str0') ) 
--------- B -----------
{'intent': {'gloss': ['numpy', 'concatenate', 'two', 'arrays', 'var0', 'and', 'var1', 'along', 'the', 'first', 'axis'], 'words': ['numpy', 'concatenate', 'two', 'arrays', 'var0', 'and', 'var1', 'along', 'the', 'first', 'axis'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'b'}, 'snippet': 'np.array((var0, var1))'}
Generated  translation
numpy. concatenate ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['select', 'the', 'last', 'column', 'of', 'dataframe', 'var0'], 'words': ['select', 'the', 'last', 'column', 'of', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': 'var0[var0.columns[-1]]'}
Generated  translation
var0. ix [ : - 1 ] 
--------- B -----------
{'intent': {'gloss': ['join', 'a', 'list', 'of', 'strings', 'var0', 'using', 'a', 'space', 'str0'], 'words': ['join', 'a', 'list', 'of', 'strings', 'var0', 'using', 'a', 'space', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list', 'str0': ''}, 'snippet': '""" """.join(var0)'}
Generated  translation
var0 = [ str0 ] 
--------- B -----------
{'intent': {'gloss': ['drop', 'rows', 'of', 'pandas', 'dataframe', 'var0', 'having', 'nan', 'in', 'column', 'at', 'index', 'str0'], 'words': ['drop', 'rows', 'of', 'pandas', 'dataframe', 'var0', 'having', 'nan', 'in', 'column', 'at', 'index', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': '1'}, 'snippet': 'var0.dropna(subset=[1])'}
Generated  translation
var0. drop ( var0. index [ ['str0'], axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['reverse', 'the', 'list', 'that', 'contains', '1', 'to', '10'], 'words': ['reverse', 'the', 'list', 'that', 'contains', '1', 'to', '10'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'list(reversed(list(range(10))))'}
Generated  translation
[ i for i in range ( 10 ) ] 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'str0', 'into', 'a', 'list', 'on', 'white', 'spaces'], 'words': ['split', 'string', 'str0', 'into', 'a', 'list', 'on', 'white', 'spaces'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'qh qd jc kd js'}, 'snippet': '"""str0""".split()'}
Generated  translation
" " " str0 " " ". split ( ) 
--------- B -----------
{'intent': {'gloss': ['erase', 'all', 'the', 'contents', 'of', 'a', 'file', 'var0'], 'words': ['erase', 'all', 'the', 'contents', 'of', 'a', 'file', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'filename'}, 'snippet': "open(var0, 'w').close()"}
Generated  translation
shutil. rmtree ( var0, ignore _ errors = false, onerror = none ) 
--------- B -----------
{'intent': {'gloss': ['add', 'indexes', 'in', 'a', 'data', 'frame', 'var0', 'to', 'a', 'column', 'var1'], 'words': ['add', 'indexes', 'in', 'a', 'data', 'frame', 'var0', 'to', 'a', 'column', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'var1': 'index1'}, 'snippet': "var0['var1'] = var0.index"}
Generated  translation
var1. reset _ index ( ). to _ index ( ] 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'list', 'containing', 'flattened', 'list', 'str0'], 'words': ['create', 'a', 'list', 'containing', 'flattened', 'list', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "[['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]", '[ str0 ]': "[['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]"}, 'snippet': 'values = sum([ str0 ], [])'}
Generated  translation
[ str0 ] 
--------- B -----------
{'intent': {'gloss': ['replace', 'spaces', 'with', 'underscore'], 'words': ['replace', 'spaces', 'with', 'underscore'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "mystring.replace(' ', '_')"}
Generated  translation
re. sub ('(? < = [ a - z ] ) ','\ \ 1 ','', text ) 
--------- B -----------
{'intent': {'gloss': ['get', 'an', 'absolute', 'file', 'path', 'of', 'file', 'str0'], 'words': ['get', 'an', 'absolute', 'file', 'path', 'of', 'file', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'mydir/myfile.txt'}, 'snippet': "os.path.abspath('str0')"}
Generated  translation
os. path. split ( os. path. abspath ( str0 ) ) 
--------- B -----------
{'intent': {'gloss': ['check', 'characters', 'of', 'string', 'var0', 'are', 'true', 'predication', 'of', 'function', 'var1'], 'words': ['check', 'characters', 'of', 'string', 'var0', 'are', 'true', 'predication', 'of', 'function', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'string', 'var1': 'predicate'}, 'snippet': 'all(var1(x) for x in var0)'}
Generated  translation
var0 [ : - 1 ] = var1. isin ( [ - 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'attribute', 'str0', 'from', 'object', 'var0'], 'words': ['get', 'attribute', 'str0', 'from', 'object', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'attr', 'var0': 'obj'}, 'snippet': "getattr(var0, 'str0')"}
Generated  translation
getattr ( var0,'str0') 
--------- B -----------
{'intent': {'gloss': ['create', 'var0', 'to', 'contain', 'the', 'lists', 'from', 'list', 'var1', 'excluding', 'the', 'empty', 'lists', 'from', 'var1'], 'words': ['create', 'var0', 'to', 'contain', 'the', 'lists', 'from', 'list', 'var1', 'excluding', 'the', 'empty', 'lists', 'from', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list2', 'var1': 'list1', 'var2': 'list1'}, 'snippet': 'var0 = [x for x in var2 if x]'}
Generated  translation
var0 = [ [ x for x in var1 if x ] for y in var0 ] 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'based', 'on', 'occurrences', 'of', 'regex', 'pattern', 'str0'], 'words': ['split', 'string', 'var0', 'based', 'on', 'occurrences', 'of', 'regex', 'pattern', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'input', 'str0': '[ ](?=[a-z]+\\b)', '[ str0 )': '[ ](?=[a-z]+\\b)'}, 'snippet': "re.split('str0', var0)"}
Generated  translation
re. split ('str0 ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['place', 'the', 'radial', 'ticks', 'in', 'plot', 'var0', 'at', '135', 'degrees'], 'words': ['place', 'the', 'radial', 'ticks', 'in', 'plot', 'var0', 'at', '135', 'degrees'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'ax'}, 'snippet': 'var0.set_rlabel_position(135)'}
Generated  translation
var0. ticks. get _ ticks ( ) 
--------- B -----------
{'intent': {'gloss': ['get', 'html', 'source', 'of', 'selenium', 'webelement', 'var0'], 'words': ['get', 'html', 'source', 'of', 'selenium', 'webelement', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'element'}, 'snippet': "var0.get_attribute('innerhtml')"}
Generated  translation
var0. get ('http : / / www. w3. html _ text ( ) ) 
--------- B -----------
{'intent': {'gloss': ['add', 'an', 'entry', 'str0', 'at', 'the', 'beginning', 'of', 'list', 'var0'], 'words': ['add', 'an', 'entry', 'str0', 'at', 'the', 'beginning', 'of', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'wuggah', 'var0': 'mylist'}, 'snippet': "var0.insert(0, 'str0')"}
Generated  translation
var0 [ : 4 ] ='str0'
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'last', 'key', 'of', 'dictionary', 'var0'], 'words': ['get', 'the', 'last', 'key', 'of', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'dict'}, 'snippet': 'list(var0.keys())[-1]'}
Generated  translation
var0 [ - 1 ] [ - 1 ] 
--------- B -----------
{'intent': {'gloss': ['write', 'line', 'str0', 'to', 'file', 'var0'], 'words': ['write', 'line', 'str0', 'to', 'file', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'hi there', 'var0': 'f'}, 'snippet': "print('str0', file=var0)"}
Generated  translation
var0. write ('str0') 
--------- B -----------
{'intent': {'gloss': ['add', 'a', 'new', 'axis', 'to', 'array', 'var0'], 'words': ['add', 'a', 'new', 'axis', 'to', 'array', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'var0[:, (np.newaxis)]'}
Generated  translation
var0 [ : 2 ] = var0 
--------- B -----------
{'intent': {'gloss': ['open', 'a', 'file', 'str0', 'in', 'append', 'mode'], 'words': ['open', 'a', 'file', 'str0', 'in', 'append', 'mode'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'output.txt'}, 'snippet': "file = open('str0', 'a')"}
Generated  translation
f = open ('str0 ','rb') 
--------- B -----------
{'intent': {'gloss': ['format', 'string', 'str0'], 'words': ['format', 'string', 'str0'], 'after': [' ', ' ', '']}, 'slot_map': {'str0': '({0.goals} goals, ${0.penalties})', '( str0 )': '({0.goals} goals, ${0.penalties})'}, 'snippet': '"""str0""".format(self)'}
Generated  translation
" " " str0 " " ". format ('str0') 
--------- B -----------
{'intent': {'gloss': ['concat', 'two', 'matrices', 'var0', 'and', 'var1', 'in', 'numpy'], 'words': ['concat', 'two', 'matrices', 'var0', 'and', 'var1', 'in', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'b'}, 'snippet': 'np.vstack((var0, var1))'}
Generated  translation
np. einsum ('ijk, ikl - > ijl ', var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['send', 'the', 'output', 'of', 'pprint', 'object', 'var0', 'to', 'file', 'var1'], 'words': ['send', 'the', 'output', 'of', 'pprint', 'object', 'var0', 'to', 'file', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'dataobject', 'var1': 'logfile'}, 'snippet': 'pprint.pprint(var0, var1)'}
Generated  translation
var1 = open ('var0'). read ( ). decode ('var1') 
--------- B -----------
{'intent': {'gloss': ['iterate', 'ove', 'list', 'str0', 'using', 'list', 'comprehension'], 'words': ['iterate', 'ove', 'list', 'str0', 'using', 'list', 'comprehension'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '[1, 2, 3]', '[ str0 ]': '[1, 2, 3]'}, 'snippet': 'print([item for item in [ str0 ]])'}
Generated  translation
[ dict ( t ) for t in set ( [ str0 ] ) for t in range ( 1 ) ] 
--------- B -----------
{'intent': {'gloss': ['get', 'filename', 'without', 'extension', 'from', 'file', 'var0'], 'words': ['get', 'filename', 'without', 'extension', 'from', 'file', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'filename'}, 'snippet': 'os.path.splitext(var0)[0]'}
Generated  translation
os. path. dirname ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'objects', 'var0', ',', 'based', 'on', 'a', 'function', 'var1', 'in', 'descending', 'order'], 'words': ['sort', 'a', 'list', 'of', 'objects', 'var0', ',', 'based', 'on', 'a', 'function', 'var1', 'in', 'descending', 'order'], 'after': [' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'ut', 'var1': 'cmpfun'}, 'snippet': 'var0.sort(key=var1, reverse=true)'}
Generated  translation
var0. sort ( key = lambda x : x [ 2 ], reverse = true ) 
--------- B -----------
{'intent': {'gloss': ['call', 'a', 'shell', 'script', 'var0', 'using', 'subprocess'], 'words': ['call', 'a', 'shell', 'script', 'var0', 'using', 'subprocess'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'notepad'}, 'snippet': "subprocess.call(['var0'])"}
Generated  translation
subprocess. call ('test. sh otherfunc') 
--------- B -----------
{'intent': {'gloss': ['call', 'a', 'base', 'class', "'", 's', 'class', 'method', 'var0', 'from', 'derived', 'class', 'var1'], 'words': ['call', 'a', 'base', 'class', "'", 's', 'class', 'method', 'var0', 'from', 'derived', 'class', 'var1'], 'after': [' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'do', 'var1': 'derived'}, 'snippet': 'super(var1, cls).var0(a)'}
Generated  translation
var1. writerow ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['open', 'a', 'file', 'str0', 'in', 'write', 'mode'], 'words': ['open', 'a', 'file', 'str0', 'in', 'write', 'mode'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'yourfile.txt'}, 'snippet': "f = open('str0', 'w')"}
Generated  translation
f = open ('str0 ','rb') 
--------- B -----------
{'intent': {'gloss': ['find', 'maximal', 'value', 'in', 'matrix', 'var0'], 'words': ['find', 'maximal', 'value', 'in', 'matrix', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'matrix'}, 'snippet': 'max([max(i) for i in var0])'}
Generated  translation
numpy. where ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['round', 'number', 'var0', 'to', '2', 'precision', 'after', 'the', 'decimal', 'point'], 'words': ['round', 'number', 'var0', 'to', '2', 'precision', 'after', 'the', 'decimal', 'point'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'answer'}, 'snippet': 'var0 = str(round(var0, 2))'}
Generated  translation
round ( var0, 2 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'list', 'of', 'values', 'from', 'dictionary', 'str0', 'w', '.', 'r', '.', 't', '.', 'list', 'of', 'keys', 'str1'], 'words': ['get', 'list', 'of', 'values', 'from', 'dictionary', 'str0', 'w', '.', 'r', '.', 't', '.', 'list', 'of', 'keys', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'mydict', 'str1': 'mykeys'}, 'snippet': '[str0[x] for x in str1]'}
Generated  translation
[ key for item in str0. items ( ) if item. count ('str1') ] 
--------- B -----------
{'intent': {'gloss': ['append', 'items', 'in', 'list', 'var0', 'to', 'var1'], 'words': ['append', 'items', 'in', 'list', 'var0', 'to', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylog', 'var1': 'list1'}, 'snippet': 'for line in var0:\n    var1.append(line)'}
Generated  translation
var1. append ( [ var0 ] ) 
--------- B -----------
{'intent': {'gloss': ['truncate', 'float', '1', '.', '923328437452', 'to', '3', 'decimal', 'places'], 'words': ['truncate', 'float', '1', '.', '923328437452', 'to', '3', 'decimal', 'places'], 'after': [' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'round(1.923328437452, 3)'}
Generated  translation
float ( 1. 923328437457452 ) 
--------- B -----------
{'intent': {'gloss': ['extract', 'attributes', 'str0', 'from', 'string', 'var0'], 'words': ['extract', 'attributes', 'str0', 'from', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'src="js/([^"]*\\bjquery\\b[^"]*)"', 'var0': 'data'}, 'snippet': "re.findall('str0', var0)"}
Generated  translation
[ var0. find ('str0') for var0 in s ] 
--------- B -----------
{'intent': {'gloss': ['find', 'all', 'matches', 'of', 'regex', 'pattern', 'str0', 'in', 'string', 'var0'], 'words': ['find', 'all', 'matches', 'of', 'regex', 'pattern', 'str0', 'in', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '([a-fa-f\\d]{32})', 'var0': 'data', '( str0 )': '([a-fa-f\\d]{32})'}, 'snippet': "re.findall('str0', var0)"}
Generated  translation
re. findall ('str0 ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', '401', 'unauthorized', 'in', 'django'], 'words': ['return', 'a', '401', 'unauthorized', 'in', 'django'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "return httpresponse('unauthorized', status=401)"}
Generated  translation
return 401 401 
--------- B -----------
{'intent': {'gloss': ['create', 'list', 'var0', 'containing', 'two', 'empty', 'lists'], 'words': ['create', 'list', 'var0', 'containing', 'two', 'empty', 'lists'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'y'}, 'snippet': 'var0 = [[] for n in range(2)]'}
Generated  translation
var0 = [ [ ] for i in range ( 3 ) ] 
--------- B -----------
{'intent': {'gloss': ['converting', 'list', 'of', 'strings', 'var0', 'to', 'list', 'of', 'integer', 'var1'], 'words': ['converting', 'list', 'of', 'strings', 'var0', 'to', 'list', 'of', 'integer', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'intstringlist', 'var1': 'nums'}, 'snippet': 'var1 = [int(x) for x in var0]'}
Generated  translation
[ int ( x ) for x in str ( var0 ) ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'int', 'values', 'in', 'list', 'var0', 'to', 'float'], 'words': ['convert', 'int', 'values', 'in', 'list', 'var0', 'to', 'float'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'numlist'}, 'snippet': 'var0 = [float(x) for x in var0]'}
Generated  translation
[ float ( i ) for i in var0 ] 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'list', 'containing', 'all', 'ascii', 'characters', 'as', 'its', 'elements'], 'words': ['create', 'a', 'list', 'containing', 'all', 'ascii', 'characters', 'as', 'its', 'elements'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': '[chr(i) for i in range(127)]'}
Generated  translation
list ( itertools. chain ( ) ) 
--------- B -----------
{'intent': {'gloss': ['concatenate', 'a', 'list', 'of', 'strings', 'str0'], 'words': ['concatenate', 'a', 'list', 'of', 'strings', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "['a', 'b', 'c']", '[ str0 ]': "['a', 'b', 'c']"}, 'snippet': '"""""".join([ str0 ])'}
Generated  translation
" " " " " ". join ( str0 ) 
--------- B -----------
{'intent': {'gloss': ['create', '3d', 'array', 'of', 'zeroes', 'of', 'size', 'str0'], 'words': ['create', '3d', 'array', 'of', 'zeroes', 'of', 'size', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '(3,3,3)', '( str0 )': '(3,3,3)'}, 'snippet': 'numpy.zeros((3, 3, 3))'}
Generated  translation
np. sqrt ( ( ( 1, 2 ) ). sum ( axis = 0 ) ) 
--------- B -----------
{'intent': {'gloss': ['join', 'elements', 'of', 'list', 'var0', 'with', 'a', 'comma', 'str0'], 'words': ['join', 'elements', 'of', 'list', 'var0', 'with', 'a', 'comma', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l', 'str0': ','}, 'snippet': '"""str0""".join(var0)'}
Generated  translation
[ ( x + y ) for x in var0. split ('str0') ] 
--------- B -----------
{'intent': {'gloss': ['filter', 'rows', 'in', 'pandas', 'starting', 'with', 'alphabet', 'str0', 'using', 'regular', 'expression', '.'], 'words': ['filter', 'rows', 'in', 'pandas', 'starting', 'with', 'alphabet', 'str0', 'using', 'regular', 'expression', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'f'}, 'snippet': "df.b.str.contains('^f')"}
Generated  translation
df. groupby ('str0') ['str0']. agg ( lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['initialize', 'a', 'list', 'var0', 'of', '100', 'objects', 'object', '(', ')'], 'words': ['initialize', 'a', 'list', 'var0', 'of', '100', 'objects', 'object', '(', ')'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '']}, 'slot_map': {'var0': 'lst'}, 'snippet': 'var0 = [object() for _ in range(100)]'}
Generated  translation
var0 = [ [ 0 ] for i in range ( 100 ) ] 
--------- B -----------
{'intent': {'gloss': ['get', 'reverse', 'of', 'list', 'items', 'from', 'list', 'str0', 'using', 'extended', 'slicing'], 'words': ['get', 'reverse', 'of', 'list', 'items', 'from', 'list', 'str0', 'using', 'extended', 'slicing'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'b'}, 'snippet': '[x[::-1] for x in str0]'}
Generated  translation
[ k for k, v in iter ( [ str0 ] ) if v. split ('_') ] 
--------- B -----------
{'intent': {'gloss': ['removing', 'duplicates', 'in', 'list', 'var0'], 'words': ['removing', 'duplicates', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'abracadabra'}, 'snippet': "list(ordereddict.fromkeys('var0'))"}
Generated  translation
mynewlist = list ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['call', 'a', 'shell', 'script', 'str0', 'using', 'subprocess'], 'words': ['call', 'a', 'shell', 'script', 'str0', 'using', 'subprocess'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': './test.sh'}, 'snippet': "subprocess.call(['str0'])"}
Generated  translation
subprocess. call ('test. sh otherfunc') 
--------- B -----------
{'intent': {'gloss': ['separate', 'words', 'delimited', 'by', 'one', 'or', 'more', 'spaces', 'into', 'a', 'list'], 'words': ['separate', 'words', 'delimited', 'by', 'one', 'or', 'more', 'spaces', 'into', 'a', 'list'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "re.split(' +', 'hello world sample text')"}
Generated  translation
re. sub ('\ \ w + ','','', text ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'list', 'into', 'a', 'generator', 'object'], 'words': ['convert', 'a', 'list', 'into', 'a', 'generator', 'object'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': '(n for n in [1, 2, 3, 5])'}
Generated  translation
i = [ ( i ) for i in range ( 0, len ( s ), 3 ] ) 
--------- B -----------
{'intent': {'gloss': ['encode', 'str0', 'to', 'a', 'json', 'string'], 'words': ['encode', 'str0', 'to', 'a', 'json', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "decimal('3.9')"}, 'snippet': "json.dumps(decimal('3.9'))"}
Generated  translation
" " " \ \ xc3 \ \ x85あ " " ". encode ('utf - 8') 
--------- B -----------
{'intent': {'gloss': ['add', 'key', 'str0', 'to', 'dictionary', 'var0', 'with', 'value', 'str1'], 'words': ['add', 'key', 'str0', 'to', 'dictionary', 'var0', 'with', 'value', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'mynewkey', 'var0': 'd', 'str1': 'mynewvalue'}, 'snippet': "var0['str0'] = 'str1'"}
Generated  translation
var0. update ( {'str0': 3 } ) 
--------- B -----------
{'intent': {'gloss': ['add', 'key', 'str0', 'to', 'dictionary', 'var0', 'with', 'value', '1'], 'words': ['add', 'key', 'str0', 'to', 'dictionary', 'var0', 'with', 'value', '1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'a', 'var0': 'data'}, 'snippet': "var0.update({'str0': 1})"}
Generated  translation
var0. update ( {'str0': 3 } ) 
--------- B -----------
{'intent': {'gloss': ['add', 'key', 'str0', 'to', 'dictionary', 'var0', 'with', 'value', '1'], 'words': ['add', 'key', 'str0', 'to', 'dictionary', 'var0', 'with', 'value', '1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'a', 'var0': 'data'}, 'snippet': 'var0.update(dict(str0=1))'}
Generated  translation
var0. update ( {'str0': 3 } ) 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'string', 'into', 'a', 'list', 'of', 'words', 'and', 'whitespace'], 'words': ['split', 'a', 'string', 'into', 'a', 'list', 'of', 'words', 'and', 'whitespace'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "re.split('(\\\\w+)', s)"}
Generated  translation
re. findall ('\ \ s + ','str1') 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'integer', 'location', 'of', 'a', 'key', 'var0', 'in', 'a', 'pandas', 'data', 'frame'], 'words': ['get', 'the', 'integer', 'location', 'of', 'a', 'key', 'var0', 'in', 'a', 'pandas', 'data', 'frame'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'bob'}, 'snippet': "df.index.get_loc('var0')"}
Generated  translation
df. apply ( lambda x : x. fillna ( x. mean ( ) ), axis = 0 ) 
--------- B -----------
{'intent': {'gloss': ['add', 'an', 'item', 'with', 'key', 'str0', 'and', 'value', '1', 'to', 'an', 'dictionary', 'var0'], 'words': ['add', 'an', 'item', 'with', 'key', 'str0', 'and', 'value', '1', 'to', 'an', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'third_key', 'var0': 'my_dict'}, 'snippet': "var0.update({'str0': 1})"}
Generated  translation
var0. update ( {'str0': 1,'str0': 3 } ) 
--------- B -----------
{'intent': {'gloss': ['print', 'a', 'string', 'var0', 'with', 'string', 'format'], 'words': ['print', 'a', 'string', 'var0', 'with', 'string', 'format'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'word'}, 'snippet': 'print(\'"{}"\'.format(var0))'}
Generated  translation
print ('value is " { } " '. format ( var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['print', 'str0', 'without', 'newline'], 'words': ['print', 'str0', 'without', 'newline'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {'str0': '.'}, 'snippet': "sys.stdout.write('str0')"}
Generated  translation
print ('[ % s, % s, % s ]'% ( 1, 2, 3 ) ) 
--------- B -----------
{'intent': {'gloss': ['concatenate', 'array', 'of', 'strings', 'str0', 'into', 'a', 'string'], 'words': ['concatenate', 'array', 'of', 'strings', 'str0', 'into', 'a', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "['a', 'b', 'c', 'd']", '[ str0 ]': "['a', 'b', 'c', 'd']"}, 'snippet': '"""""".join([ str0 ])'}
Generated  translation
" " " " " ". join ( str0 ) 
--------- B -----------
{'intent': {'gloss': ['write', 'dataframe', 'var0', ',', 'excluding', 'index', ',', 'to', 'a', 'csv', 'file'], 'words': ['write', 'dataframe', 'var0', ',', 'excluding', 'index', ',', 'to', 'a', 'csv', 'file'], 'after': [' ', ' ', '', ' ', ' ', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': 'var0.to_csv(filename, index=false)'}
Generated  translation
var0. write. to _ csv ('str0') 
--------- B -----------
{'intent': {'gloss': ['convert', 'unicode', 'string', 'var0', 'to', 'ascii'], 'words': ['convert', 'unicode', 'string', 'var0', 'to', 'ascii'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': "var0.encode('iso-8859-15')"}
Generated  translation
ord ('あ') 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'all', 'elements', 'in', 'list', 'var0', 'are', 'identical'], 'words': ['check', 'if', 'all', 'elements', 'in', 'list', 'var0', 'are', 'identical'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylist'}, 'snippet': 'all(x == var0[0] for x in var0)'}
Generated  translation
len ( set ( var0 ) ) = = 1 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'first', 'object', 'from', 'a', 'queryset', 'in', 'django', 'model', 'var0'], 'words': ['get', 'the', 'first', 'object', 'from', 'a', 'queryset', 'in', 'django', 'model', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'entry'}, 'snippet': 'var0.objects.filter()[:1].get()'}
Generated  translation
var0. objects. order _ by ( '?') [ 0 ] 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'str0', 'using', 'a', 'regex', 'str1'], 'words': ['split', 'string', 'str0', 'using', 'a', 'regex', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'words, words, words.', 'str1': '(\\w+)', '( str1 )': '(\\w+)'}, 'snippet': "re.split('str1', 'str0')"}
Generated  translation
re. split ('str1 ','str0') 
--------- B -----------
{'intent': {'gloss': ['sum', 'elements', 'at', 'index', 'var0', 'of', 'each', 'list', 'in', 'list', 'var1'], 'words': ['sum', 'elements', 'at', 'index', 'var0', 'of', 'each', 'list', 'in', 'list', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'column', 'var1': 'data'}, 'snippet': 'print(sum(row[var0] for row in var1))'}
Generated  translation
map ( sum, zip ( * var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['flatten', 'list', 'var0'], 'words': ['flatten', 'list', 'var0'], 'after': [' ', ' ', '']}, 'slot_map': {'var0': 'list_of_menuitems'}, 'snippet': '[image for menuitem in var0 for image in menuitem]'}
Generated  translation
var0 = [ i [ 0 ] for i in var0 ] 
--------- B -----------
{'intent': {'gloss': ['create', 'array', 'containing', 'the', 'maximum', 'value', 'of', 'respective', 'elements', 'of', 'array', 'str0', 'and', 'array', 'str1'], 'words': ['create', 'array', 'containing', 'the', 'maximum', 'value', 'of', 'respective', 'elements', 'of', 'array', 'str0', 'and', 'array', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '[2, 3, 4]', 'str1': '[1, 5, 2]', '[ str0 ]': '[2, 3, 4]', '[ str1 ]': '[1, 5, 2]'}, 'snippet': 'np.maximum([ str0 ], [ str1 ])'}
Generated  translation
np. ma. array ( [ np. arange ( str0, 2 ), ( 3, - 1 ), np. mean ( ( none, 2 ) ] ) 
--------- B -----------
{'intent': {'gloss': ['print', 'a', 'list', 'var0', 'and', 'move', 'first', '3', 'elements', 'to', 'the', 'end', 'of', 'the', 'list'], 'words': ['print', 'a', 'list', 'var0', 'and', 'move', 'first', '3', 'elements', 'to', 'the', 'end', 'of', 'the', 'list'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': 'print(var0[3:] + var0[:3])'}
Generated  translation
var0 = [ 0 ] for i in range ( 3 ) ] 
--------- B -----------
{'intent': {'gloss': ['count', 'non', 'zero', 'values', 'in', 'each', 'column', 'in', 'pandas', 'data', 'frame'], 'words': ['count', 'non', 'zero', 'values', 'in', 'each', 'column', 'in', 'pandas', 'data', 'frame'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'df.astype(bool).sum(axis=1)'}
Generated  translation
df. apply ( lambda x : x. fillna ( x. mean ( ) ), axis = 0 ) 
--------- B -----------
{'intent': {'gloss': ['search', 'for', 'string', 'that', 'matches', 'regular', 'expression', 'pattern', 'str0', 'in', 'string', 'str1'], 'words': ['search', 'for', 'string', 'that', 'matches', 'regular', 'expression', 'pattern', 'str0', 'in', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '(?<!distillr)\\\\acrotray\\.exe', 'str1': 'c:\\somedir\\acrotray.exe'}, 'snippet': "re.search('str0', 'str1')"}
Generated  translation
re. search ('str1 ', str0 ). group ( 1 ) 
--------- B -----------
{'intent': {'gloss': ['loop', 'over', 'a', 'list', 'var0', 'if', 'sublists', 'length', 'equals', '3'], 'words': ['loop', 'over', 'a', 'list', 'var0', 'if', 'sublists', 'length', 'equals', '3'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylist'}, 'snippet': '[x for x in var0 if len(x) == 3]'}
Generated  translation
map ( list, var0. items ( ) ) 
--------- B -----------
{'intent': {'gloss': ['create', 'list', 'var0', 'containing', '100', 'instances', 'of', 'object', 'var1'], 'words': ['create', 'list', 'var0', 'containing', '100', 'instances', 'of', 'object', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'lst', 'var1': 'object'}, 'snippet': 'var0 = [var1() for i in range(100)]'}
Generated  translation
var0 = [ var1 [ i ] for i in range ( 100 ) ] 
--------- B -----------
{'intent': {'gloss': ['joining', 'data', 'from', 'dataframe', 'var0', 'with', 'data', 'from', 'dataframe', 'var1', 'based', 'on', 'matching', 'values', 'of', 'column', 'str0', 'in', 'both', 'dataframes'], 'words': ['joining', 'data', 'from', 'dataframe', 'var0', 'with', 'data', 'from', 'dataframe', 'var1', 'based', 'on', 'matching', 'values', 'of', 'column', 'str0', 'in', 'both', 'dataframes'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df1', 'var1': 'df2', 'str0': 'date_time'}, 'snippet': "var0.merge(var1, on='str0')"}
Generated  translation
s1 = pd. merge ( var0, var1, how ='inner ', on = ['str0'] ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'a', 'directory', 'var0', 'exists', 'and', 'create', 'it', 'if', 'necessary'], 'words': ['check', 'if', 'a', 'directory', 'var0', 'exists', 'and', 'create', 'it', 'if', 'necessary'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'path'}, 'snippet': 'distutils.dir_util.mkpath(var0)'}
Generated  translation
os. path. exists ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['access', 'a', 'tag', 'called', 'str0', 'in', 'beautifulsoup', 'var0'], 'words': ['access', 'a', 'tag', 'called', 'str0', 'in', 'beautifulsoup', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'name', 'var0': 'soup'}, 'snippet': "print(var0.find('str0').string)"}
Generated  translation
soup. find _ all ('a ', href = re. compile ('http : / / www \ \. com /') ) 
--------- B -----------
{'intent': {'gloss': ['get', 'index', 'of', 'rows', 'in', 'column', 'str0'], 'words': ['get', 'index', 'of', 'rows', 'in', 'column', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'boolcol'}, 'snippet': "df.loc[df['str0']]"}
Generated  translation
[ int ( x ) for x in str0. split ( ',') ] 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'on', 'white', 'spaces'], 'words': ['split', 'string', 'var0', 'on', 'white', 'spaces'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'my_string'}, 'snippet': '""" """.join(var0.split())'}
Generated  translation
var0. split ( ) 
--------- B -----------
{'intent': {'gloss': ['shuffle', 'columns', 'of', 'an', 'numpy', 'array', 'str0'], 'words': ['shuffle', 'columns', 'of', 'an', 'numpy', 'array', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'r'}, 'snippet': 'np.random.shuffle(np.transpose(str0))'}
Generated  translation
np. outer ( a, b ). ravel ( ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'items', 'in', 'var0', 'to', 'integers'], 'words': ['convert', 'items', 'in', 'var0', 'to', 'integers'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 't1'}, 'snippet': 't2 = [map(int, x) for x in var0]'}
Generated  translation
[ int ( i ) for i in var0 ] 
--------- B -----------
{'intent': {'gloss': ['encode', 'string', 'str0'], 'words': ['encode', 'string', 'str0'], 'after': [' ', ' ', '']}, 'slot_map': {'str0': 'data to be encoded'}, 'snippet': "encoded = base64.b64encode('str0')"}
Generated  translation
" " " \ \ xc3 \ \ x85あ " " ". encode ('utf - 8') 
--------- B -----------
{'intent': {'gloss': ['encode', 'a', 'string', 'str0', 'to', 'var0', 'encoding'], 'words': ['encode', 'a', 'string', 'str0', 'to', 'var0', 'encoding'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'data to be encoded', 'var0': 'ascii'}, 'snippet': "encoded = 'str0'.encode('var0')"}
Generated  translation
var0. encode ('utf - 8') 
--------- B -----------
{'intent': {'gloss': ['convert', 'unicode', 'string', 'ustr0', 'into', 'dictionary'], 'words': ['convert', 'unicode', 'string', 'ustr0', 'into', 'dictionary'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "{'code1':1,'code2':1}", '{ str0 }': "{'code1':1,'code2':1}"}, 'snippet': "d = ast.literal_eval('str0')"}
Generated  translation
dict ( map ( int, x. split (':') ) for x in str0. split ( ',') ) 
--------- B -----------
{'intent': {'gloss': ['open', 'a', 'file', 'str0', 'in', 'write', 'mode'], 'words': ['open', 'a', 'file', 'str0', 'in', 'write', 'mode'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'path/to/file_name.ext'}, 'snippet': "new_file = open('str0', 'w')"}
Generated  translation
f = open ('str0 ','rb') 
--------- B -----------
{'intent': {'gloss': ['convert', 'tuple', 'of', 'tuples', 'str0', 'to', 'list', 'in', 'one', 'line'], 'words': ['convert', 'tuple', 'of', 'tuples', 'str0', 'to', 'list', 'in', 'one', 'line'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "(('aa',), ('bb',), ('cc',))", '( str0 )': "(('aa',), ('bb',), ('cc',))"}, 'snippet': 'map(lambda a: a[0], ( str0 ))'}
Generated  translation
[ tuple ( x ) for x in str0 ] 
--------- B -----------
{'intent': {'gloss': ['plotting', 'stacked', 'barplots', 'on', 'a', 'panda', 'data', 'frame'], 'words': ['plotting', 'stacked', 'barplots', 'on', 'a', 'panda', 'data', 'frame'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "df.plot(kind='barh', stacked=true)"}
Generated  translation
df. stacked ( ). to _ csv ('my _ id') 
--------- B -----------
{'intent': {'gloss': ['rotate', 'the', 'xtick', 'labels', 'of', 'matplotlib', 'plot', 'var0', 'by', 'str0', 'degrees', 'to', 'make', 'long', 'labels', 'readable'], 'words': ['rotate', 'the', 'xtick', 'labels', 'of', 'matplotlib', 'plot', 'var0', 'by', 'str0', 'degrees', 'to', 'make', 'long', 'labels', 'readable'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'ax', 'str0': '45'}, 'snippet': 'var0.set_xticklabels(labels, rotation=45)'}
Generated  translation
var0. set _ xticklabels ( var0. xticks ( ), var0. get _ level _ by ='str0') 
--------- B -----------
{'intent': {'gloss': ['pandas', 'dataframe', 'get', 'first', 'row', 'of', 'each', 'group', 'by', 'str0'], 'words': ['pandas', 'dataframe', 'get', 'first', 'row', 'of', 'each', 'group', 'by', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'id'}, 'snippet': "df.groupby('str0').first()"}
Generated  translation
df. groupby ('str0') ['str0']. agg ( lambda x : x. nlargest ( 1 ). sum ( ) ) 
--------- B -----------
{'intent': {'gloss': ['call', 'a', 'subprocess', 'with', 'arguments', 'str0', 'that', 'may', 'contain', 'spaces'], 'words': ['call', 'a', 'subprocess', 'with', 'arguments', 'str0', 'that', 'may', 'contain', 'spaces'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'c:\\program files\\vmware\\vmware server\\vmware-cmd.bat'}, 'snippet': "subprocess.popen(['str0'])"}
Generated  translation
subprocess. call ( ['str0 ', str0 ] ) 
--------- B -----------
{'intent': {'gloss': ['reverse', 'sort', 'counter', 'var0', 'by', 'values'], 'words': ['reverse', 'sort', 'counter', 'var0', 'by', 'values'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'sorted(var0, key=var0.get, reverse=true)'}
Generated  translation
sorted ( var0, key = lambda x : int ( x. split ('_') [ 1 ] ), reverse = true ) 
--------- B -----------
{'intent': {'gloss': ['append', 'a', 'numpy', 'array', 'str0', 'to', 'a', 'numpy', 'array', 'str1'], 'words': ['append', 'a', 'numpy', 'array', 'str0', 'to', 'a', 'numpy', 'array', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'b', 'str1': 'a'}, 'snippet': 'np.vstack((str1, str0))'}
Generated  translation
np. einsum ('ijk, ikl - > ijl ', str1 ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'lists', 'str0', 'such', 'that', 'third', 'row', 'comes', 'first'], 'words': ['sort', 'a', 'list', 'of', 'lists', 'str0', 'such', 'that', 'third', 'row', 'comes', 'first'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'c2'}, 'snippet': 'str0.sort(key=lambda row: row[2])'}
Generated  translation
sorted ( str0, key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'elements', 'from', 'list', 'var0', ',', 'that', 'have', 'a', 'field', 'var1', 'value', '30'], 'words': ['get', 'elements', 'from', 'list', 'var0', ',', 'that', 'have', 'a', 'field', 'var1', 'value', '30'], 'after': [' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylist', 'var1': 'n'}, 'snippet': '[x for x in var0 if x.var1 == 30]'}
Generated  translation
[ var0 for var0 in var1 if var0 [ : - 1 ] ] 
--------- B -----------
{'intent': {'gloss': ['execute', 'script', 'str0', 'using', 'str1', 'shell'], 'words': ['execute', 'script', 'str0', 'using', 'str1', 'shell'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'script.ps1', 'str1': 'powershell.exe'}, 'snippet': "os.system('str1', 'str0')"}
Generated  translation
subprocess. call ('str0 ', shell = true ) 
--------- B -----------
{'intent': {'gloss': ['concatenate', 'items', 'of', 'list', 'var0', 'with', 'a', 'space', 'str0'], 'words': ['concatenate', 'items', 'of', 'list', 'var0', 'with', 'a', 'space', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l', 'str0': ''}, 'snippet': "print(' '.join(map(str, var0)))"}
Generated  translation
print (''. join ( str ( x ) for x in var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['set', 'pythonpath', 'in', 'python', 'script', '.'], 'words': ['set', 'pythonpath', 'in', 'python', 'script', '.'], 'after': [' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "sys.path.append('/path/to/whatever')"}
Generated  translation
os. system ('ulimit - s unlimited ; some _ executable') 
--------- B -----------
{'intent': {'gloss': ['running', 'bash', 'script', 'str0'], 'words': ['running', 'bash', 'script', 'str0'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {'str0': 'sleep.sh'}, 'snippet': "subprocess.call('str0', shell=true)"}
Generated  translation
subprocess. call ('str0 ', shell = true ) 
--------- B -----------
{'intent': {'gloss': ['write', 'the', 'elements', 'of', 'list', 'var0', 'concatenated', 'by', 'special', 'character', 'str0', 'to', 'file', 'var1'], 'words': ['write', 'the', 'elements', 'of', 'list', 'var0', 'concatenated', 'by', 'special', 'character', 'str0', 'to', 'file', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'lines', 'str0': '\n', 'var1': 'myfile'}, 'snippet': "var1.write('str0'.join(var0))"}
Generated  translation
var1 = ['str0'] 
--------- B -----------
{'intent': {'gloss': ['merge', 'list', 'str0', 'and', 'list', 'str1', 'and', 'list', 'str2', 'into', 'one', 'list'], 'words': ['merge', 'list', 'str0', 'and', 'list', 'str1', 'and', 'list', 'str2', 'into', 'one', 'list'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "['it']", 'str1': "['was']", 'str2': "['annoying']", '[ str0 ]': "['it']", '[ str1 ]': "['was']", '[ str2 ]': "['annoying']"}, 'snippet': '[ str0 ] + [ str1 ] + [ str2 ]'}
Generated  translation
[ ( x + y ) for x in zip ( [ str0 ], [ str1 ], [ str2 ] ) ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'index', 'at', 'level', '0', 'into', 'a', 'column', 'in', 'dataframe', 'var0'], 'words': ['convert', 'index', 'at', 'level', '0', 'into', 'a', 'column', 'in', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': 'var0.reset_index(level=0, inplace=true)'}
Generated  translation
var0. drop ( var0. index [ 0 ]. astype ( 0 ) ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'the', 'first', 'row', 'of', 'numpy', 'matrix', 'var0', 'to', 'a', 'list'], 'words': ['convert', 'the', 'first', 'row', 'of', 'numpy', 'matrix', 'var0', 'to', 'a', 'list'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'numpy.array(var0)[0].tolist()'}
Generated  translation
numpy. loadtxt ( var0, var0 ) 
--------- B -----------
{'intent': {'gloss': ['how', 'do', 'i', 'sum', 'the', 'first', 'value', 'in', 'each', 'tuple', 'in', 'a', 'list', 'of', 'tuples', 'in', 'python', '?'], 'words': ['how', 'do', 'i', 'sum', 'the', 'first', 'value', 'in', 'each', 'tuple', 'in', 'a', 'list', 'of', 'tuples', 'in', 'python', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'sum([pair[0] for pair in list_of_pairs])'}
Generated  translation
[ item [ 0 ] for item in str0 ] 
--------- B -----------
{'intent': {'gloss': ['run', 'r', 'script', 'str0'], 'words': ['run', 'r', 'script', 'str0'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {'str0': '/usr/bin/rscript --vanilla /pathto/myrscript.r'}, 'snippet': "subprocess.call('str0', shell=true)"}
Generated  translation
exec ( compile ( open ('str0'). read ( ),'str0 ','exec') ) 
--------- B -----------
{'intent': {'gloss': ['read', 'a', 'file', 'var0', 'without', 'newlines'], 'words': ['read', 'a', 'file', 'var0', 'without', 'newlines'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'file'}, 'snippet': "[line.rstrip('\\n') for line in var0]"}
Generated  translation
my _ file = open ( var0 ). read ( ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'item', 'at', 'index', '0', 'from', 'the', 'tuple', 'that', 'has', 'maximum', 'value', 'at', 'index', '1', 'in', 'list', 'var0'], 'words': ['get', 'the', 'item', 'at', 'index', '0', 'from', 'the', 'tuple', 'that', 'has', 'maximum', 'value', 'at', 'index', '1', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'lis'}, 'snippet': 'max(var0, key=itemgetter(1))[0]'}
Generated  translation
max ( var0, key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'lis', 'var0', 'in', 'ascending', 'order', 'based', 'on', 'the', 'degrees', 'value', 'of', 'its', 'elements'], 'words': ['sort', 'lis', 'var0', 'in', 'ascending', 'order', 'based', 'on', 'the', 'degrees', 'value', 'of', 'its', 'elements'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list5'}, 'snippet': 'sorted(var0, lambda x: (degree(x), x))'}
Generated  translation
sorted ( list ( var0. items ( ) ), key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'new', 'list', 'var0by', 'removing', 'empty', 'list', 'from', 'a', 'list', 'of', 'lists', 'var1'], 'words': ['get', 'a', 'new', 'list', 'var0by', 'removing', 'empty', 'list', 'from', 'a', 'list', 'of', 'lists', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list2', 'var1': 'list1'}, 'snippet': 'var0 = [x for x in var1 if x != []]'}
Generated  translation
var0 = [ [ x for x in var1 if x ] 
--------- B -----------
{'intent': {'gloss': ['match', 'regex', 'str0', 'with', 'string', 'str1'], 'words': ['match', 'regex', 'str0', 'with', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '\\((.*?)\\)|(\\w)', 'str1': '(zyx)bc'}, 'snippet': "re.findall('str0', 'str1')"}
Generated  translation
re. match ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['initialize', 'var0', 'in', 'flask', 'config', 'with', 'str0'], 'words': ['initialize', 'var0', 'in', 'flask', 'config', 'with', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'secret_key', 'str0': 'your_secret_string'}, 'snippet': "app.config['var0'] = 'str0'"}
Generated  translation
var0. set _ index ('str0') 
--------- B -----------
{'intent': {'gloss': ['write', 'bytes', 'var0', 'to', 'a', 'file', 'var1', 'in', 'python', '3'], 'words': ['write', 'bytes', 'var0', 'to', 'a', 'file', 'var1', 'in', 'python', '3'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'bytes_', 'var1': 'filename'}, 'snippet': "open('var1', 'wb').write(var0)"}
Generated  translation
var1. write ('\ n '. join ( var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['eliminate', 'all', 'strings', 'from', 'list', 'var0'], 'words': ['eliminate', 'all', 'strings', 'from', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'lst'}, 'snippet': '[element for element in var0 if isinstance(element, int)]'}
Generated  translation
var0 = list ( [ _ f for _ f in var0 if _ f ] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'list', 'of', 'all', 'keys', 'in', 'cassandra', 'database', 'var0', 'with', 'pycassa'], 'words': ['get', 'a', 'list', 'of', 'all', 'keys', 'in', 'cassandra', 'database', 'var0', 'with', 'pycassa'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'cf'}, 'snippet': 'list(var0.get_range().get_keys())'}
Generated  translation
var0. objects.save ( * var0 ) 
--------- B -----------
{'intent': {'gloss': ['choose', 'a', 'random', 'file', 'from', 'the', 'directory', 'contents', 'of', 'the', 'c', 'drive', ',', 'str0'], 'words': ['choose', 'a', 'random', 'file', 'from', 'the', 'directory', 'contents', 'of', 'the', 'c', 'drive', ',', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '']}, 'slot_map': {'str0': 'c:\\'}, 'snippet': "random.choice(os.listdir('str0'))"}
Generated  translation
random. choice ( list ( range ( 100 ) ), 16 ) 
--------- B -----------
{'intent': {'gloss': ['send', 'a', 'signal', 'str0', 'to', 'the', 'current', 'process'], 'words': ['send', 'a', 'signal', 'str0', 'to', 'the', 'current', 'process'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'signal.sigusr1'}, 'snippet': 'os.kill(os.getpid(), signal.sigusr1)'}
Generated  translation
sys. exit ('str0') 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'string', 'var0', 'with', 'dot', 'and', 'comma', 'into', 'a', 'float', 'number', 'var1'], 'words': ['convert', 'a', 'string', 'var0', 'with', 'dot', 'and', 'comma', 'into', 'a', 'float', 'number', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'my_string', 'var1': 'my_float'}, 'snippet': "var1 = float(var0.replace(',', ''))"}
Generated  translation
float ( int ( var0. split ( ',') ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'string', 'str0', 'with', 'dot', 'and', 'comma', 'into', 'a', 'floating', 'number'], 'words': ['convert', 'a', 'string', 'str0', 'with', 'dot', 'and', 'comma', 'into', 'a', 'floating', 'number'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '123,456.908'}, 'snippet': "float('str0'.replace(',', ''))"}
Generated  translation
ast. literal _ eval ('str0') 
--------- B -----------
{'intent': {'gloss': ['make', 'a', 'comma', '-', 'separated', 'string', 'from', 'a', 'list', 'var0'], 'words': ['make', 'a', 'comma', '-', 'separated', 'string', 'from', 'a', 'list', 'var0'], 'after': [' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylist'}, 'snippet': "var0 = ','.join(map(str, var0))"}
Generated  translation
print (''. join ( str ( i ) for i in var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'list', 'of', 'integers', 'by', 'splitting', 'a', 'string', 'var0', 'with', 'comma'], 'words': ['get', 'a', 'list', 'of', 'integers', 'by', 'splitting', 'a', 'string', 'var0', 'with', 'comma'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'user'}, 'snippet': "[int(s) for s in var0.split(',')]"}
Generated  translation
[ int ( s ) for s in var0. split ( ',') ] 
--------- B -----------
{'intent': {'gloss': ['combine', 'lists', 'var0', 'and', 'var1', 'by', 'alternating', 'their', 'elements'], 'words': ['combine', 'lists', 'var0', 'and', 'var1', 'by', 'alternating', 'their', 'elements'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l1', 'var1': 'l2'}, 'snippet': '[val for pair in zip(var0, var1) for val in pair]'}
Generated  translation
[ ( i + var0 ) for i in range ( len ( var1 ), var0 ) ] 
--------- B -----------
{'intent': {'gloss': ['retrieve', 'each', 'line', 'from', 'a', 'file', 'str0', 'as', 'a', 'list'], 'words': ['retrieve', 'each', 'line', 'from', 'a', 'file', 'str0', 'as', 'a', 'list'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'file.txt'}, 'snippet': "[line.split() for line in open('str0')]"}
Generated  translation
with open ('str0') as f : f. readlines ( ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'dictionary', 'var0', 'by', 'the', 'key', 'var1'], 'words': ['sort', 'a', 'list', 'of', 'dictionary', 'var0', 'by', 'the', 'key', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylist', 'var1': 'title'}, 'snippet': "var0.sort(key=lambda x: x['var1'])"}
Generated  translation
sorted ( var0, key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['find', 'the', 'first', 'element', 'of', 'the', 'tuple', 'with', 'the', 'maximum', 'second', 'element', 'in', 'a', 'list', 'of', 'tuples', 'var0'], 'words': ['find', 'the', 'first', 'element', 'of', 'the', 'tuple', 'with', 'the', 'maximum', 'second', 'element', 'in', 'a', 'list', 'of', 'tuples', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'lis'}, 'snippet': 'max(var0, key=lambda item: item[1])[0]'}
Generated  translation
max ( var0, key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['add', 'color', 'bar', 'with', 'image', 'var0', 'to', 'plot', 'var1'], 'words': ['add', 'color', 'bar', 'with', 'image', 'var0', 'to', 'plot', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mappable', 'var1': 'plt'}, 'snippet': 'var1.colorbar(var0=var0, cax=ax3)'}
Generated  translation
var1. set _ clim ( vmin = 0, vmax = 15 ) 
--------- B -----------
{'intent': {'gloss': ['generate', 'all', '2', '-', 'element', 'subsets', 'of', 'tuple', 'str0'], 'words': ['generate', 'all', '2', '-', 'element', 'subsets', 'of', 'tuple', 'str0'], 'after': [' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '(1, 2, 3)', '( str0 )': '(1, 2, 3)'}, 'snippet': 'list(itertools.combinations(( str0 ), 2))'}
Generated  translation
[ ( x, y ) for x in'str0'for y in'str0'] 
--------- B -----------
{'intent': {'gloss': ['how', 'do', 'i', 'insert', 'into', 't1', '(', 'select', '*', 'from', 't2', ')', 'in', 'sqlalchemy', '?'], 'words': ['how', 'do', 'i', 'insert', 'into', 't1', '(', 'select', '*', 'from', 't2', ')', 'in', 'sqlalchemy', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', '', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "session.execute('insert into t1 (select * from t2)')"}
Generated  translation
cursor. execute ('insert into table values ( % s, % s ) ', ( var1, var2 ) ) 
--------- B -----------
{'intent': {'gloss': ['print', 'new', 'line', 'character', 'as', 'str0', 'in', 'a', 'string', 'str1'], 'words': ['print', 'new', 'line', 'character', 'as', 'str0', 'in', 'a', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '\n', 'str1': 'foo\nbar'}, 'snippet': "print('str1'.encode('string_escape'))"}
Generated  translation
" " " str1 " " ". replace ('str0 ','' ) 
--------- B -----------
{'intent': {'gloss': ['calculate', 'the', 'mean', 'of', 'each', 'element', 'in', 'array', 'var0', 'with', 'the', 'element', 'previous', 'to', 'it'], 'words': ['calculate', 'the', 'mean', 'of', 'each', 'element', 'in', 'array', 'var0', 'with', 'the', 'element', 'previous', 'to', 'it'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': '(var0[1:] + var0[:-1]) / 2'}
Generated  translation
sum ( var0 ['1'] for var0, 2 ) 
--------- B -----------
{'intent': {'gloss': ['count', 'number', 'of', 'times', 'string', 'str0', 'occurred', 'in', 'string', 'str1'], 'words': ['count', 'number', 'of', 'times', 'string', 'str0', 'occurred', 'in', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'brown', 'str1': 'the big brown fox is brown'}, 'snippet': '"""str1""".count(\'str0\')'}
Generated  translation
" " " str1 " " ". count ('str0') 
--------- B -----------
{'intent': {'gloss': ['download', 'the', 'file', 'from', 'url', 'var0', 'and', 'save', 'it', 'under', 'file', 'var1'], 'words': ['download', 'the', 'file', 'from', 'url', 'var0', 'and', 'save', 'it', 'under', 'file', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'url', 'var1': 'file_name'}, 'snippet': 'urllib.request.urlretrieve(var0, var1)'}
Generated  translation
shutil. savefig ('var0') 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'tuples', 'var0', 'by', 'third', 'item', 'in', 'the', 'tuple'], 'words': ['sort', 'a', 'list', 'of', 'tuples', 'var0', 'by', 'third', 'item', 'in', 'the', 'tuple'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'b'}, 'snippet': 'var0.sort(key=lambda x: x[1][2])'}
Generated  translation
sorted ( var0, key = lambda x : ( x [ 1 ], x [ 2 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['subtract', '13', 'from', 'every', 'number', 'in', 'a', 'list', 'var0'], 'words': ['subtract', '13', 'from', 'every', 'number', 'in', 'a', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'var0[:] = [(x - 13) for x in var0]'}
Generated  translation
map ( lambda x : x + y, var0 ) 
--------- B -----------
{'intent': {'gloss': ['capture', 'final', 'output', 'of', 'a', 'chain', 'of', 'system', 'commands', 'str0'], 'words': ['capture', 'final', 'output', 'of', 'a', 'chain', 'of', 'system', 'commands', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'ps -ef | grep something | wc -l'}, 'snippet': "subprocess.check_output('str0', shell=true)"}
Generated  translation
sys. exit ('str0') 
--------- B -----------
{'intent': {'gloss': ['sending', 'http', 'headers', 'to', 'var0'], 'words': ['sending', 'http', 'headers', 'to', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'client'}, 'snippet': "var0.send('http/1.0 200 ok\\r\\n')"}
Generated  translation
var0. write ('http / 1. 0 200 established \ r \ n \ r \ n') 
--------- B -----------
{'intent': {'gloss': ['subscript', 'text', 'str0', 'with', 'str1', 'as', 'subscripted', 'in', 'matplotlib', 'labels', 'for', 'arrays', 'str2', 'and', 'str3', '.'], 'words': ['subscript', 'text', 'str0', 'with', 'str1', 'as', 'subscripted', 'in', 'matplotlib', 'labels', 'for', 'arrays', 'str2', 'and', 'str3', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'h20', 'str1': '2', 'str2': 'x', 'str3': 'y'}, 'snippet': "plt.plot(str2, str3, label='h₂o')"}
Generated  translation
re. sub ('(? < = [ a - z ] ) \ \ 1 + ','str3 ','str3 ', str3') 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'largest', 'key', 'whose', 'not', 'associated', 'with', 'value', 'of', '0', 'in', 'dictionary', 'var0'], 'words': ['get', 'the', 'largest', 'key', 'whose', 'not', 'associated', 'with', 'value', 'of', '0', 'in', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': '(k for k, v in var0.items() if v != 0)'}
Generated  translation
max ( min ( var0, key = lambda x : var0 [ x ] ['var0'] ) ) 
--------- B -----------
{'intent': {'gloss': ['decode', 'string', 'str0', 'into', 'a', 'normal', 'string'], 'words': ['decode', 'string', 'str0', 'into', 'a', 'normal', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '\\x89\\n'}, 'snippet': '"""str0""".decode(\'string_escape\')'}
Generated  translation
str0. decode ('utf - 8 ','ignore') 
--------- B -----------
{'intent': {'gloss': ['find', 'last', 'occurrence', 'of', 'character', 'str0', 'in', 'string', 'str1'], 'words': ['find', 'last', 'occurrence', 'of', 'character', 'str0', 'in', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '}', 'str1': 'abcd}def}'}, 'snippet': '"""str1""".rfind(\'str0\')'}
Generated  translation
re. sub ( '. *? \ \ 1 (? =. ) ','str0 ', str1 ) 
--------- B -----------
{'intent': {'gloss': ['reverse', 'list', 'var0', 'based', 'on', 'the', 'var1', 'attribute', 'of', 'each', 'object'], 'words': ['reverse', 'list', 'var0', 'based', 'on', 'the', 'var1', 'attribute', 'of', 'each', 'object'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'ut', 'var1': 'count'}, 'snippet': 'var0.sort(key=lambda x: x.var1, reverse=true)'}
Generated  translation
var0. reverse ( ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'objects', 'var0', 'in', 'reverse', 'order', 'by', 'their', 'var1', 'property'], 'words': ['sort', 'a', 'list', 'of', 'objects', 'var0', 'in', 'reverse', 'order', 'by', 'their', 'var1', 'property'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'ut', 'var1': 'count'}, 'snippet': 'var0.sort(key=lambda x: x.var1, reverse=true)'}
Generated  translation
sorted ( var0, key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['return', 'var0', 'if', 'string', 'var1', 'contains', 'regex', 'str0'], 'words': ['return', 'var0', 'if', 'string', 'var1', 'contains', 'regex', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'true', 'var1': 'foobarrrr', 'str0': 'ba[rzd]'}, 'snippet': "bool(re.search('str0', 'var1'))"}
Generated  translation
return var0. replace ('str0 ','' ). replace ('var1 ','' ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'any', 'key', 'in', 'the', 'dictionary', 'var0', 'starts', 'with', 'the', 'string', 'str0'], 'words': ['check', 'if', 'any', 'key', 'in', 'the', 'dictionary', 'var0', 'starts', 'with', 'the', 'string', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'dict1', 'str0': 'emp$$'}, 'snippet': "any(key.startswith('str0') for key in var0)"}
Generated  translation
any ( str0. startswith ('str0 ','str0') ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'var0', 'of', 'dicts', 'by', 'dict', 'value', 'str0'], 'words': ['sort', 'a', 'list', 'var0', 'of', 'dicts', 'by', 'dict', 'value', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l', 'str0': 'title'}, 'snippet': "var0.sort(key=lambda x: x['str0'])"}
Generated  translation
sorted ( var0, key = lambda x : x [ str0 ] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'position', 'of', 'item', 'var0', 'in', 'list', 'var1'], 'words': ['get', 'the', 'position', 'of', 'item', 'var0', 'in', 'list', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'element', 'var1': 'testlist'}, 'snippet': 'try:\n    print(var1.index(var0))\nexcept valueerror:\n    pass'}
Generated  translation
print ( var1 [ len ( var0 ) ] ) 
--------- B -----------
{'intent': {'gloss': ['how', 'do', 'i', 'perform', 'secondary', 'sorting', 'in', 'python', '?'], 'words': ['how', 'do', 'i', 'perform', 'secondary', 'sorting', 'in', 'python', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'sorted(list5, key=lambda vertex: (degree(vertex), vertex))'}
Generated  translation
sorted ( list ( mydict. items ( ) ), key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['append', 'each', 'line', 'in', 'file', 'var0', 'into', 'a', 'list'], 'words': ['append', 'each', 'line', 'in', 'file', 'var0', 'into', 'a', 'list'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'myfile'}, 'snippet': "[x for x in var0.splitlines() if x != '']"}
Generated  translation
[ line for line in open ('var0') ] 
--------- B -----------
{'intent': {'gloss': ['remove', 'symbols', 'from', 'a', 'string', 'var0'], 'words': ['remove', 'symbols', 'from', 'a', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': "re.sub('[^\\\\w]', ' ', var0)"}
Generated  translation
re. sub ('[ ^ < ] * > ','', var0 ) 
--------- B -----------
{'intent': {'gloss': ['count', 'the', 'number', 'of', 'keys', 'in', 'dictionary', 'var0'], 'words': ['count', 'the', 'number', 'of', 'keys', 'in', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'yourdictfile'}, 'snippet': 'len(set(open(var0).read().split()))'}
Generated  translation
len ( var0. split ( ) ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'escape', 'character', 'from', 'string', 'str0'], 'words': ['remove', 'escape', 'character', 'from', 'string', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '\\a'}, 'snippet': '"""str0""".decode(\'string_escape\')'}
Generated  translation
" " " " " ". join ( c for c in'str0') 
--------- B -----------
{'intent': {'gloss': ['numpy', 'concatenate', 'two', 'arrays', 'var0', 'and', 'var1', 'along', 'the', 'first', 'axis'], 'words': ['numpy', 'concatenate', 'two', 'arrays', 'var0', 'and', 'var1', 'along', 'the', 'first', 'axis'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'b'}, 'snippet': 'print(concatenate((var0, var1), axis=0))'}
Generated  translation
numpy. concatenate ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['numpy', 'concatenate', 'two', 'arrays', 'var0', 'and', 'var1', 'along', 'the', 'second', 'axis'], 'words': ['numpy', 'concatenate', 'two', 'arrays', 'var0', 'and', 'var1', 'along', 'the', 'second', 'axis'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'b'}, 'snippet': 'print(concatenate((var0, var1), axis=1))'}
Generated  translation
numpy. concatenate ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['fetch', 'address', 'information', 'for', 'host', 'str0', 'ion', 'port', '80'], 'words': ['fetch', 'address', 'information', 'for', 'host', 'str0', 'ion', 'port', '80'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'google.com'}, 'snippet': "print(socket.getaddrinfo('str0', 80))"}
Generated  translation
chr ( int ('str0 ', 16 ) ) 
--------- B -----------
{'intent': {'gloss': ['flask', 'set', 'folder', 'str0', 'as', 'the', 'default', 'template', 'folder'], 'words': ['flask', 'set', 'folder', 'str0', 'as', 'the', 'default', 'template', 'folder'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'wherever'}, 'snippet': "flask(__name__, template_folder='str0')"}
Generated  translation
os. path. dirname ( os. path. abspath ('str0') ) 
--------- B -----------
{'intent': {'gloss': ['delete', 'all', 'instances', 'of', 'a', 'character', 'str0', 'in', 'a', 'string', 'str1'], 'words': ['delete', 'all', 'instances', 'of', 'a', 'character', 'str0', 'in', 'a', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'i', 'str1': 'it is icy'}, 'snippet': "re.sub('str0', '', 'str1')"}
Generated  translation
" " " str1 " " ". replace ('str0 ','' ) 
--------- B -----------
{'intent': {'gloss': ['django', 'filter', 'by', 'hour'], 'words': ['django', 'filter', 'by', 'hour'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "entry.objects.filter(pub_date__contains='08:00')"}
Generated  translation
driver. find _ element _ by _ css _ selector ( '.') 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'multi', '-', 'line', 'string', 'str0', 'by', 'new', 'line', 'character', 'str1'], 'words': ['split', 'a', 'multi', '-', 'line', 'string', 'str0', 'by', 'new', 'line', 'character', 'str1'], 'after': [' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'a \n b \r\n c', 'str1': '\n'}, 'snippet': "' a \\n b \\r\\n c '.split('str1')"}
Generated  translation
re. split ('[. ] ','str0 ', 1 ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'substring', 'str0', 'from', 'a', 'string', 'str1'], 'words': ['remove', 'substring', 'str0', 'from', 'a', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'bag,', 'str1': 'lamp, bag, mirror'}, 'snippet': "print('str1'.replace('str0', ''))"}
Generated  translation
print ('str1 '. replace ('str0 ','' ). replace ('str0 ','' ) ) 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'string', 'var0', 'by', 'last', 'occurrence', 'of', 'character', 'str0'], 'words': ['split', 'a', 'string', 'var0', 'by', 'last', 'occurrence', 'of', 'character', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x', 'str0': '-'}, 'snippet': "print(var0.rpartition('str0')[0])"}
Generated  translation
re. split ('\ \. [ ^. ] + $ ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'last', 'part', 'of', 'a', 'string', 'before', 'the', 'character', 'str0'], 'words': ['get', 'the', 'last', 'part', 'of', 'a', 'string', 'before', 'the', 'character', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '-'}, 'snippet': "print(x.rsplit('str0', 1)[0])"}
Generated  translation
re. sub ('\ \. [ ^. ] + $ ','str0') 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'random', 'list', 'of', 'integers'], 'words': ['create', 'a', 'random', 'list', 'of', 'integers'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': '[int(1000 * random.random()) for i in range(10000)]'}
Generated  translation
random. sample ( range ( 100 ), 10 ) 
--------- B -----------
{'intent': {'gloss': ['google', 'app', 'engine', 'execute', 'gql', 'query', 'str0', 'with', 'parameter', 'str1'], 'words': ['google', 'app', 'engine', 'execute', 'gql', 'query', 'str0', 'with', 'parameter', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'select * from schedule where station = $1', 'str1': 'foo.key()'}, 'snippet': "db.gqlquery('str0', foo.key())"}
Generated  translation
cursor. execute ('insert into table values ( % s, % s, % s ) ', ('str0 ','str1') ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'string', 'into', 'datetime', 'using', 'the', 'format', 'str0'], 'words': ['convert', 'a', 'string', 'into', 'datetime', 'using', 'the', 'format', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '%y-%m-%d %h:%m:%s.%f'}, 'snippet': "datetime.datetime.strptime(string_date, 'str0')"}
Generated  translation
datetime. strptime ('str0 ','% y - % m - % d % h : % m : % sz') 
--------- B -----------
{'intent': {'gloss': ['find', 'the', 'key', 'associated', 'with', 'the', 'largest', 'value', 'in', 'dictionary', 'var0', 'whilst', 'key', 'is', 'non', '-', 'zero', 'value'], 'words': ['find', 'the', 'key', 'associated', 'with', 'the', 'largest', 'value', 'in', 'dictionary', 'var0', 'whilst', 'key', 'is', 'non', '-', 'zero', 'value'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'max(k for k, v in var0.items() if v != 0)'}
Generated  translation
max ( min ( var0, key = lambda x : ( abs ( x [ 1 ] ), x [ 0 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'largest', 'key', 'in', 'a', 'dictionary', 'var0', 'with', 'non', '-', 'zero', 'value'], 'words': ['get', 'the', 'largest', 'key', 'in', 'a', 'dictionary', 'var0', 'with', 'non', '-', 'zero', 'value'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'max(k for k, v in var0.items() if v != 0)'}
Generated  translation
max ( var0, key = lambda x : ( abs ( x [ 1 ] ), x [ 0 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'index', 'of', 'rows', 'in', 'dataframe', 'var0', 'which', 'column', 'str0', 'matches', 'value', 'true'], 'words': ['get', 'index', 'of', 'rows', 'in', 'dataframe', 'var0', 'which', 'column', 'str0', 'matches', 'value', 'true'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'boolcol'}, 'snippet': "var0[var0['str0']].index.tolist()"}
Generated  translation
var0. groupby ( var0 ['str0']. map ( lambda x : x ['str0'] ). mean ( ) ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'pandas', 'index', 'in', 'a', 'dataframe', 'to', 'columns'], 'words': ['convert', 'pandas', 'index', 'in', 'a', 'dataframe', 'to', 'columns'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "df.reset_index(level=['tick', 'obs'])"}
Generated  translation
df. apply ( lambda x : x. fillna ( x. mean ( ) ), axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'html', 'from', 'the', 'current', 'web', 'page', 'of', 'a', 'selenium', 'driver'], 'words': ['get', 'the', 'html', 'from', 'the', 'current', 'web', 'page', 'of', 'a', 'selenium', 'driver'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "driver.execute_script('return document.documentelement.outerhtml;')"}
Generated  translation
driver. find _ element _ by _ xpath ('xpath'). click ( ) 
--------- B -----------
{'intent': {'gloss': ['replacing', 'nan', 'in', 'the', 'dataframe', 'var0', 'with', 'row', 'average'], 'words': ['replacing', 'nan', 'in', 'the', 'dataframe', 'var0', 'with', 'row', 'average'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': 'var0.fillna(var0.mean(axis=1), axis=1)'}
Generated  translation
var0. fillna ( method ='ffill ', inplace = true ) 
--------- B -----------
{'intent': {'gloss': ['print', 'elements', 'of', 'list', 'var0', 'seperated', 'by', 'tabs', 'str0'], 'words': ['print', 'elements', 'of', 'list', 'var0', 'seperated', 'by', 'tabs', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list', 'str0': '\t'}, 'snippet': "print('str0'.join(map(str, var0)))"}
Generated  translation
print ('str0 '. join ( [ var0 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['print', 'unicode', 'string', 'str0', 'with', 'utf', '-', '8'], 'words': ['print', 'unicode', 'string', 'str0', 'with', 'utf', '-', '8'], 'after': [' ', ' ', ' ', ' ', ' ', '', '', '']}, 'slot_map': {'str0': 'Ð¿Ñ\x80Ð¸'}, 'snippet': "print('str0'.encode('raw_unicode_escape'))"}
Generated  translation
print ('str0 '. decode ('utf8') ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'words': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'testlist'}, 'snippet': '[i for i, x in enumerate(var0) if x == 1]'}
Generated  translation
var0. position ( 1 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'words': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'testlist'}, 'snippet': '[i for i, x in enumerate(var0) if x == 1]'}
Generated  translation
var0. position ( 1 ) 
--------- B -----------
{'intent': {'gloss': ['django', 'response', 'with', 'json', 'var0'], 'words': ['django', 'response', 'with', 'json', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'data'}, 'snippet': "return httpresponse(var0, mimetype='application/json')"}
Generated  translation
driver. find _ element _ by _ css _ selector ( '. / div'). click ( ) 
--------- B -----------
{'intent': {'gloss': ['formate', 'each', 'string', 'cin', 'list', 'var0', 'into', 'pattern', 'str0'], 'words': ['formate', 'each', 'string', 'cin', 'list', 'var0', 'into', 'pattern', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'elements', 'str0': '%{0}%'}, 'snippet': "var0 = ['str0'.format(element) for element in var0]"}
Generated  translation
re. findall ('str0 ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['converting', 'two', 'lists', 'str0', 'and', 'str1', 'into', 'a', 'matrix'], 'words': ['converting', 'two', 'lists', 'str0', 'and', 'str1', 'into', 'a', 'matrix'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '[1, 2, 3]', 'str1': '[4, 5, 6]', '[ str0 ]': '[1, 2, 3]', '[ str1 ]': '[4, 5, 6]'}, 'snippet': 'np.column_stack(([ str0 ], [ str1 ]))'}
Generated  translation
[ j for i in zip ( [ str0 ], [ str1 ], [ str0 ] ) ] 
--------- B -----------
{'intent': {'gloss': ['get', 'all', 'the', 'elements', 'except', 'strings', 'from', 'the', 'list', 'str0', '.'], 'words': ['get', 'all', 'the', 'elements', 'except', 'strings', 'from', 'the', 'list', 'str0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'lst'}, 'snippet': '[element for element in str0 if not isinstance(element, str)]'}
Generated  translation
[ x for x in str0 if x! = [ str0 ] ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'datetime', 'object', 'str0', 'to', 'seconds'], 'words': ['convert', 'datetime', 'object', 'str0', 'to', 'seconds'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '(1970, 1, 1)', '( str0 )': '(1970, 1, 1)'}, 'snippet': '(t - datetime.datetime( str0 )).total_seconds()'}
Generated  translation
datetime. datetime. strptime ('str0 ','% b % d, % y'). strftime ('% a') 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'highest', 'element', 'in', 'absolute', 'value', 'in', 'a', 'numpy', 'matrix', 'var0'], 'words': ['get', 'the', 'highest', 'element', 'in', 'absolute', 'value', 'in', 'a', 'numpy', 'matrix', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'max(var0.min(), var0.max(), key=abs)'}
Generated  translation
max ( var0, key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'string', 'var0', 'considering', 'the', 'spaces', 'str0'], 'words': ['split', 'a', 'string', 'var0', 'considering', 'the', 'spaces', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mystring', 'str0': ''}, 'snippet': "var0.replace(' ', '! !').split('!')"}
Generated  translation
[ i. split ('str0') for i in var0. split ('str0') ] 
--------- B -----------
{'intent': {'gloss': ['how', 'to', 'convert', 'a', 'string', 'from', 'cp', '-', '1251', 'to', 'utf', '-', '8', '?'], 'words': ['how', 'to', 'convert', 'a', 'string', 'from', 'cp', '-', '1251', 'to', 'utf', '-', '8', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', '', '', '', '']}, 'slot_map': {}, 'snippet': "d.decode('cp1251').encode('utf8')"}
Generated  translation
" " " [UNK] " " ". encode ('utf8') 
--------- B -----------
{'intent': {'gloss': ['python', 'save', 'list', 'var0', 'to', 'file', 'object', 'str0'], 'words': ['python', 'save', 'list', 'var0', 'to', 'file', 'object', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylist', 'str0': 'save.txt'}, 'snippet': "pickle.dump(var0, open('str0', 'wb'))"}
Generated  translation
var0. savefig ('str0') 
--------- B -----------
{'intent': {'gloss': ['search', 'for', 'occurrences', 'of', 'regex', 'pattern', 'str0', 'in', 'xml', 'string', 'var0'], 'words': ['search', 'for', 'occurrences', 'of', 'regex', 'pattern', 'str0', 'in', 'xml', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '>.*<', 'var0': 'line'}, 'snippet': "print(re.search('str0', var0).group(0))"}
Generated  translation
print ( var0. search ('str0'). groupby ( level = 0 ). size ( ) ) 
--------- B -----------
{'intent': {'gloss': ['count', 'the', 'occurrences', 'of', 'items', 'in', 'list', 'var0'], 'words': ['count', 'the', 'occurrences', 'of', 'items', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': '[[x, var0.count(x)] for x in set(var0)]'}
Generated  translation
len ( set ( var0 ) ) = = len ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['copy', 'all', 'values', 'in', 'a', 'column', 'str0', 'to', 'a', 'new', 'column', 'str1', 'in', 'a', 'pandas', 'data', 'frame', 'str2'], 'words': ['copy', 'all', 'values', 'in', 'a', 'column', 'str0', 'to', 'a', 'new', 'column', 'str1', 'in', 'a', 'pandas', 'data', 'frame', 'str2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'b', 'str1': 'd', 'str2': 'df'}, 'snippet': "str2['str1'] = str2['str0']"}
Generated  translation
str2 ['str0'] = df ['str1']. str. apply ( lambda x : x + y ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'string', 'var0', 'into', 'a', 'list', 'of', 'integers', 'var1'], 'words': ['convert', 'string', 'var0', 'into', 'a', 'list', 'of', 'integers', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'user_input', 'var1': 'user_list'}, 'snippet': "var1 = [int(number) for number in var0.split(',')]"}
Generated  translation
var1 = [ int ( x ) for x in var0. split ( ',') ] 
--------- B -----------
{'intent': {'gloss': ['sorting', 'data', 'in', 'dataframe', 'pandas'], 'words': ['sorting', 'data', 'in', 'dataframe', 'pandas'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "df.sort_values(['system_num', 'dis'])"}
Generated  translation
df. groupby ( ['stock ','same1'] ). sum ( ) 
--------- B -----------
{'intent': {'gloss': ['get', 'all', 'matches', 'with', 'regex', 'pattern', 'str0', 'in', 'list', 'of', 'string', 'var0'], 'words': ['get', 'all', 'matches', 'with', 'regex', 'pattern', 'str0', 'in', 'list', 'of', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '\\d+[xx]', 'var0': 'teststr'}, 'snippet': "[i for i in var0 if re.search('str0', i)]"}
Generated  translation
print ( re. findall ('str0 ', var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['resized', 'image', 'var0', 'to', 'width', ',', 'height', 'of', 'str0', 'with', 'filter', 'of', 'var1'], 'words': ['resized', 'image', 'var0', 'to', 'width', ',', 'height', 'of', 'str0', 'with', 'filter', 'of', 'var1'], 'after': [' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'image', 'str0': '(x, y)', 'var1': 'antialias', '( str0 )': '(x, y)'}, 'snippet': 'var0 = var0.resize(( str0 ), var0.var1)'}
Generated  translation
var0. communicate ('str0') [ 0 ] 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'list', 'of', 'integers', 'var0', 'from', 'a', 'file', 'str0'], 'words': ['get', 'a', 'list', 'of', 'integers', 'var0', 'from', 'a', 'file', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'lst', 'str0': 'filename.txt'}, 'snippet': "var0 = map(int, open('str0').readlines())"}
Generated  translation
var0 = [ i for i in var0 if i. isin ( str0 ) ] 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'at', 'every', 'space', 'followed', 'by', 'an', 'upper', '-', 'case', 'letter'], 'words': ['split', 'string', 'var0', 'at', 'every', 'space', 'followed', 'by', 'an', 'upper', '-', 'case', 'letter'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', '']}, 'slot_map': {'var0': 'input'}, 'snippet': "re.split('[ ](?=[a-z])', var0)"}
Generated  translation
re. split ('\ \. \ \ a + ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['sorting', 'a', 'list', 'of', 'lists', 'in', 'python'], 'words': ['sorting', 'a', 'list', 'of', 'lists', 'in', 'python'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'c2.sort(key=lambda row: (row[2], row[1]))'}
Generated  translation
[ sorted ( item ) for item in item ] 
--------- B -----------
{'intent': {'gloss': ['delete', 'all', 'characters', 'str0', 'in', 'string', 'str1'], 'words': ['delete', 'all', 'characters', 'str0', 'in', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'i', 'str1': 'it is icy'}, 'snippet': '"""str1""".replace(\'str0\', \'\')'}
Generated  translation
re. sub ('\ \ w + ','str1 ','str0') 
--------- B -----------
{'intent': {'gloss': ['sum', 'the', 'corresponding', 'decimal', 'values', 'for', 'binary', 'values', 'of', 'each', 'boolean', 'element', 'in', 'list', 'var0'], 'words': ['sum', 'the', 'corresponding', 'decimal', 'values', 'for', 'binary', 'values', 'of', 'each', 'boolean', 'element', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'sum(1 << i for i, b in enumerate(var0) if b)'}
Generated  translation
[ int ( x ) for x in bin ( 8 ) [ 2 : ] ] 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'dictionaries', 'var0', 'by', 'the', 'value', 'of', 'the', 'dictionary', 'key', 'var1'], 'words': ['sort', 'a', 'list', 'of', 'dictionaries', 'var0', 'by', 'the', 'value', 'of', 'the', 'dictionary', 'key', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list_to_be_sorted', 'var1': 'name'}, 'snippet': "newlist = sorted(var0, key=lambda k: k['var1'])"}
Generated  translation
sorted ( var0, key = lambda x : var1. index ( x ['var0'] ) ) 
--------- B -----------
{'intent': {'gloss': ['write', 'var0', 'to', 'a', 'binary', 'file', 'var1'], 'words': ['write', 'var0', 'to', 'a', 'binary', 'file', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'newfilebytes', 'var1': 'newfile'}, 'snippet': "var1.write(struct.pack('5b', *var0))"}
Generated  translation
var1 = sys. exit ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['find', 'intersection', 'data', 'between', 'series', 'var0', 'and', 'series', 'var1'], 'words': ['find', 'intersection', 'data', 'between', 'series', 'var0', 'and', 'series', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's1', 'var1': 's2'}, 'snippet': 'pd.series(list(set(var0).intersection(set(var1))))'}
Generated  translation
var0. find ('var1'). intersection ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['format', 'string', 'str0', 'with', 'variables', 'var0', 'and', 'var1'], 'words': ['format', 'string', 'str0', 'with', 'variables', 'var0', 'and', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '({} goals, ${})', 'var0': 'goals', 'var1': 'penalties', '( str0 )': '({} goals, ${})'}, 'snippet': '"""str0""".format(self.var0, self.var1)'}
Generated  translation
" " " str0 " " ". format ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['combine', 'elements', 'of', 'each', 'list', 'in', 'list', 'var0', 'into', 'digits', 'of', 'a', 'single', 'integer'], 'words': ['combine', 'elements', 'of', 'each', 'list', 'in', 'list', 'var0', 'into', 'digits', 'of', 'a', 'single', 'integer'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': "[''.join(str(d) for d in x) for x in var0]"}
Generated  translation
[ int ( x ) for x in var0 ] 
--------- B -----------
{'intent': {'gloss': ['substitute', 'ascii', 'letters', 'in', 'string', 'str0', 'with', 'empty', 'string', 'str1'], 'words': ['substitute', 'ascii', 'letters', 'in', 'string', 'str0', 'with', 'empty', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'aas30dsa20', 'str1': ''}, 'snippet': "re.sub('\\\\d', 'str1', 'str0')"}
Generated  translation
" " " str0 " " ". replace ('str1 ','' ) 
--------- B -----------
{'intent': {'gloss': ['increment', 'a', 'value', 'with', 'leading', 'zeroes', 'in', 'a', 'number', 'var0'], 'words': ['increment', 'a', 'value', 'with', 'leading', 'zeroes', 'in', 'a', 'number', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'str(int(var0) + 1).zfill(len(var0))'}
Generated  translation
i = int ( x, 16 ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'a', 'pandas', 'dataframe', 'var0', "'", 's', 'index', 'is', 'sorted'], 'words': ['check', 'if', 'a', 'pandas', 'dataframe', 'var0', "'", 's', 'index', 'is', 'sorted'], 'after': [' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': 'all(var0.index[:-1] <= var0.index[1:])'}
Generated  translation
var0. index. values. tolist ( ) 
--------- B -----------
{'intent': {'gloss': ['create', 'multidimensional', 'array', 'var0', 'with', '3', 'rows', 'and', '2', 'columns', 'in', 'python'], 'words': ['create', 'multidimensional', 'array', 'var0', 'with', '3', 'rows', 'and', '2', 'columns', 'in', 'python'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'matrix'}, 'snippet': 'var0 = [[a, b], [c, d], [e, f]]'}
Generated  translation
var0 [ np. arange ( 3 ), ( 3, 0, 2 ) ] 
--------- B -----------
{'intent': {'gloss': ['sorting', 'a', 'python', 'list', 'by', 'two', 'criteria'], 'words': ['sorting', 'a', 'python', 'list', 'by', 'two', 'criteria'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'sorted(list, key=lambda x: (x[0], -x[1]))'}
Generated  translation
sorted ( list ( range ( len ( s ) ) ), key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['click', 'a', 'href', 'button', 'having', 'text', 'str0', 'with', 'selenium'], 'words': ['click', 'a', 'href', 'button', 'having', 'text', 'str0', 'with', 'selenium'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'send inmail'}, 'snippet': "driver.findelement(by.linktext('str0')).click()"}
Generated  translation
browser. find _ element _ by _ css _ selector ('str0'). click ( ) 
--------- B -----------
{'intent': {'gloss': ['click', 'a', 'href', 'button', 'with', 'text', 'str0', 'with', 'selenium'], 'words': ['click', 'a', 'href', 'button', 'with', 'text', 'str0', 'with', 'selenium'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'send inmail'}, 'snippet': "driver.find_element_by_link_text('str0').click()"}
Generated  translation
browser. find _ element _ by _ css _ selector ('str0'). click ( ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'var0', 'by', 'length', 'of', 'value', 'in', 'tuple'], 'words': ['sort', 'a', 'list', 'var0', 'by', 'length', 'of', 'value', 'in', 'tuple'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': 'var0.sort(key=lambda t: len(t[1]), reverse=true)'}
Generated  translation
print ( sorted ( var0, key = lambda x : x [ 1 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'array', 'var0', 'into', 'a', 'list'], 'words': ['convert', 'array', 'var0', 'into', 'a', 'list'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'numpy.array(var0).reshape(-1).tolist()'}
Generated  translation
[ var0 for var0 in lst ] 
--------- B -----------
{'intent': {'gloss': ['swap', 'keys', 'with', 'values', 'in', 'a', 'dictionary', 'var0'], 'words': ['swap', 'keys', 'with', 'values', 'in', 'a', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'res = dict((v, k) for k, v in var0.items())'}
Generated  translation
dict ( ( k, v ) for k, v in var0. items ( ) if v ) 
--------- B -----------
{'intent': {'gloss': ['open', 'a', 'background', 'process', 'str0', 'with', 'arguments', 'str1'], 'words': ['open', 'a', 'background', 'process', 'str0', 'with', 'arguments', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'background-process', 'str1': 'arguments'}, 'snippet': "subprocess.popen(['str0', 'str1'])"}
Generated  translation
subprocess. popen ( ['str0 ','str1'] ) 
--------- B -----------
{'intent': {'gloss': ['find', 'duplicate', 'names', 'in', 'column', 'str0', 'of', 'the', 'dataframe', 'var0'], 'words': ['find', 'duplicate', 'names', 'in', 'column', 'str0', 'of', 'the', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'name', 'var0': 'x'}, 'snippet': "var0.set_index('str0').index.get_duplicates()"}
Generated  translation
var0 ['str0']. str. find ('str0') 
--------- B -----------
{'intent': {'gloss': ['get', 'the', '5th', 'item', 'of', 'a', 'generator'], 'words': ['get', 'the', '5th', 'item', 'of', 'a', 'generator'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'next(itertools.islice(range(10), 5, 5 + 1))'}
Generated  translation
func ( 1, 2 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'list', 'of', 'string', 'numbers', 'into', 'list', 'of', 'integers'], 'words': ['convert', 'list', 'of', 'string', 'numbers', 'into', 'list', 'of', 'integers'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "map(int, eval(input('enter the unfriendly numbers: ')))"}
Generated  translation
[ int ( i ) for i in re. findall ('\ \ [ ( \ \ w + ) ] 
--------- B -----------
{'intent': {'gloss': ['how', 'do', 'i', 'sort', 'a', 'list', 'of', 'dictionaries', 'by', 'values', 'of', 'the', 'dictionary', 'in', 'python', '?'], 'words': ['how', 'do', 'i', 'sort', 'a', 'list', 'of', 'dictionaries', 'by', 'values', 'of', 'the', 'dictionary', 'in', 'python', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "list_of_dicts.sort(key=operator.itemgetter('name'))"}
Generated  translation
sorted ( [ item ], key = lambda x : x ['a'], reverse = true ) 
--------- B -----------
{'intent': {'gloss': ['how', 'do', 'i', 'sort', 'a', 'list', 'of', 'dictionaries', 'by', 'values', 'of', 'the', 'dictionary', 'in', 'python', '?'], 'words': ['how', 'do', 'i', 'sort', 'a', 'list', 'of', 'dictionaries', 'by', 'values', 'of', 'the', 'dictionary', 'in', 'python', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "list_of_dicts.sort(key=operator.itemgetter('age'))"}
Generated  translation
sorted ( [ item ], key = lambda x : x ['a'], reverse = true ) 
--------- B -----------
{'intent': {'gloss': ['join', 'together', 'with', 'str0', 'elements', 'inside', 'a', 'list', 'indexed', 'with', 'str1', 'within', 'a', 'dictionary', 'var0'], 'words': ['join', 'together', 'with', 'str0', 'elements', 'inside', 'a', 'list', 'indexed', 'with', 'str1', 'within', 'a', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': ',', 'str1': 'category', 'var0': 'trans'}, 'snippet': '"""str0""".join(var0[\'str1\'])'}
Generated  translation
dict ( ( k, v ) for k, v in var0. items ( ) if v. count ('str1') ) 
--------- B -----------
{'intent': {'gloss': ['get', 'json', 'data', 'from', 'restful', 'service', 'str0'], 'words': ['get', 'json', 'data', 'from', 'restful', 'service', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'url'}, 'snippet': "json.load(urllib.request.urlopen('str0'))"}
Generated  translation
json. loads ('{ " foo " : 42, " bar " : " baz " }') ['str0'] 
--------- B -----------
{'intent': {'gloss': ['decode', 'a', 'hex', 'string', 'str0', 'to', 'utf', '-', '8', '.'], 'words': ['decode', 'a', 'hex', 'string', 'str0', 'to', 'utf', '-', '8', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', '', '', '']}, 'slot_map': {'str0': '4a4b4c'}, 'snippet': "bytes.fromhex('str0').decode('utf-8')"}
Generated  translation
str0. decode ('utf - 8 ','ignore') 
--------- B -----------
{'intent': {'gloss': ['concatenate', 'elements', 'of', 'list', 'var0', 'by', 'a', 'colon', 'str0'], 'words': ['concatenate', 'elements', 'of', 'list', 'var0', 'by', 'a', 'colon', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'b', 'str0': ':'}, 'snippet': '"""str0""".join(str(x) for x in var0)'}
Generated  translation
var0 = [ ( a + b ) for a, b in zip ( var0, str0 ) ] 
--------- B -----------
{'intent': {'gloss': ['remove', 'key', 'str0', 'from', 'dictionary', 'var0'], 'words': ['remove', 'key', 'str0', 'from', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'c', 'var0': 'd'}, 'snippet': "{i: var0[i] for i in var0 if i != 'str0'}"}
Generated  translation
var0. pop ('str0 ', none ) 
--------- B -----------
{'intent': {'gloss': ['cut', 'off', 'the', 'last', 'word', 'of', 'a', 'sentence', 'var0'], 'words': ['cut', 'off', 'the', 'last', 'word', 'of', 'a', 'sentence', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'content'}, 'snippet': '""" """.join(var0.split(\' \')[:-1])'}
Generated  translation
var0. split ('', 1 ) [ 1 ] 
--------- B -----------
{'intent': {'gloss': ['sum', 'all', 'elements', 'of', 'nested', 'list', 'var0'], 'words': ['sum', 'all', 'elements', 'of', 'nested', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': 'sum(sum(i) if isinstance(i, list) else i for i in var0)'}
Generated  translation
sum ( [ sum ( x ) for x in var0 ] ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'directory', 'str0', 'exists', 'and', 'create', 'it', 'if', 'necessary'], 'words': ['check', 'if', 'directory', 'str0', 'exists', 'and', 'create', 'it', 'if', 'necessary'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'directory'}, 'snippet': 'if not os.path.exists(str0):\n    os.makedirs(str0)'}
Generated  translation
os. path. exists ('str0') 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'dictionary', 'var0', 'of', 'key', '-', 'value', 'pairs', 'in', 'pymongo', 'cursor', 'var1'], 'words': ['get', 'a', 'dictionary', 'var0', 'of', 'key', '-', 'value', 'pairs', 'in', 'pymongo', 'cursor', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'records', 'var1': 'cursor'}, 'snippet': "var0 = dict((record['_id'], record) for record in var1)"}
Generated  translation
var0 = dict ( ( k, v ) for k, v in var1. items ( ) if v! ='var0') 
--------- B -----------
{'intent': {'gloss': ['count', 'the', 'occurrences', 'of', 'items', 'in', 'list', 'var0'], 'words': ['count', 'the', 'occurrences', 'of', 'items', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': 'dict((x, var0.count(x)) for x in set(var0))'}
Generated  translation
len ( set ( var0 ) ) = = len ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'list', 'of', 'indexes', 'of', 'rows', 'where', 'column', 'str0', 'values', 'match', 'true'], 'words': ['get', 'list', 'of', 'indexes', 'of', 'rows', 'where', 'column', 'str0', 'values', 'match', 'true'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'boolcol'}, 'snippet': "df[df['str0'] == true].index.tolist()"}
Generated  translation
[ i for i, j in enumerate ( a ) if i! = 0 ] 
--------- B -----------
{'intent': {'gloss': ['remove', 'a', 'div', 'with', 'a', 'id', 'str0', 'using', 'beautifulsoup'], 'words': ['remove', 'a', 'div', 'with', 'a', 'id', 'str0', 'using', 'beautifulsoup'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'main-content'}, 'snippet': "soup.find('div', id='str0').decompose()"}
Generated  translation
soup. find _ all ('div [ id $ ='bar'], id = beautifulsoup ) 
--------- B -----------
{'intent': {'gloss': ['filter', 'rows', 'containing', 'key', 'word', 'var0', 'in', 'column', 'var1'], 'words': ['filter', 'rows', 'containing', 'key', 'word', 'var0', 'in', 'column', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'ball', 'var1': 'ids'}, 'snippet': "df[df['var1'].str.contains('var0')]"}
Generated  translation
[ ( var0 ['var1'], var0 ['var1'] ) ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'list', 'var0', 'into', 'a', 'comma', 'separated', 'string'], 'words': ['convert', 'list', 'var0', 'into', 'a', 'comma', 'separated', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list_of_ints'}, 'snippet': '""",""".join([str(i) for i in var0])'}
Generated  translation
" " " " " ". join ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['unzip', 'list', 'var0'], 'words': ['unzip', 'list', 'var0'], 'after': [' ', ' ', '']}, 'slot_map': {'var0': 'original'}, 'snippet': 'result = [a for a, b in var0], [b for a, b in var0]'}
Generated  translation
var0. split ( ) 
--------- B -----------
{'intent': {'gloss': ['unzip', 'list', 'var0', 'and', 'return', 'a', 'generator'], 'words': ['unzip', 'list', 'var0', 'and', 'return', 'a', 'generator'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'original'}, 'snippet': 'result = (a for a, b in var0), (b for a, b in var0)'}
Generated  translation
return var0. split ( ) 
--------- B -----------
{'intent': {'gloss': ['reverse', 'the', 'keys', 'and', 'values', 'in', 'a', 'dictionary', 'var0'], 'words': ['reverse', 'the', 'keys', 'and', 'values', 'in', 'a', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mydictionary'}, 'snippet': '{i[1]: i[0] for i in list(var0.items())}'}
Generated  translation
dict ( ( v, k ) for k, v in var0. items ( ) ) 
--------- B -----------
{'intent': {'gloss': ['call', 'multiple', 'bash', 'function', '‘vasp', '’', 'and', '‘tee', 'tee', '_', 'output', '’', 'using', '‘|', '’'], 'words': ['call', 'multiple', 'bash', 'function', '‘vasp', '’', 'and', '‘tee', 'tee', '_', 'output', '’', 'using', '‘|', '’'], 'after': [' ', ' ', ' ', ' ', '', ' ', ' ', ' ', '', '', '', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "subprocess.check_call('vasp | tee tee_output', shell=true)"}
Generated  translation
call teesp ’ ‘ ( vasp ’ _ output, tee _ output ) 
--------- B -----------
{'intent': {'gloss': ['download', 'a', 'file', 'str0', 'over', 'http', 'and', 'save', 'to', 'str1'], 'words': ['download', 'a', 'file', 'str0', 'over', 'http', 'and', 'save', 'to', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'http://www.example.com/songs/mp3.mp3', 'str1': 'mp3.mp3'}, 'snippet': "urllib.request.urlretrieve('str0', 'str1')"}
Generated  translation
shutil. savefig ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['encode', 'binary', 'string', 'str0', 'to', 'base64', 'code'], 'words': ['encode', 'binary', 'string', 'str0', 'to', 'base64', 'code'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'your string'}, 'snippet': "base64.b64encode(bytes('str0', 'utf-8'))"}
Generated  translation
print ('str0 '. encode ('utf - 8') ) 
--------- B -----------
{'intent': {'gloss': ['identify', 'duplicate', 'values', 'in', 'list', 'var0'], 'words': ['identify', 'duplicate', 'values', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylist'}, 'snippet': '[k for k, v in list(counter(var0).items()) if v > 1]'}
Generated  translation
woduplicates = list ( set ( var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['subscript', 'text', 'str0', 'with', 'str1', 'as', 'subscripted', 'in', 'matplotlib', 'labels', 'for', 'arrays', 'str2', 'and', 'str3', '.'], 'words': ['subscript', 'text', 'str0', 'with', 'str1', 'as', 'subscripted', 'in', 'matplotlib', 'labels', 'for', 'arrays', 'str2', 'and', 'str3', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'h20', 'str1': '2', 'str2': 'x', 'str3': 'y'}, 'snippet': "plt.plot(str2, str3, label='$h_2o$')"}
Generated  translation
re. sub ('(? < = [ a - z ] ) \ \ 1 + ','str3 ','str3 ', str3') 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'list', 'containing', 'the', 'indexes', 'of', 'rows', 'where', 'the', 'value', 'of', 'column', 'str0', 'in', 'dataframe', 'var0', 'are', 'equal', 'to', 'true'], 'words': ['create', 'a', 'list', 'containing', 'the', 'indexes', 'of', 'rows', 'where', 'the', 'value', 'of', 'column', 'str0', 'in', 'dataframe', 'var0', 'are', 'equal', 'to', 'true'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'boolcol', 'var0': 'df'}, 'snippet': "var0.iloc[np.flatnonzero(var0['str0'])]"}
Generated  translation
[ var0 for var0 in lst if var0 ['str0'] = ='str0'] 
--------- B -----------
{'intent': {'gloss': ['replace', 'all', 'occurences', 'of', 'newlines', 'str0', 'with', 'str1', 'in', 'dataframe', 'var0'], 'words': ['replace', 'all', 'occurences', 'of', 'newlines', 'str0', 'with', 'str1', 'in', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '\n', 'str1': '<br>', 'var0': 'df'}, 'snippet': "var0.replace({'str0': 'str1'}, regex=true)"}
Generated  translation
var0. replace ('str0 ', np. nan ) 
--------- B -----------
{'intent': {'gloss': ['replace', 'all', 'occurrences', 'of', 'a', 'string', 'str0', 'by', 'string', 'str1', 'in', 'a', 'pandas', 'data', 'frame', 'var0'], 'words': ['replace', 'all', 'occurrences', 'of', 'a', 'string', 'str0', 'by', 'string', 'str1', 'in', 'a', 'pandas', 'data', 'frame', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '\n', 'str1': '<br>', 'var0': 'df'}, 'snippet': "var0.replace({'str0': 'str1'}, regex=true)"}
Generated  translation
var0. replace ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'list', 'containing', 'each', 'two', 'adjacent', 'letters', 'in', 'string', 'var0', 'as', 'its', 'elements'], 'words': ['create', 'a', 'list', 'containing', 'each', 'two', 'adjacent', 'letters', 'in', 'string', 'var0', 'as', 'its', 'elements'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'word'}, 'snippet': '[(x + y) for x, y in zip(var0, var0[1:])]'}
Generated  translation
list (''. join ('{ }, 2f [ : 3 ] ) for _ in range ( 6 ) ) 
--------- B -----------
{'intent': {'gloss': ['click', 'a', 'href', 'button', 'str0', 'with', 'selenium'], 'words': ['click', 'a', 'href', 'button', 'str0', 'with', 'selenium'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'send'}, 'snippet': "driver.find_element_by_partial_link_text('str0').click()"}
Generated  translation
driver. find _ element _ by _ css _ selector ('str0'). click ( ) 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'by', 'words', 'that', 'ends', 'with', 'str0'], 'words': ['split', 'string', 'var0', 'by', 'words', 'that', 'ends', 'with', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's', 'str0': 'd'}, 'snippet': "re.findall('\\\\b(\\\\w+)d\\\\b', var0)"}
Generated  translation
re. split ('\ \ w + ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['find', 'all', 'words', 'in', 'a', 'string', 'var0', 'that', 'start', 'with', 'the', 'str0', 'sign'], 'words': ['find', 'all', 'words', 'in', 'a', 'string', 'var0', 'that', 'start', 'with', 'the', 'str0', 'sign'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mystring', 'str0': '$'}, 'snippet': "[word for word in var0.split() if word.startswith('str0')]"}
Generated  translation
re. findall ('\ \ [ (. *? ) \ \ ] ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'unix', 'timestamp', 'str0', 'to', 'formatted', 'string', 'str1'], 'words': ['convert', 'unix', 'timestamp', 'str0', 'to', 'formatted', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '1347517370', 'str1': '%y-%m-%d %h:%m:%s'}, 'snippet': "time.strftime('str1', time.localtime(1347517370))"}
Generated  translation
" " " str0 " " ". format ('str1') 
--------- B -----------
{'intent': {'gloss': ['display', 'the', 'float', 'str0', 'as', 'a', 'percentage'], 'words': ['display', 'the', 'float', 'str0', 'as', 'a', 'percentage'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '1/3*100'}, 'snippet': "print('{0:.0f}%'.format(1.0 / 3 * 100))"}
Generated  translation
" " " { 0 :. 2f } " " ". format ( * * 3 ) 
--------- B -----------
{'intent': {'gloss': ['write', 'records', 'in', 'dataframe', 'var0', 'to', 'table', 'str0', 'in', 'schema', 'str1'], 'words': ['write', 'records', 'in', 'dataframe', 'var0', 'to', 'table', 'str0', 'in', 'schema', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'test', 'str1': 'a_schema'}, 'snippet': "var0.to_sql('str0', engine, schema='str1')"}
Generated  translation
var0. to _ csv ('str1 ', cols = ['str0'] ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'elements', 'from', 'list', 'var0', 'that', 'have', 'an', 'index', 'number', 'mentioned', 'in', 'list', 'var1'], 'words': ['remove', 'elements', 'from', 'list', 'var0', 'that', 'have', 'an', 'index', 'number', 'mentioned', 'in', 'list', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'oldlist', 'var1': 'removelist'}, 'snippet': 'newlist = [v for i, v in enumerate(var0) if i not in var1]'}
Generated  translation
[ x for x in var0 if x not in var1 ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'tuple', 'of', 'tuples', 'str0', 'to', 'tuple'], 'words': ['convert', 'tuple', 'of', 'tuples', 'str0', 'to', 'tuple'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "(('aa',), ('bb',), ('cc',))", '( str0 )': "(('aa',), ('bb',), ('cc',))"}, 'snippet': 'from functools import reduce\nreduce(lambda a, b: a + b, ( str0 ))'}
Generated  translation
tuple ( zip ( * str0 ) ) 
--------- B -----------
{'intent': {'gloss': ['python', 'pandas', ':', 'how', 'to', 'replace', 'a', 'characters', 'in', 'a', 'column', 'of', 'a', 'dataframe', '?'], 'words': ['python', 'pandas', ':', 'how', 'to', 'replace', 'a', 'characters', 'in', 'a', 'column', 'of', 'a', 'dataframe', '?'], 'after': [' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "df['range'].replace(',', '-', inplace=true)"}
Generated  translation
df. replace ('df ','' ) 
--------- B -----------
{'intent': {'gloss': ['filter', 'dataframe', 'var0', 'by', 'values', 'in', 'column', 'var1', 'that', 'appear', 'more', 'than', 'once'], 'words': ['filter', 'dataframe', 'var0', 'by', 'values', 'in', 'column', 'var1', 'that', 'appear', 'more', 'than', 'once'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'var1': 'a'}, 'snippet': "var0.groupby('var1').filter(lambda x: len(x) > 1)"}
Generated  translation
var0. loc [ var0 ['var1']. filter ( var0 ['var1'] ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'datetime', 'column', 'str0', 'of', 'pandas', 'dataframe', 'str1', 'to', 'ordinal'], 'words': ['convert', 'datetime', 'column', 'str0', 'of', 'pandas', 'dataframe', 'str1', 'to', 'ordinal'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'date', 'str1': 'df'}, 'snippet': "str1['str0'].apply(lambda x: x.toordinal())"}
Generated  translation
df ['str1'] = df ['str0']. str. apply ( lambda x : x ['str0'] ) 
--------- B -----------
{'intent': {'gloss': ['reverse', 'sort', 'list', 'of', 'dicts', 'var0', 'by', 'value', 'for', 'key', 'var1'], 'words': ['reverse', 'sort', 'list', 'of', 'dicts', 'var0', 'by', 'value', 'for', 'key', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l', 'var1': 'time'}, 'snippet': "var0 = sorted(var0, key=itemgetter('var1'), reverse=true)"}
Generated  translation
sorted ( var0, key = lambda x : var1. index ( x ['var0'] ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'rows', 'of', 'dataframe', 'var0', 'that', 'match', 'regex', 'str0'], 'words': ['get', 'rows', 'of', 'dataframe', 'var0', 'that', 'match', 'regex', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': '(hel|just)', '( str0 )': '(hel|just)'}, 'snippet': "var0.loc[var0[0].str.contains('str0')]"}
Generated  translation
var0. groupby ( ['str0 ','str0'] ). size ( ). mean ( ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'list', 'var0', 'based', 'on', 'second', 'index', 'of', 'each', 'string', 'var1'], 'words': ['sort', 'list', 'var0', 'based', 'on', 'second', 'index', 'of', 'each', 'string', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list_of_strings', 'var1': 's'}, 'snippet': "sorted(var0, key=lambda var1: var1.split(',')[1])"}
Generated  translation
sorted ( var0, key = lambda x : var1. index ( x [ 1 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'dictionaries', 'var0', 'by', 'values', 'in', 'key', 'var1', 'in', 'descending', 'order'], 'words': ['sort', 'a', 'list', 'of', 'dictionaries', 'var0', 'by', 'values', 'in', 'key', 'var1', 'in', 'descending', 'order'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l', 'var1': 'name'}, 'snippet': "newlist = sorted(var0, key=itemgetter('var1'), reverse=true)"}
Generated  translation
var0. sort ( key = lambda x : x ['var1'], reverse = true ) 
--------- B -----------
{'intent': {'gloss': ['django', 'get', 'maximum', 'value', 'associated', 'with', 'field', 'str0', 'in', 'model', 'var0'], 'words': ['django', 'get', 'maximum', 'value', 'associated', 'with', 'field', 'str0', 'in', 'model', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'added', 'var0': 'authorizedemail'}, 'snippet': "var0.objects.filter(group=group).order_by('-added')[0]"}
Generated  translation
var0. objects. order _ by ('- pet _ _ age') [ : 2 ] 
--------- B -----------
{'intent': {'gloss': ['download', 'a', 'file', 'str0', 'over', 'http'], 'words': ['download', 'a', 'file', 'str0', 'over', 'http'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'http://www.example.com/'}, 'snippet': "response = urllib.request.urlopen('str0')\nhtml = response.read()"}
Generated  translation
webbrowser. open ('str0') 
--------- B -----------
{'intent': {'gloss': ['convert', 'epoch', 'time', 'represented', 'as', 'milliseconds', 'var0', 'to', 'string', 'using', 'format', 'str0'], 'words': ['convert', 'epoch', 'time', 'represented', 'as', 'milliseconds', 'var0', 'to', 'string', 'using', 'format', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's', 'str0': '%y-%m-%d %h:%m:%s.%f'}, 'snippet': "datetime.datetime.fromtimestamp(var0).strftime('str0')"}
Generated  translation
" " " { 0 :. 2f } " " ". format ( float ( var0 [ 1 : ] ) ) 
--------- B -----------
{'intent': {'gloss': ['upload', 'file', 'using', 'ftp'], 'words': ['upload', 'file', 'using', 'ftp'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "ftp.storlines('stor ' + filename, open(filename, 'r'))"}
Generated  translation
ftp. open ('str0') 
--------- B -----------
{'intent': {'gloss': ['convert', 'list', 'of', 'lists', 'var0', 'to', 'list', 'of', 'integers'], 'words': ['convert', 'list', 'of', 'lists', 'var0', 'to', 'list', 'of', 'integers'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': "[int(''.join(str(d) for d in x)) for x in var0]"}
Generated  translation
[ int ( i ) for i in var0 ] 
--------- B -----------
{'intent': {'gloss': ['replace', 'a', 'separate', 'word', 'str0', 'by', 'str1', 'in', 'a', 'string', 'str2'], 'words': ['replace', 'a', 'separate', 'word', 'str0', 'by', 'str1', 'in', 'a', 'string', 'str2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'h3', 'str1': 'h1', 'str2': 'text'}, 'snippet': "re.sub('\\\\bh3\\\\b', 'str1', str2)"}
Generated  translation
" " " str2 " " ". replace ('str0 ','str1'). replace ('str1 ','str2') 
--------- B -----------
{'intent': {'gloss': ['insert', 'data', 'from', 'a', 'string', 'var0', 'to', 'sqlite', 'db', 'var1'], 'words': ['insert', 'data', 'from', 'a', 'string', 'var0', 'to', 'sqlite', 'db', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'testfield', 'var1': 'c'}, 'snippet': 'var1.execute("insert into test values (?, \'bar\')", (var0,))'}
Generated  translation
var1. execute ('insert or replace into master. table values ( ) ','var0') 
--------- B -----------
{'intent': {'gloss': ['remove', 'all', 'special', 'characters', ',', 'punctuation', 'and', 'spaces', 'from', 'a', 'string', 'var0', 'using', 'regex'], 'words': ['remove', 'all', 'special', 'characters', ',', 'punctuation', 'and', 'spaces', 'from', 'a', 'string', 'var0', 'using', 'regex'], 'after': [' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mystring'}, 'snippet': "re.sub('[^a-za-z0-9]+', '', var0)"}
Generated  translation
re. sub ('[ ^ \ \ w + ] ','', var0 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'list', 'containing', 'the', 'sum', 'of', 'each', 'element', 'var0', 'in', 'list', 'var1', 'plus', 'the', 'previous', 'elements'], 'words': ['get', 'a', 'list', 'containing', 'the', 'sum', 'of', 'each', 'element', 'var0', 'in', 'list', 'var1', 'plus', 'the', 'previous', 'elements'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'i', 'var1': 'l'}, 'snippet': '[sum(var1[:var0]) for var0, _ in enumerate(var1)]'}
Generated  translation
[ sum ( x ) for x in var0 ] 
--------- B -----------
{'intent': {'gloss': ['beautifulsoup', 'find', 'all', 'str0', 'elements', 'in', 'html', 'string', 'var0', 'with', 'class', 'of', 'str1'], 'words': ['beautifulsoup', 'find', 'all', 'str0', 'elements', 'in', 'html', 'string', 'var0', 'with', 'class', 'of', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'span', 'var0': 'soup', 'str1': 'stargryb sp'}, 'snippet': "var0.find_all('str0', {'class': 'str1'})"}
Generated  translation
soup. findall ( attrs = {'str0':'str1'} ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'duplicate', 'elements', 'from', 'list', 'str0'], 'words': ['remove', 'duplicate', 'elements', 'from', 'list', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'l'}, 'snippet': 'list(dict((x[0], x) for x in str0).values())'}
Generated  translation
[ k for k, g in itertools. groupby ( [ str0 ] ) ] 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'words': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'testlist'}, 'snippet': 'for i in [i for i, x in enumerate(var0) if x == 1]:\n    pass'}
Generated  translation
var0. position ( 1 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'words': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'testlist'}, 'snippet': 'for i in (i for i, x in enumerate(var0) if x == 1):\n    pass'}
Generated  translation
var0. position ( 1 ) 
--------- B -----------
{'intent': {'gloss': ['python', 'split', 'a', 'string', 'using', 'regex'], 'words': ['python', 'split', 'a', 'string', 'using', 'regex'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "re.findall('(.+?):(.+?)\\\\b ?', text)"}
Generated  translation
re. split ('\ \ w + ','str1') 
--------- B -----------
{'intent': {'gloss': ['get', 'all', 'text', 'that', 'is', 'not', 'enclosed', 'within', 'square', 'brackets', 'in', 'string', 'var0'], 'words': ['get', 'all', 'text', 'that', 'is', 'not', 'enclosed', 'within', 'square', 'brackets', 'in', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'example_str'}, 'snippet': "re.findall('(.*?)\\\\[.*?\\\\]', var0)"}
Generated  translation
re. sub ('\ \ [. *? \ \ ] ','', var0 ) 
--------- B -----------
{'intent': {'gloss': ['read', 'a', 'file', 'str0', 'into', 'a', 'list', 'var0'], 'words': ['read', 'a', 'file', 'str0', 'into', 'a', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'c:/name/mydocuments/numbers', 'var0': 'data'}, 'snippet': "var0 = [line.strip() for line in open('str0', 'r')]"}
Generated  translation
var0 = open ('str0'). read ( ) 
--------- B -----------
{'intent': {'gloss': ['loop', 'through', 'the', 'ip', 'address', 'range', 'str0'], 'words': ['loop', 'through', 'the', 'ip', 'address', 'range', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '192.168.x.x'}, 'snippet': 'for i, j in product(list(range(256)), list(range(256))):\n    pass'}
Generated  translation
print ('str0 '. join ( map ( str0 ) ) ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'last', 'comma', 'character', 'str0', 'in', 'string', 'var0'], 'words': ['remove', 'last', 'comma', 'character', 'str0', 'in', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': ',', 'var0': 's'}, 'snippet': '"""""".join(var0.rsplit(\'str0\', 1))'}
Generated  translation
var0 = var0. rstrip ('\ n') 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'dictionary', 'var0', 'based', 'on', 'key', 'var1', 'in', 'descending', 'order'], 'words': ['sort', 'a', 'list', 'of', 'dictionary', 'var0', 'based', 'on', 'key', 'var1', 'in', 'descending', 'order'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l', 'var1': 'time'}, 'snippet': "var0 = sorted(var0, key=lambda a: a['var1'], reverse=true)"}
Generated  translation
sorted ( var0, key = lambda x : x [ 1 ], reverse = true ) 
--------- B -----------
{'intent': {'gloss': ['find', 'the', 'string', 'in', 'var0', 'between', 'two', 'special', 'characters', 'str0', 'and', 'str1'], 'words': ['find', 'the', 'string', 'in', 'var0', 'between', 'two', 'special', 'characters', 'str0', 'and', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'your_string', 'str0': '[', 'str1': ']'}, 'snippet': "re.search('\\\\[(.*)\\\\]', var0).group(1)"}
Generated  translation
re. findall ('\ \ b (? : b + a ) + b + \ \ b ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'integer', 'var0', 'into', 'an', 'unassigned', 'integer'], 'words': ['convert', 'integer', 'var0', 'into', 'an', 'unassigned', 'integer'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'number'}, 'snippet': "struct.unpack('h', struct.pack('h', var0))"}
Generated  translation
struct. unpack ('> q ', var0 ) [ 0 ] 
--------- B -----------
{'intent': {'gloss': ['sum', 'elements', 'at', 'the', 'same', 'index', 'in', 'list', 'var0'], 'words': ['sum', 'elements', 'at', 'the', 'same', 'index', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'data'}, 'snippet': '[[sum(item) for item in zip(*items)] for items in zip(*var0)]'}
Generated  translation
map ( sum, zip ( * var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'rid', 'of', 'none', 'values', 'in', 'dictionary', 'var0'], 'words': ['get', 'rid', 'of', 'none', 'values', 'in', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'kwargs'}, 'snippet': 'res = {k: v for k, v in list(var0.items()) if v is not none}'}
Generated  translation
none ( var0. replace ('','' ) ) 
--------- B -----------
{'intent': {'gloss': ['merge', 'a', 'nested', 'dictionary', 'var0', 'into', 'a', 'flat', 'dictionary', 'by', 'concatenating', 'nested', 'values', 'with', 'the', 'same', 'key', 'var1'], 'words': ['merge', 'a', 'nested', 'dictionary', 'var0', 'into', 'a', 'flat', 'dictionary', 'by', 'concatenating', 'nested', 'values', 'with', 'the', 'same', 'key', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'dicts', 'var1': 'k'}, 'snippet': '{var1: [d[var1] for d in var0] for var1 in var0[0]}'}
Generated  translation
dict ( ( k, v ) for k, v in var0. items ( ) if v ) 
--------- B -----------
{'intent': {'gloss': ['loop', 'over', 'files', 'in', 'directory', 'var0'], 'words': ['loop', 'over', 'files', 'in', 'directory', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'source'}, 'snippet': 'for root, dirs, filenames in os.walk(var0):\n    for f in filenames:\n        pass'}
Generated  translation
for dirname, dirnames, filenames in os. walk ( var0 ) : return var0 
--------- B -----------
{'intent': {'gloss': ['join', 'each', 'element', 'in', 'array', 'var0', 'with', 'element', 'at', 'the', 'same', 'index', 'in', 'array', 'var1', 'as', 'a', 'tuple'], 'words': ['join', 'each', 'element', 'in', 'array', 'var0', 'with', 'element', 'at', 'the', 'same', 'index', 'in', 'array', 'var1', 'as', 'a', 'tuple'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'b'}, 'snippet': 'np.array([zip(x, y) for x, y in zip(var0, var1)])'}
Generated  translation
j = ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['extract', 'brackets', 'from', 'string', 'var0'], 'words': ['extract', 'brackets', 'from', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': "brackets = re.sub('[^(){}[\\\\]]', '', var0)"}
Generated  translation
re. findall ('\ \ [ (. *? ) \ \ ] ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['append', 'a', 'tuple', 'of', 'elements', 'from', 'list', 'var0', 'with', 'indexes', 'str0', 'to', 'list', 'var1'], 'words': ['append', 'a', 'tuple', 'of', 'elements', 'from', 'list', 'var0', 'with', 'indexes', 'str0', 'to', 'list', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'str0': '[0][0] [0][2]', 'var1': 'b', '[ str0 ]': '[0][0] [0][2]'}, 'snippet': 'var1.append((var0[0][0], var0[0][2]))'}
Generated  translation
[ var0 for var0 in var1 ] 
--------- B -----------
{'intent': {'gloss': ['reverse', 'sort', 'counter', 'var0', 'by', 'value'], 'words': ['reverse', 'sort', 'counter', 'var0', 'by', 'value'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'sorted(list(var0.items()), key=lambda pair: pair[1], reverse=true)'}
Generated  translation
sorted ( var0, key = itemgetter ( 1 ), reverse = true ) 
--------- B -----------
{'intent': {'gloss': ['add', 'a', 'column', 'str0', 'with', 'value', 'str1', 'to', 'dataframe', 'var0'], 'words': ['add', 'a', 'column', 'str0', 'with', 'value', 'str1', 'to', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'day', 'str1': 'sat', 'var0': 'df'}, 'snippet': "var0.xs('str1', level='str0', drop_level=false)"}
Generated  translation
var0 ['str0'] = var0 ['str1']. str. apply ( lambda x : x ['str0'] ) 
--------- B -----------
{'intent': {'gloss': ['sorting', 'a', 'list', 'of', 'lists', 'in', 'python'], 'words': ['sorting', 'a', 'list', 'of', 'lists', 'in', 'python'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'c2.sort(key=lambda row: (row[2], row[1], row[0]))'}
Generated  translation
[ sorted ( item ) for item in item ] 
--------- B -----------
{'intent': {'gloss': ['get', 'an', 'array', 'of', 'the', 'mean', 'of', 'each', 'two', 'consecutive', 'values', 'in', 'numpy', 'array', 'var0'], 'words': ['get', 'an', 'array', 'of', 'the', 'mean', 'of', 'each', 'two', 'consecutive', 'values', 'in', 'numpy', 'array', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'var0[:-1] + (var0[1:] - var0[:-1]) / 2'}
Generated  translation
np. zeros ( np. arange ( len ( var0 ) ), var0. mean ( axis = 1 ) ) 
--------- B -----------
{'intent': {'gloss': ['how', 'to', 'sort', 'a', 'dataframe', 'by', 'the', 'ocurrences', 'in', 'a', 'column', 'in', 'python', '(', 'pandas', ')'], 'words': ['how', 'to', 'sort', 'a', 'dataframe', 'by', 'the', 'ocurrences', 'in', 'a', 'column', 'in', 'python', '(', 'pandas', ')'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '']}, 'slot_map': {}, 'snippet': "df.groupby('prots').sum().sort('scores', ascending=false)"}
Generated  translation
df. sort ( df. columns, axis = 1, ascending = false ) 
--------- B -----------
{'intent': {'gloss': ['python', 'regex', 'to', 'find', 'all', 'numbers', 'and', 'dots', 'from', 'str0'], 'words': ['python', 'regex', 'to', 'find', 'all', 'numbers', 'and', 'dots', 'from', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'text'}, 'snippet': "re.findall('test([\\\\d.]*\\\\d+)', str0)"}
Generated  translation
re. findall ('\ \ d + (? = [ ^ [ ] + ) ','str0') 
--------- B -----------
{'intent': {'gloss': ['get', 'rid', 'of', 'none', 'values', 'in', 'dictionary', 'var0'], 'words': ['get', 'rid', 'of', 'none', 'values', 'in', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'kwargs'}, 'snippet': 'res = dict((k, v) for k, v in var0.items() if v is not none)'}
Generated  translation
none ( var0. replace ('','' ) ) 
--------- B -----------
{'intent': {'gloss': ['argparse', 'add', 'argument', 'with', 'flag', 'str0', 'and', 'version', 'action', 'of', 'str1', 'to', 'parser', 'var0'], 'words': ['argparse', 'add', 'argument', 'with', 'flag', 'str0', 'and', 'version', 'action', 'of', 'str1', 'to', 'parser', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '--version', 'str1': '%(prog)s 2.0', 'var0': 'parser'}, 'snippet': "var0.add_argument('str0', action='version', version='str1')"}
Generated  translation
parser. add _ argument ('str0 ', nargs ='str1') 
--------- B -----------
{'intent': {'gloss': ['multiple', 'each', 'value', 'by', 'str0', 'for', 'all', 'keys', 'in', 'a', 'dictionary', 'var0'], 'words': ['multiple', 'each', 'value', 'by', 'str0', 'for', 'all', 'keys', 'in', 'a', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '2', 'var0': 'my_dict'}, 'snippet': 'var0.update((x, y * 2) for x, y in list(var0.items()))'}
Generated  translation
dict ( ( k, v ) for k, v in var0. items ( ) if v. items ( ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'date', '7', 'days', 'before', 'the', 'current', 'date'], 'words': ['get', 'the', 'date', '7', 'days', 'before', 'the', 'current', 'date'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': '(datetime.datetime.now() - datetime.timedelta(days=7)).date()'}
Generated  translation
print ( ( datetime. date. today ( ) + datetime. timedelta ( 6 * 365 / 12 ) ). isoformat ( ) ) 
--------- B -----------
{'intent': {'gloss': ['combine', 'list', 'of', 'dictionaries', 'var0', 'with', 'the', 'same', 'keys', 'in', 'each', 'list', 'to', 'a', 'single', 'dictionary'], 'words': ['combine', 'list', 'of', 'dictionaries', 'var0', 'with', 'the', 'same', 'keys', 'in', 'each', 'list', 'to', 'a', 'single', 'dictionary'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'dicts'}, 'snippet': 'dict((k, [d[k] for d in var0]) for k in var0[0])'}
Generated  translation
dict ( ( k, v ) for d in var0 for k, v in list ( d. items ( ) ) ) 
--------- B -----------
{'intent': {'gloss': ['find', 'the', 'index', 'of', 'a', 'list', 'with', 'the', 'first', 'element', 'equal', 'to', 'str0', 'within', 'the', 'list', 'of', 'lists', 'var0'], 'words': ['find', 'the', 'index', 'of', 'a', 'list', 'with', 'the', 'first', 'element', 'equal', 'to', 'str0', 'within', 'the', 'list', 'of', 'lists', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '332', 'var0': 'thelist'}, 'snippet': "[index for index, item in enumerate(var0) if item[0] == 'str0']"}
Generated  translation
[ item for item in var0 if item [ 0 ] = = 1 ] 
--------- B -----------
{'intent': {'gloss': ['use', 'str0', 'operator', 'to', 'print', 'variable', 'values', 'var0', 'inside', 'a', 'string'], 'words': ['use', 'str0', 'operator', 'to', 'print', 'variable', 'values', 'var0', 'inside', 'a', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '%s', 'var0': 'str1'}, 'snippet': "'first string is: %s, second one is: %s' % (var0, 'geo.tif')"}
Generated  translation
print ('value is "'+ str ( str0 ) +'"') 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'pandas', 'series', 'var0', 'into', 'a', 'pandas', 'dataframe', 'var1', 'with', 'columns', 'var2', 'and', 'var3'], 'words': ['convert', 'a', 'pandas', 'series', 'var0', 'into', 'a', 'pandas', 'dataframe', 'var1', 'with', 'columns', 'var2', 'and', 'var3'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'sf', 'var1': 'df', 'var2': 'email', 'var3': 'list'}, 'snippet': "pd.dataframe({'var2': var0.index, 'var3': var0.values})"}
Generated  translation
var1. groupby ( ['var0 ','var2'] ). agg ( lambda x : x ['var3'] ) 
--------- B -----------
{'intent': {'gloss': ['django', 'set', 'default', 'value', 'of', 'field', 'var0', 'equal', 'to', 'str0'], 'words': ['django', 'set', 'default', 'value', 'of', 'field', 'var0', 'equal', 'to', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'b', 'str0': '0000000'}, 'snippet': "var0 = models.charfield(max_length=7, default='str0', editable=false)"}
Generated  translation
var0. set _ clim ( vmin = 0, vmax = 15 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'whatever', 'is', 'between', 'parentheses', 'as', 'a', 'single', 'match', ',', 'and', 'any', 'char', 'outside', 'as', 'an', 'individual', 'match', 'in', 'string', 'str0'], 'words': ['get', 'whatever', 'is', 'between', 'parentheses', 'as', 'a', 'single', 'match', ',', 'and', 'any', 'char', 'outside', 'as', 'an', 'individual', 'match', 'in', 'string', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '(zyx)bc'}, 'snippet': "re.findall('\\\\(.+?\\\\)|\\\\w', 'str0')"}
Generated  translation
re. findall ('\ \ [ (. *? ) \ \ ] ','str0') 
--------- B -----------
{'intent': {'gloss': ['match', 'multiple', 'regex', 'patterns', 'with', 'the', 'alternation', 'operator', 'str0', 'in', 'a', 'string', 'str1'], 'words': ['match', 'multiple', 'regex', 'patterns', 'with', 'the', 'alternation', 'operator', 'str0', 'in', 'a', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '|', 'str1': '(zyx)bc'}, 'snippet': "re.findall('\\\\(.*?\\\\)|\\\\w', 'str1')"}
Generated  translation
re. match ('str1 ','str0') 
--------- B -----------
{'intent': {'gloss': ['find', 'the', 'index', 'of', 'an', 'element', 'str0', 'in', 'a', 'list', 'var0'], 'words': ['find', 'the', 'index', 'of', 'an', 'element', 'str0', 'in', 'a', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'msft', 'var0': 'stocks_list'}, 'snippet': "[x for x in range(len(var0)) if var0[x] == 'str0']"}
Generated  translation
var0. index ('str0') 
--------- B -----------
{'intent': {'gloss': ['send', 'multipart', 'encoded', 'file', 'var0', 'to', 'url', 'var1', 'with', 'headers', 'var2', 'and', 'metadata', 'var3'], 'words': ['send', 'multipart', 'encoded', 'file', 'var0', 'to', 'url', 'var1', 'with', 'headers', 'var2', 'and', 'metadata', 'var3'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'files', 'var1': 'url', 'var2': 'headers', 'var3': 'data'}, 'snippet': 'r = requests.post(var1, var0=var0, var2=var2, var3=var3)'}
Generated  translation
var1 = pd. read _ csv ('var0 ', headers = {'var3':'var3'} ) 
--------- B -----------
{'intent': {'gloss': ['numpy', 'concatenate', 'two', 'arrays', 'var0', 'and', 'var1', 'along', 'the', 'first', 'axis'], 'words': ['numpy', 'concatenate', 'two', 'arrays', 'var0', 'and', 'var1', 'along', 'the', 'first', 'axis'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'b'}, 'snippet': 'c = np.r_[var0[(none), :], var1[(none), :]]'}
Generated  translation
numpy. concatenate ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'list', 'of', 'lists', 'var0', 'into', 'a', 'flat', 'list'], 'words': ['convert', 'list', 'of', 'lists', 'var0', 'into', 'a', 'flat', 'list'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'data'}, 'snippet': '[y for x in var0 for y in (x if isinstance(x, list) else [x])]'}
Generated  translation
[ y for x in var0 for y in x ] 
--------- B -----------
{'intent': {'gloss': ['find', 'all', 'numbers', 'and', 'dots', 'from', 'a', 'string', 'var0', 'using', 'regex'], 'words': ['find', 'all', 'numbers', 'and', 'dots', 'from', 'a', 'string', 'var0', 'using', 'regex'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'text'}, 'snippet': "re.findall('test([0-9.]*[0-9]+)', var0)"}
Generated  translation
re. findall ('\ \ d + \ \ w + | \ \ d + ) ','var0') 
--------- B -----------
{'intent': {'gloss': ['run', 'script', 'str0', 'with', 'argument', 'str1', 'on', 'terminal', 'using', 'python', 'executable'], 'words': ['run', 'script', 'str0', 'with', 'argument', 'str1', 'on', 'terminal', 'using', 'python', 'executable'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'hello.py', 'str1': 'htmlfilename.htm'}, 'snippet': "subprocess.call(['python.exe', 'str0', 'str1'])"}
Generated  translation
system ('str0') 
--------- B -----------
{'intent': {'gloss': ['sum', 'columns', 'of', 'a', 'list', 'var0'], 'words': ['sum', 'columns', 'of', 'a', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'array'}, 'snippet': '[sum(row[i] for row in var0) for i in range(len(var0[0]))]'}
Generated  translation
sum ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['insert', 'a', 'str0', 'value', 'into', 'a', 'sqlite3', 'table', '.'], 'words': ['insert', 'a', 'str0', 'value', 'into', 'a', 'sqlite3', 'table', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'none'}, 'snippet': 'db.execute("insert into present values(\'test2\', ?, 10)", (str0,))'}
Generated  translation
cursor. execute ('insert into table values ( % s, % s, % s ) ', ( var0, ) ) 
--------- B -----------
{'intent': {'gloss': ['using', '%', 'f', 'with', 'strftime', '(', ')', 'in', 'python', 'to', 'get', 'microseconds'], 'words': ['using', '%', 'f', 'with', 'strftime', '(', ')', 'in', 'python', 'to', 'get', 'microseconds'], 'after': [' ', '', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "datetime.datetime.now().strftime('%h:%m:%s.%f')"}
Generated  translation
time. mkrftime ('% l : % m') 
--------- B -----------
{'intent': {'gloss': ['get', 'digits', 'only', 'from', 'a', 'string', 'var0', 'using', 'lambda', 'function'], 'words': ['get', 'digits', 'only', 'from', 'a', 'string', 'var0', 'using', 'lambda', 'function'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'aas30dsa20'}, 'snippet': '"""""".join([x for x in \'var0\' if x.isdigit()])'}
Generated  translation
[ int ( x ) for x in str ( var0 ) ] 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'filename', 'without', 'the', 'extension', 'from', 'file', 'str0'], 'words': ['get', 'the', 'filename', 'without', 'the', 'extension', 'from', 'file', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'hemanth.txt'}, 'snippet': "print(os.path.splitext(os.path.basename('str0'))[0])"}
Generated  translation
os. path. dirname ( os. path. abspath ( str0 ) ) 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'dictionary', 'by', 'adding', 'each', 'two', 'adjacent', 'elements', 'in', 'tuple', 'var0', 'as', 'key', '/', 'value', 'pair', 'to', 'it'], 'words': ['create', 'a', 'dictionary', 'by', 'adding', 'each', 'two', 'adjacent', 'elements', 'in', 'tuple', 'var0', 'as', 'key', '/', 'value', 'pair', 'to', 'it'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'dict(var0[i:i + 2] for i in range(0, len(var0), 2))'}
Generated  translation
dict ( zip ( var0 [ : : 2 ], var0 [ 1 : : 2 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['extract', 'a', 'url', 'from', 'a', 'string', 'var0'], 'words': ['extract', 'a', 'url', 'from', 'a', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mystring'}, 'snippet': "print(re.findall('(https?://[^\\\\s]+)', var0))"}
Generated  translation
re. split ('\ \ w + ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'elements', 'of', 'each', 'tuple', 'in', 'list', 'var0', 'into', 'a', 'string', 'separated', 'by', 'character', 'str0'], 'words': ['convert', 'elements', 'of', 'each', 'tuple', 'in', 'list', 'var0', 'into', 'a', 'string', 'separated', 'by', 'character', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l', 'str0': '@'}, 'snippet': '""" """.join([(\'%d@%d\' % t) for t in var0])'}
Generated  translation
" " " " " ". join ( [ str0 ] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'words': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'testlist'}, 'snippet': 'gen = (i for i, x in enumerate(var0) if x == 1)\nfor i in gen:\n    pass'}
Generated  translation
var0. position ( 1 ) 
--------- B -----------
{'intent': {'gloss': ['double', 'backslash', 'escape', 'all', 'double', 'quotes', 'in', 'string', 'var0'], 'words': ['double', 'backslash', 'escape', 'all', 'double', 'quotes', 'in', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': 'print(var0.encode(\'unicode-escape\').replace(\'"\', \'\\\\"\'))'}
Generated  translation
re. sub ('\ \ * \ \ * | \ \ w * ','', var0 ) 
--------- B -----------
{'intent': {'gloss': ['how', 'to', 'delete', 'all', 'instances', 'of', 'a', 'character', 'in', 'a', 'string', 'in', 'python', '?'], 'words': ['how', 'to', 'delete', 'all', 'instances', 'of', 'a', 'character', 'in', 'a', 'string', 'in', 'python', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': '"""""".join([char for char in \'it is icy\' if char != \'i\'])'}
Generated  translation
re. sub ('[ ^ a - za - z ] ','','', text ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'dictionary', 'var0', 'first', 'by', 'key', 'var1', 'and', 'then', 'by', 'var2'], 'words': ['sort', 'a', 'list', 'of', 'dictionary', 'var0', 'first', 'by', 'key', 'var1', 'and', 'then', 'by', 'var2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list', 'var1': 'points', 'var2': 'time'}, 'snippet': "var0.sort(key=lambda item: (item['var1'], item['var2']))"}
Generated  translation
sorted ( var0, key = lambda x : ( x [ 1 ], x [ 0 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['format', 'number', 'of', 'spaces', 'between', 'strings', 'var0', ',', 'str0', 'and', 'str1', 'to', 'be', 'str2'], 'words': ['format', 'number', 'of', 'spaces', 'between', 'strings', 'var0', ',', 'str0', 'and', 'str1', 'to', 'be', 'str2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'python', 'str0': ':', 'str1': 'very good', 'str2': '20'}, 'snippet': "print('%*s : %*s' % (20, 'var0', 20, 'str1'))"}
Generated  translation
" " " str2 " " ". format ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['multiply', 'a', 'matrix', 'var0', 'with', 'a', '3d', 'tensor', 'var1', 'in', 'scipy'], 'words': ['multiply', 'a', 'matrix', 'var0', 'with', 'a', '3d', 'tensor', 'var1', 'in', 'scipy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'p', 'var1': 't'}, 'snippet': 'scipy.tensordot(var0, var1, axes=[1, 1]).swapaxes(0, 1)'}
Generated  translation
np. outer ( var0, var1 ). reshape ( var0. size [ : : - 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'scalar', 'var0', 'to', 'array'], 'words': ['convert', 'scalar', 'var0', 'to', 'array'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'var0 = np.asarray(var0).reshape(1, -1)[(0), :]'}
Generated  translation
np. array ( var0. _ data ) 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'list', 'of', 'pairs', 'from', 'a', 'string', 'var0', 'using', 'lambda', 'function'], 'words': ['get', 'a', 'list', 'of', 'pairs', 'from', 'a', 'string', 'var0', 'using', 'lambda', 'function'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'word'}, 'snippet': 'list(map(lambda x, y: x + y, var0[:-1], var0[1:]))'}
Generated  translation
[ x for x in var0 if x! = 0 ] 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'datetimeindex', 'containing', '13', 'periods', 'of', 'the', 'second', 'friday', 'of', 'each', 'month', 'starting', 'from', 'date', 'str0'], 'words': ['create', 'a', 'datetimeindex', 'containing', '13', 'periods', 'of', 'the', 'second', 'friday', 'of', 'each', 'month', 'starting', 'from', 'date', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '2016-01-01'}, 'snippet': "pd.date_range('str0', freq='wom-2fri', periods=13)"}
Generated  translation
datetime. datetime. strptime ('str0 ','% b % d, % y'). strftime ('% l') 
--------- B -----------
{'intent': {'gloss': ['create', 'list', 'of', 'values', 'from', 'dictionary', 'var0', 'that', 'have', 'a', 'key', 'that', 'starts', 'with', 'str0'], 'words': ['create', 'list', 'of', 'values', 'from', 'dictionary', 'var0', 'that', 'have', 'a', 'key', 'that', 'starts', 'with', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'dict1', 'str0': 'emp$$'}, 'snippet': "[value for key, value in list(var0.items()) if key.startswith('str0')]"}
Generated  translation
[ value for key, value in list ( var0. items ( ) ) if'str0'in key. lower ( ) ] 
--------- B -----------
{'intent': {'gloss': ['count', 'most', 'frequent', '100', 'words', 'in', 'column', 'str0', 'of', 'dataframe', 'var0'], 'words': ['count', 'most', 'frequent', '100', 'words', 'in', 'column', 'str0', 'of', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'text', 'var0': 'df'}, 'snippet': "counter(' '.join(var0['str0']).split()).most_common(100)"}
Generated  translation
var0. groupby ('str0'). size ( ). groupby ( level = 0 ). size ( ). reset _ index ( ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'current', 'directory', 'of', 'a', 'script'], 'words': ['get', 'the', 'current', 'directory', 'of', 'a', 'script'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'os.path.basename(os.path.dirname(os.path.realpath(__file__)))'}
Generated  translation
os. path. dirname ( os. path. abspath ( _ _ file _ _ ) ) 
--------- B -----------
{'intent': {'gloss': ['sum', 'integers', 'contained', 'in', 'strings', 'in', 'list', 'str0'], 'words': ['sum', 'integers', 'contained', 'in', 'strings', 'in', 'list', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "['', '3.4', '', '', '1.0']", '[ str0 ]': "['', '3.4', '', '', '1.0']"}, 'snippet': 'sum(int(float(item)) for item in [_f for _f in [ str0 ] if\n    _f])'}
Generated  translation
[ sum ( map ( int, s ) ) for s in str0 ] 
--------- B -----------
{'intent': {'gloss': ['write', 'line', 'str0', 'to', 'file', 'var0'], 'words': ['write', 'line', 'str0', 'to', 'file', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'hi there', 'var0': 'myfile'}, 'snippet': "f = open('var0', 'w')\nf.write('hi there\\n')\nf.close()"}
Generated  translation
var0. write ('str0') 
--------- B -----------
{'intent': {'gloss': ['get', 'all', 'urls', 'within', 'text', 'var0'], 'words': ['get', 'all', 'urls', 'within', 'text', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': 're.findall(\'"(http.*?)"\', var0, re.multiline | re.dotall)'}
Generated  translation
re. sub ('\ \ w + ','', var0 ) 
--------- B -----------
{'intent': {'gloss': ['match', 'urls', 'whose', 'domain', 'doesn', "'", 't', 'start', 'with', 'var0', 'from', 'string', 'var1', 'using', 'regex'], 'words': ['match', 'urls', 'whose', 'domain', 'doesn', "'", 't', 'start', 'with', 'var0', 'from', 'string', 'var1', 'using', 'regex'], 'after': [' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 't', 'var1': 'document'}, 'snippet': 're.findall(\'http://[^t][^s"]+\\\\.html\', var1)'}
Generated  translation
re. compile ('\ \ w + ','var1'). start ( ) 
--------- B -----------
{'intent': {'gloss': ['format', 'a', 'datetime', 'string', 'var0', 'to', 'extract', 'date', 'only'], 'words': ['format', 'a', 'datetime', 'string', 'var0', 'to', 'extract', 'date', 'only'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'when'}, 'snippet': "then = datetime.datetime.strptime(var0, '%y-%m-%d').date()"}
Generated  translation
datetime. datetime. strptime ('january 11, 2010 ','% y - % m - % d % h : % m : % s') 
--------- B -----------
{'intent': {'gloss': ['convert', 'hex', 'string', 'str0', 'to', 'a', 'float', 'number'], 'words': ['convert', 'hex', 'string', 'str0', 'to', 'a', 'float', 'number'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '470fc614'}, 'snippet': "struct.unpack('!f', 'str0'.decode('hex'))[0]"}
Generated  translation
float ( int ('str0 ', 0 ) ) 
--------- B -----------
{'intent': {'gloss': ['reverse', 'the', 'order', 'of', 'words', ',', 'delimited', 'by', 'str0', ',', 'in', 'string', 'var0'], 'words': ['reverse', 'the', 'order', 'of', 'words', ',', 'delimited', 'by', 'str0', ',', 'in', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', '', ' ', ' ', ' ', '', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '.', 'var0': 's'}, 'snippet': '"""str0""".join(var0.split(\'str0\')[::-1])'}
Generated  translation
var0. decode ('str0'). encode ('utf - 8') 
--------- B -----------
{'intent': {'gloss': ['parse', 'milliseconds', 'epoch', 'time', 'str0', 'to', 'format', 'str1'], 'words': ['parse', 'milliseconds', 'epoch', 'time', 'str0', 'to', 'format', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '1236472051807', 'str1': '%y-%m-%d %h:%m:%s'}, 'snippet': "time.strftime('str1', time.gmtime(1236472051807 / 1000.0))"}
Generated  translation
datetime. strptime ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['add', 'one', 'to', 'the', 'hidden', 'web', 'element', 'with', 'id', 'str0', 'with', 'selenium', 'python', 'script'], 'words': ['add', 'one', 'to', 'the', 'hidden', 'web', 'element', 'with', 'id', 'str0', 'with', 'selenium', 'python', 'script'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'xyz'}, 'snippet': 'browser.execute_script("document.getelementbyid(\'xyz\').value+=\'1\'")'}
Generated  translation
driver. find _ element _ by _ xpath ('/ / option [ @ value ='" + "'] " ) 
--------- B -----------
{'intent': {'gloss': ['format', 'the', 'variables', 'str0', 'and', 'str1', 'using', 'string', 'formatting'], 'words': ['format', 'the', 'variables', 'str0', 'and', 'str1', 'using', 'string', 'formatting'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'self.goals', 'str1': 'self.penalties'}, 'snippet': '"""({:d} goals, ${:d})""".format(self.goals, self.penalties)'}
Generated  translation
" " " { 0 } { 1 } " " ". format ( 10, 20 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'list', 'of', 'lists', 'var0', 'to', 'list', 'of', 'integers'], 'words': ['convert', 'a', 'list', 'of', 'lists', 'var0', 'to', 'list', 'of', 'integers'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': "var0 = [int(''.join([str(y) for y in x])) for x in var0]"}
Generated  translation
[ int ( i ) for i in var0 ] 
--------- B -----------
{'intent': {'gloss': ['update', 'datetime', 'field', 'in', 'var0', 'to', 'be', 'the', 'existing', 'var1', 'plus', '100', 'years'], 'words': ['update', 'datetime', 'field', 'in', 'var0', 'to', 'be', 'the', 'existing', 'var1', 'plus', '100', 'years'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mymodel', 'var1': 'timestamp'}, 'snippet': "var0.objects.update(var1=f('var1') + timedelta(days=36524.25))"}
Generated  translation
var0. update ( var1 ). update ( {'var0': 100 } ) 
--------- B -----------
{'intent': {'gloss': ['determine', 'number', 'of', 'files', 'on', 'a', 'drive', 'with', 'python'], 'words': ['determine', 'number', 'of', 'files', 'on', 'a', 'drive', 'with', 'python'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "os.statvfs('/').f_files - os.statvfs('/').f_ffree"}
Generated  translation
r = requests. head ('dir') 
--------- B -----------
{'intent': {'gloss': ['encode', 'a', 'latin', 'character', 'in', 'string', 'str0', 'properly'], 'words': ['encode', 'a', 'latin', 'character', 'in', 'string', 'str0', 'properly'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'sopetÃ³n'}, 'snippet': '"""str0""".encode(\'latin-1\').decode(\'utf-8\')'}
Generated  translation
" " " str0 " " ". encode ('latin - 1') 
--------- B -----------
{'intent': {'gloss': ['find', 'octal', 'characters', 'matches', 'from', 'a', 'string', 'var0', 'using', 'regex'], 'words': ['find', 'octal', 'characters', 'matches', 'from', 'a', 'string', 'var0', 'using', 'regex'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'str'}, 'snippet': 'print(re.findall("\'\\\\\\\\[0-7]{1,3}\'", var0))'}
Generated  translation
re. findall ('(? = ( \ \ w \ \ w ) ) ','var0') 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'list', 'in', 'first', 'column', 'into', 'multiple', 'columns', 'keeping', 'other', 'columns', 'as', 'well', 'in', 'pandas', 'data', 'frame'], 'words': ['split', 'a', 'list', 'in', 'first', 'column', 'into', 'multiple', 'columns', 'keeping', 'other', 'columns', 'as', 'well', 'in', 'pandas', 'data', 'frame'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'pd.concat([df[0].apply(pd.series), df[1]], axis=1)'}
Generated  translation
df. groupby ('stock ','str1') ['same2']. apply ( lambda x : x ['y'], axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'new', 'column', 'var0', 'in', 'pandas', 'data', 'frame', 'var1', 'based', 'on', 'the', 'values', 'in', 'column', 'var2'], 'words': ['create', 'a', 'new', 'column', 'var0', 'in', 'pandas', 'data', 'frame', 'var1', 'based', 'on', 'the', 'values', 'in', 'column', 'var2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'weekday', 'var1': 'data', 'var2': 'my_dt'}, 'snippet': "var1['var0'] = var1['var2'].apply(lambda x: x.var0())"}
Generated  translation
var1 ['var0'] = var1 ['var2'] / var1 ['var2'] 
--------- B -----------
{'intent': {'gloss': ['delete', 'all', 'occurrences', 'of', 'character', 'str0', 'in', 'string', 'str1'], 'words': ['delete', 'all', 'occurrences', 'of', 'character', 'str0', 'in', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'i', 'str1': 'it is icy'}, 'snippet': '"""""".join([char for char in \'str1\' if char != \'str0\'])'}
Generated  translation
re. sub ('(. ) ','\ \ 1 \ \ 1 ','str0') 
--------- B -----------
{'intent': {'gloss': ['find', 'all', 'files', 'in', 'directory', 'str0', 'with', 'extension', 'str1'], 'words': ['find', 'all', 'files', 'in', 'directory', 'str0', 'with', 'extension', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '/mydir', 'str1': '.txt'}, 'snippet': "for file in os.listdir('str0'):\n    if file.endswith('str1'):\n        pass"}
Generated  translation
results + = [ each for each in os. listdir ('str0') if each. endswith ('str1') ] 
--------- B -----------
{'intent': {'gloss': ['write', 'line', 'str0', 'to', 'file', 'str1'], 'words': ['write', 'line', 'str0', 'to', 'file', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'hello', 'str1': 'somefile.txt'}, 'snippet': "with open('str1', 'a') as the_file:\n    the_file.write('hello\\n')"}
Generated  translation
with open ('str1 ','r') as f : f. write ('str0') 
--------- B -----------
{'intent': {'gloss': ['loop', 'over', 'files', 'in', 'directory', 'str0'], 'words': ['loop', 'over', 'files', 'in', 'directory', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '.'}, 'snippet': "for fn in os.listdir('str0'):\n    if os.path.isfile(fn):\n        pass"}
Generated  translation
for dirname, dirnames, filenames in os. walk ('str0') : for subdirname in dirnames : print ( os. path. join ( dirname, subdirname ) ) for filename in filenames : pas
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'string', 'var0', 'with', 'into', 'all', 'strings', 'of', 'repeated', 'characters'], 'words': ['split', 'a', 'string', 'var0', 'with', 'into', 'all', 'strings', 'of', 'repeated', 'characters'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': "[m.group(0) for m in re.finditer('(\\\\d)\\\\1*', var0)]"}
Generated  translation
" " " " " ". join ( var0 [ i : i + 2 ] for i in range ( 0, len ( var0 ), 2 ) ) 
--------- B -----------
{'intent': {'gloss': ['in', 'var0', ',', 'get', 'the', 'content', 'of', 'the', 'sibling', 'of', 'the', 'var1', 'tag', 'with', 'text', 'content', 'str0'], 'words': ['in', 'var0', ',', 'get', 'the', 'content', 'of', 'the', 'sibling', 'of', 'the', 'var1', 'tag', 'with', 'text', 'content', 'str0'], 'after': [' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'soup', 'var1': 'td', 'str0': 'address:'}, 'snippet': "print(var0.find(text='str0').findnext('var1').contents[0])"}
Generated  translation
soup. var0. findall ( text ='str0') 
--------- B -----------
{'intent': {'gloss': ['use', 'a', 'regex', 'to', 'get', 'all', 'text', 'in', 'a', 'string', 'var0', 'that', 'is', 'not', 'surrounded', 'by', 'square', 'brackets'], 'words': ['use', 'a', 'regex', 'to', 'get', 'all', 'text', 'in', 'a', 'string', 'var0', 'that', 'is', 'not', 'surrounded', 'by', 'square', 'brackets'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'example_str'}, 'snippet': "re.findall('(.*?)(?:\\\\[.*?\\\\]|$)', var0)"}
Generated  translation
re. sub ('\ \ [. *? \ \ ] ','', var0 ) 
--------- B -----------
{'intent': {'gloss': ['open', 'a', 'str0', 'terminal', 'from', 'python', 'script', 'and', 'run', 'str1', 'command', '.'], 'words': ['open', 'a', 'str0', 'terminal', 'from', 'python', 'script', 'and', 'run', 'str1', 'command', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'gnome', 'str1': 'sudo apt-get update'}, 'snippet': 'os.system(\'gnome-terminal -e \\\'bash -c "sudo apt-get update; exec bash"\\\'\')'}
Generated  translation
os. system ('str0') 
--------- B -----------
{'intent': {'gloss': ['write', 'multiple', 'strings', 'var0', ',', 'var1', 'and', 'var2', 'in', 'one', 'line', 'in', 'a', 'file', 'var3'], 'words': ['write', 'multiple', 'strings', 'var0', ',', 'var1', 'and', 'var2', 'in', 'one', 'line', 'in', 'a', 'file', 'var3'], 'after': [' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'line1', 'var1': 'line2', 'var2': 'line3', 'var3': 'target'}, 'snippet': "var3.write('%r\\n%r\\n%r\\n' % (var0, var1, var2))"}
Generated  translation
with open ('var0 ','r') as f : var1 = f. write ('var2') as f : var1 = f. readlines ( ) 
--------- B -----------
{'intent': {'gloss': ['pandas', ':', 'delete', 'rows', 'in', 'dataframe', 'var0', 'based', 'on', 'multiple', 'columns', 'values'], 'words': ['pandas', ':', 'delete', 'rows', 'in', 'dataframe', 'var0', 'based', 'on', 'multiple', 'columns', 'values'], 'after': ['', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': "var0.set_index(list('bc')).drop(tuples, errors='ignore').reset_index()"}
Generated  translation
var0. apply ( lambda x : x. tolist ( ), axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'content', 'of', 'child', 'tag', 'withvar0', 'attribute', 'whose', 'parent', 'has', 'css', 'var1'], 'words': ['get', 'the', 'content', 'of', 'child', 'tag', 'withvar0', 'attribute', 'whose', 'parent', 'has', 'css', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'href', 'var1': 'someclass'}, 'snippet': "self.driver.find_element_by_css_selector('.someclass a').get_attribute('var0')"}
Generated  translation
soup. find _ all ('a ', href = re. compile ('http : / / www \ \. com. compile ('http : / / www. com. i ) ) ) 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'string', 'by', 'a', 'delimiter', 'in', 'python'], 'words': ['split', 'a', 'string', 'by', 'a', 'delimiter', 'in', 'python'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "[x.strip() for x in '2.matches $$text$$ string'.split('$$text$$')]"}
Generated  translation
" " " [UNK] " " ". split ('', 1 ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'a', 'directory', 'var0', 'exists', 'and', 'create', 'it', 'if', 'necessary'], 'words': ['check', 'if', 'a', 'directory', 'var0', 'exists', 'and', 'create', 'it', 'if', 'necessary'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'path'}, 'snippet': 'try:\n    os.makedirs(var0)\nexcept oserror:\n    if not os.var0.isdir(var0):\n        raise'}
Generated  translation
os. path. exists ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['extract', 'all', 'the', 'values', 'with', 'keys', 'str0', 'and', 'str1', 'from', 'a', 'list', 'of', 'dictionaries', 'var0', 'to', 'list', 'of', 'tuples'], 'words': ['extract', 'all', 'the', 'values', 'with', 'keys', 'str0', 'and', 'str1', 'from', 'a', 'list', 'of', 'dictionaries', 'var0', 'to', 'list', 'of', 'tuples'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'x', 'str1': 'y', 'var0': 'd'}, 'snippet': "[(str0['str0'], str0['str1']) for str0 in var0]"}
Generated  translation
[ ( d ['str0'], d ['str1'] ) for d in var0 ] 
--------- B -----------
{'intent': {'gloss': ['running', 'r', 'script', 'str0', 'from', 'python'], 'words': ['running', 'r', 'script', 'str0', 'from', 'python'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '/pathto/myrscript.r'}, 'snippet': "subprocess.call(['/usr/bin/rscript', '--vanilla', 'str0'])"}
Generated  translation
system ('r') 
--------- B -----------
{'intent': {'gloss': ['convert', 'list', 'of', 'tuples', 'var0', 'to', 'a', 'string'], 'words': ['convert', 'list', 'of', 'tuples', 'var0', 'to', 'a', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': '""", """.join(\'(\' + \', \'.join(i) + \')\' for i in var0)'}
Generated  translation
" " " " " ". join ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['find', 'all', 'files', 'in', 'directory', 'str0', 'with', 'extension', 'str1'], 'words': ['find', 'all', 'files', 'in', 'directory', 'str0', 'with', 'extension', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '/mydir', 'str1': '.txt'}, 'snippet': "os.chdir('str0')\nfor file in glob.glob('*.txt'):\n    pass"}
Generated  translation
results + = [ each for each in os. listdir ('str0') if each. endswith ('str1') ] 
--------- B -----------
{'intent': {'gloss': ['python', 'regex', '-', 'check', 'for', 'a', 'capital', 'letter', 'with', 'a', 'following', 'lowercase', 'in', 'string', 'var0'], 'words': ['python', 'regex', '-', 'check', 'for', 'a', 'capital', 'letter', 'with', 'a', 'following', 'lowercase', 'in', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'string'}, 'snippet': "re.sub('^[a-z0-9]*(?![a-z])', '', var0)"}
Generated  translation
var0 ['var0']. lower ( ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'index', 'of', 'an', 'integer', 'str0', 'from', 'a', 'list', 'var0', 'if', 'the', 'list', 'also', 'contains', 'boolean', 'items'], 'words': ['get', 'the', 'index', 'of', 'an', 'integer', 'str0', 'from', 'a', 'list', 'var0', 'if', 'the', 'list', 'also', 'contains', 'boolean', 'items'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '1', 'var0': 'lst'}, 'snippet': 'next(i for i, x in enumerate(var0) if not isinstance(x, bool) and x == 1)'}
Generated  translation
[ i for i, j in enumerate ( var0 ) if i! = 0 ] 
--------- B -----------
{'intent': {'gloss': ['insert', 'directory', 'str0', 'into', 'directory', 'var0'], 'words': ['insert', 'directory', 'str0', 'into', 'directory', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'apps', 'var0': '__file__'}, 'snippet': "sys.path.insert(1, os.path.join(os.path.dirname(var0), 'str0'))"}
Generated  translation
var0. insert ( 0,'str0') 
--------- B -----------
{'intent': {'gloss': ['write', 'the', 'data', 'of', 'dataframe', 'var0', 'into', 'text', 'file', 'str0'], 'words': ['write', 'the', 'data', 'of', 'dataframe', 'var0', 'into', 'text', 'file', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'np.txt'}, 'snippet': "np.savetxt('c:\\\\data\\\\np.txt', var0.values, fmt='%d')"}
Generated  translation
var0. write ('str0') 
--------- B -----------
{'intent': {'gloss': ['write', 'content', 'of', 'dataframe', 'var0', 'into', 'text', 'file', 'str0'], 'words': ['write', 'content', 'of', 'dataframe', 'var0', 'into', 'text', 'file', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'c:\\data\\pandas.txt'}, 'snippet': "var0.to_csv('str0', header=none, index=none, sep=' ', mode='a')"}
Generated  translation
var0. write ( open ('str0 ','rb'). read ( ) ) 
--------- B -----------
{'intent': {'gloss': ['print', 'a', '2', 'dimensional', 'list', 'var0', 'as', 'a', 'table', 'with', 'delimiters'], 'words': ['print', 'a', '2', 'dimensional', 'list', 'var0', 'as', 'a', 'table', 'with', 'delimiters'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'tab'}, 'snippet': "print('\\n'.join('\\t'.join(str(col) for col in row) for row in var0))"}
Generated  translation
print ( ', '. join ( var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'a', 'directory', 'var0', 'exists', 'and', 'create', 'it', 'if', 'necessary'], 'words': ['check', 'if', 'a', 'directory', 'var0', 'exists', 'and', 'create', 'it', 'if', 'necessary'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'path'}, 'snippet': 'try:\n    os.makedirs(var0)\nexcept oserror as exception:\n    if exception.errno != errno.eexist:\n        raise'}
Generated  translation
os. path. exists ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['send', 'a', 'post', 'request', 'with', 'raw', 'data', 'var0', 'and', 'basic', 'authentication', 'with', 'var1', 'and', 'var2'], 'words': ['send', 'a', 'post', 'request', 'with', 'raw', 'data', 'var0', 'and', 'basic', 'authentication', 'with', 'var1', 'and', 'var2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'data', 'var1': 'username', 'var2': 'password'}, 'snippet': 'requests.post(url, var0=var0, headers=headers_dict, auth=(var1, var2))'}
Generated  translation
requests. post ('var0 ', var1 ) 
--------- B -----------
{'intent': {'gloss': ['parse', 'tab', '-', 'delimited', 'csv', 'file', 'str0', 'into', 'a', 'list'], 'words': ['parse', 'tab', '-', 'delimited', 'csv', 'file', 'str0', 'into', 'a', 'list'], 'after': [' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'text.txt'}, 'snippet': "lol = list(csv.reader(open('str0', 'rb'), delimiter='\\t'))"}
Generated  translation
[ line for line in open ('str0') if'str0'in line ] 
--------- B -----------
{'intent': {'gloss': ['loop', 'through', 'the', 'ip', 'address', 'range', 'str0'], 'words': ['loop', 'through', 'the', 'ip', 'address', 'range', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '192.168.x.x'}, 'snippet': "generator = iter_iprange('192.168.1.1', '192.168.255.255', step=1)"}
Generated  translation
print ('str0 '. join ( map ( str0 ) ) ) 
--------- B -----------
{'intent': {'gloss': ['modify', 'sys', '.', 'path', 'for', 'python', 'module', 'var0'], 'words': ['modify', 'sys', '.', 'path', 'for', 'python', 'module', 'var0'], 'after': [' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'subdir'}, 'snippet': "sys.path.append(os.path.join(os.path.dirname(__file__), 'var0'))"}
Generated  translation
os. path. split ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['lower', 'a', 'string', 'var0', 'and', 'remove', 'non', '-', 'alphanumeric', 'characters', 'aside', 'from', 'space'], 'words': ['lower', 'a', 'string', 'var0', 'and', 'remove', 'non', '-', 'alphanumeric', 'characters', 'aside', 'from', 'space'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'text'}, 'snippet': "re.sub('[^\\\\sa-za-z0-9]', '', var0).lower().strip()"}
Generated  translation
re. sub ('[ ^ 0 - 9a - za - z ] + ','* ','h ^ & ell `., var0 ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'all', 'non', '-', 'alphanumeric', 'characters', 'except', 'space', 'from', 'a', 'string', 'var0', 'and', 'lower', 'it'], 'words': ['remove', 'all', 'non', '-', 'alphanumeric', 'characters', 'except', 'space', 'from', 'a', 'string', 'var0', 'and', 'lower', 'it'], 'after': [' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'text'}, 'snippet': "re.sub('(?!\\\\s)[\\\\w_]', '', var0).lower().strip()"}
Generated  translation
re. sub ('[ ^ 0 - 9a - za - z ] + ','* ','h ^ & ell `., var0 ) 
--------- B -----------
{'intent': {'gloss': ['scatter', 'a', 'plot', 'with', 'x', ',', 'y', 'position', 'of', 'str0', 'and', 'face', 'color', 'equal', 'to', 'none'], 'words': ['scatter', 'a', 'plot', 'with', 'x', ',', 'y', 'position', 'of', 'str0', 'and', 'face', 'color', 'equal', 'to', 'none'], 'after': [' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'np.random.randn(100)'}, 'snippet': "plt.scatter(np.random.randn(100), np.random.randn(100), facecolors='none')"}
Generated  translation
plt. scatter ( * x, y, color ='str0') 
--------- B -----------
{'intent': {'gloss': ['prepend', 'the', 'line', 'str0', 'to', 'the', 'contents', 'of', 'file', 'str1', 'and', 'save', 'as', 'the', 'file', 'str2'], 'words': ['prepend', 'the', 'line', 'str0', 'to', 'the', 'contents', 'of', 'file', 'str1', 'and', 'save', 'as', 'the', 'file', 'str2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '#test firstline\n', 'str1': 'infile', 'str2': 'outfile'}, 'snippet': "open('str2', 'w').write('str0' + open('str1').read())"}
Generated  translation
shutil. savefig ('str1 ','str0') 
--------- B -----------
{'intent': {'gloss': ['extract', 'ip', 'address', 'from', 'an', 'html', 'string'], 'words': ['extract', 'ip', 'address', 'from', 'an', 'html', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "ip = re.findall('[0-9]+(?:\\\\.[0-9]+){3}', s)"}
Generated  translation
urllib. request. urlretrieve ('# a ','rb') 
--------- B -----------
{'intent': {'gloss': ['unpack', 'a', 'series', 'of', 'tuples', 'in', 'pandas', 'into', 'a', 'dataframe', 'with', 'column', 'names', 'str0', 'and', 'str1'], 'words': ['unpack', 'a', 'series', 'of', 'tuples', 'in', 'pandas', 'into', 'a', 'dataframe', 'with', 'column', 'names', 'str0', 'and', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'out-1', 'str1': 'out-2'}, 'snippet': "pd.dataframe(out.tolist(), columns=['str0', 'str1'], index=out.index)"}
Generated  translation
pd. concat ( [ df, pd. dataframe ( l ) for l in var0 ], axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'first', 'value', 'from', 'dataframe', 'var0', 'where', 'column', 'str0', 'is', 'equal', 'to', 'str1'], 'words': ['get', 'the', 'first', 'value', 'from', 'dataframe', 'var0', 'where', 'column', 'str0', 'is', 'equal', 'to', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'letters', 'str1': 'c'}, 'snippet': "var0.loc[var0['str0'] == 'str1', 'str0'].values[0]"}
Generated  translation
var0. loc [ var0 ['str0'] = ='str1'] 
--------- B -----------
{'intent': {'gloss': ['remove', 'all', 'strings', 'from', 'a', 'list', 'a', 'strings', 'var0', 'where', 'the', 'values', 'starts', 'with', 'str0', 'or', 'str1'], 'words': ['remove', 'all', 'strings', 'from', 'a', 'list', 'a', 'strings', 'var0', 'where', 'the', 'values', 'starts', 'with', 'str0', 'or', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'sents', 'str0': '@$\t', 'str1': '#'}, 'snippet': "[x for x in var0 if not x.startswith('str0') and not x.startswith('str1')]"}
Generated  translation
[ k for k, v in var0. items ( ) if v. startswith ('str0') ] 
--------- B -----------
{'intent': {'gloss': ['create', 'new', 'dataframe', 'object', 'by', 'merging', 'columns', 'str0', 'of', 'dataframes', 'var0', 'and', 'var1', 'and', 'rename', 'the', 'columns', 'from', 'dataframes', 'var0', 'and', 'var1', 'with', 'suffix', 'var4', 'and', 'var5', 'respectively'], 'words': ['create', 'new', 'dataframe', 'object', 'by', 'merging', 'columns', 'str0', 'of', 'dataframes', 'var0', 'and', 'var1', 'and', 'rename', 'the', 'columns', 'from', 'dataframes', 'var0', 'and', 'var1', 'with', 'suffix', 'var4', 'and', 'var5', 'respectively'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'key', 'var0': 'split_df', 'var1': 'csv_df', 'var2': 'split_df', 'var3': 'csv_df', 'var4': '_left', 'var5': '_right'}, 'snippet': "pd.merge(var2, var3, on=['str0'], suffixes=('var4', 'var5'))"}
Generated  translation
pd. dataframe ( ['var0 ','var1'], var2. index = var1. rename ( var4, var4 ) ) 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'string', 'str0', 'by', 'str1', 'keeping', 'str1', 'in', 'the', 'result'], 'words': ['split', 'a', 'string', 'str0', 'by', 'str1', 'keeping', 'str1', 'in', 'the', 'result'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'docs/src/scripts/temp', 'str1': '/', 'str2': '/'}, 'snippet': '"""str0""".replace(\'str2\', \'/\\x00/\').split(\'\\x00\')'}
Generated  translation
re. split ('str0 ','str1 ', 1 ) 
--------- B -----------
{'intent': {'gloss': ['group', 'a', 'list', 'of', 'dicts', 'var0', 'into', 'one', 'dict', 'by', 'key'], 'words': ['group', 'a', 'list', 'of', 'dicts', 'var0', 'into', 'one', 'dict', 'by', 'key'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'ld'}, 'snippet': 'print(dict(zip(var0[0], zip(*[list(d.values()) for d in var0]))))'}
Generated  translation
dict ( ( k, v ) for d in var0. items ( ) ) 
--------- B -----------
{'intent': {'gloss': ['replace', 'all', 'elements', 'in', 'array', 'var0', 'that', 'are', 'not', 'present', 'in', 'array', 'str0', 'with', 'zeros'], 'words': ['replace', 'all', 'elements', 'in', 'array', 'var0', 'that', 'are', 'not', 'present', 'in', 'array', 'str0', 'with', 'zeros'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'str0': '[1, 3, 4]', '[ str0 ]': '[1, 3, 4]'}, 'snippet': 'np.where(np.in1d(var0, [ str0 ]).reshape(var0.shape), var0, 0)'}
Generated  translation
np. einsum ('ijk, ikl - > ijl ', var0, var0 ) 
--------- B -----------
{'intent': {'gloss': ['how', 'to', 'count', 'distinct', 'values', 'in', 'a', 'column', 'of', 'a', 'pandas', 'group', 'by', 'object', '?'], 'words': ['how', 'to', 'count', 'distinct', 'values', 'in', 'a', 'column', 'of', 'a', 'pandas', 'group', 'by', 'object', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "df.groupby(['col1', 'col2'])['col3'].nunique().reset_index()"}
Generated  translation
df. groupby ( level = 0 ). sum ( ) 
--------- B -----------
{'intent': {'gloss': ['average', 'each', 'two', 'columns', 'of', 'array', 'var0'], 'words': ['average', 'each', 'two', 'columns', 'of', 'array', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'data'}, 'snippet': 'var0.reshape(-1, j).mean(axis=1).reshape(var0.shape[0], -1)'}
Generated  translation
np. einsum ('ijk, ikl - > ijl ', var0, var0 ) 
--------- B -----------
{'intent': {'gloss': ['do', 'a', 'scatter', 'plot', 'with', 'empty', 'circles'], 'words': ['do', 'a', 'scatter', 'plot', 'with', 'empty', 'circles'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "plt.plot(np.random.randn(100), np.random.randn(100), 'o', mfc='none')"}
Generated  translation
plt. scatter ( * zip ( * my _ scatter ) ) 
--------- B -----------
{'intent': {'gloss': ['select', 'rows', 'in', 'a', 'dataframe', 'var0', 'column', 'str0', 'between', 'two', 'values', '99', 'and', '101'], 'words': ['select', 'rows', 'in', 'a', 'dataframe', 'var0', 'column', 'str0', 'between', 'two', 'values', '99', 'and', '101'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'closing_price'}, 'snippet': "var0 = var0[(var0['str0'] >= 99) & (var0['str0'] <= 101)]"}
Generated  translation
var0 [ ( var0. str0 ['str0'] ) & ( var0 ['str0'], axis = 101 ) ] 
--------- B -----------
{'intent': {'gloss': ['regex', ',', 'find', 'str0s', 'only', 'in', 'the', 'middle', 'of', 'string', 'var0'], 'words': ['regex', ',', 'find', 'str0s', 'only', 'in', 'the', 'middle', 'of', 'string', 'var0'], 'after': ['', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'n', 'var0': 's'}, 'snippet': "re.findall('n(?<=[^n]n)n+(?=[^n])(?i)', var0)"}
Generated  translation
re. sub ('\ \ w + ','str0 ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'duplicate', 'words', 'from', 'a', 'string', 'var0', 'using', 'regex'], 'words': ['remove', 'duplicate', 'words', 'from', 'a', 'string', 'var0', 'using', 'regex'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'text'}, 'snippet': "var0 = re.sub('\\\\b(\\\\w+)( \\\\1\\\\b)+', '\\\\1', var0)"}
Generated  translation
re. sub ('(? < = [ \ \ w \ \ w ) \ \ s \ \ s + ','\ \ 1 ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['replace', 'dot', 'characters', 'str0', 'associated', 'with', 'ascii', 'letters', 'in', 'list', 'var0', 'with', 'space', 'str1'], 'words': ['replace', 'dot', 'characters', 'str0', 'associated', 'with', 'ascii', 'letters', 'in', 'list', 'var0', 'with', 'space', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '.', 'var0': 's', 'str1': ''}, 'snippet': "[re.sub('(?<!\\\\d)\\\\.(?!\\\\d)', ' ', i) for i in var0]"}
Generated  translation
re. sub ('[ ^ \ \ x00 \ \ x7f ] ','str1 ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'each', 'tuple', 'in', 'list', 'var0', 'to', 'a', 'string', 'with', 'str0', 'separating', 'the', 'tuples', "'", 'elements'], 'words': ['convert', 'each', 'tuple', 'in', 'list', 'var0', 'to', 'a', 'string', 'with', 'str0', 'separating', 'the', 'tuples', "'", 'elements'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '']}, 'slot_map': {'var0': 'l', 'str0': '@'}, 'snippet': '""" """.join([(\'%d@%d\' % (t[0], t[1])) for t in var0])'}
Generated  translation
" " " " " ". join ( [ str0 ] ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'dictionaries', 'by', 'the', 'value', 'of', 'keys', 'str0', ',', 'str1', ',', 'str2', 'in', 'ascending', 'order', '.'], 'words': ['sort', 'a', 'list', 'of', 'dictionaries', 'by', 'the', 'value', 'of', 'keys', 'str0', ',', 'str1', ',', 'str2', 'in', 'ascending', 'order', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'title', 'str1': 'title_url', 'str2': 'id'}, 'snippet': "l.sort(key=lambda x: (x['str0'], x['str1'], x['str2']))"}
Generated  translation
sorted ( [ str0 ], key = lambda x : x ['str0'], reverse = true ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'list', 'var0', 'in', 'descending', 'order', 'based', 'on', 'the', 'date', 'value', 'in', 'second', 'element', 'of', 'each', 'list', 'in', 'list', 'var0'], 'words': ['sort', 'list', 'var0', 'in', 'descending', 'order', 'based', 'on', 'the', 'date', 'value', 'in', 'second', 'element', 'of', 'each', 'list', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'li', 'var1': 'li'}, 'snippet': "sorted(var1, key=lambda x: datetime.strptime(x[1], '%d/%m/%y'), reverse=true)"}
Generated  translation
var0. sort ( key = operator. itemgetter ( 1, 2 ) ) 
--------- B -----------
{'intent': {'gloss': ['set', 'font', 'var0', 'to', 'display', 'non', '-', 'ascii', 'characters', 'in', 'matplotlib'], 'words': ['set', 'font', 'var0', 'to', 'display', 'non', '-', 'ascii', 'characters', 'in', 'matplotlib'], 'after': [' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'arial'}, 'snippet': "matplotlib.rc('font', **{'sans-serif': 'var0', 'family': 'sans-serif'})"}
Generated  translation
var0. setdefault ('['var0'], ='var0') 
--------- B -----------
{'intent': {'gloss': ['find', 'all', 'files', 'in', 'directory', 'str0', 'with', 'extension', 'str1'], 'words': ['find', 'all', 'files', 'in', 'directory', 'str0', 'with', 'extension', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '/mydir', 'str1': '.txt'}, 'snippet': "for root, dirs, files in os.walk('str0'):\n    for file in files:\n        if file.endswith('str1'):\n            pass"}
Generated  translation
results + = [ each for each in os. listdir ('str0') if each. endswith ('str1') ] 
--------- B -----------
{'intent': {'gloss': ['load', 'data', 'containing', 'str0', 'from', 'file', 'str1', 'into', 'numpy', 'array', 'var0'], 'words': ['load', 'data', 'containing', 'str0', 'from', 'file', 'str1', 'into', 'numpy', 'array', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'utf-8', 'str1': 'new.txt', 'var0': 'arr'}, 'snippet': "var0 = numpy.fromiter(codecs.open('str1', encoding='str0'), dtype='<u2')"}
Generated  translation
var0 = numpy. loadtxt ('str1 ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['select', 'values', 'from', 'column', 'str0', 'for', 'which', 'corresponding', 'values', 'in', 'column', 'str1', 'will', 'be', 'greater', 'than', '50', ',', 'and', 'in', 'column', 'str2', '-', 'equal', '900', 'in', 'dataframe', 'var0'], 'words': ['select', 'values', 'from', 'column', 'str0', 'for', 'which', 'corresponding', 'values', 'in', 'column', 'str1', 'will', 'be', 'greater', 'than', '50', ',', 'and', 'in', 'column', 'str2', '-', 'equal', '900', 'in', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'a', 'str1': 'b', 'str2': 'c', 'var0': 'df'}, 'snippet': "var0['str0'][(var0['str1'] > 50) & (var0['str2'] == 900)]"}
Generated  translation
var0 [ ( var0. str1 ['str0'] ) & ( var0 ['str2'] < = 900 ) ] 
--------- B -----------
{'intent': {'gloss': ['find', '10', 'largest', 'differences', 'between', 'each', 'respective', 'elements', 'of', 'list', 'var0', 'and', 'list', 'var1'], 'words': ['find', '10', 'largest', 'differences', 'between', 'each', 'respective', 'elements', 'of', 'list', 'var0', 'and', 'list', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l1', 'var1': 'l2'}, 'snippet': 'heapq.nlargest(10, range(len(var0)), key=lambda i: abs(var0[i] - var1[i]))'}
Generated  translation
sum ( i * 10 for i, j in zip ( var0, var1 ) ) 
--------- B -----------
{'intent': {'gloss': ['loop', 'through', 'the', 'ip', 'address', 'range', 'str0'], 'words': ['loop', 'through', 'the', 'ip', 'address', 'range', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '192.168.x.x'}, 'snippet': "for i in range(256):\n    for j in range(256):\n        ip = '192.168.%d.%d' % (i, j)\n        print(ip)"}
Generated  translation
print ('str0 '. join ( map ( str0 ) ) ) 
--------- B -----------
{'intent': {'gloss': ['find', 'a', 'value', 'within', 'nested', 'json', 'str0', 'where', 'the', 'key', 'inside', 'another', 'key', 'str1', 'is', 'unknown', '.'], 'words': ['find', 'a', 'value', 'within', 'nested', 'json', 'str0', 'where', 'the', 'key', 'inside', 'another', 'key', 'str1', 'is', 'unknown', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'data', 'str1': 'b'}, 'snippet': "list(str0['a']['str1'].values())[0]['maindata'][0]['info']"}
Generated  translation
json. loads ('{ " foo " : 42, " bar " : " baz " }') ['str1'] 
--------- B -----------
{'intent': {'gloss': ['finding', 'the', 'index', 'of', 'elements', 'containing', 'substring', 'str0', 'and', 'str1', 'in', 'a', 'list', 'of', 'strings', 'str2', '.'], 'words': ['finding', 'the', 'index', 'of', 'elements', 'containing', 'substring', 'str0', 'and', 'str1', 'in', 'a', 'list', 'of', 'strings', 'str2', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'how', 'str1': 'what', 'str2': 'mylist'}, 'snippet': "[i for i, j in enumerate(str2) if 'str0' in j.lower() or 'str1' in j.lower()]"}
Generated  translation
[ i for i, j in enumerate ( str2 ) if i. index ('str0') if i! ='str1') ] 
--------- B -----------
{'intent': {'gloss': ['extract', 'a', 'url', 'from', 'a', 'string', 'var0'], 'words': ['extract', 'a', 'url', 'from', 'a', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mystring'}, 'snippet': "print(re.search('(?p<url>https?://[^\\\\s]+)', var0).group('url'))"}
Generated  translation
re. split ('\ \ w + ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['selecting', 'rows', 'in', 'numpy', 'ndarray', 'str0', ',', 'where', 'the', 'value', 'in', 'the', 'first', 'column', 'is', '0', 'and', 'value', 'in', 'the', 'second', 'column', 'is', '1'], 'words': ['selecting', 'rows', 'in', 'numpy', 'ndarray', 'str0', ',', 'where', 'the', 'value', 'in', 'the', 'first', 'column', 'is', '0', 'and', 'value', 'in', 'the', 'second', 'column', 'is', '1'], 'after': [' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'a'}, 'snippet': 'str0[np.where((str0[:, (0)] == 0) * (str0[:, (1)] == 1))]'}
Generated  translation
print ( np. linspace ( 1, 3, num = 0, endpoint = false ) ) 
--------- B -----------
{'intent': {'gloss': ['how', 'to', 'create', 'a', 'list', 'of', 'date', 'string', 'in', 'str0', 'format', 'with', 'python', 'pandas', '?'], 'words': ['how', 'to', 'create', 'a', 'list', 'of', 'date', 'string', 'in', 'str0', 'format', 'with', 'python', 'pandas', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'yyyymmdd'}, 'snippet': "[d.strftime('%y%m%d') for d in pandas.date_range('20130226', '20130302')]"}
Generated  translation
datetime. datetime. strptime ('str0 ','% d % b % y'). strftime ('% m - % d % h : % m') 
--------- B -----------
{'intent': {'gloss': ['how', 'can', 'i', 'parse', 'a', 'time', 'string', 'containing', 'milliseconds', 'in', 'it', 'with', 'python', '?'], 'words': ['how', 'can', 'i', 'parse', 'a', 'time', 'string', 'containing', 'milliseconds', 'in', 'it', 'with', 'python', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "time.strptime('30/03/09 16:31:32.123', '%d/%m/%y %h:%m:%s.%f')"}
Generated  translation
" " " 2. 7. 0 _ bf4fda703454 " " ". format ('•') 
--------- B -----------
{'intent': {'gloss': ['insert', 'var0', 'before', 'the', 'file', 'extension', 'in', 'str0', 'or', 'replace', 'var1', 'with', 'var2', 'if', 'it', 'precedes', 'the', 'extension', '.'], 'words': ['insert', 'var0', 'before', 'the', 'file', 'extension', 'in', 'str0', 'or', 'replace', 'var1', 'with', 'var2', 'if', 'it', 'precedes', 'the', 'extension', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'var0': '_suff', 'str0': 'long.file.name.jpg', 'var1': '_a', 'var2': 'suff'}, 'snippet': "re.sub('(\\\\_a)?\\\\.([^\\\\.]*)$', '_suff.\\\\2', 'str0')"}
Generated  translation
var0. replace ('','str0 ', var1 ) 
--------- B -----------
{'intent': {'gloss': ['zip', 'two', '2', '-', 'd', 'arrays', 'var0', 'and', 'var1'], 'words': ['zip', 'two', '2', '-', 'd', 'arrays', 'var0', 'and', 'var1'], 'after': [' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'b'}, 'snippet': "np.array(zip(var0.ravel(), var1.ravel()), dtype='i4,i4').reshape(var0.shape)"}
Generated  translation
zip ( var0, var1, var0 ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'any', 'url', 'within', 'string', 'var0'], 'words': ['remove', 'any', 'url', 'within', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'text'}, 'snippet': "var0 = re.sub('^https?:\\\\/\\\\/.*[\\\\r\\\\n]*', '', var0, flags=re.multiline)"}
Generated  translation
re. sub ('\ \ w * \ \ d + ','', var0 ) 
--------- B -----------
{'intent': {'gloss': ['unzip', 'list', 'str0'], 'words': ['unzip', 'list', 'str0'], 'after': [' ', ' ', '']}, 'slot_map': {'str0': "[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]", '[ str0 ]': "[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]"}, 'snippet': "zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e',)])"}
Generated  translation
str0. split ('str0') 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'hex', '-', 'string', 'representation', 'to', 'actual', 'bytes'], 'words': ['convert', 'a', 'hex', '-', 'string', 'representation', 'to', 'actual', 'bytes'], 'after': [' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': '"""\\\\xf3\\\\xbe\\\\x80\\\\x80""".replace(\'\\\\x\', \'\').decode(\'hex\')'}
Generated  translation
int (''. join ( chr ( ord ( c ) ), c ) ) 
--------- B -----------
{'intent': {'gloss': ['unzip', 'list', 'str0', 'and', 'fill', 'empty', 'results', 'with', 'none'], 'words': ['unzip', 'list', 'str0', 'and', 'fill', 'empty', 'results', 'with', 'none'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]", '[ str0 ]': "[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]"}, 'snippet': "map(none, *[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e',)])"}
Generated  translation
sorted ( [ str0 ] ) 
--------- B -----------
{'intent': {'gloss': ['combine', 'values', 'from', 'column', 'str0', 'and', 'column', 'str1', 'of', 'dataframe', 'var0', 'into', 'column', 'str2', 'of', 'datafram', 'var0'], 'words': ['combine', 'values', 'from', 'column', 'str0', 'and', 'column', 'str1', 'of', 'dataframe', 'var0', 'into', 'column', 'str2', 'of', 'datafram', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'b', 'str1': 'a', 'var0': 'df', 'str2': 'c', 'var1': 'df'}, 'snippet': "var1['str2'] = np.where(var1['str1'].isnull, var1['str0'], var1['str1'])"}
Generated  translation
var0 ['str0']. apply ( pd. series ) 
--------- B -----------
{'intent': {'gloss': ['make', 'a', 'barplot', 'of', 'data', 'in', 'column', 'var0', 'of', 'dataframe', 'var1', 'colour', '-', 'coded', 'according', 'to', 'list', 'var2'], 'words': ['make', 'a', 'barplot', 'of', 'data', 'in', 'column', 'var0', 'of', 'dataframe', 'var1', 'colour', '-', 'coded', 'according', 'to', 'list', 'var2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'group', 'var1': 'df', 'var2': 'color'}, 'snippet': "var1['var0'].plot(kind='bar', var2=['r', 'g', 'b', 'r', 'g', 'b', 'r'])"}
Generated  translation
var1. groupby ('var0'). head ( 4 ) 
--------- B -----------
{'intent': {'gloss': ['download', 'a', 'file', 'var0', 'over', 'http', 'and', 'save', 'to', 'str0'], 'words': ['download', 'a', 'file', 'var0', 'over', 'http', 'and', 'save', 'to', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'url', 'str0': '10mb'}, 'snippet': "response = requests.get(var0, stream=true)\nwith open('str0', 'wb') as handle:\n    for data in tqdm(response.iter_content()):\n        handle.write(data)"}
Generated  translation
shutil. savefig ('str0 ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['removing', 'an', 'element', 'from', 'a', 'list', 'based', 'on', 'a', 'predicate', 'str0', 'or', 'str1'], 'words': ['removing', 'an', 'element', 'from', 'a', 'list', 'based', 'on', 'a', 'predicate', 'str0', 'or', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'x', 'str1': 'n'}, 'snippet': "[str0 for str0 in ['aat', 'xac', 'ant', 'tta'] if 'str0' not in str0 and \n    'str1' not in str0]"}
Generated  translation
[ x for x in a if x is not str0 ] 
--------- B -----------
{'intent': {'gloss': ['replace', 'each', 'str0', 'with', 'str1', 'and', 'each', 'str1', 'with', 'str0', 'in', 'the', 'string', 'str4', 'in', 'a', 'single', 'pass', '.'], 'words': ['replace', 'each', 'str0', 'with', 'str1', 'and', 'each', 'str1', 'with', 'str0', 'in', 'the', 'string', 'str4', 'in', 'a', 'single', 'pass', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'a', 'str1': 'b', 'str2': 'b', 'str3': 'a', 'str4': 'obama'}, 'snippet': '"""str4""".replace(\'str3\', \'%temp%\').replace(\'str2\', \'str3\').replace(\'%temp%\',\n    \'str2\')'}
Generated  translation
re. sub ('(? < =. ) (? = [ \ \ 1 - ) for _ in'str0 ','str1 ', str ) ] 
--------- B -----------
{'intent': {'gloss': ['download', 'a', 'file', 'var0', 'over', 'http', 'and', 'save', 'to', 'var1'], 'words': ['download', 'a', 'file', 'var0', 'over', 'http', 'and', 'save', 'to', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'url', 'var1': 'file_name'}, 'snippet': "u = urllib.request.urlopen(var0)\nf = open(var1, 'wb')\nmeta = u.info()\nfile_size = int(meta.getheaders('content-length')[0])\nprint('downloading: %s bytes: %s' % (var1, file_size))\nfile_size_dl = 0\nblock_sz = 8192\nwhile true:\n    buffer = u.read(block_sz)\n    if not buffer:\n        break\n    file_size_dl += len(buffer)\n    f.write(buffer)\n    status = '%10d  [%3.2f%%]' % (file_size_dl, file_size_dl * 100.0 /\n        file_size)\n    status = status + chr(8) * (len(status) + 1)\n    print(status, end=' ')\nf.close()"}
Generated  translation
webbrowser. open ('var0') 
test greedy accuracy 0.032
test greedy bleu score 0.31442523583012105
test greedy exececution accuracy 0.0
--------- B -----------
{'intent': {'gloss': ['function', 'to', 'convert', 'strings', 'into', 'integers'], 'words': ['function', 'to', 'convert', 'strings', 'into', 'integers'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'int()'}
Generated  translation
l = ( int ( i ) for i in range ( 10 ) ) 
--------- B -----------
{'intent': {'gloss': ['count', 'the', 'occurrences', 'of', 'items', 'in', 'list', 'var0'], 'words': ['count', 'the', 'occurrences', 'of', 'items', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': 'counter(var0)'}
Generated  translation
len ( set ( var0 ) ) = = len ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'tuple', 'var0', 'to', 'list'], 'words': ['convert', 'tuple', 'var0', 'to', 'list'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 't'}, 'snippet': 'list(var0)'}
Generated  translation
[ ( i, j ) for i in var0 ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'list', 'var0', 'to', 'tuple'], 'words': ['convert', 'list', 'var0', 'to', 'tuple'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 't'}, 'snippet': 'tuple(l)'}
Generated  translation
zip ( * var0 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'sorted', 'list', 'of', 'keys', 'of', 'dict', 'var0'], 'words': ['get', 'sorted', 'list', 'of', 'keys', 'of', 'dict', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'd'}, 'snippet': 'sorted(var0)'}
Generated  translation
sorted ( var0, key = lambda x : trial _ dict [ x ] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'length', 'of', 'list', 'var0'], 'words': ['get', 'the', 'length', 'of', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'my_list'}, 'snippet': 'len(var0)'}
Generated  translation
len ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['getting', 'the', 'length', 'of', 'array', 'var0'], 'words': ['getting', 'the', 'length', 'of', 'array', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': 'len(var0)'}
Generated  translation
var0. len ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['getting', 'the', 'length', 'of', 'array', 'var0'], 'words': ['getting', 'the', 'length', 'of', 'array', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': 'len(var0)'}
Generated  translation
var0. len ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['getting', 'the', 'length', 'of', 'var0'], 'words': ['getting', 'the', 'length', 'of', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'my_tuple'}, 'snippet': 'len(var0)'}
Generated  translation
var0. len ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['getting', 'the', 'length', 'of', 'var0'], 'words': ['getting', 'the', 'length', 'of', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'my_string'}, 'snippet': 'len(var0)'}
Generated  translation
var0. len ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'type', 'of', 'var0'], 'words': ['get', 'the', 'type', 'of', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'i'}, 'snippet': 'type(var0)'}
Generated  translation
min ( var0, key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['determine', 'the', 'type', 'of', 'variable', 'var0'], 'words': ['determine', 'the', 'type', 'of', 'variable', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'v'}, 'snippet': 'type(var0)'}
Generated  translation
' var0'in locals ( ) 
--------- B -----------
{'intent': {'gloss': ['determine', 'the', 'type', 'of', 'variable', 'var0'], 'words': ['determine', 'the', 'type', 'of', 'variable', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'v'}, 'snippet': 'type(var0)'}
Generated  translation
' var0'in locals ( ) 
--------- B -----------
{'intent': {'gloss': ['determine', 'the', 'type', 'of', 'variable', 'var0'], 'words': ['determine', 'the', 'type', 'of', 'variable', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'v'}, 'snippet': 'type(var0)'}
Generated  translation
' var0'in locals ( ) 
--------- B -----------
{'intent': {'gloss': ['determine', 'the', 'type', 'of', 'variable', 'var0'], 'words': ['determine', 'the', 'type', 'of', 'variable', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'v'}, 'snippet': 'type(var0)'}
Generated  translation
' var0'in locals ( ) 
--------- B -----------
{'intent': {'gloss': ['put', 'the', 'curser', 'at', 'beginning', 'of', 'the', 'file'], 'words': ['put', 'the', 'curser', 'at', 'beginning', 'of', 'the', 'file'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'file.seek(0)'}
Generated  translation
os. path. join ( * x. split ( os. path. sep ) [ 2 : ] ) 
--------- B -----------
{'intent': {'gloss': ['make', 'a', 'delay', 'of', '1', 'second'], 'words': ['make', 'a', 'delay', 'of', '1', 'second'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'time.sleep(1)'}
Generated  translation
sleep ( 1 ) 
--------- B -----------
{'intent': {'gloss': ['declare', 'an', 'array'], 'words': ['declare', 'an', 'array'], 'after': [' ', ' ', '']}, 'slot_map': {}, 'snippet': 'my_list = []'}
Generated  translation
array = [ ] 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'by', 'space'], 'words': ['split', 'string', 'var0', 'by', 'space'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'text'}, 'snippet': 'var0.split()'}
Generated  translation
var0. split ('' ) 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'into', 'a', 'list', 'by', 'whitespace'], 'words': ['split', 'string', 'var0', 'into', 'a', 'list', 'by', 'whitespace'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'line'}, 'snippet': 'var0.split()'}
Generated  translation
[ item. strip ( ) for item in var0. split ( ',') ] 
--------- B -----------
{'intent': {'gloss': ['add', 'a', 'header', 'to', 'a', 'csv', 'file'], 'words': ['add', 'a', 'header', 'to', 'a', 'csv', 'file'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'writer.writeheader()'}
Generated  translation
webbrowser. open ('file') 
--------- B -----------
{'intent': {'gloss': ['calculate', 'sum', 'over', 'all', 'rows', 'of', '2d', 'numpy', 'array'], 'words': ['calculate', 'sum', 'over', 'all', 'rows', 'of', '2d', 'numpy', 'array'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'a.sum(axis=1)'}
Generated  translation
np. outer ( a, b ). sum ( ) 
--------- B -----------
{'intent': {'gloss': ['append', 'elements', 'of', 'a', 'set', 'var0', 'to', 'a', 'list', 'var1'], 'words': ['append', 'elements', 'of', 'a', 'set', 'var0', 'to', 'a', 'list', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'b', 'var1': 'a'}, 'snippet': 'var1.extend(var0)'}
Generated  translation
[ x for x in var1 if x not in var0 ] 
--------- B -----------
{'intent': {'gloss': ['removing', 'duplicates', 'in', 'list', 'var0'], 'words': ['removing', 'duplicates', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 't'}, 'snippet': 'list(set(var0))'}
Generated  translation
mynewlist = list ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['removing', 'duplicates', 'in', 'list', 'var0'], 'words': ['removing', 'duplicates', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'source_list'}, 'snippet': 'list(set(var0))'}
Generated  translation
mynewlist = list ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['how', 'to', 'sort', 'dictionaries', 'by', 'keys', 'in', 'python'], 'words': ['how', 'to', 'sort', 'dictionaries', 'by', 'keys', 'in', 'python'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'sorted(d.items())'}
Generated  translation
sorted ( list ( mydict. items ( ) ), key = lambda k _ v : k _ v [ 1 ], reverse = true ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'string', 'str0', 'into', 'integer'], 'words': ['convert', 'string', 'str0', 'into', 'integer'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '1'}, 'snippet': "int('str0')"}
Generated  translation
int ('str0 ', 16 ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'object', 'var0', 'is', 'a', 'string'], 'words': ['check', 'if', 'object', 'var0', 'is', 'a', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'o'}, 'snippet': 'type(var0) is str'}
Generated  translation
isinstance ( var0, str ) 
--------- B -----------
{'intent': {'gloss': ['append', 'list', 'var0', 'to', 'var1'], 'words': ['append', 'list', 'var0', 'to', 'var1'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list1', 'var1': 'list2'}, 'snippet': 'var1.extend(var0)'}
Generated  translation
var1. append ('var0') 
--------- B -----------
{'intent': {'gloss': ['append', 'list', 'var0', 'to', 'var1'], 'words': ['append', 'list', 'var0', 'to', 'var1'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylog', 'var1': 'list1'}, 'snippet': 'var1.extend(var0)'}
Generated  translation
var1. append ('var0') 
--------- B -----------
{'intent': {'gloss': ['append', 'list', 'var0', 'to', 'var1'], 'words': ['append', 'list', 'var0', 'to', 'var1'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'c'}, 'snippet': 'var1.extend(var0)'}
Generated  translation
var1. append ('var0') 
--------- B -----------
{'intent': {'gloss': ['insert', 'item', 'str0', 'to', 'a', 'list', 'var0'], 'words': ['insert', 'item', 'str0', 'to', 'a', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '12', 'var0': 'my_list'}, 'snippet': 'var0.append(12)'}
Generated  translation
var0. insert ( 0,'str0') 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'type', 'of', 'variable', 'var0'], 'words': ['get', 'the', 'type', 'of', 'variable', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'variable_name'}, 'snippet': 'print(type(var0))'}
Generated  translation
' var0'in locals ( ) 
--------- B -----------
{'intent': {'gloss': ['download', 'a', 'file', 'var0', 'over', 'http'], 'words': ['download', 'a', 'file', 'var0', 'over', 'http'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'url'}, 'snippet': 'r = requests.get(var0)'}
Generated  translation
webbrowser. open ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['read', 'keyboard', '-', 'input'], 'words': ['read', 'keyboard', '-', 'input'], 'after': [' ', '', '', '']}, 'slot_map': {}, 'snippet': "input('enter your input:')"}
Generated  translation
keyboard. read ( input - n '. read ( ) ) 
--------- B -----------
{'intent': {'gloss': ['append', 'elements', 'of', 'a', 'set', 'to', 'a', 'list', 'in', 'python'], 'words': ['append', 'elements', 'of', 'a', 'set', 'to', 'a', 'list', 'in', 'python'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'a.extend(list(b))'}
Generated  translation
[ x [ 0 ] for x in my _ list ] 
--------- B -----------
{'intent': {'gloss': ['change', 'working', 'directory', 'to', 'the', 'directory', 'var0'], 'words': ['change', 'working', 'directory', 'to', 'the', 'directory', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'owd'}, 'snippet': 'os.chdir(var0)'}
Generated  translation
os. chdir ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'dictionary', 'var0', 'in', 'ascending', 'order', 'based', 'on', 'its', 'keys', 'and', 'items'], 'words': ['sort', 'dictionary', 'var0', 'in', 'ascending', 'order', 'based', 'on', 'its', 'keys', 'and', 'items'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'o'}, 'snippet': 'sorted(var0.items())'}
Generated  translation
sorted ( list ( var0. items ( ) ), key = operator. itemgetter ( 1 ) ) 
--------- B -----------
{'intent': {'gloss': ['unzip', 'the', 'list', 'str0'], 'words': ['unzip', 'the', 'list', 'str0'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {'str0': "[('a', 1), ('b', 2), ('c', 3), ('d', 4)]", '[ str0 ]': "[('a', 1), ('b', 2), ('c', 3), ('d', 4)]"}, 'snippet': 'zip(*[ str0 ])'}
Generated  translation
sorted ( [ str0 ] ) 
--------- B -----------
{'intent': {'gloss': ['unzip', 'the', 'list', 'str0'], 'words': ['unzip', 'the', 'list', 'str0'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {'str0': "[('a', 1), ('b', 2), ('c', 3), ('d', 4)]", '[ str0 ]': "[('a', 1), ('b', 2), ('c', 3), ('d', 4)]"}, 'snippet': 'zip(*[ str0 ])'}
Generated  translation
sorted ( [ str0 ] ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'list', 'str0', 'into', 'a', 'dictionary'], 'words': ['convert', 'list', 'str0', 'into', 'a', 'dictionary'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "[('name', 'joe'), ('age', 22)]", '[ str0 ]': "[('name', 'joe'), ('age', 22)]"}, 'snippet': 'dict([ str0 ])'}
Generated  translation
dict ( map ( lambda s : s. split (':'), [ str0 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['plot', 'dataframe', 'var0', 'without', 'a', 'legend'], 'words': ['plot', 'dataframe', 'var0', 'without', 'a', 'legend'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': 'var0.plot(legend=false)'}
Generated  translation
var0. plot ( x ='col _ name _ _') 
--------- B -----------
{'intent': {'gloss': ['decode', 'json', 'string', 'str0', 'to', 'python', 'dict'], 'words': ['decode', 'json', 'string', 'str0', 'to', 'python', 'dict'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'request.body'}, 'snippet': 'json.loads(request.body)'}
Generated  translation
json. load ('str0') 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'datetime', 'with', 'the', 'current', 'date', '&', 'time'], 'words': ['create', 'a', 'datetime', 'with', 'the', 'current', 'date', '&', 'time'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'datetime.datetime.now()'}
Generated  translation
datetime. datetime. now ( ). date ( ) 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'multi', '-', 'line', 'string', 'var0', 'into', 'separate', 'strings'], 'words': ['split', 'a', 'multi', '-', 'line', 'string', 'var0', 'into', 'separate', 'strings'], 'after': [' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'inputstring'}, 'snippet': "var0.split('\\n')"}
Generated  translation
" " " " " ". join ( var0. split ( ) ) 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'string', 'var0', 'by', 'space', 'with', 'str0', 'splits'], 'words': ['split', 'a', 'string', 'var0', 'by', 'space', 'with', 'str0', 'splits'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's', 'str0': '4'}, 'snippet': "var0.split(' ', 4)"}
Generated  translation
[ i. strip ( ) for i in var0. split ('str0') ] 
--------- B -----------
{'intent': {'gloss': ['remove', 'key', 'str0', 'from', 'dictionary', 'var0'], 'words': ['remove', 'key', 'str0', 'from', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'ele', 'var0': 'd'}, 'snippet': "del var0['str0']"}
Generated  translation
var0. pop ('str0 ', none ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'tuple', 'var0', 'to', 'list'], 'words': ['convert', 'tuple', 'var0', 'to', 'list'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'level1'}, 'snippet': 'var0 = map(list, var0)'}
Generated  translation
[ ( i, j ) for i in var0 ] 
--------- B -----------
{'intent': {'gloss': ['get', 'attribute', 'var0', 'of', 'object', 'var1'], 'words': ['get', 'attribute', 'var0', 'of', 'object', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'my_str', 'var1': 'my_object'}, 'snippet': 'getattr(var1, var0)'}
Generated  translation
print ( var1. var0 ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'object', 'var0', 'is', 'a', 'string'], 'words': ['check', 'if', 'object', 'var0', 'is', 'a', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'obj'}, 'snippet': 'isinstance(var0, str)'}
Generated  translation
isinstance ( var0, str ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'object', 'var0', 'is', 'a', 'string'], 'words': ['check', 'if', 'object', 'var0', 'is', 'a', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'o'}, 'snippet': 'isinstance(var0, str)'}
Generated  translation
isinstance ( var0, str ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'object', 'var0', 'is', 'a', 'string'], 'words': ['check', 'if', 'object', 'var0', 'is', 'a', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'o'}, 'snippet': 'isinstance(var0, str)'}
Generated  translation
isinstance ( var0, str ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'var0', 'is', 'a', 'string'], 'words': ['check', 'if', 'var0', 'is', 'a', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'obj_to_test'}, 'snippet': 'isinstance(var0, str)'}
Generated  translation
isinstance ( var0, str ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'path', 'var0', 'is', 'an', 'absolute', 'path'], 'words': ['check', 'if', 'path', 'var0', 'is', 'an', 'absolute', 'path'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'my_path'}, 'snippet': 'os.path.isabs(var0)'}
Generated  translation
os. path. isfile ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['reload', 'a', 'module', 'var0'], 'words': ['reload', 'a', 'module', 'var0'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {'var0': 'module'}, 'snippet': 'import imp\nimp.reload(var0)'}
Generated  translation
sys. exit ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['enable', 'debug', 'mode', 'on', 'flask', 'application', 'var0'], 'words': ['enable', 'debug', 'mode', 'on', 'flask', 'application', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'app'}, 'snippet': 'var0.run(debug=true)'}
Generated  translation
var0. seek ( debug = true ) 
--------- B -----------
{'intent': {'gloss': ['how', 'do', 'i', 'get', 'the', 'url', 'parameter', 'in', 'a', 'flask', 'view'], 'words': ['how', 'do', 'i', 'get', 'the', 'url', 'parameter', 'in', 'a', 'flask', 'view'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "request.args['myparam']"}
Generated  translation
self. root. destroy ( ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'characters', 'count', 'in', 'a', 'file', 'var0'], 'words': ['get', 'the', 'characters', 'count', 'in', 'a', 'file', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'filepath'}, 'snippet': 'os.stat(var0).st_size'}
Generated  translation
len ( set ( var0 ). intersection ( var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['count', 'the', 'occurrences', 'of', 'item', 'str0', 'in', 'list', 'var0'], 'words': ['count', 'the', 'occurrences', 'of', 'item', 'str0', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'a', 'var0': 'l'}, 'snippet': "var0.count('str0')"}
Generated  translation
len ( var0 ) - len ( var0. rstrip ('str0') ) 
--------- B -----------
{'intent': {'gloss': ['count', 'the', 'occurrences', 'of', 'item', 'str0', 'in', 'list', 'var0'], 'words': ['count', 'the', 'occurrences', 'of', 'item', 'str0', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'b', 'var0': 'l'}, 'snippet': "var0.count('str0')"}
Generated  translation
len ( var0 ) - len ( var0. rstrip ('str0') ) 
--------- B -----------
{'intent': {'gloss': ['copy', 'file', 'var0', 'to', 'directory', 'var1'], 'words': ['copy', 'file', 'var0', 'to', 'directory', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'srcfile', 'var1': 'dstdir'}, 'snippet': 'shutil.copy(var0, var1)'}
Generated  translation
shutil. copy2 ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['how', 'to', 'get', 'a', 'single', 'result', 'from', 'a', 'sqlite', 'query', 'in', 'python', '?'], 'words': ['how', 'to', 'get', 'a', 'single', 'result', 'from', 'a', 'sqlite', 'query', 'in', 'python', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'cursor.fetchone()[0]'}
Generated  translation
cursor. execute ('insert into table values ( % s, % s, % s ) ', ( var1, var2, var3 ) ) 
--------- B -----------
{'intent': {'gloss': ['calculate', 'mean', 'across', 'dimension', 'in', 'a', '2d', 'array', 'var0'], 'words': ['calculate', 'mean', 'across', 'dimension', 'in', 'a', '2d', 'array', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'np.mean(var0, axis=1)'}
Generated  translation
np. zeros ( var0 ). sum ( axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'position', 'of', 'item', 'var0', 'in', 'list', 'var1'], 'words': ['get', 'the', 'position', 'of', 'item', 'var0', 'in', 'list', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'element', 'var1': 'testlist'}, 'snippet': 'print(var1.index(var0))'}
Generated  translation
print ( var1 [ len ( var0 ) ] ) 
--------- B -----------
{'intent': {'gloss': ['add', 'key', 'str0', 'to', 'dictionary', 'var0', 'with', 'value', '1'], 'words': ['add', 'key', 'str0', 'to', 'dictionary', 'var0', 'with', 'value', '1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'a', 'var0': 'data'}, 'snippet': 'var0.update(str0=1)'}
Generated  translation
var0. update ( {'str0': 3 } ) 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'value', 'of', 'datetime', '.', 'today', '(', ')', 'in', 'the', 'utc', 'time', 'zone'], 'words': ['get', 'a', 'value', 'of', 'datetime', '.', 'today', '(', ')', 'in', 'the', 'utc', 'time', 'zone'], 'after': [' ', ' ', ' ', ' ', '', '', '', '', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'datetime.now(pytz.utc)'}
Generated  translation
datetime. datetime. utcnow ( ). time ( ) 
--------- B -----------
{'intent': {'gloss': ['round', 'off', 'the', 'float', 'that', 'is', 'the', 'product', 'of', 'str0', 'and', 'convert', 'it', 'to', 'an', 'int'], 'words': ['round', 'off', 'the', 'float', 'that', 'is', 'the', 'product', 'of', 'str0', 'and', 'convert', 'it', 'to', 'an', 'int'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '2.52 * 100'}, 'snippet': 'int(round(2.51 * 100))'}
Generated  translation
struct. unpack ('d ', dtype = none ) [ 0 ] 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'by', 'str0'], 'words': ['split', 'string', 'var0', 'by', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'text', 'str0': ','}, 'snippet': "var0.split('str0')"}
Generated  translation
var0. split ('str0') 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'urllib', 'unquoted', 'string', 'var0', 'to', 'a', 'json', 'data', 'var1'], 'words': ['convert', 'a', 'urllib', 'unquoted', 'string', 'var0', 'to', 'a', 'json', 'data', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'unescaped', 'var1': 'json_data'}, 'snippet': 'var1 = json.loads(var0)'}
Generated  translation
var1 = json. dumps ( [ ob. _ _ dict _ _ for ob in var0 ] ) 
--------- B -----------
{'intent': {'gloss': ['open', 'file', 'var0', 'with', 'mode', 'str0'], 'words': ['open', 'file', 'var0', 'with', 'mode', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'path', 'str0': 'r'}, 'snippet': "open(var0, 'str0')"}
Generated  translation
x _ file = open ( os. path. join ( var0,'str0'),'r') 
--------- B -----------
{'intent': {'gloss': ['enable', 'warnings', 'using', 'action', 'str0'], 'words': ['enable', 'warnings', 'using', 'action', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'always'}, 'snippet': "warnings.simplefilter('str0')"}
Generated  translation
warnings. findall ('str0') 
--------- B -----------
{'intent': {'gloss': ['create', 'new', 'matrix', 'object', 'by', 'concatenating', 'data', 'from', 'matrix', 'a', 'and', 'matrix', 'b'], 'words': ['create', 'new', 'matrix', 'object', 'by', 'concatenating', 'data', 'from', 'matrix', 'a', 'and', 'matrix', 'b'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'np.concatenate((a, b))'}
Generated  translation
numpy. concatenate ( [ a, b ], b [ 1, 2 ] ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'raw', 'string', 'var0', 'into', 'a', 'normal', 'string'], 'words': ['convert', 'a', 'raw', 'string', 'var0', 'into', 'a', 'normal', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'raw_string'}, 'snippet': "var0.decode('string_escape')"}
Generated  translation
var0. replace ('\ \ ','' ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'raw', 'string', 'var0', 'into', 'a', 'normal', 'string'], 'words': ['convert', 'a', 'raw', 'string', 'var0', 'into', 'a', 'normal', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'raw_byte_string'}, 'snippet': "var0.decode('unicode_escape')"}
Generated  translation
var0. replace ('\ \ ','' ) 
--------- B -----------
{'intent': {'gloss': ['cast', 'an', 'int', 'var0', 'to', 'a', 'string', 'and', 'concat', 'to', 'string', 'str0'], 'words': ['cast', 'an', 'int', 'var0', 'to', 'a', 'string', 'and', 'concat', 'to', 'string', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'i', 'str0': 'me'}, 'snippet': "'str0' + str(var0)"}
Generated  translation
" " " str0 " " ". join ( x or'0'for x in var0. split ('str0') ) 
--------- B -----------
{'intent': {'gloss': ['length', 'of', 'longest', 'element', 'in', 'list', 'var0'], 'words': ['length', 'of', 'longest', 'element', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'words'}, 'snippet': 'len(max(var0, key=len))'}
Generated  translation
print ( max ( var0, key = len ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'value', 'associated', 'with', 'unicode', 'key', 'str0', 'of', 'first', 'dictionary', 'in', 'list', 'var0'], 'words': ['get', 'the', 'value', 'associated', 'with', 'unicode', 'key', 'str0', 'of', 'first', 'dictionary', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'from_user', 'var0': 'result'}, 'snippet': "var0[0]['str0']"}
Generated  translation
print ( var0 ['str0'] [ 0 ] ['str0'] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'list', 'from', 'a', 'list', 'var0', 'with', 'values', 'mapped', 'into', 'a', 'dictionary', 'var1'], 'words': ['get', 'a', 'list', 'from', 'a', 'list', 'var0', 'with', 'values', 'mapped', 'into', 'a', 'dictionary', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'lst', 'var1': 'dct'}, 'snippet': '[var1[k] for k in var0]'}
Generated  translation
[ v for k, v in var0. items ( ) if v. count ('var1') ] 
--------- B -----------
{'intent': {'gloss': ['get', 'number', 'of', 'keys', 'in', 'dictionary', 'var0'], 'words': ['get', 'number', 'of', 'keys', 'in', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'yourdict'}, 'snippet': 'len(list(var0.keys()))'}
Generated  translation
sum ( len ( x ) for x in list ( var0. values ( ) ) ) 
--------- B -----------
{'intent': {'gloss': ['reverse', 'a', 'priority', 'queue', 'var0', 'in', 'python', 'without', 'using', 'classes'], 'words': ['reverse', 'a', 'priority', 'queue', 'var0', 'in', 'python', 'without', 'using', 'classes'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'q'}, 'snippet': 'var0.put((-n, n))'}
Generated  translation
super ( var0, self ). _ _ init _ _ ( * args ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'directory', 'tree', 'str0'], 'words': ['remove', 'directory', 'tree', 'str0'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {'str0': '/folder_name'}, 'snippet': "shutil.rmtree('str0')"}
Generated  translation
os. path. join ( * x. split ( os. path. sep ) [ 2 : ] ) 
--------- B -----------
{'intent': {'gloss': ['numpy', 'concatenate', 'two', 'arrays', 'var0', 'and', 'var1', 'along', 'the', 'first', 'axis'], 'words': ['numpy', 'concatenate', 'two', 'arrays', 'var0', 'and', 'var1', 'along', 'the', 'first', 'axis'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'b'}, 'snippet': 'np.array((var0, var1))'}
Generated  translation
numpy. concatenate ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['select', 'the', 'last', 'column', 'of', 'dataframe', 'var0'], 'words': ['select', 'the', 'last', 'column', 'of', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': 'var0[var0.columns[-1]]'}
Generated  translation
var0. ix [ : - 1 ] 
--------- B -----------
{'intent': {'gloss': ['join', 'a', 'list', 'of', 'strings', 'var0', 'using', 'a', 'space', 'str0'], 'words': ['join', 'a', 'list', 'of', 'strings', 'var0', 'using', 'a', 'space', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list', 'str0': ''}, 'snippet': '""" """.join(var0)'}
Generated  translation
var0 = [ x. join ('str0') for x in var0 ] 
--------- B -----------
{'intent': {'gloss': ['drop', 'rows', 'of', 'pandas', 'dataframe', 'var0', 'having', 'nan', 'in', 'column', 'at', 'index', 'str0'], 'words': ['drop', 'rows', 'of', 'pandas', 'dataframe', 'var0', 'having', 'nan', 'in', 'column', 'at', 'index', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': '1'}, 'snippet': 'var0.dropna(subset=[1])'}
Generated  translation
var0. drop ( var0. index [ ['str0'], axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['reverse', 'the', 'list', 'that', 'contains', '1', 'to', '10'], 'words': ['reverse', 'the', 'list', 'that', 'contains', '1', 'to', '10'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'list(reversed(list(range(10))))'}
Generated  translation
[ i for i in range ( 10 ) ] 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'str0', 'into', 'a', 'list', 'on', 'white', 'spaces'], 'words': ['split', 'string', 'str0', 'into', 'a', 'list', 'on', 'white', 'spaces'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'qh qd jc kd js'}, 'snippet': '"""str0""".split()'}
Generated  translation
" " " str0 " " ". split ( ) 
--------- B -----------
{'intent': {'gloss': ['erase', 'all', 'the', 'contents', 'of', 'a', 'file', 'var0'], 'words': ['erase', 'all', 'the', 'contents', 'of', 'a', 'file', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'filename'}, 'snippet': "open(var0, 'w').close()"}
Generated  translation
shutil. rmtree ( var0, ignore _ errors = false, onerror = none ) 
--------- B -----------
{'intent': {'gloss': ['add', 'indexes', 'in', 'a', 'data', 'frame', 'var0', 'to', 'a', 'column', 'var1'], 'words': ['add', 'indexes', 'in', 'a', 'data', 'frame', 'var0', 'to', 'a', 'column', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'var1': 'index1'}, 'snippet': "var0['var1'] = var0.index"}
Generated  translation
var1 = pd. dataframe ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'list', 'containing', 'flattened', 'list', 'str0'], 'words': ['create', 'a', 'list', 'containing', 'flattened', 'list', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "[['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]", '[ str0 ]': "[['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]"}, 'snippet': 'values = sum([ str0 ], [])'}
Generated  translation
[ str0 ] 
--------- B -----------
{'intent': {'gloss': ['replace', 'spaces', 'with', 'underscore'], 'words': ['replace', 'spaces', 'with', 'underscore'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "mystring.replace(' ', '_')"}
Generated  translation
re. sub ('(? < =. ) ','\ \ 1 ', text ) 
--------- B -----------
{'intent': {'gloss': ['get', 'an', 'absolute', 'file', 'path', 'of', 'file', 'str0'], 'words': ['get', 'an', 'absolute', 'file', 'path', 'of', 'file', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'mydir/myfile.txt'}, 'snippet': "os.path.abspath('str0')"}
Generated  translation
os. path. split ( os. path. abspath ( str0 ) ) 
--------- B -----------
{'intent': {'gloss': ['check', 'characters', 'of', 'string', 'var0', 'are', 'true', 'predication', 'of', 'function', 'var1'], 'words': ['check', 'characters', 'of', 'string', 'var0', 'are', 'true', 'predication', 'of', 'function', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'string', 'var1': 'predicate'}, 'snippet': 'all(var1(x) for x in var0)'}
Generated  translation
print ( var0 ['var1'] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'attribute', 'str0', 'from', 'object', 'var0'], 'words': ['get', 'attribute', 'str0', 'from', 'object', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'attr', 'var0': 'obj'}, 'snippet': "getattr(var0, 'str0')"}
Generated  translation
getattr ( var0,'str0') 
--------- B -----------
{'intent': {'gloss': ['create', 'var0', 'to', 'contain', 'the', 'lists', 'from', 'list', 'var1', 'excluding', 'the', 'empty', 'lists', 'from', 'var1'], 'words': ['create', 'var0', 'to', 'contain', 'the', 'lists', 'from', 'list', 'var1', 'excluding', 'the', 'empty', 'lists', 'from', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list2', 'var1': 'list1', 'var2': 'list1'}, 'snippet': 'var0 = [x for x in var2 if x]'}
Generated  translation
var0 = [ [ x for x in var1 if x ] for y in var0 ] 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'based', 'on', 'occurrences', 'of', 'regex', 'pattern', 'str0'], 'words': ['split', 'string', 'var0', 'based', 'on', 'occurrences', 'of', 'regex', 'pattern', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'input', 'str0': '[ ](?=[a-z]+\\b)', '[ str0 )': '[ ](?=[a-z]+\\b)'}, 'snippet': "re.split('str0', var0)"}
Generated  translation
re. split ('str0 ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['place', 'the', 'radial', 'ticks', 'in', 'plot', 'var0', 'at', '135', 'degrees'], 'words': ['place', 'the', 'radial', 'ticks', 'in', 'plot', 'var0', 'at', '135', 'degrees'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'ax'}, 'snippet': 'var0.set_rlabel_position(135)'}
Generated  translation
var0. fillna ( method ='ffill ', inplace = true ) 
--------- B -----------
{'intent': {'gloss': ['get', 'html', 'source', 'of', 'selenium', 'webelement', 'var0'], 'words': ['get', 'html', 'source', 'of', 'selenium', 'webelement', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'element'}, 'snippet': "var0.get_attribute('innerhtml')"}
Generated  translation
driver. find _ element _ by _ xpath ( " / / div [ @ id ='a'] / / a [ @ class ='click'] " ) 
--------- B -----------
{'intent': {'gloss': ['add', 'an', 'entry', 'str0', 'at', 'the', 'beginning', 'of', 'list', 'var0'], 'words': ['add', 'an', 'entry', 'str0', 'at', 'the', 'beginning', 'of', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'wuggah', 'var0': 'mylist'}, 'snippet': "var0.insert(0, 'str0')"}
Generated  translation
var0 = [ i [ 0 ] for i in var0 ] 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'last', 'key', 'of', 'dictionary', 'var0'], 'words': ['get', 'the', 'last', 'key', 'of', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'dict'}, 'snippet': 'list(var0.keys())[-1]'}
Generated  translation
var0 [ - 1 ] 
--------- B -----------
{'intent': {'gloss': ['write', 'line', 'str0', 'to', 'file', 'var0'], 'words': ['write', 'line', 'str0', 'to', 'file', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'hi there', 'var0': 'f'}, 'snippet': "print('str0', file=var0)"}
Generated  translation
var0. write ('str0') 
--------- B -----------
{'intent': {'gloss': ['add', 'a', 'new', 'axis', 'to', 'array', 'var0'], 'words': ['add', 'a', 'new', 'axis', 'to', 'array', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'var0[:, (np.newaxis)]'}
Generated  translation
var0 [ : - 1 ] 
--------- B -----------
{'intent': {'gloss': ['open', 'a', 'file', 'str0', 'in', 'append', 'mode'], 'words': ['open', 'a', 'file', 'str0', 'in', 'append', 'mode'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'output.txt'}, 'snippet': "file = open('str0', 'a')"}
Generated  translation
f = open ('str0 ','rb') 
--------- B -----------
{'intent': {'gloss': ['format', 'string', 'str0'], 'words': ['format', 'string', 'str0'], 'after': [' ', ' ', '']}, 'slot_map': {'str0': '({0.goals} goals, ${0.penalties})', '( str0 )': '({0.goals} goals, ${0.penalties})'}, 'snippet': '"""str0""".format(self)'}
Generated  translation
" " " hello " " ". format ('str0') 
--------- B -----------
{'intent': {'gloss': ['concat', 'two', 'matrices', 'var0', 'and', 'var1', 'in', 'numpy'], 'words': ['concat', 'two', 'matrices', 'var0', 'and', 'var1', 'in', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'b'}, 'snippet': 'np.vstack((var0, var1))'}
Generated  translation
np. einsum ('ijk, ikl - > ijl ', var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['send', 'the', 'output', 'of', 'pprint', 'object', 'var0', 'to', 'file', 'var1'], 'words': ['send', 'the', 'output', 'of', 'pprint', 'object', 'var0', 'to', 'file', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'dataobject', 'var1': 'logfile'}, 'snippet': 'pprint.pprint(var0, var1)'}
Generated  translation
var1 = open ('var0'). read ( ). decode ('var1') 
--------- B -----------
{'intent': {'gloss': ['iterate', 'ove', 'list', 'str0', 'using', 'list', 'comprehension'], 'words': ['iterate', 'ove', 'list', 'str0', 'using', 'list', 'comprehension'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '[1, 2, 3]', '[ str0 ]': '[1, 2, 3]'}, 'snippet': 'print([item for item in [ str0 ]])'}
Generated  translation
dict ( [ str0 ] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'filename', 'without', 'extension', 'from', 'file', 'var0'], 'words': ['get', 'filename', 'without', 'extension', 'from', 'file', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'filename'}, 'snippet': 'os.path.splitext(var0)[0]'}
Generated  translation
os. path. dirname ( os. path. abspath ( var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'objects', 'var0', ',', 'based', 'on', 'a', 'function', 'var1', 'in', 'descending', 'order'], 'words': ['sort', 'a', 'list', 'of', 'objects', 'var0', ',', 'based', 'on', 'a', 'function', 'var1', 'in', 'descending', 'order'], 'after': [' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'ut', 'var1': 'cmpfun'}, 'snippet': 'var0.sort(key=var1, reverse=true)'}
Generated  translation
var0. sort ( key = lambda x : x. var1, reverse = true ) 
--------- B -----------
{'intent': {'gloss': ['call', 'a', 'shell', 'script', 'var0', 'using', 'subprocess'], 'words': ['call', 'a', 'shell', 'script', 'var0', 'using', 'subprocess'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'notepad'}, 'snippet': "subprocess.call(['var0'])"}
Generated  translation
subprocess. call ('test. sh otherfunc') 
--------- B -----------
{'intent': {'gloss': ['call', 'a', 'base', 'class', "'", 's', 'class', 'method', 'var0', 'from', 'derived', 'class', 'var1'], 'words': ['call', 'a', 'base', 'class', "'", 's', 'class', 'method', 'var0', 'from', 'derived', 'class', 'var1'], 'after': [' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'do', 'var1': 'derived'}, 'snippet': 'super(var1, cls).var0(a)'}
Generated  translation
cursor. execute ('insert into table values ( % s, % s, % s ) ', ( var0, var1, var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['open', 'a', 'file', 'str0', 'in', 'write', 'mode'], 'words': ['open', 'a', 'file', 'str0', 'in', 'write', 'mode'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'yourfile.txt'}, 'snippet': "f = open('str0', 'w')"}
Generated  translation
f = open ('str0 ','rb') 
--------- B -----------
{'intent': {'gloss': ['find', 'maximal', 'value', 'in', 'matrix', 'var0'], 'words': ['find', 'maximal', 'value', 'in', 'matrix', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'matrix'}, 'snippet': 'max([max(i) for i in var0])'}
Generated  translation
min ( var0, key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['round', 'number', 'var0', 'to', '2', 'precision', 'after', 'the', 'decimal', 'point'], 'words': ['round', 'number', 'var0', 'to', '2', 'precision', 'after', 'the', 'decimal', 'point'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'answer'}, 'snippet': 'var0 = str(round(var0, 2))'}
Generated  translation
round ( var0, 2 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'list', 'of', 'values', 'from', 'dictionary', 'str0', 'w', '.', 'r', '.', 't', '.', 'list', 'of', 'keys', 'str1'], 'words': ['get', 'list', 'of', 'values', 'from', 'dictionary', 'str0', 'w', '.', 'r', '.', 't', '.', 'list', 'of', 'keys', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'mydict', 'str1': 'mykeys'}, 'snippet': '[str0[x] for x in str1]'}
Generated  translation
[ key for item in str0. items ( ) if item. count ('str1') ] 
--------- B -----------
{'intent': {'gloss': ['append', 'items', 'in', 'list', 'var0', 'to', 'var1'], 'words': ['append', 'items', 'in', 'list', 'var0', 'to', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylog', 'var1': 'list1'}, 'snippet': 'for line in var0:\n    var1.append(line)'}
Generated  translation
var1. append ('var0') 
--------- B -----------
{'intent': {'gloss': ['truncate', 'float', '1', '.', '923328437452', 'to', '3', 'decimal', 'places'], 'words': ['truncate', 'float', '1', '.', '923328437452', 'to', '3', 'decimal', 'places'], 'after': [' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'round(1.923328437452, 3)'}
Generated  translation
float ('{ 0 :. 2f } '. format ( 1. 92332 ) ) 
--------- B -----------
{'intent': {'gloss': ['extract', 'attributes', 'str0', 'from', 'string', 'var0'], 'words': ['extract', 'attributes', 'str0', 'from', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'src="js/([^"]*\\bjquery\\b[^"]*)"', 'var0': 'data'}, 'snippet': "re.findall('str0', var0)"}
Generated  translation
" " " str0 " " ". replace ('str0 ','' ) 
--------- B -----------
{'intent': {'gloss': ['find', 'all', 'matches', 'of', 'regex', 'pattern', 'str0', 'in', 'string', 'var0'], 'words': ['find', 'all', 'matches', 'of', 'regex', 'pattern', 'str0', 'in', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '([a-fa-f\\d]{32})', 'var0': 'data', '( str0 )': '([a-fa-f\\d]{32})'}, 'snippet': "re.findall('str0', var0)"}
Generated  translation
re. findall ('str0 ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', '401', 'unauthorized', 'in', 'django'], 'words': ['return', 'a', '401', 'unauthorized', 'in', 'django'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "return httpresponse('unauthorized', status=401)"}
Generated  translation
return 401 
--------- B -----------
{'intent': {'gloss': ['create', 'list', 'var0', 'containing', 'two', 'empty', 'lists'], 'words': ['create', 'list', 'var0', 'containing', 'two', 'empty', 'lists'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'y'}, 'snippet': 'var0 = [[] for n in range(2)]'}
Generated  translation
var0 = [ [ ] for i in range ( 3 ) ] 
--------- B -----------
{'intent': {'gloss': ['converting', 'list', 'of', 'strings', 'var0', 'to', 'list', 'of', 'integer', 'var1'], 'words': ['converting', 'list', 'of', 'strings', 'var0', 'to', 'list', 'of', 'integer', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'intstringlist', 'var1': 'nums'}, 'snippet': 'var1 = [int(x) for x in var0]'}
Generated  translation
[ int ( x ) for x in str ( var0 ) ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'int', 'values', 'in', 'list', 'var0', 'to', 'float'], 'words': ['convert', 'int', 'values', 'in', 'list', 'var0', 'to', 'float'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'numlist'}, 'snippet': 'var0 = [float(x) for x in var0]'}
Generated  translation
[ float ( i ) for i in var0 ] 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'list', 'containing', 'all', 'ascii', 'characters', 'as', 'its', 'elements'], 'words': ['create', 'a', 'list', 'containing', 'all', 'ascii', 'characters', 'as', 'its', 'elements'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': '[chr(i) for i in range(127)]'}
Generated  translation
list ('ascii') 
--------- B -----------
{'intent': {'gloss': ['concatenate', 'a', 'list', 'of', 'strings', 'str0'], 'words': ['concatenate', 'a', 'list', 'of', 'strings', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "['a', 'b', 'c']", '[ str0 ]': "['a', 'b', 'c']"}, 'snippet': '"""""".join([ str0 ])'}
Generated  translation
" " " " " ". join ( str0 ) 
--------- B -----------
{'intent': {'gloss': ['create', '3d', 'array', 'of', 'zeroes', 'of', 'size', 'str0'], 'words': ['create', '3d', 'array', 'of', 'zeroes', 'of', 'size', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '(3,3,3)', '( str0 )': '(3,3,3)'}, 'snippet': 'numpy.zeros((3, 3, 3))'}
Generated  translation
print ( np. linspace ( 1, 3, num = 5 ) ) 
--------- B -----------
{'intent': {'gloss': ['join', 'elements', 'of', 'list', 'var0', 'with', 'a', 'comma', 'str0'], 'words': ['join', 'elements', 'of', 'list', 'var0', 'with', 'a', 'comma', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l', 'str0': ','}, 'snippet': '"""str0""".join(var0)'}
Generated  translation
[ ( x + y ) for x in var0. split ('str0') ] 
--------- B -----------
{'intent': {'gloss': ['filter', 'rows', 'in', 'pandas', 'starting', 'with', 'alphabet', 'str0', 'using', 'regular', 'expression', '.'], 'words': ['filter', 'rows', 'in', 'pandas', 'starting', 'with', 'alphabet', 'str0', 'using', 'regular', 'expression', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'f'}, 'snippet': "df.b.str.contains('^f')"}
Generated  translation
df ['str0']. apply ( lambda x : x [ len ( x ) / 2 - 1 : len ( x ) / 2 + 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['initialize', 'a', 'list', 'var0', 'of', '100', 'objects', 'object', '(', ')'], 'words': ['initialize', 'a', 'list', 'var0', 'of', '100', 'objects', 'object', '(', ')'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '']}, 'slot_map': {'var0': 'lst'}, 'snippet': 'var0 = [object() for _ in range(100)]'}
Generated  translation
var0 = [ [ 0 ] for i in range ( 100 ) ] 
--------- B -----------
{'intent': {'gloss': ['get', 'reverse', 'of', 'list', 'items', 'from', 'list', 'str0', 'using', 'extended', 'slicing'], 'words': ['get', 'reverse', 'of', 'list', 'items', 'from', 'list', 'str0', 'using', 'extended', 'slicing'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'b'}, 'snippet': '[x[::-1] for x in str0]'}
Generated  translation
[ k for k, v in itertools. groupby ( [ str0 ] ) ] 
--------- B -----------
{'intent': {'gloss': ['removing', 'duplicates', 'in', 'list', 'var0'], 'words': ['removing', 'duplicates', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'abracadabra'}, 'snippet': "list(ordereddict.fromkeys('var0'))"}
Generated  translation
mynewlist = list ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['call', 'a', 'shell', 'script', 'str0', 'using', 'subprocess'], 'words': ['call', 'a', 'shell', 'script', 'str0', 'using', 'subprocess'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': './test.sh'}, 'snippet': "subprocess.call(['str0'])"}
Generated  translation
subprocess. call ('test. sh otherfunc') 
--------- B -----------
{'intent': {'gloss': ['separate', 'words', 'delimited', 'by', 'one', 'or', 'more', 'spaces', 'into', 'a', 'list'], 'words': ['separate', 'words', 'delimited', 'by', 'one', 'or', 'more', 'spaces', 'into', 'a', 'list'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "re.split(' +', 'hello world sample text')"}
Generated  translation
re. sub ('\ \ w + ','','', text ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'list', 'into', 'a', 'generator', 'object'], 'words': ['convert', 'a', 'list', 'into', 'a', 'generator', 'object'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': '(n for n in [1, 2, 3, 5])'}
Generated  translation
i = [ ( i ) for i in range ( 100 ) ] 
--------- B -----------
{'intent': {'gloss': ['encode', 'str0', 'to', 'a', 'json', 'string'], 'words': ['encode', 'str0', 'to', 'a', 'json', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "decimal('3.9')"}, 'snippet': "json.dumps(decimal('3.9'))"}
Generated  translation
" " " \ \ xc3 \ \ x85あ " " ". encode ('utf - 8') 
--------- B -----------
{'intent': {'gloss': ['add', 'key', 'str0', 'to', 'dictionary', 'var0', 'with', 'value', 'str1'], 'words': ['add', 'key', 'str0', 'to', 'dictionary', 'var0', 'with', 'value', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'mynewkey', 'var0': 'd', 'str1': 'mynewvalue'}, 'snippet': "var0['str0'] = 'str1'"}
Generated  translation
var0. update ( {'str0': 3 } ) 
--------- B -----------
{'intent': {'gloss': ['add', 'key', 'str0', 'to', 'dictionary', 'var0', 'with', 'value', '1'], 'words': ['add', 'key', 'str0', 'to', 'dictionary', 'var0', 'with', 'value', '1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'a', 'var0': 'data'}, 'snippet': "var0.update({'str0': 1})"}
Generated  translation
var0. update ( {'str0': 3 } ) 
--------- B -----------
{'intent': {'gloss': ['add', 'key', 'str0', 'to', 'dictionary', 'var0', 'with', 'value', '1'], 'words': ['add', 'key', 'str0', 'to', 'dictionary', 'var0', 'with', 'value', '1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'a', 'var0': 'data'}, 'snippet': 'var0.update(dict(str0=1))'}
Generated  translation
var0. update ( {'str0': 3 } ) 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'string', 'into', 'a', 'list', 'of', 'words', 'and', 'whitespace'], 'words': ['split', 'a', 'string', 'into', 'a', 'list', 'of', 'words', 'and', 'whitespace'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "re.split('(\\\\w+)', s)"}
Generated  translation
re. findall ('\ \ s + ','str1') 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'integer', 'location', 'of', 'a', 'key', 'var0', 'in', 'a', 'pandas', 'data', 'frame'], 'words': ['get', 'the', 'integer', 'location', 'of', 'a', 'key', 'var0', 'in', 'a', 'pandas', 'data', 'frame'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'bob'}, 'snippet': "df.index.get_loc('var0')"}
Generated  translation
df. apply ( lambda x : x. fillna ( x. mean ( ) ), axis = 0 ) 
--------- B -----------
{'intent': {'gloss': ['add', 'an', 'item', 'with', 'key', 'str0', 'and', 'value', '1', 'to', 'an', 'dictionary', 'var0'], 'words': ['add', 'an', 'item', 'with', 'key', 'str0', 'and', 'value', '1', 'to', 'an', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'third_key', 'var0': 'my_dict'}, 'snippet': "var0.update({'str0': 1})"}
Generated  translation
var0. update ( {'str0': 3 } ) 
--------- B -----------
{'intent': {'gloss': ['print', 'a', 'string', 'var0', 'with', 'string', 'format'], 'words': ['print', 'a', 'string', 'var0', 'with', 'string', 'format'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'word'}, 'snippet': 'print(\'"{}"\'.format(var0))'}
Generated  translation
print ('value is " { } " '. format ( var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['print', 'str0', 'without', 'newline'], 'words': ['print', 'str0', 'without', 'newline'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {'str0': '.'}, 'snippet': "sys.stdout.write('str0')"}
Generated  translation
print ('[ % s, % s, % s ]'% ( 1, 2, 3 ) ) 
--------- B -----------
{'intent': {'gloss': ['concatenate', 'array', 'of', 'strings', 'str0', 'into', 'a', 'string'], 'words': ['concatenate', 'array', 'of', 'strings', 'str0', 'into', 'a', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "['a', 'b', 'c', 'd']", '[ str0 ]': "['a', 'b', 'c', 'd']"}, 'snippet': '"""""".join([ str0 ])'}
Generated  translation
" " " " " ". join ( str0 ) 
--------- B -----------
{'intent': {'gloss': ['write', 'dataframe', 'var0', ',', 'excluding', 'index', ',', 'to', 'a', 'csv', 'file'], 'words': ['write', 'dataframe', 'var0', ',', 'excluding', 'index', ',', 'to', 'a', 'csv', 'file'], 'after': [' ', ' ', '', ' ', ' ', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': 'var0.to_csv(filename, index=false)'}
Generated  translation
var0. to _ csv ( var0, index = false ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'unicode', 'string', 'var0', 'to', 'ascii'], 'words': ['convert', 'unicode', 'string', 'var0', 'to', 'ascii'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': "var0.encode('iso-8859-15')"}
Generated  translation
var0. decode ('unicode _ escape') 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'all', 'elements', 'in', 'list', 'var0', 'are', 'identical'], 'words': ['check', 'if', 'all', 'elements', 'in', 'list', 'var0', 'are', 'identical'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylist'}, 'snippet': 'all(x == var0[0] for x in var0)'}
Generated  translation
len ( set ( var0 ) ) = = 1 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'first', 'object', 'from', 'a', 'queryset', 'in', 'django', 'model', 'var0'], 'words': ['get', 'the', 'first', 'object', 'from', 'a', 'queryset', 'in', 'django', 'model', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'entry'}, 'snippet': 'var0.objects.filter()[:1].get()'}
Generated  translation
var0. objects. order _ by ( '?') [ 0 ] 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'str0', 'using', 'a', 'regex', 'str1'], 'words': ['split', 'string', 'str0', 'using', 'a', 'regex', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'words, words, words.', 'str1': '(\\w+)', '( str1 )': '(\\w+)'}, 'snippet': "re.split('str1', 'str0')"}
Generated  translation
re. split ('str1 ','str0') 
--------- B -----------
{'intent': {'gloss': ['sum', 'elements', 'at', 'index', 'var0', 'of', 'each', 'list', 'in', 'list', 'var1'], 'words': ['sum', 'elements', 'at', 'index', 'var0', 'of', 'each', 'list', 'in', 'list', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'column', 'var1': 'data'}, 'snippet': 'print(sum(row[var0] for row in var1))'}
Generated  translation
map ( sum, zip ( * var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['flatten', 'list', 'var0'], 'words': ['flatten', 'list', 'var0'], 'after': [' ', ' ', '']}, 'slot_map': {'var0': 'list_of_menuitems'}, 'snippet': '[image for menuitem in var0 for image in menuitem]'}
Generated  translation
var0 = [ i [ 0 ] for i in var0 ] 
--------- B -----------
{'intent': {'gloss': ['create', 'array', 'containing', 'the', 'maximum', 'value', 'of', 'respective', 'elements', 'of', 'array', 'str0', 'and', 'array', 'str1'], 'words': ['create', 'array', 'containing', 'the', 'maximum', 'value', 'of', 'respective', 'elements', 'of', 'array', 'str0', 'and', 'array', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '[2, 3, 4]', 'str1': '[1, 5, 2]', '[ str0 ]': '[2, 3, 4]', '[ str1 ]': '[1, 5, 2]'}, 'snippet': 'np.maximum([ str0 ], [ str1 ])'}
Generated  translation
np. argwhere ( np. all ( str0 = = [ str1 ], axis = ( 1, 2 ) ) ) 
--------- B -----------
{'intent': {'gloss': ['print', 'a', 'list', 'var0', 'and', 'move', 'first', '3', 'elements', 'to', 'the', 'end', 'of', 'the', 'list'], 'words': ['print', 'a', 'list', 'var0', 'and', 'move', 'first', '3', 'elements', 'to', 'the', 'end', 'of', 'the', 'list'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': 'print(var0[3:] + var0[:3])'}
Generated  translation
var0 = [ 0 ] for i in range ( 3 ) ] 
--------- B -----------
{'intent': {'gloss': ['count', 'non', 'zero', 'values', 'in', 'each', 'column', 'in', 'pandas', 'data', 'frame'], 'words': ['count', 'non', 'zero', 'values', 'in', 'each', 'column', 'in', 'pandas', 'data', 'frame'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'df.astype(bool).sum(axis=1)'}
Generated  translation
df. apply ( lambda x : x. fillna ( x. mean ( ) ), axis = 0 ) 
--------- B -----------
{'intent': {'gloss': ['search', 'for', 'string', 'that', 'matches', 'regular', 'expression', 'pattern', 'str0', 'in', 'string', 'str1'], 'words': ['search', 'for', 'string', 'that', 'matches', 'regular', 'expression', 'pattern', 'str0', 'in', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '(?<!distillr)\\\\acrotray\\.exe', 'str1': 'c:\\somedir\\acrotray.exe'}, 'snippet': "re.search('str0', 'str1')"}
Generated  translation
re. search ('str1 ', str0 ). group ( 1 ) 
--------- B -----------
{'intent': {'gloss': ['loop', 'over', 'a', 'list', 'var0', 'if', 'sublists', 'length', 'equals', '3'], 'words': ['loop', 'over', 'a', 'list', 'var0', 'if', 'sublists', 'length', 'equals', '3'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylist'}, 'snippet': '[x for x in var0 if len(x) == 3]'}
Generated  translation
split _ list = [ x for x in var0 if x is not 3 ] 
--------- B -----------
{'intent': {'gloss': ['create', 'list', 'var0', 'containing', '100', 'instances', 'of', 'object', 'var1'], 'words': ['create', 'list', 'var0', 'containing', '100', 'instances', 'of', 'object', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'lst', 'var1': 'object'}, 'snippet': 'var0 = [var1() for i in range(100)]'}
Generated  translation
var0 = [ var1 [ i ] for i in range ( 100 ) ] 
--------- B -----------
{'intent': {'gloss': ['joining', 'data', 'from', 'dataframe', 'var0', 'with', 'data', 'from', 'dataframe', 'var1', 'based', 'on', 'matching', 'values', 'of', 'column', 'str0', 'in', 'both', 'dataframes'], 'words': ['joining', 'data', 'from', 'dataframe', 'var0', 'with', 'data', 'from', 'dataframe', 'var1', 'based', 'on', 'matching', 'values', 'of', 'column', 'str0', 'in', 'both', 'dataframes'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df1', 'var1': 'df2', 'str0': 'date_time'}, 'snippet': "var0.merge(var1, on='str0')"}
Generated  translation
s1 = pd. merge ( var0, var1, how ='inner ', on = ['str0'] ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'a', 'directory', 'var0', 'exists', 'and', 'create', 'it', 'if', 'necessary'], 'words': ['check', 'if', 'a', 'directory', 'var0', 'exists', 'and', 'create', 'it', 'if', 'necessary'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'path'}, 'snippet': 'distutils.dir_util.mkpath(var0)'}
Generated  translation
os. path. exists ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['access', 'a', 'tag', 'called', 'str0', 'in', 'beautifulsoup', 'var0'], 'words': ['access', 'a', 'tag', 'called', 'str0', 'in', 'beautifulsoup', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'name', 'var0': 'soup'}, 'snippet': "print(var0.find('str0').string)"}
Generated  translation
soup. find _ all ('a ', href = re. compile ('str0') ) 
--------- B -----------
{'intent': {'gloss': ['get', 'index', 'of', 'rows', 'in', 'column', 'str0'], 'words': ['get', 'index', 'of', 'rows', 'in', 'column', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'boolcol'}, 'snippet': "df.loc[df['str0']]"}
Generated  translation
[ int ( x ) for x in str0. split ( ',') ] 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'on', 'white', 'spaces'], 'words': ['split', 'string', 'var0', 'on', 'white', 'spaces'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'my_string'}, 'snippet': '""" """.join(var0.split())'}
Generated  translation
" " " xyz " " ". split ( ) 
--------- B -----------
{'intent': {'gloss': ['shuffle', 'columns', 'of', 'an', 'numpy', 'array', 'str0'], 'words': ['shuffle', 'columns', 'of', 'an', 'numpy', 'array', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'r'}, 'snippet': 'np.random.shuffle(np.transpose(str0))'}
Generated  translation
np. fromstring ('str0 ', dtype ='< f4') 
--------- B -----------
{'intent': {'gloss': ['convert', 'items', 'in', 'var0', 'to', 'integers'], 'words': ['convert', 'items', 'in', 'var0', 'to', 'integers'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 't1'}, 'snippet': 't2 = [map(int, x) for x in var0]'}
Generated  translation
l = ( int ( x ) for x in var0. split ( ) ) 
--------- B -----------
{'intent': {'gloss': ['encode', 'string', 'str0'], 'words': ['encode', 'string', 'str0'], 'after': [' ', ' ', '']}, 'slot_map': {'str0': 'data to be encoded'}, 'snippet': "encoded = base64.b64encode('str0')"}
Generated  translation
" " " \ \ xc3 \ \ x85あ " " ". encode ('utf - 8') 
--------- B -----------
{'intent': {'gloss': ['encode', 'a', 'string', 'str0', 'to', 'var0', 'encoding'], 'words': ['encode', 'a', 'string', 'str0', 'to', 'var0', 'encoding'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'data to be encoded', 'var0': 'ascii'}, 'snippet': "encoded = 'str0'.encode('var0')"}
Generated  translation
var0. encode ('utf - 8') 
--------- B -----------
{'intent': {'gloss': ['convert', 'unicode', 'string', 'ustr0', 'into', 'dictionary'], 'words': ['convert', 'unicode', 'string', 'ustr0', 'into', 'dictionary'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "{'code1':1,'code2':1}", '{ str0 }': "{'code1':1,'code2':1}"}, 'snippet': "d = ast.literal_eval('str0')"}
Generated  translation
dict ( map ( int, x. split (':') ) for x in str0. split ( ',') ) 
--------- B -----------
{'intent': {'gloss': ['open', 'a', 'file', 'str0', 'in', 'write', 'mode'], 'words': ['open', 'a', 'file', 'str0', 'in', 'write', 'mode'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'path/to/file_name.ext'}, 'snippet': "new_file = open('str0', 'w')"}
Generated  translation
f = open ('str0 ','rb') 
--------- B -----------
{'intent': {'gloss': ['convert', 'tuple', 'of', 'tuples', 'str0', 'to', 'list', 'in', 'one', 'line'], 'words': ['convert', 'tuple', 'of', 'tuples', 'str0', 'to', 'list', 'in', 'one', 'line'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "(('aa',), ('bb',), ('cc',))", '( str0 )': "(('aa',), ('bb',), ('cc',))"}, 'snippet': 'map(lambda a: a[0], ( str0 ))'}
Generated  translation
map ( list, zip ( * [ ( 1, 2 ), ( 3, 4 ), ( 5, 6 ) ] ) ) 
--------- B -----------
{'intent': {'gloss': ['plotting', 'stacked', 'barplots', 'on', 'a', 'panda', 'data', 'frame'], 'words': ['plotting', 'stacked', 'barplots', 'on', 'a', 'panda', 'data', 'frame'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "df.plot(kind='barh', stacked=true)"}
Generated  translation
pd. concat ( [ df, pd. get _ dummies ( df,'','' ). astype ( int ) ], axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['rotate', 'the', 'xtick', 'labels', 'of', 'matplotlib', 'plot', 'var0', 'by', 'str0', 'degrees', 'to', 'make', 'long', 'labels', 'readable'], 'words': ['rotate', 'the', 'xtick', 'labels', 'of', 'matplotlib', 'plot', 'var0', 'by', 'str0', 'degrees', 'to', 'make', 'long', 'labels', 'readable'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'ax', 'str0': '45'}, 'snippet': 'var0.set_xticklabels(labels, rotation=45)'}
Generated  translation
var0. set _ xticklabels ( var0. xaxis. get _ majorticklabels ( ), rotation = true ) 
--------- B -----------
{'intent': {'gloss': ['pandas', 'dataframe', 'get', 'first', 'row', 'of', 'each', 'group', 'by', 'str0'], 'words': ['pandas', 'dataframe', 'get', 'first', 'row', 'of', 'each', 'group', 'by', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'id'}, 'snippet': "df.groupby('str0').first()"}
Generated  translation
df. groupby ('str0') ['str0']. size ( ) 
--------- B -----------
{'intent': {'gloss': ['call', 'a', 'subprocess', 'with', 'arguments', 'str0', 'that', 'may', 'contain', 'spaces'], 'words': ['call', 'a', 'subprocess', 'with', 'arguments', 'str0', 'that', 'may', 'contain', 'spaces'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'c:\\program files\\vmware\\vmware server\\vmware-cmd.bat'}, 'snippet': "subprocess.popen(['str0'])"}
Generated  translation
subprocess. call ( ['str0 ', str0 ] ) 
--------- B -----------
{'intent': {'gloss': ['reverse', 'sort', 'counter', 'var0', 'by', 'values'], 'words': ['reverse', 'sort', 'counter', 'var0', 'by', 'values'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'sorted(var0, key=var0.get, reverse=true)'}
Generated  translation
sorted ( list ( var0. items ( ) ), key = lambda k _ v : k _ v [ 1 ], reverse = true ) 
--------- B -----------
{'intent': {'gloss': ['append', 'a', 'numpy', 'array', 'str0', 'to', 'a', 'numpy', 'array', 'str1'], 'words': ['append', 'a', 'numpy', 'array', 'str0', 'to', 'a', 'numpy', 'array', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'b', 'str1': 'a'}, 'snippet': 'np.vstack((str1, str0))'}
Generated  translation
np. einsum ('str0 ', str1') 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'lists', 'str0', 'such', 'that', 'third', 'row', 'comes', 'first'], 'words': ['sort', 'a', 'list', 'of', 'lists', 'str0', 'such', 'that', 'third', 'row', 'comes', 'first'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'c2'}, 'snippet': 'str0.sort(key=lambda row: row[2])'}
Generated  translation
sorted ( str0, key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'elements', 'from', 'list', 'var0', ',', 'that', 'have', 'a', 'field', 'var1', 'value', '30'], 'words': ['get', 'elements', 'from', 'list', 'var0', ',', 'that', 'have', 'a', 'field', 'var1', 'value', '30'], 'after': [' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylist', 'var1': 'n'}, 'snippet': '[x for x in var0 if x.var1 == 30]'}
Generated  translation
[ elem. tag for elem in var0. iter ( ) if elem is not var1 ] 
--------- B -----------
{'intent': {'gloss': ['execute', 'script', 'str0', 'using', 'str1', 'shell'], 'words': ['execute', 'script', 'str0', 'using', 'str1', 'shell'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'script.ps1', 'str1': 'powershell.exe'}, 'snippet': "os.system('str1', 'str0')"}
Generated  translation
subprocess. call ('str0 ', shell = true ) 
--------- B -----------
{'intent': {'gloss': ['concatenate', 'items', 'of', 'list', 'var0', 'with', 'a', 'space', 'str0'], 'words': ['concatenate', 'items', 'of', 'list', 'var0', 'with', 'a', 'space', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l', 'str0': ''}, 'snippet': "print(' '.join(map(str, var0)))"}
Generated  translation
print (''. join ( str ( x ) for x in var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['set', 'pythonpath', 'in', 'python', 'script', '.'], 'words': ['set', 'pythonpath', 'in', 'python', 'script', '.'], 'after': [' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "sys.path.append('/path/to/whatever')"}
Generated  translation
os. system ('ulimit - s unlimited ; some _ executable') 
--------- B -----------
{'intent': {'gloss': ['running', 'bash', 'script', 'str0'], 'words': ['running', 'bash', 'script', 'str0'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {'str0': 'sleep.sh'}, 'snippet': "subprocess.call('str0', shell=true)"}
Generated  translation
exec ( compile ( open ('str0'). read ( ),'str0 ','exec') ) 
--------- B -----------
{'intent': {'gloss': ['write', 'the', 'elements', 'of', 'list', 'var0', 'concatenated', 'by', 'special', 'character', 'str0', 'to', 'file', 'var1'], 'words': ['write', 'the', 'elements', 'of', 'list', 'var0', 'concatenated', 'by', 'special', 'character', 'str0', 'to', 'file', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'lines', 'str0': '\n', 'var1': 'myfile'}, 'snippet': "var1.write('str0'.join(var0))"}
Generated  translation
var1 = [ x. replace ('str0 ','' ) for x in var1 ] 
--------- B -----------
{'intent': {'gloss': ['merge', 'list', 'str0', 'and', 'list', 'str1', 'and', 'list', 'str2', 'into', 'one', 'list'], 'words': ['merge', 'list', 'str0', 'and', 'list', 'str1', 'and', 'list', 'str2', 'into', 'one', 'list'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "['it']", 'str1': "['was']", 'str2': "['annoying']", '[ str0 ]': "['it']", '[ str1 ]': "['was']", '[ str2 ]': "['annoying']"}, 'snippet': '[ str0 ] + [ str1 ] + [ str2 ]'}
Generated  translation
[ j for i in zip ( [ str0 ], [ str1 ], [ str2 ] ) ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'index', 'at', 'level', '0', 'into', 'a', 'column', 'in', 'dataframe', 'var0'], 'words': ['convert', 'index', 'at', 'level', '0', 'into', 'a', 'column', 'in', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': 'var0.reset_index(level=0, inplace=true)'}
Generated  translation
var0. apply ( lambda x : x. tolist ( ), axis = 0 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'the', 'first', 'row', 'of', 'numpy', 'matrix', 'var0', 'to', 'a', 'list'], 'words': ['convert', 'the', 'first', 'row', 'of', 'numpy', 'matrix', 'var0', 'to', 'a', 'list'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'numpy.array(var0)[0].tolist()'}
Generated  translation
[ row [ 0 ] for row in var0 ] 
--------- B -----------
{'intent': {'gloss': ['how', 'do', 'i', 'sum', 'the', 'first', 'value', 'in', 'each', 'tuple', 'in', 'a', 'list', 'of', 'tuples', 'in', 'python', '?'], 'words': ['how', 'do', 'i', 'sum', 'the', 'first', 'value', 'in', 'each', 'tuple', 'in', 'a', 'list', 'of', 'tuples', 'in', 'python', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'sum([pair[0] for pair in list_of_pairs])'}
Generated  translation
map ( lambda x : x [ 0 ], [ 0 ] ) 
--------- B -----------
{'intent': {'gloss': ['run', 'r', 'script', 'str0'], 'words': ['run', 'r', 'script', 'str0'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {'str0': '/usr/bin/rscript --vanilla /pathto/myrscript.r'}, 'snippet': "subprocess.call('str0', shell=true)"}
Generated  translation
exec ( compile ( open ('str0'). read ( ),'str0 ','exec') ) 
--------- B -----------
{'intent': {'gloss': ['read', 'a', 'file', 'var0', 'without', 'newlines'], 'words': ['read', 'a', 'file', 'var0', 'without', 'newlines'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'file'}, 'snippet': "[line.rstrip('\\n') for line in var0]"}
Generated  translation
my _ file = open ( var0 ). read ( ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'item', 'at', 'index', '0', 'from', 'the', 'tuple', 'that', 'has', 'maximum', 'value', 'at', 'index', '1', 'in', 'list', 'var0'], 'words': ['get', 'the', 'item', 'at', 'index', '0', 'from', 'the', 'tuple', 'that', 'has', 'maximum', 'value', 'at', 'index', '1', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'lis'}, 'snippet': 'max(var0, key=itemgetter(1))[0]'}
Generated  translation
max ( var0, key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'lis', 'var0', 'in', 'ascending', 'order', 'based', 'on', 'the', 'degrees', 'value', 'of', 'its', 'elements'], 'words': ['sort', 'lis', 'var0', 'in', 'ascending', 'order', 'based', 'on', 'the', 'degrees', 'value', 'of', 'its', 'elements'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list5'}, 'snippet': 'sorted(var0, lambda x: (degree(x), x))'}
Generated  translation
sorted ( list ( var0. items ( ) ), key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'new', 'list', 'var0by', 'removing', 'empty', 'list', 'from', 'a', 'list', 'of', 'lists', 'var1'], 'words': ['get', 'a', 'new', 'list', 'var0by', 'removing', 'empty', 'list', 'from', 'a', 'list', 'of', 'lists', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list2', 'var1': 'list1'}, 'snippet': 'var0 = [x for x in var1 if x != []]'}
Generated  translation
var0 = [ var1 [ i ] for i in var1 ] 
--------- B -----------
{'intent': {'gloss': ['match', 'regex', 'str0', 'with', 'string', 'str1'], 'words': ['match', 'regex', 'str0', 'with', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '\\((.*?)\\)|(\\w)', 'str1': '(zyx)bc'}, 'snippet': "re.findall('str0', 'str1')"}
Generated  translation
re. match ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['initialize', 'var0', 'in', 'flask', 'config', 'with', 'str0'], 'words': ['initialize', 'var0', 'in', 'flask', 'config', 'with', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'secret_key', 'str0': 'your_secret_string'}, 'snippet': "app.config['var0'] = 'str0'"}
Generated  translation
with open ('str0 ','r') as stream : var0 ='str0') 
--------- B -----------
{'intent': {'gloss': ['write', 'bytes', 'var0', 'to', 'a', 'file', 'var1', 'in', 'python', '3'], 'words': ['write', 'bytes', 'var0', 'to', 'a', 'file', 'var1', 'in', 'python', '3'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'bytes_', 'var1': 'filename'}, 'snippet': "open('var1', 'wb').write(var0)"}
Generated  translation
var1. write ('\ n '. join ( var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['eliminate', 'all', 'strings', 'from', 'list', 'var0'], 'words': ['eliminate', 'all', 'strings', 'from', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'lst'}, 'snippet': '[element for element in var0 if isinstance(element, int)]'}
Generated  translation
var0 = list ( [ _ f for _ f in var0 if _ f ] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'list', 'of', 'all', 'keys', 'in', 'cassandra', 'database', 'var0', 'with', 'pycassa'], 'words': ['get', 'a', 'list', 'of', 'all', 'keys', 'in', 'cassandra', 'database', 'var0', 'with', 'pycassa'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'cf'}, 'snippet': 'list(var0.get_range().get_keys())'}
Generated  translation
list ( var0. keys ( ) ). stack ( ) 
--------- B -----------
{'intent': {'gloss': ['choose', 'a', 'random', 'file', 'from', 'the', 'directory', 'contents', 'of', 'the', 'c', 'drive', ',', 'str0'], 'words': ['choose', 'a', 'random', 'file', 'from', 'the', 'directory', 'contents', 'of', 'the', 'c', 'drive', ',', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '']}, 'slot_map': {'str0': 'c:\\'}, 'snippet': "random.choice(os.listdir('str0'))"}
Generated  translation
glob. glob ('str0') 
--------- B -----------
{'intent': {'gloss': ['send', 'a', 'signal', 'str0', 'to', 'the', 'current', 'process'], 'words': ['send', 'a', 'signal', 'str0', 'to', 'the', 'current', 'process'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'signal.sigusr1'}, 'snippet': 'os.kill(os.getpid(), signal.sigusr1)'}
Generated  translation
sys. exit ('str0') 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'string', 'var0', 'with', 'dot', 'and', 'comma', 'into', 'a', 'float', 'number', 'var1'], 'words': ['convert', 'a', 'string', 'var0', 'with', 'dot', 'and', 'comma', 'into', 'a', 'float', 'number', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'my_string', 'var1': 'my_float'}, 'snippet': "var1 = float(var0.replace(',', ''))"}
Generated  translation
float ( int ( var0. split ( ',') ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'string', 'str0', 'with', 'dot', 'and', 'comma', 'into', 'a', 'floating', 'number'], 'words': ['convert', 'a', 'string', 'str0', 'with', 'dot', 'and', 'comma', 'into', 'a', 'floating', 'number'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '123,456.908'}, 'snippet': "float('str0'.replace(',', ''))"}
Generated  translation
ast. literal _ eval ('str0') 
--------- B -----------
{'intent': {'gloss': ['make', 'a', 'comma', '-', 'separated', 'string', 'from', 'a', 'list', 'var0'], 'words': ['make', 'a', 'comma', '-', 'separated', 'string', 'from', 'a', 'list', 'var0'], 'after': [' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylist'}, 'snippet': "var0 = ','.join(map(str, var0))"}
Generated  translation
" " " " " ". join ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'list', 'of', 'integers', 'by', 'splitting', 'a', 'string', 'var0', 'with', 'comma'], 'words': ['get', 'a', 'list', 'of', 'integers', 'by', 'splitting', 'a', 'string', 'var0', 'with', 'comma'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'user'}, 'snippet': "[int(s) for s in var0.split(',')]"}
Generated  translation
[ int ( s ) for s in var0. split ( ',') ] 
--------- B -----------
{'intent': {'gloss': ['combine', 'lists', 'var0', 'and', 'var1', 'by', 'alternating', 'their', 'elements'], 'words': ['combine', 'lists', 'var0', 'and', 'var1', 'by', 'alternating', 'their', 'elements'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l1', 'var1': 'l2'}, 'snippet': '[val for pair in zip(var0, var1) for val in pair]'}
Generated  translation
[ ( x + y ) for x, y in zip ( var0, var1 ) ] 
--------- B -----------
{'intent': {'gloss': ['retrieve', 'each', 'line', 'from', 'a', 'file', 'str0', 'as', 'a', 'list'], 'words': ['retrieve', 'each', 'line', 'from', 'a', 'file', 'str0', 'as', 'a', 'list'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'file.txt'}, 'snippet': "[line.split() for line in open('str0')]"}
Generated  translation
with open ('str0') as f : f. readlines ( ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'dictionary', 'var0', 'by', 'the', 'key', 'var1'], 'words': ['sort', 'a', 'list', 'of', 'dictionary', 'var0', 'by', 'the', 'key', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylist', 'var1': 'title'}, 'snippet': "var0.sort(key=lambda x: x['var1'])"}
Generated  translation
sorted ( var0, key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['find', 'the', 'first', 'element', 'of', 'the', 'tuple', 'with', 'the', 'maximum', 'second', 'element', 'in', 'a', 'list', 'of', 'tuples', 'var0'], 'words': ['find', 'the', 'first', 'element', 'of', 'the', 'tuple', 'with', 'the', 'maximum', 'second', 'element', 'in', 'a', 'list', 'of', 'tuples', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'lis'}, 'snippet': 'max(var0, key=lambda item: item[1])[0]'}
Generated  translation
max ( var0, key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['add', 'color', 'bar', 'with', 'image', 'var0', 'to', 'plot', 'var1'], 'words': ['add', 'color', 'bar', 'with', 'image', 'var0', 'to', 'plot', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mappable', 'var1': 'plt'}, 'snippet': 'var1.colorbar(var0=var0, cax=ax3)'}
Generated  translation
var1. set _ option ('var0') 
--------- B -----------
{'intent': {'gloss': ['generate', 'all', '2', '-', 'element', 'subsets', 'of', 'tuple', 'str0'], 'words': ['generate', 'all', '2', '-', 'element', 'subsets', 'of', 'tuple', 'str0'], 'after': [' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '(1, 2, 3)', '( str0 )': '(1, 2, 3)'}, 'snippet': 'list(itertools.combinations(( str0 ), 2))'}
Generated  translation
[ ( x, y ) for x, y in zip ( str0, str0 [ 1 : ] ) ] 
--------- B -----------
{'intent': {'gloss': ['how', 'do', 'i', 'insert', 'into', 't1', '(', 'select', '*', 'from', 't2', ')', 'in', 'sqlalchemy', '?'], 'words': ['how', 'do', 'i', 'insert', 'into', 't1', '(', 'select', '*', 'from', 't2', ')', 'in', 'sqlalchemy', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', '', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "session.execute('insert into t1 (select * from t2)')"}
Generated  translation
cursor. execute ('insert into table values ( % s, % s ) ', ( var1, var2 ) ) 
--------- B -----------
{'intent': {'gloss': ['print', 'new', 'line', 'character', 'as', 'str0', 'in', 'a', 'string', 'str1'], 'words': ['print', 'new', 'line', 'character', 'as', 'str0', 'in', 'a', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '\n', 'str1': 'foo\nbar'}, 'snippet': "print('str1'.encode('string_escape'))"}
Generated  translation
" " " str1 " " ". replace ('str0 ','' ) 
--------- B -----------
{'intent': {'gloss': ['calculate', 'the', 'mean', 'of', 'each', 'element', 'in', 'array', 'var0', 'with', 'the', 'element', 'previous', 'to', 'it'], 'words': ['calculate', 'the', 'mean', 'of', 'each', 'element', 'in', 'array', 'var0', 'with', 'the', 'element', 'previous', 'to', 'it'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': '(var0[1:] + var0[:-1]) / 2'}
Generated  translation
sorted ( var0, key = lambda x : ( - 1 * c [ x ], var0. index ( x ) ) ) 
--------- B -----------
{'intent': {'gloss': ['count', 'number', 'of', 'times', 'string', 'str0', 'occurred', 'in', 'string', 'str1'], 'words': ['count', 'number', 'of', 'times', 'string', 'str0', 'occurred', 'in', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'brown', 'str1': 'the big brown fox is brown'}, 'snippet': '"""str1""".count(\'str0\')'}
Generated  translation
" " " str1 " " ". count ('str0') 
--------- B -----------
{'intent': {'gloss': ['download', 'the', 'file', 'from', 'url', 'var0', 'and', 'save', 'it', 'under', 'file', 'var1'], 'words': ['download', 'the', 'file', 'from', 'url', 'var0', 'and', 'save', 'it', 'under', 'file', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'url', 'var1': 'file_name'}, 'snippet': 'urllib.request.urlretrieve(var0, var1)'}
Generated  translation
urllib. request. urlretrieve ( var0,'var1') 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'tuples', 'var0', 'by', 'third', 'item', 'in', 'the', 'tuple'], 'words': ['sort', 'a', 'list', 'of', 'tuples', 'var0', 'by', 'third', 'item', 'in', 'the', 'tuple'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'b'}, 'snippet': 'var0.sort(key=lambda x: x[1][2])'}
Generated  translation
sorted ( var0, key = lambda x : ( sum ( x [ 1 : ] ), x [ 0 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['subtract', '13', 'from', 'every', 'number', 'in', 'a', 'list', 'var0'], 'words': ['subtract', '13', 'from', 'every', 'number', 'in', 'a', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'var0[:] = [(x - 13) for x in var0]'}
Generated  translation
[ ( x / y ) for x, y in zip ( var0, var0 [ 1 : ] ) ] 
--------- B -----------
{'intent': {'gloss': ['capture', 'final', 'output', 'of', 'a', 'chain', 'of', 'system', 'commands', 'str0'], 'words': ['capture', 'final', 'output', 'of', 'a', 'chain', 'of', 'system', 'commands', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'ps -ef | grep something | wc -l'}, 'snippet': "subprocess.check_output('str0', shell=true)"}
Generated  translation
exec ( compile ( open ('str0'). read ( ),'str0 ','exec') ) 
--------- B -----------
{'intent': {'gloss': ['sending', 'http', 'headers', 'to', 'var0'], 'words': ['sending', 'http', 'headers', 'to', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'client'}, 'snippet': "var0.send('http/1.0 200 ok\\r\\n')"}
Generated  translation
var0. write ('http / 1. 0 200 established \ r \ n \ r \ n') 
--------- B -----------
{'intent': {'gloss': ['subscript', 'text', 'str0', 'with', 'str1', 'as', 'subscripted', 'in', 'matplotlib', 'labels', 'for', 'arrays', 'str2', 'and', 'str3', '.'], 'words': ['subscript', 'text', 'str0', 'with', 'str1', 'as', 'subscripted', 'in', 'matplotlib', 'labels', 'for', 'arrays', 'str2', 'and', 'str3', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'h20', 'str1': '2', 'str2': 'x', 'str3': 'y'}, 'snippet': "plt.plot(str2, str3, label='h₂o')"}
Generated  translation
" " " str0 " " ". replace ('str1 ','' ). replace ('str2 ','' ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'largest', 'key', 'whose', 'not', 'associated', 'with', 'value', 'of', '0', 'in', 'dictionary', 'var0'], 'words': ['get', 'the', 'largest', 'key', 'whose', 'not', 'associated', 'with', 'value', 'of', '0', 'in', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': '(k for k, v in var0.items() if v != 0)'}
Generated  translation
max ( min ( var0, key = lambda x : int ( x [ 1 ] ), x [ 0 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['decode', 'string', 'str0', 'into', 'a', 'normal', 'string'], 'words': ['decode', 'string', 'str0', 'into', 'a', 'normal', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '\\x89\\n'}, 'snippet': '"""str0""".decode(\'string_escape\')'}
Generated  translation
str0. decode ('utf - 8 ','ignore') 
--------- B -----------
{'intent': {'gloss': ['find', 'last', 'occurrence', 'of', 'character', 'str0', 'in', 'string', 'str1'], 'words': ['find', 'last', 'occurrence', 'of', 'character', 'str0', 'in', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '}', 'str1': 'abcd}def}'}, 'snippet': '"""str1""".rfind(\'str0\')'}
Generated  translation
" " " str1 " " ". replace ('str0 ','' ) 
--------- B -----------
{'intent': {'gloss': ['reverse', 'list', 'var0', 'based', 'on', 'the', 'var1', 'attribute', 'of', 'each', 'object'], 'words': ['reverse', 'list', 'var0', 'based', 'on', 'the', 'var1', 'attribute', 'of', 'each', 'object'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'ut', 'var1': 'count'}, 'snippet': 'var0.sort(key=lambda x: x.var1, reverse=true)'}
Generated  translation
var0. sort ( key = lambda x : x. var1 ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'objects', 'var0', 'in', 'reverse', 'order', 'by', 'their', 'var1', 'property'], 'words': ['sort', 'a', 'list', 'of', 'objects', 'var0', 'in', 'reverse', 'order', 'by', 'their', 'var1', 'property'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'ut', 'var1': 'count'}, 'snippet': 'var0.sort(key=lambda x: x.var1, reverse=true)'}
Generated  translation
var0. sort ( key = lambda x : x. var1 ) 
--------- B -----------
{'intent': {'gloss': ['return', 'var0', 'if', 'string', 'var1', 'contains', 'regex', 'str0'], 'words': ['return', 'var0', 'if', 'string', 'var1', 'contains', 'regex', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'true', 'var1': 'foobarrrr', 'str0': 'ba[rzd]'}, 'snippet': "bool(re.search('str0', 'var1'))"}
Generated  translation
if var0. find ('str0') = = - 1 : print ( " no'is'here! " ) else : print ( " found'is'in the string. " ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'any', 'key', 'in', 'the', 'dictionary', 'var0', 'starts', 'with', 'the', 'string', 'str0'], 'words': ['check', 'if', 'any', 'key', 'in', 'the', 'dictionary', 'var0', 'starts', 'with', 'the', 'string', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'dict1', 'str0': 'emp$$'}, 'snippet': "any(key.startswith('str0') for key in var0)"}
Generated  translation
" " " str0 " " ". replace ('','' ). isalpha ( ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'var0', 'of', 'dicts', 'by', 'dict', 'value', 'str0'], 'words': ['sort', 'a', 'list', 'var0', 'of', 'dicts', 'by', 'dict', 'value', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l', 'str0': 'title'}, 'snippet': "var0.sort(key=lambda x: x['str0'])"}
Generated  translation
var0. sort ( key = lambda d : d ['str0'] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'position', 'of', 'item', 'var0', 'in', 'list', 'var1'], 'words': ['get', 'the', 'position', 'of', 'item', 'var0', 'in', 'list', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'element', 'var1': 'testlist'}, 'snippet': 'try:\n    print(var1.index(var0))\nexcept valueerror:\n    pass'}
Generated  translation
print ( var1 [ len ( var0 ) ] ) 
--------- B -----------
{'intent': {'gloss': ['how', 'do', 'i', 'perform', 'secondary', 'sorting', 'in', 'python', '?'], 'words': ['how', 'do', 'i', 'perform', 'secondary', 'sorting', 'in', 'python', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'sorted(list5, key=lambda vertex: (degree(vertex), vertex))'}
Generated  translation
sorted ( enumerate ( a ), key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['append', 'each', 'line', 'in', 'file', 'var0', 'into', 'a', 'list'], 'words': ['append', 'each', 'line', 'in', 'file', 'var0', 'into', 'a', 'list'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'myfile'}, 'snippet': "[x for x in var0.splitlines() if x != '']"}
Generated  translation
with open ('var0') as f : f. write ('\ n '. join ('% s % s'% x for x in var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'symbols', 'from', 'a', 'string', 'var0'], 'words': ['remove', 'symbols', 'from', 'a', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': "re.sub('[^\\\\w]', ' ', var0)"}
Generated  translation
re. sub ('[ ^ < ] * > ','', var0 ) 
--------- B -----------
{'intent': {'gloss': ['count', 'the', 'number', 'of', 'keys', 'in', 'dictionary', 'var0'], 'words': ['count', 'the', 'number', 'of', 'keys', 'in', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'yourdictfile'}, 'snippet': 'len(set(open(var0).read().split()))'}
Generated  translation
len ( var0. split ( ) ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'escape', 'character', 'from', 'string', 'str0'], 'words': ['remove', 'escape', 'character', 'from', 'string', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '\\a'}, 'snippet': '"""str0""".decode(\'string_escape\')'}
Generated  translation
re. sub ('(. ) ','\ \ 1 \ \ 1 ','str0') 
--------- B -----------
{'intent': {'gloss': ['numpy', 'concatenate', 'two', 'arrays', 'var0', 'and', 'var1', 'along', 'the', 'first', 'axis'], 'words': ['numpy', 'concatenate', 'two', 'arrays', 'var0', 'and', 'var1', 'along', 'the', 'first', 'axis'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'b'}, 'snippet': 'print(concatenate((var0, var1), axis=0))'}
Generated  translation
numpy. concatenate ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['numpy', 'concatenate', 'two', 'arrays', 'var0', 'and', 'var1', 'along', 'the', 'second', 'axis'], 'words': ['numpy', 'concatenate', 'two', 'arrays', 'var0', 'and', 'var1', 'along', 'the', 'second', 'axis'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'b'}, 'snippet': 'print(concatenate((var0, var1), axis=1))'}
Generated  translation
numpy. concatenate ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['fetch', 'address', 'information', 'for', 'host', 'str0', 'ion', 'port', '80'], 'words': ['fetch', 'address', 'information', 'for', 'host', 'str0', 'ion', 'port', '80'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'google.com'}, 'snippet': "print(socket.getaddrinfo('str0', 80))"}
Generated  translation
urllib. parse. quote ('str0') 
--------- B -----------
{'intent': {'gloss': ['flask', 'set', 'folder', 'str0', 'as', 'the', 'default', 'template', 'folder'], 'words': ['flask', 'set', 'folder', 'str0', 'as', 'the', 'default', 'template', 'folder'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'wherever'}, 'snippet': "flask(__name__, template_folder='str0')"}
Generated  translation
os. path. dirname ( os. path. abspath ('str0') ) 
--------- B -----------
{'intent': {'gloss': ['delete', 'all', 'instances', 'of', 'a', 'character', 'str0', 'in', 'a', 'string', 'str1'], 'words': ['delete', 'all', 'instances', 'of', 'a', 'character', 'str0', 'in', 'a', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'i', 'str1': 'it is icy'}, 'snippet': "re.sub('str0', '', 'str1')"}
Generated  translation
" " " str1 " " ". replace ('str0 ','' ) 
--------- B -----------
{'intent': {'gloss': ['django', 'filter', 'by', 'hour'], 'words': ['django', 'filter', 'by', 'hour'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "entry.objects.filter(pub_date__contains='08:00')"}
Generated  translation
driver. find _ element _ by _ xpath ( " / / div [ @ id ='a'] " ) 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'multi', '-', 'line', 'string', 'str0', 'by', 'new', 'line', 'character', 'str1'], 'words': ['split', 'a', 'multi', '-', 'line', 'string', 'str0', 'by', 'new', 'line', 'character', 'str1'], 'after': [' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'a \n b \r\n c', 'str1': '\n'}, 'snippet': "' a \\n b \\r\\n c '.split('str1')"}
Generated  translation
re. split ('[. ] ','str0 ', 1 ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'substring', 'str0', 'from', 'a', 'string', 'str1'], 'words': ['remove', 'substring', 'str0', 'from', 'a', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'bag,', 'str1': 'lamp, bag, mirror'}, 'snippet': "print('str1'.replace('str0', ''))"}
Generated  translation
" " " str1 " " ". replace ('str0 ','' ) 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'string', 'var0', 'by', 'last', 'occurrence', 'of', 'character', 'str0'], 'words': ['split', 'a', 'string', 'var0', 'by', 'last', 'occurrence', 'of', 'character', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x', 'str0': '-'}, 'snippet': "print(var0.rpartition('str0')[0])"}
Generated  translation
" " " str0 " " ". split ('str0') 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'last', 'part', 'of', 'a', 'string', 'before', 'the', 'character', 'str0'], 'words': ['get', 'the', 'last', 'part', 'of', 'a', 'string', 'before', 'the', 'character', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '-'}, 'snippet': "print(x.rsplit('str0', 1)[0])"}
Generated  translation
re. sub ('\ \. [ ^. ] + $ ','str0') 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'random', 'list', 'of', 'integers'], 'words': ['create', 'a', 'random', 'list', 'of', 'integers'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': '[int(1000 * random.random()) for i in range(10000)]'}
Generated  translation
random. sample ( range ( 100 ), 10 ) 
--------- B -----------
{'intent': {'gloss': ['google', 'app', 'engine', 'execute', 'gql', 'query', 'str0', 'with', 'parameter', 'str1'], 'words': ['google', 'app', 'engine', 'execute', 'gql', 'query', 'str0', 'with', 'parameter', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'select * from schedule where station = $1', 'str1': 'foo.key()'}, 'snippet': "db.gqlquery('str0', foo.key())"}
Generated  translation
requests. get ('str0 ', auth = ('str1 ','str1') ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'string', 'into', 'datetime', 'using', 'the', 'format', 'str0'], 'words': ['convert', 'a', 'string', 'into', 'datetime', 'using', 'the', 'format', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '%y-%m-%d %h:%m:%s.%f'}, 'snippet': "datetime.datetime.strptime(string_date, 'str0')"}
Generated  translation
datetime. strptime ('str0 ','% y - % m - % d % h : % m : % sz') 
--------- B -----------
{'intent': {'gloss': ['find', 'the', 'key', 'associated', 'with', 'the', 'largest', 'value', 'in', 'dictionary', 'var0', 'whilst', 'key', 'is', 'non', '-', 'zero', 'value'], 'words': ['find', 'the', 'key', 'associated', 'with', 'the', 'largest', 'value', 'in', 'dictionary', 'var0', 'whilst', 'key', 'is', 'non', '-', 'zero', 'value'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'max(k for k, v in var0.items() if v != 0)'}
Generated  translation
max ( var0, key = lambda x : ( abs ( x [ 1 ] ), x [ 0 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'largest', 'key', 'in', 'a', 'dictionary', 'var0', 'with', 'non', '-', 'zero', 'value'], 'words': ['get', 'the', 'largest', 'key', 'in', 'a', 'dictionary', 'var0', 'with', 'non', '-', 'zero', 'value'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'max(k for k, v in var0.items() if v != 0)'}
Generated  translation
max ( var0, key = lambda x : ( abs ( x [ 1 : ] ), x [ 0 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'index', 'of', 'rows', 'in', 'dataframe', 'var0', 'which', 'column', 'str0', 'matches', 'value', 'true'], 'words': ['get', 'index', 'of', 'rows', 'in', 'dataframe', 'var0', 'which', 'column', 'str0', 'matches', 'value', 'true'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'boolcol'}, 'snippet': "var0[var0['str0']].index.tolist()"}
Generated  translation
var0. groupby ( var0 ['str0']. map ( lambda x : x. mean ( ) ) ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'pandas', 'index', 'in', 'a', 'dataframe', 'to', 'columns'], 'words': ['convert', 'pandas', 'index', 'in', 'a', 'dataframe', 'to', 'columns'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "df.reset_index(level=['tick', 'obs'])"}
Generated  translation
df. apply ( lambda x : x. fillna ( x. mean ( ) ), axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'html', 'from', 'the', 'current', 'web', 'page', 'of', 'a', 'selenium', 'driver'], 'words': ['get', 'the', 'html', 'from', 'the', 'current', 'web', 'page', 'of', 'a', 'selenium', 'driver'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "driver.execute_script('return document.documentelement.outerhtml;')"}
Generated  translation
os. path. dirname ( os. path. abspath ( _ _ file _ _ ) ) 
--------- B -----------
{'intent': {'gloss': ['replacing', 'nan', 'in', 'the', 'dataframe', 'var0', 'with', 'row', 'average'], 'words': ['replacing', 'nan', 'in', 'the', 'dataframe', 'var0', 'with', 'row', 'average'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': 'var0.fillna(var0.mean(axis=1), axis=1)'}
Generated  translation
var0. fillna ( method ='ffill ', inplace = true ) 
--------- B -----------
{'intent': {'gloss': ['print', 'elements', 'of', 'list', 'var0', 'seperated', 'by', 'tabs', 'str0'], 'words': ['print', 'elements', 'of', 'list', 'var0', 'seperated', 'by', 'tabs', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list', 'str0': '\t'}, 'snippet': "print('str0'.join(map(str, var0)))"}
Generated  translation
print ('str0 '. join ( [ var0 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['print', 'unicode', 'string', 'str0', 'with', 'utf', '-', '8'], 'words': ['print', 'unicode', 'string', 'str0', 'with', 'utf', '-', '8'], 'after': [' ', ' ', ' ', ' ', ' ', '', '', '']}, 'slot_map': {'str0': 'Ð¿Ñ\x80Ð¸'}, 'snippet': "print('str0'.encode('raw_unicode_escape'))"}
Generated  translation
print ('str0 '. decode ('utf8') ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'words': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'testlist'}, 'snippet': '[i for i, x in enumerate(var0) if x == 1]'}
Generated  translation
var0. position ( 1 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'words': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'testlist'}, 'snippet': '[i for i, x in enumerate(var0) if x == 1]'}
Generated  translation
var0. position ( 1 ) 
--------- B -----------
{'intent': {'gloss': ['django', 'response', 'with', 'json', 'var0'], 'words': ['django', 'response', 'with', 'json', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'data'}, 'snippet': "return httpresponse(var0, mimetype='application/json')"}
Generated  translation
return httpresponse ( json. dumps ( var0 ), content _ type ='application / json') 
--------- B -----------
{'intent': {'gloss': ['formate', 'each', 'string', 'cin', 'list', 'var0', 'into', 'pattern', 'str0'], 'words': ['formate', 'each', 'string', 'cin', 'list', 'var0', 'into', 'pattern', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'elements', 'str0': '%{0}%'}, 'snippet': "var0 = ['str0'.format(element) for element in var0]"}
Generated  translation
re. findall ('str0 ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['converting', 'two', 'lists', 'str0', 'and', 'str1', 'into', 'a', 'matrix'], 'words': ['converting', 'two', 'lists', 'str0', 'and', 'str1', 'into', 'a', 'matrix'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '[1, 2, 3]', 'str1': '[4, 5, 6]', '[ str0 ]': '[1, 2, 3]', '[ str1 ]': '[4, 5, 6]'}, 'snippet': 'np.column_stack(([ str0 ], [ str1 ]))'}
Generated  translation
zip ( [ str0 ], [ str1 ] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'all', 'the', 'elements', 'except', 'strings', 'from', 'the', 'list', 'str0', '.'], 'words': ['get', 'all', 'the', 'elements', 'except', 'strings', 'from', 'the', 'list', 'str0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'lst'}, 'snippet': '[element for element in str0 if not isinstance(element, str)]'}
Generated  translation
[ x for x in str0 if x! = [ str0 ] ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'datetime', 'object', 'str0', 'to', 'seconds'], 'words': ['convert', 'datetime', 'object', 'str0', 'to', 'seconds'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '(1970, 1, 1)', '( str0 )': '(1970, 1, 1)'}, 'snippet': '(t - datetime.datetime( str0 )).total_seconds()'}
Generated  translation
datetime. datetime. strptime ('str0 ','% b % d, % y'). strftime ('% a') 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'highest', 'element', 'in', 'absolute', 'value', 'in', 'a', 'numpy', 'matrix', 'var0'], 'words': ['get', 'the', 'highest', 'element', 'in', 'absolute', 'value', 'in', 'a', 'numpy', 'matrix', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'max(var0.min(), var0.max(), key=abs)'}
Generated  translation
max ( var0, key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'string', 'var0', 'considering', 'the', 'spaces', 'str0'], 'words': ['split', 'a', 'string', 'var0', 'considering', 'the', 'spaces', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mystring', 'str0': ''}, 'snippet': "var0.replace(' ', '! !').split('!')"}
Generated  translation
[ i. split ('str0') for i in var0. split ('str0') ] 
--------- B -----------
{'intent': {'gloss': ['how', 'to', 'convert', 'a', 'string', 'from', 'cp', '-', '1251', 'to', 'utf', '-', '8', '?'], 'words': ['how', 'to', 'convert', 'a', 'string', 'from', 'cp', '-', '1251', 'to', 'utf', '-', '8', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', '', '', '', '']}, 'slot_map': {}, 'snippet': "d.decode('cp1251').encode('utf8')"}
Generated  translation
" " " [UNK] " " ". encode ('utf8') 
--------- B -----------
{'intent': {'gloss': ['python', 'save', 'list', 'var0', 'to', 'file', 'object', 'str0'], 'words': ['python', 'save', 'list', 'var0', 'to', 'file', 'object', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylist', 'str0': 'save.txt'}, 'snippet': "pickle.dump(var0, open('str0', 'wb'))"}
Generated  translation
shutil. savefig ('str0 ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['search', 'for', 'occurrences', 'of', 'regex', 'pattern', 'str0', 'in', 'xml', 'string', 'var0'], 'words': ['search', 'for', 'occurrences', 'of', 'regex', 'pattern', 'str0', 'in', 'xml', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '>.*<', 'var0': 'line'}, 'snippet': "print(re.search('str0', var0).group(0))"}
Generated  translation
print ( var0. search ('str0'). group ( 1 ) ) 
--------- B -----------
{'intent': {'gloss': ['count', 'the', 'occurrences', 'of', 'items', 'in', 'list', 'var0'], 'words': ['count', 'the', 'occurrences', 'of', 'items', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': '[[x, var0.count(x)] for x in set(var0)]'}
Generated  translation
len ( set ( var0 ) ) = = len ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['copy', 'all', 'values', 'in', 'a', 'column', 'str0', 'to', 'a', 'new', 'column', 'str1', 'in', 'a', 'pandas', 'data', 'frame', 'str2'], 'words': ['copy', 'all', 'values', 'in', 'a', 'column', 'str0', 'to', 'a', 'new', 'column', 'str1', 'in', 'a', 'pandas', 'data', 'frame', 'str2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'b', 'str1': 'd', 'str2': 'df'}, 'snippet': "str2['str1'] = str2['str0']"}
Generated  translation
df ['str0'] = df ['str0']. apply ( lambda x : int ( str ( x ) [ - 4 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'string', 'var0', 'into', 'a', 'list', 'of', 'integers', 'var1'], 'words': ['convert', 'string', 'var0', 'into', 'a', 'list', 'of', 'integers', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'user_input', 'var1': 'user_list'}, 'snippet': "var1 = [int(number) for number in var0.split(',')]"}
Generated  translation
var1 = [ int ( x ) for x in var0. split ( ',') ] 
--------- B -----------
{'intent': {'gloss': ['sorting', 'data', 'in', 'dataframe', 'pandas'], 'words': ['sorting', 'data', 'in', 'dataframe', 'pandas'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "df.sort_values(['system_num', 'dis'])"}
Generated  translation
df. groupby ('colour'). sum ( ) 
--------- B -----------
{'intent': {'gloss': ['get', 'all', 'matches', 'with', 'regex', 'pattern', 'str0', 'in', 'list', 'of', 'string', 'var0'], 'words': ['get', 'all', 'matches', 'with', 'regex', 'pattern', 'str0', 'in', 'list', 'of', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '\\d+[xx]', 'var0': 'teststr'}, 'snippet': "[i for i in var0 if re.search('str0', i)]"}
Generated  translation
print ( re. search ('str0 ', var0 ). group ( 1 ) ) 
--------- B -----------
{'intent': {'gloss': ['resized', 'image', 'var0', 'to', 'width', ',', 'height', 'of', 'str0', 'with', 'filter', 'of', 'var1'], 'words': ['resized', 'image', 'var0', 'to', 'width', ',', 'height', 'of', 'str0', 'with', 'filter', 'of', 'var1'], 'after': [' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'image', 'str0': '(x, y)', 'var1': 'antialias', '( str0 )': '(x, y)'}, 'snippet': 'var0 = var0.resize(( str0 ), var0.var1)'}
Generated  translation
var0. rc ('font ', * * {'str0':'str1'} ) 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'list', 'of', 'integers', 'var0', 'from', 'a', 'file', 'str0'], 'words': ['get', 'a', 'list', 'of', 'integers', 'var0', 'from', 'a', 'file', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'lst', 'str0': 'filename.txt'}, 'snippet': "var0 = map(int, open('str0').readlines())"}
Generated  translation
var0 = [ int ( x ) for x in var0. split ('str0') ] 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'at', 'every', 'space', 'followed', 'by', 'an', 'upper', '-', 'case', 'letter'], 'words': ['split', 'string', 'var0', 'at', 'every', 'space', 'followed', 'by', 'an', 'upper', '-', 'case', 'letter'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', '']}, 'slot_map': {'var0': 'input'}, 'snippet': "re.split('[ ](?=[a-z])', var0)"}
Generated  translation
re. split ('\ \ w + ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['sorting', 'a', 'list', 'of', 'lists', 'in', 'python'], 'words': ['sorting', 'a', 'list', 'of', 'lists', 'in', 'python'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'c2.sort(key=lambda row: (row[2], row[1]))'}
Generated  translation
[ sorted ( item ) for item in item ] 
--------- B -----------
{'intent': {'gloss': ['delete', 'all', 'characters', 'str0', 'in', 'string', 'str1'], 'words': ['delete', 'all', 'characters', 'str0', 'in', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'i', 'str1': 'it is icy'}, 'snippet': '"""str1""".replace(\'str0\', \'\')'}
Generated  translation
" " " str1 " " ". replace ('str0 ','' ) 
--------- B -----------
{'intent': {'gloss': ['sum', 'the', 'corresponding', 'decimal', 'values', 'for', 'binary', 'values', 'of', 'each', 'boolean', 'element', 'in', 'list', 'var0'], 'words': ['sum', 'the', 'corresponding', 'decimal', 'values', 'for', 'binary', 'values', 'of', 'each', 'boolean', 'element', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'sum(1 << i for i, b in enumerate(var0) if b)'}
Generated  translation
[ int ( x ) for x in bin ( 8 ) [ 2 : ] ] 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'dictionaries', 'var0', 'by', 'the', 'value', 'of', 'the', 'dictionary', 'key', 'var1'], 'words': ['sort', 'a', 'list', 'of', 'dictionaries', 'var0', 'by', 'the', 'value', 'of', 'the', 'dictionary', 'key', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list_to_be_sorted', 'var1': 'name'}, 'snippet': "newlist = sorted(var0, key=lambda k: k['var1'])"}
Generated  translation
sorted ( var0, key = lambda x : var1. index ( x ['var0'] ) ) 
--------- B -----------
{'intent': {'gloss': ['write', 'var0', 'to', 'a', 'binary', 'file', 'var1'], 'words': ['write', 'var0', 'to', 'a', 'binary', 'file', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'newfilebytes', 'var1': 'newfile'}, 'snippet': "var1.write(struct.pack('5b', *var0))"}
Generated  translation
bin ( var1, var0 ) 
--------- B -----------
{'intent': {'gloss': ['find', 'intersection', 'data', 'between', 'series', 'var0', 'and', 'series', 'var1'], 'words': ['find', 'intersection', 'data', 'between', 'series', 'var0', 'and', 'series', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's1', 'var1': 's2'}, 'snippet': 'pd.series(list(set(var0).intersection(set(var1))))'}
Generated  translation
var0. groupby ( np. arange ( len ( var1 ) ). intersection ( var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['format', 'string', 'str0', 'with', 'variables', 'var0', 'and', 'var1'], 'words': ['format', 'string', 'str0', 'with', 'variables', 'var0', 'and', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '({} goals, ${})', 'var0': 'goals', 'var1': 'penalties', '( str0 )': '({} goals, ${})'}, 'snippet': '"""str0""".format(self.var0, self.var1)'}
Generated  translation
" " " str0 " " ". format ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['combine', 'elements', 'of', 'each', 'list', 'in', 'list', 'var0', 'into', 'digits', 'of', 'a', 'single', 'integer'], 'words': ['combine', 'elements', 'of', 'each', 'list', 'in', 'list', 'var0', 'into', 'digits', 'of', 'a', 'single', 'integer'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': "[''.join(str(d) for d in x) for x in var0]"}
Generated  translation
[ int ( x ) for x in var0 ] 
--------- B -----------
{'intent': {'gloss': ['substitute', 'ascii', 'letters', 'in', 'string', 'str0', 'with', 'empty', 'string', 'str1'], 'words': ['substitute', 'ascii', 'letters', 'in', 'string', 'str0', 'with', 'empty', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'aas30dsa20', 'str1': ''}, 'snippet': "re.sub('\\\\d', 'str1', 'str0')"}
Generated  translation
" " " str0 " " ". replace ('str1 ','' ) 
--------- B -----------
{'intent': {'gloss': ['increment', 'a', 'value', 'with', 'leading', 'zeroes', 'in', 'a', 'number', 'var0'], 'words': ['increment', 'a', 'value', 'with', 'leading', 'zeroes', 'in', 'a', 'number', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'str(int(var0) + 1).zfill(len(var0))'}
Generated  translation
from functools import reduce reduce ( lambda x, y : 10 * x + y, var0 ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'a', 'pandas', 'dataframe', 'var0', "'", 's', 'index', 'is', 'sorted'], 'words': ['check', 'if', 'a', 'pandas', 'dataframe', 'var0', "'", 's', 'index', 'is', 'sorted'], 'after': [' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': 'all(var0.index[:-1] <= var0.index[1:])'}
Generated  translation
var0. isnull ( ). values. index ( ) 
--------- B -----------
{'intent': {'gloss': ['create', 'multidimensional', 'array', 'var0', 'with', '3', 'rows', 'and', '2', 'columns', 'in', 'python'], 'words': ['create', 'multidimensional', 'array', 'var0', 'with', '3', 'rows', 'and', '2', 'columns', 'in', 'python'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'matrix'}, 'snippet': 'var0 = [[a, b], [c, d], [e, f]]'}
Generated  translation
var0 [ np. arange ( 3 ), ( 0, 1, 2 ) ] 
--------- B -----------
{'intent': {'gloss': ['sorting', 'a', 'python', 'list', 'by', 'two', 'criteria'], 'words': ['sorting', 'a', 'python', 'list', 'by', 'two', 'criteria'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'sorted(list, key=lambda x: (x[0], -x[1]))'}
Generated  translation
sorted ( list ( range ( 1 ) ), key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['click', 'a', 'href', 'button', 'having', 'text', 'str0', 'with', 'selenium'], 'words': ['click', 'a', 'href', 'button', 'having', 'text', 'str0', 'with', 'selenium'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'send inmail'}, 'snippet': "driver.findelement(by.linktext('str0')).click()"}
Generated  translation
browser. find _ element _ by _ css _ selector ('str0'). click ( ) 
--------- B -----------
{'intent': {'gloss': ['click', 'a', 'href', 'button', 'with', 'text', 'str0', 'with', 'selenium'], 'words': ['click', 'a', 'href', 'button', 'with', 'text', 'str0', 'with', 'selenium'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'send inmail'}, 'snippet': "driver.find_element_by_link_text('str0').click()"}
Generated  translation
browser. find _ element _ by _ css _ selector ('str0'). click ( ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'var0', 'by', 'length', 'of', 'value', 'in', 'tuple'], 'words': ['sort', 'a', 'list', 'var0', 'by', 'length', 'of', 'value', 'in', 'tuple'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': 'var0.sort(key=lambda t: len(t[1]), reverse=true)'}
Generated  translation
sorted ( var0, key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'array', 'var0', 'into', 'a', 'list'], 'words': ['convert', 'array', 'var0', 'into', 'a', 'list'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'numpy.array(var0).reshape(-1).tolist()'}
Generated  translation
[ y for x in list ( var0. items ( ) ) for y in x ] 
--------- B -----------
{'intent': {'gloss': ['swap', 'keys', 'with', 'values', 'in', 'a', 'dictionary', 'var0'], 'words': ['swap', 'keys', 'with', 'values', 'in', 'a', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'res = dict((v, k) for k, v in var0.items())'}
Generated  translation
dict ( ( k, v ) for k, v in var0. items ( ) if v ) 
--------- B -----------
{'intent': {'gloss': ['open', 'a', 'background', 'process', 'str0', 'with', 'arguments', 'str1'], 'words': ['open', 'a', 'background', 'process', 'str0', 'with', 'arguments', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'background-process', 'str1': 'arguments'}, 'snippet': "subprocess.popen(['str0', 'str1'])"}
Generated  translation
subprocess. popen ( ['str0 ','str1'] ) 
--------- B -----------
{'intent': {'gloss': ['find', 'duplicate', 'names', 'in', 'column', 'str0', 'of', 'the', 'dataframe', 'var0'], 'words': ['find', 'duplicate', 'names', 'in', 'column', 'str0', 'of', 'the', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'name', 'var0': 'x'}, 'snippet': "var0.set_index('str0').index.get_duplicates()"}
Generated  translation
var0 ['str0']. str. find ('str0') 
--------- B -----------
{'intent': {'gloss': ['get', 'the', '5th', 'item', 'of', 'a', 'generator'], 'words': ['get', 'the', '5th', 'item', 'of', 'a', 'generator'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'next(itertools.islice(range(10), 5, 5 + 1))'}
Generated  translation
len ( [ 1, 2, 3 ] ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'list', 'of', 'string', 'numbers', 'into', 'list', 'of', 'integers'], 'words': ['convert', 'list', 'of', 'string', 'numbers', 'into', 'list', 'of', 'integers'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "map(int, eval(input('enter the unfriendly numbers: ')))"}
Generated  translation
[ int ( i ) for i in range ( 100 ) ] 
--------- B -----------
{'intent': {'gloss': ['how', 'do', 'i', 'sort', 'a', 'list', 'of', 'dictionaries', 'by', 'values', 'of', 'the', 'dictionary', 'in', 'python', '?'], 'words': ['how', 'do', 'i', 'sort', 'a', 'list', 'of', 'dictionaries', 'by', 'values', 'of', 'the', 'dictionary', 'in', 'python', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "list_of_dicts.sort(key=operator.itemgetter('name'))"}
Generated  translation
sorted ( list ( mydict. items ( ) ), key = lambda x : x [ 1 ] ['a'], reverse = true ) 
--------- B -----------
{'intent': {'gloss': ['how', 'do', 'i', 'sort', 'a', 'list', 'of', 'dictionaries', 'by', 'values', 'of', 'the', 'dictionary', 'in', 'python', '?'], 'words': ['how', 'do', 'i', 'sort', 'a', 'list', 'of', 'dictionaries', 'by', 'values', 'of', 'the', 'dictionary', 'in', 'python', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "list_of_dicts.sort(key=operator.itemgetter('age'))"}
Generated  translation
sorted ( list ( mydict. items ( ) ), key = lambda x : x [ 1 ] ['a'], reverse = true ) 
--------- B -----------
{'intent': {'gloss': ['join', 'together', 'with', 'str0', 'elements', 'inside', 'a', 'list', 'indexed', 'with', 'str1', 'within', 'a', 'dictionary', 'var0'], 'words': ['join', 'together', 'with', 'str0', 'elements', 'inside', 'a', 'list', 'indexed', 'with', 'str1', 'within', 'a', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': ',', 'str1': 'category', 'var0': 'trans'}, 'snippet': '"""str0""".join(var0[\'str1\'])'}
Generated  translation
dict ( ( k, v ) for k, v in var0. items ( ) if v ) 
--------- B -----------
{'intent': {'gloss': ['get', 'json', 'data', 'from', 'restful', 'service', 'str0'], 'words': ['get', 'json', 'data', 'from', 'restful', 'service', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'url'}, 'snippet': "json.load(urllib.request.urlopen('str0'))"}
Generated  translation
json. loads ('{ " foo " : 42, " bar " : " baz " }') ['str0'] 
--------- B -----------
{'intent': {'gloss': ['decode', 'a', 'hex', 'string', 'str0', 'to', 'utf', '-', '8', '.'], 'words': ['decode', 'a', 'hex', 'string', 'str0', 'to', 'utf', '-', '8', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', '', '', '']}, 'slot_map': {'str0': '4a4b4c'}, 'snippet': "bytes.fromhex('str0').decode('utf-8')"}
Generated  translation
str0. decode ('utf - 8 ','ignore') 
--------- B -----------
{'intent': {'gloss': ['concatenate', 'elements', 'of', 'list', 'var0', 'by', 'a', 'colon', 'str0'], 'words': ['concatenate', 'elements', 'of', 'list', 'var0', 'by', 'a', 'colon', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'b', 'str0': ':'}, 'snippet': '"""str0""".join(str(x) for x in var0)'}
Generated  translation
str ( var0 ). replace ('str0 ','' ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'key', 'str0', 'from', 'dictionary', 'var0'], 'words': ['remove', 'key', 'str0', 'from', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'c', 'var0': 'd'}, 'snippet': "{i: var0[i] for i in var0 if i != 'str0'}"}
Generated  translation
var0. pop ('str0 ', none ) 
--------- B -----------
{'intent': {'gloss': ['cut', 'off', 'the', 'last', 'word', 'of', 'a', 'sentence', 'var0'], 'words': ['cut', 'off', 'the', 'last', 'word', 'of', 'a', 'sentence', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'content'}, 'snippet': '""" """.join(var0.split(\' \')[:-1])'}
Generated  translation
var0. split ('', 1 ) [ 1 ] 
--------- B -----------
{'intent': {'gloss': ['sum', 'all', 'elements', 'of', 'nested', 'list', 'var0'], 'words': ['sum', 'all', 'elements', 'of', 'nested', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': 'sum(sum(i) if isinstance(i, list) else i for i in var0)'}
Generated  translation
sum ( [ sum ( x ) for x in var0 ] ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'directory', 'str0', 'exists', 'and', 'create', 'it', 'if', 'necessary'], 'words': ['check', 'if', 'directory', 'str0', 'exists', 'and', 'create', 'it', 'if', 'necessary'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'directory'}, 'snippet': 'if not os.path.exists(str0):\n    os.makedirs(str0)'}
Generated  translation
os. path. exists ('str0') 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'dictionary', 'var0', 'of', 'key', '-', 'value', 'pairs', 'in', 'pymongo', 'cursor', 'var1'], 'words': ['get', 'a', 'dictionary', 'var0', 'of', 'key', '-', 'value', 'pairs', 'in', 'pymongo', 'cursor', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'records', 'var1': 'cursor'}, 'snippet': "var0 = dict((record['_id'], record) for record in var1)"}
Generated  translation
var0 = dict ( ( k, v ) for k, v in var1. items ( ) ) 
--------- B -----------
{'intent': {'gloss': ['count', 'the', 'occurrences', 'of', 'items', 'in', 'list', 'var0'], 'words': ['count', 'the', 'occurrences', 'of', 'items', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': 'dict((x, var0.count(x)) for x in set(var0))'}
Generated  translation
len ( set ( var0 ) ) = = len ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'list', 'of', 'indexes', 'of', 'rows', 'where', 'column', 'str0', 'values', 'match', 'true'], 'words': ['get', 'list', 'of', 'indexes', 'of', 'rows', 'where', 'column', 'str0', 'values', 'match', 'true'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'boolcol'}, 'snippet': "df[df['str0'] == true].index.tolist()"}
Generated  translation
[ i for i, j in enumerate ( str0 ) if i! = 0 ] 
--------- B -----------
{'intent': {'gloss': ['remove', 'a', 'div', 'with', 'a', 'id', 'str0', 'using', 'beautifulsoup'], 'words': ['remove', 'a', 'div', 'with', 'a', 'id', 'str0', 'using', 'beautifulsoup'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'main-content'}, 'snippet': "soup.find('div', id='str0').decompose()"}
Generated  translation
soup. findall ( id = re. compile ('para $') ) 
--------- B -----------
{'intent': {'gloss': ['filter', 'rows', 'containing', 'key', 'word', 'var0', 'in', 'column', 'var1'], 'words': ['filter', 'rows', 'containing', 'key', 'word', 'var0', 'in', 'column', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'ball', 'var1': 'ids'}, 'snippet': "df[df['var1'].str.contains('var0')]"}
Generated  translation
[ ( var0 ['var1'], var0 ['var1'] ) ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'list', 'var0', 'into', 'a', 'comma', 'separated', 'string'], 'words': ['convert', 'list', 'var0', 'into', 'a', 'comma', 'separated', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list_of_ints'}, 'snippet': '""",""".join([str(i) for i in var0])'}
Generated  translation
" " " " " ". join ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['unzip', 'list', 'var0'], 'words': ['unzip', 'list', 'var0'], 'after': [' ', ' ', '']}, 'slot_map': {'var0': 'original'}, 'snippet': 'result = [a for a, b in var0], [b for a, b in var0]'}
Generated  translation
var0. split ( ) 
--------- B -----------
{'intent': {'gloss': ['unzip', 'list', 'var0', 'and', 'return', 'a', 'generator'], 'words': ['unzip', 'list', 'var0', 'and', 'return', 'a', 'generator'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'original'}, 'snippet': 'result = (a for a, b in var0), (b for a, b in var0)'}
Generated  translation
var0 = [ i [ 0 ] for i in var0 ] 
--------- B -----------
{'intent': {'gloss': ['reverse', 'the', 'keys', 'and', 'values', 'in', 'a', 'dictionary', 'var0'], 'words': ['reverse', 'the', 'keys', 'and', 'values', 'in', 'a', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mydictionary'}, 'snippet': '{i[1]: i[0] for i in list(var0.items())}'}
Generated  translation
dict ( ( v, k ) for k, v in var0. items ( ) ) 
--------- B -----------
{'intent': {'gloss': ['call', 'multiple', 'bash', 'function', '‘vasp', '’', 'and', '‘tee', 'tee', '_', 'output', '’', 'using', '‘|', '’'], 'words': ['call', 'multiple', 'bash', 'function', '‘vasp', '’', 'and', '‘tee', 'tee', '_', 'output', '’', 'using', '‘|', '’'], 'after': [' ', ' ', ' ', ' ', '', ' ', ' ', ' ', '', '', '', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "subprocess.check_call('vasp | tee tee_output', shell=true)"}
Generated  translation
parser. add _ argument ('tee tee tee tee tee _ output') 
--------- B -----------
{'intent': {'gloss': ['download', 'a', 'file', 'str0', 'over', 'http', 'and', 'save', 'to', 'str1'], 'words': ['download', 'a', 'file', 'str0', 'over', 'http', 'and', 'save', 'to', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'http://www.example.com/songs/mp3.mp3', 'str1': 'mp3.mp3'}, 'snippet': "urllib.request.urlretrieve('str0', 'str1')"}
Generated  translation
shutil. savefig ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['encode', 'binary', 'string', 'str0', 'to', 'base64', 'code'], 'words': ['encode', 'binary', 'string', 'str0', 'to', 'base64', 'code'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'your string'}, 'snippet': "base64.b64encode(bytes('str0', 'utf-8'))"}
Generated  translation
print ('str0 '. encode ('utf - 8') ) 
--------- B -----------
{'intent': {'gloss': ['identify', 'duplicate', 'values', 'in', 'list', 'var0'], 'words': ['identify', 'duplicate', 'values', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylist'}, 'snippet': '[k for k, v in list(counter(var0).items()) if v > 1]'}
Generated  translation
woduplicates = list ( set ( var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['subscript', 'text', 'str0', 'with', 'str1', 'as', 'subscripted', 'in', 'matplotlib', 'labels', 'for', 'arrays', 'str2', 'and', 'str3', '.'], 'words': ['subscript', 'text', 'str0', 'with', 'str1', 'as', 'subscripted', 'in', 'matplotlib', 'labels', 'for', 'arrays', 'str2', 'and', 'str3', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'h20', 'str1': '2', 'str2': 'x', 'str3': 'y'}, 'snippet': "plt.plot(str2, str3, label='$h_2o$')"}
Generated  translation
" " " str0 " " ". replace ('str1 ','' ). replace ('str2 ','' ) 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'list', 'containing', 'the', 'indexes', 'of', 'rows', 'where', 'the', 'value', 'of', 'column', 'str0', 'in', 'dataframe', 'var0', 'are', 'equal', 'to', 'true'], 'words': ['create', 'a', 'list', 'containing', 'the', 'indexes', 'of', 'rows', 'where', 'the', 'value', 'of', 'column', 'str0', 'in', 'dataframe', 'var0', 'are', 'equal', 'to', 'true'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'boolcol', 'var0': 'df'}, 'snippet': "var0.iloc[np.flatnonzero(var0['str0'])]"}
Generated  translation
[ var0 for var0 in lst if var0 ['str0'] = ='str0'] 
--------- B -----------
{'intent': {'gloss': ['replace', 'all', 'occurences', 'of', 'newlines', 'str0', 'with', 'str1', 'in', 'dataframe', 'var0'], 'words': ['replace', 'all', 'occurences', 'of', 'newlines', 'str0', 'with', 'str1', 'in', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '\n', 'str1': '<br>', 'var0': 'df'}, 'snippet': "var0.replace({'str0': 'str1'}, regex=true)"}
Generated  translation
var0. replace ('str0 ', np. nan ) 
--------- B -----------
{'intent': {'gloss': ['replace', 'all', 'occurrences', 'of', 'a', 'string', 'str0', 'by', 'string', 'str1', 'in', 'a', 'pandas', 'data', 'frame', 'var0'], 'words': ['replace', 'all', 'occurrences', 'of', 'a', 'string', 'str0', 'by', 'string', 'str1', 'in', 'a', 'pandas', 'data', 'frame', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '\n', 'str1': '<br>', 'var0': 'df'}, 'snippet': "var0.replace({'str0': 'str1'}, regex=true)"}
Generated  translation
var0. replace ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'list', 'containing', 'each', 'two', 'adjacent', 'letters', 'in', 'string', 'var0', 'as', 'its', 'elements'], 'words': ['create', 'a', 'list', 'containing', 'each', 'two', 'adjacent', 'letters', 'in', 'string', 'var0', 'as', 'its', 'elements'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'word'}, 'snippet': '[(x + y) for x, y in zip(var0, var0[1:])]'}
Generated  translation
[''. join ( x ) for x in zip ( var0, var0 [ 1 : ] ) ] 
--------- B -----------
{'intent': {'gloss': ['click', 'a', 'href', 'button', 'str0', 'with', 'selenium'], 'words': ['click', 'a', 'href', 'button', 'str0', 'with', 'selenium'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'send'}, 'snippet': "driver.find_element_by_partial_link_text('str0').click()"}
Generated  translation
driver. find _ element _ by _ css _ selector ('str0'). click ( ) 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'by', 'words', 'that', 'ends', 'with', 'str0'], 'words': ['split', 'string', 'var0', 'by', 'words', 'that', 'ends', 'with', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's', 'str0': 'd'}, 'snippet': "re.findall('\\\\b(\\\\w+)d\\\\b', var0)"}
Generated  translation
re. split ('\ \ w + ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['find', 'all', 'words', 'in', 'a', 'string', 'var0', 'that', 'start', 'with', 'the', 'str0', 'sign'], 'words': ['find', 'all', 'words', 'in', 'a', 'string', 'var0', 'that', 'start', 'with', 'the', 'str0', 'sign'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mystring', 'str0': '$'}, 'snippet': "[word for word in var0.split() if word.startswith('str0')]"}
Generated  translation
re. findall ('\ \ [ (. *? ) \ \ ] ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'unix', 'timestamp', 'str0', 'to', 'formatted', 'string', 'str1'], 'words': ['convert', 'unix', 'timestamp', 'str0', 'to', 'formatted', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '1347517370', 'str1': '%y-%m-%d %h:%m:%s'}, 'snippet': "time.strftime('str1', time.localtime(1347517370))"}
Generated  translation
" " " str0 " " ". format ('str1') 
--------- B -----------
{'intent': {'gloss': ['display', 'the', 'float', 'str0', 'as', 'a', 'percentage'], 'words': ['display', 'the', 'float', 'str0', 'as', 'a', 'percentage'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '1/3*100'}, 'snippet': "print('{0:.0f}%'.format(1.0 / 3 * 100))"}
Generated  translation
" " " { 0 :. 2f } " " ". format ( str0 ) 
--------- B -----------
{'intent': {'gloss': ['write', 'records', 'in', 'dataframe', 'var0', 'to', 'table', 'str0', 'in', 'schema', 'str1'], 'words': ['write', 'records', 'in', 'dataframe', 'var0', 'to', 'table', 'str0', 'in', 'schema', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'test', 'str1': 'a_schema'}, 'snippet': "var0.to_sql('str0', engine, schema='str1')"}
Generated  translation
var0. to _ csv ('str1 ', cols = ['str0'] ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'elements', 'from', 'list', 'var0', 'that', 'have', 'an', 'index', 'number', 'mentioned', 'in', 'list', 'var1'], 'words': ['remove', 'elements', 'from', 'list', 'var0', 'that', 'have', 'an', 'index', 'number', 'mentioned', 'in', 'list', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'oldlist', 'var1': 'removelist'}, 'snippet': 'newlist = [v for i, v in enumerate(var0) if i not in var1]'}
Generated  translation
[ x for x in var0 if x not in var1 ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'tuple', 'of', 'tuples', 'str0', 'to', 'tuple'], 'words': ['convert', 'tuple', 'of', 'tuples', 'str0', 'to', 'tuple'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "(('aa',), ('bb',), ('cc',))", '( str0 )': "(('aa',), ('bb',), ('cc',))"}, 'snippet': 'from functools import reduce\nreduce(lambda a, b: a + b, ( str0 ))'}
Generated  translation
tuple ( zip ( * str0 ) ) 
--------- B -----------
{'intent': {'gloss': ['python', 'pandas', ':', 'how', 'to', 'replace', 'a', 'characters', 'in', 'a', 'column', 'of', 'a', 'dataframe', '?'], 'words': ['python', 'pandas', ':', 'how', 'to', 'replace', 'a', 'characters', 'in', 'a', 'column', 'of', 'a', 'dataframe', '?'], 'after': [' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "df['range'].replace(',', '-', inplace=true)"}
Generated  translation
df. replace ('df ','' ) 
--------- B -----------
{'intent': {'gloss': ['filter', 'dataframe', 'var0', 'by', 'values', 'in', 'column', 'var1', 'that', 'appear', 'more', 'than', 'once'], 'words': ['filter', 'dataframe', 'var0', 'by', 'values', 'in', 'column', 'var1', 'that', 'appear', 'more', 'than', 'once'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'var1': 'a'}, 'snippet': "var0.groupby('var1').filter(lambda x: len(x) > 1)"}
Generated  translation
var0. loc [ var0 ['var1'] = = var0 ['var1'] 
--------- B -----------
{'intent': {'gloss': ['convert', 'datetime', 'column', 'str0', 'of', 'pandas', 'dataframe', 'str1', 'to', 'ordinal'], 'words': ['convert', 'datetime', 'column', 'str0', 'of', 'pandas', 'dataframe', 'str1', 'to', 'ordinal'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'date', 'str1': 'df'}, 'snippet': "str1['str0'].apply(lambda x: x.toordinal())"}
Generated  translation
df ['str1'] = df ['str0']. dt. strftime ('% d % m % y') 
--------- B -----------
{'intent': {'gloss': ['reverse', 'sort', 'list', 'of', 'dicts', 'var0', 'by', 'value', 'for', 'key', 'var1'], 'words': ['reverse', 'sort', 'list', 'of', 'dicts', 'var0', 'by', 'value', 'for', 'key', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l', 'var1': 'time'}, 'snippet': "var0 = sorted(var0, key=itemgetter('var1'), reverse=true)"}
Generated  translation
sorted ( var0, key = lambda x : var1. index ( x ['var0'] ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'rows', 'of', 'dataframe', 'var0', 'that', 'match', 'regex', 'str0'], 'words': ['get', 'rows', 'of', 'dataframe', 'var0', 'that', 'match', 'regex', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': '(hel|just)', '( str0 )': '(hel|just)'}, 'snippet': "var0.loc[var0[0].str.contains('str0')]"}
Generated  translation
var0. groupby ( ['str0 ','str0'] ). cumcount ( ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'list', 'var0', 'based', 'on', 'second', 'index', 'of', 'each', 'string', 'var1'], 'words': ['sort', 'list', 'var0', 'based', 'on', 'second', 'index', 'of', 'each', 'string', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list_of_strings', 'var1': 's'}, 'snippet': "sorted(var0, key=lambda var1: var1.split(',')[1])"}
Generated  translation
sorted ( var0, key = lambda x : var1. index ( x [ 1 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'dictionaries', 'var0', 'by', 'values', 'in', 'key', 'var1', 'in', 'descending', 'order'], 'words': ['sort', 'a', 'list', 'of', 'dictionaries', 'var0', 'by', 'values', 'in', 'key', 'var1', 'in', 'descending', 'order'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l', 'var1': 'name'}, 'snippet': "newlist = sorted(var0, key=itemgetter('var1'), reverse=true)"}
Generated  translation
sorted ( var0, key = lambda i : list ( i. values ( ) ) [ 0 ], reverse = true ) 
--------- B -----------
{'intent': {'gloss': ['django', 'get', 'maximum', 'value', 'associated', 'with', 'field', 'str0', 'in', 'model', 'var0'], 'words': ['django', 'get', 'maximum', 'value', 'associated', 'with', 'field', 'str0', 'in', 'model', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'added', 'var0': 'authorizedemail'}, 'snippet': "var0.objects.filter(group=group).order_by('-added')[0]"}
Generated  translation
var0. objects. order _ by ('- pet _ _ age') [ : 2 ] 
--------- B -----------
{'intent': {'gloss': ['download', 'a', 'file', 'str0', 'over', 'http'], 'words': ['download', 'a', 'file', 'str0', 'over', 'http'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'http://www.example.com/'}, 'snippet': "response = urllib.request.urlopen('str0')\nhtml = response.read()"}
Generated  translation
exec ( compile ( open ('str0'). read ( ),'str0 ','exec') ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'epoch', 'time', 'represented', 'as', 'milliseconds', 'var0', 'to', 'string', 'using', 'format', 'str0'], 'words': ['convert', 'epoch', 'time', 'represented', 'as', 'milliseconds', 'var0', 'to', 'string', 'using', 'format', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's', 'str0': '%y-%m-%d %h:%m:%s.%f'}, 'snippet': "datetime.datetime.fromtimestamp(var0).strftime('str0')"}
Generated  translation
time. strftime ('str0 ','str0') 
--------- B -----------
{'intent': {'gloss': ['upload', 'file', 'using', 'ftp'], 'words': ['upload', 'file', 'using', 'ftp'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "ftp.storlines('stor ' + filename, open(filename, 'r'))"}
Generated  translation
ftp. storbinary ( open ( filename ),'text / plain ', filename ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'list', 'of', 'lists', 'var0', 'to', 'list', 'of', 'integers'], 'words': ['convert', 'list', 'of', 'lists', 'var0', 'to', 'list', 'of', 'integers'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': "[int(''.join(str(d) for d in x)) for x in var0]"}
Generated  translation
[ int ( i ) for i in var0 ] 
--------- B -----------
{'intent': {'gloss': ['replace', 'a', 'separate', 'word', 'str0', 'by', 'str1', 'in', 'a', 'string', 'str2'], 'words': ['replace', 'a', 'separate', 'word', 'str0', 'by', 'str1', 'in', 'a', 'string', 'str2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'h3', 'str1': 'h1', 'str2': 'text'}, 'snippet': "re.sub('\\\\bh3\\\\b', 'str1', str2)"}
Generated  translation
" " " str2 " " ". replace ('str0 ','str1'). replace ('str1 ','str2') 
--------- B -----------
{'intent': {'gloss': ['insert', 'data', 'from', 'a', 'string', 'var0', 'to', 'sqlite', 'db', 'var1'], 'words': ['insert', 'data', 'from', 'a', 'string', 'var0', 'to', 'sqlite', 'db', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'testfield', 'var1': 'c'}, 'snippet': 'var1.execute("insert into test values (?, \'bar\')", (var0,))'}
Generated  translation
cursor. execute ('insert into table values ( % s, % s ) ', ( var0, var1 ) ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'all', 'special', 'characters', ',', 'punctuation', 'and', 'spaces', 'from', 'a', 'string', 'var0', 'using', 'regex'], 'words': ['remove', 'all', 'special', 'characters', ',', 'punctuation', 'and', 'spaces', 'from', 'a', 'string', 'var0', 'using', 'regex'], 'after': [' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mystring'}, 'snippet': "re.sub('[^a-za-z0-9]+', '', var0)"}
Generated  translation
re. sub ('[ ^ \ \ w + ] ','', var0 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'list', 'containing', 'the', 'sum', 'of', 'each', 'element', 'var0', 'in', 'list', 'var1', 'plus', 'the', 'previous', 'elements'], 'words': ['get', 'a', 'list', 'containing', 'the', 'sum', 'of', 'each', 'element', 'var0', 'in', 'list', 'var1', 'plus', 'the', 'previous', 'elements'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'i', 'var1': 'l'}, 'snippet': '[sum(var1[:var0]) for var0, _ in enumerate(var1)]'}
Generated  translation
[ sum ( x ) for x in var0 ] 
--------- B -----------
{'intent': {'gloss': ['beautifulsoup', 'find', 'all', 'str0', 'elements', 'in', 'html', 'string', 'var0', 'with', 'class', 'of', 'str1'], 'words': ['beautifulsoup', 'find', 'all', 'str0', 'elements', 'in', 'html', 'string', 'var0', 'with', 'class', 'of', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'span', 'var0': 'soup', 'str1': 'stargryb sp'}, 'snippet': "var0.find_all('str0', {'class': 'str1'})"}
Generated  translation
soup. findall ( attrs = {'str0':'str1'} ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'duplicate', 'elements', 'from', 'list', 'str0'], 'words': ['remove', 'duplicate', 'elements', 'from', 'list', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'l'}, 'snippet': 'list(dict((x[0], x) for x in str0).values())'}
Generated  translation
[ k for k, g in itertools. groupby ( [ str0 ] ) ] 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'words': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'testlist'}, 'snippet': 'for i in [i for i, x in enumerate(var0) if x == 1]:\n    pass'}
Generated  translation
var0. position ( 1 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'words': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'testlist'}, 'snippet': 'for i in (i for i, x in enumerate(var0) if x == 1):\n    pass'}
Generated  translation
var0. position ( 1 ) 
--------- B -----------
{'intent': {'gloss': ['python', 'split', 'a', 'string', 'using', 'regex'], 'words': ['python', 'split', 'a', 'string', 'using', 'regex'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "re.findall('(.+?):(.+?)\\\\b ?', text)"}
Generated  translation
re. split ('\ \ w + ','str1') 
--------- B -----------
{'intent': {'gloss': ['get', 'all', 'text', 'that', 'is', 'not', 'enclosed', 'within', 'square', 'brackets', 'in', 'string', 'var0'], 'words': ['get', 'all', 'text', 'that', 'is', 'not', 'enclosed', 'within', 'square', 'brackets', 'in', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'example_str'}, 'snippet': "re.findall('(.*?)\\\\[.*?\\\\]', var0)"}
Generated  translation
re. sub ('\ \ [. *? \ \ ] ','', var0 ) 
--------- B -----------
{'intent': {'gloss': ['read', 'a', 'file', 'str0', 'into', 'a', 'list', 'var0'], 'words': ['read', 'a', 'file', 'str0', 'into', 'a', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'c:/name/mydocuments/numbers', 'var0': 'data'}, 'snippet': "var0 = [line.strip() for line in open('str0', 'r')]"}
Generated  translation
var0 = open ('str0'). read ( ) 
--------- B -----------
{'intent': {'gloss': ['loop', 'through', 'the', 'ip', 'address', 'range', 'str0'], 'words': ['loop', 'through', 'the', 'ip', 'address', 'range', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '192.168.x.x'}, 'snippet': 'for i, j in product(list(range(256)), list(range(256))):\n    pass'}
Generated  translation
urllib. parse. quote ('str0') 
--------- B -----------
{'intent': {'gloss': ['remove', 'last', 'comma', 'character', 'str0', 'in', 'string', 'var0'], 'words': ['remove', 'last', 'comma', 'character', 'str0', 'in', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': ',', 'var0': 's'}, 'snippet': '"""""".join(var0.rsplit(\'str0\', 1))'}
Generated  translation
var0 = re. sub ('\ \. com $ ','', var0 ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'dictionary', 'var0', 'based', 'on', 'key', 'var1', 'in', 'descending', 'order'], 'words': ['sort', 'a', 'list', 'of', 'dictionary', 'var0', 'based', 'on', 'key', 'var1', 'in', 'descending', 'order'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l', 'var1': 'time'}, 'snippet': "var0 = sorted(var0, key=lambda a: a['var1'], reverse=true)"}
Generated  translation
sorted ( var0, key = lambda x : trial _ dict [ x ], reverse = true ) 
--------- B -----------
{'intent': {'gloss': ['find', 'the', 'string', 'in', 'var0', 'between', 'two', 'special', 'characters', 'str0', 'and', 'str1'], 'words': ['find', 'the', 'string', 'in', 'var0', 'between', 'two', 'special', 'characters', 'str0', 'and', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'your_string', 'str0': '[', 'str1': ']'}, 'snippet': "re.search('\\\\[(.*)\\\\]', var0).group(1)"}
Generated  translation
re. findall ('\ \ b (? : b + a ) + b + \ \ b ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'integer', 'var0', 'into', 'an', 'unassigned', 'integer'], 'words': ['convert', 'integer', 'var0', 'into', 'an', 'unassigned', 'integer'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'number'}, 'snippet': "struct.unpack('h', struct.pack('h', var0))"}
Generated  translation
struct. unpack ('> q ', var0 ) [ 0 ] 
--------- B -----------
{'intent': {'gloss': ['sum', 'elements', 'at', 'the', 'same', 'index', 'in', 'list', 'var0'], 'words': ['sum', 'elements', 'at', 'the', 'same', 'index', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'data'}, 'snippet': '[[sum(item) for item in zip(*items)] for items in zip(*var0)]'}
Generated  translation
map ( sum, zip ( * var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'rid', 'of', 'none', 'values', 'in', 'dictionary', 'var0'], 'words': ['get', 'rid', 'of', 'none', 'values', 'in', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'kwargs'}, 'snippet': 'res = {k: v for k, v in list(var0.items()) if v is not none}'}
Generated  translation
{ k : v for k, v in list ( var0. items ( ) ) if v } 
--------- B -----------
{'intent': {'gloss': ['merge', 'a', 'nested', 'dictionary', 'var0', 'into', 'a', 'flat', 'dictionary', 'by', 'concatenating', 'nested', 'values', 'with', 'the', 'same', 'key', 'var1'], 'words': ['merge', 'a', 'nested', 'dictionary', 'var0', 'into', 'a', 'flat', 'dictionary', 'by', 'concatenating', 'nested', 'values', 'with', 'the', 'same', 'key', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'dicts', 'var1': 'k'}, 'snippet': '{var1: [d[var1] for d in var0] for var1 in var0[0]}'}
Generated  translation
dict ( ( k, v ) for k, v in var0. items ( ) if v ) 
--------- B -----------
{'intent': {'gloss': ['loop', 'over', 'files', 'in', 'directory', 'var0'], 'words': ['loop', 'over', 'files', 'in', 'directory', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'source'}, 'snippet': 'for root, dirs, filenames in os.walk(var0):\n    for f in filenames:\n        pass'}
Generated  translation
for dirname, dirnames, filenames in os. walk ( var0 ) : pass 
--------- B -----------
{'intent': {'gloss': ['join', 'each', 'element', 'in', 'array', 'var0', 'with', 'element', 'at', 'the', 'same', 'index', 'in', 'array', 'var1', 'as', 'a', 'tuple'], 'words': ['join', 'each', 'element', 'in', 'array', 'var0', 'with', 'element', 'at', 'the', 'same', 'index', 'in', 'array', 'var1', 'as', 'a', 'tuple'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'b'}, 'snippet': 'np.array([zip(x, y) for x, y in zip(var0, var1)])'}
Generated  translation
zip ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['extract', 'brackets', 'from', 'string', 'var0'], 'words': ['extract', 'brackets', 'from', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': "brackets = re.sub('[^(){}[\\\\]]', '', var0)"}
Generated  translation
re. findall ('\ \ [ (. *? ) \ \ ] ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['append', 'a', 'tuple', 'of', 'elements', 'from', 'list', 'var0', 'with', 'indexes', 'str0', 'to', 'list', 'var1'], 'words': ['append', 'a', 'tuple', 'of', 'elements', 'from', 'list', 'var0', 'with', 'indexes', 'str0', 'to', 'list', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'str0': '[0][0] [0][2]', 'var1': 'b', '[ str0 ]': '[0][0] [0][2]'}, 'snippet': 'var1.append((var0[0][0], var0[0][2]))'}
Generated  translation
[ ( x, y ) for x, y in zip ( str0, str1 ) ] 
--------- B -----------
{'intent': {'gloss': ['reverse', 'sort', 'counter', 'var0', 'by', 'value'], 'words': ['reverse', 'sort', 'counter', 'var0', 'by', 'value'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'sorted(list(var0.items()), key=lambda pair: pair[1], reverse=true)'}
Generated  translation
sorted ( iter ( var0. items ( ) ), key = itemgetter ( 1 ), reverse = true ) 
--------- B -----------
{'intent': {'gloss': ['add', 'a', 'column', 'str0', 'with', 'value', 'str1', 'to', 'dataframe', 'var0'], 'words': ['add', 'a', 'column', 'str0', 'with', 'value', 'str1', 'to', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'day', 'str1': 'sat', 'var0': 'df'}, 'snippet': "var0.xs('str1', level='str0', drop_level=false)"}
Generated  translation
var0 ['str0'] = var0 ['str1']. dt. strftime ('str0') 
--------- B -----------
{'intent': {'gloss': ['sorting', 'a', 'list', 'of', 'lists', 'in', 'python'], 'words': ['sorting', 'a', 'list', 'of', 'lists', 'in', 'python'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'c2.sort(key=lambda row: (row[2], row[1], row[0]))'}
Generated  translation
[ sorted ( item ) for item in item ] 
--------- B -----------
{'intent': {'gloss': ['get', 'an', 'array', 'of', 'the', 'mean', 'of', 'each', 'two', 'consecutive', 'values', 'in', 'numpy', 'array', 'var0'], 'words': ['get', 'an', 'array', 'of', 'the', 'mean', 'of', 'each', 'two', 'consecutive', 'values', 'in', 'numpy', 'array', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'var0[:-1] + (var0[1:] - var0[:-1]) / 2'}
Generated  translation
np. zeros ( np. arange ( len ( var0 ) ), var0. mean ( axis = 1 ) ) 
--------- B -----------
{'intent': {'gloss': ['how', 'to', 'sort', 'a', 'dataframe', 'by', 'the', 'ocurrences', 'in', 'a', 'column', 'in', 'python', '(', 'pandas', ')'], 'words': ['how', 'to', 'sort', 'a', 'dataframe', 'by', 'the', 'ocurrences', 'in', 'a', 'column', 'in', 'python', '(', 'pandas', ')'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '']}, 'slot_map': {}, 'snippet': "df.groupby('prots').sum().sort('scores', ascending=false)"}
Generated  translation
df. sort ( df. columns, axis = 1, ascending = false ) 
--------- B -----------
{'intent': {'gloss': ['python', 'regex', 'to', 'find', 'all', 'numbers', 'and', 'dots', 'from', 'str0'], 'words': ['python', 'regex', 'to', 'find', 'all', 'numbers', 'and', 'dots', 'from', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'text'}, 'snippet': "re.findall('test([\\\\d.]*\\\\d+)', str0)"}
Generated  translation
re. findall ('\ \ d + (? = [ ^ [ ] + ) ','str0') 
--------- B -----------
{'intent': {'gloss': ['get', 'rid', 'of', 'none', 'values', 'in', 'dictionary', 'var0'], 'words': ['get', 'rid', 'of', 'none', 'values', 'in', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'kwargs'}, 'snippet': 'res = dict((k, v) for k, v in var0.items() if v is not none)'}
Generated  translation
{ k : v for k, v in list ( var0. items ( ) ) if v } 
--------- B -----------
{'intent': {'gloss': ['argparse', 'add', 'argument', 'with', 'flag', 'str0', 'and', 'version', 'action', 'of', 'str1', 'to', 'parser', 'var0'], 'words': ['argparse', 'add', 'argument', 'with', 'flag', 'str0', 'and', 'version', 'action', 'of', 'str1', 'to', 'parser', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '--version', 'str1': '%(prog)s 2.0', 'var0': 'parser'}, 'snippet': "var0.add_argument('str0', action='version', version='str1')"}
Generated  translation
parser. add _ argument ('str0 ', nargs ='str1') 
--------- B -----------
{'intent': {'gloss': ['multiple', 'each', 'value', 'by', 'str0', 'for', 'all', 'keys', 'in', 'a', 'dictionary', 'var0'], 'words': ['multiple', 'each', 'value', 'by', 'str0', 'for', 'all', 'keys', 'in', 'a', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '2', 'var0': 'my_dict'}, 'snippet': 'var0.update((x, y * 2) for x, y in list(var0.items()))'}
Generated  translation
dict ( ( k, v ) for k, v in var0. items ( ) if v ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'date', '7', 'days', 'before', 'the', 'current', 'date'], 'words': ['get', 'the', 'date', '7', 'days', 'before', 'the', 'current', 'date'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': '(datetime.datetime.now() - datetime.timedelta(days=7)).date()'}
Generated  translation
print ( ( datetime. date. today ( ) + datetime. timedelta ( 6 * 365 / 12 ) ). isoformat ( ) ) 
--------- B -----------
{'intent': {'gloss': ['combine', 'list', 'of', 'dictionaries', 'var0', 'with', 'the', 'same', 'keys', 'in', 'each', 'list', 'to', 'a', 'single', 'dictionary'], 'words': ['combine', 'list', 'of', 'dictionaries', 'var0', 'with', 'the', 'same', 'keys', 'in', 'each', 'list', 'to', 'a', 'single', 'dictionary'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'dicts'}, 'snippet': 'dict((k, [d[k] for d in var0]) for k in var0[0])'}
Generated  translation
dict ( ( k, v ) for d in var0 for k, v in list ( d. items ( ) ) ) 
--------- B -----------
{'intent': {'gloss': ['find', 'the', 'index', 'of', 'a', 'list', 'with', 'the', 'first', 'element', 'equal', 'to', 'str0', 'within', 'the', 'list', 'of', 'lists', 'var0'], 'words': ['find', 'the', 'index', 'of', 'a', 'list', 'with', 'the', 'first', 'element', 'equal', 'to', 'str0', 'within', 'the', 'list', 'of', 'lists', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '332', 'var0': 'thelist'}, 'snippet': "[index for index, item in enumerate(var0) if item[0] == 'str0']"}
Generated  translation
[ item for item in var0 if item [ 0 ] = = 1 ] 
--------- B -----------
{'intent': {'gloss': ['use', 'str0', 'operator', 'to', 'print', 'variable', 'values', 'var0', 'inside', 'a', 'string'], 'words': ['use', 'str0', 'operator', 'to', 'print', 'variable', 'values', 'var0', 'inside', 'a', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '%s', 'var0': 'str1'}, 'snippet': "'first string is: %s, second one is: %s' % (var0, 'geo.tif')"}
Generated  translation
print ('value is "'+ str ( str0 ) +'"') 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'pandas', 'series', 'var0', 'into', 'a', 'pandas', 'dataframe', 'var1', 'with', 'columns', 'var2', 'and', 'var3'], 'words': ['convert', 'a', 'pandas', 'series', 'var0', 'into', 'a', 'pandas', 'dataframe', 'var1', 'with', 'columns', 'var2', 'and', 'var3'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'sf', 'var1': 'df', 'var2': 'email', 'var3': 'list'}, 'snippet': "pd.dataframe({'var2': var0.index, 'var3': var0.values})"}
Generated  translation
var1. groupby ( lambda idx : 0 ). agg ( ['var0 ','var3'] ) 
--------- B -----------
{'intent': {'gloss': ['django', 'set', 'default', 'value', 'of', 'field', 'var0', 'equal', 'to', 'str0'], 'words': ['django', 'set', 'default', 'value', 'of', 'field', 'var0', 'equal', 'to', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'b', 'str0': '0000000'}, 'snippet': "var0 = models.charfield(max_length=7, default='str0', editable=false)"}
Generated  translation
var0. setdefault ('str0 ', 1 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'whatever', 'is', 'between', 'parentheses', 'as', 'a', 'single', 'match', ',', 'and', 'any', 'char', 'outside', 'as', 'an', 'individual', 'match', 'in', 'string', 'str0'], 'words': ['get', 'whatever', 'is', 'between', 'parentheses', 'as', 'a', 'single', 'match', ',', 'and', 'any', 'char', 'outside', 'as', 'an', 'individual', 'match', 'in', 'string', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '(zyx)bc'}, 'snippet': "re.findall('\\\\(.+?\\\\)|\\\\w', 'str0')"}
Generated  translation
re. findall ('\ \ [ (. *? ) \ \ ] ','str0') 
--------- B -----------
{'intent': {'gloss': ['match', 'multiple', 'regex', 'patterns', 'with', 'the', 'alternation', 'operator', 'str0', 'in', 'a', 'string', 'str1'], 'words': ['match', 'multiple', 'regex', 'patterns', 'with', 'the', 'alternation', 'operator', 'str0', 'in', 'a', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '|', 'str1': '(zyx)bc'}, 'snippet': "re.findall('\\\\(.*?\\\\)|\\\\w', 'str1')"}
Generated  translation
re. match ('str1 ','str0') 
--------- B -----------
{'intent': {'gloss': ['find', 'the', 'index', 'of', 'an', 'element', 'str0', 'in', 'a', 'list', 'var0'], 'words': ['find', 'the', 'index', 'of', 'an', 'element', 'str0', 'in', 'a', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'msft', 'var0': 'stocks_list'}, 'snippet': "[x for x in range(len(var0)) if var0[x] == 'str0']"}
Generated  translation
sorted ( var0, key = lambda x : var0. index ( x [ 1 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['send', 'multipart', 'encoded', 'file', 'var0', 'to', 'url', 'var1', 'with', 'headers', 'var2', 'and', 'metadata', 'var3'], 'words': ['send', 'multipart', 'encoded', 'file', 'var0', 'to', 'url', 'var1', 'with', 'headers', 'var2', 'and', 'metadata', 'var3'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'files', 'var1': 'url', 'var2': 'headers', 'var3': 'data'}, 'snippet': 'r = requests.post(var1, var0=var0, var2=var2, var3=var3)'}
Generated  translation
urllib. request. urlretrieve ('var0 ','var1') 
--------- B -----------
{'intent': {'gloss': ['numpy', 'concatenate', 'two', 'arrays', 'var0', 'and', 'var1', 'along', 'the', 'first', 'axis'], 'words': ['numpy', 'concatenate', 'two', 'arrays', 'var0', 'and', 'var1', 'along', 'the', 'first', 'axis'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'b'}, 'snippet': 'c = np.r_[var0[(none), :], var1[(none), :]]'}
Generated  translation
numpy. concatenate ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'list', 'of', 'lists', 'var0', 'into', 'a', 'flat', 'list'], 'words': ['convert', 'list', 'of', 'lists', 'var0', 'into', 'a', 'flat', 'list'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'data'}, 'snippet': '[y for x in var0 for y in (x if isinstance(x, list) else [x])]'}
Generated  translation
[ j for i in var0 for j in i ] 
--------- B -----------
{'intent': {'gloss': ['find', 'all', 'numbers', 'and', 'dots', 'from', 'a', 'string', 'var0', 'using', 'regex'], 'words': ['find', 'all', 'numbers', 'and', 'dots', 'from', 'a', 'string', 'var0', 'using', 'regex'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'text'}, 'snippet': "re.findall('test([0-9.]*[0-9]+)', var0)"}
Generated  translation
re. findall ('\ \ d + (? = [ ^ [ ] + ) ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['run', 'script', 'str0', 'with', 'argument', 'str1', 'on', 'terminal', 'using', 'python', 'executable'], 'words': ['run', 'script', 'str0', 'with', 'argument', 'str1', 'on', 'terminal', 'using', 'python', 'executable'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'hello.py', 'str1': 'htmlfilename.htm'}, 'snippet': "subprocess.call(['python.exe', 'str0', 'str1'])"}
Generated  translation
exec ( compile ( open ('str0'). read ( ),'str1 ','exec') ) 
--------- B -----------
{'intent': {'gloss': ['sum', 'columns', 'of', 'a', 'list', 'var0'], 'words': ['sum', 'columns', 'of', 'a', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'array'}, 'snippet': '[sum(row[i] for row in var0) for i in range(len(var0[0]))]'}
Generated  translation
sum ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['insert', 'a', 'str0', 'value', 'into', 'a', 'sqlite3', 'table', '.'], 'words': ['insert', 'a', 'str0', 'value', 'into', 'a', 'sqlite3', 'table', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'none'}, 'snippet': 'db.execute("insert into present values(\'test2\', ?, 10)", (str0,))'}
Generated  translation
cursor. execute ('insert into table values ( % s, % s, % s ) ', ( var0, ) ) 
--------- B -----------
{'intent': {'gloss': ['using', '%', 'f', 'with', 'strftime', '(', ')', 'in', 'python', 'to', 'get', 'microseconds'], 'words': ['using', '%', 'f', 'with', 'strftime', '(', ')', 'in', 'python', 'to', 'get', 'microseconds'], 'after': [' ', '', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "datetime.datetime.now().strftime('%h:%m:%s.%f')"}
Generated  translation
datetime. datetime. strptime ('january 11, 2010 ','% b % d, % y'). strftime ('% a') 
--------- B -----------
{'intent': {'gloss': ['get', 'digits', 'only', 'from', 'a', 'string', 'var0', 'using', 'lambda', 'function'], 'words': ['get', 'digits', 'only', 'from', 'a', 'string', 'var0', 'using', 'lambda', 'function'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'aas30dsa20'}, 'snippet': '"""""".join([x for x in \'var0\' if x.isdigit()])'}
Generated  translation
" " " " " ". join ( [ c for c in var0 if c. isdigit ( ) ] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'filename', 'without', 'the', 'extension', 'from', 'file', 'str0'], 'words': ['get', 'the', 'filename', 'without', 'the', 'extension', 'from', 'file', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'hemanth.txt'}, 'snippet': "print(os.path.splitext(os.path.basename('str0'))[0])"}
Generated  translation
os. path. dirname ( os. path. abspath ( str0 ) ) 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'dictionary', 'by', 'adding', 'each', 'two', 'adjacent', 'elements', 'in', 'tuple', 'var0', 'as', 'key', '/', 'value', 'pair', 'to', 'it'], 'words': ['create', 'a', 'dictionary', 'by', 'adding', 'each', 'two', 'adjacent', 'elements', 'in', 'tuple', 'var0', 'as', 'key', '/', 'value', 'pair', 'to', 'it'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'dict(var0[i:i + 2] for i in range(0, len(var0), 2))'}
Generated  translation
dict ( zip ( var0 [ : : 2 ], var0 [ 1 : : 2 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['extract', 'a', 'url', 'from', 'a', 'string', 'var0'], 'words': ['extract', 'a', 'url', 'from', 'a', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mystring'}, 'snippet': "print(re.findall('(https?://[^\\\\s]+)', var0))"}
Generated  translation
re. split ('[ ^ a - za - z ] * ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'elements', 'of', 'each', 'tuple', 'in', 'list', 'var0', 'into', 'a', 'string', 'separated', 'by', 'character', 'str0'], 'words': ['convert', 'elements', 'of', 'each', 'tuple', 'in', 'list', 'var0', 'into', 'a', 'string', 'separated', 'by', 'character', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l', 'str0': '@'}, 'snippet': '""" """.join([(\'%d@%d\' % t) for t in var0])'}
Generated  translation
" " " " " ". join ( [ str0 ] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'words': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'testlist'}, 'snippet': 'gen = (i for i, x in enumerate(var0) if x == 1)\nfor i in gen:\n    pass'}
Generated  translation
var0. position ( 1 ) 
--------- B -----------
{'intent': {'gloss': ['double', 'backslash', 'escape', 'all', 'double', 'quotes', 'in', 'string', 'var0'], 'words': ['double', 'backslash', 'escape', 'all', 'double', 'quotes', 'in', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': 'print(var0.encode(\'unicode-escape\').replace(\'"\', \'\\\\"\'))'}
Generated  translation
re. sub ('(? < = [ a - z ] ) \ \ 1 ','\ \ 1 ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['how', 'to', 'delete', 'all', 'instances', 'of', 'a', 'character', 'in', 'a', 'string', 'in', 'python', '?'], 'words': ['how', 'to', 'delete', 'all', 'instances', 'of', 'a', 'character', 'in', 'a', 'string', 'in', 'python', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': '"""""".join([char for char in \'it is icy\' if char != \'i\'])'}
Generated  translation
re. sub ('[ ^ a - za - z0 - 9 - _ *. ] ','', my _ string ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'dictionary', 'var0', 'first', 'by', 'key', 'var1', 'and', 'then', 'by', 'var2'], 'words': ['sort', 'a', 'list', 'of', 'dictionary', 'var0', 'first', 'by', 'key', 'var1', 'and', 'then', 'by', 'var2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list', 'var1': 'points', 'var2': 'time'}, 'snippet': "var0.sort(key=lambda item: (item['var1'], item['var2']))"}
Generated  translation
sorted ( var0, key = lambda x : var1. index ( x ['var2'] ), reverse = true ) 
--------- B -----------
{'intent': {'gloss': ['format', 'number', 'of', 'spaces', 'between', 'strings', 'var0', ',', 'str0', 'and', 'str1', 'to', 'be', 'str2'], 'words': ['format', 'number', 'of', 'spaces', 'between', 'strings', 'var0', ',', 'str0', 'and', 'str1', 'to', 'be', 'str2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'python', 'str0': ':', 'str1': 'very good', 'str2': '20'}, 'snippet': "print('%*s : %*s' % (20, 'var0', 20, 'str1'))"}
Generated  translation
" " " str2 " " ". format ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['multiply', 'a', 'matrix', 'var0', 'with', 'a', '3d', 'tensor', 'var1', 'in', 'scipy'], 'words': ['multiply', 'a', 'matrix', 'var0', 'with', 'a', '3d', 'tensor', 'var1', 'in', 'scipy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'p', 'var1': 't'}, 'snippet': 'scipy.tensordot(var0, var1, axes=[1, 1]).swapaxes(0, 1)'}
Generated  translation
np. outer ( var0, var1 ). sum ( axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'scalar', 'var0', 'to', 'array'], 'words': ['convert', 'scalar', 'var0', 'to', 'array'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'var0 = np.asarray(var0).reshape(1, -1)[(0), :]'}
Generated  translation
np. zeros ( var0 ). sum ( axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'list', 'of', 'pairs', 'from', 'a', 'string', 'var0', 'using', 'lambda', 'function'], 'words': ['get', 'a', 'list', 'of', 'pairs', 'from', 'a', 'string', 'var0', 'using', 'lambda', 'function'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'word'}, 'snippet': 'list(map(lambda x, y: x + y, var0[:-1], var0[1:]))'}
Generated  translation
[ x ( y ) for x, y in zip ( var0, var0 [ 1 : ] ] 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'datetimeindex', 'containing', '13', 'periods', 'of', 'the', 'second', 'friday', 'of', 'each', 'month', 'starting', 'from', 'date', 'str0'], 'words': ['create', 'a', 'datetimeindex', 'containing', '13', 'periods', 'of', 'the', 'second', 'friday', 'of', 'each', 'month', 'starting', 'from', 'date', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '2016-01-01'}, 'snippet': "pd.date_range('str0', freq='wom-2fri', periods=13)"}
Generated  translation
datetime. datetime. strptime ('str0 ','% b % d, % y'). strftime ('% a') 
--------- B -----------
{'intent': {'gloss': ['create', 'list', 'of', 'values', 'from', 'dictionary', 'var0', 'that', 'have', 'a', 'key', 'that', 'starts', 'with', 'str0'], 'words': ['create', 'list', 'of', 'values', 'from', 'dictionary', 'var0', 'that', 'have', 'a', 'key', 'that', 'starts', 'with', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'dict1', 'str0': 'emp$$'}, 'snippet': "[value for key, value in list(var0.items()) if key.startswith('str0')]"}
Generated  translation
[ value for key, value in list ( var0. items ( ) ) if'str0'in key. lower ( ) ] 
--------- B -----------
{'intent': {'gloss': ['count', 'most', 'frequent', '100', 'words', 'in', 'column', 'str0', 'of', 'dataframe', 'var0'], 'words': ['count', 'most', 'frequent', '100', 'words', 'in', 'column', 'str0', 'of', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'text', 'var0': 'df'}, 'snippet': "counter(' '.join(var0['str0']).split()).most_common(100)"}
Generated  translation
var0. groupby ('str0'). size ( ). reset _ index ( ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'current', 'directory', 'of', 'a', 'script'], 'words': ['get', 'the', 'current', 'directory', 'of', 'a', 'script'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'os.path.basename(os.path.dirname(os.path.realpath(__file__)))'}
Generated  translation
os. path. dirname ( os. path. abspath ( _ _ file _ _ ) ) 
--------- B -----------
{'intent': {'gloss': ['sum', 'integers', 'contained', 'in', 'strings', 'in', 'list', 'str0'], 'words': ['sum', 'integers', 'contained', 'in', 'strings', 'in', 'list', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "['', '3.4', '', '', '1.0']", '[ str0 ]': "['', '3.4', '', '', '1.0']"}, 'snippet': 'sum(int(float(item)) for item in [_f for _f in [ str0 ] if\n    _f])'}
Generated  translation
[ sum ( map ( int, s ) ) for s in str0 ] 
--------- B -----------
{'intent': {'gloss': ['write', 'line', 'str0', 'to', 'file', 'var0'], 'words': ['write', 'line', 'str0', 'to', 'file', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'hi there', 'var0': 'myfile'}, 'snippet': "f = open('var0', 'w')\nf.write('hi there\\n')\nf.close()"}
Generated  translation
var0. write ('str0') 
--------- B -----------
{'intent': {'gloss': ['get', 'all', 'urls', 'within', 'text', 'var0'], 'words': ['get', 'all', 'urls', 'within', 'text', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': 're.findall(\'"(http.*?)"\', var0, re.multiline | re.dotall)'}
Generated  translation
re. sub ('\ \ w + ','', var0 ) 
--------- B -----------
{'intent': {'gloss': ['match', 'urls', 'whose', 'domain', 'doesn', "'", 't', 'start', 'with', 'var0', 'from', 'string', 'var1', 'using', 'regex'], 'words': ['match', 'urls', 'whose', 'domain', 'doesn', "'", 't', 'start', 'with', 'var0', 'from', 'string', 'var1', 'using', 'regex'], 'after': [' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 't', 'var1': 'document'}, 'snippet': 're.findall(\'http://[^t][^s"]+\\\\.html\', var1)'}
Generated  translation
re. search ('\ \ bis \ \ b ', var1 ). start ( ) 
--------- B -----------
{'intent': {'gloss': ['format', 'a', 'datetime', 'string', 'var0', 'to', 'extract', 'date', 'only'], 'words': ['format', 'a', 'datetime', 'string', 'var0', 'to', 'extract', 'date', 'only'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'when'}, 'snippet': "then = datetime.datetime.strptime(var0, '%y-%m-%d').date()"}
Generated  translation
datetime. datetime. strptime ( var0,'% y - % m - % dt % h : % m : % sz') 
--------- B -----------
{'intent': {'gloss': ['convert', 'hex', 'string', 'str0', 'to', 'a', 'float', 'number'], 'words': ['convert', 'hex', 'string', 'str0', 'to', 'a', 'float', 'number'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '470fc614'}, 'snippet': "struct.unpack('!f', 'str0'.decode('hex'))[0]"}
Generated  translation
float ( int ('str0 ', 0 ) ) 
--------- B -----------
{'intent': {'gloss': ['reverse', 'the', 'order', 'of', 'words', ',', 'delimited', 'by', 'str0', ',', 'in', 'string', 'var0'], 'words': ['reverse', 'the', 'order', 'of', 'words', ',', 'delimited', 'by', 'str0', ',', 'in', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', '', ' ', ' ', ' ', '', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '.', 'var0': 's'}, 'snippet': '"""str0""".join(var0.split(\'str0\')[::-1])'}
Generated  translation
var0. decode ('str0'). encode ('utf - 8') 
--------- B -----------
{'intent': {'gloss': ['parse', 'milliseconds', 'epoch', 'time', 'str0', 'to', 'format', 'str1'], 'words': ['parse', 'milliseconds', 'epoch', 'time', 'str0', 'to', 'format', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '1236472051807', 'str1': '%y-%m-%d %h:%m:%s'}, 'snippet': "time.strftime('str1', time.gmtime(1236472051807 / 1000.0))"}
Generated  translation
datetime. strptime ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['add', 'one', 'to', 'the', 'hidden', 'web', 'element', 'with', 'id', 'str0', 'with', 'selenium', 'python', 'script'], 'words': ['add', 'one', 'to', 'the', 'hidden', 'web', 'element', 'with', 'id', 'str0', 'with', 'selenium', 'python', 'script'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'xyz'}, 'snippet': 'browser.execute_script("document.getelementbyid(\'xyz\').value+=\'1\'")'}
Generated  translation
driver. find _ element _ by _ id ('str0'). click ( ) 
--------- B -----------
{'intent': {'gloss': ['format', 'the', 'variables', 'str0', 'and', 'str1', 'using', 'string', 'formatting'], 'words': ['format', 'the', 'variables', 'str0', 'and', 'str1', 'using', 'string', 'formatting'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'self.goals', 'str1': 'self.penalties'}, 'snippet': '"""({:d} goals, ${:d})""".format(self.goals, self.penalties)'}
Generated  translation
" " " { 0 } { 1 } " " ". format ( 10, 20 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'list', 'of', 'lists', 'var0', 'to', 'list', 'of', 'integers'], 'words': ['convert', 'a', 'list', 'of', 'lists', 'var0', 'to', 'list', 'of', 'integers'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': "var0 = [int(''.join([str(y) for y in x])) for x in var0]"}
Generated  translation
[ int ( i ) for i in var0 ] 
--------- B -----------
{'intent': {'gloss': ['update', 'datetime', 'field', 'in', 'var0', 'to', 'be', 'the', 'existing', 'var1', 'plus', '100', 'years'], 'words': ['update', 'datetime', 'field', 'in', 'var0', 'to', 'be', 'the', 'existing', 'var1', 'plus', '100', 'years'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mymodel', 'var1': 'timestamp'}, 'snippet': "var0.objects.update(var1=f('var1') + timedelta(days=36524.25))"}
Generated  translation
datetime. datetime. combine ( var0, datetime. time. min ) 
--------- B -----------
{'intent': {'gloss': ['determine', 'number', 'of', 'files', 'on', 'a', 'drive', 'with', 'python'], 'words': ['determine', 'number', 'of', 'files', 'on', 'a', 'drive', 'with', 'python'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "os.statvfs('/').f_files - os.statvfs('/').f_ffree"}
Generated  translation
os. system ('ulimit - s unlimited ; some _ executable') 
--------- B -----------
{'intent': {'gloss': ['encode', 'a', 'latin', 'character', 'in', 'string', 'str0', 'properly'], 'words': ['encode', 'a', 'latin', 'character', 'in', 'string', 'str0', 'properly'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'sopetÃ³n'}, 'snippet': '"""str0""".encode(\'latin-1\').decode(\'utf-8\')'}
Generated  translation
" " " str0 " " ". encode ('latin - 1') 
--------- B -----------
{'intent': {'gloss': ['find', 'octal', 'characters', 'matches', 'from', 'a', 'string', 'var0', 'using', 'regex'], 'words': ['find', 'octal', 'characters', 'matches', 'from', 'a', 'string', 'var0', 'using', 'regex'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'str'}, 'snippet': 'print(re.findall("\'\\\\\\\\[0-7]{1,3}\'", var0))'}
Generated  translation
re. findall ('(? = ( \ \ w \ \ w ) ) ','var0') 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'list', 'in', 'first', 'column', 'into', 'multiple', 'columns', 'keeping', 'other', 'columns', 'as', 'well', 'in', 'pandas', 'data', 'frame'], 'words': ['split', 'a', 'list', 'in', 'first', 'column', 'into', 'multiple', 'columns', 'keeping', 'other', 'columns', 'as', 'well', 'in', 'pandas', 'data', 'frame'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'pd.concat([df[0].apply(pd.series), df[1]], axis=1)'}
Generated  translation
pd. concat ( [ df, pd. get _ dummies ( df,'','' ). apply ( lambda x : x + 1 ) ], axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'new', 'column', 'var0', 'in', 'pandas', 'data', 'frame', 'var1', 'based', 'on', 'the', 'values', 'in', 'column', 'var2'], 'words': ['create', 'a', 'new', 'column', 'var0', 'in', 'pandas', 'data', 'frame', 'var1', 'based', 'on', 'the', 'values', 'in', 'column', 'var2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'weekday', 'var1': 'data', 'var2': 'my_dt'}, 'snippet': "var1['var0'] = var1['var2'].apply(lambda x: x.var0())"}
Generated  translation
var1 ['var0'] = var1 ['var2'] / var1 ['var2'] 
--------- B -----------
{'intent': {'gloss': ['delete', 'all', 'occurrences', 'of', 'character', 'str0', 'in', 'string', 'str1'], 'words': ['delete', 'all', 'occurrences', 'of', 'character', 'str0', 'in', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'i', 'str1': 'it is icy'}, 'snippet': '"""""".join([char for char in \'str1\' if char != \'str0\'])'}
Generated  translation
" " " str1 " " ". replace ('str0 ','' ) 
--------- B -----------
{'intent': {'gloss': ['find', 'all', 'files', 'in', 'directory', 'str0', 'with', 'extension', 'str1'], 'words': ['find', 'all', 'files', 'in', 'directory', 'str0', 'with', 'extension', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '/mydir', 'str1': '.txt'}, 'snippet': "for file in os.listdir('str0'):\n    if file.endswith('str1'):\n        pass"}
Generated  translation
results + = [ each for each in os. listdir ('str0') if each. endswith ('str1') ] 
--------- B -----------
{'intent': {'gloss': ['write', 'line', 'str0', 'to', 'file', 'str1'], 'words': ['write', 'line', 'str0', 'to', 'file', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'hello', 'str1': 'somefile.txt'}, 'snippet': "with open('str1', 'a') as the_file:\n    the_file.write('hello\\n')"}
Generated  translation
with open ('str1 ','a') as f : f. write ('str0') 
--------- B -----------
{'intent': {'gloss': ['loop', 'over', 'files', 'in', 'directory', 'str0'], 'words': ['loop', 'over', 'files', 'in', 'directory', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '.'}, 'snippet': "for fn in os.listdir('str0'):\n    if os.path.isfile(fn):\n        pass"}
Generated  translation
for dirname, dirnames, filenames in os. walk ('str0') : for subdirname in dirnames : print ( os. path. join ( dirname, subdirname ) ) : pass 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'string', 'var0', 'with', 'into', 'all', 'strings', 'of', 'repeated', 'characters'], 'words': ['split', 'a', 'string', 'var0', 'with', 'into', 'all', 'strings', 'of', 'repeated', 'characters'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': "[m.group(0) for m in re.finditer('(\\\\d)\\\\1*', var0)]"}
Generated  translation
" " " " " ". join ( var0 [ i : i + 2 ] for i in range ( 0, len ( var0 ), 2 ) ) 
--------- B -----------
{'intent': {'gloss': ['in', 'var0', ',', 'get', 'the', 'content', 'of', 'the', 'sibling', 'of', 'the', 'var1', 'tag', 'with', 'text', 'content', 'str0'], 'words': ['in', 'var0', ',', 'get', 'the', 'content', 'of', 'the', 'sibling', 'of', 'the', 'var1', 'tag', 'with', 'text', 'content', 'str0'], 'after': [' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'soup', 'var1': 'td', 'str0': 'address:'}, 'snippet': "print(var0.find(text='str0').findnext('var1').contents[0])"}
Generated  translation
browser. find _ element _ by _ xpath ( " / / * [ @ type ='submit'] " ). get _ content ('str0') 
--------- B -----------
{'intent': {'gloss': ['use', 'a', 'regex', 'to', 'get', 'all', 'text', 'in', 'a', 'string', 'var0', 'that', 'is', 'not', 'surrounded', 'by', 'square', 'brackets'], 'words': ['use', 'a', 'regex', 'to', 'get', 'all', 'text', 'in', 'a', 'string', 'var0', 'that', 'is', 'not', 'surrounded', 'by', 'square', 'brackets'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'example_str'}, 'snippet': "re.findall('(.*?)(?:\\\\[.*?\\\\]|$)', var0)"}
Generated  translation
re. sub ('\ \ [. *? \ \ ] ','', var0 ) 
--------- B -----------
{'intent': {'gloss': ['open', 'a', 'str0', 'terminal', 'from', 'python', 'script', 'and', 'run', 'str1', 'command', '.'], 'words': ['open', 'a', 'str0', 'terminal', 'from', 'python', 'script', 'and', 'run', 'str1', 'command', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'gnome', 'str1': 'sudo apt-get update'}, 'snippet': 'os.system(\'gnome-terminal -e \\\'bash -c "sudo apt-get update; exec bash"\\\'\')'}
Generated  translation
os. system ('str0') 
--------- B -----------
{'intent': {'gloss': ['write', 'multiple', 'strings', 'var0', ',', 'var1', 'and', 'var2', 'in', 'one', 'line', 'in', 'a', 'file', 'var3'], 'words': ['write', 'multiple', 'strings', 'var0', ',', 'var1', 'and', 'var2', 'in', 'one', 'line', 'in', 'a', 'file', 'var3'], 'after': [' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'line1', 'var1': 'line2', 'var2': 'line3', 'var3': 'target'}, 'snippet': "var3.write('%r\\n%r\\n%r\\n' % (var0, var1, var2))"}
Generated  translation
with open ('var0 ','r') as f : f. write ('var1') 
--------- B -----------
{'intent': {'gloss': ['pandas', ':', 'delete', 'rows', 'in', 'dataframe', 'var0', 'based', 'on', 'multiple', 'columns', 'values'], 'words': ['pandas', ':', 'delete', 'rows', 'in', 'dataframe', 'var0', 'based', 'on', 'multiple', 'columns', 'values'], 'after': ['', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': "var0.set_index(list('bc')).drop(tuples, errors='ignore').reset_index()"}
Generated  translation
var0. apply ( lambda x : x. tolist ( ), axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'content', 'of', 'child', 'tag', 'withvar0', 'attribute', 'whose', 'parent', 'has', 'css', 'var1'], 'words': ['get', 'the', 'content', 'of', 'child', 'tag', 'withvar0', 'attribute', 'whose', 'parent', 'has', 'css', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'href', 'var1': 'someclass'}, 'snippet': "self.driver.find_element_by_css_selector('.someclass a').get_attribute('var0')"}
Generated  translation
soup. find _ all ('a ', href = re. compile ( '. * follow \ \? page. *') ) 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'string', 'by', 'a', 'delimiter', 'in', 'python'], 'words': ['split', 'a', 'string', 'by', 'a', 'delimiter', 'in', 'python'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "[x.strip() for x in '2.matches $$text$$ string'.split('$$text$$')]"}
Generated  translation
" " " [UNK] " " ". split ('', 1 ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'a', 'directory', 'var0', 'exists', 'and', 'create', 'it', 'if', 'necessary'], 'words': ['check', 'if', 'a', 'directory', 'var0', 'exists', 'and', 'create', 'it', 'if', 'necessary'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'path'}, 'snippet': 'try:\n    os.makedirs(var0)\nexcept oserror:\n    if not os.var0.isdir(var0):\n        raise'}
Generated  translation
os. path. exists ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['extract', 'all', 'the', 'values', 'with', 'keys', 'str0', 'and', 'str1', 'from', 'a', 'list', 'of', 'dictionaries', 'var0', 'to', 'list', 'of', 'tuples'], 'words': ['extract', 'all', 'the', 'values', 'with', 'keys', 'str0', 'and', 'str1', 'from', 'a', 'list', 'of', 'dictionaries', 'var0', 'to', 'list', 'of', 'tuples'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'x', 'str1': 'y', 'var0': 'd'}, 'snippet': "[(str0['str0'], str0['str1']) for str0 in var0]"}
Generated  translation
[ ( d ['str0'], d ['str1'] ) for d in var0 ] 
--------- B -----------
{'intent': {'gloss': ['running', 'r', 'script', 'str0', 'from', 'python'], 'words': ['running', 'r', 'script', 'str0', 'from', 'python'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '/pathto/myrscript.r'}, 'snippet': "subprocess.call(['/usr/bin/rscript', '--vanilla', 'str0'])"}
Generated  translation
exec ( compile ( open ('str0'). read ( ),'str0 ','exec') ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'list', 'of', 'tuples', 'var0', 'to', 'a', 'string'], 'words': ['convert', 'list', 'of', 'tuples', 'var0', 'to', 'a', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': '""", """.join(\'(\' + \', \'.join(i) + \')\' for i in var0)'}
Generated  translation
" " " " " ". join ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['find', 'all', 'files', 'in', 'directory', 'str0', 'with', 'extension', 'str1'], 'words': ['find', 'all', 'files', 'in', 'directory', 'str0', 'with', 'extension', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '/mydir', 'str1': '.txt'}, 'snippet': "os.chdir('str0')\nfor file in glob.glob('*.txt'):\n    pass"}
Generated  translation
results + = [ each for each in os. listdir ('str0') if each. endswith ('str1') ] 
--------- B -----------
{'intent': {'gloss': ['python', 'regex', '-', 'check', 'for', 'a', 'capital', 'letter', 'with', 'a', 'following', 'lowercase', 'in', 'string', 'var0'], 'words': ['python', 'regex', '-', 'check', 'for', 'a', 'capital', 'letter', 'with', 'a', 'following', 'lowercase', 'in', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'string'}, 'snippet': "re.sub('^[a-z0-9]*(?![a-z])', '', var0)"}
Generated  translation
re. findall ('\ \ d + (? = [ ^ [ ] + $ ) ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'index', 'of', 'an', 'integer', 'str0', 'from', 'a', 'list', 'var0', 'if', 'the', 'list', 'also', 'contains', 'boolean', 'items'], 'words': ['get', 'the', 'index', 'of', 'an', 'integer', 'str0', 'from', 'a', 'list', 'var0', 'if', 'the', 'list', 'also', 'contains', 'boolean', 'items'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '1', 'var0': 'lst'}, 'snippet': 'next(i for i, x in enumerate(var0) if not isinstance(x, bool) and x == 1)'}
Generated  translation
[ i for i, j in enumerate ( var0 ) if i! = 0 ] 
--------- B -----------
{'intent': {'gloss': ['insert', 'directory', 'str0', 'into', 'directory', 'var0'], 'words': ['insert', 'directory', 'str0', 'into', 'directory', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'apps', 'var0': '__file__'}, 'snippet': "sys.path.insert(1, os.path.join(os.path.dirname(var0), 'str0'))"}
Generated  translation
var0. insert ( 0,'str0') 
--------- B -----------
{'intent': {'gloss': ['write', 'the', 'data', 'of', 'dataframe', 'var0', 'into', 'text', 'file', 'str0'], 'words': ['write', 'the', 'data', 'of', 'dataframe', 'var0', 'into', 'text', 'file', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'np.txt'}, 'snippet': "np.savetxt('c:\\\\data\\\\np.txt', var0.values, fmt='%d')"}
Generated  translation
var0. write ( open ('str0 ','rb'). read ( ) ) 
--------- B -----------
{'intent': {'gloss': ['write', 'content', 'of', 'dataframe', 'var0', 'into', 'text', 'file', 'str0'], 'words': ['write', 'content', 'of', 'dataframe', 'var0', 'into', 'text', 'file', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'c:\\data\\pandas.txt'}, 'snippet': "var0.to_csv('str0', header=none, index=none, sep=' ', mode='a')"}
Generated  translation
var0. write ( open ('str0 ','rb'). read ( ) ) 
--------- B -----------
{'intent': {'gloss': ['print', 'a', '2', 'dimensional', 'list', 'var0', 'as', 'a', 'table', 'with', 'delimiters'], 'words': ['print', 'a', '2', 'dimensional', 'list', 'var0', 'as', 'a', 'table', 'with', 'delimiters'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'tab'}, 'snippet': "print('\\n'.join('\\t'.join(str(col) for col in row) for row in var0))"}
Generated  translation
print ('i have : { 0. 2f } '. format ( var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'a', 'directory', 'var0', 'exists', 'and', 'create', 'it', 'if', 'necessary'], 'words': ['check', 'if', 'a', 'directory', 'var0', 'exists', 'and', 'create', 'it', 'if', 'necessary'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'path'}, 'snippet': 'try:\n    os.makedirs(var0)\nexcept oserror as exception:\n    if exception.errno != errno.eexist:\n        raise'}
Generated  translation
os. path. exists ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['send', 'a', 'post', 'request', 'with', 'raw', 'data', 'var0', 'and', 'basic', 'authentication', 'with', 'var1', 'and', 'var2'], 'words': ['send', 'a', 'post', 'request', 'with', 'raw', 'data', 'var0', 'and', 'basic', 'authentication', 'with', 'var1', 'and', 'var2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'data', 'var1': 'username', 'var2': 'password'}, 'snippet': 'requests.post(url, var0=var0, headers=headers_dict, auth=(var1, var2))'}
Generated  translation
requests. post ('var0 ', var1 ) 
--------- B -----------
{'intent': {'gloss': ['parse', 'tab', '-', 'delimited', 'csv', 'file', 'str0', 'into', 'a', 'list'], 'words': ['parse', 'tab', '-', 'delimited', 'csv', 'file', 'str0', 'into', 'a', 'list'], 'after': [' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'text.txt'}, 'snippet': "lol = list(csv.reader(open('str0', 'rb'), delimiter='\\t'))"}
Generated  translation
[ line for line in open ('str0') if'str0'in line ] 
--------- B -----------
{'intent': {'gloss': ['loop', 'through', 'the', 'ip', 'address', 'range', 'str0'], 'words': ['loop', 'through', 'the', 'ip', 'address', 'range', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '192.168.x.x'}, 'snippet': "generator = iter_iprange('192.168.1.1', '192.168.255.255', step=1)"}
Generated  translation
urllib. parse. quote ('str0') 
--------- B -----------
{'intent': {'gloss': ['modify', 'sys', '.', 'path', 'for', 'python', 'module', 'var0'], 'words': ['modify', 'sys', '.', 'path', 'for', 'python', 'module', 'var0'], 'after': [' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'subdir'}, 'snippet': "sys.path.append(os.path.join(os.path.dirname(__file__), 'var0'))"}
Generated  translation
os. path. split ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['lower', 'a', 'string', 'var0', 'and', 'remove', 'non', '-', 'alphanumeric', 'characters', 'aside', 'from', 'space'], 'words': ['lower', 'a', 'string', 'var0', 'and', 'remove', 'non', '-', 'alphanumeric', 'characters', 'aside', 'from', 'space'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'text'}, 'snippet': "re.sub('[^\\\\sa-za-z0-9]', '', var0).lower().strip()"}
Generated  translation
re. sub ('[ ^ 0 - 9a - za - z ] + ','* ','h ^ & ell `., var0 ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'all', 'non', '-', 'alphanumeric', 'characters', 'except', 'space', 'from', 'a', 'string', 'var0', 'and', 'lower', 'it'], 'words': ['remove', 'all', 'non', '-', 'alphanumeric', 'characters', 'except', 'space', 'from', 'a', 'string', 'var0', 'and', 'lower', 'it'], 'after': [' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'text'}, 'snippet': "re.sub('(?!\\\\s)[\\\\w_]', '', var0).lower().strip()"}
Generated  translation
re. sub ('[ ^ 0 - 9a - za - z ] + ','* ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['scatter', 'a', 'plot', 'with', 'x', ',', 'y', 'position', 'of', 'str0', 'and', 'face', 'color', 'equal', 'to', 'none'], 'words': ['scatter', 'a', 'plot', 'with', 'x', ',', 'y', 'position', 'of', 'str0', 'and', 'face', 'color', 'equal', 'to', 'none'], 'after': [' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'np.random.randn(100)'}, 'snippet': "plt.scatter(np.random.randn(100), np.random.randn(100), facecolors='none')"}
Generated  translation
plt. scatter ( * x, y, color ='str0') 
--------- B -----------
{'intent': {'gloss': ['prepend', 'the', 'line', 'str0', 'to', 'the', 'contents', 'of', 'file', 'str1', 'and', 'save', 'as', 'the', 'file', 'str2'], 'words': ['prepend', 'the', 'line', 'str0', 'to', 'the', 'contents', 'of', 'file', 'str1', 'and', 'save', 'as', 'the', 'file', 'str2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '#test firstline\n', 'str1': 'infile', 'str2': 'outfile'}, 'snippet': "open('str2', 'w').write('str0' + open('str1').read())"}
Generated  translation
shutil. savefig ('str1 ','str0') 
--------- B -----------
{'intent': {'gloss': ['extract', 'ip', 'address', 'from', 'an', 'html', 'string'], 'words': ['extract', 'ip', 'address', 'from', 'an', 'html', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "ip = re.findall('[0-9]+(?:\\\\.[0-9]+){3}', s)"}
Generated  translation
urllib. parse. quote _ plus ('a b') 
--------- B -----------
{'intent': {'gloss': ['unpack', 'a', 'series', 'of', 'tuples', 'in', 'pandas', 'into', 'a', 'dataframe', 'with', 'column', 'names', 'str0', 'and', 'str1'], 'words': ['unpack', 'a', 'series', 'of', 'tuples', 'in', 'pandas', 'into', 'a', 'dataframe', 'with', 'column', 'names', 'str0', 'and', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'out-1', 'str1': 'out-2'}, 'snippet': "pd.dataframe(out.tolist(), columns=['str0', 'str1'], index=out.index)"}
Generated  translation
pd. concat ( [ df ['str0'], axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'first', 'value', 'from', 'dataframe', 'var0', 'where', 'column', 'str0', 'is', 'equal', 'to', 'str1'], 'words': ['get', 'the', 'first', 'value', 'from', 'dataframe', 'var0', 'where', 'column', 'str0', 'is', 'equal', 'to', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'letters', 'str1': 'c'}, 'snippet': "var0.loc[var0['str0'] == 'str1', 'str0'].values[0]"}
Generated  translation
var0. loc [ var0 ['str0'] = ='str1'] 
--------- B -----------
{'intent': {'gloss': ['remove', 'all', 'strings', 'from', 'a', 'list', 'a', 'strings', 'var0', 'where', 'the', 'values', 'starts', 'with', 'str0', 'or', 'str1'], 'words': ['remove', 'all', 'strings', 'from', 'a', 'list', 'a', 'strings', 'var0', 'where', 'the', 'values', 'starts', 'with', 'str0', 'or', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'sents', 'str0': '@$\t', 'str1': '#'}, 'snippet': "[x for x in var0 if not x.startswith('str0') and not x.startswith('str1')]"}
Generated  translation
[ k for k, v in var0. items ( ) if v. startswith ('str0') ] 
--------- B -----------
{'intent': {'gloss': ['create', 'new', 'dataframe', 'object', 'by', 'merging', 'columns', 'str0', 'of', 'dataframes', 'var0', 'and', 'var1', 'and', 'rename', 'the', 'columns', 'from', 'dataframes', 'var0', 'and', 'var1', 'with', 'suffix', 'var4', 'and', 'var5', 'respectively'], 'words': ['create', 'new', 'dataframe', 'object', 'by', 'merging', 'columns', 'str0', 'of', 'dataframes', 'var0', 'and', 'var1', 'and', 'rename', 'the', 'columns', 'from', 'dataframes', 'var0', 'and', 'var1', 'with', 'suffix', 'var4', 'and', 'var5', 'respectively'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'key', 'var0': 'split_df', 'var1': 'csv_df', 'var2': 'split_df', 'var3': 'csv_df', 'var4': '_left', 'var5': '_right'}, 'snippet': "pd.merge(var2, var3, on=['str0'], suffixes=('var4', 'var5'))"}
Generated  translation
pd. merge ( var0, var1, var0, on ='var1 ', how ='var5') 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'string', 'str0', 'by', 'str1', 'keeping', 'str1', 'in', 'the', 'result'], 'words': ['split', 'a', 'string', 'str0', 'by', 'str1', 'keeping', 'str1', 'in', 'the', 'result'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'docs/src/scripts/temp', 'str1': '/', 'str2': '/'}, 'snippet': '"""str0""".replace(\'str2\', \'/\\x00/\').split(\'\\x00\')'}
Generated  translation
re. split ('str0 ','str1 ', 1 ) 
--------- B -----------
{'intent': {'gloss': ['group', 'a', 'list', 'of', 'dicts', 'var0', 'into', 'one', 'dict', 'by', 'key'], 'words': ['group', 'a', 'list', 'of', 'dicts', 'var0', 'into', 'one', 'dict', 'by', 'key'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'ld'}, 'snippet': 'print(dict(zip(var0[0], zip(*[list(d.values()) for d in var0]))))'}
Generated  translation
{ k : v for d in var0 for k, v in list ( d. items ( ) ) } 
--------- B -----------
{'intent': {'gloss': ['replace', 'all', 'elements', 'in', 'array', 'var0', 'that', 'are', 'not', 'present', 'in', 'array', 'str0', 'with', 'zeros'], 'words': ['replace', 'all', 'elements', 'in', 'array', 'var0', 'that', 'are', 'not', 'present', 'in', 'array', 'str0', 'with', 'zeros'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'str0': '[1, 3, 4]', '[ str0 ]': '[1, 3, 4]'}, 'snippet': 'np.where(np.in1d(var0, [ str0 ]).reshape(var0.shape), var0, 0)'}
Generated  translation
b = np. where ( np. isnan ( var0 ), 0, var0 ) 
--------- B -----------
{'intent': {'gloss': ['how', 'to', 'count', 'distinct', 'values', 'in', 'a', 'column', 'of', 'a', 'pandas', 'group', 'by', 'object', '?'], 'words': ['how', 'to', 'count', 'distinct', 'values', 'in', 'a', 'column', 'of', 'a', 'pandas', 'group', 'by', 'object', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "df.groupby(['col1', 'col2'])['col3'].nunique().reset_index()"}
Generated  translation
df. groupby ( level = 0 ). sum ( ) 
--------- B -----------
{'intent': {'gloss': ['average', 'each', 'two', 'columns', 'of', 'array', 'var0'], 'words': ['average', 'each', 'two', 'columns', 'of', 'array', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'data'}, 'snippet': 'var0.reshape(-1, j).mean(axis=1).reshape(var0.shape[0], -1)'}
Generated  translation
np. einsum ('ijk, ikl - > ijl ', var0, 2 ) 
--------- B -----------
{'intent': {'gloss': ['do', 'a', 'scatter', 'plot', 'with', 'empty', 'circles'], 'words': ['do', 'a', 'scatter', 'plot', 'with', 'empty', 'circles'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "plt.plot(np.random.randn(100), np.random.randn(100), 'o', mfc='none')"}
Generated  translation
plt. scatter ( * zip ( * b ) ) 
--------- B -----------
{'intent': {'gloss': ['select', 'rows', 'in', 'a', 'dataframe', 'var0', 'column', 'str0', 'between', 'two', 'values', '99', 'and', '101'], 'words': ['select', 'rows', 'in', 'a', 'dataframe', 'var0', 'column', 'str0', 'between', 'two', 'values', '99', 'and', '101'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'closing_price'}, 'snippet': "var0 = var0[(var0['str0'] >= 99) & (var0['str0'] <= 101)]"}
Generated  translation
var0. loc [ var0 ['str0']. idxmax ( ) ] 
--------- B -----------
{'intent': {'gloss': ['regex', ',', 'find', 'str0s', 'only', 'in', 'the', 'middle', 'of', 'string', 'var0'], 'words': ['regex', ',', 'find', 'str0s', 'only', 'in', 'the', 'middle', 'of', 'string', 'var0'], 'after': ['', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'n', 'var0': 's'}, 'snippet': "re.findall('n(?<=[^n]n)n+(?=[^n])(?i)', var0)"}
Generated  translation
re. sub ('\ \ w + ','str0 ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'duplicate', 'words', 'from', 'a', 'string', 'var0', 'using', 'regex'], 'words': ['remove', 'duplicate', 'words', 'from', 'a', 'string', 'var0', 'using', 'regex'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'text'}, 'snippet': "var0 = re.sub('\\\\b(\\\\w+)( \\\\1\\\\b)+', '\\\\1', var0)"}
Generated  translation
re. sub ('(? <! \ \ w ) ( [ a - z ] ) \ \ 1 ','\ \ 1 ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['replace', 'dot', 'characters', 'str0', 'associated', 'with', 'ascii', 'letters', 'in', 'list', 'var0', 'with', 'space', 'str1'], 'words': ['replace', 'dot', 'characters', 'str0', 'associated', 'with', 'ascii', 'letters', 'in', 'list', 'var0', 'with', 'space', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '.', 'var0': 's', 'str1': ''}, 'snippet': "[re.sub('(?<!\\\\d)\\\\.(?!\\\\d)', ' ', i) for i in var0]"}
Generated  translation
re. sub ('[ ^ \ \ x00 \ \ x7f ] ','str1 ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'each', 'tuple', 'in', 'list', 'var0', 'to', 'a', 'string', 'with', 'str0', 'separating', 'the', 'tuples', "'", 'elements'], 'words': ['convert', 'each', 'tuple', 'in', 'list', 'var0', 'to', 'a', 'string', 'with', 'str0', 'separating', 'the', 'tuples', "'", 'elements'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '']}, 'slot_map': {'var0': 'l', 'str0': '@'}, 'snippet': '""" """.join([(\'%d@%d\' % (t[0], t[1])) for t in var0])'}
Generated  translation
" " " " " ". join ( [ str0 ] ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'dictionaries', 'by', 'the', 'value', 'of', 'keys', 'str0', ',', 'str1', ',', 'str2', 'in', 'ascending', 'order', '.'], 'words': ['sort', 'a', 'list', 'of', 'dictionaries', 'by', 'the', 'value', 'of', 'keys', 'str0', ',', 'str1', ',', 'str2', 'in', 'ascending', 'order', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'title', 'str1': 'title_url', 'str2': 'id'}, 'snippet': "l.sort(key=lambda x: (x['str0'], x['str1'], x['str2']))"}
Generated  translation
sorted ( [ str0 ], key = lambda x : x ['str0'], reverse = true ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'list', 'var0', 'in', 'descending', 'order', 'based', 'on', 'the', 'date', 'value', 'in', 'second', 'element', 'of', 'each', 'list', 'in', 'list', 'var0'], 'words': ['sort', 'list', 'var0', 'in', 'descending', 'order', 'based', 'on', 'the', 'date', 'value', 'in', 'second', 'element', 'of', 'each', 'list', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'li', 'var1': 'li'}, 'snippet': "sorted(var1, key=lambda x: datetime.strptime(x[1], '%d/%m/%y'), reverse=true)"}
Generated  translation
sorted ( var1, key = operator. itemgetter ( 1 ), reverse = true ) 
--------- B -----------
{'intent': {'gloss': ['set', 'font', 'var0', 'to', 'display', 'non', '-', 'ascii', 'characters', 'in', 'matplotlib'], 'words': ['set', 'font', 'var0', 'to', 'display', 'non', '-', 'ascii', 'characters', 'in', 'matplotlib'], 'after': [' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'arial'}, 'snippet': "matplotlib.rc('font', **{'sans-serif': 'var0', 'family': 'sans-serif'})"}
Generated  translation
var0. set _ yticklabels ( ['e ','a ','a'] ) 
--------- B -----------
{'intent': {'gloss': ['find', 'all', 'files', 'in', 'directory', 'str0', 'with', 'extension', 'str1'], 'words': ['find', 'all', 'files', 'in', 'directory', 'str0', 'with', 'extension', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '/mydir', 'str1': '.txt'}, 'snippet': "for root, dirs, files in os.walk('str0'):\n    for file in files:\n        if file.endswith('str1'):\n            pass"}
Generated  translation
results + = [ each for each in os. listdir ('str0') if each. endswith ('str1') ] 
--------- B -----------
{'intent': {'gloss': ['load', 'data', 'containing', 'str0', 'from', 'file', 'str1', 'into', 'numpy', 'array', 'var0'], 'words': ['load', 'data', 'containing', 'str0', 'from', 'file', 'str1', 'into', 'numpy', 'array', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'utf-8', 'str1': 'new.txt', 'var0': 'arr'}, 'snippet': "var0 = numpy.fromiter(codecs.open('str1', encoding='str0'), dtype='<u2')"}
Generated  translation
var0 = numpy. loadtxt ('str1 ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['select', 'values', 'from', 'column', 'str0', 'for', 'which', 'corresponding', 'values', 'in', 'column', 'str1', 'will', 'be', 'greater', 'than', '50', ',', 'and', 'in', 'column', 'str2', '-', 'equal', '900', 'in', 'dataframe', 'var0'], 'words': ['select', 'values', 'from', 'column', 'str0', 'for', 'which', 'corresponding', 'values', 'in', 'column', 'str1', 'will', 'be', 'greater', 'than', '50', ',', 'and', 'in', 'column', 'str2', '-', 'equal', '900', 'in', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'a', 'str1': 'b', 'str2': 'c', 'var0': 'df'}, 'snippet': "var0['str0'][(var0['str1'] > 50) & (var0['str2'] == 900)]"}
Generated  translation
var0 [ ( var0. loc [ var0 ['str1'] ) & ( var0 ['str2'] = = 900 ) ] 
--------- B -----------
{'intent': {'gloss': ['find', '10', 'largest', 'differences', 'between', 'each', 'respective', 'elements', 'of', 'list', 'var0', 'and', 'list', 'var1'], 'words': ['find', '10', 'largest', 'differences', 'between', 'each', 'respective', 'elements', 'of', 'list', 'var0', 'and', 'list', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l1', 'var1': 'l2'}, 'snippet': 'heapq.nlargest(10, range(len(var0)), key=lambda i: abs(var0[i] - var1[i]))'}
Generated  translation
sum ( i * 10 for i, j in zip ( var0, var1 ) ) 
--------- B -----------
{'intent': {'gloss': ['loop', 'through', 'the', 'ip', 'address', 'range', 'str0'], 'words': ['loop', 'through', 'the', 'ip', 'address', 'range', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '192.168.x.x'}, 'snippet': "for i in range(256):\n    for j in range(256):\n        ip = '192.168.%d.%d' % (i, j)\n        print(ip)"}
Generated  translation
urllib. parse. quote ('str0') 
--------- B -----------
{'intent': {'gloss': ['find', 'a', 'value', 'within', 'nested', 'json', 'str0', 'where', 'the', 'key', 'inside', 'another', 'key', 'str1', 'is', 'unknown', '.'], 'words': ['find', 'a', 'value', 'within', 'nested', 'json', 'str0', 'where', 'the', 'key', 'inside', 'another', 'key', 'str1', 'is', 'unknown', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'data', 'str1': 'b'}, 'snippet': "list(str0['a']['str1'].values())[0]['maindata'][0]['info']"}
Generated  translation
json. loads ('{ " foo " : 42, " bar " : " baz " }') ['str1'] 
--------- B -----------
{'intent': {'gloss': ['finding', 'the', 'index', 'of', 'elements', 'containing', 'substring', 'str0', 'and', 'str1', 'in', 'a', 'list', 'of', 'strings', 'str2', '.'], 'words': ['finding', 'the', 'index', 'of', 'elements', 'containing', 'substring', 'str0', 'and', 'str1', 'in', 'a', 'list', 'of', 'strings', 'str2', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'how', 'str1': 'what', 'str2': 'mylist'}, 'snippet': "[i for i, j in enumerate(str2) if 'str0' in j.lower() or 'str1' in j.lower()]"}
Generated  translation
[ i for i, j in enumerate ( str2 ) if i. index ('str0') if i. index ('str1') ] 
--------- B -----------
{'intent': {'gloss': ['extract', 'a', 'url', 'from', 'a', 'string', 'var0'], 'words': ['extract', 'a', 'url', 'from', 'a', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mystring'}, 'snippet': "print(re.search('(?p<url>https?://[^\\\\s]+)', var0).group('url'))"}
Generated  translation
re. split ('[ ^ a - za - z ] * ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['selecting', 'rows', 'in', 'numpy', 'ndarray', 'str0', ',', 'where', 'the', 'value', 'in', 'the', 'first', 'column', 'is', '0', 'and', 'value', 'in', 'the', 'second', 'column', 'is', '1'], 'words': ['selecting', 'rows', 'in', 'numpy', 'ndarray', 'str0', ',', 'where', 'the', 'value', 'in', 'the', 'first', 'column', 'is', '0', 'and', 'value', 'in', 'the', 'second', 'column', 'is', '1'], 'after': [' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'a'}, 'snippet': 'str0[np.where((str0[:, (0)] == 0) * (str0[:, (1)] == 1))]'}
Generated  translation
str0 [ ( np. arange ( str0. shape [ 0 ] )! = 1 ), :, : ] 
--------- B -----------
{'intent': {'gloss': ['how', 'to', 'create', 'a', 'list', 'of', 'date', 'string', 'in', 'str0', 'format', 'with', 'python', 'pandas', '?'], 'words': ['how', 'to', 'create', 'a', 'list', 'of', 'date', 'string', 'in', 'str0', 'format', 'with', 'python', 'pandas', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'yyyymmdd'}, 'snippet': "[d.strftime('%y%m%d') for d in pandas.date_range('20130226', '20130302')]"}
Generated  translation
datetime. datetime. strptime ('str0 ','% d % b % y'). strftime ('% l') 
--------- B -----------
{'intent': {'gloss': ['how', 'can', 'i', 'parse', 'a', 'time', 'string', 'containing', 'milliseconds', 'in', 'it', 'with', 'python', '?'], 'words': ['how', 'can', 'i', 'parse', 'a', 'time', 'string', 'containing', 'milliseconds', 'in', 'it', 'with', 'python', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "time.strptime('30/03/09 16:31:32.123', '%d/%m/%y %h:%m:%s.%f')"}
Generated  translation
" " " [UNK] " " ". encode ('utf - 8') 
--------- B -----------
{'intent': {'gloss': ['insert', 'var0', 'before', 'the', 'file', 'extension', 'in', 'str0', 'or', 'replace', 'var1', 'with', 'var2', 'if', 'it', 'precedes', 'the', 'extension', '.'], 'words': ['insert', 'var0', 'before', 'the', 'file', 'extension', 'in', 'str0', 'or', 'replace', 'var1', 'with', 'var2', 'if', 'it', 'precedes', 'the', 'extension', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'var0': '_suff', 'str0': 'long.file.name.jpg', 'var1': '_a', 'var2': 'suff'}, 'snippet': "re.sub('(\\\\_a)?\\\\.([^\\\\.]*)$', '_suff.\\\\2', 'str0')"}
Generated  translation
var0. replace ('','str0 ', var1 ) 
--------- B -----------
{'intent': {'gloss': ['zip', 'two', '2', '-', 'd', 'arrays', 'var0', 'and', 'var1'], 'words': ['zip', 'two', '2', '-', 'd', 'arrays', 'var0', 'and', 'var1'], 'after': [' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'b'}, 'snippet': "np.array(zip(var0.ravel(), var1.ravel()), dtype='i4,i4').reshape(var0.shape)"}
Generated  translation
zip ( var0, var1, var0 ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'any', 'url', 'within', 'string', 'var0'], 'words': ['remove', 'any', 'url', 'within', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'text'}, 'snippet': "var0 = re.sub('^https?:\\\\/\\\\/.*[\\\\r\\\\n]*', '', var0, flags=re.multiline)"}
Generated  translation
re. sub ('\ \ w + ','', var0 ) 
--------- B -----------
{'intent': {'gloss': ['unzip', 'list', 'str0'], 'words': ['unzip', 'list', 'str0'], 'after': [' ', ' ', '']}, 'slot_map': {'str0': "[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]", '[ str0 ]': "[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]"}, 'snippet': "zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e',)])"}
Generated  translation
str0. split ('str0') 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'hex', '-', 'string', 'representation', 'to', 'actual', 'bytes'], 'words': ['convert', 'a', 'hex', '-', 'string', 'representation', 'to', 'actual', 'bytes'], 'after': [' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': '"""\\\\xf3\\\\xbe\\\\x80\\\\x80""".replace(\'\\\\x\', \'\').decode(\'hex\')'}
Generated  translation
int (''. join ( chr ( ord ( c ) ), c ) ) 
--------- B -----------
{'intent': {'gloss': ['unzip', 'list', 'str0', 'and', 'fill', 'empty', 'results', 'with', 'none'], 'words': ['unzip', 'list', 'str0', 'and', 'fill', 'empty', 'results', 'with', 'none'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]", '[ str0 ]': "[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]"}, 'snippet': "map(none, *[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e',)])"}
Generated  translation
sorted ( [ str0 ], key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['combine', 'values', 'from', 'column', 'str0', 'and', 'column', 'str1', 'of', 'dataframe', 'var0', 'into', 'column', 'str2', 'of', 'datafram', 'var0'], 'words': ['combine', 'values', 'from', 'column', 'str0', 'and', 'column', 'str1', 'of', 'dataframe', 'var0', 'into', 'column', 'str2', 'of', 'datafram', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'b', 'str1': 'a', 'var0': 'df', 'str2': 'c', 'var1': 'df'}, 'snippet': "var1['str2'] = np.where(var1['str1'].isnull, var1['str0'], var1['str1'])"}
Generated  translation
var0 [ ['str0 ','str1'] ]. merge ( var0, on ='str2') 
--------- B -----------
{'intent': {'gloss': ['make', 'a', 'barplot', 'of', 'data', 'in', 'column', 'var0', 'of', 'dataframe', 'var1', 'colour', '-', 'coded', 'according', 'to', 'list', 'var2'], 'words': ['make', 'a', 'barplot', 'of', 'data', 'in', 'column', 'var0', 'of', 'dataframe', 'var1', 'colour', '-', 'coded', 'according', 'to', 'list', 'var2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'group', 'var1': 'df', 'var2': 'color'}, 'snippet': "var1['var0'].plot(kind='bar', var2=['r', 'g', 'b', 'r', 'g', 'b', 'r'])"}
Generated  translation
var1. groupby ('var0'). size ( ). reset _ index ( ) 
--------- B -----------
{'intent': {'gloss': ['download', 'a', 'file', 'var0', 'over', 'http', 'and', 'save', 'to', 'str0'], 'words': ['download', 'a', 'file', 'var0', 'over', 'http', 'and', 'save', 'to', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'url', 'str0': '10mb'}, 'snippet': "response = requests.get(var0, stream=true)\nwith open('str0', 'wb') as handle:\n    for data in tqdm(response.iter_content()):\n        handle.write(data)"}
Generated  translation
pickle. load ( open ('str0 ','rb') ) 
--------- B -----------
{'intent': {'gloss': ['removing', 'an', 'element', 'from', 'a', 'list', 'based', 'on', 'a', 'predicate', 'str0', 'or', 'str1'], 'words': ['removing', 'an', 'element', 'from', 'a', 'list', 'based', 'on', 'a', 'predicate', 'str0', 'or', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'x', 'str1': 'n'}, 'snippet': "[str0 for str0 in ['aat', 'xac', 'ant', 'tta'] if 'str0' not in str0 and \n    'str1' not in str0]"}
Generated  translation
[ x for x in str0 if x [ 2 ] = ='str1'] 
--------- B -----------
{'intent': {'gloss': ['replace', 'each', 'str0', 'with', 'str1', 'and', 'each', 'str1', 'with', 'str0', 'in', 'the', 'string', 'str4', 'in', 'a', 'single', 'pass', '.'], 'words': ['replace', 'each', 'str0', 'with', 'str1', 'and', 'each', 'str1', 'with', 'str0', 'in', 'the', 'string', 'str4', 'in', 'a', 'single', 'pass', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'a', 'str1': 'b', 'str2': 'b', 'str3': 'a', 'str4': 'obama'}, 'snippet': '"""str4""".replace(\'str3\', \'%temp%\').replace(\'str2\', \'str3\').replace(\'%temp%\',\n    \'str2\')'}
Generated  translation
" " " str4 " " ". replace ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['download', 'a', 'file', 'var0', 'over', 'http', 'and', 'save', 'to', 'var1'], 'words': ['download', 'a', 'file', 'var0', 'over', 'http', 'and', 'save', 'to', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'url', 'var1': 'file_name'}, 'snippet': "u = urllib.request.urlopen(var0)\nf = open(var1, 'wb')\nmeta = u.info()\nfile_size = int(meta.getheaders('content-length')[0])\nprint('downloading: %s bytes: %s' % (var1, file_size))\nfile_size_dl = 0\nblock_sz = 8192\nwhile true:\n    buffer = u.read(block_sz)\n    if not buffer:\n        break\n    file_size_dl += len(buffer)\n    f.write(buffer)\n    status = '%10d  [%3.2f%%]' % (file_size_dl, file_size_dl * 100.0 /\n        file_size)\n    status = status + chr(8) * (len(status) + 1)\n    print(status, end=' ')\nf.close()"}
Generated  translation
webbrowser. open ('var0') 
test beam accuracy 0.032
test beam oracle accuracy 0.082
test beam bleu score 0.3419564926641532
test beam exececution accuracy 0.0
