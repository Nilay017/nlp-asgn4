Namespace(EMA=True, add_noise=False, auxilary_lm=False, batch_size=16, beam_num=10, beam_search_alpha=0.9, beam_search_base=3, beta=1.0, bleu_threshold=0, combine_copy_with_real=False, combined_eval=False, combined_training=False, copy_bt=True, create_mapping=False, dataset_name='conala', decoder_layers=4, decoder_lr=7.5e-05, device='cuda', dummy_question=False, dummy_source=False, early_stopping=False, early_stopping_epochs=20, ema_param=0.999, encoder_lr=1e-05, epochs=80, eval_interval=1, extra_copy_attention_linear=True, extra_encoder=False, extra_encoder_layers=1, extra_linear=True, fix_linear_layer=False, fixed_copy=False, gating=False, generate_back_translation=False, just_analysis=False, just_evaluate=True, just_initialize=False, label_smoothing=0.1, lambd=1, language_model=False, lr_decay=1, mono_min_prob=0.1, monolingual_ratio=0.5, n=256, no_encoder=False, no_encoder_update_for_bt=True, no_linear_opt=False, no_schema=False, num_workers=4, percentage=10, pointer_network=False, python=True, random_encoder=False, save_dir='our_models/', seed=1, small_dataset=False, sql_augmentation=False, sql_where_augmentation=False, temp=1.0, test_batch_size=32, translate_backward=False, use_authentic_data=False, use_back_translation=False, use_codebert=False, use_column_type=False, use_copy_attention=True, use_gelu=True, use_real_source=False, use_tagged_back=False, valid_batch_size=50, warmup_steps=0)
BertConfig {
  "architectures": [
    "BertForMaskedLM"
  ],
  "attention_probs_dropout_prob": 0.1,
  "gradient_checkpointing": false,
  "hidden_act": "gelu",
  "hidden_dropout_prob": 0.1,
  "hidden_size": 768,
  "initializer_range": 0.02,
  "intermediate_size": 3072,
  "layer_norm_eps": 1e-12,
  "max_position_embeddings": 512,
  "model_type": "bert",
  "num_attention_heads": 12,
  "num_hidden_layers": 12,
  "pad_token_id": 0,
  "type_vocab_size": 2,
  "vocab_size": 30522
}

min 3
max 62
std 5.681347357423177
mean 15.4726938962827
Effective batch size 10
model name conala_model_combined_training=False_seed=1_trns_back=False_use_backtr=False_lmd=1_cp_bt=True_add_no=False_no_en_upd=True_ratio=0.5_ext_li=True_ext_cp_li=True_cp_att=True_EMA=T_rnd_enc=F_de_lr=7.5e-05_mmp=0.1_saug=F_dums=F_dumQ=F_rsr=F_fc=F_ccr=F.pth
copy dataset size 105983
train set size: 2179
dev set size 200
test set size 500
example of parallel data
[CLS] concatenate elements of a list str0 of multiple integers to a single integer [SEP]
[CLS] sum ( d * 10 * * i for i, d in enumerate ( str0 [ : : - 1 ] ) ) [SEP]
105983
example of monolingual data
[CLS] sort a nested list by two elements [SEP]
[CLS] sorted ( l, key = lambda x : ( - int ( x [ 1 ] ), x [ 0 ] ) ) [SEP]
got:
tensor([ 1021,  1999, 13075,  2692,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  1021,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  1021,  1999, 13075,  2692,   102], device='cuda:0')
got:
tensor([14257,  1006, 13075,  2692,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 14257,  1006, 13075,  2692,  1007,   102], device='cuda:0')
got:
tensor([25353,  2015,  1012,  6164,  1006,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 25353,  2015,  1012,  6164,  1006,  1007,   102],
       device='cuda:0')
got:
tensor([13075,  2692,  1012,  3769,  1006,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102, 13075,  2692,   102,
          102,   102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  3769,  1006,  1007,   102],
       device='cuda:0')
got:
tensor([14101,  1006,  1008, 13075,  2692,  1007,   102,  1006,  1008, 13075,
         2692,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,  1006,  1007,
          102,   102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 14101,  1006,  1008, 13075,  2692,  1007,   102],
       device='cuda:0')
got:
tensor([13075,  2692,  1012,  3769,  1006,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102, 13075,  2692,   102,
          102,   102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  3972, 13075,  2692,  1031,  1011,  1015,  1033,   102],
       device='cuda:0')
got:
tensor([13075,  2692,  1012,  3769,  1006,  1015,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102, 13075,  2692,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102, 13075,  2692,
         1031,  1024,  1011,  1015,  1033,   102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  3769,  1006,  1015,  1007,   102],
       device='cuda:0')
got:
tensor([ 3972, 13075,  2692,  1031, 13075,  2487,  1033,   102,   102,   102,
        13075,  2692,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102, 13075,  2487,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  3972, 13075,  2692,  1031, 13075,  2487,  1033,   102],
       device='cuda:0')
got:
tensor([ 1005, 13075,  2692,  1005,  1999, 13075,  2692,   102,   102,   102,
          102,   102,   102,   102,   102,  1031,  1024,  1033,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102, 13075,  2692,
          102,   102,  2358,  2099,  2692,  1007,   102], device='cuda:0')
source:
tensor([  101,  1005, 13075,  2692,  1005,  1999, 13075,  2692,   102],
       device='cuda:0')
got:
tensor([ 6140,  1006,  9808,  1012,  4831,  2078,  1006,  1005,  2358,  2099,
         2692,  1005,  1007,  1012,  3191,  1006,  1007,  1007,   102,   102,
          102,   102,   102,  1005,  1010,  5371, 18442,  1027,  1052,  1007,
          102,   102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  2013,  4942, 21572,  9623,  2015, 12324,  2655,   102],
       device='cuda:0')
got:
tensor([6140, 1006, 1005, 2358, 2099, 2692, 1005, 1007,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102, 1005,  102,  102, 1005,
        1007,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102], device='cuda:0')
source:
tensor([ 101, 6140, 1006, 1005, 2358, 2099, 2692, 1005, 1007,  102],
       device='cuda:0')
got:
tensor([ 3972, 13075,  2692,  1031, 13075,  2487,  1033,   102,   102,   102,
        13075,  2692,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102, 13075,  2487,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  3769,  1006, 13075,  2487,  1007,   102],
       device='cuda:0')
got:
tensor([ 3204, 24388,  2063,  1006,  2262,  1010,  1016,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  3204,   102,   102,  3204,   102,   102,
          102,   102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  3204, 24388,  2063,  1006,  2262,  1010,  1016,  1007,   102],
       device='cuda:0')
got:
tensor([7680, 1006, 1040, 1012, 5300, 1006, 1007, 1007,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102], device='cuda:0')
source:
tensor([ 101, 7680, 1006, 1040, 1012, 5300, 1006, 1007, 1007,  102],
       device='cuda:0')
got:
tensor([9808, 1012, 2291, 1006, 2358, 2099, 2692, 1007,  102,  102, 2358, 2099,
        2692,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102, 2358, 2099, 2692, 1007,  102,  102,  102,  102,
         102], device='cuda:0')
source:
tensor([ 101, 9808, 1012, 2291, 1006, 2358, 2099, 2692, 1007,  102],
       device='cuda:0')
got:
tensor([ 1054,  1027, 11186,  1012,  2131,  1006, 13075,  2692,  1007,   102,
         7753,  1027, 13075,  2692,   102,   102,  2131,  1006, 13075,  2692,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  1055,  1027,  1005,  1054,  1005], device='cuda:0')
source:
tensor([  101,  1054,  1027, 11186,  1012,  2131,  1006, 13075,  2692,  1007,
          102], device='cuda:0')
got:
tensor([19616,  1006, 13075,  2692,  1012,  5300,  1006,  1007,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
         1005,  1012,  5300,  1006,  1007,  1007,   102], device='cuda:0')
source:
tensor([  101, 19616,  1006, 13075,  2692,  1012,  5300,  1006,  1007,  1007,
          102], device='cuda:0')
got:
tensor([5333, 6453, 1006, 1005, 2358, 2099, 2692, 1005, 1007,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
        1005, 2358, 2099, 2692, 1005, 1007,  102,  102,  102,  102,  102,  102,
         102], device='cuda:0')
source:
tensor([ 101, 5333, 6453, 1006, 1005, 2358, 2099, 2692, 1005, 1007,  102],
       device='cuda:0')
got:
tensor([5333, 6453, 1006, 1005, 2358, 2099, 2692, 1005, 1007,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
        1005,  102, 1005,  102, 1005,  102, 1005, 1007,  102,  102,  102,  102,
         102], device='cuda:0')
source:
tensor([ 101, 5333, 6453, 1006, 1005, 2358, 2099, 2692, 1005, 1007,  102],
       device='cuda:0')
got:
tensor([5333, 6453, 1006, 1005, 2358, 2099, 2692, 1005, 1007,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102, 1005, 2358, 2099, 2692, 1005, 1007,  102,  102,
         102], device='cuda:0')
source:
tensor([ 101, 5333, 6453, 1006, 1005, 2358, 2099, 2692, 1005, 1007,  102],
       device='cuda:0')
got:
tensor([ 7680,  1006, 13075,  2692,  1012,  5300,  1006,  1007,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  7680,  1006, 13075,  2692,  1012,  5300,  1006,  1007,  1007,
          102], device='cuda:0')
got:
tensor([19616,  1006,  2358,  2099,  2692,  1010,  7901,  1027,  2995,  1007,
          102,  7901,  1027,  2995,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
         2358,  2099,  2692,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 19616,  1006,  2358,  2099,  2692,  1010,  7901,  1027,  2995,
         1007,   102], device='cuda:0')
got:
tensor([ 2709,  8299,  6072, 26029,  3366,  1006,  3570,  1027, 19627,  1007,
          102, 15117,  1027, 19627,   102,   102,   102,  3570,  1027, 19627,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  2709,  8299,  6072, 26029,  3366,  1006,  3570,  1027, 19627,
         1007,   102], device='cuda:0')
got:
tensor([ 6140,  1006, 13075,  2692,  1012,  2783,  1035, 24471,  2140,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  6140,  1006, 13075,  2692,  1012,  2783,  1035, 24471,  2140,
         1007,   102], device='cuda:0')
got:
tensor([ 5227,  1012, 18804,  1031,  1005,  8299,  1035,  3677,  1005,  1033,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  5227,  1012, 18804,  1031,  1005,  8299,  1035,  3677,  1005,
         1033,   102], device='cuda:0')
got:
tensor([ 8094,  1012,  3204, 24388,  2063,  1006,  2526,  1010,  1015,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  8094,  1012,  3204, 24388,  2063,  1006,  2526,  1010,  1015,
         1007,   102], device='cuda:0')
got:
tensor([ 8094,  1012,  3204, 24388,  2063,  1006,  2263,  1010,  1016,  1007,
          102,   102,   102,   102,   102,   102,  2713,  1006,  2263,  1010,
         1016,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  8094,  1012,  3204, 24388,  2063,  1006,  2263,  1010,  1016,
         1007,   102], device='cuda:0')
got:
tensor([ 6140,  1006,  9808,  1012,  4831,  2078,  1006,  1005,  2358,  2099,
         2692,  1005,  1007,  1012,  3191,  1006,  1007,  1007,   102,   102,
          102,   102,   102,  1005,  1010,  5371, 18442,  1027,  1052,  1007,
          102,   102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([ 101, 9808, 1012, 2291, 1006, 1005, 2358, 2099, 2692, 1005, 1007,  102],
       device='cuda:0')
got:
tensor([ 6140,  1006,  9808,  1012,  4831,  2078,  1006,  1005,  2358,  2099,
         2692,  1005,  1007,  1012,  3191,  1006,  1007,  1007,   102,   102,
          102,   102,   102,  1005,  1010,  5371, 18442,  1027,  1052,  1007,
          102,   102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([ 101, 9808, 1012, 2291, 1006, 1005, 2358, 2099, 2692, 1005, 1007,  102],
       device='cuda:0')
got:
tensor([ 5333, 13075,  2692,  1006,  1005,  2358,  2099,  2692,  1005,  1007,
          102,  1006,  1007,   102,   102,   102,   102, 13075,  2692,   102,
          102,   102,   102,   102,   102,  5333, 13075,  2692,  1006,  1005,
         2358,  2099,  2692,  1005,  1007,   102,   102], device='cuda:0')
source:
tensor([  101,  5333, 13075,  2692,  1006,  1005,  2358,  2099,  2692,  1005,
         1007,   102], device='cuda:0')
got:
tensor([ 5227,  1012, 20346,  2015,  1031,  1005,  2358,  2099,  2692,  1005,
         1033,   102,  2131,  1006,  1005,  2358,  2099,  2692,  1005,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  5227,  1012, 20346,  2015,  1031,  1005,  2358,  2099,  2692,
         1005,  1033,   102], device='cuda:0')
got:
tensor([ 8094,  1012,  3204, 24388,  2063,  1006, 12875,  2692,  1010,  1016,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  8094,  1012,  3204, 24388,  2063,  1006, 12875,  2692,  1010,
         1016,  1007,   102], device='cuda:0')
got:
tensor([ 5333,  3643,  2121, 29165,  1006,  1005,  2358,  2099,  2692,  1005,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  1005,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102, 29165,   102,   102,
         1005,   102], device='cuda:0')
source:
tensor([  101,  5333,  3643,  2121, 29165,  1006,  1005,  2358,  2099,  2692,
         1005,  1007,   102], device='cuda:0')
got:
tensor([ 5333,  3643,  2121, 29165,  1006,  1005,  2358,  2099,  2692,  1005,
         1007,   102,  1006,  1005,  2358,  2099,  2487,  1005,  1007,   102,
         1031,  1005,  2358,  2099,  2475,  1005,  1033,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,  1005,  2358,  2099,
         2509,  1005], device='cuda:0')
source:
tensor([  101,  5333,  3643,  2121, 29165,  1006,  1005,  2358,  2099,  2692,
         1005,  1007,   102], device='cuda:0')
got:
tensor([5672, 1006, 1005, 1000, 1005, 1010, 1005, 1032, 1032, 1000, 1005, 1007,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102, 1005], device='cuda:0')
source:
tensor([ 101, 5672, 1006, 1005, 1000, 1005, 1010, 1005, 1032, 1032, 1000, 1005,
        1007,  102], device='cuda:0')
got:
tensor([ 2275, 19321,  2099,  1006,  2969,  1010, 13075,  2487,  1010, 13075,
         2692,  1007,   102,  1011, 13075,  2487,   102,   102,   102,   102,
          102,   102,   102, 13075,  2692,   102,   102,   102,  2275, 19321,
         2099,  1006, 13075,  2692,  1010, 13075,  2487,  1007,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([  101,  2275, 19321,  2099,  1006,  2969,  1010, 13075,  2487,  1010,
        13075,  2692,  1007,   102], device='cuda:0')
got:
tensor([9808, 1012, 2291, 1006, 1005, 2707, 1000, 1002, 5371, 1000, 1005, 1007,
         102,  102,  102,  102, 5371, 1012, 2707, 1006, 1007,  102,  102, 1005,
        1007,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102], device='cuda:0')
source:
tensor([ 101, 9808, 1012, 2291, 1006, 1005, 2707, 1000, 1002, 5371, 1000, 1005,
        1007,  102], device='cuda:0')
got:
tensor([ 6140,  1006,  4098,  1006, 13075,  2692,  1010,  3145,  1027,  7680,
         1007,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([  101,  6140,  1006,  4098,  1006, 13075,  2692,  1010,  3145,  1027,
         7680,  1007,  1007,   102], device='cuda:0')
got:
tensor([13075,  2692,  1012,  2000,  1035,  4487,  6593,  1006,  1005,  5950,
         1005,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,  4487,  6593,  1006,  1005,  2636,
         1005,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  2000,  1035,  4487,  6593,  1006,  1005,
         5950,  1005,  1007,   102], device='cuda:0')
got:
tensor([13075,  2692,  1012,  2000,  1035,  4487,  6593,  1006,  1005,  2636,
         1005,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  4487,  6593,  1006,  1040,  1031,  1005,
         2171,  1005,  1033,  1007,   102,   102,   102,   102,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  2000,  1035,  4487,  6593,  1006,  1005,
         2636,  1005,  1007,   102], device='cuda:0')
got:
tensor([19616,  1006, 13075,  2692,  1010,  3145,  1027, 13075,  2692,  1012,
         2131,  1007,   102,   102,   102,   102,   102,  1006, 13075,  2692,
         1012,  2131,  1007,   102,   102,   102,   102,   102,  1024,   102,
          102,  1012,  2131,  1006,  1060,  1010,  1061,  1007,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([  101, 19616,  1006, 13075,  2692,  1010,  3145,  1027, 13075,  2692,
         1012,  2131,  1007,   102], device='cuda:0')
got:
tensor([ 5333,  2448,  7292,  2121, 29165,  1006,  1005,  2358,  2099,  2692,
         1005,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,  3338,   102,   102,
         1005,   102], device='cuda:0')
source:
tensor([  101,  5333,  2448,  7292,  2121, 29165,  1006,  1005,  2358,  2099,
         2692,  1005,  1007,   102], device='cuda:0')
got:
tensor([13075,  2487,  1031,  1005, 13075,  2692,  1005,  1033,  1012,  2000,
         9863,  1006,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2487,  1031,  1005, 13075,  2692,  1005,  1033,  1012,
         2000,  9863,  1006,  1007,   102], device='cuda:0')
got:
tensor([ 2128,  1012,  3975,  1006,  1005,  1025,  1064,  1010,  1005,  1010,
        13075,  2692,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102, 13075,  2692,  1012,  3975,  1006,  1005,  1010,
         1005,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,  1055], device='cuda:0')
source:
tensor([  101,  2128,  1012,  3975,  1006,  1005,  1025,  1064,  1010,  1005,
         1010, 13075,  2692,  1007,   102], device='cuda:0')
got:
tensor([ 6140,  1006,  9808,  1012,  4831,  2078,  1006,  1005,  2358,  2099,
         2692,  1005,  1007,  1012,  3191,  1006,  1007,  1007,   102,   102,
          102,   102,   102,  1005,  1010,  5371, 18442,  1027,  1052,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([ 101, 5460, 1027, 9808, 1012, 4831, 2078, 1006, 1005, 2358, 2099, 2692,
        1005, 1007,  102], device='cuda:0')
got:
tensor([13075,  2692,  1012,  2275,  1035,  5950,  1006,  1031,  2358,  2099,
         2692,  1033,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,  8123,  1027,  1015,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  2275,  1035,  5950,  1006,  1031,  2358,
         2099,  2692,  1033,  1007,   102], device='cuda:0')
got:
tensor([ 5333, 23617,  2121, 29165,  1006,  1005,  2358,  2099,  2692,  1005,
         1010,  3292,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,  1005,   102,  1005,
          102,  1005], device='cuda:0')
source:
tensor([  101,  5333, 23617,  2121, 29165,  1006,  1005,  2358,  2099,  2692,
         1005,  1010,  3292,  1007,   102], device='cuda:0')
got:
tensor([ 1054,  1027, 11186,  1012,  2695,  1006, 13075,  2692,  1010,  2951,
         1027, 13075,  2487,  1007,   102,   102,  1035, 24471,  2140,  1027,
        13075,  2487,   102,   102,   102,   102,   102,   102,  2695,  1006,
         2171,  1010, 13075,  2487,  1007,   102,   102, 13075,  2692,  1007,
          102,   102], device='cuda:0')
source:
tensor([  101,  1054,  1027, 11186,  1012,  2695,  1006, 13075,  2692,  1010,
         2951,  1027, 13075,  2487,  1007,   102], device='cuda:0')
got:
tensor([ 6434,  1027,  2330,  1006,  1005,  2358,  2099,  2692,  1005,  1010,
         1005, 25610,  1005,  1007,   102,  6434,  1027,  4339,  1006,  1005,
         2358,  2099,  2692,  1005,  1007,   102,   102,   102,   102,   102,
          102,  2330,  1006,  1005,  2358,  2099,  2692,  1005,  1007,   102,
          102,   102], device='cuda:0')
source:
tensor([  101,  6434,  1027,  2330,  1006,  1005,  2358,  2099,  2692,  1005,
         1010,  1005, 25610,  1005,  1007,   102], device='cuda:0')
got:
tensor([ 6140,  1006,  9808,  1012,  4831,  2078,  1006,  1005,  2358,  2099,
         2692,  1005,  1007,  1012,  3191,  1006,  1007,  1007,   102,   102,
          102,   102,   102,  1005,  1010,  5371, 18442,  1027,  1052,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([ 101, 2655, 1006, 1031, 1005, 1048, 2015, 1005, 1010, 1005, 1011, 1048,
        1005, 1033, 1007,  102], device='cuda:0')
got:
tensor([ 1054,  1027, 11186,  1012,  2131,  1006, 13075,  2692,  1010, 11498,
         5244,  1027, 13075,  2487,  1007,   102,   102,   102,   102,   102,
          102, 13075,  2487,   102,   102,   102,   102,   102, 13075,  2692,
          102,   102,   102,   102,   102,   102,   102, 13075,  2487,   102,
          102,  1054], device='cuda:0')
source:
tensor([  101,  1054,  1027, 11186,  1012,  2131,  1006, 13075,  2692,  1010,
        11498,  5244,  1027, 13075,  2487,  1007,   102], device='cuda:0')
got:
tensor([ 9808,  1012,  3102,  1006,  2832,  1012, 14255,  2094,  1010,  4742,
         1012,  9033,  2290, 15872,  1007,   102,  2368,  2615,  1006,  2832,
         1012, 14255,  2094,  1010,  8909,  1027, 13138,  1007,   102, 20868,
        14573,  2015,  1027,  1014,  1007,   102,   102,   102,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([  101,  9808,  1012,  3102,  1006,  2832,  1012, 14255,  2094,  1010,
         4742,  1012,  9033,  2290, 15872,  1007,   102], device='cuda:0')
got:
tensor([13075,  2692,  1012,  3975,  1006,  1005,  1032,  1050,  1005,  1007,
         1031,  1024,  1011,  1015,  1033,   102, 13075,  2692,  1031,  1024,
         1011,  1015,  1033,   102,   102,   102,   102,   102,   102,   102,
         1005,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,  1005], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  3975,  1006,  1005,  1032,  1050,  1005,
         1007,  1031,  1024,  1011,  1015,  1033,   102], device='cuda:0')
got:
tensor([ 2862,  1006, 13075,  2692,  1012, 21933,  3207,  1006,  1005,  2358,
         2099,  2692,  1005,  1007,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,  2358,  2099,
         2692,  1005,   102,   102,   102,   102,   102,   102,   102,   102,
         1005,   102], device='cuda:0')
source:
tensor([  101,  2862,  1006, 13075,  2692,  1012, 21933,  3207,  1006,  1005,
         2358,  2099,  2692,  1005,  1007,  1007,   102], device='cuda:0')
got:
tensor([ 2330,  1006,  1005, 13075,  2692,  1005,  1010,  1005,  1059,  1005,
         1007,  1012,  2485,  1006,  1007,   102,   102,   102,   102,   102,
          102,   102,   102, 13075,  2692,  1012,  2485,  1006,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,  3793,   102,   102,
         1005,   102], device='cuda:0')
source:
tensor([  101,  2330,  1006,  1005, 13075,  2692,  1005,  1010,  1005,  1059,
         1005,  1007,  1012,  2485,  1006,  1007,   102], device='cuda:0')
got:
tensor([13075,  2692,  1012,  5672,  1006,  1005,  1998,  1005,  1010,  1005,
         2358,  2099,  2487,  1005,  1007,   102,   102,   102,   102,   102,
          102,   102, 13075,  2692,  1012,  5672,  1006,  1005,  2358,  2099,
         2487,  1005,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  5672,  1006,  1005,  1998,  1005,  1010,
         1005,  2358,  2099,  2487,  1005,  1007,   102], device='cuda:0')
got:
tensor([13075,  2692,  1011,  1027,  3058,  7292,  1012, 22313, 20042,  2050,
         1006,  2847,  1027,  1019,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
        13075,  2692], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1011,  1027,  3058,  7292,  1012, 22313, 20042,
         2050,  1006,  2847,  1027,  1019,  1007,   102], device='cuda:0')
got:
tensor([ 6140,  1006, 13075,  2692,  1012,  4372, 16044,  1006,  1005,  2358,
         2099,  2692,  1005,  1007,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102, 13075,  2692,
         1012,  4372, 16044,  1006,  1005,  2358,  2099,  2692,  1005,  1007,
          102,   102], device='cuda:0')
source:
tensor([  101,  6140,  1006, 13075,  2692,  1012,  4372, 16044,  1006,  1005,
         2358,  2099,  2692,  1005,  1007,  1007,   102], device='cuda:0')
got:
tensor([ 1031,  4949,  1006, 20014,  1010,  4942,  9863,  1007,  2005,  4942,
         9863,  1999, 13075,  2692,  1033,   102,  3975,  1006,  1007,  1033,
          102,   102,   102,   102,   102,   102,  1033,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,  1033,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([  101,  1031,  4949,  1006, 20014,  1010,  4942,  9863,  1007,  2005,
         4942,  9863,  1999, 13075,  2692,  1033,   102], device='cuda:0')
got:
tensor([ 8094,  1012,  3204, 24388,  2063,  1006, 13075,  2487,  1010, 13075,
         2692,  1007,  1031,  1015,  1033,   102, 10175,  5657,   102,   102,
          102,   102,   102,   102,   102,   102,  1015,   102,  1015,   102,
          102,   102,   102,   102,   102,   102,   102,  8094,  1012,  3204,
          102,   102], device='cuda:0')
source:
tensor([  101,  8094,  1012,  3204, 24388,  2063,  1006, 13075,  2487,  1010,
        13075,  2692,  1007,  1031,  1015,  1033,   102], device='cuda:0')
got:
tensor([13075,  2692,  1012,  4066,  1006,  3145,  1027, 23375,  1060,  1024,
         1060,  1031,  1015,  1033,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,  1060,  1031,  1014,  1033,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  4066,  1006,  3145,  1027, 23375,  1060,
         1024,  1060,  1031,  1015,  1033,  1007,   102], device='cuda:0')
got:
tensor([ 2358,  6820,  6593,  1012,  4895, 23947,  1006,  1005,  2340,  2497,
         1005,  1010, 13075,  2692,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102, 13075,  2692,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([  101,  2358,  6820,  6593,  1012,  4895, 23947,  1006,  1005,  2340,
         2497,  1005,  1010, 13075,  2692,  1007,   102], device='cuda:0')
got:
tensor([ 2009,  8743, 13669,  2015,  1012,  2566, 28120, 10708,  1006,  1031,
         2358,  2099,  2692,  1033,  1007,   102,  9377,  1006,  1016,  1010,
         1007,   102,  1031,  1017,  1033,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
         1033,   102], device='cuda:0')
source:
tensor([  101,  2009,  8743, 13669,  2015,  1012,  2566, 28120, 10708,  1006,
         1031,  2358,  2099,  2692,  1033,  1007,   102], device='cuda:0')
got:
tensor([2128, 1012, 3975, 1006, 1005, 2358, 2099, 2487, 1005, 1010, 1005, 2358,
        2099, 2692, 1005, 1007,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102, 3975, 1006, 1005, 2358, 2099, 2692, 1005,
        1007,  102,  102,  102,  102,  102], device='cuda:0')
source:
tensor([ 101, 2128, 1012, 3975, 1006, 1005, 2358, 2099, 2487, 1005, 1010, 1005,
        2358, 2099, 2692, 1005, 1007,  102], device='cuda:0')
got:
tensor([ 2065,  2038, 19321,  2099,  1006, 13075,  2692,  1010,  1005,  2358,
         2099,  2692,  1005,  1007,  1024,  3413,   102,   102,   102,   102,
          102,   102,   102,  1024,  3413,   102,  3200,  1027,  1005,  2358,
         2099,  2692,  1005,   102,   102,   102,  2003,  2025,  2358,  2099,
         2692,  1007,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  2065,  2038, 19321,  2099,  1006, 13075,  2692,  1010,  1005,
         2358,  2099,  2692,  1005,  1007,  1024,  3413,   102],
       device='cuda:0')
got:
tensor([ 2065,  2038, 19321,  2099,  1006, 13075,  2692,  1010,  1005,  2358,
         2099,  2692,  1005,  1007,  1024,  3413,   102,   102,   102,   102,
          102,   102,   102,  1024,  3413,   102,  3200,  1027,  1005,  2358,
         2099,  2692,  1005,   102,   102,   102,  2003,  2025,  2358,  2099,
         2692,  1007,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  2065,  2038, 19321,  2099,  1006, 13075,  2692,  1010,  1005,
         2358,  2099,  2692,  1005,  1007,  1024,  3413,   102],
       device='cuda:0')
got:
tensor([ 1063,  1063,  1006, 13075,  2692,  1064, 14704,  1007,  1024,  1005,
         2358,  2099,  2692,  1005,  1065,  1065,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,  1065,   102,   102,   102,
          102,   102,   102,   102,  1065,   102,   102,   102,   102,   102,
          102,   102,  1035,  2171,  1006], device='cuda:0')
source:
tensor([  101,  1063,  1063,  1006, 13075,  2692,  1064, 14704,  1007,  1024,
         1005,  2358,  2099,  2692,  1005,  1065,  1065,   102],
       device='cuda:0')
got:
tensor([13075,  2692,  1031,  1005,  2358,  2099,  2692,  1005,  1033,  1012,
         5300,  1012,  2000,  9863,  1006,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,  8123,  1027,  1015,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1031,  1005,  2358,  2099,  2692,  1005,  1033,
         1012,  5300,  1012,  2000,  9863,  1006,  1007,   102],
       device='cuda:0')
got:
tensor([13075,  2692,  1012,  2275,  1035, 28712, 16336,  2140,  1006,  1005,
         4860,  1006,   100,  1007,  1005,  1007,   102,   102,   102,   102,
          102,   102,   102,   102, 13075,  2692,  1012,  2002,  2595,  4305,
         8449,  2102,  1006,  1007,   102,   102,   102,   102,   102,   102,
          102,   102, 13075,  2692,  1012], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  2275,  1035, 28712, 16336,  2140,  1006,
         1005,  4860,  1006,   100,  1007,  1005,  1007,   102],
       device='cuda:0')
got:
tensor([13075,  2692,  1012, 12667, 24901,  1006,  1007,  1012,  3975,  1006,
         1005,  2358,  2099,  2692,  1005,  1007,   102,   102,   102,   102,
          102,   102,   102, 13075,  2692,  1012, 12667, 24901,  1006,  1007,
          102,   102,   102,   102,   102,   102,   102, 13075,  2692,  1012,
         3975,  1006,  1007,   102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012, 12667, 24901,  1006,  1007,  1012,  3975,
         1006,  1005,  2358,  2099,  2692,  1005,  1007,   102],
       device='cuda:0')
got:
tensor([27260,  2850,  2696,  1012,  3671,  4697,  1006,  1005,  1050, 24316,
         2094,  1005,  1010, 13075,  2692,  1007,  1012,  4372, 16044,  1006,
         1005,  2358,  2099,  2692,  1005,  1010,  1005,  8568,  1005,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,  2003,  4305,
        23806,  1006,  1007,   102,  1011], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  4372, 16044,  1006,  1005,  2358,  2099,
         2692,  1005,  1010,  1005,  8568,  1005,  1007,   102],
       device='cuda:0')
got:
tensor([ 6140,  1006,  1005,  2182,  2003,  2115,  4638, 10665,  1024,  1005,
         1009,  1005,  2358,  2099,  2487,  1005,  1007,   102,   102,   102,
          102,   102,   102,  1005,  2358,  2099,  2692,  1005,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  6140,  1006,  1005,  2182,  2003,  2115,  4638, 10665,  1024,
         1005,  1009,  1005,  2358,  2099,  2487,  1005,  1007,   102],
       device='cuda:0')
got:
tensor([ 2709, 18798,  1006, 13075,  2692,  1012,  4372, 16044,  1006,  1005,
        21183,  2546,  1011,  1022,  1005,  1007,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,  1005,  1007,   102,   102], device='cuda:0')
source:
tensor([  101,  2709, 18798,  1006, 13075,  2692,  1012,  4372, 16044,  1006,
         1005, 21183,  2546,  1011,  1022,  1005,  1007,  1007,   102],
       device='cuda:0')
got:
tensor([ 1031,  1005,  2358,  2099,  2692,  1005,  1012,  3693,  1006,  1048,
         1007,  2005,  1048,  1999, 13075,  2692,  1033,   102,   102,   102,
          102,   102,   102,  1033,   102,   102,   102,   102,   102,   102,
          102,   102,  1005,   102,  1055,   102,   102,  1055,   102,   102,
         2358,  2099,  2692,  1007,   102], device='cuda:0')
source:
tensor([  101,  1031,  1005,  2358,  2099,  2692,  1005,  1012,  3693,  1006,
         1048,  1007,  2005,  1048,  1999, 13075,  2692,  1033,   102],
       device='cuda:0')
got:
tensor([ 2131, 19321,  2099,  1006,  1035,  1035,  2328,  7076,  1035,  1035,
         1010,  1005,  2358,  2099,  2692,  1005,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
         1005,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  2131, 19321,  2099,  1006,  1035,  1035,  2328,  7076,  1035,
         1035,  1010,  1005,  2358,  2099,  2692,  1005,  1007,   102],
       device='cuda:0')
got:
tensor([ 2330,  1006,  1005,  5371,  1012, 19067,  2102,  1005,  1010,  1005,
         1059,  1005,  1007,  1012,  2485,  1006,  1007,   102,   102,   102,
          102,   102,   102,  5371,  1012,  2485,  1006,  1007,   102,   102,
         2240,  1003,  1055,   102,   102,   102,   102,  5371,  3630,  1006,
         1007,   102,  3793,   102,   102], device='cuda:0')
source:
tensor([  101,  2330,  1006,  1005,  5371,  1012, 19067,  2102,  1005,  1010,
         1005,  1059,  1005,  1007,  1012,  2485,  1006,  1007,   102],
       device='cuda:0')
got:
tensor([1031, 1060, 2005, 1060, 1999, 2358, 2099, 2692, 2065, 1060, 1031, 1015,
        1033, 1027, 1027, 1015, 1033,  102,  102,  102, 1031, 1016, 1033,  102,
         102,  102,  102,  102, 1033,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102, 1031, 1014, 1033], device='cuda:0')
source:
tensor([ 101, 1031, 1060, 2005, 1060, 1999, 2358, 2099, 2692, 2065, 1060, 1031,
        1015, 1033, 1027, 1027, 1015, 1033,  102], device='cuda:0')
got:
tensor([ 1046,  3385,  1012, 15653,  2015,  1006, 13075,  2692,  1010,  5676,
         1035,  2004,  6895,  2072,  1027,  6270,  1007,   102,   102,   102,
          102,   102,   102,  1046,  3385,  1012, 15653,  2015,  1006, 13075,
         2692,  1010, 26718, 18863,  1027,  3904,  1007,   102,   102,   102,
          102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  1046,  3385,  1012, 15653,  2015,  1006, 13075,  2692,  1010,
         5676,  1035,  2004,  6895,  2072,  1027,  6270,  1007,   102],
       device='cuda:0')
got:
tensor([ 2709, 13075,  2692,  1031,  1014,  1033,  1012,  3356,  1006,  1007,
         1009, 13075,  2692,  1031,  1015,  1024,  1033,   102,   102,   102,
        13075,  2692,  1031,  1014,  1033,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102, 13075,  2692,  1031,
         1015,  1033,   102,  1024,  1033], device='cuda:0')
source:
tensor([  101,  2709, 13075,  2692,  1031,  1014,  1033,  1012,  3356,  1006,
         1007,  1009, 13075,  2692,  1031,  1015,  1024,  1033,   102],
       device='cuda:0')
got:
tensor([ 1031,  4487,  6593,  1006, 14101,  1006, 13075,  2692,  1010,  1060,
         1007,  1007,  2005,  1060,  1999, 13075,  2487,  1033,   102,   102,
         1033,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  1033,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102, 13075], device='cuda:0')
source:
tensor([  101,  1031,  4487,  6593,  1006, 14101,  1006, 13075,  2692,  1010,
         1060,  1007,  1007,  2005,  1060,  1999, 13075,  2487,  1033,   102],
       device='cuda:0')
got:
tensor([ 3058,  7292,  1012,  3058,  7292,  1012,  2013,  7292,  9153,  8737,
         1006, 13075,  2692,  1013,  6694,  1012,  1014,  1007,   102,   102,
          102,   102,   102,   102,  6694,  8889,  2692,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,  1011,  1015,  1012,  1014], device='cuda:0')
source:
tensor([  101,  3058,  7292,  1012,  3058,  7292,  1012,  2013,  7292,  9153,
         8737,  1006, 13075,  2692,  1013,  6694,  1012,  1014,  1007,   102],
       device='cuda:0')
got:
tensor([19616,  1006, 13075,  2692,  1010,  3145,  1027,  8875, 18150,  3334,
         1006,  1005,  2358,  2099,  2692,  1005,  1007,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102, 13075,  2692,
         1012,  4066,  1006,  1005,  2358,  2099,  2692,  1005,  1007,   102,
          102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 19616,  1006, 13075,  2692,  1010,  3145,  1027,  8875, 18150,
         3334,  1006,  1005,  2358,  2099,  2692,  1005,  1007,  1007,   102],
       device='cuda:0')
got:
tensor([ 2358,  2099,  2692,  1012,  5200,  1012, 11307,  1006,  1066,  1053,
         1006,  2358,  2099,  2487,  1027,  1017,  1007,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,  1066,  1027,
         1017,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
         1017,  1007,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  2358,  2099,  2692,  1012,  5200,  1012, 11307,  1006,  1066,
         1053,  1006,  2358,  2099,  2487,  1027,  1017,  1007,  1007,   102],
       device='cuda:0')
got:
tensor([13075,  2692,  1011,  3058,  7292,  1012, 22313, 20042,  2050,  1006,
         2847,  1027,  1015,  1010,  2781,  1027,  2184,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102, 13075,
         2692,  1012,  8117,  1006,  1007], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1011,  3058,  7292,  1012, 22313, 20042,  2050,
         1006,  2847,  1027,  1015,  1010,  2781,  1027,  2184,  1007,   102],
       device='cuda:0')
got:
tensor([ 6140,  1006,  9808,  1012,  4831,  2078,  1006,  1005,  2358,  2099,
         2692,  1005,  1007,  1012,  3191,  1006,  1007,  1007,   102,   102,
          102,   102,   102,  1005,  1010,  5371, 18442,  1027,  1052,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  1052], device='cuda:0')
source:
tensor([ 101, 6140, 1006, 9808, 1012, 4831, 2078, 1006, 1005, 2358, 2099, 2692,
        1005, 1007, 1012, 3191, 1006, 1007, 1007,  102], device='cuda:0')
got:
tensor([ 2005,  7117,  1010,  4942, 10371,  2545,  1010,  6764,  1999,  9808,
         1012,  3328,  1006, 13075,  2692,  1007,  1024,  3413,   102,   102,
          102,   102,   102,   102,  6764,  1024,  3413,   102,   102,   102,
          102,  1031,  1024,  1024,  1011,  1015,  1033,   102,   102,   102,
          102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  2005,  7117,  1010,  4942, 10371,  2545,  1010,  6764,  1999,
         9808,  1012,  3328,  1006, 13075,  2692,  1007,  1024,  3413,   102],
       device='cuda:0')
got:
tensor([ 1039,  1012, 15389,  1006,  1005,  2358,  2099,  2692,  1005,  1010,
         1006, 13075,  2692,  1010, 13075,  2487,  1007,  1007,   102,   102,
          102,   102,  1006, 13075,  2692,  1010, 13075,  2487,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
         1003,  1055,  1005,  1007,   102], device='cuda:0')
source:
tensor([  101,  1039,  1012, 15389,  1006,  1005,  2358,  2099,  2692,  1005,
         1010,  1006, 13075,  2692,  1010, 13075,  2487,  1007,  1007,   102],
       device='cuda:0')
got:
tensor([ 3046,  1024,  2709, 20014,  1006, 13075,  2692,  1007,  3272,  3643,
         2121, 29165,  1024,  2709, 14257,  1006, 13075,  2692,  1007,   102,
         1024,  2709, 14257,  1006, 13075,  2692,  1007,   102,  1024,  2709,
        14257,  1006, 13075,  2692,  1007,   102,  1065,   102,   102,   102,
          102,   102,  2709, 14257,  1006], device='cuda:0')
source:
tensor([  101,  3046,  1024,  2709, 20014,  1006, 13075,  2692,  1007,  3272,
         3643,  2121, 29165,  1024,  2709, 14257,  1006, 13075,  2692,  1007,
          102], device='cuda:0')
got:
tensor([ 2131, 19321,  2099,  1006, 13075,  2692,  1010,  1005,  2358,  2099,
         2692,  1005,  1010,  1005,  2358,  2099,  2487,  1005,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,  1005,
         2358,  2099,  2692,  1005,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  2131, 19321,  2099,  1006, 13075,  2692,  1010,  1005,  2358,
         2099,  2692,  1005,  1010,  1005,  2358,  2099,  2487,  1005,  1007,
          102], device='cuda:0')
got:
tensor([ 4098,  1006, 13075,  2692,  1012, 21792, 22254,  1006,  1045,  1007,
         2005,  1045,  1999,  1005,  2358,  2099,  2692,  1005,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,  1005,  2358,
         2099,  2692,  1005,   102,   102,   102,   102, 13075,  2692,  1012,
         3975,  1006,  1005,  2358,  2099], device='cuda:0')
source:
tensor([  101,  4098,  1006, 13075,  2692,  1012, 21792, 22254,  1006,  1045,
         1007,  2005,  1045,  1999,  1005,  2358,  2099,  2692,  1005,  1007,
          102], device='cuda:0')
got:
tensor([13075,  2692,  1031, 22851,  1012,  3475, 18083,  1006, 13075,  2692,
         1007,  1012,  2151,  1006,  8123,  1027,  1015,  1007,  1033,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102, 13075,  2692,   102,
          102,  2003,  2025,  2995,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1031, 22851,  1012,  3475, 18083,  1006, 13075,
         2692,  1007,  1012,  2151,  1006,  8123,  1027,  1015,  1007,  1033,
          102], device='cuda:0')
got:
tensor([13075,  2692,  1027, 16371,  8737,  2100,  1012,  3972, 12870,  1006,
        13075,  2692,  1010,  1016,  1010,  8123,  1027,  1015,  1007,   102,
          102,   102,   102,   102, 13075,  2692,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
        13075,  2692,  1027,  1016,  1007], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1027, 16371,  8737,  2100,  1012,  3972, 12870,
         1006, 13075,  2692,  1010,  1016,  1010,  8123,  1027,  1015,  1007,
          102], device='cuda:0')
got:
tensor([13075,  2692,  1027, 16371,  8737,  2100,  1012,  3972, 12870,  1006,
        13075,  2692,  1010,  1014,  1010,  8123,  1027,  1014,  1007,   102,
          102,   102, 13075,  2692,  1033,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  3972, 13075,  2692], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1027, 16371,  8737,  2100,  1012,  3972, 12870,
         1006, 13075,  2692,  1010,  1014,  1010,  8123,  1027,  1014,  1007,
          102], device='cuda:0')
got:
tensor([ 9808,  1012,  2291,  1006,  1005,  2707, 24970,  1012,  4654,  2063,
         1026,  4130,  1013,  2000,  1013,  5371,  1028,  1005,  1007,   102,
          102,   102,   102,   102,   102,  5371, 18442,  1027,  9808,  1012,
         4130,  1012,  3693,  1006,  5371, 18442,  1007,   102,   102,   102,
          102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  9808,  1012,  2291,  1006,  1005,  2707, 24970,  1012,  4654,
         2063,  1026,  4130,  1013,  2000,  1013,  5371,  1028,  1005,  1007,
          102], device='cuda:0')
got:
tensor([ 7680,  1006, 18798,  1006,  1061,  1007,  2005,  1061,  1999, 13075,
         2692,  2065, 18798,  1006,  1061,  1007,  1028,  1015,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  2003, 18798,  1006,  1061,  1007,   102,
          102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  7680,  1006, 18798,  1006,  1061,  1007,  2005,  1061,  1999,
        13075,  2692,  2065, 18798,  1006,  1061,  1007,  1028,  1015,  1007,
          102], device='cuda:0')
got:
tensor([13075,  2487,  1027, 13075,  2692,  1012, 21933,  3207,  1006,  1005,
        21183,  2546,  1011,  1022,  1011,  9033,  2290,  1005,  1007,   102,
          102,   102,   102, 13075,  2487,  1012,  4372, 16044,  1006,  1005,
        21183,  2546,  1011,  1022,  1011,  9033,  2290,  1005,  1007,   102,
          102,   102,   102,   102,  1052], device='cuda:0')
source:
tensor([  101, 13075,  2487,  1027, 13075,  2692,  1012, 21933,  3207,  1006,
         1005, 21183,  2546,  1011,  1022,  1011,  9033,  2290,  1005,  1007,
          102], device='cuda:0')
got:
tensor([ 4942, 21572,  9623,  2015,  1012,  2655,  1006,  1031,  1005,  3844,
         7698,  1005,  1010,  1005,  1013,  1055,  1005,  1033,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101,  4942, 21572,  9623,  2015,  1012,  2655,  1006,  1031,  1005,
         3844,  7698,  1005,  1010,  1005,  1013,  1055,  1005,  1033,  1007,
          102], device='cuda:0')
got:
tensor([ 4942, 21572,  9623,  2015,  1012,  2655,  1006,  1031,  1005,  3844,
         7698,  1005,  1010,  1005,  1013,  1037,  1005,  1033,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
         4942, 21572,  9623,  2015,  1012,  7753,   102,   102],
       device='cuda:0')
source:
tensor([  101,  4942, 21572,  9623,  2015,  1012,  2655,  1006,  1031,  1005,
         3844,  7698,  1005,  1010,  1005,  1013,  1037,  1005,  1033,  1007,
          102], device='cuda:0')
got:
tensor([ 4942, 21572,  9623,  2015,  1012,  2655,  1006,  1031,  1005,  3844,
         7698,  1005,  1010,  1005,  1013,  1048,  1005,  1033,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101,  4942, 21572,  9623,  2015,  1012,  2655,  1006,  1031,  1005,
         3844,  7698,  1005,  1010,  1005,  1013,  1048,  1005,  1033,  1007,
          102], device='cuda:0')
got:
tensor([ 4942, 21572,  9623,  2015,  1012,  2655,  1006,  1031,  1005,  3844,
         7698,  1005,  1010,  1005,  1013,  1054,  1005,  1033,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101,  4942, 21572,  9623,  2015,  1012,  2655,  1006,  1031,  1005,
         3844,  7698,  1005,  1010,  1005,  1013,  1054,  1005,  1033,  1007,
          102], device='cuda:0')
got:
tensor([ 1031,  1031, 20014,  1006,  1060,  1007,  2005,  1060,  1999,  4942,
         9863,  1033,  2005,  4942,  9863,  1999, 13075,  2692,  1033,   102,
         2003,  2025, 13075,  2692,  1033,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  1033,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  1033,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101,  1031,  1031, 20014,  1006,  1060,  1007,  2005,  1060,  1999,
         4942,  9863,  1033,  2005,  4942,  9863,  1999, 13075,  2692,  1033,
          102], device='cuda:0')
got:
tensor([ 4062,  1012,  2424,  1035,  5783,  1035,  2011,  1035,  8909,  1006,
         1005, 13075,  2692,  1005,  1007,  1012,  3154,  1006,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101,  4062,  1012,  2424,  1035,  5783,  1035,  2011,  1035,  8909,
         1006,  1005, 13075,  2692,  1005,  1007,  1012,  3154,  1006,  1007,
          102], device='cuda:0')
got:
tensor([1000, 1000, 1000, 1000, 1000, 1000, 1012, 3693, 1006, 1031, 1015, 1010,
        1016, 1010, 1017, 1010, 1018, 1033, 1007,  102,  102,  102,  102,  102,
         102, 1016, 1010, 1017, 1007,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102, 1016, 1010, 1017, 1007,  102,  102],
       device='cuda:0')
source:
tensor([ 101, 1000, 1000, 1000, 1000, 1000, 1000, 1012, 3693, 1006, 1031, 1015,
        1010, 1016, 1010, 1017, 1010, 1018, 1033, 1007,  102], device='cuda:0')
got:
tensor([11968,  8043,  1012, 11968, 20106,  9463,  1006,  2330,  1006,  1005,
         2358,  2099,  2692,  1005,  1010,  1005, 21144,  1005,  1007,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,  2004,
         4654,  2278,  1024,  6140,  1006,  2240,  1010,  2203],
       device='cuda:0')
source:
tensor([  101, 11968,  8043,  1012, 11968, 20106,  9463,  1006,  2330,  1006,
         1005,  2358,  2099,  2692,  1005,  1010,  1005, 21144,  1005,  1007,
         1007,   102], device='cuda:0')
got:
tensor([13075,  2692,  1012, 10651,  1006,  1063, 13075,  2487,  1024, 13075,
         2475,  1031,  1005,  2358,  2099,  2692,  1005,  1033,  1065,  1007,
          102,   102,   102,   102,   102,   102,   102,   102, 13075,  2692,
          102,   102,   102,   102,   102,   102,   102, 13075,  2475,   102,
         1033,   102,   102,   102,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012, 10651,  1006,  1063, 13075,  2487,  1024,
        13075,  2475,  1031,  1005,  2358,  2099,  2692,  1005,  1033,  1065,
         1007,   102], device='cuda:0')
got:
tensor([ 1031,  1006,  1039,  1013,  1056,  1007,  2005,  1039,  1010,  1056,
         1999, 14101,  1006, 13075,  2692,  1010, 13075,  2487,  1007,  1033,
          102, 13075,  2487,   102,   102,   102, 13075,  2692,  1031,  1015,
         1033,   102,   102,   102,  1033,   102,   102,   102,   102,  1055,
          102,   102, 13075,  2692,  1010, 13075,  2487,  1007],
       device='cuda:0')
source:
tensor([  101,  1031,  1006,  1039,  1013,  1056,  1007,  2005,  1039,  1010,
         1056,  1999, 14101,  1006, 13075,  2692,  1010, 13075,  2487,  1007,
         1033,   102], device='cuda:0')
got:
tensor([27937,  1012,  2073,  1006, 27937,  1012,  1999,  2487,  2094,  1006,
        13075,  2692,  1010, 13075,  2487,  1007,  1007,  1031,  1014,  1033,
          102,   102,   102,   102, 13075,  2487,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102, 13075,  2487,   102,
          102,   102,  1045,   102,  1033,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101, 27937,  1012,  2073,  1006, 27937,  1012,  1999,  2487,  2094,
         1006, 13075,  2692,  1010, 13075,  2487,  1007,  1007,  1031,  1014,
         1033,   102], device='cuda:0')
got:
tensor([ 2128,  1012,  2424,  8095,  1006,  1005,  1032,  1032,  1055,  1009,
         1064,  1032,  1032,  1055,  1009,  1005,  1010, 13075,  2692,  1007,
          102,  1005,   102, 13075,  2692,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
         1005,   102,   102,  1005,   102,  1005,   102,   102],
       device='cuda:0')
source:
tensor([  101,  2128,  1012,  2424,  8095,  1006,  1005,  1032,  1032,  1055,
         1009,  1064,  1032,  1032,  1055,  1009,  1005,  1010, 13075,  2692,
         1007,   102], device='cuda:0')
got:
tensor([1000, 1000, 1000, 1063, 1024, 1012, 1019, 1065, 1000, 1000, 1000, 1012,
        4289, 1006, 1005, 2358, 2099, 2692, 1005, 1007,  102, 1005, 1007,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102, 1005,  102, 1005,  102, 1005,  102, 1005,  102, 1005, 1007,  102],
       device='cuda:0')
source:
tensor([ 101, 1000, 1000, 1000, 1063, 1024, 1012, 1019, 1065, 1000, 1000, 1000,
        1012, 4289, 1006, 1005, 2358, 2099, 2692, 1005, 1007,  102],
       device='cuda:0')
got:
tensor([ 2709,  2128,  1012,  4942,  1006,  1005,  2358,  2099,  2692,  1005,
         1010,  1005,  2358,  2099,  2487,  1005,  1010, 13075,  2692,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  1011,  1015,   102,   102,  1005,  1010],
       device='cuda:0')
source:
tensor([  101,  2709,  2128,  1012,  4942,  1006,  1005,  2358,  2099,  2692,
         1005,  1010,  1005,  2358,  2099,  2487,  1005,  1010, 13075,  2692,
         1007,   102], device='cuda:0')
got:
tensor([4062, 1012, 2424, 1035, 5783, 1035, 2011, 1035, 8909, 1006, 1005, 2358,
        2099, 2692, 1005, 1007, 1012, 3154, 1006, 1007,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102],
       device='cuda:0')
source:
tensor([ 101, 4062, 1012, 2424, 1035, 5783, 1035, 2011, 1035, 8909, 1006, 1005,
        2358, 2099, 2692, 1005, 1007, 1012, 3154, 1006, 1007,  102],
       device='cuda:0')
got:
tensor([ 6140,  1006,  2035,  1006,  2773,  1031,  1014,  1033,  1012,  2003,
        29547,  2099,  1006,  1007,  2005,  2773,  1999, 13075,  2692,  1007,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,  2003, 29547,  2099,  1006,  1007,   102,   102],
       device='cuda:0')
source:
tensor([  101,  6140,  1006,  2035,  1006,  2773,  1031,  1014,  1033,  1012,
         2003, 29547,  2099,  1006,  1007,  2005,  2773,  1999, 13075,  2692,
         1007,  1007,   102], device='cuda:0')
got:
tensor([10439,  1012,  9530,  8873,  2290,  1031,  1005,  3036,  1035,  4236,
         1035, 24471,  2140,  1005,  1033,  1027,  1005,  2358,  2099,  2692,
         1005,   102,   102,   102,  1005,  2358,  2099,  2692,  1005,   102,
          102,   102,   102,   102,   102,   102,  1012,  2131,  1035,  4236,
         1035, 24471,  2140,  1006,  1007,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101, 10439,  1012,  9530,  8873,  2290,  1031,  1005,  3036,  1035,
         4236,  1035, 24471,  2140,  1005,  1033,  1027,  1005,  2358,  2099,
         2692,  1005,   102], device='cuda:0')
got:
tensor([27937,  1012,  2812,  1006, 27937,  1012,  9140,  1006,  1031, 13075,
         2692,  1010, 13075,  2487,  1033,  1007,  1010,  8123,  1027,  1014,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102, 13075,  2692,  1012,
         2812,  1007,   102,   102,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101, 27937,  1012,  2812,  1006, 27937,  1012,  9140,  1006,  1031,
        13075,  2692,  1010, 13075,  2487,  1033,  1007,  1010,  8123,  1027,
         1014,  1007,   102], device='cuda:0')
got:
tensor([1040, 2546, 1012, 2275, 1035, 5950, 1006, 1031, 1005, 2358, 2099, 2692,
        1005, 1010, 1005, 2358, 2099, 2487, 1005, 1033, 1007,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102, 1035, 2946, 1006, 1007,  102,  102],
       device='cuda:0')
source:
tensor([ 101, 1040, 2546, 1012, 2275, 1035, 5950, 1006, 1031, 1005, 2358, 2099,
        2692, 1005, 1010, 1005, 2358, 2099, 2487, 1005, 1033, 1007,  102],
       device='cuda:0')
got:
tensor([ 6140,  1006,  1005,  1032,  1050,  1005,  1012,  3693,  1006,  2358,
         2099,  1006,  1052,  1007,  2005,  1052,  1999, 13075,  2692,  1007,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  1005,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101,  6140,  1006,  1005,  1032,  1050,  1005,  1012,  3693,  1006,
         2358,  2099,  1006,  1052,  1007,  2005,  1052,  1999, 13075,  2692,
         1007,  1007,   102], device='cuda:0')
got:
tensor([19616,  1006,  2862,  1006,  2951,  1012,  5167,  1006,  1007,  1007,
         1010,  3145,  1027, 23375,  1060,  1024,  1060,  1031,  1015,  1033,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  1008,  1008,  1016,  1007,   102,   102],
       device='cuda:0')
source:
tensor([  101, 19616,  1006,  2862,  1006,  2951,  1012,  5167,  1006,  1007,
         1007,  1010,  3145,  1027, 23375,  1060,  1024,  1060,  1031,  1015,
         1033,  1007,   102], device='cuda:0')
got:
tensor([ 6140,  1006,  9808,  1012,  4831,  2078,  1006,  1005,  2358,  2099,
         2692,  1005,  1007,  1012,  3191,  1006,  1007,  1007,   102,   102,
          102,   102,   102,  1005,  1010,  5371, 18442,  1027,  1052,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  1052,  1012,  3524,  1006],
       device='cuda:0')
source:
tensor([  101,  2709,  1035,  3642,  1027,  4942, 21572,  9623,  2015,  1012,
         2655,  1006,  1005,  2358,  2099,  2692,  1005,  1010,  5806,  1027,
         2995,  1007,   102], device='cuda:0')
got:
tensor([2128, 1012, 2424, 8095, 1006, 1005, 1006, 1031, 1037, 1011, 1062, 1033,
        1007, 1008, 1005, 1010, 1005, 2358, 2099, 2692, 1005, 1007,  102,  102,
         102,  102,  102,  102,  102,  102,  102, 1031, 1037, 1011, 1062, 1033,
         102,  102, 2030, 2094, 1006, 1037, 1007,  102,  102, 1005, 1007,  102],
       device='cuda:0')
source:
tensor([ 101, 2128, 1012, 2424, 8095, 1006, 1005, 1006, 1031, 1037, 1011, 1062,
        1033, 1008, 1007, 1005, 1010, 1005, 2358, 2099, 2692, 1005, 1007,  102],
       device='cuda:0')
got:
tensor([2128, 1012, 2424, 8095, 1006, 1005, 1006, 1031, 1037, 1011, 1062, 1033,
        1007, 1008, 1005, 1010, 1005, 2358, 2099, 2692, 1005, 1007,  102,  102,
         102,  102,  102,  102,  102,  102,  102, 1031, 1037, 1011, 1062, 1033,
         102,  102, 2030, 2094, 1006, 1037, 1007,  102,  102, 1005, 1007,  102],
       device='cuda:0')
source:
tensor([ 101, 2128, 1012, 2424, 8095, 1006, 1005, 1006, 1031, 1037, 1011, 1062,
        1033, 1007, 1008, 1005, 1010, 1005, 2358, 2099, 2692, 1005, 1007,  102],
       device='cuda:0')
got:
tensor([19616,  1006,  2275,  1006, 13075,  2692,  1007,  1007,   102,  2275,
         1006, 10722, 10814,  1006,  1060,  1007,  1007,   102,   102,   102,
          102,   102,   102,   102,  1060,  1031,  1024,  1011,  1015,  1033,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  1035,  2862,  1006,  1060,  1007,   102],
       device='cuda:0')
source:
tensor([  101, 19616,  1006,  2275,  1006,  2009,  8743, 13669,  2015,  1012,
         4677,  1012,  2013,  1035,  2009,  6906,  3468,  1006, 13075,  2692,
         1007,  1007,  1007,   102], device='cuda:0')
got:
tensor([22260,  1012,  2275,  1035, 28712, 16336,  2140,  1006,  1005,  4860,
         1006,  1002,  1034,  1032,  1032, 25022, 11890,  1002,  1039,  1007,
         1005,  1007,   102,   102,   102,   102,  1027,  1005,  1039,  1005,
          102,  1005,   102,   102,   102,   102,   102,   102,   102,   102,
         1005,   102,  1005,   102,  1005,   102,  1005,   102],
       device='cuda:0')
source:
tensor([  101, 22260,  1012,  2275,  1035, 28712, 16336,  2140,  1006,  1005,
         4860,  1006,  1002,  1034,  1032,  1032, 25022, 11890,  1002,  1039,
         1007,  1005,  1007,   102], device='cuda:0')
got:
tensor([13075,  2692,  1027,  1031,  8875,  2005,  2773,  1999, 13075,  2487,
         2005,  8875,  1999,  2773,  1012,  3975,  1006,  1005,  1010,  1005,
         1007,  1033,   102,   102, 13075,  2692,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102, 13075,  2487,   102,
          102,  1008,  4469,  1007,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101, 13075,  2692,  1027,  1031,  8875,  2005,  2773,  1999, 13075,
         2487,  2005,  8875,  1999,  2773,  1012,  3975,  1006,  1005,  1010,
         1005,  1007,  1033,   102], device='cuda:0')
got:
tensor([ 3058,  7292,  1012,  3058,  7292,  1012,  2358, 14536,  7292,  1006,
         1005,  2358,  2099,  2692,  1005,  1010,  1005,  2358,  2099,  2487,
         1005,  1007,   102,  1005,  2358,  2099,  2487,  1005,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  1005,   102,  1005,   102],
       device='cuda:0')
source:
tensor([  101,  3058,  7292,  1012,  3058,  7292,  1012,  2358, 14536,  7292,
         1006,  1005,  2358,  2099,  2692,  1005,  1010,  1005,  2358,  2099,
         2487,  1005,  1007,   102], device='cuda:0')
got:
tensor([16371,  8737,  2100,  1012, 11089,  1006, 16371,  8737,  2100,  1012,
        11089,  1006, 13075,  2475,  1010, 13075,  2692,  1007,  1010, 13075,
         2475,  1007,   102, 13075,  2475,   102, 13075,  2692,  1031,  1015,
         1010,  1016,  1033,   102,   102,   102,   102,   102,   102,   102,
          102,   102, 13075,  2475,  1010, 13075,  2475,  1007],
       device='cuda:0')
source:
tensor([  101, 16371,  8737,  2100,  1012, 11089,  1006, 16371,  8737,  2100,
         1012, 11089,  1006, 13075,  2475,  1010, 13075,  2692,  1007,  1010,
        13075,  2475,  1007,   102], device='cuda:0')
got:
tensor([ 1040,  2546,  1012,  2177,  3762,  1006, 22851,  1012,  2051, 17058,
         2121,  1006, 10424,  2063,  4160,  1027,  1005, 13075,  2692,  1005,
         1007,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102, 10424,  2063,
         4160,  1027,  1005,  1038,  1005,  1007,   102,   102],
       device='cuda:0')
source:
tensor([  101,  1040,  2546,  1012,  2177,  3762,  1006, 22851,  1012,  2051,
        17058,  2121,  1006, 10424,  2063,  4160,  1027,  1005, 13075,  2692,
         1005,  1007,  1007,   102], device='cuda:0')
got:
tensor([19616,  1006,  2862,  1006, 13075,  2692,  1012,  5167,  1006,  1007,
         1007,  1010,  3145,  1027, 23375,  1060,  1024,  1060,  1031,  1015,
         1033,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  1035,  4487,  6593,  1006,  1060,  1007],
       device='cuda:0')
source:
tensor([  101, 19616,  1006,  2862,  1006, 13075,  2692,  1012,  5167,  1006,
         1007,  1007,  1010,  3145,  1027, 23375,  1060,  1024,  1060,  1031,
         1015,  1033,  1007,   102], device='cuda:0')
got:
tensor([26718,  1027,  3058,  7292,  1012,  3058,  7292,  1012, 11506,  1006,
         3058,  7292,  1012,  3058,  1012,  2651,  1006,  1007,  1010, 13075,
         2692,  1007,   102, 13075,  2692,   102,  2781,  1027,  1015,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101, 26718,  1027,  3058,  7292,  1012,  3058,  7292,  1012, 11506,
         1006,  3058,  7292,  1012,  3058,  1012,  2651,  1006,  1007,  1010,
        13075,  2692,  1007,   102], device='cuda:0')
got:
tensor([ 2862,  1012,  4066,  1006,  3145,  1027, 23375,  8875,  1024,  8875,
         1031,  1005,  2358,  2099,  2692,  1005,  1033,  1010,  7901,  1027,
         2995,  1007,   102,   102,   102,   102,   102,   102,   102,  7901,
         1027,  2995,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,  2358,  2099,  2692,   102,   102,   102,   102,   102,   102,
          102,   102,   102], device='cuda:0')
source:
tensor([  101,  2862,  1012,  4066,  1006,  3145,  1027, 23375,  8875,  1024,
         8875,  1031,  1005,  2358,  2099,  2692,  1005,  1033,  1010,  7901,
         1027,  2995,  1007,   102], device='cuda:0')
got:
tensor([ 1040,  2546,  2487,  1027, 22851,  1012,  3191,  1035, 10751,  2546,
         1006,  1005,  2358,  2099,  2692,  1005,  1010,  1005,  2358,  2099,
         2487,  1005,  1007,   102,   102,  1040,  2546,  2487,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  1040,  2546,  1012,  7753,   102,   102,   102,  1040,
         2546,  1027,  1005], device='cuda:0')
source:
tensor([  101,  1040,  2546,  2487,  1027, 22851,  1012,  3191,  1035, 10751,
         2546,  1006,  1005,  2358,  2099,  2692,  1005,  1010,  1005,  2358,
         2099,  2487,  1005,  1007,   102], device='cuda:0')
got:
tensor([ 8040, 20097,  1006,  1060,  1010,  1061,  1010,  1055,  1027,  3156,
         1010,  3609,  1027,  1005,  2665,  1005,  1010, 12115,  1027,  1005,
         1044,  1005,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,  1005,   102,  1005,  1010, 12115,  1027,  1005,
         1044,  1005,  1007], device='cuda:0')
source:
tensor([  101,  8040, 20097,  1006,  1060,  1010,  1061,  1010,  1055,  1027,
         3156,  1010,  3609,  1027,  1005,  2665,  1005,  1010, 12115,  1027,
         1005,  1044,  1005,  1007,   102], device='cuda:0')
got:
tensor([ 7680,  1006,  8875,  1031,  1005,  2358,  2099,  2692,  1005,  1033,
         2005,  8875,  1999,  2862,  1006, 13075,  2487,  1012,  5300,  1006,
         1007,  1007,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102, 13075,  2692,  1012,
         5300,  1006,  1007,   102,   102,   102,   102,   102, 13075,  2692,
         1012,  5300,  1006], device='cuda:0')
source:
tensor([  101,  7680,  1006,  8875,  1031,  1005,  2358,  2099,  2692,  1005,
         1033,  2005,  8875,  1999,  2862,  1006, 13075,  2487,  1012,  5300,
         1006,  1007,  1007,  1007,   102], device='cuda:0')
got:
tensor([ 3058,  7292,  1012,  3058,  1006,  2456,  1010,  1016,  1010,  1015,
         1007,  1011,  3058,  7292,  1012, 22313, 20042,  2050,  1006,  2420,
         1027,  1015,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102], device='cuda:0')
source:
tensor([  101,  3058,  7292,  1012,  3058,  1006,  2456,  1010,  1016,  1010,
         1015,  1007,  1011,  3058,  7292,  1012, 22313, 20042,  2050,  1006,
         2420,  1027,  1015,  1007,   102], device='cuda:0')
got:
tensor([2128, 1012, 3975, 1006, 1005, 1035, 1006, 1029, 1024, 2005, 1064, 2030,
        1064, 1998, 1007, 1035, 1005, 1010, 1005, 2358, 2099, 2692, 1005, 1007,
         102,  102,  102,  102,  102, 1005, 2358, 2099, 2692, 1005, 1007,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102], device='cuda:0')
source:
tensor([ 101, 2128, 1012, 3975, 1006, 1005, 1035, 1006, 1029, 1024, 2005, 1064,
        2030, 1064, 1998, 1007, 1035, 1005, 1010, 1005, 2358, 2099, 2692, 1005,
        1007,  102], device='cuda:0')
got:
tensor([6140, 1006, 1005, 1063, 1014, 1065, 1005, 1012, 4289, 1006, 1005, 2358,
        2099, 2692, 1005, 1012, 1062, 8873, 3363, 1006, 1016, 1007, 1007, 1007,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102, 1005, 2358, 2099, 2692, 1005, 1007,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102], device='cuda:0')
source:
tensor([ 101, 6140, 1006, 1005, 1063, 1014, 1065, 1005, 1012, 4289, 1006, 1005,
        2358, 2099, 2692, 1005, 1012, 1062, 8873, 3363, 1006, 1016, 1007, 1007,
        1007,  102], device='cuda:0')
got:
tensor([ 1063,  3145,  1024, 11748,  2005,  3145,  1010, 11748,  1999,  2862,
         1006, 13075,  2692,  1012,  5167,  1006,  1007,  1007,  2065, 11748,
          999,  1027,  4413,  1065,   102,   102,   102,   102,  1018,  1065,
          102,   102,   102,   102,  1065,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  1065,   102,   102,   102,  1005,  1065,
          102,  1005,   102], device='cuda:0')
source:
tensor([  101,  1063,  3145,  1024, 11748,  2005,  3145,  1010, 11748,  1999,
         2862,  1006, 13075,  2692,  1012,  5167,  1006,  1007,  1007,  2065,
        11748,   999,  1027,  4413,  1065,   102], device='cuda:0')
got:
tensor([22851,  1012,  9530, 11266,  1006,  1006, 13075,  2692,  1010, 13075,
         2487,  1007,  1010,  8123,  1027,  1015,  1007,  1012,  2812,  1006,
         8123,  1027,  1015,  1007,   102,  2812,  1006,  8123,  1027,  1015,
         1007,   102,   102,   102,   102,   102,   102, 13075,  2487,  1007,
          102,   102,  1015,   102,  2812,  1006,  8123,  1027,  1015,  1007,
          102,   102,   102], device='cuda:0')
source:
tensor([  101, 22851,  1012,  9530, 11266,  1006,  1006, 13075,  2692,  1010,
        13075,  2487,  1007,  1010,  8123,  1027,  1015,  1007,  1012,  2812,
         1006,  8123,  1027,  1015,  1007,   102], device='cuda:0')
got:
tensor([ 4942, 21572,  9623,  2015,  1012,  2655,  1006,  1031,  1005,  2358,
         2099,  2487,  1005,  1010,  1005,  2358,  2099,  2692,  1005,  1010,
        13075,  2692,  1033,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102], device='cuda:0')
source:
tensor([  101,  4942, 21572,  9623,  2015,  1012,  2655,  1006,  1031,  1005,
         2358,  2099,  2487,  1005,  1010,  1005,  2358,  2099,  2692,  1005,
         1010, 13075,  2692,  1033,  1007,   102], device='cuda:0')
got:
tensor([ 2275,  1006,  1031,  1005,  2358,  2099,  2692,  1005,  1010,  1005,
         2358,  2099,  2487,  1005,  1033,  1007,  1012, 26354, 12083, 13462,
         1006, 13075,  2692,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102], device='cuda:0')
source:
tensor([  101,  2275,  1006,  1031,  1005,  2358,  2099,  2692,  1005,  1010,
         1005,  2358,  2099,  2487,  1005,  1033,  1007,  1012, 26354, 12083,
        13462,  1006, 13075,  2692,  1007,   102], device='cuda:0')
got:
tensor([ 2709, 13075,  2692,  1027,  1027,  2862,  1006,  2846,  1006, 13075,
         2692,  1031,  1014,  1033,  1010, 13075,  2692,  1031,  1011,  1015,
         1033,  1009,  1015,  1007,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  1011,  1015,  1033,   102,   102,   102,   102,   102,
          102,   102,   102], device='cuda:0')
source:
tensor([  101,  2709, 13075,  2692,  1027,  1027,  2862,  1006,  2846,  1006,
        13075,  2692,  1031,  1014,  1033,  1010, 13075,  2692,  1031,  1011,
         1015,  1033,  1009,  1015,  1007,  1007,   102], device='cuda:0')
got:
tensor([13075,  2692,  1012,  2177,  3762,  1006,  1005,  5310,  1005,  1007,
         1031,  1005,  2358,  2099,  2692,  1005,  1033,  1012, 10938,  1006,
         7680,  1007,  1027,  1027,  1014,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,  1014,   102,   102,
         2004, 13874,  1006, 14257,  1007,   102,   102,   102,   102,   102,
          102,   102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  2177,  3762,  1006,  1005,  5310,  1005,
         1007,  1031,  1005,  2358,  2099,  2692,  1005,  1033,  1012, 10938,
         1006,  7680,  1007,  1027,  1027,  1014,   102], device='cuda:0')
got:
tensor([19616,  1006,  1048,  1010,  3145,  1027, 23375,  1060,  1024,  1006,
         1011, 20014,  1006,  1060,  1031,  1015,  1033,  1007,  1010,  1060,
         1031,  1014,  1033,  1007,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  1011,  1015,  1033,   102,  1056,  1031,  1014,  1033,
          102,   102,   102], device='cuda:0')
source:
tensor([  101, 19616,  1006,  1048,  1010,  3145,  1027, 23375,  1060,  1024,
         1006,  1011, 20014,  1006,  1060,  1031,  1015,  1033,  1007,  1010,
         1060,  1031,  1014,  1033,  1007,  1007,   102], device='cuda:0')
got:
tensor([ 2128,  1012,  2424,  8095,  1006,  1000, 17928,  1032,  1032,  1006,
         1005,  1006,  1012,  1008,  1029,  1007,  1005,  1000,  1010,  1005,
         2358,  2099,  2692,  1005,  1007,   102,   102,   102, 13075,  2692,
         1005,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
         1005,  1000,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102], device='cuda:0')
source:
tensor([  101,  2128,  1012,  2424,  8095,  1006,  1000, 17928,  1032,  1032,
         1006,  1005,  1006,  1012,  1008,  1029,  1007,  1005,  1000,  1010,
         1005,  2358,  2099,  2692,  1005,  1007,   102], device='cuda:0')
got:
tensor([ 6140,  1006,  1005,  1005,  1012,  3693,  1006,  1031,  2358,  2099,
         1006,  2030,  2094,  1006,  1037,  1007,  1007,  2005,  1037,  1999,
        13075,  2692,  1033,  1007,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,  2003,  7076,
        26897,  1006,  1037,  1010, 18798,  1007,   102, 13075,  2692,  1007,
          102,   102,   102], device='cuda:0')
source:
tensor([  101,  6140,  1006,  1005,  1005,  1012,  3693,  1006,  1031,  2358,
         2099,  1006,  2030,  2094,  1006,  1037,  1007,  1007,  2005,  1037,
         1999, 13075,  2692,  1033,  1007,  1007,   102], device='cuda:0')
got:
tensor([ 1000,  1000,  1000,  1000,  1000,  1000,  1012,  3693,  1006, 11307,
         1006,  2358,  2099,  1012,  2003,  4305, 23806,  1010,  1005,  2358,
         2099,  2692,  1005,  1007,  1007,   102,   102,   102,   102,  1005,
         2358,  2099,  2692,  1005,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,  1005,   102,  1005,  1007,   102,   102,   102,
          102,  1005,   102], device='cuda:0')
source:
tensor([  101,  1000,  1000,  1000,  1000,  1000,  1000,  1012,  3693,  1006,
        11307,  1006,  2358,  2099,  1012,  2003,  4305, 23806,  1010,  1005,
         2358,  2099,  2692,  1005,  1007,  1007,   102], device='cuda:0')
got:
tensor([ 6140,  1006,  2862,  1006,  2009,  8743, 13669,  2015,  1012,  4031,
         1006,  1031,  2358,  2099,  2692,  1033,  1010,  1031,  2358,  2099,
         2487,  1033,  1007,  1007,  1007,   102,   102,   102,   102,   102,
          102,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102], device='cuda:0')
source:
tensor([  101,  6140,  1006,  2862,  1006,  2009,  8743, 13669,  2015,  1012,
         4031,  1006,  1031,  2358,  2099,  2692,  1033,  1010,  1031,  2358,
         2099,  2487,  1033,  1007,  1007,  1007,   102], device='cuda:0')
got:
tensor([ 3565,  1006, 13075,  2692,  1010,  2969,  1007,  1012,  1035,  1035,
         1999,  4183,  1035,  1035,  1006,  1008, 12098,  5620,  1010,  1008,
         1008,  6448,  2906,  5620,  1007,   102,   102,   102,   102,   102,
         2655,  1006,  1008,  1008,  6448,  2906,  5620,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,  1005,  1007,
          102,   102,   102], device='cuda:0')
source:
tensor([  101,  3565,  1006, 13075,  2692,  1010,  2969,  1007,  1012,  1035,
         1035,  1999,  4183,  1035,  1035,  1006,  1008, 12098,  5620,  1010,
         1008,  1008,  6448,  2906,  5620,  1007,   102], device='cuda:0')
got:
tensor([2358, 2099, 2692, 1012, 4066, 1006, 1031, 1005, 2358, 2099, 2487, 1005,
        1010, 1005, 2358, 2099, 2475, 1005, 1010, 1005, 2358, 2099, 2509, 1005,
        1033, 1007,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102, 1005, 1010, 1005,
        2358, 2099, 2509, 1005, 1007], device='cuda:0')
source:
tensor([ 101, 2358, 2099, 2692, 1012, 4066, 1006, 1031, 1005, 2358, 2099, 2487,
        1005, 1010, 1005, 2358, 2099, 2475, 1005, 1010, 1005, 2358, 2099, 2509,
        1005, 1033, 1007,  102], device='cuda:0')
got:
tensor([13075,  2692,  1012,  2177,  3762,  1006,  1005,  2358,  2099,  2692,
         1005,  1007,  1012, 12943,  2290,  1006, 23375,  1060,  1024,  1060,
         1012,  2000,  9863,  1006,  1007,  1007,   102,   102,  8123,  1027,
         1015,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  2177,  3762,  1006,  1005,  2358,  2099,
         2692,  1005,  1007,  1012, 12943,  2290,  1006, 23375,  1060,  1024,
         1060,  1012,  2000,  9863,  1006,  1007,  1007,   102],
       device='cuda:0')
got:
tensor([24471,  6894,  2497,  1012, 11968,  3366,  1012,  4895, 28940, 12184,
         1006, 24471,  6894,  2497,  1012, 11968,  3366,  1012,  4895, 28940,
        12184,  1006, 13075,  2692,  1007,  1007,   102,   102,  1038,  1005,
          102,  1005,   102,   102,   102,   102,   102,   102,   102,   102,
          102,  1005,   102,  1035, 21933,  3207,  1006,  1005, 21183,  2546,
         1011,  1022,  1005], device='cuda:0')
source:
tensor([  101, 24471,  6894,  2497,  1012, 11968,  3366,  1012,  4895, 28940,
        12184,  1006, 24471,  6894,  2497,  1012, 11968,  3366,  1012,  4895,
        28940, 12184,  1006, 13075,  2692,  1007,  1007,   102],
       device='cuda:0')
got:
tensor([13075,  2692,  1012,  2013,  9863,  1006,  1031, 20014,  1006, 11748,
         1007,  2005, 11748,  1999,  2358,  8718,  1012,  3191,  1006,  1007,
         1012,  3975,  1006,  1007,  1033,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  1033,   102,   102,   102,   102,   102,
          102,   102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  2013,  9863,  1006,  1031, 20014,  1006,
        11748,  1007,  2005, 11748,  1999,  2358,  8718,  1012,  3191,  1006,
         1007,  1012,  3975,  1006,  1007,  1033,  1007,   102],
       device='cuda:0')
got:
tensor([ 9986,  1012, 26726,  8988,  1006,  1000,  1013,  1013,  1037,  1031,
         4627,  1011,  2007,  1006,  3793,  1006,  1007,  1010,  1005,  2070,
         3793,  1005,  1007,  1033,  1000,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  1008,  1013,  1016,  1005,  1007,   102,   102,   102,
          102,   102,   102], device='cuda:0')
source:
tensor([  101,  9986,  1012, 26726,  8988,  1006,  1000,  1013,  1013,  1037,
         1031,  4627,  1011,  2007,  1006,  3793,  1006,  1007,  1010,  1005,
         2070,  3793,  1005,  1007,  1033,  1000,  1007,   102],
       device='cuda:0')
got:
tensor([13075,  2692,  1027, 24471,  6894,  2497,  1012, 11968,  3366,  1012,
         4895, 28940, 12184,  1006, 13075,  2692,  1007,  1012, 21933,  3207,
         1006,  1005, 13075,  2487,  1005,  1007,   102,   102,  2358, 26797,
         2102,   102,   102,   102,   102,   102,   102, 13075,  2487,   102,
          102,   102,  1011,  1015,   102,   102,   102, 13075,  2692,  1007,
          102,   102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1027, 24471,  6894,  2497,  1012, 11968,  3366,
         1012,  4895, 28940, 12184,  1006, 13075,  2692,  1007,  1012, 21933,
         3207,  1006,  1005, 13075,  2487,  1005,  1007,   102],
       device='cuda:0')
got:
tensor([ 1031,  1049,  1012,  2707,  1006,  1007,  2005,  1049,  1999,  2128,
         1012,  2424, 21646,  1006,  1005,  3231,  1005,  1010,  1005,  3231,
         3231,  3231,  3231,  1005,  1007,  1033,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,  1011,  1055,   102,
          102,  1005,   102,   102,  1005,  1007,  1033,   102,   102,   102,
          102,   102,   102], device='cuda:0')
source:
tensor([  101,  1031,  1049,  1012,  2707,  1006,  1007,  2005,  1049,  1999,
         2128,  1012,  2424, 21646,  1006,  1005,  3231,  1005,  1010,  1005,
         3231,  3231,  3231,  3231,  1005,  1007,  1033,   102],
       device='cuda:0')
got:
tensor([22278,  1012,  1999,  3388,  1035, 23961, 10441,  1006,  2358,  6820,
         6593,  1012,  5308,  1006,  1005,   999,  1048,  1005,  1010, 19883,
         2692, 19841, 21084, 22394,  1007,  1007,   102,   102,  1014,   102,
         1011,  1015,   102,  1014,   102, 10047,  3736,  4371,  1006,  2531,
         1007,   102,   102,   102,   102,   102,   102,   102,  1013,  1016,
         1007,   102,   102], device='cuda:0')
source:
tensor([  101, 22278,  1012,  1999,  3388,  1035, 23961, 10441,  1006,  2358,
         6820,  6593,  1012,  5308,  1006,  1005,   999,  1048,  1005,  1010,
        19883,  2692, 19841, 21084, 22394,  1007,  1007,   102],
       device='cuda:0')
got:
tensor([13075,  2692,  1027, 27937,  1012,  9140,  1006,  1031,  1045,  2005,
         1045,  1999,  2846,  1006,  2531,  1007,  1033,  1010, 26718, 18863,
         1027, 27937,  1012, 14257, 21084,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102, 13075,  2692,  1012,
         2002,  2595,  4305,  1045,   102, 13075,  2692,  1012,  3975,  1006,
         1005,  1010,  1005], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1027, 27937,  1012,  9140,  1006,  1031,  1045,
         2005,  1045,  1999,  2846,  1006,  2531,  1007,  1033,  1010, 26718,
        18863,  1027, 27937,  1012, 14257, 21084,  1007,   102],
       device='cuda:0')
got:
tensor([13075,  2692,  1031, 27937,  1012, 19027, 15465,  1006, 13075,  2692,
         1012,  4338,  1031,  1014,  1033,  1007,  1031,  1024,  1010,  1006,
         3904,  1007,  1033,  1010, 13075,  2487,  1033,   102, 13075,  2692,
         1031,  1024,  1010,  1006,  3904,  1007,  1033,   102, 13075,  2487,
         1033,   102, 13075,  2692,  1031,  1024,  1010,  1006,  3904,  1007,
         1033,   102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1031, 27937,  1012, 19027, 15465,  1006, 13075,
         2692,  1012,  4338,  1031,  1014,  1033,  1007,  1031,  1024,  1010,
         1006,  3904,  1007,  1033,  1010, 13075,  2487,  1033,   102],
       device='cuda:0')
got:
tensor([ 1031,  2128,  1012,  3975,  1006,  1005,  1035,  1006,  1029,  1024,
         1042,  1029,  2030,  1064,  1998,  1007,  1035,  1005,  1010,  1055,
         1007,  2005,  1055,  1999, 13075,  2692,  1033,   102,  3975,  1006,
         1005,  2358,  2099,  2692,  1005,  1007,  1033,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102], device='cuda:0')
source:
tensor([  101,  1031,  2128,  1012,  3975,  1006,  1005,  1035,  1006,  1029,
         1024,  1042,  1029,  2030,  1064,  1998,  1007,  1035,  1005,  1010,
         1055,  1007,  2005,  1055,  1999, 13075,  2692,  1033,   102],
       device='cuda:0')
got:
tensor([13075,  2692,  1012,  4066,  1006,  2344,  1027,  1031,  1005,  2358,
         2099,  2692,  1005,  1010,  1005,  2358,  2099,  2487,  1005,  1010,
         1005,  2358,  2099,  2475,  1005,  1033,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102, 13075,  2692,  1012,  4066,  1006,  3145,  1027, 23375,
         1060,  1024,  1060], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  4066,  1006,  2344,  1027,  1031,  1005,
         2358,  2099,  2692,  1005,  1010,  1005,  2358,  2099,  2487,  1005,
         1010,  1005,  2358,  2099,  2475,  1005,  1033,  1007,   102],
       device='cuda:0')
got:
tensor([ 1037,  1027,  2330,  1006,  1005,  2358,  2099,  2692,  1005,  1010,
         1005, 21144,  1005,  1007,  1012,  3191,  1006,  1007,  1012,  4372,
        16044,  1006,  1005, 13075,  2692,  1005,  1007,   102,   102,   102,
          102,   102,   102,  1012,  4372, 16044,  1006,  1005, 21183,  2546,
         1011,  1022,  1005,  1007,   102,  1005,   102,   102,  1005,  1007,
          102,   102,   102], device='cuda:0')
source:
tensor([  101,  1037,  1027,  2330,  1006,  1005,  2358,  2099,  2692,  1005,
         1010,  1005, 21144,  1005,  1007,  1012,  3191,  1006,  1007,  1012,
         4372, 16044,  1006,  1005, 13075,  2692,  1005,  1007,   102],
       device='cuda:0')
got:
tensor([2128, 1012, 4942, 1006, 1005, 1006, 1032, 1032, 1040, 1009, 1007, 1005,
        1010, 1005, 1000, 1032, 1032, 1015, 1000, 1005, 1010, 1005, 2358, 2099,
        2692, 1005, 1007,  102,  102,  102,  102,  102, 1005, 1007,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102, 1005, 1007,  102,
         102, 1005, 1007,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102, 1005], device='cuda:0')
source:
tensor([ 101, 2128, 1012, 4942, 1006, 1005, 1006, 1032, 1032, 1040, 1009, 1007,
        1005, 1010, 1005, 1000, 1032, 1032, 1015, 1000, 1005, 1010, 1005, 2358,
        2099, 2692, 1005, 1007,  102], device='cuda:0')
got:
tensor([ 2085,  1027,  3058,  7292,  1012,  3058,  7292,  1012,  2085,  1006,
         1007,  1012,  2358, 12881,  7292,  1006,  1005,  1003,  1044,  1024,
         1003,  1049,  1024,  1003,  1055,  1005,  1007,   102,  1024,  1003,
         1055,  1012,  1003,  1042,  1012,  2085,  1006,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([  101,  2085,  1027,  3058,  7292,  1012,  3058,  7292,  1012,  2085,
         1006,  1007,  1012,  2358, 12881,  7292,  1006,  1005,  1003,  1044,
         1024,  1003,  1049,  1024,  1003,  1055,  1005,  1007,   102],
       device='cuda:0')
got:
tensor([ 6140,  1006, 24471,  6894,  2497,  1012, 11968,  3366,  1012,  4895,
        28940, 12184,  1006, 13075,  2692,  1007,  1012, 21933,  3207,  1006,
         1005, 21183,  2546,  2620,  1005,  1007,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
         1005,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([  101,  6140,  1006, 24471,  6894,  2497,  1012, 11968,  3366,  1012,
         4895, 28940, 12184,  1006, 13075,  2692,  1007,  1012, 21933,  3207,
         1006,  1005, 21183,  2546,  2620,  1005,  1007,  1007,   102],
       device='cuda:0')
got:
tensor([ 3058, 16429,  3501,  1027,  3058,  7292,  1012,  3058,  7292,  1012,
         2358, 14536,  7292,  1006, 13075,  2692,  1010,  1005,  2358,  2099,
         2692,  1005,  1007,  1012,  3058,  1006,  1007,   102, 13075,  2692,
         1010,  1005,  2358,  2099,  2692,  1005,  1007,   102,   102,   102,
          102,   102,  3058,  1006,  1007,   102, 13075,  2692,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([  101,  3058, 16429,  3501,  1027,  3058,  7292,  1012,  3058,  7292,
         1012,  2358, 14536,  7292,  1006, 13075,  2692,  1010,  1005,  2358,
         2099,  2692,  1005,  1007,  1012,  3058,  1006,  1007,   102],
       device='cuda:0')
got:
tensor([27937,  1012, 16417, 17421,  1006,  1005,  1012,  1012,  1012,  1046,
         1010,  1012,  1012,  1046,  1011,  1028,  1012,  1012,  1012,  1005,
         1010, 13075,  2692,  1010, 13075,  2692,  1007,   102,  1012,  4338,
          102,   102,   102,   102,   102,   102,   102, 13075,  2692,  1012,
         2177,  1006,  1014,  1007,   102,   102,   102,   102,   102,  1024,
         3413,   102,   102, 13075,  2692,  1012,  6611,  1006, 27937,  1012,
         2812,  1006], device='cuda:0')
source:
tensor([  101, 27937,  1012, 16417, 17421,  1006,  1005,  1012,  1012,  1012,
         1046,  1010,  1012,  1012,  1012,  1046,  1011,  1028,  1012,  1012,
         1012,  1005,  1010, 13075,  2692,  1010, 13075,  2692,  1007,   102],
       device='cuda:0')
got:
tensor([ 1000,  1000,  1000,  1032,  1032,  1057,  8889,  2509, 21906,  1032,
         1032,  1057,  8889,  2509,  2063,  1000,  1000,  1000,  1012, 21933,
         3207,  1006,  1005, 27260,  1011,  4019,  1005,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,  1032,  1032,  1057,
         8889,  2509,  1005,   102,  1011,  4019,  1006,  1005, 27260,  1011,
         4019,  1005,  1007,   102,  1024,  1011,  1015,   102,  1005,   102,
          102,   102], device='cuda:0')
source:
tensor([  101,  1000,  1000,  1000,  1032,  1032,  1057,  8889,  2509, 21906,
         1032,  1032,  1057,  8889,  2509,  2063,  1000,  1000,  1000,  1012,
        21933,  3207,  1006,  1005, 27260,  1011,  4019,  1005,  1007,   102],
       device='cuda:0')
got:
tensor([ 6140,  1006,  2128,  1012,  4942,  1006,  1005,  1006,  1032,  1032,
         1059,  1007,  1032,  1032,  1015,  1009,  1005,  1010,  1005,  1032,
         1032,  1015,  1005,  1010, 13075,  2692,  1007,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  1011,  1015,   102,  1005,  1010, 13075,  2692,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([  101,  6140,  1006,  2128,  1012,  4942,  1006,  1005,  1006,  1032,
         1032,  1059,  1007,  1032,  1032,  1015,  1009,  1005,  1010,  1005,
         1032,  1032,  1015,  1005,  1010, 13075,  2692,  1007,  1007,   102],
       device='cuda:0')
got:
tensor([ 1056,  1027,  3058,  7292,  1012,  3058,  7292,  1012,  2085,  1006,
         1007,  1056,  1011,  3058,  7292,  1012, 22313, 20042,  2050,  1006,
         2847,  1027,  1015,  1010,  2781,  1027,  2184,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  6140,  1006,  1056,  1008,  2781,  1027,  2184,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([  101,  1056,  1027,  3058,  7292,  1012,  3058,  7292,  1012,  2085,
         1006,  1007,  1056,  1011,  3058,  7292,  1012, 22313, 20042,  2050,
         1006,  2847,  1027,  1015,  1010,  2781,  1027,  2184,  1007,   102],
       device='cuda:0')
got:
tensor([ 1031,  1049,  1012,  2707,  1006,  1007,  2005,  1049,  1999,  2128,
         1012,  2424, 21646,  1006,  1005,  1006,  1029,  1027, 23746,  1007,
         1005,  1010,  1005, 13075,  2487,  1005,  1007,  1033,   102,   102,
          102,   102,   102,   102,  1033,   102,   102,   102,   102,   102,
          102,   102,  1037,   102,   102, 13075,  2692,  1005,  1007,  1033,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([  101,  1031,  1049,  1012,  2707,  1006,  1007,  2005,  1049,  1999,
         2128,  1012,  2424, 21646,  1006,  1005,  1006,  1029,  1027, 23746,
         1007,  1005,  1010,  1005, 13075,  2487,  1005,  1007,  1033,   102],
       device='cuda:0')
got:
tensor([19616,  1006, 13075,  2692,  1010,  3145,  1027, 23375,  1060,  1024,
        13075,  2487,  1012,  5950,  1006,  2862,  1006,  1060,  1012,  5300,
         1006,  1007,  1007,  1031,  1014,  1033,  1007,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102, 13075,  2692,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([  101, 19616,  1006, 13075,  2692,  1010,  3145,  1027, 23375,  1060,
         1024, 13075,  2487,  1012,  5950,  1006,  2862,  1006,  1060,  1012,
         5300,  1006,  1007,  1007,  1031,  1014,  1033,  1007,  1007,   102],
       device='cuda:0')
got:
tensor([24471,  6894,  2497,  1012, 11968,  3366,  1012,  4895, 28940, 12184,
         1006, 24471,  6894,  2497,  1012, 11968,  3366,  1012,  4895, 28940,
        12184,  1006,  1005,  2358,  2099,  2692,  1005,  1007,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,  2358, 26797,
         2102,  1012, 21933,  3207,  1006,  1005,  2358,  2099,  2487,  1005,
         1007,   102,   102,   102,   102,  1005,   102,  1005,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([  101, 24471,  6894,  2497,  1012, 11968,  3366,  1012,  4895, 28940,
        12184,  1006, 24471,  6894,  2497,  1012, 11968,  3366,  1012,  4895,
        28940, 12184,  1006,  1005,  2358,  2099,  2692,  1005,  1007,  1007,
          102], device='cuda:0')
got:
tensor([22851,  1012,  9530, 11266,  1006,  1043,  2005,  1035,  1010,  1043,
         1999, 13075,  2692,  1012,  2177,  3762,  1006,  1005,  8909,  1005,
         1007,  2065, 18798,  1006,  1043,  1007,  1028,  1015,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,  1005,   102,  8123,  1027,  1015,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([  101, 22851,  1012,  9530, 11266,  1006,  1043,  2005,  1035,  1010,
         1043,  1999, 13075,  2692,  1012,  2177,  3762,  1006,  1005,  8909,
         1005,  1007,  2065, 18798,  1006,  1043,  1007,  1028,  1015,  1007,
          102], device='cuda:0')
got:
tensor([13075,  2692,  1027, 13075,  2692,  1012, 21933,  3207,  1006,  1005,
         2358,  2099,  2692,  1005,  1010,  1005,  8568,  1005,  1007,  1012,
         4372, 16044,  1006,  1005,  2358,  2099,  2692,  1005,  1007,   102,
          102,   102,   102,   102,   102,   102,   102, 13075,  2692,  1012,
        21933,  3207,  1006,  1005,  2358,  2099,  2692,  1005,  1007,   102,
          102,   102,   102, 13075,  2692,  1005,  1007,   102,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1027, 13075,  2692,  1012, 21933,  3207,  1006,
         1005,  2358,  2099,  2692,  1005,  1010,  1005,  8568,  1005,  1007,
         1012,  4372, 16044,  1006,  1005,  2358,  2099,  2692,  1005,  1007,
          102], device='cuda:0')
got:
tensor([ 1000,  1000,  1000,   100,  1000,  1000,  1000,  1012,  4372, 16044,
         1006,  1005,  6315,  1035, 27260,  1035,  4019,  1005,  1007,  1012,
        21933,  3207,  1006,  1005, 21183,  2546,  1011,  1022,  1005,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,  1025,  1005,
         1007,   102,  1011,  1022,  1005,   102,  1005,   102,   102,   102,
          102,  1011,  1022,  1005,   102,  1005,   102,  1005,   102,  1005,
          102,   102], device='cuda:0')
source:
tensor([  101,  1000,  1000,  1000,   100,  1000,  1000,  1000,  1012,  4372,
        16044,  1006,  1005,  6315,  1035, 27260,  1035,  4019,  1005,  1007,
         1012, 21933,  3207,  1006,  1005, 21183,  2546,  1011,  1022,  1005,
         1007,   102], device='cuda:0')
got:
tensor([ 2695,  1035,  3433,  1027, 11186,  1012,  2695,  1006, 24471,  2140,
         1027,  1005,  8299,  1024,  1013,  1013,  8299,  8428,  1012,  8917,
         1013,  2695,  1005,  1010,  1046,  3385,  1027, 13075,  2692,  1007,
          102,   102,   102,  1012,  2695,  1006, 24471,  2140,  1010,  1046,
         3385,  1027, 11498,  5244,  1007,   102,  2695,  1006,  7953,  1027,
         1005,  4646,  1013,  1005,  1007,   102,   102,   102,  1005,  1007,
          102,   102], device='cuda:0')
source:
tensor([  101,  2695,  1035,  3433,  1027, 11186,  1012,  2695,  1006, 24471,
         2140,  1027,  1005,  8299,  1024,  1013,  1013,  8299,  8428,  1012,
         8917,  1013,  2695,  1005,  1010,  1046,  3385,  1027, 13075,  2692,
         1007,   102], device='cuda:0')
got:
tensor([13075,  2692,  1027,  1063,  3145,  1024, 13075,  2487,  2005,  3145,
         1010, 13075,  2487,  1999,  2862,  1006, 13075,  2692,  1012,  5167,
         1006,  1007,  1007,  2065, 13075,  2487,   999,  1027,  4413,  1065,
          102,   102,   102,   102, 13075,  2487,  1027,  1027,  4413,  1065,
          102,   102,   102,   102,   102,   102,   102,   102, 13075,  2692,
         1065,   102,   102,   102,   102,   102, 13075,  2692,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1027,  1063,  3145,  1024, 13075,  2487,  2005,
         3145,  1010, 13075,  2487,  1999,  2862,  1006, 13075,  2692,  1012,
         5167,  1006,  1007,  1007,  2065, 13075,  2487,   999,  1027,  4413,
         1065,   102], device='cuda:0')
got:
tensor([ 4062,  1012,  2424,  1035,  3787,  1035,  2011,  1035, 26726,  8988,
         1006,  1000,  1013,  1013,  1008,  1031,  3397,  1006,  3793,  1006,
         1007,  1010,  1005,  2026,  6462,  1005,  1007,  1033,  1000,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([  101,  4062,  1012,  2424,  1035,  3787,  1035,  2011,  1035, 26726,
         8988,  1006,  1000,  1013,  1013,  1008,  1031,  3397,  1006,  3793,
         1006,  1007,  1010,  1005,  2026,  6462,  1005,  1007,  1033,  1000,
         1007,   102], device='cuda:0')
got:
tensor([27260,  2850,  2696,  1012,  3671,  4697,  1006,  1005,  1050, 24316,
         2094,  1005,  1010, 13075,  2692,  1007,  1012,  4372, 16044,  1006,
         1005,  2358,  2099,  2692,  1005,  1010,  1005,  8568,  1005,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,  2003,  4305,
        23806,  1006,  1007,   102,  1011,  1015,   102,   102,  1005,  2358,
         2099,  2692,  1005,  1007,   102,   102,   102,   102,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([  101, 27260,  2850,  2696,  1012,  3671,  4697,  1006,  1005,  1050,
        24316,  2094,  1005,  1010, 13075,  2692,  1007,  1012,  4372, 16044,
         1006,  1005,  2358,  2099,  2692,  1005,  1010,  1005,  8568,  1005,
         1007,   102], device='cuda:0')
got:
tensor([ 4942, 21572,  9623,  2015,  1012,  2655,  1006,  1031,  1005,  3844,
         7698,  1005,  1010,  1005,  1013,  1054,  1005,  1010,  1005,  1013,
         1056,  1005,  1010,  1005,  2358,  2099,  2692,  1005,  1033,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,  1013,  1016,
         1005,  1033,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([  101,  4942, 21572,  9623,  2015,  1012,  2655,  1006,  1031,  1005,
         3844,  7698,  1005,  1010,  1005,  1013,  1054,  1005,  1010,  1005,
         1013,  1056,  1005,  1010,  1005,  2358,  2099,  2692,  1005,  1033,
         1007,   102], device='cuda:0')
got:
tensor([ 1040,  2546,  1031,  1005, 13075,  2692,  1005,  1033,  1012,  2358,
         2099,  1012,  3975,  1006,  1005,  1011,  1005,  1007,  1012,  2358,
         2099,  1031,  1014,  1033,  1012,  2004, 13874,  1006, 20014,  1007,
          102,   102,   102,  1012,  2358,  2099,  1012,  3975,  1006,  1005,
        13075,  2692,  1005,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,  1005,   102,  1005,   102,
         1005,  1007], device='cuda:0')
source:
tensor([  101,  1040,  2546,  1031,  1005, 13075,  2692,  1005,  1033,  1012,
         2358,  2099,  1012,  3975,  1006,  1005,  1011,  1005,  1007,  1012,
         2358,  2099,  1031,  1014,  1033,  1012,  2004, 13874,  1006, 20014,
         1007,   102], device='cuda:0')
got:
tensor([ 2051,  1012, 12395,  7292,  1006,  3058,  7292,  1012,  3058,  7292,
         1012,  2358, 14536,  7292,  1006, 13075,  2692,  1010,  1005,  2358,
         2099,  2692,  1005,  1007,  1012,  2051,  8525, 10814,  1006,  1007,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  6140,  1006, 13075,  2692,  1007,   102,  1005,  2358,
         2099,  2692,  1005,  1007,   102,   102,   102,   102,  1005,  2358,
         2099,  2692], device='cuda:0')
source:
tensor([  101,  2051,  1012, 12395,  7292,  1006,  3058,  7292,  1012,  3058,
         7292,  1012,  2358, 14536,  7292,  1006, 13075,  2692,  1010,  1005,
         2358,  2099,  2692,  1005,  1007,  1012,  2051,  8525, 10814,  1006,
         1007,  1007,   102], device='cuda:0')
got:
tensor([13075,  2475,  1012,  5200,  1012, 11307,  1006,  2358,  2099,  2692,
         1027,  1005,  2358,  2099,  2692,  1005,  1010,  2358,  2099,  2487,
         1027,  1005,  2358,  2099,  2487,  1005,  1007,  1012,  6526,  1006,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  1035,  3823,  1006,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2475,  1012,  5200,  1012, 11307,  1006,  2358,  2099,
         2692,  1027,  1005,  2358,  2099,  2692,  1005,  1010,  2358,  2099,
         2487,  1027,  1005,  2358,  2099,  2487,  1005,  1007,  1012,  6526,
         1006,  1007,   102], device='cuda:0')
got:
tensor([27937,  1012,  3972, 12870,  1006,  2358,  2099,  2692,  1010,  2862,
         1006,  2846,  1006,  1014,  1010,  2358,  2099,  2692,  1012,  4338,
         1031,  1015,  1033,  1010,  1022,  1007,  1007,  1010,  8123,  1027,
         1015,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,  1005,  1010,  8123,  1027,  1015,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([  101, 27937,  1012,  3972, 12870,  1006,  2358,  2099,  2692,  1010,
         2862,  1006,  2846,  1006,  1014,  1010,  2358,  2099,  2692,  1012,
         4338,  1031,  1015,  1033,  1010,  1022,  1007,  1007,  1010,  8123,
         1027,  1015,  1007,   102], device='cuda:0')
got:
tensor([ 1000,  1000,  1000,  2358,  2099,  2692,  1000,  1000,  1000,  1012,
         5672,  1006,  1005, 13075,  2692,  1005,  1010,  1005, 22038,  2595,
         1005,  1010,  1015,  1007,  1012,  2424,  1006,  1005, 13075,  2692,
         1005,  1007,   102,   102,   102,   102,  2003,  2025, 13075,  2692,
         1007,   102,  1011,  1015,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  1027,  1014,   102,  1005,   102,  1005,
          102,  1005], device='cuda:0')
source:
tensor([  101,  1000,  1000,  1000,  2358,  2099,  2692,  1000,  1000,  1000,
         1012,  5672,  1006,  1005, 13075,  2692,  1005,  1010,  1005, 22038,
         2595,  1005,  1010,  1015,  1007,  1012,  2424,  1006,  1005, 13075,
         2692,  1005,  1007,   102], device='cuda:0')
got:
tensor([ 6140,  1006,  2128,  1012,  4942,  1006,  1005,  1031,  1035,  1003,
         1034,  1002,  1033,  1005,  1010,  1005,  1032,  1032,  1032,  1032,
         1032,  1032,  1043,  1026,  1014,  1028,  1005,  1010, 13075,  2692,
         1007,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  1035,  2003,  1035,  1010, 13075,  2692,  1007,   102,
          102,   102,   102,   102,   102,   102,  1005,  1032,  1032,  1033,
          102,  1005], device='cuda:0')
source:
tensor([  101,  6140,  1006,  2128,  1012,  4942,  1006,  1005,  1031,  1035,
         1003,  1034,  1002,  1033,  1005,  1010,  1005,  1032,  1032,  1032,
         1032,  1032,  1032,  1043,  1026,  1014,  1028,  1005,  1010, 13075,
         2692,  1007,  1007,   102], device='cuda:0')
got:
tensor([13075,  2692,  1027, 13075,  2692,  1031,  1031,  1005,  2358,  2099,
         2549,  1005,  1010,  1005,  2358,  2099,  2629,  1005,  1010,  1005,
         2358,  2099,  2575,  1005,  1010,  1005,  2358,  2099,  2581,  1005,
         1033,  1033,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102, 13075,  2692,  1010,  1005,  2358,  2099,  2581,  1005,
         1010,  1005,  2358,  2099,  2581,  1005,  1007,   102,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1027, 13075,  2692,  1031,  1031,  1005,  2358,
         2099,  2549,  1005,  1010,  1005,  2358,  2099,  2629,  1005,  1010,
         1005,  2358,  2099,  2575,  1005,  1010,  1005,  2358,  2099,  2581,
         1005,  1033,  1033,   102], device='cuda:0')
got:
tensor([13075,  2692,  1012,  3975,  1006,  1005,  2358,  2099,  2692,  1005,
         1007,  1031,  1011,  1015,  1033,  1012,  5672,  1006,  1005,  2358,
         2099,  2487,  1005,  1010,  1005,  1005,  1007,  1009,  1005,  2358,
         2099,  2475,  1005,   102,   102,   102,   102,   102,   102,   102,
         1005,   102,   102,  1011,  1015,  1005,   102,   102,  1005,  1010,
         1005,  1005,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  3975,  1006,  1005,  2358,  2099,  2692,
         1005,  1007,  1031,  1011,  1015,  1033,  1012,  5672,  1006,  1005,
         2358,  2099,  2487,  1005,  1010,  1005,  1005,  1007,  1009,  1005,
         2358,  2099,  2475,  1005,   102], device='cuda:0')
got:
tensor([13075,  2692,  1012,  3828,  2480,  1006, 13075,  2487,  1010,  1008,
         1031,  2131,  2906,  9447,  1031,  1014,  1033,  1010,  2131,  2906,
         9447,  1031,  1015,  1033,  1010,  2131,  2906,  9447,  1031,  1022,
         1033,  1033,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  1035,  2946,  1027,  1016,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  3828,  2480,  1006, 13075,  2487,  1010,
         1008,  1031,  2131,  2906,  9447,  1031,  1014,  1033,  1010,  2131,
         2906,  9447,  1031,  1015,  1033,  1010,  2131,  2906,  9447,  1031,
         1022,  1033,  1033,  1007,   102], device='cuda:0')
got:
tensor([13075,  2692,  1012,  8840,  2278,  1031, 13075,  2692,  1012,  2177,
         3762,  1006,  1005,  2358,  2099,  2487,  1005,  1007,  1031,  1005,
         2358,  2099,  2692,  1005,  1033,  1012, 10938,  1006,  7680,  1007,
         1027,  1027,  1014,  1033,   102,  2004, 13874,  1006,  7680,  1007,
         1033,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102, 13075,  2692,  1012,  7680,  1007,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  8840,  2278,  1031, 13075,  2692,  1012,
         2177,  3762,  1006,  1005,  2358,  2099,  2487,  1005,  1007,  1031,
         1005,  2358,  2099,  2692,  1005,  1033,  1012, 10938,  1006,  7680,
         1007,  1027,  1027,  1014,  1033,   102], device='cuda:0')
got:
tensor([27937,  1012,  5717,  2015,  1006,  1006,  1020,  1010,  1023,  1010,
         2322,  1007,  1007,  1009, 27937,  1012,  9140,  1006,  1031,  2358,
         2099,  2692,  1033,  1007,  1031,  1006,  3904,  1007,  1010,  1024,
         1010,  1006,  3904,  1007,  1033,   102,  1031,  2358,  2099,  2487,
         1033,   102,  1031,  2358,  2099,  2692,  1033,  1007,   102,  1006,
         3904,  1007,  1033,   102,   102,   102,  1024,  1010,  1006,  3904,
         1007,   102], device='cuda:0')
source:
tensor([  101, 27937,  1012,  5717,  2015,  1006,  1006,  1020,  1010,  1023,
         1010,  2322,  1007,  1007,  1009, 27937,  1012,  9140,  1006,  1031,
         2358,  2099,  2692,  1033,  1007,  1031,  1006,  3904,  1007,  1010,
         1024,  1010,  1006,  3904,  1007,  1033,   102], device='cuda:0')
got:
tensor([27937,  1012,  5717,  2015,  1006,  1006,  2358,  2099,  2692,  1007,
         1007,  1009, 27937,  1012,  9140,  1006,  1031,  2358,  2099,  2487,
         1033,  1007,  1012, 24501,  3270,  5051,  1006,  1006,  1015,  1010,
         1023,  1010,  1015,  1007,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  1033,  1007,   102,  1024,  3413,   102,
          102,   102,   102,   102,   102,   102,   102,   102,  1006,  1031,
         2358,  2099], device='cuda:0')
source:
tensor([  101, 27937,  1012,  5717,  2015,  1006,  1006,  2358,  2099,  2692,
         1007,  1007,  1009, 27937,  1012,  9140,  1006,  1031,  2358,  2099,
         2487,  1033,  1007,  1012, 24501,  3270,  5051,  1006,  1006,  1015,
         1010,  1023,  1010,  1015,  1007,  1007,   102], device='cuda:0')
got:
tensor([ 4949,  1006,  4487,  6593,  1010, 14101,  1006,  1008,  1031,  1031,
         1006,  1047,  1010,  1058,  1007,  2005,  1058,  1999,  3643,  1033,
         2005,  1047,  1010,  3643,  1999,  2862,  1006,  1040,  1012,  5167,
         1006,  1007,  1007,  1033,  1007,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
         3643,  1033,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([  101,  4949,  1006,  4487,  6593,  1010, 14101,  1006,  1008,  1031,
         1031,  1006,  1047,  1010,  1058,  1007,  2005,  1058,  1999,  3643,
         1033,  2005,  1047,  1010,  3643,  1999,  2862,  1006,  1040,  1012,
         5167,  1006,  1007,  1007,  1033,  1007,  1007,   102],
       device='cuda:0')
got:
tensor([13075,  2692,  1012, 14255, 22994,  1035,  2795,  1006,  5950,  1027,
         1005, 13075,  2475,  1005,  1010,  7753,  1027,  1005, 13075,  2487,
         1005,  1010, 12943, 25708,  4609,  2278,  1027,  1005,  2946,  1005,
         1010,  6039,  1035,  3643,  1027,  1014,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
        13075,  2475], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012, 14255, 22994,  1035,  2795,  1006,  5950,
         1027,  1005, 13075,  2475,  1005,  1010,  7753,  1027,  1005, 13075,
         2487,  1005,  1010, 12943, 25708,  4609,  2278,  1027,  1005,  2946,
         1005,  1010,  6039,  1035,  3643,  1027,  1014,  1007,   102],
       device='cuda:0')
got:
tensor([13075,  2692,  1012,  2177,  3762,  1006,  1005,  2358,  2099,  2487,
         1005,  1007,  1031,  1005,  2358,  2099,  2692,  1005,  1033,  1012,
        11307,  1006, 23375,  2358,  2099,  2692,  1024,  2358,  2099,  2692,
         1012,  7680,  1006,  1007,  1027,  1027,  1014,  1007,   102,   102,
          102,   102,   102,  1005,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,  2358,  2099,  2692,  1012,  7680,
         1006,  1007,   102, 13075,  2692,  1012,  2177,  1006,  1015,  1007,
          102,   102,   102, 13075,  2692,  1012,  7680,  1006,  1007,   102,
          102,   102,   102,   102,   102, 13075,  2692,  1012,  2177,   102,
        13075,  2692], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  2177,  3762,  1006,  1005,  2358,  2099,
         2487,  1005,  1007,  1031,  1005,  2358,  2099,  2692,  1005,  1033,
         1012, 11307,  1006, 23375,  2358,  2099,  2692,  1024,  2358,  2099,
         2692,  1012,  7680,  1006,  1007,  1027,  1027,  1014,  1007,   102],
       device='cuda:0')
got:
tensor([ 1031,  1045,  2005,  1045,  1010,  1046,  1999,  4372, 17897, 11657,
         1006,  1031,  1005,  2358,  2099,  2692,  1005,  1010,  1005,  3347,
         1005,  1010,  1005,  8670,  2480,  1005,  1033,  1007,  2065,  1046,
         1027,  1027,  1005,  2358,  2099,  2692,  1005,  1033,   102,   102,
          102,   102,   102,   102,  1013,  1016,  1007,  1033,   102,   102,
          102,   102,   102,   102,   102,   102,  1027,  1027,  1005,  2358,
         2099,  2692,  1005,   102,   102,   102,   102,   102,   102,  1031,
         1005,  2358,  2099,  2692,  1005,  1033,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
         1031,  1014], device='cuda:0')
source:
tensor([  101,  1031,  1045,  2005,  1045,  1010,  1046,  1999,  4372, 17897,
        11657,  1006,  1031,  1005,  2358,  2099,  2692,  1005,  1010,  1005,
         3347,  1005,  1010,  1005,  8670,  2480,  1005,  1033,  1007,  2065,
         1046,  1027,  1027,  1005,  2358,  2099,  2692,  1005,  1033,   102],
       device='cuda:0')
got:
tensor([20014,  1006,  3058,  7292,  1012,  3058,  7292,  1012,  2358, 14536,
         7292,  1006,  1005,  2358,  2099,  2692,  1005,  1010,  1005,  1003,
         1040,  1013,  1003,  1049,  1013,  1003,  1061,  1005,  1007,  1012,
         2358, 12881,  7292,  1006,  1005,  1003,  1055,  1005,  1007,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,  1003,  1055,
         1005,  1007,   102,   102,  1005,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,  1005,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,  1005,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([  101, 20014,  1006,  3058,  7292,  1012,  3058,  7292,  1012,  2358,
        14536,  7292,  1006,  1005,  2358,  2099,  2692,  1005,  1010,  1005,
         1003,  1040,  1013,  1003,  1049,  1013,  1003,  1061,  1005,  1007,
         1012,  2358, 12881,  7292,  1006,  1005,  1003,  1055,  1005,  1007,
         1007,   102], device='cuda:0')
got:
tensor([ 6140,  1006,  9808,  1012,  4831,  2078,  1006,  1005,  2358,  2099,
         2692,  1005,  1007,  1012,  3191,  1006,  1007,  1007,   102,   102,
          102,   102,   102,  1005,  1010,  5371, 18442,  1027,  1052,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  1052,  1012,  3524,  1006,  1007,   102,
          102,   102,   102,  1052,  1027,  1052,  1012,  2485,  1006,  1007,
          102,   102,   102,   102,  1005,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([  101,  6140,  1006,  4942, 21572,  9623,  2015,  1012,  4831,  2078,
         1006,  1005,  2358,  2099,  2692,  1005,  1010,  5806,  1027,  2995,
         1010,  2358, 26797,  2102,  1027,  4942, 21572,  9623,  2015,  1012,
         8667,  1007,  1012,  2358, 26797,  2102,  1012,  3191,  1006,  1007,
         1007,   102], device='cuda:0')
got:
tensor([13075,  2692,  1027,  1031,  1042,  2005,  1042,  1999,  9808,  1012,
         2862,  4305,  2099,  1006,  1005,  2358,  2099,  2692,  1005,  1007,
         2065,  2128,  1012,  2674,  1006,  1005,  1031,  1014,  1011,  1023,
         1033,  1009,  1012,  1008,  1032,  1032,  1012, 16545,  2290,  1005,
         1010,  1042,  1007,  1033,   102,  1042,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
        13075,  2692], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1027,  1031,  1042,  2005,  1042,  1999,  9808,
         1012,  2862,  4305,  2099,  1006,  1005,  2358,  2099,  2692,  1005,
         1007,  2065,  2128,  1012,  2674,  1006,  1005,  1031,  1014,  1011,
         1023,  1033,  1009,  1012,  1008,  1032,  1032,  1012, 16545,  2290,
         1005,  1010,  1042,  1007,  1033,   102], device='cuda:0')
got:
tensor([ 1031,  1063,  1005,  2358,  2099,  2475,  1005,  1024,  1037,  1010,
         1005,  2358,  2099,  2509,  1005,  1024,  1038,  1065,  2005,  1037,
         1010,  1038,  1999, 14101,  1006, 13075,  2692,  1031,  1005,  2358,
         2099,  2475,  1005,  1033,  1010, 13075,  2692,  1031,  1005,  2358,
         2099,  2509,  1005,  1033,  1007,  1033,   102,   102,   102,   102,
          102,   102,   102,  1033,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  1031,  1005,  2358,  2099,  2475,  1005,
         1033,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,  1031,  1005,
         1033,   102], device='cuda:0')
source:
tensor([  101,  1031,  1063,  1005,  2358,  2099,  2475,  1005,  1024,  1037,
         1010,  1005,  2358,  2099,  2509,  1005,  1024,  1038,  1065,  2005,
         1037,  1010,  1038,  1999, 14101,  1006, 13075,  2692,  1031,  1005,
         2358,  2099,  2475,  1005,  1033,  1010, 13075,  2692,  1031,  1005,
         2358,  2099,  2509,  1005,  1033,  1007,  1033,   102],
       device='cuda:0')
got:
tensor([ 6140,  1006,  9808,  1012,  4831,  2078,  1006,  1005,  2358,  2099,
         2692,  1005,  1007,  1012,  3191,  1006,  1007,  1007,   102,   102,
          102,   102,   102,  1005,  1010,  5371, 18442,  1027,  1052,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  1052,  1012,  3524,  1006,  1007,   102,
          102,   102,   102,  1052,  1027,  1052,  1012,  2485,  1006,  1007,
          102,   102,   102,   102,  1005,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([  101,  1052,  1027,  4942, 21572,  9623,  2015,  1012,  4831,  2078,
         1006,  1005,  2358,  2099,  2692,  1005,  1010,  5806,  1027,  2995,
         1010,  2358, 26797,  2102,  1027,  4942, 21572,  9623,  2015,  1012,
         8667,  1010,  2358,  4063,  2099,  1027,  4942, 21572,  9623,  2015,
         1012,  2358, 26797,  2102,  1007,  2005,  2240,  1999,  1052,  1012,
         2358, 26797,  2102,  1012,  3191, 12735,  1006,  1007,  1024,  6140,
         1006,  2240,  1010,  2203,  1027,  1005,  1005,  1007,  2128,  9189,
         2389,  1027,  1052,  1012,  3524,  1006,  1007,   102],
       device='cuda:0')
--------- B -----------
{'intent': {'gloss': ['check', 'if', '7', 'is', 'in', 'var0'], 'words': ['check', 'if', '7', 'is', 'in', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': '7 in var0'}
Generated  translation
7 in var0 
--------- B -----------
{'intent': {'gloss': ['parse', 'string', 'var0', 'to', 'float'], 'words': ['parse', 'string', 'var0', 'to', 'float'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'float(var0)'}
Generated  translation
float ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['exit', 'script'], 'words': ['exit', 'script'], 'after': [' ', '']}, 'slot_map': {}, 'snippet': 'sys.exit()'}
Generated  translation
sys. exit ( ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'the', 'last', 'element', 'in', 'list', 'var0'], 'words': ['remove', 'the', 'last', 'element', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'var0.pop()'}
Generated  translation
var0. pop ( ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'list', 'of', 'lists', 'var0', 'into', 'list', 'of', 'tuples', 'of', 'appropriate', 'elements', 'form', 'nested', 'lists'], 'words': ['convert', 'a', 'list', 'of', 'lists', 'var0', 'into', 'list', 'of', 'tuples', 'of', 'appropriate', 'elements', 'form', 'nested', 'lists'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'zip(*var0)'}
Generated  translation
zip ( * var0 ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'the', 'last', 'element', 'in', 'list', 'var0'], 'words': ['remove', 'the', 'last', 'element', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'del var0[-1]'}
Generated  translation
var0. pop ( ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'the', 'element', 'in', 'list', 'var0', 'with', 'index', '1'], 'words': ['remove', 'the', 'element', 'in', 'list', 'var0', 'with', 'index', '1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'var0.pop(1)'}
Generated  translation
var0. pop ( 1 ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'the', 'element', 'in', 'list', 'var0', 'at', 'index', 'var1'], 'words': ['remove', 'the', 'element', 'in', 'list', 'var0', 'at', 'index', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'index'}, 'snippet': 'del var0[var1]'}
Generated  translation
del var0 [ var1 ] 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'str0', 'is', 'in', 'list', 'var0'], 'words': ['check', 'if', 'str0', 'is', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'a', 'var0': 'a'}, 'snippet': "'var0' in var0"}
Generated  translation
' var0'in var0 
--------- B -----------
{'intent': {'gloss': ['calling', 'an', 'external', 'command', 'str0'], 'words': ['calling', 'an', 'external', 'command', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'ls -l'}, 'snippet': 'from subprocess import call'}
Generated  translation
print ( os. popen ('str0'). read ( ) ) 
--------- B -----------
{'intent': {'gloss': ['print', 'unicode', 'characters', 'in', 'a', 'string', 'str0'], 'words': ['print', 'unicode', 'characters', 'in', 'a', 'string', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'Россия'}, 'snippet': "print('str0')"}
Generated  translation
print ('str0') 
--------- B -----------
{'intent': {'gloss': ['remove', 'the', 'element', 'in', 'list', 'var0', 'at', 'index', 'var1'], 'words': ['remove', 'the', 'element', 'in', 'list', 'var0', 'at', 'index', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'index'}, 'snippet': 'var0.pop(var1)'}
Generated  translation
del var0 [ var1 ] 
--------- B -----------
{'intent': {'gloss': ['get', 'last', 'day', 'of', 'the', 'second', 'month', 'in', 'year', '2012'], 'words': ['get', 'last', 'day', 'of', 'the', 'second', 'month', 'in', 'year', '2012'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'monthrange(2012, 2)'}
Generated  translation
monthrange ( 2012, 2 ) 
--------- B -----------
{'intent': {'gloss': ['sum', 'of', 'all', 'values', 'in', 'a', 'python', 'dict'], 'words': ['sum', 'of', 'all', 'values', 'in', 'a', 'python', 'dict'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'sum(d.values())'}
Generated  translation
sum ( d. values ( ) ) 
--------- B -----------
{'intent': {'gloss': ['execute', 'a', 'command', 'str0', 'in', 'the', 'terminal', 'from', 'a', 'python', 'script'], 'words': ['execute', 'a', 'command', 'str0', 'in', 'the', 'terminal', 'from', 'a', 'python', 'script'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'command'}, 'snippet': 'os.system(str0)'}
Generated  translation
os. system ( str0 ) 
--------- B -----------
{'intent': {'gloss': ['request', 'http', 'url', 'var0'], 'words': ['request', 'http', 'url', 'var0'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {'var0': 'url'}, 'snippet': 'r = requests.get(var0)'}
Generated  translation
r = requests. get ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'dictionary', 'var0', 'by', 'its', 'values'], 'words': ['sort', 'a', 'dictionary', 'var0', 'by', 'its', 'values'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'data'}, 'snippet': 'sorted(var0.values())'}
Generated  translation
sorted ( var0. values ( ) ) 
--------- B -----------
{'intent': {'gloss': ['throw', 'an', 'exception', 'str0'], 'words': ['throw', 'an', 'exception', 'str0'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {'str0': 'i know python!'}, 'snippet': "raise exception('str0')"}
Generated  translation
raise exception ('str0') 
--------- B -----------
{'intent': {'gloss': ['manually', 'throw', 'an', 'exception', 'str0'], 'words': ['manually', 'throw', 'an', 'exception', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'i know python!'}, 'snippet': "raise exception('str0')"}
Generated  translation
raise exception ('str0') 
--------- B -----------
{'intent': {'gloss': ['throw', 'an', 'exception', 'with', 'message', 'str0'], 'words': ['throw', 'an', 'exception', 'with', 'message', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'this is the exception you expect to handle'}, 'snippet': "raise exception('str0')"}
Generated  translation
raise exception ('str0') 
--------- B -----------
{'intent': {'gloss': ['sum', 'of', 'all', 'values', 'in', 'a', 'python', 'dict', 'var0'], 'words': ['sum', 'of', 'all', 'values', 'in', 'a', 'python', 'dict', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'd'}, 'snippet': 'sum(var0.values())'}
Generated  translation
sum ( var0. values ( ) ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'str0', 'in', 'descending', 'order', '.'], 'words': ['sort', 'a', 'list', 'str0', 'in', 'descending', 'order', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'lst'}, 'snippet': 'sorted(str0, reverse=true)'}
Generated  translation
sorted ( str0, reverse = true ) 
--------- B -----------
{'intent': {'gloss': ['return', 'http', 'status', 'code', '204', 'from', 'a', 'django', 'view'], 'words': ['return', 'http', 'status', 'code', '204', 'from', 'a', 'django', 'view'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'return httpresponse(status=204)'}
Generated  translation
return httpresponse ( status = 204 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'current', 'url', 'in', 'selenium', 'webdriver', 'var0'], 'words': ['get', 'current', 'url', 'in', 'selenium', 'webdriver', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'browser'}, 'snippet': 'print(var0.current_url)'}
Generated  translation
print ( var0. current _ url ) 
--------- B -----------
{'intent': {'gloss': ['get', 'domain', '/', 'host', 'name', 'from', 'request', 'object', 'in', 'django'], 'words': ['get', 'domain', '/', 'host', 'name', 'from', 'request', 'object', 'in', 'django'], 'after': [' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "request.meta['http_host']"}
Generated  translation
request. meta ['http _ host'] 
--------- B -----------
{'intent': {'gloss': ['get', 'last', 'day', 'of', 'the', 'first', 'month', 'in', '2002'], 'words': ['get', 'last', 'day', 'of', 'the', 'first', 'month', 'in', '2002'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'calendar.monthrange(2002, 1)'}
Generated  translation
calendar. monthrange ( 2002, 1 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'last', 'day', 'of', 'the', 'second', 'month', 'in', '2002'], 'words': ['get', 'last', 'day', 'of', 'the', 'second', 'month', 'in', '2002'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'calendar.monthrange(2008, 2)'}
Generated  translation
calendar. monthrange ( 2008, 2 ) 
--------- B -----------
{'intent': {'gloss': ['calling', 'an', 'external', 'command', 'str0'], 'words': ['calling', 'an', 'external', 'command', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'some_command with args'}, 'snippet': "os.system('str0')"}
Generated  translation
print ( os. popen ('str0'). read ( ) ) 
--------- B -----------
{'intent': {'gloss': ['calling', 'an', 'external', 'command', 'str0'], 'words': ['calling', 'an', 'external', 'command', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'some_command < input_file | another_command > output_file'}, 'snippet': "os.system('str0')"}
Generated  translation
print ( os. popen ('str0'). read ( ) ) 
--------- B -----------
{'intent': {'gloss': ['manually', 'throw', '/', 'raise', 'a', 'var0', 'exception', 'with', 'the', 'message', 'str0'], 'words': ['manually', 'throw', '/', 'raise', 'a', 'var0', 'exception', 'with', 'the', 'message', 'str0'], 'after': [' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'valueerror', 'str0': 'a very specific bad thing happened'}, 'snippet': "raise var0('str0')"}
Generated  translation
raise var0 ('str0') 
--------- B -----------
{'intent': {'gloss': ['get', 'http', 'header', 'of', 'the', 'key', 'str0', 'in', 'flask'], 'words': ['get', 'http', 'header', 'of', 'the', 'key', 'str0', 'in', 'flask'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'your-header-name'}, 'snippet': "request.headers['str0']"}
Generated  translation
request. headers ['str0'] 
--------- B -----------
{'intent': {'gloss': ['get', 'last', 'day', 'of', 'the', 'second', 'month', 'in', '2100'], 'words': ['get', 'last', 'day', 'of', 'the', 'second', 'month', 'in', '2100'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'calendar.monthrange(2100, 2)'}
Generated  translation
calendar. monthrange ( 2100, 2 ) 
--------- B -----------
{'intent': {'gloss': ['throw', 'a', 'valueerror', 'with', 'message', 'str0'], 'words': ['throw', 'a', 'valueerror', 'with', 'message', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'represents a hidden bug, do not catch this'}, 'snippet': "raise valueerror('str0')"}
Generated  translation
raise valueerror ('str0') 
--------- B -----------
{'intent': {'gloss': ['throw', 'a', 'value', 'error', 'with', 'message', 'str0', ',', 'str1', ',', 'str2', ',', 'str3'], 'words': ['throw', 'a', 'value', 'error', 'with', 'message', 'str0', ',', 'str1', ',', 'str2', ',', 'str3'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', '', ' ', '']}, 'slot_map': {'str0': 'a very specific bad thing happened', 'str1': 'foo', 'str2': 'bar', 'str3': 'baz'}, 'snippet': "raise valueerror('str0')"}
Generated  translation
raise valueerror ('str0') 
--------- B -----------
{'intent': {'gloss': ['escaping', 'quotes', 'in', 'string'], 'words': ['escaping', 'quotes', 'in', 'string'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'replace(\'"\', \'\\\\"\')'}
Generated  translation
replace ('" ','\ \ "') 
--------- B -----------
{'intent': {'gloss': ['assign', 'value', 'in', 'var0', 'dynamically', 'to', 'class', 'property', 'var1'], 'words': ['assign', 'value', 'in', 'var0', 'dynamically', 'to', 'class', 'property', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'group', 'var1': 'attr'}, 'snippet': 'setattr(self, var1, var0)'}
Generated  translation
setattr ( self, var1, var0 ) 
--------- B -----------
{'intent': {'gloss': ['open', 'a', 'file', 'str0', 'under', 'unix'], 'words': ['open', 'a', 'file', 'str0', 'under', 'unix'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '$file'}, 'snippet': 'os.system(\'start "$file"\')'}
Generated  translation
os. system ('start " $ file "') 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'list', 'with', 'the', 'highest', 'sum', 'value', 'in', 'list', 'var0'], 'words': ['get', 'the', 'list', 'with', 'the', 'highest', 'sum', 'value', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'print(max(var0, key=sum))'}
Generated  translation
print ( max ( var0, key = sum ) ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'dataframe', 'var0', 'to', 'list', 'of', 'dictionaries', 'including', 'the', 'index', 'values'], 'words': ['convert', 'dataframe', 'var0', 'to', 'list', 'of', 'dictionaries', 'including', 'the', 'index', 'values'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': "var0.to_dict('index')"}
Generated  translation
var0. to _ dict ('index') 
--------- B -----------
{'intent': {'gloss': ['create', 'list', 'of', 'dictionaries', 'from', 'pandas', 'dataframe', 'var0'], 'words': ['create', 'list', 'of', 'dictionaries', 'from', 'pandas', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': "var0.to_dict('records')"}
Generated  translation
var0. to _ dict ('records') 
--------- B -----------
{'intent': {'gloss': ['sort', 'dict', 'var0', 'by', 'value'], 'words': ['sort', 'dict', 'var0', 'by', 'value'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'data'}, 'snippet': 'sorted(var0, key=var0.get)'}
Generated  translation
sorted ( var0, key = var0. get ) 
--------- B -----------
{'intent': {'gloss': ['throw', 'a', 'runtime', 'error', 'with', 'message', 'str0'], 'words': ['throw', 'a', 'runtime', 'error', 'with', 'message', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'specific message'}, 'snippet': "raise runtimeerror('str0')"}
Generated  translation
raise runtimeerror ('str0') 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'list', 'of', 'all', 'values', 'in', 'column', 'var0', 'in', 'pandas', 'data', 'frame', 'var1'], 'words': ['get', 'a', 'list', 'of', 'all', 'values', 'in', 'column', 'var0', 'in', 'pandas', 'data', 'frame', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'df'}, 'snippet': "var1['var0'].tolist()"}
Generated  translation
var1 ['var0']. tolist ( ) 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'with', 'delimiter', 'str0', 'or', 'delimiter', 'str1'], 'words': ['split', 'string', 'var0', 'with', 'delimiter', 'str0', 'or', 'delimiter', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'str', 'str0': ';', 'str1': ','}, 'snippet': "re.split('; |, ', var0)"}
Generated  translation
re. split ('; |, ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['calling', 'an', 'external', 'command', 'str0'], 'words': ['calling', 'an', 'external', 'command', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'some_command with args'}, 'snippet': "stream = os.popen('str0')"}
Generated  translation
print ( os. popen ('str0'). read ( ) ) 
--------- B -----------
{'intent': {'gloss': ['set', 'columns', 'str0', 'as', 'indexes', 'in', 'dataframe', 'var0'], 'words': ['set', 'columns', 'str0', 'as', 'indexes', 'in', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "['race_date', 'track_code', 'race_number']", 'var0': 'rdata', '[ str0 ]': "['race_date', 'track_code', 'race_number']"}, 'snippet': 'var0.set_index([ str0 ])'}
Generated  translation
var0. set _ index ( [ str0 ] ) 
--------- B -----------
{'intent': {'gloss': ['throw', 'an', 'assertion', 'error', 'with', 'message', 'str0', ',', 'distance'], 'words': ['throw', 'an', 'assertion', 'error', 'with', 'message', 'str0', ',', 'distance'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '']}, 'slot_map': {'str0': "unexpected value of 'distance'!"}, 'snippet': "raise assertionerror('str0', distance)"}
Generated  translation
raise assertionerror ('str0 ', distance ) 
--------- B -----------
{'intent': {'gloss': ['post', 'request', 'url', 'var0', 'with', 'parameters', 'var1'], 'words': ['post', 'request', 'url', 'var0', 'with', 'parameters', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'url', 'var1': 'payload'}, 'snippet': 'r = requests.post(var0, data=var1)'}
Generated  translation
r = requests. post ( var0, data = var1 ) 
--------- B -----------
{'intent': {'gloss': ['open', 'a', 'file', 'str0', 'in', 'binary', 'write', 'mode'], 'words': ['open', 'a', 'file', 'str0', 'in', 'binary', 'write', 'mode'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '/home/user/test/wsservice/data.pkl'}, 'snippet': "output = open('str0', 'wb')"}
Generated  translation
output = open ('str0 ','wb') 
--------- B -----------
{'intent': {'gloss': ['calling', 'an', 'external', 'command', 'str0'], 'words': ['calling', 'an', 'external', 'command', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'ls -l'}, 'snippet': "call(['ls', '-l'])"}
Generated  translation
print ( os. popen ('str0'). read ( ) ) 
--------- B -----------
{'intent': {'gloss': ['request', 'http', 'url', 'var0', 'with', 'parameters', 'var1'], 'words': ['request', 'http', 'url', 'var0', 'with', 'parameters', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'url', 'var1': 'payload'}, 'snippet': 'r = requests.get(var0, params=var1)'}
Generated  translation
r = requests. get ( var0, params = var1 ) 
--------- B -----------
{'intent': {'gloss': ['kill', 'a', 'process', 'with', 'id', 'str0'], 'words': ['kill', 'a', 'process', 'with', 'id', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'process.pid'}, 'snippet': 'os.kill(process.pid, signal.sigkill)'}
Generated  translation
os. kill ( process. pid, signal. sigkill ) 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'string', 'var0', 'with', 'new', 'line', 'character'], 'words': ['split', 'a', 'string', 'var0', 'with', 'new', 'line', 'character'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': "var0.split('\\n')[:-1]"}
Generated  translation
var0. split ('\ n') [ : - 1 ] 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'str0', 'encoded', 'string', 'var0', 'into', 'a', 'list', 'of', 'characters'], 'words': ['split', 'a', 'str0', 'encoded', 'string', 'var0', 'into', 'a', 'list', 'of', 'characters'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'utf-8', 'var0': 'stru'}, 'snippet': "list(var0.decode('str0'))"}
Generated  translation
list ( var0. decode ('str0') ) 
--------- B -----------
{'intent': {'gloss': ['erase', 'the', 'contents', 'of', 'a', 'file', 'var0'], 'words': ['erase', 'the', 'contents', 'of', 'a', 'file', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'filename'}, 'snippet': "open('var0', 'w').close()"}
Generated  translation
open ('var0 ','w'). close ( ) 
--------- B -----------
{'intent': {'gloss': ['replace', 'string', 'str0', 'in', 'string', 'var0', 'with', 'character', 'str1'], 'words': ['replace', 'string', 'str0', 'in', 'string', 'var0', 'with', 'character', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'and', 'var0': 'stuff', 'str1': '/'}, 'snippet': "var0.replace(' and ', 'str1')"}
Generated  translation
var0. replace ('and ','str1') 
--------- B -----------
{'intent': {'gloss': ['subtract', '5', 'hours', 'from', 'the', 'time', 'object', 'var0'], 'words': ['subtract', '5', 'hours', 'from', 'the', 'time', 'object', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'dt'}, 'snippet': 'var0 -= datetime.timedelta(hours=5)'}
Generated  translation
var0 - = datetime. timedelta ( hours = 5 ) 
--------- B -----------
{'intent': {'gloss': ['encode', 'string', 'var0', 'using', 'hex', 'str0', 'encoding'], 'words': ['encode', 'string', 'var0', 'using', 'hex', 'str0', 'encoding'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'data', 'str0': 'hex'}, 'snippet': "print(var0.encode('str0'))"}
Generated  translation
print ( var0. encode ('str0') ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'list', 'of', 'strings', 'var0', 'to', 'list', 'of', 'integers'], 'words': ['convert', 'a', 'list', 'of', 'strings', 'var0', 'to', 'list', 'of', 'integers'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'lst'}, 'snippet': '[map(int, sublist) for sublist in var0]'}
Generated  translation
[ map ( int, sublist ) for sublist in var0 ] 
--------- B -----------
{'intent': {'gloss': ['get', 'last', 'day', 'of', 'the', 'month', 'var0', 'in', 'year', 'var1'], 'words': ['get', 'last', 'day', 'of', 'the', 'month', 'var0', 'in', 'year', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'month', 'var1': 'year'}, 'snippet': 'calendar.monthrange(var1, var0)[1]'}
Generated  translation
calendar. monthrange ( var1, var0 ) [ 1 ] 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'tuples', 'var0', 'by', 'second', 'parameter', 'in', 'the', 'tuple'], 'words': ['sort', 'a', 'list', 'of', 'tuples', 'var0', 'by', 'second', 'parameter', 'in', 'the', 'tuple'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'my_list'}, 'snippet': 'var0.sort(key=lambda x: x[1])'}
Generated  translation
var0. sort ( key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['unpack', 'hexadecimal', 'string', 'var0', 'to', 'a', 'list', 'of', 'integer', 'values'], 'words': ['unpack', 'hexadecimal', 'string', 'var0', 'to', 'a', 'list', 'of', 'integer', 'values'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': "struct.unpack('11b', var0)"}
Generated  translation
struct. unpack ('11b ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['generate', 'all', 'permutations', 'of', 'a', 'list', 'str0'], 'words': ['generate', 'all', 'permutations', 'of', 'a', 'list', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '[1, 2, 3]', '[ str0 ]': '[1, 2, 3]'}, 'snippet': 'itertools.permutations([ str0 ])'}
Generated  translation
itertools. permutations ( [ str0 ] ) 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'str0', 'using', 'string', 'str1'], 'words': ['split', 'string', 'str0', 'using', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'happy_hats_for_cats', 'str1': '_for_'}, 'snippet': "re.split('str1', 'str0')"}
Generated  translation
re. split ('str1 ','str0') 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'object', 'var0', 'has', 'property', 'str0'], 'words': ['check', 'if', 'object', 'var0', 'has', 'property', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'str0': 'property'}, 'snippet': "if hasattr(var0, 'str0'):\n    pass"}
Generated  translation
if hasattr ( var0,'str0') : pass 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'object', 'var0', 'has', 'property', 'str0'], 'words': ['check', 'if', 'object', 'var0', 'has', 'property', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'str0': 'property'}, 'snippet': "if hasattr(var0, 'str0'):\n    pass"}
Generated  translation
if hasattr ( var0,'str0') : pass 
--------- B -----------
{'intent': {'gloss': ['django', 'jinja', 'slice', 'list', 'var0', 'by', 'str0'], 'words': ['django', 'jinja', 'slice', 'list', 'var0', 'by', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylist', 'str0': '3:8'}, 'snippet': "{{(var0 | slice): 'str0'}}"}
Generated  translation
{ { ( var0 | slice ) :'str0'} } 
--------- B -----------
{'intent': {'gloss': ['pandas', 'dataframe', 'var0', 'column', 'str0', 'to', 'list'], 'words': ['pandas', 'dataframe', 'var0', 'column', 'str0', 'to', 'list'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'a'}, 'snippet': "var0['str0'].values.tolist()"}
Generated  translation
var0 ['str0']. values. tolist ( ) 
--------- B -----------
{'intent': {'gloss': ['print', 'a', 'celsius', 'symbol', 'on', 'x', 'axis', 'of', 'a', 'plot', 'var0'], 'words': ['print', 'a', 'celsius', 'symbol', 'on', 'x', 'axis', 'of', 'a', 'plot', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'ax'}, 'snippet': "var0.set_xlabel('temperature (℃)')"}
Generated  translation
var0. set _ xlabel ('temperature ( [UNK] )') 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'using', 'new', '-', 'line', 'character', 'str0', 'as', 'separator'], 'words': ['split', 'string', 'var0', 'using', 'new', '-', 'line', 'character', 'str0', 'as', 'separator'], 'after': [' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'str0': '\n'}, 'snippet': "var0.rstrip().split('str0')"}
Generated  translation
var0. rstrip ( ). split ('str0') 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'unicode', 'string', 'var0', 'to', 'a', 'str0', 'string'], 'words': ['convert', 'a', 'unicode', 'string', 'var0', 'to', 'a', 'str0', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'str0': 'ascii'}, 'snippet': "var0.encode('str0', 'ignore')"}
Generated  translation
unicodedata. normalize ('nfkd ', var0 ). encode ('str0 ','ignore') 
--------- B -----------
{'intent': {'gloss': ['print', 'str0', 'plus', 'unicode', 'character', 'ustr1'], 'words': ['print', 'str0', 'plus', 'unicode', 'character', 'ustr1'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'here is your checkmark:', 'str1': '✓'}, 'snippet': "print('here is your checkmark: ' + 'str1')"}
Generated  translation
print ('here is your checkmark :'+'str1') 
--------- B -----------
{'intent': {'gloss': ['determine', 'the', 'byte', 'length', 'of', 'a', 'utf', '-', '8', 'encoded', 'string', 'var0'], 'words': ['determine', 'the', 'byte', 'length', 'of', 'a', 'utf', '-', '8', 'encoded', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': "return len(var0.encode('utf-8'))"}
Generated  translation
return len ( var0. encode ('utf - 8') ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'list', 'of', 'lists', 'var0', 'into', 'a', 'list', 'of', 'strings', 'keeping', 'empty', 'sub', '-', 'lists', 'as', 'empty', 'string', 'str0'], 'words': ['convert', 'a', 'list', 'of', 'lists', 'var0', 'into', 'a', 'list', 'of', 'strings', 'keeping', 'empty', 'sub', '-', 'lists', 'as', 'empty', 'string', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list_of_lists', 'str0': ''}, 'snippet': "['str0'.join(l) for l in var0]"}
Generated  translation
['str0 '. join ( l ) for l in var0 ] 
--------- B -----------
{'intent': {'gloss': ['lookup', 'an', 'attribute', 'in', 'any', 'scope', 'by', 'name', 'str0'], 'words': ['lookup', 'an', 'attribute', 'in', 'any', 'scope', 'by', 'name', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'range'}, 'snippet': "getattr(__builtins__, 'str0')"}
Generated  translation
getattr ( _ _ builtins _ _,'str0') 
--------- B -----------
{'intent': {'gloss': ['how', 'to', 'erase', 'the', 'file', 'contents', 'of', 'text', 'file', 'in', 'python', '?'], 'words': ['how', 'to', 'erase', 'the', 'file', 'contents', 'of', 'text', 'file', 'in', 'python', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "open('file.txt', 'w').close()"}
Generated  translation
open ('file. txt ','w'). close ( ) 
--------- B -----------
{'intent': {'gloss': ['get', 'all', 'the', 'items', 'from', 'a', 'list', 'of', 'tuple', 'str0', 'where', 'second', 'item', 'in', 'tuple', 'is', 'str1', '.'], 'words': ['get', 'all', 'the', 'items', 'from', 'a', 'list', 'of', 'tuple', 'str0', 'where', 'second', 'item', 'in', 'tuple', 'is', 'str1', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'l', 'str1': '1'}, 'snippet': '[x for x in str0 if x[1] == 1]'}
Generated  translation
[ x for x in str0 if x [ 1 ] = = 1 ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'python', 'dictionary', 'var0', 'to', 'json', 'array'], 'words': ['convert', 'python', 'dictionary', 'var0', 'to', 'json', 'array'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'your_data'}, 'snippet': 'json.dumps(var0, ensure_ascii=false)'}
Generated  translation
json. dumps ( var0, ensure _ ascii = false ) 
--------- B -----------
{'intent': {'gloss': ['change', 'the', 'case', 'of', 'the', 'first', 'letter', 'in', 'string', 'var0'], 'words': ['change', 'the', 'case', 'of', 'the', 'first', 'letter', 'in', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': 'return var0[0].upper() + var0[1:]'}
Generated  translation
return var0 [ 0 ]. upper ( ) + var0 [ 1 : ] 
--------- B -----------
{'intent': {'gloss': ['zip', 'keys', 'with', 'individual', 'values', 'in', 'lists', 'var0', 'and', 'var1'], 'words': ['zip', 'keys', 'with', 'individual', 'values', 'in', 'lists', 'var0', 'and', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'k', 'var1': 'v'}, 'snippet': '[dict(zip(var0, x)) for x in var1]'}
Generated  translation
[ dict ( zip ( var0, x ) ) for x in var1 ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'var0', 'milliseconds', 'to', 'a', 'datetime', 'object'], 'words': ['convert', 'var0', 'milliseconds', 'to', 'a', 'datetime', 'object'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'ms'}, 'snippet': 'datetime.datetime.fromtimestamp(var0 / 1000.0)'}
Generated  translation
datetime. datetime. fromtimestamp ( var0 / 1000. 0 ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'list', 'var0', 'by', 'keys', 'value', 'str0'], 'words': ['sort', 'list', 'var0', 'by', 'keys', 'value', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'results', 'str0': 'year'}, 'snippet': "sorted(var0, key=itemgetter('str0'))"}
Generated  translation
sorted ( var0, key = itemgetter ('str0') ) 
--------- B -----------
{'intent': {'gloss': ['filter', 'model', 'str0', 'where', 'str1', 'is', 'not', 'equal', 'to', '3', 'in', 'django'], 'words': ['filter', 'model', 'str0', 'where', 'str1', 'is', 'not', 'equal', 'to', '3', 'in', 'django'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'entry', 'str1': 'id'}, 'snippet': 'str0.objects.filter(~q(str1=3))'}
Generated  translation
str0. objects. filter ( ~ q ( str1 = 3 ) ) 
--------- B -----------
{'intent': {'gloss': ['subtract', '1', 'hour', 'and', '10', 'minutes', 'from', 'time', 'object', 'var0'], 'words': ['subtract', '1', 'hour', 'and', '10', 'minutes', 'from', 'time', 'object', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 't'}, 'snippet': 'var0 - datetime.timedelta(hours=1, minutes=10)'}
Generated  translation
var0 - datetime. timedelta ( hours = 1, minutes = 10 ) 
--------- B -----------
{'intent': {'gloss': ['calling', 'an', 'external', 'command', 'str0'], 'words': ['calling', 'an', 'external', 'command', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'echo hello world'}, 'snippet': "print(os.popen('str0').read())"}
Generated  translation
print ( os. popen ('str0'). read ( ) ) 
--------- B -----------
{'intent': {'gloss': ['recursively', 'go', 'through', 'all', 'subdirectories', 'and', 'files', 'in', 'var0'], 'words': ['recursively', 'go', 'through', 'all', 'subdirectories', 'and', 'files', 'in', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'rootdir'}, 'snippet': 'for root, subfolders, files in os.walk(var0):\n    pass'}
Generated  translation
for root, subfolders, files in os. walk ( var0 ) : pass 
--------- B -----------
{'intent': {'gloss': ['mysql', 'execute', 'query', 'str0', 'with', 'parameters', 'var0', 'and', 'var1'], 'words': ['mysql', 'execute', 'query', 'str0', 'with', 'parameters', 'var0', 'and', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'select * from foo where bar = %s and baz = %s', 'var0': 'param1', 'var1': 'param2'}, 'snippet': "c.execute('str0', (var0, var1))"}
Generated  translation
c. execute ('str0 ', ( var0, var1 ) ) 
--------- B -----------
{'intent': {'gloss': ['parse', 'string', 'var0', 'to', 'float', 'or', 'int'], 'words': ['parse', 'string', 'var0', 'to', 'float', 'or', 'int'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': 'try:\n    return int(var0)\nexcept valueerror:\n    return float(var0)'}
Generated  translation
try : return int ( var0 ) except valueerror : return float ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'value', 'of', 'attribute', 'str0', 'of', 'object', 'var0', 'with', 'default', 'value', 'str1'], 'words': ['get', 'the', 'value', 'of', 'attribute', 'str0', 'of', 'object', 'var0', 'with', 'default', 'value', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'property', 'var0': 'a', 'str1': 'default value'}, 'snippet': "getattr(var0, 'str0', 'str1')"}
Generated  translation
getattr ( var0,'str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'largest', 'index', 'of', 'the', 'last', 'occurrence', 'of', 'characters', 'str0', 'in', 'string', 'var0'], 'words': ['get', 'the', 'largest', 'index', 'of', 'the', 'last', 'occurrence', 'of', 'characters', 'str0', 'in', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '([{', 'var0': 'test_string'}, 'snippet': "max(var0.rfind(i) for i in 'str0')"}
Generated  translation
max ( var0. rfind ( i ) for i in'str0') 
--------- B -----------
{'intent': {'gloss': ['get', 'data', 'of', 'columns', 'with', 'null', 'values', 'in', 'dataframe', 'var0'], 'words': ['get', 'data', 'of', 'columns', 'with', 'null', 'values', 'in', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': 'var0[pd.isnull(var0).any(axis=1)]'}
Generated  translation
var0 [ pd. isnull ( var0 ). any ( axis = 1 ) ] 
--------- B -----------
{'intent': {'gloss': ['delete', 'third', 'row', 'in', 'a', 'numpy', 'array', 'var0'], 'words': ['delete', 'third', 'row', 'in', 'a', 'numpy', 'array', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'var0 = numpy.delete(var0, 2, axis=1)'}
Generated  translation
var0 = numpy. delete ( var0, 2, axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['delete', 'first', 'row', 'of', 'array', 'var0'], 'words': ['delete', 'first', 'row', 'of', 'array', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'var0 = numpy.delete(var0, 0, axis=0)'}
Generated  translation
var0 = numpy. delete ( var0, 0, axis = 0 ) 
--------- B -----------
{'intent': {'gloss': ['how', 'can', 'i', 'launch', 'an', 'instance', 'of', 'an', 'application', 'using', 'python', '?'], 'words': ['how', 'can', 'i', 'launch', 'an', 'instance', 'of', 'an', 'application', 'using', 'python', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "os.system('start excel.exe <path/to/file>')"}
Generated  translation
os. system ('start excel. exe < path / to / file >') 
--------- B -----------
{'intent': {'gloss': ['sum', 'the', 'length', 'of', 'lists', 'in', 'list', 'var0', 'that', 'are', 'more', 'than', '1', 'item', 'in', 'length'], 'words': ['sum', 'the', 'length', 'of', 'lists', 'in', 'list', 'var0', 'that', 'are', 'more', 'than', '1', 'item', 'in', 'length'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'sum(len(y) for y in var0 if len(y) > 1)'}
Generated  translation
sum ( len ( y ) for y in var0 if len ( y ) > 1 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'utf', '-', '8', 'with', 'bom', 'string', 'var0', 'to', 'utf', '-', '8', 'with', 'no', 'bom', 'var1'], 'words': ['convert', 'utf', '-', '8', 'with', 'bom', 'string', 'var0', 'to', 'utf', '-', '8', 'with', 'no', 'bom', 'var1'], 'after': [' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's', 'var1': 'u'}, 'snippet': "var1 = var0.decode('utf-8-sig')"}
Generated  translation
var1 = var0. decode ('utf - 8 - sig') 
--------- B -----------
{'intent': {'gloss': ['shutdown', 'a', 'computer', 'using', 'subprocess'], 'words': ['shutdown', 'a', 'computer', 'using', 'subprocess'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "subprocess.call(['shutdown', '/s'])"}
Generated  translation
subprocess. call ( ['shutdown ','/ s'] ) 
--------- B -----------
{'intent': {'gloss': ['abort', 'a', 'computer', 'shutdown', 'using', 'subprocess'], 'words': ['abort', 'a', 'computer', 'shutdown', 'using', 'subprocess'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "subprocess.call(['shutdown', '/a '])"}
Generated  translation
subprocess. call ( ['shutdown ','/ a'] ) 
--------- B -----------
{'intent': {'gloss': ['logoff', 'computer', 'having', 'windows', 'operating', 'system', 'using', 'python'], 'words': ['logoff', 'computer', 'having', 'windows', 'operating', 'system', 'using', 'python'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "subprocess.call(['shutdown', '/l '])"}
Generated  translation
subprocess. call ( ['shutdown ','/ l'] ) 
--------- B -----------
{'intent': {'gloss': ['shutdown', 'and', 'restart', 'a', 'computer', 'running', 'windows', 'from', 'script'], 'words': ['shutdown', 'and', 'restart', 'a', 'computer', 'running', 'windows', 'from', 'script'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "subprocess.call(['shutdown', '/r'])"}
Generated  translation
subprocess. call ( ['shutdown ','/ r'] ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'strings', 'in', 'list', '-', 'of', '-', 'lists', 'var0', 'to', 'ints'], 'words': ['convert', 'strings', 'in', 'list', '-', 'of', '-', 'lists', 'var0', 'to', 'ints'], 'after': [' ', ' ', ' ', '', '', '', '', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'lst'}, 'snippet': '[[int(x) for x in sublist] for sublist in var0]'}
Generated  translation
[ [ int ( x ) for x in sublist ] for sublist in var0 ] 
--------- B -----------
{'intent': {'gloss': ['if', 'selenium', 'textarea', 'element', 'var0', 'is', 'not', 'empty', ',', 'clear', 'the', 'field'], 'words': ['if', 'selenium', 'textarea', 'element', 'var0', 'is', 'not', 'empty', ',', 'clear', 'the', 'field'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'foo'}, 'snippet': "driver.find_element_by_id('var0').clear()"}
Generated  translation
driver. find _ element _ by _ id ('var0'). clear ( ) 
--------- B -----------
{'intent': {'gloss': ['join', 'list', 'of', 'numbers', 'str0', 'to', 'string', 'of', 'numbers', '.'], 'words': ['join', 'list', 'of', 'numbers', 'str0', 'to', 'string', 'of', 'numbers', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': '[1,2,3,4]', '[ str0 ]': '[1,2,3,4]'}, 'snippet': '"""""".join([1, 2, 3, 4])'}
Generated  translation
" " " " " ". join ( [ 1, 2, 3, 4 ] ) 
--------- B -----------
{'intent': {'gloss': ['parse', 'a', 'file', 'str0', 'using', 'expat', 'parsing', 'in', 'python', '3'], 'words': ['parse', 'a', 'file', 'str0', 'using', 'expat', 'parsing', 'in', 'python', '3'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'sample.xml'}, 'snippet': "parser.parsefile(open('str0', 'rb'))"}
Generated  translation
parser. parsefile ( open ('str0 ','rb') ) 
--------- B -----------
{'intent': {'gloss': ['update', 'the', 'dictionary', 'var0', 'with', 'dynamic', 'keys', 'var1', 'and', 'values', 'with', 'key', 'str0', 'from', 'dictionary', 'var2'], 'words': ['update', 'the', 'dictionary', 'var0', 'with', 'dynamic', 'keys', 'var1', 'and', 'values', 'with', 'key', 'str0', 'from', 'dictionary', 'var2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mydic', 'var1': 'i', 'str0': 'name', 'var2': 'o'}, 'snippet': "var0.update({var1: var2['str0']})"}
Generated  translation
var0. update ( { var1 : var2 ['str0'] } ) 
--------- B -----------
{'intent': {'gloss': ['divide', 'the', 'members', 'of', 'a', 'list', 'var0', 'by', 'the', 'corresponding', 'members', 'of', 'another', 'list', 'var1'], 'words': ['divide', 'the', 'members', 'of', 'a', 'list', 'var0', 'by', 'the', 'corresponding', 'members', 'of', 'another', 'list', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'conversions', 'var1': 'trials'}, 'snippet': '[(c / t) for c, t in zip(var0, var1)]'}
Generated  translation
[ ( c / t ) for c, t in zip ( var0, var1 ) ] 
--------- B -----------
{'intent': {'gloss': ['get', 'index', 'of', 'elements', 'in', 'array', 'var0', 'that', 'occur', 'in', 'another', 'array', 'var1'], 'words': ['get', 'index', 'of', 'elements', 'in', 'array', 'var0', 'that', 'occur', 'in', 'another', 'array', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'b'}, 'snippet': 'np.where(np.in1d(var0, var1))[0]'}
Generated  translation
np. where ( np. in1d ( var0, var1 ) ) [ 0 ] 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'based', 'on', 'white', 'spaces'], 'words': ['split', 'string', 'var0', 'based', 'on', 'white', 'spaces'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': "re.findall('\\\\s+|\\\\s+', var0)"}
Generated  translation
re. findall ('\ \ s + | \ \ s + ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['display', 'first', '5', 'characters', 'of', 'string', 'str0'], 'words': ['display', 'first', '5', 'characters', 'of', 'string', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'aaabbbccc'}, 'snippet': '"""{:.5}""".format(\'str0\')'}
Generated  translation
" " " { :. 5 } " " ". format ('str0') 
--------- B -----------
{'intent': {'gloss': ['substitute', 'occurrences', 'of', 'unicode', 'regex', 'pattern', 'ustr0', 'with', 'empty', 'string', 'str1', 'in', 'string', 'var0'], 'words': ['substitute', 'occurrences', 'of', 'unicode', 'regex', 'pattern', 'ustr0', 'with', 'empty', 'string', 'str1', 'in', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '\\p{p}+', 'str1': '', 'var0': 'text'}, 'snippet': "return re.sub('str0', 'str1', var0)"}
Generated  translation
return re. sub ('str0 ','str1 ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['clear', 'text', 'from', 'textarea', 'str0', 'with', 'selenium'], 'words': ['clear', 'text', 'from', 'textarea', 'str0', 'with', 'selenium'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'foo'}, 'snippet': "driver.find_element_by_id('str0').clear()"}
Generated  translation
driver. find _ element _ by _ id ('str0'). clear ( ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'all', 'string', 'elements', 'in', 'list', 'var0', 'are', 'upper', '-', 'cased'], 'words': ['check', 'if', 'all', 'string', 'elements', 'in', 'list', 'var0', 'are', 'upper', '-', 'cased'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '']}, 'slot_map': {'var0': 'words'}, 'snippet': 'print(all(word[0].isupper() for word in var0))'}
Generated  translation
print ( all ( word [ 0 ]. isupper ( ) for word in var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['change', 'flask', 'security', 'register', 'url', 'to', 'str0'], 'words': ['change', 'flask', 'security', 'register', 'url', 'to', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '/create_account'}, 'snippet': "app.config['security_register_url'] = 'str0'"}
Generated  translation
app. config ['security _ register _ url'] ='str0'
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'average', 'values', 'from', 'two', 'numpy', 'arrays', 'var0', 'and', 'var1'], 'words': ['get', 'the', 'average', 'values', 'from', 'two', 'numpy', 'arrays', 'var0', 'and', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'old_set', 'var1': 'new_set'}, 'snippet': 'np.mean(np.array([var0, var1]), axis=0)'}
Generated  translation
np. mean ( np. array ( [ var0, var1 ] ), axis = 0 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'pandas', 'group', 'by', 'object', 'to', 'multi', '-', 'indexed', 'dataframe', 'with', 'indices', 'str0', 'and', 'str1'], 'words': ['convert', 'pandas', 'group', 'by', 'object', 'to', 'multi', '-', 'indexed', 'dataframe', 'with', 'indices', 'str0', 'and', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'name', 'str1': 'destination'}, 'snippet': "df.set_index(['str0', 'str1'])"}
Generated  translation
df. set _ index ( ['str0 ','str1'] ) 
--------- B -----------
{'intent': {'gloss': ['print', 'list', 'of', 'items', 'var0'], 'words': ['print', 'list', 'of', 'items', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylist'}, 'snippet': "print('\\n'.join(str(p) for p in var0))"}
Generated  translation
print ('\ n '. join ( str ( p ) for p in var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'dict', 'by', 'value', 'python'], 'words': ['sort', 'dict', 'by', 'value', 'python'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'sorted(list(data.items()), key=lambda x: x[1])'}
Generated  translation
sorted ( list ( data. items ( ) ), key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['calling', 'an', 'external', 'command', 'str0'], 'words': ['calling', 'an', 'external', 'command', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'echo hello world'}, 'snippet': "return_code = subprocess.call('str0', shell=true)"}
Generated  translation
print ( os. popen ('str0'). read ( ) ) 
--------- B -----------
{'intent': {'gloss': ['match', 'zero', '-', 'or', '-', 'more', 'instances', 'of', 'lower', 'case', 'alphabet', 'characters', 'in', 'a', 'string', 'str0'], 'words': ['match', 'zero', '-', 'or', '-', 'more', 'instances', 'of', 'lower', 'case', 'alphabet', 'characters', 'in', 'a', 'string', 'str0'], 'after': [' ', '', '', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'f233op'}, 'snippet': "re.findall('([a-z]*)', 'str0')"}
Generated  translation
re. findall ('( [ a - z ] ) * ','str0') 
--------- B -----------
{'intent': {'gloss': ['match', 'zero', '-', 'or', '-', 'more', 'instances', 'of', 'lower', 'case', 'alphabet', 'characters', 'in', 'a', 'string', 'str0'], 'words': ['match', 'zero', '-', 'or', '-', 'more', 'instances', 'of', 'lower', 'case', 'alphabet', 'characters', 'in', 'a', 'string', 'str0'], 'after': [' ', '', '', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'f233op'}, 'snippet': "re.findall('([a-z])*', 'str0')"}
Generated  translation
re. findall ('( [ a - z ] ) * ','str0') 
--------- B -----------
{'intent': {'gloss': ['remove', 'duplicates', 'elements', 'from', 'list', 'var0', 'and', 'sort', 'it', 'in', 'ascending', 'order'], 'words': ['remove', 'duplicates', 'elements', 'from', 'list', 'var0', 'and', 'sort', 'it', 'in', 'ascending', 'order'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'sequences'}, 'snippet': 'sorted(set(itertools.chain.from_iterable(var0)))'}
Generated  translation
sorted ( set ( var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['print', 'a', 'celsius', 'symbol', 'with', 'matplotlib'], 'words': ['print', 'a', 'celsius', 'symbol', 'with', 'matplotlib'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "ax.set_xlabel('temperature ($^\\\\circ$c)')"}
Generated  translation
ax. set _ xlabel ('temperature ( $ ^ \ \ circ $ c )') 
--------- B -----------
{'intent': {'gloss': ['create', 'new', 'list', 'var0', 'by', 'splitting', 'each', 'item', 'in', 'list', 'var1'], 'words': ['create', 'new', 'list', 'var0', 'by', 'splitting', 'each', 'item', 'in', 'list', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'result', 'var1': 'words'}, 'snippet': "var0 = [item for word in var1 for item in word.split(',')]"}
Generated  translation
var0 = [ item for word in var1 for item in word. split ( ',') ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'json', 'string', 'str0', 'into', 'a', 'datetime', 'object', 'using', 'format', 'str1'], 'words': ['convert', 'json', 'string', 'str0', 'into', 'a', 'datetime', 'object', 'using', 'format', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '2012-05-29t19:30:03.283z', 'str1': '%y-%m-%dt%h:%m:%s.%fz'}, 'snippet': "datetime.datetime.strptime('str0', 'str1')"}
Generated  translation
datetime. datetime. strptime ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['multiply', 'the', 'columns', 'of', 'sparse', 'matrix', 'var0', 'by', 'array', 'var1', 'then', 'multiply', 'the', 'rows', 'of', 'the', 'resulting', 'matrix', 'by', 'array', 'var1'], 'words': ['multiply', 'the', 'columns', 'of', 'sparse', 'matrix', 'var0', 'by', 'array', 'var1', 'then', 'multiply', 'the', 'rows', 'of', 'the', 'resulting', 'matrix', 'by', 'array', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'm', 'var1': 'a', 'var2': 'a'}, 'snippet': 'numpy.dot(numpy.dot(var2, var0), var2)'}
Generated  translation
numpy. dot ( numpy. dot ( var2, var0 ), var2 ) 
--------- B -----------
{'intent': {'gloss': ['group', 'a', 'pandas', 'data', 'frame', 'by', 'monthly', 'frequenct', 'var0', 'using', 'groupby'], 'words': ['group', 'a', 'pandas', 'data', 'frame', 'by', 'monthly', 'frequenct', 'var0', 'using', 'groupby'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'm'}, 'snippet': "df.groupby(pd.timegrouper(freq='var0'))"}
Generated  translation
df. groupby ( pd. timegrouper ( freq ='var0') ) 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'list', 'of', 'pairs', 'of', 'key', '-', 'value', 'sorted', 'by', 'values', 'in', 'dictionary', 'var0'], 'words': ['get', 'a', 'list', 'of', 'pairs', 'of', 'key', '-', 'value', 'sorted', 'by', 'values', 'in', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'data'}, 'snippet': 'sorted(list(var0.items()), key=lambda x: x[1])'}
Generated  translation
sorted ( list ( var0. items ( ) ), key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['add', '1', 'hour', 'and', '2', 'minutes', 'to', 'time', 'object', 'var0'], 'words': ['add', '1', 'hour', 'and', '2', 'minutes', 'to', 'time', 'object', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 't'}, 'snippet': 'dt = datetime.datetime.combine(datetime.date.today(), var0)'}
Generated  translation
dt = datetime. datetime. combine ( datetime. date. today ( ), var0 ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'dictionary', 'values', 'by', 'str0', 'in', 'reverse', 'order'], 'words': ['sort', 'a', 'list', 'of', 'dictionary', 'values', 'by', 'str0', 'in', 'reverse', 'order'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'date'}, 'snippet': "list.sort(key=lambda item: item['str0'], reverse=true)"}
Generated  translation
list. sort ( key = lambda item : item ['str0'], reverse = true ) 
--------- B -----------
{'intent': {'gloss': ['create', 'dataframe', 'var0', 'with', 'content', 'of', 'hdf', 'store', 'file', 'str0', 'with', 'key', 'of', 'str1'], 'words': ['create', 'dataframe', 'var0', 'with', 'content', 'of', 'hdf', 'store', 'file', 'str0', 'with', 'key', 'of', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': '/home/.../data.h5', 'str1': 'firstset'}, 'snippet': "df1 = pd.read_hdf('str0', 'str1')"}
Generated  translation
df1 = pd. read _ hdf ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['matplotlib', 'change', 'marker', 'size', 'to', '500'], 'words': ['matplotlib', 'change', 'marker', 'size', 'to', '500'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "scatter(x, y, s=500, color='green', marker='h')"}
Generated  translation
scatter ( x, y, s = 500, color ='green ', marker ='h') 
--------- B -----------
{'intent': {'gloss': ['count', 'var0', 'values', 'associated', 'with', 'key', 'str0', 'in', 'dictionary', 'var1'], 'words': ['count', 'var0', 'values', 'associated', 'with', 'key', 'str0', 'in', 'dictionary', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'true', 'str0': 'one', 'var1': 'tadas'}, 'snippet': "sum(item['str0'] for item in list(var1.values()))"}
Generated  translation
sum ( item ['str0'] for item in list ( var1. values ( ) ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'last', 'day', 'of', 'the', 'first', 'month', 'in', 'year', '2000'], 'words': ['get', 'last', 'day', 'of', 'the', 'first', 'month', 'in', 'year', '2000'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'datetime.date(2000, 2, 1) - datetime.timedelta(days=1)'}
Generated  translation
datetime. date ( 2000, 2, 1 ) - datetime. timedelta ( days = 1 ) 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'str0', 'based', 'on', 'string', 'str1', ',', 'str2', 'or', 'str3'], 'words': ['split', 'string', 'str0', 'based', 'on', 'string', 'str1', ',', 'str2', 'or', 'str3'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'sad_pandas_and_happy_cats_for_people', 'str1': 'and', 'str2': 'or', 'str3': 'for'}, 'snippet': "re.split('_(?:for|or|and)_', 'str0')"}
Generated  translation
re. split ('_ (? : for | or | and ) _ ','str0') 
--------- B -----------
{'intent': {'gloss': ['pads', 'string', 'str0', 'on', 'the', 'left', 'with', '1', 'zero'], 'words': ['pads', 'string', 'str0', 'on', 'the', 'left', 'with', '1', 'zero'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '5'}, 'snippet': "print('{0}'.format('str0'.zfill(2)))"}
Generated  translation
print ('{ 0 } '. format ('str0 '. zfill ( 2 ) ) ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'all', 'items', 'from', 'a', 'dictionary', 'var0', 'whose', 'values', 'are', 'str0'], 'words': ['remove', 'all', 'items', 'from', 'a', 'dictionary', 'var0', 'whose', 'values', 'are', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mydict', 'str0': '42'}, 'snippet': '{key: val for key, val in list(var0.items()) if val != 42}'}
Generated  translation
{ key : val for key, val in list ( var0. items ( ) ) if val! = 42 } 
--------- B -----------
{'intent': {'gloss': ['merge', 'rows', 'from', 'dataframe', 'var0', 'with', 'rows', 'from', 'dataframe', 'var1', 'and', 'calculate', 'the', 'mean', 'for', 'rows', 'that', 'have', 'the', 'same', 'value', 'of', 'axis', '1'], 'words': ['merge', 'rows', 'from', 'dataframe', 'var0', 'with', 'rows', 'from', 'dataframe', 'var1', 'and', 'calculate', 'the', 'mean', 'for', 'rows', 'that', 'have', 'the', 'same', 'value', 'of', 'axis', '1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df1', 'var1': 'df2'}, 'snippet': 'pd.concat((var0, var1), axis=1).mean(axis=1)'}
Generated  translation
pd. concat ( ( var0, var1 ), axis = 1 ). mean ( axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['invoke', 'perl', 'script', 'str0', 'using', 'perl', 'interpeter', 'str1', 'and', 'send', 'argument', 'var0', 'to', 'it'], 'words': ['invoke', 'perl', 'script', 'str0', 'using', 'perl', 'interpeter', 'str1', 'and', 'send', 'argument', 'var0', 'to', 'it'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': './uireplace.pl', 'str1': '/usr/bin/perl', 'var0': 'var'}, 'snippet': "subprocess.call(['str1', 'str0', var0])"}
Generated  translation
subprocess. call ( ['str1 ','str0 ', var0 ] ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'key', 'str0', 'and', 'key', 'str1', 'are', 'presented', 'in', 'dictionary', 'var0'], 'words': ['check', 'if', 'key', 'str0', 'and', 'key', 'str1', 'are', 'presented', 'in', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'stackoverflow', 'str1': 'google', 'var0': 'sites'}, 'snippet': "set(['str0', 'str1']).issubset(var0)"}
Generated  translation
set ( ['str0 ','str1'] ). issubset ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'elements', 'in', 'list', 'var0', 'are', 'coherent', 'in', 'order'], 'words': ['check', 'if', 'elements', 'in', 'list', 'var0', 'are', 'coherent', 'in', 'order'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'my_list'}, 'snippet': 'return var0 == list(range(var0[0], var0[-1] + 1))'}
Generated  translation
return var0 = = list ( range ( var0 [ 0 ], var0 [ - 1 ] + 1 ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'data', 'from', 'dataframe', 'var0', 'where', 'column', 'str0', 'is', 'equal', 'to', '0'], 'words': ['get', 'data', 'from', 'dataframe', 'var0', 'where', 'column', 'str0', 'is', 'equal', 'to', '0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'x'}, 'snippet': "var0.groupby('user')['str0'].transform(sum) == 0"}
Generated  translation
var0. groupby ('user') ['str0']. transform ( sum ) = = 0 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'nested', 'list', 'by', 'the', 'inverse', 'of', 'element', '2', ',', 'then', 'by', 'element', '1'], 'words': ['sort', 'a', 'nested', 'list', 'by', 'the', 'inverse', 'of', 'element', '2', ',', 'then', 'by', 'element', '1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'sorted(l, key=lambda x: (-int(x[1]), x[0]))'}
Generated  translation
sorted ( l, key = lambda x : ( - int ( x [ 1 ] ), x [ 0 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'string', 'var0', 'between', 'two', 'substrings', 'in', 'a', 'string', 'str0', 'using', 'regex'], 'words': ['get', 'a', 'string', 'var0', 'between', 'two', 'substrings', 'in', 'a', 'string', 'str0', 'using', 'regex'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'randomkey123xyz987', 'str0': "api('randomkey123xyz987', 'key', 'text')"}, 'snippet': 're.findall("api\\\\(\'(.*?)\'", \'str0\')'}
Generated  translation
re. findall ( " api \ \ ('(. *? )'",'str0') 
--------- B -----------
{'intent': {'gloss': ['return', 'the', 'decimal', 'value', 'for', 'each', 'hex', 'character', 'in', 'data', 'var0'], 'words': ['return', 'the', 'decimal', 'value', 'for', 'each', 'hex', 'character', 'in', 'data', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'data'}, 'snippet': "print(' '.join([str(ord(a)) for a in var0]))"}
Generated  translation
print (''. join ( [ str ( ord ( a ) ) for a in var0 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['delete', 'letters', 'from', 'string', 'str0'], 'words': ['delete', 'letters', 'from', 'string', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '12454v'}, 'snippet': '"""""".join(filter(str.isdigit, \'str0\'))'}
Generated  translation
" " " " " ". join ( filter ( str. isdigit,'str0') ) 
--------- B -----------
{'intent': {'gloss': ['generate', 'all', 'permutations', 'of', 'list', 'str0', 'and', 'list', 'str1'], 'words': ['generate', 'all', 'permutations', 'of', 'list', 'str0', 'and', 'list', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '[1, 2, 3]', 'str1': '[4, 5, 6]', '[ str0 ]': '[1, 2, 3]', '[ str1 ]': '[4, 5, 6]'}, 'snippet': 'print(list(itertools.product([ str0 ], [ str1 ])))'}
Generated  translation
print ( list ( itertools. product ( [ str0 ], [ str1 ] ) ) ) 
--------- B -----------
{'intent': {'gloss': ['call', 'base', 'class', "'", 's', '_', '_', 'init', '_', '_', 'method', 'from', 'the', 'child', 'class', 'var0'], 'words': ['call', 'base', 'class', "'", 's', '_', '_', 'init', '_', '_', 'method', 'from', 'the', 'child', 'class', 'var0'], 'after': [' ', ' ', '', '', ' ', '', '', '', '', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'childclass'}, 'snippet': 'super(var0, self).__init__(*args, **kwargs)'}
Generated  translation
super ( var0, self ). _ _ init _ _ ( * args, * * kwargs ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'structured', 'numpy', 'array', 'str0', 'on', 'multiple', 'columns', 'str1', ',', 'str2', 'and', 'str3', '.'], 'words': ['sort', 'a', 'structured', 'numpy', 'array', 'str0', 'on', 'multiple', 'columns', 'str1', ',', 'str2', 'and', 'str3', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'df', 'str1': 'year', 'str2': 'month', 'str3': 'day'}, 'snippet': "str0.sort(['str1', 'str2', 'str3'])"}
Generated  translation
str0. sort ( ['str1 ','str2 ','str3'] ) 
--------- B -----------
{'intent': {'gloss': ['group', 'rows', 'of', 'pandas', 'dataframe', 'var0', 'with', 'same', 'str0'], 'words': ['group', 'rows', 'of', 'pandas', 'dataframe', 'var0', 'with', 'same', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'id'}, 'snippet': "var0.groupby('str0').agg(lambda x: x.tolist())"}
Generated  translation
var0. groupby ('str0'). agg ( lambda x : x. tolist ( ) ) 
--------- B -----------
{'intent': {'gloss': ['decode', 'url', '-', 'encoded', 'string', 'var0', 'to', 'its', 'character', 'equivalents'], 'words': ['decode', 'url', '-', 'encoded', 'string', 'var0', 'to', 'its', 'character', 'equivalents'], 'after': [' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'some_string'}, 'snippet': 'urllib.parse.unquote(urllib.parse.unquote(var0))'}
Generated  translation
urllib. parse. unquote ( urllib. parse. unquote ( var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['create', 'array', 'var0', 'containing', 'integers', 'from', 'stdin'], 'words': ['create', 'array', 'var0', 'containing', 'integers', 'from', 'stdin'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'var0.fromlist([int(val) for val in stdin.read().split()])'}
Generated  translation
var0. fromlist ( [ int ( val ) for val in stdin. read ( ). split ( ) ] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'all', 'var0', 'tags', 'where', 'the', 'text', 'starts', 'with', 'value', 'str0', 'using', 'regex'], 'words': ['get', 'all', 'var0', 'tags', 'where', 'the', 'text', 'starts', 'with', 'value', 'str0', 'using', 'regex'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'str0': 'some text'}, 'snippet': 'doc.xpath("//a[starts-with(text(),\'some text\')]")'}
Generated  translation
doc. xpath ( " / / a [ starts - with ( text ( ),'some text') ] " ) 
--------- B -----------
{'intent': {'gloss': ['decode', 'a', 'urllib', 'escaped', 'url', 'string', 'var0', 'with', 'var1'], 'words': ['decode', 'a', 'urllib', 'escaped', 'url', 'string', 'var0', 'with', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'url', 'var1': 'utf8'}, 'snippet': "var0 = urllib.parse.unquote(var0).decode('var1')"}
Generated  translation
var0 = urllib. parse. unquote ( var0 ). decode ('var1') 
--------- B -----------
{'intent': {'gloss': ['find', 'all', 'occurrences', 'of', 'a', 'substring', 'in', 'a', 'string'], 'words': ['find', 'all', 'occurrences', 'of', 'a', 'substring', 'in', 'a', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "[m.start() for m in re.finditer('test', 'test test test test')]"}
Generated  translation
[ m. start ( ) for m in re. finditer ('test ','test test test test') ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'number', '2130706433', 'to', 'ip', 'string'], 'words': ['convert', 'a', 'number', '2130706433', 'to', 'ip', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "socket.inet_ntoa(struct.pack('!l', 2130706433))"}
Generated  translation
socket. inet _ ntoa ( struct. pack ( '! l ', 2130706433 ) ) 
--------- B -----------
{'intent': {'gloss': ['assign', 'an', 'array', 'of', 'floats', 'in', 'range', 'from', '0', 'to', '100', 'to', 'a', 'variable', 'var0'], 'words': ['assign', 'an', 'array', 'of', 'floats', 'in', 'range', 'from', '0', 'to', '100', 'to', 'a', 'variable', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'values'}, 'snippet': 'var0 = np.array([i for i in range(100)], dtype=np.float64)'}
Generated  translation
var0 = np. array ( [ i for i in range ( 100 ) ], dtype = np. float64 ) 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'numpy', 'array', 'containing', 'elements', 'of', 'array', 'var0', 'as', 'pointed', 'to', 'by', 'index', 'in', 'array', 'var1'], 'words': ['create', 'a', 'numpy', 'array', 'containing', 'elements', 'of', 'array', 'var0', 'as', 'pointed', 'to', 'by', 'index', 'in', 'array', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'b'}, 'snippet': 'var0[np.arange(var0.shape[0])[:, (none)], var1]'}
Generated  translation
var0 [ np. arange ( var0. shape [ 0 ] ) [ :, ( none ) ], var1 ] 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'string', 'var0', 'by', 'multiple', 'words', 'var1', 'or', 'var2', 'or', 'var3'], 'words': ['split', 'a', 'string', 'var0', 'by', 'multiple', 'words', 'var1', 'or', 'var2', 'or', 'var3'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l', 'var1': 'for', 'var2': 'or', 'var3': 'and'}, 'snippet': "[re.split('_(?:f?or|and)_', s) for s in var0]"}
Generated  translation
[ re. split ('_ (? : f? or | and ) _ ', s ) for s in var0 ] 
--------- B -----------
{'intent': {'gloss': ['sort', 'array', 'var0', 'based', 'on', 'column', 'str0', ',', 'str1', 'and', 'str2'], 'words': ['sort', 'array', 'var0', 'based', 'on', 'column', 'str0', ',', 'str1', 'and', 'str2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'order_array', 'str0': 'year', 'str1': 'month', 'str2': 'day'}, 'snippet': "var0.sort(order=['str0', 'str1', 'str2'])"}
Generated  translation
var0. sort ( order = ['str0 ','str1 ','str2'] ) 
--------- B -----------
{'intent': {'gloss': ['encode', 'a', 'pdf', 'file', 'str0', 'with', 'var0', 'encoding'], 'words': ['encode', 'a', 'pdf', 'file', 'str0', 'with', 'var0', 'encoding'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'pdf_reference.pdf', 'var0': 'base64'}, 'snippet': "a = open('str0', 'rb').read().encode('var0')"}
Generated  translation
a = open ('str0 ','rb'). read ( ). encode ('var0') 
--------- B -----------
{'intent': {'gloss': ['enclose', 'numbers', 'in', 'quotes', 'in', 'a', 'string', 'str0'], 'words': ['enclose', 'numbers', 'in', 'quotes', 'in', 'a', 'string', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'this is number 1 and this is number 22'}, 'snippet': 're.sub(\'(\\\\d+)\', \'"\\\\1"\', \'str0\')'}
Generated  translation
re. sub ('( \ \ d + ) ','" \ \ 1 " ','str0') 
--------- B -----------
{'intent': {'gloss': ['display', 'current', 'time'], 'words': ['display', 'current', 'time'], 'after': [' ', ' ', '']}, 'slot_map': {}, 'snippet': "now = datetime.datetime.now().strftime('%h:%m:%s')"}
Generated  translation
now = datetime. datetime. now ( ). strftime ('% h : % m : % s') 
--------- B -----------
{'intent': {'gloss': ['decode', 'url', 'var0', 'with', 'utf8', 'and', 'print', 'it'], 'words': ['decode', 'url', 'var0', 'with', 'utf8', 'and', 'print', 'it'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'url'}, 'snippet': "print(urllib.parse.unquote(var0).decode('utf8'))"}
Generated  translation
print ( urllib. parse. unquote ( var0 ). decode ('utf8') ) 
--------- B -----------
{'intent': {'gloss': ['parse', 'string', 'var0', 'into', 'a', 'datetime', 'object', 'using', 'format', 'pattern', 'str0'], 'words': ['parse', 'string', 'var0', 'into', 'a', 'datetime', 'object', 'using', 'format', 'pattern', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'datestr', 'str0': '%y-%m-%d'}, 'snippet': "dateobj = datetime.datetime.strptime(var0, 'str0').date()"}
Generated  translation
dateobj = datetime. datetime. strptime ( var0,'str0'). date ( ) 
--------- B -----------
{'intent': {'gloss': ['find', 'the', 'magnitude', '(', 'length', ')', 'squared', 'of', 'a', 'vector', 'var0', 'field'], 'words': ['find', 'the', 'magnitude', '(', 'length', ')', 'squared', 'of', 'a', 'vector', 'var0', 'field'], 'after': [' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'vf'}, 'snippet': "np.einsum('...j,...j->...', var0, var0)"}
Generated  translation
np. einsum ( '... j,.. j - >... ', var0, var0 ) 
--------- B -----------
{'intent': {'gloss': ['un', '-', 'escaping', 'characters', 'in', 'a', 'string', 'with', 'python'], 'words': ['un', '-', 'escaping', 'characters', 'in', 'a', 'string', 'with', 'python'], 'after': ['', '', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': '"""\\\\u003cp\\\\u003e""".decode(\'unicode-escape\')'}
Generated  translation
" " " \ \ u003cp \ \ u003e " " ". decode ('unicode - escape') 
--------- B -----------
{'intent': {'gloss': ['coalesce', 'non', '-', 'word', '-', 'characters', 'in', 'string', 'var0'], 'words': ['coalesce', 'non', '-', 'word', '-', 'characters', 'in', 'string', 'var0'], 'after': [' ', '', '', '', '', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': "print(re.sub('(\\\\w)\\\\1+', '\\\\1', var0))"}
Generated  translation
print ( re. sub ('( \ \ w ) \ \ 1 + ','\ \ 1 ', var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['substract', '1', 'hour', 'and', '10', 'minutes', 'from', 'current', 'time'], 'words': ['substract', '1', 'hour', 'and', '10', 'minutes', 'from', 'current', 'time'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 't = datetime.datetime.now()\nt - datetime.timedelta(hours=1, minutes=10)'}
Generated  translation
t = datetime. datetime. now ( ) t - datetime. timedelta ( hours = 1, minutes = 10 ) 
--------- B -----------
{'intent': {'gloss': ['find', 'indexes', 'of', 'all', 'occurrences', 'of', 'a', 'substring', 'var0', 'in', 'a', 'string', 'var1'], 'words': ['find', 'indexes', 'of', 'all', 'occurrences', 'of', 'a', 'substring', 'var0', 'in', 'a', 'string', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'tt', 'var1': 'ttt'}, 'snippet': "[m.start() for m in re.finditer('(?=tt)', 'var1')]"}
Generated  translation
[ m. start ( ) for m in re. finditer ('(? = tt ) ','var1') ] 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'dictionaries', 'var0', 'by', 'values', 'in', 'an', 'order', 'var1'], 'words': ['sort', 'a', 'list', 'of', 'dictionaries', 'var0', 'by', 'values', 'in', 'an', 'order', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list_of_dct', 'var1': 'order'}, 'snippet': 'sorted(var0, key=lambda x: var1.index(list(x.values())[0]))'}
Generated  translation
sorted ( var0, key = lambda x : var1. index ( list ( x. values ( ) ) [ 0 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['decode', 'a', 'double', 'url', 'encoded', 'string', '\r\nstr0', 'to\r\nstr1'], 'words': ['decode', 'a', 'double', 'url', 'encoded', 'string', '\r\nstr0', 'to\r\nstr1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'fireshot3%2b%25282%2529.png', 'str1': 'fireshot3+(2).png'}, 'snippet': "urllib.parse.unquote(urllib.parse.unquote('str0'))"}
Generated  translation
urllib. parse. unquote ( urllib. parse. unquote ('str0') ) 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'list', 'of', 'all', 'the', 'duplicate', 'items', 'in', 'dataframe', 'var0', 'using', 'pandas'], 'words': ['get', 'a', 'list', 'of', 'all', 'the', 'duplicate', 'items', 'in', 'dataframe', 'var0', 'using', 'pandas'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': "pd.concat(g for _, g in var0.groupby('id') if len(g) > 1)"}
Generated  translation
pd. concat ( g for _, g in var0. groupby ('id') if len ( g ) > 1 ) 
--------- B -----------
{'intent': {'gloss': ['delete', 'every', 'non', 'str0', 'characters', 'from', 'a', 'string', 'var0'], 'words': ['delete', 'every', 'non', 'str0', 'characters', 'from', 'a', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'utf-8', 'var0': 'line'}, 'snippet': "var0 = var0.decode('str0', 'ignore').encode('str0')"}
Generated  translation
var0 = var0. decode ('str0 ','ignore'). encode ('str0') 
--------- B -----------
{'intent': {'gloss': ['encode', 'str0', 'as', 'unicode', 'and', 'decode', 'with', 'utf', '-', '8'], 'words': ['encode', 'str0', 'as', 'unicode', 'and', 'decode', 'with', 'utf', '-', '8'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '']}, 'slot_map': {'str0': "u'xÃ¼yÃ\x9f'"}, 'snippet': '"""xÃ¼yÃ\x9f""".encode(\'raw_unicode_escape\').decode(\'utf-8\')'}
Generated  translation
" " " [UNK] " " ". encode ('raw _ unicode _ escape'). decode ('utf - 8') 
--------- B -----------
{'intent': {'gloss': ['make', 'an', 'http', 'post', 'request', 'with', 'data', 'var0'], 'words': ['make', 'an', 'http', 'post', 'request', 'with', 'data', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'post_data'}, 'snippet': "post_response = requests.post(url='http://httpbin.org/post', json=var0)"}
Generated  translation
post _ response = requests. post ( url ='http : / / httpbin. org / post ', json = var0 ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'items', 'from', 'dictionary', 'var0', 'if', 'the', 'item', "'", 's', 'value', 'var1', 'is', 'equal', 'to', '42'], 'words': ['remove', 'items', 'from', 'dictionary', 'var0', 'if', 'the', 'item', "'", 's', 'value', 'var1', 'is', 'equal', 'to', '42'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mydict', 'var1': 'val'}, 'snippet': 'var0 = {key: var1 for key, var1 in list(var0.items()) if var1 != 42}'}
Generated  translation
var0 = { key : var1 for key, var1 in list ( var0. items ( ) ) if var1! = 42 } 
--------- B -----------
{'intent': {'gloss': ['how', 'do', 'i', 'find', 'an', 'element', 'that', 'contains', 'specific', 'text', 'in', 'selenium', 'webdriver', '(', 'python', ')', '?'], 'words': ['how', 'do', 'i', 'find', 'an', 'element', 'that', 'contains', 'specific', 'text', 'in', 'selenium', 'webdriver', '(', 'python', ')', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '', '']}, 'slot_map': {}, 'snippet': 'driver.find_elements_by_xpath("//*[contains(text(), \'my button\')]")'}
Generated  translation
driver. find _ elements _ by _ xpath ( " / / * [ contains ( text ( ),'my button') ] " ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'unicode', 'string', 'var0', 'to', 'a', 'str0', 'string'], 'words': ['convert', 'a', 'unicode', 'string', 'var0', 'to', 'a', 'str0', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'title', 'str0': 'ascii'}, 'snippet': "unicodedata.normalize('nfkd', var0).encode('str0', 'ignore')"}
Generated  translation
unicodedata. normalize ('nfkd ', var0 ). encode ('str0 ','ignore') 
--------- B -----------
{'intent': {'gloss': ['restart', 'a', 'computer', 'after', 'str0', 'seconds', 'using', 'subprocess'], 'words': ['restart', 'a', 'computer', 'after', 'str0', 'seconds', 'using', 'subprocess'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '900'}, 'snippet': "subprocess.call(['shutdown', '/r', '/t', 'str0'])"}
Generated  translation
subprocess. call ( ['shutdown ','/ r ','/ t ','str0'] ) 
--------- B -----------
{'intent': {'gloss': ['update', 'row', 'values', 'for', 'a', 'column', 'var0', 'using', 'vectorized', 'string', 'operation', 'in', 'pandas'], 'words': ['update', 'row', 'values', 'for', 'a', 'column', 'var0', 'using', 'vectorized', 'string', 'operation', 'in', 'pandas'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'season'}, 'snippet': "df['var0'].str.split('-').str[0].astype(int)"}
Generated  translation
df ['var0']. str. split ('-'). str [ 0 ]. astype ( int ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'date', 'string', 'var0', 'in', 'format', 'pattern', 'str0', 'into', 'a', 'timestamp'], 'words': ['convert', 'date', 'string', 'var0', 'in', 'format', 'pattern', 'str0', 'into', 'a', 'timestamp'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's', 'str0': '%d/%m/%y'}, 'snippet': "time.mktime(datetime.datetime.strptime(var0, 'str0').timetuple())"}
Generated  translation
time. mktime ( datetime. datetime. strptime ( var0,'str0'). timetuple ( ) ) 
--------- B -----------
{'intent': {'gloss': ['django', 'check', 'if', 'an', 'object', 'with', 'criteria', 'var0', 'equal', 'to', 'str0', 'and', 'criteria', 'var1', 'equal', 'to', 'str1', 'exists', 'in', 'model', 'var2'], 'words': ['django', 'check', 'if', 'an', 'object', 'with', 'criteria', 'var0', 'equal', 'to', 'str0', 'and', 'criteria', 'var1', 'equal', 'to', 'str1', 'exists', 'in', 'model', 'var2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'name', 'str0': 'name', 'var1': 'title', 'str1': 'title', 'var2': 'entry'}, 'snippet': "var2.objects.filter(str0='str0', str1='str1').exists()"}
Generated  translation
var2. objects. filter ( str0 ='str0 ', str1 ='str1'). exists ( ) 
--------- B -----------
{'intent': {'gloss': ['delete', 'every', '8th', 'column', 'in', 'a', 'numpy', 'array', 'str0', '.'], 'words': ['delete', 'every', '8th', 'column', 'in', 'a', 'numpy', 'array', 'str0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'a'}, 'snippet': 'np.delete(str0, list(range(0, str0.shape[1], 8)), axis=1)'}
Generated  translation
np. delete ( str0, list ( range ( 0, str0. shape [ 1 ], 8 ) ), axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['find', 'the', 'index', 'of', 'the', 'second', 'occurrence', 'of', 'the', 'substring', 'var0', 'in', 'string', 'str0'], 'words': ['find', 'the', 'index', 'of', 'the', 'second', 'occurrence', 'of', 'the', 'substring', 'var0', 'in', 'string', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'bar', 'str0': 'foo bar bar bar'}, 'snippet': '"""str0""".replace(\'var0\', \'xxx\', 1).find(\'var0\')'}
Generated  translation
" " " str0 " " ". replace ('var0 ','xxx ', 1 ). find ('var0') 
--------- B -----------
{'intent': {'gloss': ['place', 'str0', 'infront', 'of', 'each', 'non', '-', 'letter', 'char', 'in', 'string', 'var0'], 'words': ['place', 'str0', 'infront', 'of', 'each', 'non', '-', 'letter', 'char', 'in', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '', 'var0': 'line'}, 'snippet': "print(re.sub('[_%^$]', '\\\\\\\\\\\\g<0>', var0))"}
Generated  translation
print ( re. sub ('[ _ % ^ $ ] ','\ \ \ \ \ \ g < 0 > ', var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['rearrange', 'the', 'columns', 'str0', ',', 'str1', ',', 'str2', ',', 'str3', 'of', 'pandas', 'dataframe', 'var0', 'in', 'mentioned', 'sequence', 'str2', ',', 'str3', ',', 'str0', ',', 'str1'], 'words': ['rearrange', 'the', 'columns', 'str0', ',', 'str1', ',', 'str2', ',', 'str3', 'of', 'pandas', 'dataframe', 'var0', 'in', 'mentioned', 'sequence', 'str2', ',', 'str3', ',', 'str0', ',', 'str1'], 'after': [' ', ' ', ' ', '', '', '', '', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '', ' ', '', '']}, 'slot_map': {'str0': 'a', 'str1': 'b', 'str2': 'x', 'str3': 'y', 'var0': 'df', 'str4': 'x', 'str5': 'y', 'str6': 'a', 'str7': 'b'}, 'snippet': "var0 = var0[['str4', 'str5', 'str6', 'str7']]"}
Generated  translation
var0 = var0 [ ['str4 ','str5 ','str6 ','str7'] ] 
--------- B -----------
{'intent': {'gloss': ['strip', 'everything', 'up', 'to', 'and', 'including', 'the', 'character', 'str0', 'from', 'url', 'var0', ',', 'strip', 'the', 'character', 'str1', 'from', 'the', 'remaining', 'string', 'and', 'concatenate', 'str2', 'to', 'the', 'end'], 'words': ['strip', 'everything', 'up', 'to', 'and', 'including', 'the', 'character', 'str0', 'from', 'url', 'var0', ',', 'strip', 'the', 'character', 'str1', 'from', 'the', 'remaining', 'string', 'and', 'concatenate', 'str2', 'to', 'the', 'end'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '&', 'var0': 'url', 'str1': '=', 'str2': '.html'}, 'snippet': "var0.split('str0')[-1].replace('str1', '') + 'str2'"}
Generated  translation
var0. split ('str0') [ - 1 ]. replace ('str1 ','' ) +'str2'
--------- B -----------
{'intent': {'gloss': ['save', 'array', 'at', 'index', '0', ',', 'index', '1', 'and', 'index', '8', 'of', 'array', 'var0', 'to', 'tmp', 'file', 'var1'], 'words': ['save', 'array', 'at', 'index', '0', ',', 'index', '1', 'and', 'index', '8', 'of', 'array', 'var0', 'to', 'tmp', 'file', 'var1'], 'after': [' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'np', 'var1': 'tmp'}, 'snippet': 'var0.savez(var1, *[getarray[0], getarray[1], getarray[8]])'}
Generated  translation
var0. savez ( var1, * [ getarray [ 0 ], getarray [ 1 ], getarray [ 8 ] ] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'data', 'of', 'dataframe', 'var0', 'where', 'the', 'sum', 'of', 'column', 'str0', 'grouped', 'by', 'column', 'str1', 'is', 'equal', 'to', '0'], 'words': ['get', 'data', 'of', 'dataframe', 'var0', 'where', 'the', 'sum', 'of', 'column', 'str0', 'grouped', 'by', 'column', 'str1', 'is', 'equal', 'to', '0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'x', 'str1': 'user'}, 'snippet': "var0.loc[var0.groupby('str1')['str0'].transform(sum) == 0]"}
Generated  translation
var0. loc [ var0. groupby ('str1') ['str0']. transform ( sum ) = = 0 ] 
--------- B -----------
{'intent': {'gloss': ['adding', 'a', '1', '-', 'd', 'array', 'str0', 'to', 'a', '3', '-', 'd', 'array', 'str1'], 'words': ['adding', 'a', '1', '-', 'd', 'array', 'str0', 'to', 'a', '3', '-', 'd', 'array', 'str1'], 'after': [' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', '']}, 'slot_map': {'str0': '[1, 2, 3, 4, 5, 6, 7, 8, 9]', 'str1': 'np.zeros((6, 9, 20))', '[ str0 ]': '[1, 2, 3, 4, 5, 6, 7, 8, 9]'}, 'snippet': 'np.zeros((6, 9, 20)) + np.array([ str0 ])[(none), :, (none)]'}
Generated  translation
np. zeros ( ( 6, 9, 20 ) ) + np. array ( [ str0 ] ) [ ( none ), :, ( none ) ] 
--------- B -----------
{'intent': {'gloss': ['add', 'array', 'of', 'shape', 'str0', 'to', 'array', 'str1'], 'words': ['add', 'array', 'of', 'shape', 'str0', 'to', 'array', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '(6, 9, 20)', 'str1': '[1, 2, 3, 4, 5, 6, 7, 8, 9]', '( str0 )': '(6, 9, 20)', '[ str1 ]': '[1, 2, 3, 4, 5, 6, 7, 8, 9]'}, 'snippet': 'np.zeros(( str0 )) + np.array([ str1 ]).reshape((1, 9, 1))'}
Generated  translation
np. zeros ( ( str0 ) ) + np. array ( [ str1 ] ). reshape ( ( 1, 9, 1 ) ) 
--------- B -----------
{'intent': {'gloss': ['split', 'dictionary', 'of', 'lists', 'into', 'list', 'of', 'dictionaries'], 'words': ['split', 'dictionary', 'of', 'lists', 'into', 'list', 'of', 'dictionaries'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'map(dict, zip(*[[(k, v) for v in value] for k, value in list(d.items())]))'}
Generated  translation
map ( dict, zip ( * [ [ ( k, v ) for v in value ] for k, value in list ( d. items ( ) ) ] ) ) 
--------- B -----------
{'intent': {'gloss': ['pivot', 'dataframe', 'var0', 'so', 'that', 'values', 'for', 'var1', 'become', 'column', 'headings', 'and', 'values', 'for', 'var2', 'become', 'the', 'index'], 'words': ['pivot', 'dataframe', 'var0', 'so', 'that', 'values', 'for', 'var1', 'become', 'column', 'headings', 'and', 'values', 'for', 'var2', 'become', 'the', 'index'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'var1': 'upc', 'var2': 'saleid'}, 'snippet': "var0.pivot_table(index='var2', columns='var1', aggfunc='size', fill_value=0)"}
Generated  translation
var0. pivot _ table ( index ='var2 ', columns ='var1 ', aggfunc ='size ', fill _ value = 0 ) 
--------- B -----------
{'intent': {'gloss': ['select', 'records', 'of', 'dataframe', 'var0', 'where', 'the', 'sum', 'of', 'column', 'str0', 'for', 'each', 'value', 'in', 'column', 'str1', 'is', '0'], 'words': ['select', 'records', 'of', 'dataframe', 'var0', 'where', 'the', 'sum', 'of', 'column', 'str0', 'for', 'each', 'value', 'in', 'column', 'str1', 'is', '0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'x', 'str1': 'user'}, 'snippet': "var0.groupby('str1')['str0'].filter(lambda str0: str0.sum() == 0)"}
Generated  translation
var0. groupby ('str1') ['str0']. filter ( lambda str0 : str0. sum ( ) = = 0 ) 
--------- B -----------
{'intent': {'gloss': ['finding', 'the', 'index', 'of', 'an', 'item', 'str0', 'given', 'a', 'list', '`', '[', 'str0', ',', "'", 'bar', "'", ',', "'", 'baz', "'", ']', '`', 'containing', 'it'], 'words': ['finding', 'the', 'index', 'of', 'an', 'item', 'str0', 'given', 'a', 'list', '`', '[', 'str0', ',', "'", 'bar', "'", ',', "'", 'baz', "'", ']', '`', 'containing', 'it'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '', ' ', '', '', '', ' ', '', '', '', '', ' ', ' ', '']}, 'slot_map': {'str0': 'foo', 'str1': "['foo', 'bar', 'baz']", '[ str1 ]': "['foo', 'bar', 'baz']"}, 'snippet': "[i for i, j in enumerate(['str0', 'bar', 'baz']) if j == 'str0']"}
Generated  translation
[ i for i, j in enumerate ( ['str0 ','bar ','baz'] ) if j = ='str0'] 
--------- B -----------
{'intent': {'gloss': ['convert', 'string', 'str0', 'to', 'an', 'integer', 'timestamp'], 'words': ['convert', 'string', 'str0', 'to', 'an', 'integer', 'timestamp'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '01/12/2011'}, 'snippet': "int(datetime.datetime.strptime('str0', '%d/%m/%y').strftime('%s'))"}
Generated  translation
int ( datetime. datetime. strptime ('str0 ','% d / % m / % y'). strftime ('% s') ) 
--------- B -----------
{'intent': {'gloss': ['calling', 'an', 'external', 'command', 'str0'], 'words': ['calling', 'an', 'external', 'command', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'echo hello world'}, 'snippet': "print(subprocess.popen('str0', shell=true, stdout=subprocess.pipe).stdout.\n    read())"}
Generated  translation
print ( os. popen ('str0'). read ( ) ) 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'list', 'var0', 'containing', 'all', 'files', 'in', 'directory', 'str0', 'that', 'starts', 'with', 'numbers', 'between', '0', 'and', '9', 'and', 'ends', 'with', 'the', 'extension', 'str1'], 'words': ['create', 'a', 'list', 'var0', 'containing', 'all', 'files', 'in', 'directory', 'str0', 'that', 'starts', 'with', 'numbers', 'between', '0', 'and', '9', 'and', 'ends', 'with', 'the', 'extension', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'files', 'str0': '.', 'str1': '.jpg'}, 'snippet': "var0 = [f for f in os.listdir('str0') if re.match('[0-9]+.*\\\\.jpg', f)]"}
Generated  translation
var0 = [ f for f in os. listdir ('str0') if re. match ('[ 0 - 9 ] +. * \ \. jpg ', f ) ] 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'list', 'where', 'each', 'element', 'is', 'a', 'dictionary', 'with', 'keys', 'str0', 'and', 'str1', 'and', 'values', 'corresponding', 'to', 'each', 'value', 'in', 'the', 'lists', 'referenced', 'by', 'keys', 'str0', 'and', 'str1', 'in', 'dictionary', 'var0'], 'words': ['create', 'a', 'list', 'where', 'each', 'element', 'is', 'a', 'dictionary', 'with', 'keys', 'str0', 'and', 'str1', 'and', 'values', 'corresponding', 'to', 'each', 'value', 'in', 'the', 'lists', 'referenced', 'by', 'keys', 'str0', 'and', 'str1', 'in', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'key1', 'str1': 'key2', 'str2': 'key1', 'str3': 'key2', 'var0': 'd'}, 'snippet': "[{'str2': a, 'str3': b} for a, b in zip(var0['str2'], var0['str3'])]"}
Generated  translation
[ {'str2': a,'str3': b } for a, b in zip ( var0 ['str2'], var0 ['str3'] ) ] 
--------- B -----------
{'intent': {'gloss': ['calling', 'an', 'external', 'command', 'str0'], 'words': ['calling', 'an', 'external', 'command', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'ls'}, 'snippet': "p = subprocess.popen('str0', shell=true, stdout=subprocess.pipe, stderr=\n    subprocess.stdout)\nfor line in p.stdout.readlines():\n    print(line, end=' ')\nretval = p.wait()"}
Generated  translation
print ( os. popen ('str0'). read ( ) ) 
dev greedy accuracy 0.93
dev greedy bleu score 0.9548569522436652
dev greedy exececution accuracy 0.0
got:
tensor([ 1021,  1999, 13075,  2692,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  1021,  1999, 13075,  2692,   102])
got:
tensor([14257,  1006, 13075,  2692,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 14257,  1006, 13075,  2692,  1007,   102])
got:
tensor([25353,  2015,  1012,  6164,  1006,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 25353,  2015,  1012,  6164,  1006,  1007,   102])
got:
tensor([13075,  2692,  1012,  3769,  1006,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1012,  3769,  1006,  1007,   102])
got:
tensor([14101,  1006,  1008, 13075,  2692,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 14101,  1006,  1008, 13075,  2692,  1007,   102])
got:
tensor([13075,  2692,  1012,  3769,  1006,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  3972, 13075,  2692,  1031,  1011,  1015,  1033,   102])
got:
tensor([13075,  2692,  1012,  3769,  1006,  1015,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1012,  3769,  1006,  1015,  1007,   102])
got:
tensor([ 3972, 13075,  2692,  1031, 13075,  2487,  1033,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  3972, 13075,  2692,  1031, 13075,  2487,  1033,   102])
got:
tensor([ 1005, 13075,  2692,  1005,  1999, 13075,  2692,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  1005, 13075,  2692,  1005,  1999, 13075,  2692,   102])
got:
tensor([6140, 1006, 9808, 1012, 4831, 2078, 1006, 1005, 2358, 2099, 2692, 1005,
        1007, 1012, 3191, 1006, 1007, 1007,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102])
source:
tensor([  101,  2013,  4942, 21572,  9623,  2015, 12324,  2655,   102])
got:
tensor([6140, 1006, 1005, 2358, 2099, 2692, 1005, 1007,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102])
source:
tensor([ 101, 6140, 1006, 1005, 2358, 2099, 2692, 1005, 1007,  102])
got:
tensor([ 3972, 13075,  2692,  1031, 13075,  2487,  1033,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1012,  3769,  1006, 13075,  2487,  1007,   102])
got:
tensor([ 3204, 24388,  2063,  1006,  2262,  1010,  1016,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  3204, 24388,  2063,  1006,  2262,  1010,  1016,  1007,   102])
got:
tensor([7680, 1006, 1040, 1012, 5300, 1006, 1007, 1007,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102])
source:
tensor([ 101, 7680, 1006, 1040, 1012, 5300, 1006, 1007, 1007,  102])
got:
tensor([9808, 1012, 2291, 1006, 2358, 2099, 2692, 1007,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102])
source:
tensor([ 101, 9808, 1012, 2291, 1006, 2358, 2099, 2692, 1007,  102])
got:
tensor([ 1054,  1027, 11186,  1012,  2131,  1006, 13075,  2692,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  1054,  1027, 11186,  1012,  2131,  1006, 13075,  2692,  1007,
          102])
got:
tensor([19616,  1006, 13075,  2692,  1012,  5300,  1006,  1007,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 19616,  1006, 13075,  2692,  1012,  5300,  1006,  1007,  1007,
          102])
got:
tensor([5333, 6453, 1006, 1005, 2358, 2099, 2692, 1005, 1007,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102])
source:
tensor([ 101, 5333, 6453, 1006, 1005, 2358, 2099, 2692, 1005, 1007,  102])
got:
tensor([5333, 6453, 1006, 1005, 2358, 2099, 2692, 1005, 1007,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102])
source:
tensor([ 101, 5333, 6453, 1006, 1005, 2358, 2099, 2692, 1005, 1007,  102])
got:
tensor([5333, 6453, 1006, 1005, 2358, 2099, 2692, 1005, 1007,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102])
source:
tensor([ 101, 5333, 6453, 1006, 1005, 2358, 2099, 2692, 1005, 1007,  102])
got:
tensor([ 7680,  1006, 13075,  2692,  1012,  5300,  1006,  1007,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  7680,  1006, 13075,  2692,  1012,  5300,  1006,  1007,  1007,
          102])
got:
tensor([19616,  1006,  2358,  2099,  2692,  1010,  7901,  1027,  2995,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 19616,  1006,  2358,  2099,  2692,  1010,  7901,  1027,  2995,
         1007,   102])
got:
tensor([ 2709,  8299,  6072, 26029,  3366,  1006,  3570,  1027, 19627,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  2709,  8299,  6072, 26029,  3366,  1006,  3570,  1027, 19627,
         1007,   102])
got:
tensor([ 6140,  1006, 13075,  2692,  1012,  2783,  1035, 24471,  2140,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  6140,  1006, 13075,  2692,  1012,  2783,  1035, 24471,  2140,
         1007,   102])
got:
tensor([ 5227,  1012, 18804,  1031,  1005,  8299,  1035,  3677,  1005,  1033,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  5227,  1012, 18804,  1031,  1005,  8299,  1035,  3677,  1005,
         1033,   102])
got:
tensor([ 8094,  1012,  3204, 24388,  2063,  1006,  2526,  1010,  1015,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  8094,  1012,  3204, 24388,  2063,  1006,  2526,  1010,  1015,
         1007,   102])
got:
tensor([ 8094,  1012,  3204, 24388,  2063,  1006,  2263,  1010,  1016,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  8094,  1012,  3204, 24388,  2063,  1006,  2263,  1010,  1016,
         1007,   102])
got:
tensor([6140, 1006, 9808, 1012, 4831, 2078, 1006, 1005, 2358, 2099, 2692, 1005,
        1007, 1012, 3191, 1006, 1007, 1007,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102])
source:
tensor([ 101, 9808, 1012, 2291, 1006, 1005, 2358, 2099, 2692, 1005, 1007,  102])
got:
tensor([6140, 1006, 9808, 1012, 4831, 2078, 1006, 1005, 2358, 2099, 2692, 1005,
        1007, 1012, 3191, 1006, 1007, 1007,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102])
source:
tensor([ 101, 9808, 1012, 2291, 1006, 1005, 2358, 2099, 2692, 1005, 1007,  102])
got:
tensor([ 5333, 13075,  2692,  1006,  1005,  2358,  2099,  2692,  1005,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  5333, 13075,  2692,  1006,  1005,  2358,  2099,  2692,  1005,
         1007,   102])
got:
tensor([ 5227,  1012, 20346,  2015,  1031,  1005,  2358,  2099,  2692,  1005,
         1033,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  5227,  1012, 20346,  2015,  1031,  1005,  2358,  2099,  2692,
         1005,  1033,   102])
got:
tensor([ 8094,  1012,  3204, 24388,  2063,  1006, 12875,  2692,  1010,  1016,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  8094,  1012,  3204, 24388,  2063,  1006, 12875,  2692,  1010,
         1016,  1007,   102])
got:
tensor([ 5333,  3643,  2121, 29165,  1006,  1005,  2358,  2099,  2692,  1005,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101,  5333,  3643,  2121, 29165,  1006,  1005,  2358,  2099,  2692,
         1005,  1007,   102])
got:
tensor([ 5333,  3643,  2121, 29165,  1006,  1005,  2358,  2099,  2692,  1005,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101,  5333,  3643,  2121, 29165,  1006,  1005,  2358,  2099,  2692,
         1005,  1007,   102])
got:
tensor([5672, 1006, 1005, 1000, 1005, 1010, 1005, 1032, 1032, 1000, 1005, 1007,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102])
source:
tensor([ 101, 5672, 1006, 1005, 1000, 1005, 1010, 1005, 1032, 1032, 1000, 1005,
        1007,  102])
got:
tensor([ 2275, 19321,  2099,  1006,  2969,  1010, 13075,  2487,  1010, 13075,
         2692,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101,  2275, 19321,  2099,  1006,  2969,  1010, 13075,  2487,  1010,
        13075,  2692,  1007,   102])
got:
tensor([9808, 1012, 2291, 1006, 1005, 2707, 1000, 1002, 5371, 1000, 1005, 1007,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102])
source:
tensor([ 101, 9808, 1012, 2291, 1006, 1005, 2707, 1000, 1002, 5371, 1000, 1005,
        1007,  102])
got:
tensor([ 6140,  1006,  4098,  1006, 13075,  2692,  1010,  3145,  1027,  7680,
         1007,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101,  6140,  1006,  4098,  1006, 13075,  2692,  1010,  3145,  1027,
         7680,  1007,  1007,   102])
got:
tensor([13075,  2692,  1012,  2000,  1035,  4487,  6593,  1006,  1005,  5950,
         1005,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101, 13075,  2692,  1012,  2000,  1035,  4487,  6593,  1006,  1005,
         5950,  1005,  1007,   102])
got:
tensor([13075,  2692,  1012,  2000,  1035,  4487,  6593,  1006,  1005,  2636,
         1005,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101, 13075,  2692,  1012,  2000,  1035,  4487,  6593,  1006,  1005,
         2636,  1005,  1007,   102])
got:
tensor([19616,  1006, 13075,  2692,  1010,  3145,  1027, 13075,  2692,  1012,
         2131,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101, 19616,  1006, 13075,  2692,  1010,  3145,  1027, 13075,  2692,
         1012,  2131,  1007,   102])
got:
tensor([ 5333,  2448,  7292,  2121, 29165,  1006,  1005,  2358,  2099,  2692,
         1005,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101,  5333,  2448,  7292,  2121, 29165,  1006,  1005,  2358,  2099,
         2692,  1005,  1007,   102])
got:
tensor([13075,  2487,  1031,  1005, 13075,  2692,  1005,  1033,  1012,  2000,
         9863,  1006,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101, 13075,  2487,  1031,  1005, 13075,  2692,  1005,  1033,  1012,
         2000,  9863,  1006,  1007,   102])
got:
tensor([ 2128,  1012,  3975,  1006,  1005,  1025,  1064,  1010,  1005,  1010,
        13075,  2692,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101,  2128,  1012,  3975,  1006,  1005,  1025,  1064,  1010,  1005,
         1010, 13075,  2692,  1007,   102])
got:
tensor([ 6140,  1006,  4942, 21572,  9623,  2015,  1012,  4831,  2078,  1006,
         1005,  2358,  2099,  2692,  1005,  1010,  5806,  1027,  2995,  1010,
         2358, 26797,  2102,  1027,  4942, 21572,  9623,  2015,  1012,  8667,
         1007,  1012,  2358, 26797,  2102,  1012,  3191,  1006,  1007,  1007,
          102,   102])
source:
tensor([ 101, 5460, 1027, 9808, 1012, 4831, 2078, 1006, 1005, 2358, 2099, 2692,
        1005, 1007,  102])
got:
tensor([13075,  2692,  1012,  2275,  1035,  5950,  1006,  1031,  2358,  2099,
         2692,  1033,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101, 13075,  2692,  1012,  2275,  1035,  5950,  1006,  1031,  2358,
         2099,  2692,  1033,  1007,   102])
got:
tensor([ 5333, 23617,  2121, 29165,  1006,  1005,  2358,  2099,  2692,  1005,
         1010,  3292,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101,  5333, 23617,  2121, 29165,  1006,  1005,  2358,  2099,  2692,
         1005,  1010,  3292,  1007,   102])
got:
tensor([ 1054,  1027, 11186,  1012,  2695,  1006, 13075,  2692,  1010,  2951,
         1027, 13075,  2487,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101,  1054,  1027, 11186,  1012,  2695,  1006, 13075,  2692,  1010,
         2951,  1027, 13075,  2487,  1007,   102])
got:
tensor([ 6434,  1027,  2330,  1006,  1005,  2358,  2099,  2692,  1005,  1010,
         1005, 25610,  1005,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101,  6434,  1027,  2330,  1006,  1005,  2358,  2099,  2692,  1005,
         1010,  1005, 25610,  1005,  1007,   102])
got:
tensor([ 6140,  1006,  4942, 21572,  9623,  2015,  1012,  4831,  2078,  1006,
         1005,  2358,  2099,  2692,  1005,  1010,  5806,  1027,  2995,  1010,
         2358, 26797,  2102,  1027,  4942, 21572,  9623,  2015,  1012,  8667,
         1007,  1012,  2358, 26797,  2102,  1012,  3191,  1006,  1007,  1007,
          102,   102])
source:
tensor([ 101, 2655, 1006, 1031, 1005, 1048, 2015, 1005, 1010, 1005, 1011, 1048,
        1005, 1033, 1007,  102])
got:
tensor([ 1054,  1027, 11186,  1012,  2131,  1006, 13075,  2692,  1010, 11498,
         5244,  1027, 13075,  2487,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101,  1054,  1027, 11186,  1012,  2131,  1006, 13075,  2692,  1010,
        11498,  5244,  1027, 13075,  2487,  1007,   102])
got:
tensor([ 9808,  1012,  3102,  1006,  2832,  1012, 14255,  2094,  1010,  4742,
         1012,  9033,  2290, 15872,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101,  9808,  1012,  3102,  1006,  2832,  1012, 14255,  2094,  1010,
         4742,  1012,  9033,  2290, 15872,  1007,   102])
got:
tensor([13075,  2692,  1012,  3975,  1006,  1005,  1032,  1050,  1005,  1007,
         1031,  1024,  1011,  1015,  1033,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101, 13075,  2692,  1012,  3975,  1006,  1005,  1032,  1050,  1005,
         1007,  1031,  1024,  1011,  1015,  1033,   102])
got:
tensor([ 2862,  1006, 13075,  2692,  1012, 21933,  3207,  1006,  1005,  2358,
         2099,  2692,  1005,  1007,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101,  2862,  1006, 13075,  2692,  1012, 21933,  3207,  1006,  1005,
         2358,  2099,  2692,  1005,  1007,  1007,   102])
got:
tensor([ 2330,  1006,  1005, 13075,  2692,  1005,  1010,  1005,  1059,  1005,
         1007,  1012,  2485,  1006,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101,  2330,  1006,  1005, 13075,  2692,  1005,  1010,  1005,  1059,
         1005,  1007,  1012,  2485,  1006,  1007,   102])
got:
tensor([13075,  2692,  1012,  5672,  1006,  1005,  1998,  1005,  1010,  1005,
         2358,  2099,  2487,  1005,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101, 13075,  2692,  1012,  5672,  1006,  1005,  1998,  1005,  1010,
         1005,  2358,  2099,  2487,  1005,  1007,   102])
got:
tensor([13075,  2692,  1011,  1027,  3058,  7292,  1012, 22313, 20042,  2050,
         1006,  2847,  1027,  1019,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101, 13075,  2692,  1011,  1027,  3058,  7292,  1012, 22313, 20042,
         2050,  1006,  2847,  1027,  1019,  1007,   102])
got:
tensor([ 6140,  1006, 13075,  2692,  1012,  4372, 16044,  1006,  1005,  2358,
         2099,  2692,  1005,  1007,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101,  6140,  1006, 13075,  2692,  1012,  4372, 16044,  1006,  1005,
         2358,  2099,  2692,  1005,  1007,  1007,   102])
got:
tensor([ 1031,  4949,  1006, 20014,  1010,  4942,  9863,  1007,  2005,  4942,
         9863,  1999, 13075,  2692,  1033,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101,  1031,  4949,  1006, 20014,  1010,  4942,  9863,  1007,  2005,
         4942,  9863,  1999, 13075,  2692,  1033,   102])
got:
tensor([ 8094,  1012,  3204, 24388,  2063,  1006, 13075,  2487,  1010, 13075,
         2692,  1007,  1031,  1015,  1033,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101,  8094,  1012,  3204, 24388,  2063,  1006, 13075,  2487,  1010,
        13075,  2692,  1007,  1031,  1015,  1033,   102])
got:
tensor([13075,  2692,  1012,  4066,  1006,  3145,  1027, 23375,  1060,  1024,
         1060,  1031,  1015,  1033,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101, 13075,  2692,  1012,  4066,  1006,  3145,  1027, 23375,  1060,
         1024,  1060,  1031,  1015,  1033,  1007,   102])
got:
tensor([ 2358,  6820,  6593,  1012,  4895, 23947,  1006,  1005,  2340,  2497,
         1005,  1010, 13075,  2692,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101,  2358,  6820,  6593,  1012,  4895, 23947,  1006,  1005,  2340,
         2497,  1005,  1010, 13075,  2692,  1007,   102])
got:
tensor([ 2009,  8743, 13669,  2015,  1012,  2566, 28120, 10708,  1006,  1031,
         2358,  2099,  2692,  1033,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101,  2009,  8743, 13669,  2015,  1012,  2566, 28120, 10708,  1006,
         1031,  2358,  2099,  2692,  1033,  1007,   102])
got:
tensor([2128, 1012, 3975, 1006, 1005, 2358, 2099, 2487, 1005, 1010, 1005, 2358,
        2099, 2692, 1005, 1007,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102])
source:
tensor([ 101, 2128, 1012, 3975, 1006, 1005, 2358, 2099, 2487, 1005, 1010, 1005,
        2358, 2099, 2692, 1005, 1007,  102])
got:
tensor([ 2065,  2038, 19321,  2099,  1006, 13075,  2692,  1010,  1005,  2358,
         2099,  2692,  1005,  1007,  1024,  3413,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101,  2065,  2038, 19321,  2099,  1006, 13075,  2692,  1010,  1005,
         2358,  2099,  2692,  1005,  1007,  1024,  3413,   102])
got:
tensor([ 2065,  2038, 19321,  2099,  1006, 13075,  2692,  1010,  1005,  2358,
         2099,  2692,  1005,  1007,  1024,  3413,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101,  2065,  2038, 19321,  2099,  1006, 13075,  2692,  1010,  1005,
         2358,  2099,  2692,  1005,  1007,  1024,  3413,   102])
got:
tensor([ 1063,  1063,  1006, 13075,  2692,  1064, 14704,  1007,  1024,  1005,
         2358,  2099,  2692,  1005,  1065,  1065,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101,  1063,  1063,  1006, 13075,  2692,  1064, 14704,  1007,  1024,
         1005,  2358,  2099,  2692,  1005,  1065,  1065,   102])
got:
tensor([13075,  2692,  1031,  1005,  2358,  2099,  2692,  1005,  1033,  1012,
         5300,  1012,  2000,  9863,  1006,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1031,  1005,  2358,  2099,  2692,  1005,  1033,
         1012,  5300,  1012,  2000,  9863,  1006,  1007,   102])
got:
tensor([13075,  2692,  1012,  2275,  1035, 28712, 16336,  2140,  1006,  1005,
         4860,  1006,   100,  1007,  1005,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1012,  2275,  1035, 28712, 16336,  2140,  1006,
         1005,  4860,  1006,   100,  1007,  1005,  1007,   102])
got:
tensor([13075,  2692,  1012, 12667, 24901,  1006,  1007,  1012,  3975,  1006,
         1005,  2358,  2099,  2692,  1005,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1012, 12667, 24901,  1006,  1007,  1012,  3975,
         1006,  1005,  2358,  2099,  2692,  1005,  1007,   102])
got:
tensor([27260,  2850,  2696,  1012,  3671,  4697,  1006,  1005,  1050, 24316,
         2094,  1005,  1010, 13075,  2692,  1007,  1012,  4372, 16044,  1006,
         1005,  2358,  2099,  2692,  1005,  1010,  1005,  8568,  1005,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1012,  4372, 16044,  1006,  1005,  2358,  2099,
         2692,  1005,  1010,  1005,  8568,  1005,  1007,   102])
got:
tensor([ 6140,  1006,  1005,  2182,  2003,  2115,  4638, 10665,  1024,  1005,
         1009,  1005,  2358,  2099,  2487,  1005,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101,  6140,  1006,  1005,  2182,  2003,  2115,  4638, 10665,  1024,
         1005,  1009,  1005,  2358,  2099,  2487,  1005,  1007,   102])
got:
tensor([ 2709, 18798,  1006, 13075,  2692,  1012,  4372, 16044,  1006,  1005,
        21183,  2546,  1011,  1022,  1005,  1007,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101,  2709, 18798,  1006, 13075,  2692,  1012,  4372, 16044,  1006,
         1005, 21183,  2546,  1011,  1022,  1005,  1007,  1007,   102])
got:
tensor([ 1031,  1005,  2358,  2099,  2692,  1005,  1012,  3693,  1006,  1048,
         1007,  2005,  1048,  1999, 13075,  2692,  1033,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101,  1031,  1005,  2358,  2099,  2692,  1005,  1012,  3693,  1006,
         1048,  1007,  2005,  1048,  1999, 13075,  2692,  1033,   102])
got:
tensor([ 2131, 19321,  2099,  1006,  1035,  1035,  2328,  7076,  1035,  1035,
         1010,  1005,  2358,  2099,  2692,  1005,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101,  2131, 19321,  2099,  1006,  1035,  1035,  2328,  7076,  1035,
         1035,  1010,  1005,  2358,  2099,  2692,  1005,  1007,   102])
got:
tensor([ 2330,  1006,  1005,  5371,  1012, 19067,  2102,  1005,  1010,  1005,
         1059,  1005,  1007,  1012,  2485,  1006,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101,  2330,  1006,  1005,  5371,  1012, 19067,  2102,  1005,  1010,
         1005,  1059,  1005,  1007,  1012,  2485,  1006,  1007,   102])
got:
tensor([1031, 1060, 2005, 1060, 1999, 2358, 2099, 2692, 2065, 1060, 1031, 1015,
        1033, 1027, 1027, 1015, 1033,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102])
source:
tensor([ 101, 1031, 1060, 2005, 1060, 1999, 2358, 2099, 2692, 2065, 1060, 1031,
        1015, 1033, 1027, 1027, 1015, 1033,  102])
got:
tensor([ 1046,  3385,  1012, 15653,  2015,  1006, 13075,  2692,  1010,  5676,
         1035,  2004,  6895,  2072,  1027,  6270,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101,  1046,  3385,  1012, 15653,  2015,  1006, 13075,  2692,  1010,
         5676,  1035,  2004,  6895,  2072,  1027,  6270,  1007,   102])
got:
tensor([ 2709, 13075,  2692,  1031,  1014,  1033,  1012,  3356,  1006,  1007,
         1009, 13075,  2692,  1031,  1015,  1024,  1033,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101,  2709, 13075,  2692,  1031,  1014,  1033,  1012,  3356,  1006,
         1007,  1009, 13075,  2692,  1031,  1015,  1024,  1033,   102])
got:
tensor([ 1031,  4487,  6593,  1006, 14101,  1006, 13075,  2692,  1010,  1060,
         1007,  1007,  2005,  1060,  1999, 13075,  2487,  1033,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101,  1031,  4487,  6593,  1006, 14101,  1006, 13075,  2692,  1010,
         1060,  1007,  1007,  2005,  1060,  1999, 13075,  2487,  1033,   102])
got:
tensor([ 3058,  7292,  1012,  3058,  7292,  1012,  2013,  7292,  9153,  8737,
         1006, 13075,  2692,  1013,  6694,  1012,  1014,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101,  3058,  7292,  1012,  3058,  7292,  1012,  2013,  7292,  9153,
         8737,  1006, 13075,  2692,  1013,  6694,  1012,  1014,  1007,   102])
got:
tensor([19616,  1006, 13075,  2692,  1010,  3145,  1027,  8875, 18150,  3334,
         1006,  1005,  2358,  2099,  2692,  1005,  1007,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101, 19616,  1006, 13075,  2692,  1010,  3145,  1027,  8875, 18150,
         3334,  1006,  1005,  2358,  2099,  2692,  1005,  1007,  1007,   102])
got:
tensor([ 2358,  2099,  2692,  1012,  5200,  1012, 11307,  1006,  1066,  1053,
         1006,  2358,  2099,  2487,  1027,  1017,  1007,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101,  2358,  2099,  2692,  1012,  5200,  1012, 11307,  1006,  1066,
         1053,  1006,  2358,  2099,  2487,  1027,  1017,  1007,  1007,   102])
got:
tensor([13075,  2692,  1011,  3058,  7292,  1012, 22313, 20042,  2050,  1006,
         2847,  1027,  1015,  1010,  2781,  1027,  2184,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1011,  3058,  7292,  1012, 22313, 20042,  2050,
         1006,  2847,  1027,  1015,  1010,  2781,  1027,  2184,  1007,   102])
got:
tensor([ 6140,  1006,  4942, 21572,  9623,  2015,  1012,  4831,  2078,  1006,
         1005,  2358,  2099,  2692,  1005,  1010,  5806,  1027,  2995,  1010,
         2358, 26797,  2102,  1027,  4942, 21572,  9623,  2015,  1012,  8667,
         1007,  1012,  2358, 26797,  2102,  1012,  3191,  1006,  1007,  1007,
          102,   102,   102,   102,   102])
source:
tensor([ 101, 6140, 1006, 9808, 1012, 4831, 2078, 1006, 1005, 2358, 2099, 2692,
        1005, 1007, 1012, 3191, 1006, 1007, 1007,  102])
got:
tensor([ 2005,  7117,  1010,  4942, 10371,  2545,  1010,  6764,  1999,  9808,
         1012,  3328,  1006, 13075,  2692,  1007,  1024,  3413,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101,  2005,  7117,  1010,  4942, 10371,  2545,  1010,  6764,  1999,
         9808,  1012,  3328,  1006, 13075,  2692,  1007,  1024,  3413,   102])
got:
tensor([ 1039,  1012, 15389,  1006,  1005,  2358,  2099,  2692,  1005,  1010,
         1006, 13075,  2692,  1010, 13075,  2487,  1007,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101,  1039,  1012, 15389,  1006,  1005,  2358,  2099,  2692,  1005,
         1010,  1006, 13075,  2692,  1010, 13075,  2487,  1007,  1007,   102])
got:
tensor([ 3046,  1024,  2709, 20014,  1006, 13075,  2692,  1007,  3272,  3643,
         2121, 29165,  1024,  2709, 14257,  1006, 13075,  2692,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101,  3046,  1024,  2709, 20014,  1006, 13075,  2692,  1007,  3272,
         3643,  2121, 29165,  1024,  2709, 14257,  1006, 13075,  2692,  1007,
          102])
got:
tensor([ 2131, 19321,  2099,  1006, 13075,  2692,  1010,  1005,  2358,  2099,
         2692,  1005,  1010,  1005,  2358,  2099,  2487,  1005,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101,  2131, 19321,  2099,  1006, 13075,  2692,  1010,  1005,  2358,
         2099,  2692,  1005,  1010,  1005,  2358,  2099,  2487,  1005,  1007,
          102])
got:
tensor([ 4098,  1006, 13075,  2692,  1012, 21792, 22254,  1006,  1045,  1007,
         2005,  1045,  1999,  1005,  2358,  2099,  2692,  1005,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101,  4098,  1006, 13075,  2692,  1012, 21792, 22254,  1006,  1045,
         1007,  2005,  1045,  1999,  1005,  2358,  2099,  2692,  1005,  1007,
          102])
got:
tensor([13075,  2692,  1031, 22851,  1012,  3475, 18083,  1006, 13075,  2692,
         1007,  1012,  2151,  1006,  8123,  1027,  1015,  1007,  1033,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1031, 22851,  1012,  3475, 18083,  1006, 13075,
         2692,  1007,  1012,  2151,  1006,  8123,  1027,  1015,  1007,  1033,
          102])
got:
tensor([13075,  2692,  1027, 16371,  8737,  2100,  1012,  3972, 12870,  1006,
        13075,  2692,  1010,  1016,  1010,  8123,  1027,  1015,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1027, 16371,  8737,  2100,  1012,  3972, 12870,
         1006, 13075,  2692,  1010,  1016,  1010,  8123,  1027,  1015,  1007,
          102])
got:
tensor([13075,  2692,  1027, 16371,  8737,  2100,  1012,  3972, 12870,  1006,
        13075,  2692,  1010,  1014,  1010,  8123,  1027,  1014,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1027, 16371,  8737,  2100,  1012,  3972, 12870,
         1006, 13075,  2692,  1010,  1014,  1010,  8123,  1027,  1014,  1007,
          102])
got:
tensor([ 9808,  1012,  2291,  1006,  1005,  2707, 24970,  1012,  4654,  2063,
         1026,  4130,  1013,  2000,  1013,  5371,  1028,  1005,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101,  9808,  1012,  2291,  1006,  1005,  2707, 24970,  1012,  4654,
         2063,  1026,  4130,  1013,  2000,  1013,  5371,  1028,  1005,  1007,
          102])
got:
tensor([ 7680,  1006, 18798,  1006,  1061,  1007,  2005,  1061,  1999, 13075,
         2692,  2065, 18798,  1006,  1061,  1007,  1028,  1015,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101,  7680,  1006, 18798,  1006,  1061,  1007,  2005,  1061,  1999,
        13075,  2692,  2065, 18798,  1006,  1061,  1007,  1028,  1015,  1007,
          102])
got:
tensor([13075,  2487,  1027, 13075,  2692,  1012, 21933,  3207,  1006,  1005,
        21183,  2546,  1011,  1022,  1011,  9033,  2290,  1005,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2487,  1027, 13075,  2692,  1012, 21933,  3207,  1006,
         1005, 21183,  2546,  1011,  1022,  1011,  9033,  2290,  1005,  1007,
          102])
got:
tensor([ 4942, 21572,  9623,  2015,  1012,  2655,  1006,  1031,  1005,  3844,
         7698,  1005,  1010,  1005,  1013,  1055,  1005,  1033,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  4942, 21572,  9623,  2015,  1012,  2655,  1006,  1031,  1005,
         3844,  7698,  1005,  1010,  1005,  1013,  1055,  1005,  1033,  1007,
          102])
got:
tensor([ 4942, 21572,  9623,  2015,  1012,  2655,  1006,  1031,  1005,  3844,
         7698,  1005,  1010,  1005,  1013,  1037,  1005,  1033,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  4942, 21572,  9623,  2015,  1012,  2655,  1006,  1031,  1005,
         3844,  7698,  1005,  1010,  1005,  1013,  1037,  1005,  1033,  1007,
          102])
got:
tensor([ 4942, 21572,  9623,  2015,  1012,  2655,  1006,  1031,  1005,  3844,
         7698,  1005,  1010,  1005,  1013,  1048,  1005,  1033,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  4942, 21572,  9623,  2015,  1012,  2655,  1006,  1031,  1005,
         3844,  7698,  1005,  1010,  1005,  1013,  1048,  1005,  1033,  1007,
          102])
got:
tensor([ 4942, 21572,  9623,  2015,  1012,  2655,  1006,  1031,  1005,  3844,
         7698,  1005,  1010,  1005,  1013,  1054,  1005,  1033,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  4942, 21572,  9623,  2015,  1012,  2655,  1006,  1031,  1005,
         3844,  7698,  1005,  1010,  1005,  1013,  1054,  1005,  1033,  1007,
          102])
got:
tensor([ 1031,  1031, 20014,  1006,  1060,  1007,  2005,  1060,  1999,  4942,
         9863,  1033,  2005,  4942,  9863,  1999, 13075,  2692,  1033,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  1031,  1031, 20014,  1006,  1060,  1007,  2005,  1060,  1999,
         4942,  9863,  1033,  2005,  4942,  9863,  1999, 13075,  2692,  1033,
          102])
got:
tensor([ 4062,  1012,  2424,  1035,  5783,  1035,  2011,  1035,  8909,  1006,
         1005, 13075,  2692,  1005,  1007,  1012,  3154,  1006,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  4062,  1012,  2424,  1035,  5783,  1035,  2011,  1035,  8909,
         1006,  1005, 13075,  2692,  1005,  1007,  1012,  3154,  1006,  1007,
          102])
got:
tensor([1000, 1000, 1000, 1000, 1000, 1000, 1012, 3693, 1006, 1031, 1015, 1010,
        1016, 1010, 1017, 1010, 1018, 1033, 1007,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102])
source:
tensor([ 101, 1000, 1000, 1000, 1000, 1000, 1000, 1012, 3693, 1006, 1031, 1015,
        1010, 1016, 1010, 1017, 1010, 1018, 1033, 1007,  102])
got:
tensor([11968,  8043,  1012, 11968, 20106,  9463,  1006,  2330,  1006,  1005,
         2358,  2099,  2692,  1005,  1010,  1005, 21144,  1005,  1007,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 11968,  8043,  1012, 11968, 20106,  9463,  1006,  2330,  1006,
         1005,  2358,  2099,  2692,  1005,  1010,  1005, 21144,  1005,  1007,
         1007,   102])
got:
tensor([13075,  2692,  1012, 10651,  1006,  1063, 13075,  2487,  1024, 13075,
         2475,  1031,  1005,  2358,  2099,  2692,  1005,  1033,  1065,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1012, 10651,  1006,  1063, 13075,  2487,  1024,
        13075,  2475,  1031,  1005,  2358,  2099,  2692,  1005,  1033,  1065,
         1007,   102])
got:
tensor([ 1031,  1006,  1039,  1013,  1056,  1007,  2005,  1039,  1010,  1056,
         1999, 14101,  1006, 13075,  2692,  1010, 13075,  2487,  1007,  1033,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  1031,  1006,  1039,  1013,  1056,  1007,  2005,  1039,  1010,
         1056,  1999, 14101,  1006, 13075,  2692,  1010, 13075,  2487,  1007,
         1033,   102])
got:
tensor([27937,  1012,  2073,  1006, 27937,  1012,  1999,  2487,  2094,  1006,
        13075,  2692,  1010, 13075,  2487,  1007,  1007,  1031,  1014,  1033,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 27937,  1012,  2073,  1006, 27937,  1012,  1999,  2487,  2094,
         1006, 13075,  2692,  1010, 13075,  2487,  1007,  1007,  1031,  1014,
         1033,   102])
got:
tensor([ 2128,  1012,  2424,  8095,  1006,  1005,  1032,  1032,  1055,  1009,
         1064,  1032,  1032,  1055,  1009,  1005,  1010, 13075,  2692,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  2128,  1012,  2424,  8095,  1006,  1005,  1032,  1032,  1055,
         1009,  1064,  1032,  1032,  1055,  1009,  1005,  1010, 13075,  2692,
         1007,   102])
got:
tensor([1000, 1000, 1000, 1063, 1024, 1012, 1019, 1065, 1000, 1000, 1000, 1012,
        4289, 1006, 1005, 2358, 2099, 2692, 1005, 1007,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102])
source:
tensor([ 101, 1000, 1000, 1000, 1063, 1024, 1012, 1019, 1065, 1000, 1000, 1000,
        1012, 4289, 1006, 1005, 2358, 2099, 2692, 1005, 1007,  102])
got:
tensor([ 2709,  2128,  1012,  4942,  1006,  1005,  2358,  2099,  2692,  1005,
         1010,  1005,  2358,  2099,  2487,  1005,  1010, 13075,  2692,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  2709,  2128,  1012,  4942,  1006,  1005,  2358,  2099,  2692,
         1005,  1010,  1005,  2358,  2099,  2487,  1005,  1010, 13075,  2692,
         1007,   102])
got:
tensor([4062, 1012, 2424, 1035, 5783, 1035, 2011, 1035, 8909, 1006, 1005, 2358,
        2099, 2692, 1005, 1007, 1012, 3154, 1006, 1007,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102])
source:
tensor([ 101, 4062, 1012, 2424, 1035, 5783, 1035, 2011, 1035, 8909, 1006, 1005,
        2358, 2099, 2692, 1005, 1007, 1012, 3154, 1006, 1007,  102])
got:
tensor([ 6140,  1006,  2035,  1006,  2773,  1031,  1014,  1033,  1012,  2003,
        29547,  2099,  1006,  1007,  2005,  2773,  1999, 13075,  2692,  1007,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  6140,  1006,  2035,  1006,  2773,  1031,  1014,  1033,  1012,
         2003, 29547,  2099,  1006,  1007,  2005,  2773,  1999, 13075,  2692,
         1007,  1007,   102])
got:
tensor([10439,  1012,  9530,  8873,  2290,  1031,  1005,  3036,  1035,  4236,
         1035, 24471,  2140,  1005,  1033,  1027,  1005,  2358,  2099,  2692,
         1005,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 10439,  1012,  9530,  8873,  2290,  1031,  1005,  3036,  1035,
         4236,  1035, 24471,  2140,  1005,  1033,  1027,  1005,  2358,  2099,
         2692,  1005,   102])
got:
tensor([27937,  1012,  2812,  1006, 27937,  1012,  9140,  1006,  1031, 13075,
         2692,  1010, 13075,  2487,  1033,  1007,  1010,  8123,  1027,  1014,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 27937,  1012,  2812,  1006, 27937,  1012,  9140,  1006,  1031,
        13075,  2692,  1010, 13075,  2487,  1033,  1007,  1010,  8123,  1027,
         1014,  1007,   102])
got:
tensor([1040, 2546, 1012, 2275, 1035, 5950, 1006, 1031, 1005, 2358, 2099, 2692,
        1005, 1010, 1005, 2358, 2099, 2487, 1005, 1033, 1007,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102])
source:
tensor([ 101, 1040, 2546, 1012, 2275, 1035, 5950, 1006, 1031, 1005, 2358, 2099,
        2692, 1005, 1010, 1005, 2358, 2099, 2487, 1005, 1033, 1007,  102])
got:
tensor([ 6140,  1006,  1005,  1032,  1050,  1005,  1012,  3693,  1006,  2358,
         2099,  1006,  1052,  1007,  2005,  1052,  1999, 13075,  2692,  1007,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  6140,  1006,  1005,  1032,  1050,  1005,  1012,  3693,  1006,
         2358,  2099,  1006,  1052,  1007,  2005,  1052,  1999, 13075,  2692,
         1007,  1007,   102])
got:
tensor([19616,  1006,  2862,  1006,  2951,  1012,  5167,  1006,  1007,  1007,
         1010,  3145,  1027, 23375,  1060,  1024,  1060,  1031,  1015,  1033,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 19616,  1006,  2862,  1006,  2951,  1012,  5167,  1006,  1007,
         1007,  1010,  3145,  1027, 23375,  1060,  1024,  1060,  1031,  1015,
         1033,  1007,   102])
got:
tensor([ 6140,  1006,  4942, 21572,  9623,  2015,  1012,  4831,  2078,  1006,
         1005,  2358,  2099,  2692,  1005,  1010,  5806,  1027,  2995,  1010,
         2358, 26797,  2102,  1027,  4942, 21572,  9623,  2015,  1012,  8667,
         1007,  1012,  2358, 26797,  2102,  1012,  3191,  1006,  1007,  1007,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  2709,  1035,  3642,  1027,  4942, 21572,  9623,  2015,  1012,
         2655,  1006,  1005,  2358,  2099,  2692,  1005,  1010,  5806,  1027,
         2995,  1007,   102])
got:
tensor([2128, 1012, 2424, 8095, 1006, 1005, 1006, 1031, 1037, 1011, 1062, 1033,
        1007, 1008, 1005, 1010, 1005, 2358, 2099, 2692, 1005, 1007,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102])
source:
tensor([ 101, 2128, 1012, 2424, 8095, 1006, 1005, 1006, 1031, 1037, 1011, 1062,
        1033, 1008, 1007, 1005, 1010, 1005, 2358, 2099, 2692, 1005, 1007,  102])
got:
tensor([2128, 1012, 2424, 8095, 1006, 1005, 1006, 1031, 1037, 1011, 1062, 1033,
        1007, 1008, 1005, 1010, 1005, 2358, 2099, 2692, 1005, 1007,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102])
source:
tensor([ 101, 2128, 1012, 2424, 8095, 1006, 1005, 1006, 1031, 1037, 1011, 1062,
        1033, 1007, 1008, 1005, 1010, 1005, 2358, 2099, 2692, 1005, 1007,  102])
got:
tensor([19616,  1006,  2275,  1006, 13075,  2692,  1007,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 19616,  1006,  2275,  1006,  2009,  8743, 13669,  2015,  1012,
         4677,  1012,  2013,  1035,  2009,  6906,  3468,  1006, 13075,  2692,
         1007,  1007,  1007,   102])
got:
tensor([22260,  1012,  2275,  1035, 28712, 16336,  2140,  1006,  1005,  4860,
         1006,  1002,  1034,  1032,  1032, 25022, 11890,  1002,  1039,  1007,
         1005,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 22260,  1012,  2275,  1035, 28712, 16336,  2140,  1006,  1005,
         4860,  1006,  1002,  1034,  1032,  1032, 25022, 11890,  1002,  1039,
         1007,  1005,  1007,   102])
got:
tensor([13075,  2692,  1027,  1031,  8875,  2005,  2773,  1999, 13075,  2487,
         2005,  8875,  1999,  2773,  1012,  3975,  1006,  1005,  1010,  1005,
         1007,  1033,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1027,  1031,  8875,  2005,  2773,  1999, 13075,
         2487,  2005,  8875,  1999,  2773,  1012,  3975,  1006,  1005,  1010,
         1005,  1007,  1033,   102])
got:
tensor([ 3058,  7292,  1012,  3058,  7292,  1012,  2358, 14536,  7292,  1006,
         1005,  2358,  2099,  2692,  1005,  1010,  1005,  2358,  2099,  2487,
         1005,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  3058,  7292,  1012,  3058,  7292,  1012,  2358, 14536,  7292,
         1006,  1005,  2358,  2099,  2692,  1005,  1010,  1005,  2358,  2099,
         2487,  1005,  1007,   102])
got:
tensor([16371,  8737,  2100,  1012, 11089,  1006, 16371,  8737,  2100,  1012,
        11089,  1006, 13075,  2475,  1010, 13075,  2692,  1007,  1010, 13075,
         2475,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 16371,  8737,  2100,  1012, 11089,  1006, 16371,  8737,  2100,
         1012, 11089,  1006, 13075,  2475,  1010, 13075,  2692,  1007,  1010,
        13075,  2475,  1007,   102])
got:
tensor([ 1040,  2546,  1012,  2177,  3762,  1006, 22851,  1012,  2051, 17058,
         2121,  1006, 10424,  2063,  4160,  1027,  1005, 13075,  2692,  1005,
         1007,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  1040,  2546,  1012,  2177,  3762,  1006, 22851,  1012,  2051,
        17058,  2121,  1006, 10424,  2063,  4160,  1027,  1005, 13075,  2692,
         1005,  1007,  1007,   102])
got:
tensor([19616,  1006,  2862,  1006, 13075,  2692,  1012,  5167,  1006,  1007,
         1007,  1010,  3145,  1027, 23375,  1060,  1024,  1060,  1031,  1015,
         1033,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 19616,  1006,  2862,  1006, 13075,  2692,  1012,  5167,  1006,
         1007,  1007,  1010,  3145,  1027, 23375,  1060,  1024,  1060,  1031,
         1015,  1033,  1007,   102])
got:
tensor([26718,  1027,  3058,  7292,  1012,  3058,  7292,  1012, 11506,  1006,
         3058,  7292,  1012,  3058,  1012,  2651,  1006,  1007,  1010, 13075,
         2692,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 26718,  1027,  3058,  7292,  1012,  3058,  7292,  1012, 11506,
         1006,  3058,  7292,  1012,  3058,  1012,  2651,  1006,  1007,  1010,
        13075,  2692,  1007,   102])
got:
tensor([ 2862,  1012,  4066,  1006,  3145,  1027, 23375,  8875,  1024,  8875,
         1031,  1005,  2358,  2099,  2692,  1005,  1033,  1010,  7901,  1027,
         2995,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101,  2862,  1012,  4066,  1006,  3145,  1027, 23375,  8875,  1024,
         8875,  1031,  1005,  2358,  2099,  2692,  1005,  1033,  1010,  7901,
         1027,  2995,  1007,   102])
got:
tensor([ 1040,  2546,  2487,  1027, 22851,  1012,  3191,  1035, 10751,  2546,
         1006,  1005,  2358,  2099,  2692,  1005,  1010,  1005,  2358,  2099,
         2487,  1005,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101,  1040,  2546,  2487,  1027, 22851,  1012,  3191,  1035, 10751,
         2546,  1006,  1005,  2358,  2099,  2692,  1005,  1010,  1005,  2358,
         2099,  2487,  1005,  1007,   102])
got:
tensor([ 8040, 20097,  1006,  1060,  1010,  1061,  1010,  1055,  1027,  3156,
         1010,  3609,  1027,  1005,  2665,  1005,  1010, 12115,  1027,  1005,
         1044,  1005,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101,  8040, 20097,  1006,  1060,  1010,  1061,  1010,  1055,  1027,
         3156,  1010,  3609,  1027,  1005,  2665,  1005,  1010, 12115,  1027,
         1005,  1044,  1005,  1007,   102])
got:
tensor([ 7680,  1006,  8875,  1031,  1005,  2358,  2099,  2692,  1005,  1033,
         2005,  8875,  1999,  2862,  1006, 13075,  2487,  1012,  5300,  1006,
         1007,  1007,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101,  7680,  1006,  8875,  1031,  1005,  2358,  2099,  2692,  1005,
         1033,  2005,  8875,  1999,  2862,  1006, 13075,  2487,  1012,  5300,
         1006,  1007,  1007,  1007,   102])
got:
tensor([ 3058,  7292,  1012,  3058,  1006,  2456,  1010,  1016,  1010,  1015,
         1007,  1011,  3058,  7292,  1012, 22313, 20042,  2050,  1006,  2420,
         1027,  1015,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101,  3058,  7292,  1012,  3058,  1006,  2456,  1010,  1016,  1010,
         1015,  1007,  1011,  3058,  7292,  1012, 22313, 20042,  2050,  1006,
         2420,  1027,  1015,  1007,   102])
got:
tensor([2128, 1012, 3975, 1006, 1005, 1035, 1006, 1029, 1024, 2005, 1064, 2030,
        1064, 1998, 1007, 1035, 1005, 1010, 1005, 2358, 2099, 2692, 1005, 1007,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102])
source:
tensor([ 101, 2128, 1012, 3975, 1006, 1005, 1035, 1006, 1029, 1024, 2005, 1064,
        2030, 1064, 1998, 1007, 1035, 1005, 1010, 1005, 2358, 2099, 2692, 1005,
        1007,  102])
got:
tensor([6140, 1006, 1005, 1063, 1014, 1065, 1005, 1012, 4289, 1006, 1005, 2358,
        2099, 2692, 1005, 1012, 1062, 8873, 3363, 1006, 1016, 1007, 1007, 1007,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102])
source:
tensor([ 101, 6140, 1006, 1005, 1063, 1014, 1065, 1005, 1012, 4289, 1006, 1005,
        2358, 2099, 2692, 1005, 1012, 1062, 8873, 3363, 1006, 1016, 1007, 1007,
        1007,  102])
got:
tensor([ 1063,  3145,  1024, 11748,  2005,  3145,  1010, 11748,  1999,  2862,
         1006, 13075,  2692,  1012,  5167,  1006,  1007,  1007,  2065, 11748,
          999,  1027,  4413,  1065,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101,  1063,  3145,  1024, 11748,  2005,  3145,  1010, 11748,  1999,
         2862,  1006, 13075,  2692,  1012,  5167,  1006,  1007,  1007,  2065,
        11748,   999,  1027,  4413,  1065,   102])
got:
tensor([22851,  1012,  9530, 11266,  1006,  1006, 13075,  2692,  1010, 13075,
         2487,  1007,  1010,  8123,  1027,  1015,  1007,  1012,  2812,  1006,
         8123,  1027,  1015,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101, 22851,  1012,  9530, 11266,  1006,  1006, 13075,  2692,  1010,
        13075,  2487,  1007,  1010,  8123,  1027,  1015,  1007,  1012,  2812,
         1006,  8123,  1027,  1015,  1007,   102])
got:
tensor([ 4942, 21572,  9623,  2015,  1012,  2655,  1006,  1031,  1005,  2358,
         2099,  2487,  1005,  1010,  1005,  2358,  2099,  2692,  1005,  1010,
        13075,  2692,  1033,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101,  4942, 21572,  9623,  2015,  1012,  2655,  1006,  1031,  1005,
         2358,  2099,  2487,  1005,  1010,  1005,  2358,  2099,  2692,  1005,
         1010, 13075,  2692,  1033,  1007,   102])
got:
tensor([ 2275,  1006,  1031,  1005,  2358,  2099,  2692,  1005,  1010,  1005,
         2358,  2099,  2487,  1005,  1033,  1007,  1012, 26354, 12083, 13462,
         1006, 13075,  2692,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101,  2275,  1006,  1031,  1005,  2358,  2099,  2692,  1005,  1010,
         1005,  2358,  2099,  2487,  1005,  1033,  1007,  1012, 26354, 12083,
        13462,  1006, 13075,  2692,  1007,   102])
got:
tensor([ 2709, 13075,  2692,  1027,  1027,  2862,  1006,  2846,  1006, 13075,
         2692,  1031,  1014,  1033,  1010, 13075,  2692,  1031,  1011,  1015,
         1033,  1009,  1015,  1007,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101,  2709, 13075,  2692,  1027,  1027,  2862,  1006,  2846,  1006,
        13075,  2692,  1031,  1014,  1033,  1010, 13075,  2692,  1031,  1011,
         1015,  1033,  1009,  1015,  1007,  1007,   102])
got:
tensor([13075,  2692,  1012,  2177,  3762,  1006,  1005,  5310,  1005,  1007,
         1031,  1005,  2358,  2099,  2692,  1005,  1033,  1012, 10938,  1006,
         7680,  1007,  1027,  1027,  1014,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101, 13075,  2692,  1012,  2177,  3762,  1006,  1005,  5310,  1005,
         1007,  1031,  1005,  2358,  2099,  2692,  1005,  1033,  1012, 10938,
         1006,  7680,  1007,  1027,  1027,  1014,   102])
got:
tensor([19616,  1006,  1048,  1010,  3145,  1027, 23375,  1060,  1024,  1006,
         1011, 20014,  1006,  1060,  1031,  1015,  1033,  1007,  1010,  1060,
         1031,  1014,  1033,  1007,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101, 19616,  1006,  1048,  1010,  3145,  1027, 23375,  1060,  1024,
         1006,  1011, 20014,  1006,  1060,  1031,  1015,  1033,  1007,  1010,
         1060,  1031,  1014,  1033,  1007,  1007,   102])
got:
tensor([ 2128,  1012,  2424,  8095,  1006,  1000, 17928,  1032,  1032,  1006,
         1005,  1006,  1012,  1008,  1029,  1007,  1005,  1000,  1010,  1005,
         2358,  2099,  2692,  1005,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101,  2128,  1012,  2424,  8095,  1006,  1000, 17928,  1032,  1032,
         1006,  1005,  1006,  1012,  1008,  1029,  1007,  1005,  1000,  1010,
         1005,  2358,  2099,  2692,  1005,  1007,   102])
got:
tensor([ 6140,  1006,  1005,  1005,  1012,  3693,  1006,  1031,  2358,  2099,
         1006,  2030,  2094,  1006,  1037,  1007,  1007,  2005,  1037,  1999,
        13075,  2692,  1033,  1007,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101,  6140,  1006,  1005,  1005,  1012,  3693,  1006,  1031,  2358,
         2099,  1006,  2030,  2094,  1006,  1037,  1007,  1007,  2005,  1037,
         1999, 13075,  2692,  1033,  1007,  1007,   102])
got:
tensor([ 1000,  1000,  1000,  1000,  1000,  1000,  1012,  3693,  1006, 11307,
         1006,  2358,  2099,  1012,  2003,  4305, 23806,  1010,  1005,  2358,
         2099,  2692,  1005,  1007,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101,  1000,  1000,  1000,  1000,  1000,  1000,  1012,  3693,  1006,
        11307,  1006,  2358,  2099,  1012,  2003,  4305, 23806,  1010,  1005,
         2358,  2099,  2692,  1005,  1007,  1007,   102])
got:
tensor([ 6140,  1006,  2862,  1006,  2009,  8743, 13669,  2015,  1012,  4031,
         1006,  1031,  2358,  2099,  2692,  1033,  1010,  1031,  2358,  2099,
         2487,  1033,  1007,  1007,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101,  6140,  1006,  2862,  1006,  2009,  8743, 13669,  2015,  1012,
         4031,  1006,  1031,  2358,  2099,  2692,  1033,  1010,  1031,  2358,
         2099,  2487,  1033,  1007,  1007,  1007,   102])
got:
tensor([ 3565,  1006, 13075,  2692,  1010,  2969,  1007,  1012,  1035,  1035,
         1999,  4183,  1035,  1035,  1006,  1008, 12098,  5620,  1010,  1008,
         1008,  6448,  2906,  5620,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101,  3565,  1006, 13075,  2692,  1010,  2969,  1007,  1012,  1035,
         1035,  1999,  4183,  1035,  1035,  1006,  1008, 12098,  5620,  1010,
         1008,  1008,  6448,  2906,  5620,  1007,   102])
got:
tensor([2358, 2099, 2692, 1012, 4066, 1006, 1031, 1005, 2358, 2099, 2487, 1005,
        1010, 1005, 2358, 2099, 2475, 1005, 1010, 1005, 2358, 2099, 2509, 1005,
        1033, 1007,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102])
source:
tensor([ 101, 2358, 2099, 2692, 1012, 4066, 1006, 1031, 1005, 2358, 2099, 2487,
        1005, 1010, 1005, 2358, 2099, 2475, 1005, 1010, 1005, 2358, 2099, 2509,
        1005, 1033, 1007,  102])
got:
tensor([13075,  2692,  1012,  2177,  3762,  1006,  1005,  2358,  2099,  2692,
         1005,  1007,  1012, 12943,  2290,  1006, 23375,  1060,  1024,  1060,
         1012,  2000,  9863,  1006,  1007,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101, 13075,  2692,  1012,  2177,  3762,  1006,  1005,  2358,  2099,
         2692,  1005,  1007,  1012, 12943,  2290,  1006, 23375,  1060,  1024,
         1060,  1012,  2000,  9863,  1006,  1007,  1007,   102])
got:
tensor([24471,  6894,  2497,  1012, 11968,  3366,  1012,  4895, 28940, 12184,
         1006, 24471,  6894,  2497,  1012, 11968,  3366,  1012,  4895, 28940,
        12184,  1006, 13075,  2692,  1007,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101, 24471,  6894,  2497,  1012, 11968,  3366,  1012,  4895, 28940,
        12184,  1006, 24471,  6894,  2497,  1012, 11968,  3366,  1012,  4895,
        28940, 12184,  1006, 13075,  2692,  1007,  1007,   102])
got:
tensor([13075,  2692,  1012,  2013,  9863,  1006,  1031, 20014,  1006, 11748,
         1007,  2005, 11748,  1999,  2358,  8718,  1012,  3191,  1006,  1007,
         1012,  3975,  1006,  1007,  1033,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101, 13075,  2692,  1012,  2013,  9863,  1006,  1031, 20014,  1006,
        11748,  1007,  2005, 11748,  1999,  2358,  8718,  1012,  3191,  1006,
         1007,  1012,  3975,  1006,  1007,  1033,  1007,   102])
got:
tensor([ 9986,  1012, 26726,  8988,  1006,  1000,  1013,  1013,  1037,  1031,
         4627,  1011,  2007,  1006,  3793,  1006,  1007,  1010,  1005,  2070,
         3793,  1005,  1007,  1033,  1000,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101,  9986,  1012, 26726,  8988,  1006,  1000,  1013,  1013,  1037,
         1031,  4627,  1011,  2007,  1006,  3793,  1006,  1007,  1010,  1005,
         2070,  3793,  1005,  1007,  1033,  1000,  1007,   102])
got:
tensor([13075,  2692,  1027, 24471,  6894,  2497,  1012, 11968,  3366,  1012,
         4895, 28940, 12184,  1006, 13075,  2692,  1007,  1012, 21933,  3207,
         1006,  1005, 13075,  2487,  1005,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101, 13075,  2692,  1027, 24471,  6894,  2497,  1012, 11968,  3366,
         1012,  4895, 28940, 12184,  1006, 13075,  2692,  1007,  1012, 21933,
         3207,  1006,  1005, 13075,  2487,  1005,  1007,   102])
got:
tensor([ 1031,  1049,  1012,  2707,  1006,  1007,  2005,  1049,  1999,  2128,
         1012,  2424, 21646,  1006,  1005,  3231,  1005,  1010,  1005,  3231,
         3231,  3231,  3231,  1005,  1007,  1033,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101,  1031,  1049,  1012,  2707,  1006,  1007,  2005,  1049,  1999,
         2128,  1012,  2424, 21646,  1006,  1005,  3231,  1005,  1010,  1005,
         3231,  3231,  3231,  3231,  1005,  1007,  1033,   102])
got:
tensor([22278,  1012,  1999,  3388,  1035, 23961, 10441,  1006,  2358,  6820,
         6593,  1012,  5308,  1006,  1005,   999,  1048,  1005,  1010, 19883,
         2692, 19841, 21084, 22394,  1007,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101, 22278,  1012,  1999,  3388,  1035, 23961, 10441,  1006,  2358,
         6820,  6593,  1012,  5308,  1006,  1005,   999,  1048,  1005,  1010,
        19883,  2692, 19841, 21084, 22394,  1007,  1007,   102])
got:
tensor([13075,  2692,  1027, 27937,  1012,  9140,  1006,  1031,  1045,  2005,
         1045,  1999,  2846,  1006,  2531,  1007,  1033,  1010, 26718, 18863,
         1027, 27937,  1012, 14257, 21084,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101, 13075,  2692,  1027, 27937,  1012,  9140,  1006,  1031,  1045,
         2005,  1045,  1999,  2846,  1006,  2531,  1007,  1033,  1010, 26718,
        18863,  1027, 27937,  1012, 14257, 21084,  1007,   102])
got:
tensor([13075,  2692,  1031, 27937,  1012, 19027, 15465,  1006, 13075,  2692,
         1012,  4338,  1031,  1014,  1033,  1007,  1031,  1024,  1010,  1006,
         3904,  1007,  1033,  1010, 13075,  2487,  1033,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101, 13075,  2692,  1031, 27937,  1012, 19027, 15465,  1006, 13075,
         2692,  1012,  4338,  1031,  1014,  1033,  1007,  1031,  1024,  1010,
         1006,  3904,  1007,  1033,  1010, 13075,  2487,  1033,   102])
got:
tensor([ 1031,  2128,  1012,  3975,  1006,  1005,  1035,  1006,  1029,  1024,
         1042,  1029,  2030,  1064,  1998,  1007,  1035,  1005,  1010,  1055,
         1007,  2005,  1055,  1999, 13075,  2692,  1033,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101,  1031,  2128,  1012,  3975,  1006,  1005,  1035,  1006,  1029,
         1024,  1042,  1029,  2030,  1064,  1998,  1007,  1035,  1005,  1010,
         1055,  1007,  2005,  1055,  1999, 13075,  2692,  1033,   102])
got:
tensor([13075,  2692,  1012,  4066,  1006,  2344,  1027,  1031,  1005,  2358,
         2099,  2692,  1005,  1010,  1005,  2358,  2099,  2487,  1005,  1010,
         1005,  2358,  2099,  2475,  1005,  1033,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101, 13075,  2692,  1012,  4066,  1006,  2344,  1027,  1031,  1005,
         2358,  2099,  2692,  1005,  1010,  1005,  2358,  2099,  2487,  1005,
         1010,  1005,  2358,  2099,  2475,  1005,  1033,  1007,   102])
got:
tensor([ 1037,  1027,  2330,  1006,  1005,  2358,  2099,  2692,  1005,  1010,
         1005, 21144,  1005,  1007,  1012,  3191,  1006,  1007,  1012,  4372,
        16044,  1006,  1005, 13075,  2692,  1005,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101,  1037,  1027,  2330,  1006,  1005,  2358,  2099,  2692,  1005,
         1010,  1005, 21144,  1005,  1007,  1012,  3191,  1006,  1007,  1012,
         4372, 16044,  1006,  1005, 13075,  2692,  1005,  1007,   102])
got:
tensor([2128, 1012, 4942, 1006, 1005, 1006, 1032, 1032, 1040, 1009, 1007, 1005,
        1010, 1005, 1000, 1032, 1032, 1015, 1000, 1005, 1010, 1005, 2358, 2099,
        2692, 1005, 1007,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102])
source:
tensor([ 101, 2128, 1012, 4942, 1006, 1005, 1006, 1032, 1032, 1040, 1009, 1007,
        1005, 1010, 1005, 1000, 1032, 1032, 1015, 1000, 1005, 1010, 1005, 2358,
        2099, 2692, 1005, 1007,  102])
got:
tensor([ 2085,  1027,  3058,  7292,  1012,  3058,  7292,  1012,  2085,  1006,
         1007,  1012,  2358, 12881,  7292,  1006,  1005,  1003,  1044,  1024,
         1003,  1049,  1024,  1003,  1055,  1005,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101,  2085,  1027,  3058,  7292,  1012,  3058,  7292,  1012,  2085,
         1006,  1007,  1012,  2358, 12881,  7292,  1006,  1005,  1003,  1044,
         1024,  1003,  1049,  1024,  1003,  1055,  1005,  1007,   102])
got:
tensor([ 6140,  1006, 24471,  6894,  2497,  1012, 11968,  3366,  1012,  4895,
        28940, 12184,  1006, 13075,  2692,  1007,  1012, 21933,  3207,  1006,
         1005, 21183,  2546,  2620,  1005,  1007,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101,  6140,  1006, 24471,  6894,  2497,  1012, 11968,  3366,  1012,
         4895, 28940, 12184,  1006, 13075,  2692,  1007,  1012, 21933,  3207,
         1006,  1005, 21183,  2546,  2620,  1005,  1007,  1007,   102])
got:
tensor([ 3058, 16429,  3501,  1027,  3058,  7292,  1012,  3058,  7292,  1012,
         2358, 14536,  7292,  1006, 13075,  2692,  1010,  1005,  2358,  2099,
         2692,  1005,  1007,  1012,  3058,  1006,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101,  3058, 16429,  3501,  1027,  3058,  7292,  1012,  3058,  7292,
         1012,  2358, 14536,  7292,  1006, 13075,  2692,  1010,  1005,  2358,
         2099,  2692,  1005,  1007,  1012,  3058,  1006,  1007,   102])
got:
tensor([27937,  1012, 16417, 17421,  1006,  1005,  1012,  1012,  1012,  1046,
         1010,  1012,  1012,  1046,  1011,  1028,  1012,  1012,  1012,  1005,
         1010, 13075,  2692,  1010, 13075,  2692,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101, 27937,  1012, 16417, 17421,  1006,  1005,  1012,  1012,  1012,
         1046,  1010,  1012,  1012,  1012,  1046,  1011,  1028,  1012,  1012,
         1012,  1005,  1010, 13075,  2692,  1010, 13075,  2692,  1007,   102])
got:
tensor([ 1000,  1000,  1000,  1032,  1032,  1057,  8889,  2509, 21906,  1032,
         1032,  1057,  8889,  2509,  2063,  1000,  1000,  1000,  1012, 21933,
         3207,  1006,  1005, 27260,  1011,  4019,  1005,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101,  1000,  1000,  1000,  1032,  1032,  1057,  8889,  2509, 21906,
         1032,  1032,  1057,  8889,  2509,  2063,  1000,  1000,  1000,  1012,
        21933,  3207,  1006,  1005, 27260,  1011,  4019,  1005,  1007,   102])
got:
tensor([ 6140,  1006,  2128,  1012,  4942,  1006,  1005,  1006,  1032,  1032,
         1059,  1007,  1032,  1032,  1015,  1009,  1005,  1010,  1005,  1032,
         1032,  1015,  1005,  1010, 13075,  2692,  1007,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101,  6140,  1006,  2128,  1012,  4942,  1006,  1005,  1006,  1032,
         1032,  1059,  1007,  1032,  1032,  1015,  1009,  1005,  1010,  1005,
         1032,  1032,  1015,  1005,  1010, 13075,  2692,  1007,  1007,   102])
got:
tensor([ 1056,  1027,  3058,  7292,  1012,  3058,  7292,  1012,  2085,  1006,
         1007,  1056,  1011,  3058,  7292,  1012, 22313, 20042,  2050,  1006,
         2847,  1027,  1015,  1010,  2781,  1027,  2184,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101,  1056,  1027,  3058,  7292,  1012,  3058,  7292,  1012,  2085,
         1006,  1007,  1056,  1011,  3058,  7292,  1012, 22313, 20042,  2050,
         1006,  2847,  1027,  1015,  1010,  2781,  1027,  2184,  1007,   102])
got:
tensor([ 1031,  1049,  1012,  2707,  1006,  1007,  2005,  1049,  1999,  2128,
         1012,  2424, 21646,  1006,  1005,  1006,  1029,  1027, 23746,  1007,
         1005,  1010,  1005, 13075,  2487,  1005,  1007,  1033,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101,  1031,  1049,  1012,  2707,  1006,  1007,  2005,  1049,  1999,
         2128,  1012,  2424, 21646,  1006,  1005,  1006,  1029,  1027, 23746,
         1007,  1005,  1010,  1005, 13075,  2487,  1005,  1007,  1033,   102])
got:
tensor([19616,  1006, 13075,  2692,  1010,  3145,  1027, 23375,  1060,  1024,
        13075,  2487,  1012,  5950,  1006,  2862,  1006,  1060,  1012,  5300,
         1006,  1007,  1007,  1031,  1014,  1033,  1007,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101, 19616,  1006, 13075,  2692,  1010,  3145,  1027, 23375,  1060,
         1024, 13075,  2487,  1012,  5950,  1006,  2862,  1006,  1060,  1012,
         5300,  1006,  1007,  1007,  1031,  1014,  1033,  1007,  1007,   102])
got:
tensor([24471,  6894,  2497,  1012, 11968,  3366,  1012,  4895, 28940, 12184,
         1006, 24471,  6894,  2497,  1012, 11968,  3366,  1012,  4895, 28940,
        12184,  1006,  1005,  2358,  2099,  2692,  1005,  1007,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101, 24471,  6894,  2497,  1012, 11968,  3366,  1012,  4895, 28940,
        12184,  1006, 24471,  6894,  2497,  1012, 11968,  3366,  1012,  4895,
        28940, 12184,  1006,  1005,  2358,  2099,  2692,  1005,  1007,  1007,
          102])
got:
tensor([22851,  1012,  9530, 11266,  1006,  1043,  2005,  1035,  1010,  1043,
         1999, 13075,  2692,  1012,  2177,  3762,  1006,  1005,  8909,  1005,
         1007,  2065, 18798,  1006,  1043,  1007,  1028,  1015,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101, 22851,  1012,  9530, 11266,  1006,  1043,  2005,  1035,  1010,
         1043,  1999, 13075,  2692,  1012,  2177,  3762,  1006,  1005,  8909,
         1005,  1007,  2065, 18798,  1006,  1043,  1007,  1028,  1015,  1007,
          102])
got:
tensor([13075,  2692,  1027, 13075,  2692,  1012, 21933,  3207,  1006,  1005,
         2358,  2099,  2692,  1005,  1010,  1005,  8568,  1005,  1007,  1012,
         4372, 16044,  1006,  1005,  2358,  2099,  2692,  1005,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101, 13075,  2692,  1027, 13075,  2692,  1012, 21933,  3207,  1006,
         1005,  2358,  2099,  2692,  1005,  1010,  1005,  8568,  1005,  1007,
         1012,  4372, 16044,  1006,  1005,  2358,  2099,  2692,  1005,  1007,
          102])
got:
tensor([ 1000,  1000,  1000,   100,  1000,  1000,  1000,  1012,  4372, 16044,
         1006,  1005,  6315,  1035, 27260,  1035,  4019,  1005,  1007,  1012,
        21933,  3207,  1006,  1005, 21183,  2546,  1011,  1022,  1005,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101,  1000,  1000,  1000,   100,  1000,  1000,  1000,  1012,  4372,
        16044,  1006,  1005,  6315,  1035, 27260,  1035,  4019,  1005,  1007,
         1012, 21933,  3207,  1006,  1005, 21183,  2546,  1011,  1022,  1005,
         1007,   102])
got:
tensor([ 2695,  1035,  3433,  1027, 11186,  1012,  2695,  1006, 24471,  2140,
         1027,  1005,  8299,  1024,  1013,  1013,  8299,  8428,  1012,  8917,
         1013,  2695,  1005,  1010,  1046,  3385,  1027, 13075,  2692,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101,  2695,  1035,  3433,  1027, 11186,  1012,  2695,  1006, 24471,
         2140,  1027,  1005,  8299,  1024,  1013,  1013,  8299,  8428,  1012,
         8917,  1013,  2695,  1005,  1010,  1046,  3385,  1027, 13075,  2692,
         1007,   102])
got:
tensor([13075,  2692,  1027,  1063,  3145,  1024, 13075,  2487,  2005,  3145,
         1010, 13075,  2487,  1999,  2862,  1006, 13075,  2692,  1012,  5167,
         1006,  1007,  1007,  2065, 13075,  2487,   999,  1027,  4413,  1065,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101, 13075,  2692,  1027,  1063,  3145,  1024, 13075,  2487,  2005,
         3145,  1010, 13075,  2487,  1999,  2862,  1006, 13075,  2692,  1012,
         5167,  1006,  1007,  1007,  2065, 13075,  2487,   999,  1027,  4413,
         1065,   102])
got:
tensor([ 4062,  1012,  2424,  1035,  3787,  1035,  2011,  1035, 26726,  8988,
         1006,  1000,  1013,  1013,  1008,  1031,  3397,  1006,  3793,  1006,
         1007,  1010,  1005,  2026,  6462,  1005,  1007,  1033,  1000,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101,  4062,  1012,  2424,  1035,  3787,  1035,  2011,  1035, 26726,
         8988,  1006,  1000,  1013,  1013,  1008,  1031,  3397,  1006,  3793,
         1006,  1007,  1010,  1005,  2026,  6462,  1005,  1007,  1033,  1000,
         1007,   102])
got:
tensor([27260,  2850,  2696,  1012,  3671,  4697,  1006,  1005,  1050, 24316,
         2094,  1005,  1010, 13075,  2692,  1007,  1012,  4372, 16044,  1006,
         1005,  2358,  2099,  2692,  1005,  1010,  1005,  8568,  1005,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101, 27260,  2850,  2696,  1012,  3671,  4697,  1006,  1005,  1050,
        24316,  2094,  1005,  1010, 13075,  2692,  1007,  1012,  4372, 16044,
         1006,  1005,  2358,  2099,  2692,  1005,  1010,  1005,  8568,  1005,
         1007,   102])
got:
tensor([ 4942, 21572,  9623,  2015,  1012,  2655,  1006,  1031,  1005,  3844,
         7698,  1005,  1010,  1005,  1013,  1054,  1005,  1010,  1005,  1013,
         1056,  1005,  1010,  1005,  2358,  2099,  2692,  1005,  1033,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101,  4942, 21572,  9623,  2015,  1012,  2655,  1006,  1031,  1005,
         3844,  7698,  1005,  1010,  1005,  1013,  1054,  1005,  1010,  1005,
         1013,  1056,  1005,  1010,  1005,  2358,  2099,  2692,  1005,  1033,
         1007,   102])
got:
tensor([ 1040,  2546,  1031,  1005, 13075,  2692,  1005,  1033,  1012,  2358,
         2099,  1012,  3975,  1006,  1005,  1011,  1005,  1007,  1012,  2358,
         2099,  1031,  1014,  1033,  1012,  2004, 13874,  1006, 20014,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101,  1040,  2546,  1031,  1005, 13075,  2692,  1005,  1033,  1012,
         2358,  2099,  1012,  3975,  1006,  1005,  1011,  1005,  1007,  1012,
         2358,  2099,  1031,  1014,  1033,  1012,  2004, 13874,  1006, 20014,
         1007,   102])
got:
tensor([ 2051,  1012, 12395,  7292,  1006,  3058,  7292,  1012,  3058,  7292,
         1012,  2358, 14536,  7292,  1006, 13075,  2692,  1010,  1005,  2358,
         2099,  2692,  1005,  1007,  1012,  2051,  8525, 10814,  1006,  1007,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101,  2051,  1012, 12395,  7292,  1006,  3058,  7292,  1012,  3058,
         7292,  1012,  2358, 14536,  7292,  1006, 13075,  2692,  1010,  1005,
         2358,  2099,  2692,  1005,  1007,  1012,  2051,  8525, 10814,  1006,
         1007,  1007,   102])
got:
tensor([13075,  2475,  1012,  5200,  1012, 11307,  1006,  2358,  2099,  2692,
         1027,  1005,  2358,  2099,  2692,  1005,  1010,  2358,  2099,  2487,
         1027,  1005,  2358,  2099,  2487,  1005,  1007,  1012,  6526,  1006,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101, 13075,  2475,  1012,  5200,  1012, 11307,  1006,  2358,  2099,
         2692,  1027,  1005,  2358,  2099,  2692,  1005,  1010,  2358,  2099,
         2487,  1027,  1005,  2358,  2099,  2487,  1005,  1007,  1012,  6526,
         1006,  1007,   102])
got:
tensor([27937,  1012,  3972, 12870,  1006,  2358,  2099,  2692,  1010,  2862,
         1006,  2846,  1006,  1014,  1010,  2358,  2099,  2692,  1012,  4338,
         1031,  1015,  1033,  1010,  1022,  1007,  1007,  1010,  8123,  1027,
         1015,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101, 27937,  1012,  3972, 12870,  1006,  2358,  2099,  2692,  1010,
         2862,  1006,  2846,  1006,  1014,  1010,  2358,  2099,  2692,  1012,
         4338,  1031,  1015,  1033,  1010,  1022,  1007,  1007,  1010,  8123,
         1027,  1015,  1007,   102])
got:
tensor([ 1000,  1000,  1000,  2358,  2099,  2692,  1000,  1000,  1000,  1012,
         5672,  1006,  1005, 13075,  2692,  1005,  1010,  1005, 22038,  2595,
         1005,  1010,  1015,  1007,  1012,  2424,  1006,  1005, 13075,  2692,
         1005,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101,  1000,  1000,  1000,  2358,  2099,  2692,  1000,  1000,  1000,
         1012,  5672,  1006,  1005, 13075,  2692,  1005,  1010,  1005, 22038,
         2595,  1005,  1010,  1015,  1007,  1012,  2424,  1006,  1005, 13075,
         2692,  1005,  1007,   102])
got:
tensor([ 6140,  1006,  2128,  1012,  4942,  1006,  1005,  1031,  1035,  1003,
         1034,  1002,  1033,  1005,  1010,  1005,  1032,  1032,  1032,  1032,
         1032,  1032,  1043,  1026,  1014,  1028,  1005,  1010, 13075,  2692,
         1007,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101,  6140,  1006,  2128,  1012,  4942,  1006,  1005,  1031,  1035,
         1003,  1034,  1002,  1033,  1005,  1010,  1005,  1032,  1032,  1032,
         1032,  1032,  1032,  1043,  1026,  1014,  1028,  1005,  1010, 13075,
         2692,  1007,  1007,   102])
got:
tensor([13075,  2692,  1027, 13075,  2692,  1031,  1031,  1005,  2358,  2099,
         2549,  1005,  1010,  1005,  2358,  2099,  2629,  1005,  1010,  1005,
         2358,  2099,  2575,  1005,  1010,  1005,  2358,  2099,  2581,  1005,
         1033,  1033,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101, 13075,  2692,  1027, 13075,  2692,  1031,  1031,  1005,  2358,
         2099,  2549,  1005,  1010,  1005,  2358,  2099,  2629,  1005,  1010,
         1005,  2358,  2099,  2575,  1005,  1010,  1005,  2358,  2099,  2581,
         1005,  1033,  1033,   102])
got:
tensor([13075,  2692,  1012,  3975,  1006,  1005,  2358,  2099,  2692,  1005,
         1007,  1031,  1011,  1015,  1033,  1012,  5672,  1006,  1005,  2358,
         2099,  2487,  1005,  1010,  1005,  1005,  1007,  1009,  1005,  2358,
         2099,  2475,  1005,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101, 13075,  2692,  1012,  3975,  1006,  1005,  2358,  2099,  2692,
         1005,  1007,  1031,  1011,  1015,  1033,  1012,  5672,  1006,  1005,
         2358,  2099,  2487,  1005,  1010,  1005,  1005,  1007,  1009,  1005,
         2358,  2099,  2475,  1005,   102])
got:
tensor([13075,  2692,  1012,  3828,  2480,  1006, 13075,  2487,  1010,  1008,
         1031,  2131,  2906,  9447,  1031,  1014,  1033,  1010,  2131,  2906,
         9447,  1031,  1015,  1033,  1010,  2131,  2906,  9447,  1031,  1022,
         1033,  1033,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101, 13075,  2692,  1012,  3828,  2480,  1006, 13075,  2487,  1010,
         1008,  1031,  2131,  2906,  9447,  1031,  1014,  1033,  1010,  2131,
         2906,  9447,  1031,  1015,  1033,  1010,  2131,  2906,  9447,  1031,
         1022,  1033,  1033,  1007,   102])
got:
tensor([13075,  2692,  1012,  8840,  2278,  1031, 13075,  2692,  1012,  2177,
         3762,  1006,  1005,  2358,  2099,  2487,  1005,  1007,  1031,  1005,
         2358,  2099,  2692,  1005,  1033,  1012, 10938,  1006,  7680,  1007,
         1027,  1027,  1014,  1033,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101, 13075,  2692,  1012,  8840,  2278,  1031, 13075,  2692,  1012,
         2177,  3762,  1006,  1005,  2358,  2099,  2487,  1005,  1007,  1031,
         1005,  2358,  2099,  2692,  1005,  1033,  1012, 10938,  1006,  7680,
         1007,  1027,  1027,  1014,  1033,   102])
got:
tensor([27937,  1012,  5717,  2015,  1006,  1006,  1020,  1010,  1023,  1010,
         2322,  1007,  1007,  1009, 27937,  1012,  9140,  1006,  1031,  2358,
         2099,  2692,  1033,  1007,  1031,  1006,  3904,  1007,  1010,  1024,
         1010,  1006,  3904,  1007,  1033,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101, 27937,  1012,  5717,  2015,  1006,  1006,  1020,  1010,  1023,
         1010,  2322,  1007,  1007,  1009, 27937,  1012,  9140,  1006,  1031,
         2358,  2099,  2692,  1033,  1007,  1031,  1006,  3904,  1007,  1010,
         1024,  1010,  1006,  3904,  1007,  1033,   102])
got:
tensor([27937,  1012,  5717,  2015,  1006,  1006,  2358,  2099,  2692,  1007,
         1007,  1009, 27937,  1012,  9140,  1006,  1031,  2358,  2099,  2487,
         1033,  1007,  1012, 24501,  3270,  5051,  1006,  1006,  1015,  1010,
         1023,  1010,  1015,  1007,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101, 27937,  1012,  5717,  2015,  1006,  1006,  2358,  2099,  2692,
         1007,  1007,  1009, 27937,  1012,  9140,  1006,  1031,  2358,  2099,
         2487,  1033,  1007,  1012, 24501,  3270,  5051,  1006,  1006,  1015,
         1010,  1023,  1010,  1015,  1007,  1007,   102])
got:
tensor([ 4949,  1006,  4487,  6593,  1010, 14101,  1006,  1008,  1031,  1031,
         1006,  1047,  1010,  1058,  1007,  2005,  1058,  1999,  3643,  1033,
         2005,  1047,  1010,  3643,  1999,  2862,  1006,  1040,  1012,  5167,
         1006,  1007,  1007,  1033,  1007,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101,  4949,  1006,  4487,  6593,  1010, 14101,  1006,  1008,  1031,
         1031,  1006,  1047,  1010,  1058,  1007,  2005,  1058,  1999,  3643,
         1033,  2005,  1047,  1010,  3643,  1999,  2862,  1006,  1040,  1012,
         5167,  1006,  1007,  1007,  1033,  1007,  1007,   102])
got:
tensor([13075,  2692,  1012, 14255, 22994,  1035,  2795,  1006,  5950,  1027,
         1005, 13075,  2475,  1005,  1010,  7753,  1027,  1005, 13075,  2487,
         1005,  1010, 12943, 25708,  4609,  2278,  1027,  1005,  2946,  1005,
         1010,  6039,  1035,  3643,  1027,  1014,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101, 13075,  2692,  1012, 14255, 22994,  1035,  2795,  1006,  5950,
         1027,  1005, 13075,  2475,  1005,  1010,  7753,  1027,  1005, 13075,
         2487,  1005,  1010, 12943, 25708,  4609,  2278,  1027,  1005,  2946,
         1005,  1010,  6039,  1035,  3643,  1027,  1014,  1007,   102])
got:
tensor([13075,  2692,  1012,  2177,  3762,  1006,  1005,  2358,  2099,  2487,
         1005,  1007,  1031,  1005,  2358,  2099,  2692,  1005,  1033,  1012,
        11307,  1006, 23375,  2358,  2099,  2692,  1024,  2358,  2099,  2692,
         1012,  7680,  1006,  1007,  1027,  1027,  1014,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101, 13075,  2692,  1012,  2177,  3762,  1006,  1005,  2358,  2099,
         2487,  1005,  1007,  1031,  1005,  2358,  2099,  2692,  1005,  1033,
         1012, 11307,  1006, 23375,  2358,  2099,  2692,  1024,  2358,  2099,
         2692,  1012,  7680,  1006,  1007,  1027,  1027,  1014,  1007,   102])
got:
tensor([ 1031,  1045,  2005,  1045,  1010,  1046,  1999,  4372, 17897, 11657,
         1006,  1031,  1005,  2358,  2099,  2692,  1005,  1010,  1005,  3347,
         1005,  1010,  1005,  8670,  2480,  1005,  1033,  1007,  2065,  1046,
         1027,  1027,  1005,  2358,  2099,  2692,  1005,  1033,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101,  1031,  1045,  2005,  1045,  1010,  1046,  1999,  4372, 17897,
        11657,  1006,  1031,  1005,  2358,  2099,  2692,  1005,  1010,  1005,
         3347,  1005,  1010,  1005,  8670,  2480,  1005,  1033,  1007,  2065,
         1046,  1027,  1027,  1005,  2358,  2099,  2692,  1005,  1033,   102])
got:
tensor([20014,  1006,  3058,  7292,  1012,  3058,  7292,  1012,  2358, 14536,
         7292,  1006,  1005,  2358,  2099,  2692,  1005,  1010,  1005,  1003,
         1040,  1013,  1003,  1049,  1013,  1003,  1061,  1005,  1007,  1012,
         2358, 12881,  7292,  1006,  1005,  1003,  1055,  1005,  1007,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101, 20014,  1006,  3058,  7292,  1012,  3058,  7292,  1012,  2358,
        14536,  7292,  1006,  1005,  2358,  2099,  2692,  1005,  1010,  1005,
         1003,  1040,  1013,  1003,  1049,  1013,  1003,  1061,  1005,  1007,
         1012,  2358, 12881,  7292,  1006,  1005,  1003,  1055,  1005,  1007,
         1007,   102])
got:
tensor([ 1052,  1027,  4942, 21572,  9623,  2015,  1012,  4831,  2078,  1006,
         1005,  2358,  2099,  2692,  1005,  1010,  5806,  1027,  2995,  1010,
         2358, 26797,  2102,  1027,  4942, 21572,  9623,  2015,  1012,  8667,
         1010,  2358,  4063,  2099,  1027,  4942, 21572,  9623,  2015,  1012,
         2358, 26797,  2102,  1007,  2005,  2240,  1999,  1052,  1012,  2358,
        26797,  2102,  1012,  3191, 12735,  1006,  1007,  1024,  6140,  1006,
         2240,  1010,  2203,  1027,  1005,  1005,  1007,  2128,  9189,  2389,
         1027,  1052,  1012,  3524,  1006,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101,  6140,  1006,  4942, 21572,  9623,  2015,  1012,  4831,  2078,
         1006,  1005,  2358,  2099,  2692,  1005,  1010,  5806,  1027,  2995,
         1010,  2358, 26797,  2102,  1027,  4942, 21572,  9623,  2015,  1012,
         8667,  1007,  1012,  2358, 26797,  2102,  1012,  3191,  1006,  1007,
         1007,   102])
got:
tensor([13075,  2692,  1027,  1031,  1042,  2005,  1042,  1999,  9808,  1012,
         2862,  4305,  2099,  1006,  1005,  2358,  2099,  2692,  1005,  1007,
         2065,  2128,  1012,  2674,  1006,  1005,  1031,  1014,  1011,  1023,
         1033,  1009,  1012,  1008,  1032,  1032,  1012, 16545,  2290,  1005,
         1010,  1042,  1007,  1033,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101, 13075,  2692,  1027,  1031,  1042,  2005,  1042,  1999,  9808,
         1012,  2862,  4305,  2099,  1006,  1005,  2358,  2099,  2692,  1005,
         1007,  2065,  2128,  1012,  2674,  1006,  1005,  1031,  1014,  1011,
         1023,  1033,  1009,  1012,  1008,  1032,  1032,  1012, 16545,  2290,
         1005,  1010,  1042,  1007,  1033,   102])
got:
tensor([ 1031,  1063,  1005,  2358,  2099,  2475,  1005,  1024,  1037,  1010,
         1005,  2358,  2099,  2509,  1005,  1024,  1038,  1065,  2005,  1037,
         1010,  1038,  1999, 14101,  1006, 13075,  2692,  1031,  1005,  2358,
         2099,  2475,  1005,  1033,  1010, 13075,  2692,  1031,  1005,  2358,
         2099,  2509,  1005,  1033,  1007,  1033,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101,  1031,  1063,  1005,  2358,  2099,  2475,  1005,  1024,  1037,
         1010,  1005,  2358,  2099,  2509,  1005,  1024,  1038,  1065,  2005,
         1037,  1010,  1038,  1999, 14101,  1006, 13075,  2692,  1031,  1005,
         2358,  2099,  2475,  1005,  1033,  1010, 13075,  2692,  1031,  1005,
         2358,  2099,  2509,  1005,  1033,  1007,  1033,   102])
got:
tensor([ 1052,  1027,  4942, 21572,  9623,  2015,  1012,  4831,  2078,  1006,
         1005,  2358,  2099,  2692,  1005,  1010,  5806,  1027,  2995,  1010,
         2358, 26797,  2102,  1027,  4942, 21572,  9623,  2015,  1012,  8667,
         1010,  2358,  4063,  2099,  1027,  4942, 21572,  9623,  2015,  1012,
         2358, 26797,  2102,  1007,  2005,  2240,  1999,  1052,  1012,  2358,
        26797,  2102,  1012,  3191, 12735,  1006,  1007,  1024,  6140,  1006,
         2240,  1010,  2203,  1027,  1005,  1005,  1007,  2128,  9189,  2389,
         1027,  1052,  1012,  3524,  1006,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101,  1052,  1027,  4942, 21572,  9623,  2015,  1012,  4831,  2078,
         1006,  1005,  2358,  2099,  2692,  1005,  1010,  5806,  1027,  2995,
         1010,  2358, 26797,  2102,  1027,  4942, 21572,  9623,  2015,  1012,
         8667,  1010,  2358,  4063,  2099,  1027,  4942, 21572,  9623,  2015,
         1012,  2358, 26797,  2102,  1007,  2005,  2240,  1999,  1052,  1012,
         2358, 26797,  2102,  1012,  3191, 12735,  1006,  1007,  1024,  6140,
         1006,  2240,  1010,  2203,  1027,  1005,  1005,  1007,  2128,  9189,
         2389,  1027,  1052,  1012,  3524,  1006,  1007,   102])
--------- B -----------
{'intent': {'gloss': ['check', 'if', '7', 'is', 'in', 'var0'], 'words': ['check', 'if', '7', 'is', 'in', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': '7 in var0'}
Generated  translation
7 in var0 
--------- B -----------
{'intent': {'gloss': ['parse', 'string', 'var0', 'to', 'float'], 'words': ['parse', 'string', 'var0', 'to', 'float'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'float(var0)'}
Generated  translation
float ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['exit', 'script'], 'words': ['exit', 'script'], 'after': [' ', '']}, 'slot_map': {}, 'snippet': 'sys.exit()'}
Generated  translation
sys. exit ( ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'the', 'last', 'element', 'in', 'list', 'var0'], 'words': ['remove', 'the', 'last', 'element', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'var0.pop()'}
Generated  translation
var0. pop ( ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'list', 'of', 'lists', 'var0', 'into', 'list', 'of', 'tuples', 'of', 'appropriate', 'elements', 'form', 'nested', 'lists'], 'words': ['convert', 'a', 'list', 'of', 'lists', 'var0', 'into', 'list', 'of', 'tuples', 'of', 'appropriate', 'elements', 'form', 'nested', 'lists'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'zip(*var0)'}
Generated  translation
zip ( * var0 ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'the', 'last', 'element', 'in', 'list', 'var0'], 'words': ['remove', 'the', 'last', 'element', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'del var0[-1]'}
Generated  translation
var0. pop ( ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'the', 'element', 'in', 'list', 'var0', 'with', 'index', '1'], 'words': ['remove', 'the', 'element', 'in', 'list', 'var0', 'with', 'index', '1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'var0.pop(1)'}
Generated  translation
var0. pop ( 1 ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'the', 'element', 'in', 'list', 'var0', 'at', 'index', 'var1'], 'words': ['remove', 'the', 'element', 'in', 'list', 'var0', 'at', 'index', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'index'}, 'snippet': 'del var0[var1]'}
Generated  translation
del var0 [ var1 ] 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'str0', 'is', 'in', 'list', 'var0'], 'words': ['check', 'if', 'str0', 'is', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'a', 'var0': 'a'}, 'snippet': "'var0' in var0"}
Generated  translation
' var0'in var0 
--------- B -----------
{'intent': {'gloss': ['calling', 'an', 'external', 'command', 'str0'], 'words': ['calling', 'an', 'external', 'command', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'ls -l'}, 'snippet': 'from subprocess import call'}
Generated  translation
print ( os. popen ('str0'). read ( ) ) 
--------- B -----------
{'intent': {'gloss': ['print', 'unicode', 'characters', 'in', 'a', 'string', 'str0'], 'words': ['print', 'unicode', 'characters', 'in', 'a', 'string', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'Россия'}, 'snippet': "print('str0')"}
Generated  translation
print ('str0') 
--------- B -----------
{'intent': {'gloss': ['remove', 'the', 'element', 'in', 'list', 'var0', 'at', 'index', 'var1'], 'words': ['remove', 'the', 'element', 'in', 'list', 'var0', 'at', 'index', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'index'}, 'snippet': 'var0.pop(var1)'}
Generated  translation
del var0 [ var1 ] 
--------- B -----------
{'intent': {'gloss': ['get', 'last', 'day', 'of', 'the', 'second', 'month', 'in', 'year', '2012'], 'words': ['get', 'last', 'day', 'of', 'the', 'second', 'month', 'in', 'year', '2012'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'monthrange(2012, 2)'}
Generated  translation
monthrange ( 2012, 2 ) 
--------- B -----------
{'intent': {'gloss': ['sum', 'of', 'all', 'values', 'in', 'a', 'python', 'dict'], 'words': ['sum', 'of', 'all', 'values', 'in', 'a', 'python', 'dict'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'sum(d.values())'}
Generated  translation
sum ( d. values ( ) ) 
--------- B -----------
{'intent': {'gloss': ['execute', 'a', 'command', 'str0', 'in', 'the', 'terminal', 'from', 'a', 'python', 'script'], 'words': ['execute', 'a', 'command', 'str0', 'in', 'the', 'terminal', 'from', 'a', 'python', 'script'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'command'}, 'snippet': 'os.system(str0)'}
Generated  translation
os. system ( str0 ) 
--------- B -----------
{'intent': {'gloss': ['request', 'http', 'url', 'var0'], 'words': ['request', 'http', 'url', 'var0'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {'var0': 'url'}, 'snippet': 'r = requests.get(var0)'}
Generated  translation
r = requests. get ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'dictionary', 'var0', 'by', 'its', 'values'], 'words': ['sort', 'a', 'dictionary', 'var0', 'by', 'its', 'values'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'data'}, 'snippet': 'sorted(var0.values())'}
Generated  translation
sorted ( var0. values ( ) ) 
--------- B -----------
{'intent': {'gloss': ['throw', 'an', 'exception', 'str0'], 'words': ['throw', 'an', 'exception', 'str0'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {'str0': 'i know python!'}, 'snippet': "raise exception('str0')"}
Generated  translation
raise exception ('str0') 
--------- B -----------
{'intent': {'gloss': ['manually', 'throw', 'an', 'exception', 'str0'], 'words': ['manually', 'throw', 'an', 'exception', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'i know python!'}, 'snippet': "raise exception('str0')"}
Generated  translation
raise exception ('str0') 
--------- B -----------
{'intent': {'gloss': ['throw', 'an', 'exception', 'with', 'message', 'str0'], 'words': ['throw', 'an', 'exception', 'with', 'message', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'this is the exception you expect to handle'}, 'snippet': "raise exception('str0')"}
Generated  translation
raise exception ('str0') 
--------- B -----------
{'intent': {'gloss': ['sum', 'of', 'all', 'values', 'in', 'a', 'python', 'dict', 'var0'], 'words': ['sum', 'of', 'all', 'values', 'in', 'a', 'python', 'dict', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'd'}, 'snippet': 'sum(var0.values())'}
Generated  translation
sum ( var0. values ( ) ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'str0', 'in', 'descending', 'order', '.'], 'words': ['sort', 'a', 'list', 'str0', 'in', 'descending', 'order', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'lst'}, 'snippet': 'sorted(str0, reverse=true)'}
Generated  translation
sorted ( str0, reverse = true ) 
--------- B -----------
{'intent': {'gloss': ['return', 'http', 'status', 'code', '204', 'from', 'a', 'django', 'view'], 'words': ['return', 'http', 'status', 'code', '204', 'from', 'a', 'django', 'view'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'return httpresponse(status=204)'}
Generated  translation
return httpresponse ( status = 204 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'current', 'url', 'in', 'selenium', 'webdriver', 'var0'], 'words': ['get', 'current', 'url', 'in', 'selenium', 'webdriver', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'browser'}, 'snippet': 'print(var0.current_url)'}
Generated  translation
print ( var0. current _ url ) 
--------- B -----------
{'intent': {'gloss': ['get', 'domain', '/', 'host', 'name', 'from', 'request', 'object', 'in', 'django'], 'words': ['get', 'domain', '/', 'host', 'name', 'from', 'request', 'object', 'in', 'django'], 'after': [' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "request.meta['http_host']"}
Generated  translation
request. meta ['http _ host'] 
--------- B -----------
{'intent': {'gloss': ['get', 'last', 'day', 'of', 'the', 'first', 'month', 'in', '2002'], 'words': ['get', 'last', 'day', 'of', 'the', 'first', 'month', 'in', '2002'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'calendar.monthrange(2002, 1)'}
Generated  translation
calendar. monthrange ( 2002, 1 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'last', 'day', 'of', 'the', 'second', 'month', 'in', '2002'], 'words': ['get', 'last', 'day', 'of', 'the', 'second', 'month', 'in', '2002'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'calendar.monthrange(2008, 2)'}
Generated  translation
calendar. monthrange ( 2008, 2 ) 
--------- B -----------
{'intent': {'gloss': ['calling', 'an', 'external', 'command', 'str0'], 'words': ['calling', 'an', 'external', 'command', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'some_command with args'}, 'snippet': "os.system('str0')"}
Generated  translation
print ( os. popen ('str0'). read ( ) ) 
--------- B -----------
{'intent': {'gloss': ['calling', 'an', 'external', 'command', 'str0'], 'words': ['calling', 'an', 'external', 'command', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'some_command < input_file | another_command > output_file'}, 'snippet': "os.system('str0')"}
Generated  translation
print ( os. popen ('str0'). read ( ) ) 
--------- B -----------
{'intent': {'gloss': ['manually', 'throw', '/', 'raise', 'a', 'var0', 'exception', 'with', 'the', 'message', 'str0'], 'words': ['manually', 'throw', '/', 'raise', 'a', 'var0', 'exception', 'with', 'the', 'message', 'str0'], 'after': [' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'valueerror', 'str0': 'a very specific bad thing happened'}, 'snippet': "raise var0('str0')"}
Generated  translation
raise var0 ('str0') 
--------- B -----------
{'intent': {'gloss': ['get', 'http', 'header', 'of', 'the', 'key', 'str0', 'in', 'flask'], 'words': ['get', 'http', 'header', 'of', 'the', 'key', 'str0', 'in', 'flask'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'your-header-name'}, 'snippet': "request.headers['str0']"}
Generated  translation
request. headers ['str0'] 
--------- B -----------
{'intent': {'gloss': ['get', 'last', 'day', 'of', 'the', 'second', 'month', 'in', '2100'], 'words': ['get', 'last', 'day', 'of', 'the', 'second', 'month', 'in', '2100'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'calendar.monthrange(2100, 2)'}
Generated  translation
calendar. monthrange ( 2100, 2 ) 
--------- B -----------
{'intent': {'gloss': ['throw', 'a', 'valueerror', 'with', 'message', 'str0'], 'words': ['throw', 'a', 'valueerror', 'with', 'message', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'represents a hidden bug, do not catch this'}, 'snippet': "raise valueerror('str0')"}
Generated  translation
raise valueerror ('str0') 
--------- B -----------
{'intent': {'gloss': ['throw', 'a', 'value', 'error', 'with', 'message', 'str0', ',', 'str1', ',', 'str2', ',', 'str3'], 'words': ['throw', 'a', 'value', 'error', 'with', 'message', 'str0', ',', 'str1', ',', 'str2', ',', 'str3'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', '', ' ', '']}, 'slot_map': {'str0': 'a very specific bad thing happened', 'str1': 'foo', 'str2': 'bar', 'str3': 'baz'}, 'snippet': "raise valueerror('str0')"}
Generated  translation
raise valueerror ('str0') 
--------- B -----------
{'intent': {'gloss': ['escaping', 'quotes', 'in', 'string'], 'words': ['escaping', 'quotes', 'in', 'string'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'replace(\'"\', \'\\\\"\')'}
Generated  translation
replace ('" ','\ \ "') 
--------- B -----------
{'intent': {'gloss': ['assign', 'value', 'in', 'var0', 'dynamically', 'to', 'class', 'property', 'var1'], 'words': ['assign', 'value', 'in', 'var0', 'dynamically', 'to', 'class', 'property', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'group', 'var1': 'attr'}, 'snippet': 'setattr(self, var1, var0)'}
Generated  translation
setattr ( self, var1, var0 ) 
--------- B -----------
{'intent': {'gloss': ['open', 'a', 'file', 'str0', 'under', 'unix'], 'words': ['open', 'a', 'file', 'str0', 'under', 'unix'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '$file'}, 'snippet': 'os.system(\'start "$file"\')'}
Generated  translation
os. system ('start " $ file "') 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'list', 'with', 'the', 'highest', 'sum', 'value', 'in', 'list', 'var0'], 'words': ['get', 'the', 'list', 'with', 'the', 'highest', 'sum', 'value', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'print(max(var0, key=sum))'}
Generated  translation
print ( max ( var0, key = sum ) ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'dataframe', 'var0', 'to', 'list', 'of', 'dictionaries', 'including', 'the', 'index', 'values'], 'words': ['convert', 'dataframe', 'var0', 'to', 'list', 'of', 'dictionaries', 'including', 'the', 'index', 'values'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': "var0.to_dict('index')"}
Generated  translation
var0. to _ dict ('index') 
--------- B -----------
{'intent': {'gloss': ['create', 'list', 'of', 'dictionaries', 'from', 'pandas', 'dataframe', 'var0'], 'words': ['create', 'list', 'of', 'dictionaries', 'from', 'pandas', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': "var0.to_dict('records')"}
Generated  translation
var0. to _ dict ('records') 
--------- B -----------
{'intent': {'gloss': ['sort', 'dict', 'var0', 'by', 'value'], 'words': ['sort', 'dict', 'var0', 'by', 'value'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'data'}, 'snippet': 'sorted(var0, key=var0.get)'}
Generated  translation
sorted ( var0, key = var0. get ) 
--------- B -----------
{'intent': {'gloss': ['throw', 'a', 'runtime', 'error', 'with', 'message', 'str0'], 'words': ['throw', 'a', 'runtime', 'error', 'with', 'message', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'specific message'}, 'snippet': "raise runtimeerror('str0')"}
Generated  translation
raise runtimeerror ('str0') 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'list', 'of', 'all', 'values', 'in', 'column', 'var0', 'in', 'pandas', 'data', 'frame', 'var1'], 'words': ['get', 'a', 'list', 'of', 'all', 'values', 'in', 'column', 'var0', 'in', 'pandas', 'data', 'frame', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'df'}, 'snippet': "var1['var0'].tolist()"}
Generated  translation
var1 ['var0']. tolist ( ) 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'with', 'delimiter', 'str0', 'or', 'delimiter', 'str1'], 'words': ['split', 'string', 'var0', 'with', 'delimiter', 'str0', 'or', 'delimiter', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'str', 'str0': ';', 'str1': ','}, 'snippet': "re.split('; |, ', var0)"}
Generated  translation
re. split ('; |, ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['calling', 'an', 'external', 'command', 'str0'], 'words': ['calling', 'an', 'external', 'command', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'some_command with args'}, 'snippet': "stream = os.popen('str0')"}
Generated  translation
print ( subprocess. popen ('str0 ', shell = true, stdout = subprocess. pipe ). stdout. read ( ) ) 
--------- B -----------
{'intent': {'gloss': ['set', 'columns', 'str0', 'as', 'indexes', 'in', 'dataframe', 'var0'], 'words': ['set', 'columns', 'str0', 'as', 'indexes', 'in', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "['race_date', 'track_code', 'race_number']", 'var0': 'rdata', '[ str0 ]': "['race_date', 'track_code', 'race_number']"}, 'snippet': 'var0.set_index([ str0 ])'}
Generated  translation
var0. set _ index ( [ str0 ] ) 
--------- B -----------
{'intent': {'gloss': ['throw', 'an', 'assertion', 'error', 'with', 'message', 'str0', ',', 'distance'], 'words': ['throw', 'an', 'assertion', 'error', 'with', 'message', 'str0', ',', 'distance'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '']}, 'slot_map': {'str0': "unexpected value of 'distance'!"}, 'snippet': "raise assertionerror('str0', distance)"}
Generated  translation
raise assertionerror ('str0 ', distance ) 
--------- B -----------
{'intent': {'gloss': ['post', 'request', 'url', 'var0', 'with', 'parameters', 'var1'], 'words': ['post', 'request', 'url', 'var0', 'with', 'parameters', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'url', 'var1': 'payload'}, 'snippet': 'r = requests.post(var0, data=var1)'}
Generated  translation
r = requests. post ( var0, data = var1 ) 
--------- B -----------
{'intent': {'gloss': ['open', 'a', 'file', 'str0', 'in', 'binary', 'write', 'mode'], 'words': ['open', 'a', 'file', 'str0', 'in', 'binary', 'write', 'mode'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '/home/user/test/wsservice/data.pkl'}, 'snippet': "output = open('str0', 'wb')"}
Generated  translation
output = open ('str0 ','wb') 
--------- B -----------
{'intent': {'gloss': ['calling', 'an', 'external', 'command', 'str0'], 'words': ['calling', 'an', 'external', 'command', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'ls -l'}, 'snippet': "call(['ls', '-l'])"}
Generated  translation
print ( subprocess. popen ('str0 ', shell = true, stdout = subprocess. pipe ). stdout. read ( ) ) 
--------- B -----------
{'intent': {'gloss': ['request', 'http', 'url', 'var0', 'with', 'parameters', 'var1'], 'words': ['request', 'http', 'url', 'var0', 'with', 'parameters', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'url', 'var1': 'payload'}, 'snippet': 'r = requests.get(var0, params=var1)'}
Generated  translation
r = requests. get ( var0, params = var1 ) 
--------- B -----------
{'intent': {'gloss': ['kill', 'a', 'process', 'with', 'id', 'str0'], 'words': ['kill', 'a', 'process', 'with', 'id', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'process.pid'}, 'snippet': 'os.kill(process.pid, signal.sigkill)'}
Generated  translation
os. kill ( process. pid, signal. sigkill ) 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'string', 'var0', 'with', 'new', 'line', 'character'], 'words': ['split', 'a', 'string', 'var0', 'with', 'new', 'line', 'character'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': "var0.split('\\n')[:-1]"}
Generated  translation
var0. split ('\ n') [ : - 1 ] 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'str0', 'encoded', 'string', 'var0', 'into', 'a', 'list', 'of', 'characters'], 'words': ['split', 'a', 'str0', 'encoded', 'string', 'var0', 'into', 'a', 'list', 'of', 'characters'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'utf-8', 'var0': 'stru'}, 'snippet': "list(var0.decode('str0'))"}
Generated  translation
list ( var0. decode ('str0') ) 
--------- B -----------
{'intent': {'gloss': ['erase', 'the', 'contents', 'of', 'a', 'file', 'var0'], 'words': ['erase', 'the', 'contents', 'of', 'a', 'file', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'filename'}, 'snippet': "open('var0', 'w').close()"}
Generated  translation
open ('var0 ','w'). close ( ) 
--------- B -----------
{'intent': {'gloss': ['replace', 'string', 'str0', 'in', 'string', 'var0', 'with', 'character', 'str1'], 'words': ['replace', 'string', 'str0', 'in', 'string', 'var0', 'with', 'character', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'and', 'var0': 'stuff', 'str1': '/'}, 'snippet': "var0.replace(' and ', 'str1')"}
Generated  translation
var0. replace ('and ','str1') 
--------- B -----------
{'intent': {'gloss': ['subtract', '5', 'hours', 'from', 'the', 'time', 'object', 'var0'], 'words': ['subtract', '5', 'hours', 'from', 'the', 'time', 'object', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'dt'}, 'snippet': 'var0 -= datetime.timedelta(hours=5)'}
Generated  translation
var0 - = datetime. timedelta ( hours = 5 ) 
--------- B -----------
{'intent': {'gloss': ['encode', 'string', 'var0', 'using', 'hex', 'str0', 'encoding'], 'words': ['encode', 'string', 'var0', 'using', 'hex', 'str0', 'encoding'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'data', 'str0': 'hex'}, 'snippet': "print(var0.encode('str0'))"}
Generated  translation
print ( var0. encode ('str0') ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'list', 'of', 'strings', 'var0', 'to', 'list', 'of', 'integers'], 'words': ['convert', 'a', 'list', 'of', 'strings', 'var0', 'to', 'list', 'of', 'integers'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'lst'}, 'snippet': '[map(int, sublist) for sublist in var0]'}
Generated  translation
[ map ( int, sublist ) for sublist in var0 ] 
--------- B -----------
{'intent': {'gloss': ['get', 'last', 'day', 'of', 'the', 'month', 'var0', 'in', 'year', 'var1'], 'words': ['get', 'last', 'day', 'of', 'the', 'month', 'var0', 'in', 'year', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'month', 'var1': 'year'}, 'snippet': 'calendar.monthrange(var1, var0)[1]'}
Generated  translation
calendar. monthrange ( var1, var0 ) [ 1 ] 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'tuples', 'var0', 'by', 'second', 'parameter', 'in', 'the', 'tuple'], 'words': ['sort', 'a', 'list', 'of', 'tuples', 'var0', 'by', 'second', 'parameter', 'in', 'the', 'tuple'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'my_list'}, 'snippet': 'var0.sort(key=lambda x: x[1])'}
Generated  translation
var0. sort ( key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['unpack', 'hexadecimal', 'string', 'var0', 'to', 'a', 'list', 'of', 'integer', 'values'], 'words': ['unpack', 'hexadecimal', 'string', 'var0', 'to', 'a', 'list', 'of', 'integer', 'values'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': "struct.unpack('11b', var0)"}
Generated  translation
struct. unpack ('11b ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['generate', 'all', 'permutations', 'of', 'a', 'list', 'str0'], 'words': ['generate', 'all', 'permutations', 'of', 'a', 'list', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '[1, 2, 3]', '[ str0 ]': '[1, 2, 3]'}, 'snippet': 'itertools.permutations([ str0 ])'}
Generated  translation
itertools. permutations ( [ str0 ] ) 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'str0', 'using', 'string', 'str1'], 'words': ['split', 'string', 'str0', 'using', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'happy_hats_for_cats', 'str1': '_for_'}, 'snippet': "re.split('str1', 'str0')"}
Generated  translation
re. split ('str1 ','str0') 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'object', 'var0', 'has', 'property', 'str0'], 'words': ['check', 'if', 'object', 'var0', 'has', 'property', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'str0': 'property'}, 'snippet': "if hasattr(var0, 'str0'):\n    pass"}
Generated  translation
if hasattr ( var0,'str0') : pass 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'object', 'var0', 'has', 'property', 'str0'], 'words': ['check', 'if', 'object', 'var0', 'has', 'property', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'str0': 'property'}, 'snippet': "if hasattr(var0, 'str0'):\n    pass"}
Generated  translation
if hasattr ( var0,'str0') : pass 
--------- B -----------
{'intent': {'gloss': ['django', 'jinja', 'slice', 'list', 'var0', 'by', 'str0'], 'words': ['django', 'jinja', 'slice', 'list', 'var0', 'by', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylist', 'str0': '3:8'}, 'snippet': "{{(var0 | slice): 'str0'}}"}
Generated  translation
{ { ( var0 | slice ) :'str0'} } 
--------- B -----------
{'intent': {'gloss': ['pandas', 'dataframe', 'var0', 'column', 'str0', 'to', 'list'], 'words': ['pandas', 'dataframe', 'var0', 'column', 'str0', 'to', 'list'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'a'}, 'snippet': "var0['str0'].values.tolist()"}
Generated  translation
var0 ['str0']. values. tolist ( ) 
--------- B -----------
{'intent': {'gloss': ['print', 'a', 'celsius', 'symbol', 'on', 'x', 'axis', 'of', 'a', 'plot', 'var0'], 'words': ['print', 'a', 'celsius', 'symbol', 'on', 'x', 'axis', 'of', 'a', 'plot', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'ax'}, 'snippet': "var0.set_xlabel('temperature (℃)')"}
Generated  translation
var0. set _ xlabel ('temperature ( [UNK] )') 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'using', 'new', '-', 'line', 'character', 'str0', 'as', 'separator'], 'words': ['split', 'string', 'var0', 'using', 'new', '-', 'line', 'character', 'str0', 'as', 'separator'], 'after': [' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'str0': '\n'}, 'snippet': "var0.rstrip().split('str0')"}
Generated  translation
var0. rstrip ( ). split ('str0') 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'unicode', 'string', 'var0', 'to', 'a', 'str0', 'string'], 'words': ['convert', 'a', 'unicode', 'string', 'var0', 'to', 'a', 'str0', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'str0': 'ascii'}, 'snippet': "var0.encode('str0', 'ignore')"}
Generated  translation
unicodedata. normalize ('nfkd ', var0 ). encode ('str0 ','ignore') 
--------- B -----------
{'intent': {'gloss': ['print', 'str0', 'plus', 'unicode', 'character', 'ustr1'], 'words': ['print', 'str0', 'plus', 'unicode', 'character', 'ustr1'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'here is your checkmark:', 'str1': '✓'}, 'snippet': "print('here is your checkmark: ' + 'str1')"}
Generated  translation
print ('here is your checkmark :'+'str1') 
--------- B -----------
{'intent': {'gloss': ['determine', 'the', 'byte', 'length', 'of', 'a', 'utf', '-', '8', 'encoded', 'string', 'var0'], 'words': ['determine', 'the', 'byte', 'length', 'of', 'a', 'utf', '-', '8', 'encoded', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': "return len(var0.encode('utf-8'))"}
Generated  translation
return len ( var0. encode ('utf - 8') ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'list', 'of', 'lists', 'var0', 'into', 'a', 'list', 'of', 'strings', 'keeping', 'empty', 'sub', '-', 'lists', 'as', 'empty', 'string', 'str0'], 'words': ['convert', 'a', 'list', 'of', 'lists', 'var0', 'into', 'a', 'list', 'of', 'strings', 'keeping', 'empty', 'sub', '-', 'lists', 'as', 'empty', 'string', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list_of_lists', 'str0': ''}, 'snippet': "['str0'.join(l) for l in var0]"}
Generated  translation
['str0 '. join ( l ) for l in var0 ] 
--------- B -----------
{'intent': {'gloss': ['lookup', 'an', 'attribute', 'in', 'any', 'scope', 'by', 'name', 'str0'], 'words': ['lookup', 'an', 'attribute', 'in', 'any', 'scope', 'by', 'name', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'range'}, 'snippet': "getattr(__builtins__, 'str0')"}
Generated  translation
getattr ( _ _ builtins _ _,'str0') 
--------- B -----------
{'intent': {'gloss': ['how', 'to', 'erase', 'the', 'file', 'contents', 'of', 'text', 'file', 'in', 'python', '?'], 'words': ['how', 'to', 'erase', 'the', 'file', 'contents', 'of', 'text', 'file', 'in', 'python', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "open('file.txt', 'w').close()"}
Generated  translation
open ('file. txt ','w'). close ( ) 
--------- B -----------
{'intent': {'gloss': ['get', 'all', 'the', 'items', 'from', 'a', 'list', 'of', 'tuple', 'str0', 'where', 'second', 'item', 'in', 'tuple', 'is', 'str1', '.'], 'words': ['get', 'all', 'the', 'items', 'from', 'a', 'list', 'of', 'tuple', 'str0', 'where', 'second', 'item', 'in', 'tuple', 'is', 'str1', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'l', 'str1': '1'}, 'snippet': '[x for x in str0 if x[1] == 1]'}
Generated  translation
[ x for x in str0 if x [ 1 ] = = 1 ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'python', 'dictionary', 'var0', 'to', 'json', 'array'], 'words': ['convert', 'python', 'dictionary', 'var0', 'to', 'json', 'array'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'your_data'}, 'snippet': 'json.dumps(var0, ensure_ascii=false)'}
Generated  translation
json. dumps ( var0, ensure _ ascii = false ) 
--------- B -----------
{'intent': {'gloss': ['change', 'the', 'case', 'of', 'the', 'first', 'letter', 'in', 'string', 'var0'], 'words': ['change', 'the', 'case', 'of', 'the', 'first', 'letter', 'in', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': 'return var0[0].upper() + var0[1:]'}
Generated  translation
return var0 [ 0 ]. upper ( ) + var0 [ 1 : ] 
--------- B -----------
{'intent': {'gloss': ['zip', 'keys', 'with', 'individual', 'values', 'in', 'lists', 'var0', 'and', 'var1'], 'words': ['zip', 'keys', 'with', 'individual', 'values', 'in', 'lists', 'var0', 'and', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'k', 'var1': 'v'}, 'snippet': '[dict(zip(var0, x)) for x in var1]'}
Generated  translation
[ dict ( zip ( var0, x ) ) for x in var1 ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'var0', 'milliseconds', 'to', 'a', 'datetime', 'object'], 'words': ['convert', 'var0', 'milliseconds', 'to', 'a', 'datetime', 'object'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'ms'}, 'snippet': 'datetime.datetime.fromtimestamp(var0 / 1000.0)'}
Generated  translation
datetime. datetime. fromtimestamp ( var0 / 1000. 0 ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'list', 'var0', 'by', 'keys', 'value', 'str0'], 'words': ['sort', 'list', 'var0', 'by', 'keys', 'value', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'results', 'str0': 'year'}, 'snippet': "sorted(var0, key=itemgetter('str0'))"}
Generated  translation
sorted ( var0, key = itemgetter ('str0') ) 
--------- B -----------
{'intent': {'gloss': ['filter', 'model', 'str0', 'where', 'str1', 'is', 'not', 'equal', 'to', '3', 'in', 'django'], 'words': ['filter', 'model', 'str0', 'where', 'str1', 'is', 'not', 'equal', 'to', '3', 'in', 'django'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'entry', 'str1': 'id'}, 'snippet': 'str0.objects.filter(~q(str1=3))'}
Generated  translation
str0. objects. filter ( ~ q ( str1 = 3 ) ) 
--------- B -----------
{'intent': {'gloss': ['subtract', '1', 'hour', 'and', '10', 'minutes', 'from', 'time', 'object', 'var0'], 'words': ['subtract', '1', 'hour', 'and', '10', 'minutes', 'from', 'time', 'object', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 't'}, 'snippet': 'var0 - datetime.timedelta(hours=1, minutes=10)'}
Generated  translation
var0 - datetime. timedelta ( hours = 1, minutes = 10 ) 
--------- B -----------
{'intent': {'gloss': ['calling', 'an', 'external', 'command', 'str0'], 'words': ['calling', 'an', 'external', 'command', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'echo hello world'}, 'snippet': "print(os.popen('str0').read())"}
Generated  translation
print ( subprocess. popen ('str0 ', shell = true, stdout = subprocess. pipe ). stdout. read ( ) ) 
--------- B -----------
{'intent': {'gloss': ['recursively', 'go', 'through', 'all', 'subdirectories', 'and', 'files', 'in', 'var0'], 'words': ['recursively', 'go', 'through', 'all', 'subdirectories', 'and', 'files', 'in', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'rootdir'}, 'snippet': 'for root, subfolders, files in os.walk(var0):\n    pass'}
Generated  translation
for root, subfolders, files in os. walk ( var0 ) : pass 
--------- B -----------
{'intent': {'gloss': ['mysql', 'execute', 'query', 'str0', 'with', 'parameters', 'var0', 'and', 'var1'], 'words': ['mysql', 'execute', 'query', 'str0', 'with', 'parameters', 'var0', 'and', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'select * from foo where bar = %s and baz = %s', 'var0': 'param1', 'var1': 'param2'}, 'snippet': "c.execute('str0', (var0, var1))"}
Generated  translation
c. execute ('str0 ', ( var0, var1 ) ) 
--------- B -----------
{'intent': {'gloss': ['parse', 'string', 'var0', 'to', 'float', 'or', 'int'], 'words': ['parse', 'string', 'var0', 'to', 'float', 'or', 'int'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': 'try:\n    return int(var0)\nexcept valueerror:\n    return float(var0)'}
Generated  translation
try : return int ( var0 ) except valueerror : return float ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'value', 'of', 'attribute', 'str0', 'of', 'object', 'var0', 'with', 'default', 'value', 'str1'], 'words': ['get', 'the', 'value', 'of', 'attribute', 'str0', 'of', 'object', 'var0', 'with', 'default', 'value', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'property', 'var0': 'a', 'str1': 'default value'}, 'snippet': "getattr(var0, 'str0', 'str1')"}
Generated  translation
getattr ( var0,'str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'largest', 'index', 'of', 'the', 'last', 'occurrence', 'of', 'characters', 'str0', 'in', 'string', 'var0'], 'words': ['get', 'the', 'largest', 'index', 'of', 'the', 'last', 'occurrence', 'of', 'characters', 'str0', 'in', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '([{', 'var0': 'test_string'}, 'snippet': "max(var0.rfind(i) for i in 'str0')"}
Generated  translation
max ( var0. rfind ( i ) for i in'str0') 
--------- B -----------
{'intent': {'gloss': ['get', 'data', 'of', 'columns', 'with', 'null', 'values', 'in', 'dataframe', 'var0'], 'words': ['get', 'data', 'of', 'columns', 'with', 'null', 'values', 'in', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': 'var0[pd.isnull(var0).any(axis=1)]'}
Generated  translation
var0 [ pd. isnull ( var0 ). any ( axis = 1 ) ] 
--------- B -----------
{'intent': {'gloss': ['delete', 'third', 'row', 'in', 'a', 'numpy', 'array', 'var0'], 'words': ['delete', 'third', 'row', 'in', 'a', 'numpy', 'array', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'var0 = numpy.delete(var0, 2, axis=1)'}
Generated  translation
var0 = numpy. delete ( var0, 2, axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['delete', 'first', 'row', 'of', 'array', 'var0'], 'words': ['delete', 'first', 'row', 'of', 'array', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'var0 = numpy.delete(var0, 0, axis=0)'}
Generated  translation
var0 = numpy. delete ( var0, 0, axis = 0 ) 
--------- B -----------
{'intent': {'gloss': ['how', 'can', 'i', 'launch', 'an', 'instance', 'of', 'an', 'application', 'using', 'python', '?'], 'words': ['how', 'can', 'i', 'launch', 'an', 'instance', 'of', 'an', 'application', 'using', 'python', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "os.system('start excel.exe <path/to/file>')"}
Generated  translation
os. system ('start excel. exe < path / to / file >') 
--------- B -----------
{'intent': {'gloss': ['sum', 'the', 'length', 'of', 'lists', 'in', 'list', 'var0', 'that', 'are', 'more', 'than', '1', 'item', 'in', 'length'], 'words': ['sum', 'the', 'length', 'of', 'lists', 'in', 'list', 'var0', 'that', 'are', 'more', 'than', '1', 'item', 'in', 'length'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'sum(len(y) for y in var0 if len(y) > 1)'}
Generated  translation
sum ( len ( y ) for y in var0 if len ( y ) > 1 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'utf', '-', '8', 'with', 'bom', 'string', 'var0', 'to', 'utf', '-', '8', 'with', 'no', 'bom', 'var1'], 'words': ['convert', 'utf', '-', '8', 'with', 'bom', 'string', 'var0', 'to', 'utf', '-', '8', 'with', 'no', 'bom', 'var1'], 'after': [' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's', 'var1': 'u'}, 'snippet': "var1 = var0.decode('utf-8-sig')"}
Generated  translation
var1 = var0. decode ('utf - 8 - sig') 
--------- B -----------
{'intent': {'gloss': ['shutdown', 'a', 'computer', 'using', 'subprocess'], 'words': ['shutdown', 'a', 'computer', 'using', 'subprocess'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "subprocess.call(['shutdown', '/s'])"}
Generated  translation
subprocess. call ( ['shutdown ','/ s'] ) 
--------- B -----------
{'intent': {'gloss': ['abort', 'a', 'computer', 'shutdown', 'using', 'subprocess'], 'words': ['abort', 'a', 'computer', 'shutdown', 'using', 'subprocess'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "subprocess.call(['shutdown', '/a '])"}
Generated  translation
subprocess. call ( ['shutdown ','/ a'] ) 
--------- B -----------
{'intent': {'gloss': ['logoff', 'computer', 'having', 'windows', 'operating', 'system', 'using', 'python'], 'words': ['logoff', 'computer', 'having', 'windows', 'operating', 'system', 'using', 'python'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "subprocess.call(['shutdown', '/l '])"}
Generated  translation
subprocess. call ( ['shutdown ','/ l'] ) 
--------- B -----------
{'intent': {'gloss': ['shutdown', 'and', 'restart', 'a', 'computer', 'running', 'windows', 'from', 'script'], 'words': ['shutdown', 'and', 'restart', 'a', 'computer', 'running', 'windows', 'from', 'script'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "subprocess.call(['shutdown', '/r'])"}
Generated  translation
subprocess. call ( ['shutdown ','/ r'] ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'strings', 'in', 'list', '-', 'of', '-', 'lists', 'var0', 'to', 'ints'], 'words': ['convert', 'strings', 'in', 'list', '-', 'of', '-', 'lists', 'var0', 'to', 'ints'], 'after': [' ', ' ', ' ', '', '', '', '', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'lst'}, 'snippet': '[[int(x) for x in sublist] for sublist in var0]'}
Generated  translation
[ [ int ( x ) for x in sublist ] for sublist in var0 ] 
--------- B -----------
{'intent': {'gloss': ['if', 'selenium', 'textarea', 'element', 'var0', 'is', 'not', 'empty', ',', 'clear', 'the', 'field'], 'words': ['if', 'selenium', 'textarea', 'element', 'var0', 'is', 'not', 'empty', ',', 'clear', 'the', 'field'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'foo'}, 'snippet': "driver.find_element_by_id('var0').clear()"}
Generated  translation
driver. find _ element _ by _ id ('var0'). clear ( ) 
--------- B -----------
{'intent': {'gloss': ['join', 'list', 'of', 'numbers', 'str0', 'to', 'string', 'of', 'numbers', '.'], 'words': ['join', 'list', 'of', 'numbers', 'str0', 'to', 'string', 'of', 'numbers', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': '[1,2,3,4]', '[ str0 ]': '[1,2,3,4]'}, 'snippet': '"""""".join([1, 2, 3, 4])'}
Generated  translation
" " " " " ". join ( [ 1, 2, 3, 4 ] ) 
--------- B -----------
{'intent': {'gloss': ['parse', 'a', 'file', 'str0', 'using', 'expat', 'parsing', 'in', 'python', '3'], 'words': ['parse', 'a', 'file', 'str0', 'using', 'expat', 'parsing', 'in', 'python', '3'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'sample.xml'}, 'snippet': "parser.parsefile(open('str0', 'rb'))"}
Generated  translation
parser. parsefile ( open ('str0 ','rb') ) 
--------- B -----------
{'intent': {'gloss': ['update', 'the', 'dictionary', 'var0', 'with', 'dynamic', 'keys', 'var1', 'and', 'values', 'with', 'key', 'str0', 'from', 'dictionary', 'var2'], 'words': ['update', 'the', 'dictionary', 'var0', 'with', 'dynamic', 'keys', 'var1', 'and', 'values', 'with', 'key', 'str0', 'from', 'dictionary', 'var2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mydic', 'var1': 'i', 'str0': 'name', 'var2': 'o'}, 'snippet': "var0.update({var1: var2['str0']})"}
Generated  translation
var0. update ( { var1 : var2 ['str0'] } ) 
--------- B -----------
{'intent': {'gloss': ['divide', 'the', 'members', 'of', 'a', 'list', 'var0', 'by', 'the', 'corresponding', 'members', 'of', 'another', 'list', 'var1'], 'words': ['divide', 'the', 'members', 'of', 'a', 'list', 'var0', 'by', 'the', 'corresponding', 'members', 'of', 'another', 'list', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'conversions', 'var1': 'trials'}, 'snippet': '[(c / t) for c, t in zip(var0, var1)]'}
Generated  translation
[ ( c / t ) for c, t in zip ( var0, var1 ) ] 
--------- B -----------
{'intent': {'gloss': ['get', 'index', 'of', 'elements', 'in', 'array', 'var0', 'that', 'occur', 'in', 'another', 'array', 'var1'], 'words': ['get', 'index', 'of', 'elements', 'in', 'array', 'var0', 'that', 'occur', 'in', 'another', 'array', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'b'}, 'snippet': 'np.where(np.in1d(var0, var1))[0]'}
Generated  translation
np. where ( np. in1d ( var0, var1 ) ) [ 0 ] 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'based', 'on', 'white', 'spaces'], 'words': ['split', 'string', 'var0', 'based', 'on', 'white', 'spaces'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': "re.findall('\\\\s+|\\\\s+', var0)"}
Generated  translation
re. findall ('\ \ s + | \ \ s + ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['display', 'first', '5', 'characters', 'of', 'string', 'str0'], 'words': ['display', 'first', '5', 'characters', 'of', 'string', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'aaabbbccc'}, 'snippet': '"""{:.5}""".format(\'str0\')'}
Generated  translation
" " " { :. 5 } " " ". format ('str0') 
--------- B -----------
{'intent': {'gloss': ['substitute', 'occurrences', 'of', 'unicode', 'regex', 'pattern', 'ustr0', 'with', 'empty', 'string', 'str1', 'in', 'string', 'var0'], 'words': ['substitute', 'occurrences', 'of', 'unicode', 'regex', 'pattern', 'ustr0', 'with', 'empty', 'string', 'str1', 'in', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '\\p{p}+', 'str1': '', 'var0': 'text'}, 'snippet': "return re.sub('str0', 'str1', var0)"}
Generated  translation
return re. sub ('str0 ','str1 ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['clear', 'text', 'from', 'textarea', 'str0', 'with', 'selenium'], 'words': ['clear', 'text', 'from', 'textarea', 'str0', 'with', 'selenium'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'foo'}, 'snippet': "driver.find_element_by_id('str0').clear()"}
Generated  translation
driver. find _ element _ by _ id ('str0'). clear ( ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'all', 'string', 'elements', 'in', 'list', 'var0', 'are', 'upper', '-', 'cased'], 'words': ['check', 'if', 'all', 'string', 'elements', 'in', 'list', 'var0', 'are', 'upper', '-', 'cased'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '']}, 'slot_map': {'var0': 'words'}, 'snippet': 'print(all(word[0].isupper() for word in var0))'}
Generated  translation
print ( all ( word [ 0 ]. isupper ( ) for word in var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['change', 'flask', 'security', 'register', 'url', 'to', 'str0'], 'words': ['change', 'flask', 'security', 'register', 'url', 'to', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '/create_account'}, 'snippet': "app.config['security_register_url'] = 'str0'"}
Generated  translation
app. config ['security _ register _ url'] ='str0'
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'average', 'values', 'from', 'two', 'numpy', 'arrays', 'var0', 'and', 'var1'], 'words': ['get', 'the', 'average', 'values', 'from', 'two', 'numpy', 'arrays', 'var0', 'and', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'old_set', 'var1': 'new_set'}, 'snippet': 'np.mean(np.array([var0, var1]), axis=0)'}
Generated  translation
np. mean ( np. array ( [ var0, var1 ] ), axis = 0 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'pandas', 'group', 'by', 'object', 'to', 'multi', '-', 'indexed', 'dataframe', 'with', 'indices', 'str0', 'and', 'str1'], 'words': ['convert', 'pandas', 'group', 'by', 'object', 'to', 'multi', '-', 'indexed', 'dataframe', 'with', 'indices', 'str0', 'and', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'name', 'str1': 'destination'}, 'snippet': "df.set_index(['str0', 'str1'])"}
Generated  translation
df. set _ index ( ['str0 ','str1'] ) 
--------- B -----------
{'intent': {'gloss': ['print', 'list', 'of', 'items', 'var0'], 'words': ['print', 'list', 'of', 'items', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylist'}, 'snippet': "print('\\n'.join(str(p) for p in var0))"}
Generated  translation
print ('\ n '. join ( str ( p ) for p in var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'dict', 'by', 'value', 'python'], 'words': ['sort', 'dict', 'by', 'value', 'python'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'sorted(list(data.items()), key=lambda x: x[1])'}
Generated  translation
sorted ( list ( data. items ( ) ), key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['calling', 'an', 'external', 'command', 'str0'], 'words': ['calling', 'an', 'external', 'command', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'echo hello world'}, 'snippet': "return_code = subprocess.call('str0', shell=true)"}
Generated  translation
print ( subprocess. popen ('str0 ', shell = true, stdout = subprocess. pipe ). stdout. read ( ) ) 
--------- B -----------
{'intent': {'gloss': ['match', 'zero', '-', 'or', '-', 'more', 'instances', 'of', 'lower', 'case', 'alphabet', 'characters', 'in', 'a', 'string', 'str0'], 'words': ['match', 'zero', '-', 'or', '-', 'more', 'instances', 'of', 'lower', 'case', 'alphabet', 'characters', 'in', 'a', 'string', 'str0'], 'after': [' ', '', '', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'f233op'}, 'snippet': "re.findall('([a-z]*)', 'str0')"}
Generated  translation
re. findall ('( [ a - z ] ) * ','str0') 
--------- B -----------
{'intent': {'gloss': ['match', 'zero', '-', 'or', '-', 'more', 'instances', 'of', 'lower', 'case', 'alphabet', 'characters', 'in', 'a', 'string', 'str0'], 'words': ['match', 'zero', '-', 'or', '-', 'more', 'instances', 'of', 'lower', 'case', 'alphabet', 'characters', 'in', 'a', 'string', 'str0'], 'after': [' ', '', '', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'f233op'}, 'snippet': "re.findall('([a-z])*', 'str0')"}
Generated  translation
re. findall ('( [ a - z ] ) * ','str0') 
--------- B -----------
{'intent': {'gloss': ['remove', 'duplicates', 'elements', 'from', 'list', 'var0', 'and', 'sort', 'it', 'in', 'ascending', 'order'], 'words': ['remove', 'duplicates', 'elements', 'from', 'list', 'var0', 'and', 'sort', 'it', 'in', 'ascending', 'order'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'sequences'}, 'snippet': 'sorted(set(itertools.chain.from_iterable(var0)))'}
Generated  translation
sorted ( set ( var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['print', 'a', 'celsius', 'symbol', 'with', 'matplotlib'], 'words': ['print', 'a', 'celsius', 'symbol', 'with', 'matplotlib'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "ax.set_xlabel('temperature ($^\\\\circ$c)')"}
Generated  translation
ax. set _ xlabel ('temperature ( $ ^ \ \ circ $ c )') 
--------- B -----------
{'intent': {'gloss': ['create', 'new', 'list', 'var0', 'by', 'splitting', 'each', 'item', 'in', 'list', 'var1'], 'words': ['create', 'new', 'list', 'var0', 'by', 'splitting', 'each', 'item', 'in', 'list', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'result', 'var1': 'words'}, 'snippet': "var0 = [item for word in var1 for item in word.split(',')]"}
Generated  translation
var0 = [ item for word in var1 for item in word. split ( ',') ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'json', 'string', 'str0', 'into', 'a', 'datetime', 'object', 'using', 'format', 'str1'], 'words': ['convert', 'json', 'string', 'str0', 'into', 'a', 'datetime', 'object', 'using', 'format', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '2012-05-29t19:30:03.283z', 'str1': '%y-%m-%dt%h:%m:%s.%fz'}, 'snippet': "datetime.datetime.strptime('str0', 'str1')"}
Generated  translation
datetime. datetime. strptime ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['multiply', 'the', 'columns', 'of', 'sparse', 'matrix', 'var0', 'by', 'array', 'var1', 'then', 'multiply', 'the', 'rows', 'of', 'the', 'resulting', 'matrix', 'by', 'array', 'var1'], 'words': ['multiply', 'the', 'columns', 'of', 'sparse', 'matrix', 'var0', 'by', 'array', 'var1', 'then', 'multiply', 'the', 'rows', 'of', 'the', 'resulting', 'matrix', 'by', 'array', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'm', 'var1': 'a', 'var2': 'a'}, 'snippet': 'numpy.dot(numpy.dot(var2, var0), var2)'}
Generated  translation
numpy. dot ( numpy. dot ( var2, var0 ), var2 ) 
--------- B -----------
{'intent': {'gloss': ['group', 'a', 'pandas', 'data', 'frame', 'by', 'monthly', 'frequenct', 'var0', 'using', 'groupby'], 'words': ['group', 'a', 'pandas', 'data', 'frame', 'by', 'monthly', 'frequenct', 'var0', 'using', 'groupby'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'm'}, 'snippet': "df.groupby(pd.timegrouper(freq='var0'))"}
Generated  translation
df. groupby ( pd. timegrouper ( freq ='var0') ) 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'list', 'of', 'pairs', 'of', 'key', '-', 'value', 'sorted', 'by', 'values', 'in', 'dictionary', 'var0'], 'words': ['get', 'a', 'list', 'of', 'pairs', 'of', 'key', '-', 'value', 'sorted', 'by', 'values', 'in', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'data'}, 'snippet': 'sorted(list(var0.items()), key=lambda x: x[1])'}
Generated  translation
sorted ( list ( var0. items ( ) ), key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['add', '1', 'hour', 'and', '2', 'minutes', 'to', 'time', 'object', 'var0'], 'words': ['add', '1', 'hour', 'and', '2', 'minutes', 'to', 'time', 'object', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 't'}, 'snippet': 'dt = datetime.datetime.combine(datetime.date.today(), var0)'}
Generated  translation
dt = datetime. datetime. combine ( datetime. date. today ( ), var0 ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'dictionary', 'values', 'by', 'str0', 'in', 'reverse', 'order'], 'words': ['sort', 'a', 'list', 'of', 'dictionary', 'values', 'by', 'str0', 'in', 'reverse', 'order'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'date'}, 'snippet': "list.sort(key=lambda item: item['str0'], reverse=true)"}
Generated  translation
list. sort ( key = lambda item : item ['str0'], reverse = true ) 
--------- B -----------
{'intent': {'gloss': ['create', 'dataframe', 'var0', 'with', 'content', 'of', 'hdf', 'store', 'file', 'str0', 'with', 'key', 'of', 'str1'], 'words': ['create', 'dataframe', 'var0', 'with', 'content', 'of', 'hdf', 'store', 'file', 'str0', 'with', 'key', 'of', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': '/home/.../data.h5', 'str1': 'firstset'}, 'snippet': "df1 = pd.read_hdf('str0', 'str1')"}
Generated  translation
df1 = pd. read _ hdf ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['matplotlib', 'change', 'marker', 'size', 'to', '500'], 'words': ['matplotlib', 'change', 'marker', 'size', 'to', '500'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "scatter(x, y, s=500, color='green', marker='h')"}
Generated  translation
scatter ( x, y, s = 500, color ='green ', marker ='h') 
--------- B -----------
{'intent': {'gloss': ['count', 'var0', 'values', 'associated', 'with', 'key', 'str0', 'in', 'dictionary', 'var1'], 'words': ['count', 'var0', 'values', 'associated', 'with', 'key', 'str0', 'in', 'dictionary', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'true', 'str0': 'one', 'var1': 'tadas'}, 'snippet': "sum(item['str0'] for item in list(var1.values()))"}
Generated  translation
sum ( item ['str0'] for item in list ( var1. values ( ) ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'last', 'day', 'of', 'the', 'first', 'month', 'in', 'year', '2000'], 'words': ['get', 'last', 'day', 'of', 'the', 'first', 'month', 'in', 'year', '2000'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'datetime.date(2000, 2, 1) - datetime.timedelta(days=1)'}
Generated  translation
datetime. date ( 2000, 2, 1 ) - datetime. timedelta ( days = 1 ) 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'str0', 'based', 'on', 'string', 'str1', ',', 'str2', 'or', 'str3'], 'words': ['split', 'string', 'str0', 'based', 'on', 'string', 'str1', ',', 'str2', 'or', 'str3'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'sad_pandas_and_happy_cats_for_people', 'str1': 'and', 'str2': 'or', 'str3': 'for'}, 'snippet': "re.split('_(?:for|or|and)_', 'str0')"}
Generated  translation
re. split ('_ (? : for | or | and ) _ ','str0') 
--------- B -----------
{'intent': {'gloss': ['pads', 'string', 'str0', 'on', 'the', 'left', 'with', '1', 'zero'], 'words': ['pads', 'string', 'str0', 'on', 'the', 'left', 'with', '1', 'zero'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '5'}, 'snippet': "print('{0}'.format('str0'.zfill(2)))"}
Generated  translation
print ('{ 0 } '. format ('str0 '. zfill ( 2 ) ) ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'all', 'items', 'from', 'a', 'dictionary', 'var0', 'whose', 'values', 'are', 'str0'], 'words': ['remove', 'all', 'items', 'from', 'a', 'dictionary', 'var0', 'whose', 'values', 'are', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mydict', 'str0': '42'}, 'snippet': '{key: val for key, val in list(var0.items()) if val != 42}'}
Generated  translation
{ key : val for key, val in list ( var0. items ( ) ) if val! = 42 } 
--------- B -----------
{'intent': {'gloss': ['merge', 'rows', 'from', 'dataframe', 'var0', 'with', 'rows', 'from', 'dataframe', 'var1', 'and', 'calculate', 'the', 'mean', 'for', 'rows', 'that', 'have', 'the', 'same', 'value', 'of', 'axis', '1'], 'words': ['merge', 'rows', 'from', 'dataframe', 'var0', 'with', 'rows', 'from', 'dataframe', 'var1', 'and', 'calculate', 'the', 'mean', 'for', 'rows', 'that', 'have', 'the', 'same', 'value', 'of', 'axis', '1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df1', 'var1': 'df2'}, 'snippet': 'pd.concat((var0, var1), axis=1).mean(axis=1)'}
Generated  translation
pd. concat ( ( var0, var1 ), axis = 1 ). mean ( axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['invoke', 'perl', 'script', 'str0', 'using', 'perl', 'interpeter', 'str1', 'and', 'send', 'argument', 'var0', 'to', 'it'], 'words': ['invoke', 'perl', 'script', 'str0', 'using', 'perl', 'interpeter', 'str1', 'and', 'send', 'argument', 'var0', 'to', 'it'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': './uireplace.pl', 'str1': '/usr/bin/perl', 'var0': 'var'}, 'snippet': "subprocess.call(['str1', 'str0', var0])"}
Generated  translation
subprocess. call ( ['str1 ','str0 ', var0 ] ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'key', 'str0', 'and', 'key', 'str1', 'are', 'presented', 'in', 'dictionary', 'var0'], 'words': ['check', 'if', 'key', 'str0', 'and', 'key', 'str1', 'are', 'presented', 'in', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'stackoverflow', 'str1': 'google', 'var0': 'sites'}, 'snippet': "set(['str0', 'str1']).issubset(var0)"}
Generated  translation
set ( ['str0 ','str1'] ). issubset ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'elements', 'in', 'list', 'var0', 'are', 'coherent', 'in', 'order'], 'words': ['check', 'if', 'elements', 'in', 'list', 'var0', 'are', 'coherent', 'in', 'order'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'my_list'}, 'snippet': 'return var0 == list(range(var0[0], var0[-1] + 1))'}
Generated  translation
return var0 = = list ( range ( var0 [ 0 ], var0 [ - 1 ] + 1 ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'data', 'from', 'dataframe', 'var0', 'where', 'column', 'str0', 'is', 'equal', 'to', '0'], 'words': ['get', 'data', 'from', 'dataframe', 'var0', 'where', 'column', 'str0', 'is', 'equal', 'to', '0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'x'}, 'snippet': "var0.groupby('user')['str0'].transform(sum) == 0"}
Generated  translation
var0. groupby ('user') ['str0']. transform ( sum ) = = 0 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'nested', 'list', 'by', 'the', 'inverse', 'of', 'element', '2', ',', 'then', 'by', 'element', '1'], 'words': ['sort', 'a', 'nested', 'list', 'by', 'the', 'inverse', 'of', 'element', '2', ',', 'then', 'by', 'element', '1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'sorted(l, key=lambda x: (-int(x[1]), x[0]))'}
Generated  translation
sorted ( l, key = lambda x : ( - int ( x [ 1 ] ), x [ 0 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'string', 'var0', 'between', 'two', 'substrings', 'in', 'a', 'string', 'str0', 'using', 'regex'], 'words': ['get', 'a', 'string', 'var0', 'between', 'two', 'substrings', 'in', 'a', 'string', 'str0', 'using', 'regex'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'randomkey123xyz987', 'str0': "api('randomkey123xyz987', 'key', 'text')"}, 'snippet': 're.findall("api\\\\(\'(.*?)\'", \'str0\')'}
Generated  translation
re. findall ( " api \ \ ('(. *? )'",'str0') 
--------- B -----------
{'intent': {'gloss': ['return', 'the', 'decimal', 'value', 'for', 'each', 'hex', 'character', 'in', 'data', 'var0'], 'words': ['return', 'the', 'decimal', 'value', 'for', 'each', 'hex', 'character', 'in', 'data', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'data'}, 'snippet': "print(' '.join([str(ord(a)) for a in var0]))"}
Generated  translation
print (''. join ( [ str ( ord ( a ) ) for a in var0 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['delete', 'letters', 'from', 'string', 'str0'], 'words': ['delete', 'letters', 'from', 'string', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '12454v'}, 'snippet': '"""""".join(filter(str.isdigit, \'str0\'))'}
Generated  translation
" " " " " ". join ( filter ( str. isdigit,'str0') ) 
--------- B -----------
{'intent': {'gloss': ['generate', 'all', 'permutations', 'of', 'list', 'str0', 'and', 'list', 'str1'], 'words': ['generate', 'all', 'permutations', 'of', 'list', 'str0', 'and', 'list', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '[1, 2, 3]', 'str1': '[4, 5, 6]', '[ str0 ]': '[1, 2, 3]', '[ str1 ]': '[4, 5, 6]'}, 'snippet': 'print(list(itertools.product([ str0 ], [ str1 ])))'}
Generated  translation
print ( list ( itertools. product ( [ str0 ], [ str1 ] ) ) ) 
--------- B -----------
{'intent': {'gloss': ['call', 'base', 'class', "'", 's', '_', '_', 'init', '_', '_', 'method', 'from', 'the', 'child', 'class', 'var0'], 'words': ['call', 'base', 'class', "'", 's', '_', '_', 'init', '_', '_', 'method', 'from', 'the', 'child', 'class', 'var0'], 'after': [' ', ' ', '', '', ' ', '', '', '', '', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'childclass'}, 'snippet': 'super(var0, self).__init__(*args, **kwargs)'}
Generated  translation
super ( var0, self ). _ _ init _ _ ( * args, * * kwargs ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'structured', 'numpy', 'array', 'str0', 'on', 'multiple', 'columns', 'str1', ',', 'str2', 'and', 'str3', '.'], 'words': ['sort', 'a', 'structured', 'numpy', 'array', 'str0', 'on', 'multiple', 'columns', 'str1', ',', 'str2', 'and', 'str3', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'df', 'str1': 'year', 'str2': 'month', 'str3': 'day'}, 'snippet': "str0.sort(['str1', 'str2', 'str3'])"}
Generated  translation
str0. sort ( ['str1 ','str2 ','str3'] ) 
--------- B -----------
{'intent': {'gloss': ['group', 'rows', 'of', 'pandas', 'dataframe', 'var0', 'with', 'same', 'str0'], 'words': ['group', 'rows', 'of', 'pandas', 'dataframe', 'var0', 'with', 'same', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'id'}, 'snippet': "var0.groupby('str0').agg(lambda x: x.tolist())"}
Generated  translation
var0. groupby ('str0'). agg ( lambda x : x. tolist ( ) ) 
--------- B -----------
{'intent': {'gloss': ['decode', 'url', '-', 'encoded', 'string', 'var0', 'to', 'its', 'character', 'equivalents'], 'words': ['decode', 'url', '-', 'encoded', 'string', 'var0', 'to', 'its', 'character', 'equivalents'], 'after': [' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'some_string'}, 'snippet': 'urllib.parse.unquote(urllib.parse.unquote(var0))'}
Generated  translation
urllib. parse. unquote ( urllib. parse. unquote ( var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['create', 'array', 'var0', 'containing', 'integers', 'from', 'stdin'], 'words': ['create', 'array', 'var0', 'containing', 'integers', 'from', 'stdin'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'var0.fromlist([int(val) for val in stdin.read().split()])'}
Generated  translation
var0. fromlist ( [ int ( val ) for val in stdin. read ( ). split ( ) ] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'all', 'var0', 'tags', 'where', 'the', 'text', 'starts', 'with', 'value', 'str0', 'using', 'regex'], 'words': ['get', 'all', 'var0', 'tags', 'where', 'the', 'text', 'starts', 'with', 'value', 'str0', 'using', 'regex'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'str0': 'some text'}, 'snippet': 'doc.xpath("//a[starts-with(text(),\'some text\')]")'}
Generated  translation
doc. xpath ( " / / a [ starts - with ( text ( ),'some text') ] " ) 
--------- B -----------
{'intent': {'gloss': ['decode', 'a', 'urllib', 'escaped', 'url', 'string', 'var0', 'with', 'var1'], 'words': ['decode', 'a', 'urllib', 'escaped', 'url', 'string', 'var0', 'with', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'url', 'var1': 'utf8'}, 'snippet': "var0 = urllib.parse.unquote(var0).decode('var1')"}
Generated  translation
var0 = urllib. parse. unquote ( var0 ). decode ('var1') 
--------- B -----------
{'intent': {'gloss': ['find', 'all', 'occurrences', 'of', 'a', 'substring', 'in', 'a', 'string'], 'words': ['find', 'all', 'occurrences', 'of', 'a', 'substring', 'in', 'a', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "[m.start() for m in re.finditer('test', 'test test test test')]"}
Generated  translation
[ m. start ( ) for m in re. finditer ('test ','test test test test') ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'number', '2130706433', 'to', 'ip', 'string'], 'words': ['convert', 'a', 'number', '2130706433', 'to', 'ip', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "socket.inet_ntoa(struct.pack('!l', 2130706433))"}
Generated  translation
socket. inet _ ntoa ( struct. pack ( '! l ', 2130706433 ) ) 
--------- B -----------
{'intent': {'gloss': ['assign', 'an', 'array', 'of', 'floats', 'in', 'range', 'from', '0', 'to', '100', 'to', 'a', 'variable', 'var0'], 'words': ['assign', 'an', 'array', 'of', 'floats', 'in', 'range', 'from', '0', 'to', '100', 'to', 'a', 'variable', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'values'}, 'snippet': 'var0 = np.array([i for i in range(100)], dtype=np.float64)'}
Generated  translation
var0 = np. array ( [ i for i in range ( 100 ) ], dtype = np. float64 ) 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'numpy', 'array', 'containing', 'elements', 'of', 'array', 'var0', 'as', 'pointed', 'to', 'by', 'index', 'in', 'array', 'var1'], 'words': ['create', 'a', 'numpy', 'array', 'containing', 'elements', 'of', 'array', 'var0', 'as', 'pointed', 'to', 'by', 'index', 'in', 'array', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'b'}, 'snippet': 'var0[np.arange(var0.shape[0])[:, (none)], var1]'}
Generated  translation
var0 [ np. arange ( var0. shape [ 0 ] ) [ :, ( none ) ], var1 ] 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'string', 'var0', 'by', 'multiple', 'words', 'var1', 'or', 'var2', 'or', 'var3'], 'words': ['split', 'a', 'string', 'var0', 'by', 'multiple', 'words', 'var1', 'or', 'var2', 'or', 'var3'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l', 'var1': 'for', 'var2': 'or', 'var3': 'and'}, 'snippet': "[re.split('_(?:f?or|and)_', s) for s in var0]"}
Generated  translation
[ re. split ('_ (? : f? or | and ) _ ', s ) for s in var0 ] 
--------- B -----------
{'intent': {'gloss': ['sort', 'array', 'var0', 'based', 'on', 'column', 'str0', ',', 'str1', 'and', 'str2'], 'words': ['sort', 'array', 'var0', 'based', 'on', 'column', 'str0', ',', 'str1', 'and', 'str2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'order_array', 'str0': 'year', 'str1': 'month', 'str2': 'day'}, 'snippet': "var0.sort(order=['str0', 'str1', 'str2'])"}
Generated  translation
var0. sort ( order = ['str0 ','str1 ','str2'] ) 
--------- B -----------
{'intent': {'gloss': ['encode', 'a', 'pdf', 'file', 'str0', 'with', 'var0', 'encoding'], 'words': ['encode', 'a', 'pdf', 'file', 'str0', 'with', 'var0', 'encoding'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'pdf_reference.pdf', 'var0': 'base64'}, 'snippet': "a = open('str0', 'rb').read().encode('var0')"}
Generated  translation
a = open ('str0 ','rb'). read ( ). encode ('var0') 
--------- B -----------
{'intent': {'gloss': ['enclose', 'numbers', 'in', 'quotes', 'in', 'a', 'string', 'str0'], 'words': ['enclose', 'numbers', 'in', 'quotes', 'in', 'a', 'string', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'this is number 1 and this is number 22'}, 'snippet': 're.sub(\'(\\\\d+)\', \'"\\\\1"\', \'str0\')'}
Generated  translation
re. sub ('( \ \ d + ) ','" \ \ 1 " ','str0') 
--------- B -----------
{'intent': {'gloss': ['display', 'current', 'time'], 'words': ['display', 'current', 'time'], 'after': [' ', ' ', '']}, 'slot_map': {}, 'snippet': "now = datetime.datetime.now().strftime('%h:%m:%s')"}
Generated  translation
now = datetime. datetime. now ( ). strftime ('% h : % m : % s') 
--------- B -----------
{'intent': {'gloss': ['decode', 'url', 'var0', 'with', 'utf8', 'and', 'print', 'it'], 'words': ['decode', 'url', 'var0', 'with', 'utf8', 'and', 'print', 'it'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'url'}, 'snippet': "print(urllib.parse.unquote(var0).decode('utf8'))"}
Generated  translation
print ( urllib. parse. unquote ( var0 ). decode ('utf8') ) 
--------- B -----------
{'intent': {'gloss': ['parse', 'string', 'var0', 'into', 'a', 'datetime', 'object', 'using', 'format', 'pattern', 'str0'], 'words': ['parse', 'string', 'var0', 'into', 'a', 'datetime', 'object', 'using', 'format', 'pattern', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'datestr', 'str0': '%y-%m-%d'}, 'snippet': "dateobj = datetime.datetime.strptime(var0, 'str0').date()"}
Generated  translation
dateobj = datetime. datetime. strptime ( var0,'str0'). date ( ) 
--------- B -----------
{'intent': {'gloss': ['find', 'the', 'magnitude', '(', 'length', ')', 'squared', 'of', 'a', 'vector', 'var0', 'field'], 'words': ['find', 'the', 'magnitude', '(', 'length', ')', 'squared', 'of', 'a', 'vector', 'var0', 'field'], 'after': [' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'vf'}, 'snippet': "np.einsum('...j,...j->...', var0, var0)"}
Generated  translation
np. einsum ( '... j,.. j - >... ', var0, var0 ) 
--------- B -----------
{'intent': {'gloss': ['un', '-', 'escaping', 'characters', 'in', 'a', 'string', 'with', 'python'], 'words': ['un', '-', 'escaping', 'characters', 'in', 'a', 'string', 'with', 'python'], 'after': ['', '', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': '"""\\\\u003cp\\\\u003e""".decode(\'unicode-escape\')'}
Generated  translation
" " " \ \ u003cp \ \ u003e " " ". decode ('unicode - escape') 
--------- B -----------
{'intent': {'gloss': ['coalesce', 'non', '-', 'word', '-', 'characters', 'in', 'string', 'var0'], 'words': ['coalesce', 'non', '-', 'word', '-', 'characters', 'in', 'string', 'var0'], 'after': [' ', '', '', '', '', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': "print(re.sub('(\\\\w)\\\\1+', '\\\\1', var0))"}
Generated  translation
print ( re. sub ('( \ \ w ) \ \ 1 + ','\ \ 1 ', var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['substract', '1', 'hour', 'and', '10', 'minutes', 'from', 'current', 'time'], 'words': ['substract', '1', 'hour', 'and', '10', 'minutes', 'from', 'current', 'time'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 't = datetime.datetime.now()\nt - datetime.timedelta(hours=1, minutes=10)'}
Generated  translation
t = datetime. datetime. now ( ) t - datetime. timedelta ( hours = 1, minutes = 10 ) 
--------- B -----------
{'intent': {'gloss': ['find', 'indexes', 'of', 'all', 'occurrences', 'of', 'a', 'substring', 'var0', 'in', 'a', 'string', 'var1'], 'words': ['find', 'indexes', 'of', 'all', 'occurrences', 'of', 'a', 'substring', 'var0', 'in', 'a', 'string', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'tt', 'var1': 'ttt'}, 'snippet': "[m.start() for m in re.finditer('(?=tt)', 'var1')]"}
Generated  translation
[ m. start ( ) for m in re. finditer ('(? = tt ) ','var1') ] 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'dictionaries', 'var0', 'by', 'values', 'in', 'an', 'order', 'var1'], 'words': ['sort', 'a', 'list', 'of', 'dictionaries', 'var0', 'by', 'values', 'in', 'an', 'order', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list_of_dct', 'var1': 'order'}, 'snippet': 'sorted(var0, key=lambda x: var1.index(list(x.values())[0]))'}
Generated  translation
sorted ( var0, key = lambda x : var1. index ( list ( x. values ( ) ) [ 0 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['decode', 'a', 'double', 'url', 'encoded', 'string', '\r\nstr0', 'to\r\nstr1'], 'words': ['decode', 'a', 'double', 'url', 'encoded', 'string', '\r\nstr0', 'to\r\nstr1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'fireshot3%2b%25282%2529.png', 'str1': 'fireshot3+(2).png'}, 'snippet': "urllib.parse.unquote(urllib.parse.unquote('str0'))"}
Generated  translation
urllib. parse. unquote ( urllib. parse. unquote ('str0') ) 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'list', 'of', 'all', 'the', 'duplicate', 'items', 'in', 'dataframe', 'var0', 'using', 'pandas'], 'words': ['get', 'a', 'list', 'of', 'all', 'the', 'duplicate', 'items', 'in', 'dataframe', 'var0', 'using', 'pandas'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': "pd.concat(g for _, g in var0.groupby('id') if len(g) > 1)"}
Generated  translation
pd. concat ( g for _, g in var0. groupby ('id') if len ( g ) > 1 ) 
--------- B -----------
{'intent': {'gloss': ['delete', 'every', 'non', 'str0', 'characters', 'from', 'a', 'string', 'var0'], 'words': ['delete', 'every', 'non', 'str0', 'characters', 'from', 'a', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'utf-8', 'var0': 'line'}, 'snippet': "var0 = var0.decode('str0', 'ignore').encode('str0')"}
Generated  translation
var0 = var0. decode ('str0 ','ignore'). encode ('str0') 
--------- B -----------
{'intent': {'gloss': ['encode', 'str0', 'as', 'unicode', 'and', 'decode', 'with', 'utf', '-', '8'], 'words': ['encode', 'str0', 'as', 'unicode', 'and', 'decode', 'with', 'utf', '-', '8'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '']}, 'slot_map': {'str0': "u'xÃ¼yÃ\x9f'"}, 'snippet': '"""xÃ¼yÃ\x9f""".encode(\'raw_unicode_escape\').decode(\'utf-8\')'}
Generated  translation
" " " [UNK] " " ". encode ('raw _ unicode _ escape'). decode ('utf - 8') 
--------- B -----------
{'intent': {'gloss': ['make', 'an', 'http', 'post', 'request', 'with', 'data', 'var0'], 'words': ['make', 'an', 'http', 'post', 'request', 'with', 'data', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'post_data'}, 'snippet': "post_response = requests.post(url='http://httpbin.org/post', json=var0)"}
Generated  translation
post _ response = requests. post ( url ='http : / / httpbin. org / post ', json = var0 ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'items', 'from', 'dictionary', 'var0', 'if', 'the', 'item', "'", 's', 'value', 'var1', 'is', 'equal', 'to', '42'], 'words': ['remove', 'items', 'from', 'dictionary', 'var0', 'if', 'the', 'item', "'", 's', 'value', 'var1', 'is', 'equal', 'to', '42'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mydict', 'var1': 'val'}, 'snippet': 'var0 = {key: var1 for key, var1 in list(var0.items()) if var1 != 42}'}
Generated  translation
var0 = { key : var1 for key, var1 in list ( var0. items ( ) ) if var1! = 42 } 
--------- B -----------
{'intent': {'gloss': ['how', 'do', 'i', 'find', 'an', 'element', 'that', 'contains', 'specific', 'text', 'in', 'selenium', 'webdriver', '(', 'python', ')', '?'], 'words': ['how', 'do', 'i', 'find', 'an', 'element', 'that', 'contains', 'specific', 'text', 'in', 'selenium', 'webdriver', '(', 'python', ')', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '', '']}, 'slot_map': {}, 'snippet': 'driver.find_elements_by_xpath("//*[contains(text(), \'my button\')]")'}
Generated  translation
driver. find _ elements _ by _ xpath ( " / / * [ contains ( text ( ),'my button') ] " ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'unicode', 'string', 'var0', 'to', 'a', 'str0', 'string'], 'words': ['convert', 'a', 'unicode', 'string', 'var0', 'to', 'a', 'str0', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'title', 'str0': 'ascii'}, 'snippet': "unicodedata.normalize('nfkd', var0).encode('str0', 'ignore')"}
Generated  translation
unicodedata. normalize ('nfkd ', var0 ). encode ('str0 ','ignore') 
--------- B -----------
{'intent': {'gloss': ['restart', 'a', 'computer', 'after', 'str0', 'seconds', 'using', 'subprocess'], 'words': ['restart', 'a', 'computer', 'after', 'str0', 'seconds', 'using', 'subprocess'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '900'}, 'snippet': "subprocess.call(['shutdown', '/r', '/t', 'str0'])"}
Generated  translation
subprocess. call ( ['shutdown ','/ r ','/ t ','str0'] ) 
--------- B -----------
{'intent': {'gloss': ['update', 'row', 'values', 'for', 'a', 'column', 'var0', 'using', 'vectorized', 'string', 'operation', 'in', 'pandas'], 'words': ['update', 'row', 'values', 'for', 'a', 'column', 'var0', 'using', 'vectorized', 'string', 'operation', 'in', 'pandas'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'season'}, 'snippet': "df['var0'].str.split('-').str[0].astype(int)"}
Generated  translation
df ['var0']. str. split ('-'). str [ 0 ]. astype ( int ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'date', 'string', 'var0', 'in', 'format', 'pattern', 'str0', 'into', 'a', 'timestamp'], 'words': ['convert', 'date', 'string', 'var0', 'in', 'format', 'pattern', 'str0', 'into', 'a', 'timestamp'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's', 'str0': '%d/%m/%y'}, 'snippet': "time.mktime(datetime.datetime.strptime(var0, 'str0').timetuple())"}
Generated  translation
time. mktime ( datetime. datetime. strptime ( var0,'str0'). timetuple ( ) ) 
--------- B -----------
{'intent': {'gloss': ['django', 'check', 'if', 'an', 'object', 'with', 'criteria', 'var0', 'equal', 'to', 'str0', 'and', 'criteria', 'var1', 'equal', 'to', 'str1', 'exists', 'in', 'model', 'var2'], 'words': ['django', 'check', 'if', 'an', 'object', 'with', 'criteria', 'var0', 'equal', 'to', 'str0', 'and', 'criteria', 'var1', 'equal', 'to', 'str1', 'exists', 'in', 'model', 'var2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'name', 'str0': 'name', 'var1': 'title', 'str1': 'title', 'var2': 'entry'}, 'snippet': "var2.objects.filter(str0='str0', str1='str1').exists()"}
Generated  translation
var2. objects. filter ( str0 ='str0 ', str1 ='str1'). exists ( ) 
--------- B -----------
{'intent': {'gloss': ['delete', 'every', '8th', 'column', 'in', 'a', 'numpy', 'array', 'str0', '.'], 'words': ['delete', 'every', '8th', 'column', 'in', 'a', 'numpy', 'array', 'str0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'a'}, 'snippet': 'np.delete(str0, list(range(0, str0.shape[1], 8)), axis=1)'}
Generated  translation
np. delete ( str0, list ( range ( 0, str0. shape [ 1 ], 8 ) ), axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['find', 'the', 'index', 'of', 'the', 'second', 'occurrence', 'of', 'the', 'substring', 'var0', 'in', 'string', 'str0'], 'words': ['find', 'the', 'index', 'of', 'the', 'second', 'occurrence', 'of', 'the', 'substring', 'var0', 'in', 'string', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'bar', 'str0': 'foo bar bar bar'}, 'snippet': '"""str0""".replace(\'var0\', \'xxx\', 1).find(\'var0\')'}
Generated  translation
" " " str0 " " ". replace ('var0 ','xxx ', 1 ). find ('var0') 
--------- B -----------
{'intent': {'gloss': ['place', 'str0', 'infront', 'of', 'each', 'non', '-', 'letter', 'char', 'in', 'string', 'var0'], 'words': ['place', 'str0', 'infront', 'of', 'each', 'non', '-', 'letter', 'char', 'in', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '', 'var0': 'line'}, 'snippet': "print(re.sub('[_%^$]', '\\\\\\\\\\\\g<0>', var0))"}
Generated  translation
print ( re. sub ('[ _ % ^ $ ] ','\ \ \ \ \ \ g < 0 > ', var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['rearrange', 'the', 'columns', 'str0', ',', 'str1', ',', 'str2', ',', 'str3', 'of', 'pandas', 'dataframe', 'var0', 'in', 'mentioned', 'sequence', 'str2', ',', 'str3', ',', 'str0', ',', 'str1'], 'words': ['rearrange', 'the', 'columns', 'str0', ',', 'str1', ',', 'str2', ',', 'str3', 'of', 'pandas', 'dataframe', 'var0', 'in', 'mentioned', 'sequence', 'str2', ',', 'str3', ',', 'str0', ',', 'str1'], 'after': [' ', ' ', ' ', '', '', '', '', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '', ' ', '', '']}, 'slot_map': {'str0': 'a', 'str1': 'b', 'str2': 'x', 'str3': 'y', 'var0': 'df', 'str4': 'x', 'str5': 'y', 'str6': 'a', 'str7': 'b'}, 'snippet': "var0 = var0[['str4', 'str5', 'str6', 'str7']]"}
Generated  translation
var0 = var0 [ ['str4 ','str5 ','str6 ','str7'] ] 
--------- B -----------
{'intent': {'gloss': ['strip', 'everything', 'up', 'to', 'and', 'including', 'the', 'character', 'str0', 'from', 'url', 'var0', ',', 'strip', 'the', 'character', 'str1', 'from', 'the', 'remaining', 'string', 'and', 'concatenate', 'str2', 'to', 'the', 'end'], 'words': ['strip', 'everything', 'up', 'to', 'and', 'including', 'the', 'character', 'str0', 'from', 'url', 'var0', ',', 'strip', 'the', 'character', 'str1', 'from', 'the', 'remaining', 'string', 'and', 'concatenate', 'str2', 'to', 'the', 'end'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '&', 'var0': 'url', 'str1': '=', 'str2': '.html'}, 'snippet': "var0.split('str0')[-1].replace('str1', '') + 'str2'"}
Generated  translation
var0. split ('str0') [ - 1 ]. replace ('str1 ','' ) +'str2'
--------- B -----------
{'intent': {'gloss': ['save', 'array', 'at', 'index', '0', ',', 'index', '1', 'and', 'index', '8', 'of', 'array', 'var0', 'to', 'tmp', 'file', 'var1'], 'words': ['save', 'array', 'at', 'index', '0', ',', 'index', '1', 'and', 'index', '8', 'of', 'array', 'var0', 'to', 'tmp', 'file', 'var1'], 'after': [' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'np', 'var1': 'tmp'}, 'snippet': 'var0.savez(var1, *[getarray[0], getarray[1], getarray[8]])'}
Generated  translation
var0. savez ( var1, * [ getarray [ 0 ], getarray [ 1 ], getarray [ 8 ] ] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'data', 'of', 'dataframe', 'var0', 'where', 'the', 'sum', 'of', 'column', 'str0', 'grouped', 'by', 'column', 'str1', 'is', 'equal', 'to', '0'], 'words': ['get', 'data', 'of', 'dataframe', 'var0', 'where', 'the', 'sum', 'of', 'column', 'str0', 'grouped', 'by', 'column', 'str1', 'is', 'equal', 'to', '0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'x', 'str1': 'user'}, 'snippet': "var0.loc[var0.groupby('str1')['str0'].transform(sum) == 0]"}
Generated  translation
var0. loc [ var0. groupby ('str1') ['str0']. transform ( sum ) = = 0 ] 
--------- B -----------
{'intent': {'gloss': ['adding', 'a', '1', '-', 'd', 'array', 'str0', 'to', 'a', '3', '-', 'd', 'array', 'str1'], 'words': ['adding', 'a', '1', '-', 'd', 'array', 'str0', 'to', 'a', '3', '-', 'd', 'array', 'str1'], 'after': [' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', '']}, 'slot_map': {'str0': '[1, 2, 3, 4, 5, 6, 7, 8, 9]', 'str1': 'np.zeros((6, 9, 20))', '[ str0 ]': '[1, 2, 3, 4, 5, 6, 7, 8, 9]'}, 'snippet': 'np.zeros((6, 9, 20)) + np.array([ str0 ])[(none), :, (none)]'}
Generated  translation
np. zeros ( ( 6, 9, 20 ) ) + np. array ( [ str0 ] ) [ ( none ), :, ( none ) ] 
--------- B -----------
{'intent': {'gloss': ['add', 'array', 'of', 'shape', 'str0', 'to', 'array', 'str1'], 'words': ['add', 'array', 'of', 'shape', 'str0', 'to', 'array', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '(6, 9, 20)', 'str1': '[1, 2, 3, 4, 5, 6, 7, 8, 9]', '( str0 )': '(6, 9, 20)', '[ str1 ]': '[1, 2, 3, 4, 5, 6, 7, 8, 9]'}, 'snippet': 'np.zeros(( str0 )) + np.array([ str1 ]).reshape((1, 9, 1))'}
Generated  translation
np. zeros ( ( str0 ) ) + np. array ( [ str1 ] ). reshape ( ( 1, 9, 1 ) ) 
--------- B -----------
{'intent': {'gloss': ['split', 'dictionary', 'of', 'lists', 'into', 'list', 'of', 'dictionaries'], 'words': ['split', 'dictionary', 'of', 'lists', 'into', 'list', 'of', 'dictionaries'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'map(dict, zip(*[[(k, v) for v in value] for k, value in list(d.items())]))'}
Generated  translation
map ( dict, zip ( * [ [ ( k, v ) for v in value ] for k, value in list ( d. items ( ) ) ] ) ) 
--------- B -----------
{'intent': {'gloss': ['pivot', 'dataframe', 'var0', 'so', 'that', 'values', 'for', 'var1', 'become', 'column', 'headings', 'and', 'values', 'for', 'var2', 'become', 'the', 'index'], 'words': ['pivot', 'dataframe', 'var0', 'so', 'that', 'values', 'for', 'var1', 'become', 'column', 'headings', 'and', 'values', 'for', 'var2', 'become', 'the', 'index'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'var1': 'upc', 'var2': 'saleid'}, 'snippet': "var0.pivot_table(index='var2', columns='var1', aggfunc='size', fill_value=0)"}
Generated  translation
var0. pivot _ table ( index ='var2 ', columns ='var1 ', aggfunc ='size ', fill _ value = 0 ) 
--------- B -----------
{'intent': {'gloss': ['select', 'records', 'of', 'dataframe', 'var0', 'where', 'the', 'sum', 'of', 'column', 'str0', 'for', 'each', 'value', 'in', 'column', 'str1', 'is', '0'], 'words': ['select', 'records', 'of', 'dataframe', 'var0', 'where', 'the', 'sum', 'of', 'column', 'str0', 'for', 'each', 'value', 'in', 'column', 'str1', 'is', '0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'x', 'str1': 'user'}, 'snippet': "var0.groupby('str1')['str0'].filter(lambda str0: str0.sum() == 0)"}
Generated  translation
var0. groupby ('str1') ['str0']. filter ( lambda str0 : str0. sum ( ) = = 0 ) 
--------- B -----------
{'intent': {'gloss': ['finding', 'the', 'index', 'of', 'an', 'item', 'str0', 'given', 'a', 'list', '`', '[', 'str0', ',', "'", 'bar', "'", ',', "'", 'baz', "'", ']', '`', 'containing', 'it'], 'words': ['finding', 'the', 'index', 'of', 'an', 'item', 'str0', 'given', 'a', 'list', '`', '[', 'str0', ',', "'", 'bar', "'", ',', "'", 'baz', "'", ']', '`', 'containing', 'it'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '', ' ', '', '', '', ' ', '', '', '', '', ' ', ' ', '']}, 'slot_map': {'str0': 'foo', 'str1': "['foo', 'bar', 'baz']", '[ str1 ]': "['foo', 'bar', 'baz']"}, 'snippet': "[i for i, j in enumerate(['str0', 'bar', 'baz']) if j == 'str0']"}
Generated  translation
[ i for i, j in enumerate ( ['str0 ','bar ','baz'] ) if j = ='str0'] 
--------- B -----------
{'intent': {'gloss': ['convert', 'string', 'str0', 'to', 'an', 'integer', 'timestamp'], 'words': ['convert', 'string', 'str0', 'to', 'an', 'integer', 'timestamp'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '01/12/2011'}, 'snippet': "int(datetime.datetime.strptime('str0', '%d/%m/%y').strftime('%s'))"}
Generated  translation
int ( datetime. datetime. strptime ('str0 ','% d / % m / % y'). strftime ('% s') ) 
--------- B -----------
{'intent': {'gloss': ['calling', 'an', 'external', 'command', 'str0'], 'words': ['calling', 'an', 'external', 'command', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'echo hello world'}, 'snippet': "print(subprocess.popen('str0', shell=true, stdout=subprocess.pipe).stdout.\n    read())"}
Generated  translation
p = subprocess. popen ('str0 ', shell = true, stdout = subprocess. pipe, stderr = subprocess. stdout ) for line in p. stdout. readlines ( ) : print ( line, end ='' ) retval = p. wait ( ) 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'list', 'var0', 'containing', 'all', 'files', 'in', 'directory', 'str0', 'that', 'starts', 'with', 'numbers', 'between', '0', 'and', '9', 'and', 'ends', 'with', 'the', 'extension', 'str1'], 'words': ['create', 'a', 'list', 'var0', 'containing', 'all', 'files', 'in', 'directory', 'str0', 'that', 'starts', 'with', 'numbers', 'between', '0', 'and', '9', 'and', 'ends', 'with', 'the', 'extension', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'files', 'str0': '.', 'str1': '.jpg'}, 'snippet': "var0 = [f for f in os.listdir('str0') if re.match('[0-9]+.*\\\\.jpg', f)]"}
Generated  translation
var0 = [ f for f in os. listdir ('str0') if re. match ('[ 0 - 9 ] +. * \ \. jpg ', f ) ] 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'list', 'where', 'each', 'element', 'is', 'a', 'dictionary', 'with', 'keys', 'str0', 'and', 'str1', 'and', 'values', 'corresponding', 'to', 'each', 'value', 'in', 'the', 'lists', 'referenced', 'by', 'keys', 'str0', 'and', 'str1', 'in', 'dictionary', 'var0'], 'words': ['create', 'a', 'list', 'where', 'each', 'element', 'is', 'a', 'dictionary', 'with', 'keys', 'str0', 'and', 'str1', 'and', 'values', 'corresponding', 'to', 'each', 'value', 'in', 'the', 'lists', 'referenced', 'by', 'keys', 'str0', 'and', 'str1', 'in', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'key1', 'str1': 'key2', 'str2': 'key1', 'str3': 'key2', 'var0': 'd'}, 'snippet': "[{'str2': a, 'str3': b} for a, b in zip(var0['str2'], var0['str3'])]"}
Generated  translation
[ {'str2': a,'str3': b } for a, b in zip ( var0 ['str2'], var0 ['str3'] ) ] 
--------- B -----------
{'intent': {'gloss': ['calling', 'an', 'external', 'command', 'str0'], 'words': ['calling', 'an', 'external', 'command', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'ls'}, 'snippet': "p = subprocess.popen('str0', shell=true, stdout=subprocess.pipe, stderr=\n    subprocess.stdout)\nfor line in p.stdout.readlines():\n    print(line, end=' ')\nretval = p.wait()"}
Generated  translation
p = subprocess. popen ('str0 ', shell = true, stdout = subprocess. pipe, stderr = subprocess. stdout ) for line in p. stdout. readlines ( ) : print ( line, end ='' ) retval = p. wait ( ) 
dev beam accuracy 0.93
dev beam oracle accuracy 1.0
dev beam bleu score 0.9354070757769029
dev beam exececution accuracy 0.0
got:
tensor([ 4949,  1006, 20014,  1010, 13075,  1007,   102,  3975,  1006,  1007,
          102, 23806,   102,   102,   102,   102, 23806,   102,   102,   102,
          102,   102,   102,  2385,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 20014,  1006,  1007,   102], device='cuda:0')
got:
tensor([ 7680,  1006,  2003,  7076, 26897,  1006,  1060,  1010, 20014,  1007,
         2005,  1060,  1999, 13075,  2692,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  4675,  1006, 13075,  2692,  1007,   102], device='cuda:0')
got:
tensor([ 1031,  1006,  1045,  1010, 20014,  1006,  1046,  1007,  1007,  2005,
         1045,  1999, 13075,  2692,  1033,   102,  3975,  1006,  1007,   102,
          102,   102,   102,   102,  1033,   102,   102,   102,   102,   102,
          102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  2862,  1006, 13075,  2692,  1007,   102], device='cuda:0')
got:
tensor([ 4949,  1006, 20014,  1010, 13075,  2692,  1007,   102,  1006, 13075,
         2692,  1007,   102,   102,   102,   102,  1006,  3940,  1007,   102,
          102,   102,   102,  1006, 13075,  2692,  1007,   102,   102,  1006,
         1007,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 10722, 10814,  1006,  1048,  1007,   102], device='cuda:0')
got:
tensor([19616,  1006, 13075,  2692,  1010,  3145,  1027, 23375,  1047,  1024,
         1040,  1031,  1047,  1033,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 19616,  1006, 13075,  2692,  1007,   102], device='cuda:0')
got:
tensor([18798,  1006, 13075,  2692,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 18798,  1006, 13075,  2692,  1007,   102], device='cuda:0')
got:
tensor([18798,  1006, 13075,  2692,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 18798,  1006, 13075,  2692,  1007,   102], device='cuda:0')
got:
tensor([18798,  1006, 13075,  2692,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 18798,  1006, 13075,  2692,  1007,   102], device='cuda:0')
got:
tensor([18798,  1006, 13075,  2692,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 18798,  1006, 13075,  2692,  1007,   102], device='cuda:0')
got:
tensor([18798,  1006, 13075,  2692,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 18798,  1006, 13075,  2692,  1007,   102], device='cuda:0')
got:
tensor([ 2828,  1006, 13075,  2692,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  2828,  1006, 13075,  2692,  1007,   102], device='cuda:0')
got:
tensor([ 2003,  7076, 26897,  1006, 13075,  2692,  1010,  2358,  2099,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,  1006,  1007,   102,   102,   102,
          102,  2003,  7076, 26897], device='cuda:0')
source:
tensor([  101,  2828,  1006, 13075,  2692,  1007,   102], device='cuda:0')
got:
tensor([ 2003,  7076, 26897,  1006, 13075,  2692,  1010,  2358,  2099,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,  1006,  1007,   102,   102,   102,
          102,  2003,  7076, 26897], device='cuda:0')
source:
tensor([  101,  2828,  1006, 13075,  2692,  1007,   102], device='cuda:0')
got:
tensor([ 2003,  7076, 26897,  1006, 13075,  2692,  1010,  2358,  2099,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,  1006,  1007,   102,   102,   102,
          102,  2003,  7076, 26897], device='cuda:0')
source:
tensor([  101,  2828,  1006, 13075,  2692,  1007,   102], device='cuda:0')
got:
tensor([ 2003,  7076, 26897,  1006, 13075,  2692,  1010,  2358,  2099,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,  1006,  1007,   102,   102,   102,
          102,  2003,  7076, 26897], device='cuda:0')
source:
tensor([  101,  2828,  1006, 13075,  2692,  1007,   102], device='cuda:0')
got:
tensor([14931, 18863,  2015,  1012,  3612,  3363,  1012,  5371,  1006,  1005,
         1032,  1050,  1005,  1010,  1015,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,  8364,  2099,   102,   102,   102,
          102,   102,   102,   102], device='cuda:0')
source:
tensor([ 101, 5371, 1012, 6148, 1006, 1014, 1007,  102], device='cuda:0')
got:
tensor([2051, 1012, 3637, 1006, 1015, 1007,  102,  102,  102,  102, 3637, 1006,
        1014, 1007,  102, 1027, 1015,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102],
       device='cuda:0')
source:
tensor([ 101, 2051, 1012, 3637, 1006, 1015, 1007,  102], device='cuda:0')
got:
tensor([1031, 1033,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102],
       device='cuda:0')
source:
tensor([ 101, 2026, 1035, 2862, 1027, 1031, 1033,  102], device='cuda:0')
got:
tensor([ 2128,  1012,  3975,  1006,  1005,  1032,  1032,  1031,  1006,  1012,
         1008,  1007,  1032,  1032,  1033,  1005,  1010, 13075,  2692,  1007,
          102,   102,   102,   102, 13075,  2692,  1012,  3975,  1006,  1005,
         1032,  1032,  1055,  1005], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  3975,  1006,  1007,   102],
       device='cuda:0')
got:
tensor([ 1031,  8875,  1012,  6167,  1006,  1007,  2005,  8875,  1999, 13075,
         2692,  1012,  3975,  1006,  1005,  1010,  1005,  1007,  1033,   102,
          102,   102,   102,   102, 13075,  2692,  1007,   102,   102,   102,
          102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  3975,  1006,  1007,   102],
       device='cuda:0')
got:
tensor([ 2330,  1006,  1005,  1037,  1005,  1010,  1005,  1054,  1005,  1007,
         1012,  2485,  1006,  1007,   102, 20346,  2015,   102,   102,   102,
          102,   102,   102,   102, 20346,  2015,   102, 20346,  2015,   102,
          102,   102,   102,   102], device='cuda:0')
source:
tensor([ 101, 3213, 1012, 4339, 4974, 2121, 1006, 1007,  102], device='cuda:0')
got:
tensor([ 7680,  1006, 27937,  1012,  2073,  1006, 27937,  1012, 19027, 15465,
         1006, 18798,  1006, 13075,  2692,  1007,  1007,  1010,  8123,  1027,
         1015,  1007,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102], device='cuda:0')
source:
tensor([ 101, 1037, 1012, 7680, 1006, 8123, 1027, 1015, 1007,  102],
       device='cuda:0')
got:
tensor([ 1031,  1060,  2005,  1060,  1999, 13075,  2692,  2065,  1060,  1999,
        13075,  2487,  1033,   102,   102,   102, 13075,  2692,  1033,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2487,  1012,  7949,  1006, 13075,  2692,  1007,   102],
       device='cuda:0')
got:
tensor([ 2026,  2638, 13668,  2923,  1027,  2862,  1006, 13075,  2692,  1007,
          102,  2275,  1006, 13075,  2692,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  2862,  1006,  2275,  1006, 13075,  2692,  1007,  1007,   102],
       device='cuda:0')
got:
tensor([ 2026,  2638, 13668,  2923,  1027,  2862,  1006, 13075,  2692,  1007,
          102,  2275,  1006, 13075,  2692,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  2862,  1006,  2275,  1006, 13075,  2692,  1007,  1007,   102],
       device='cuda:0')
got:
tensor([19616,  1006,  2862,  1006,  2951,  1012,  5167,  1006,  1007,  1007,
         1010,  3145,  1027, 23375,  1056,  1024,  1040,  1031,  1015,  1033,
         1031,  1014,  1033,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 19616,  1006,  1040,  1012,  5167,  1006,  1007,  1007,   102],
       device='cuda:0')
got:
tensor([20014,  1006,  1005,  2358,  2099,  2692,  1005,  1010,  1016,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,  1006,  1005,  2358,  2099,  2692,  1005,  1007,
          102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 20014,  1006,  1005,  2358,  2099,  2692,  1005,  1007,   102],
       device='cuda:0')
got:
tensor([ 2003,  7076, 26897,  1006, 13075,  2692,  1010,  2358,  2099,  1007,
          102,   102,   102,   102,   102,   102,  1035,  3231,  1006,  1007,
          102,   102,   102,   102,   102,   102,   102,  2003,  4305, 23806,
         1006,  1007,   102,   102], device='cuda:0')
source:
tensor([  101,  2828,  1006, 13075,  2692,  1007,  2003,  2358,  2099,   102],
       device='cuda:0')
got:
tensor([13075,  2487,  1012, 10439, 10497,  1006, 13075,  2692,  1007,   102,
          102,   102,   102,   102,   102, 13075,  2487,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2487,  1012,  7949,  1006, 13075,  2692,  1007,   102],
       device='cuda:0')
got:
tensor([13075,  2487,  1012, 10439, 10497,  1006, 13075,  2692,  1007,   102,
          102,   102,   102,   102,   102, 13075,  2487,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2487,  1012,  7949,  1006, 13075,  2692,  1007,   102],
       device='cuda:0')
got:
tensor([13075,  2487,  1012, 10439, 10497,  1006, 13075,  2692,  1007,   102,
          102,   102,   102,   102,   102, 13075,  2487,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2487,  1012,  7949,  1006, 13075,  2692,  1007,   102],
       device='cuda:0')
got:
tensor([13075,  2692,  1012, 19274,  1006,  1014,  1010,  1005,  2358,  2099,
         2692,  1005,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102, 13075,  2692,  1033,   102,   102,   102,
          102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012, 10439, 10497,  1006,  2260,  1007,   102],
       device='cuda:0')
got:
tensor([ 2131, 19321,  2099,  1006, 13075,  2692,  1010,  1005, 13075,  2692,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,  2003,
         7076, 26897,  1006, 13075,  2692,  1007,   102], device='cuda:0')
source:
tensor([  101,  6140,  1006,  2828,  1006, 13075,  2692,  1007,  1007,   102],
       device='cuda:0')
got:
tensor([ 2007,  2330,  1006, 13075,  2692,  1007,  2004,  1042,  1024,  2709,
        13075,  2692,  1027,  1042,  1012,  4339,  1006,  1005,  8299,  1024,
         1013,  1013,  7479,  1012,  8224,  1012,  4012,  1005,  1007,   102,
          102,   102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  1054,  1027, 11186,  1012,  2131,  1006, 13075,  2692,  1007,
          102], device='cuda:0')
got:
tensor([ 3191, 20014,  1006,  7953,  1006,  1005,  3332,  1011,  7953,  1005,
         1007,  1012,  3975,  1006,  1005,  1010,  1005,  1007,  1007,   102,
          102,   102,   102,   102,   102,  7953,  1006,  1007,   102,   102,
          102,   102,   102,  1012,  6167,  1006,  1007], device='cuda:0')
source:
tensor([ 101, 7953, 1006, 1005, 4607, 2115, 7953, 1024, 1005, 1007,  102],
       device='cuda:0')
got:
tensor([ 1031,  1005,  7592,  1005,  2005,  1060,  1999,  2275,  1006,  1031,
         1005,  1037,  1005,  1010,  1005,  1038,  1005,  1033,  1007,  1033,
          102, 10439, 10497,  1006,  1018,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([ 101, 1037, 1012, 7949, 1006, 2862, 1006, 1038, 1007, 1007,  102],
       device='cuda:0')
got:
tensor([ 9808,  1012, 10381,  4305,  2099,  1006, 13075,  2692,  1007,   102,
         9808,  1012,  4130,  1012,  3693,  1006, 13075,  2692,  1010,  1005,
        16101, 18442,  1005,  1007,   102,  5371, 18442,  1012,  2485,  1006,
         1007,   102,   102,   102,  9808,  1012,  4130], device='cuda:0')
source:
tensor([  101,  9808,  1012, 10381,  4305,  2099,  1006, 13075,  2692,  1007,
          102], device='cuda:0')
got:
tensor([19616,  1006,  2862,  1006, 13075,  2692,  1012,  5167,  1006,  1007,
         1007,  1010,  3145,  1027, 23375,  1047,  1035,  1058,  1024,  1047,
         1012,  2896,  1006,  1007,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 19616,  1006, 13075,  2692,  1012,  5167,  1006,  1007,  1007,
          102], device='cuda:0')
got:
tensor([1031, 2358, 2099, 2692, 1033,  102,  102, 1031, 1015, 1033,  102,  102,
         102,  102,  102, 1031, 1016, 1033,  102,  102, 1005,  102,  102,  102,
        1005, 2358, 2099, 2692, 1005, 1007,  102,  102,  102,  102,  102,  102,
         102], device='cuda:0')
source:
tensor([  101, 14101,  1006,  1008,  1031,  2358,  2099,  2692,  1033,  1007,
          102], device='cuda:0')
got:
tensor([1031, 2358, 2099, 2692, 1033,  102,  102, 1031, 1015, 1033,  102,  102,
         102,  102,  102, 1031, 1016, 1033,  102,  102, 1005,  102,  102,  102,
        1005, 2358, 2099, 2692, 1005, 1007,  102,  102,  102,  102,  102,  102,
         102], device='cuda:0')
source:
tensor([  101, 14101,  1006,  1008,  1031,  2358,  2099,  2692,  1033,  1007,
          102], device='cuda:0')
got:
tensor([ 4487,  6593,  1006,  4949,  1006, 23375,  1055,  1024,  1055,  1012,
         3975,  1006,  1005,  1024,  1005,  1007,  1010,  1031,  2358,  2099,
         2692,  1033,  1007,  1007,   102,   102,   102,   102,   102,  1031,
         1015,  1033,  1007,   102,   102,   102,   102], device='cuda:0')
source:
tensor([ 101, 4487, 6593, 1006, 1031, 2358, 2099, 2692, 1033, 1007,  102],
       device='cuda:0')
got:
tensor([13075,  2692,  1012,  5436,  1006,  1060,  1027,  1005, 21461,  2102,
         1005,  1010,  1061,  1027,  1005,  1054,  1005,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  5436,  1006,  5722,  1027,  6270,  1007,
          102], device='cuda:0')
got:
tensor([ 1046,  3385,  1012,  7170,  1006,  2330,  1006,  1005,  2358,  2099,
         2692,  1005,  1007,  1007,   102, 21933,  3207,  1006,  1005, 21183,
         2546,  1011,  1022,  1005,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  1046,  3385,  1012, 15665,  1006,  5227,  1012,  2303,  1007,
          102], device='cuda:0')
got:
tensor([ 3058,  7292,  1012,  3058,  7292,  1012,  2085,  1006,  1007,  1012,
         3058,  1006,  1007,   102,  3058,  7292,  1012, 22313, 20042,  2050,
         1006,  2847,  1027,  1015,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([ 101, 3058, 7292, 1012, 3058, 7292, 1012, 2085, 1006, 1007,  102],
       device='cuda:0')
got:
tensor([ 2128,  1012,  2424,  8095,  1006,  1005,  1032,  1032,  1059,  1009,
         1005,  1010, 13075,  2692,  1007,   102, 13075,  2692,  1012, 12667,
        24901,  1006,  1007,   102,   102,   102,   102,   102, 13075,  2692,
         1007,   102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  3975,  1006,  1005,  1032,  1050,  1005,
         1007,   102], device='cuda:0')
got:
tensor([ 2128,  1012,  3975,  1006,  1005,  1032,  1032,  1031,  1012,  1008,
         1029,  1032,  1032,  1033,  1005,  1010, 13075,  2692,  1007,   102,
         1005,  2358,  2099,  2692,  1005,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,  1055,  1012,  3975], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  3975,  1006,  1005,  1005,  1010,  1018,
         1007,   102], device='cuda:0')
got:
tensor([13075,  2692,  1012,  3769,  1006,  1005,  2358,  2099,  2692,  1005,
         1010,  3904,  1007,   102,   102,   102,   102,  1031,  2358,  2099,
         2692,  1033,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  3972, 13075,  2692,  1031,  1005,  2358,  2099,  2692,  1005,
         1033,   102], device='cuda:0')
got:
tensor([ 1031,  1006,  1045,  1010, 20014,  1006,  1046,  1007,  1007,  2005,
         1045,  1999, 13075,  2692,  1033,   102,  3975,  1006,  1007,   102,
          102,   102,   102,   102,  1033,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1027,  4949,  1006,  2862,  1010, 13075,  2692,
         1007,   102], device='cuda:0')
got:
tensor([ 2131, 19321,  2099,  1006, 13075,  2487,  1010, 13075,  2692,  1007,
          102,  1005, 13075,  2692,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  2131, 19321,  2099,  1006, 13075,  2487,  1010, 13075,  2692,
         1007,   102], device='cuda:0')
got:
tensor([ 2003,  7076, 26897,  1006, 13075,  2692,  1010,  2358,  2099,  1007,
          102,   102,   102,   102,   102,   102,  1035,  3231,  1006,  1007,
          102,   102,   102,   102,   102,   102,   102,  2003,  4305, 23806,
         1006,  1007,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  2003,  7076, 26897,  1006, 13075,  2692,  1010,  2358,  2099,
         1007,   102], device='cuda:0')
got:
tensor([ 2003,  7076, 26897,  1006, 13075,  2692,  1010,  2358,  2099,  1007,
          102,   102,   102,   102,   102,   102,  1035,  3231,  1006,  1007,
          102,   102,   102,   102,   102,   102,   102,  2003,  4305, 23806,
         1006,  1007,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  2003,  7076, 26897,  1006, 13075,  2692,  1010,  2358,  2099,
         1007,   102], device='cuda:0')
got:
tensor([ 2003,  7076, 26897,  1006, 13075,  2692,  1010,  2358,  2099,  1007,
          102,   102,   102,   102,   102,   102,  1035,  3231,  1006,  1007,
          102,   102,   102,   102,   102,   102,   102,  2003,  4305, 23806,
         1006,  1007,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  2003,  7076, 26897,  1006, 13075,  2692,  1010,  2358,  2099,
         1007,   102], device='cuda:0')
got:
tensor([ 2003,  7076, 26897,  1006, 13075,  2692,  1010,  2358,  2099,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102, 13075,  2692,   102,   102,  2003,  2025,
         2358,  2099,  1006,  1007,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  2003,  7076, 26897,  1006, 13075,  2692,  1010,  2358,  2099,
         1007,   102], device='cuda:0')
got:
tensor([ 9808,  1012,  4130,  1012,  2003,  8873,  2571,  1006, 13075,  2692,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102, 13075,  2692,   102,   102,  1024,  3413,
          102,   102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  9808,  1012,  4130,  1012, 18061,  5910,  1006, 13075,  2692,
         1007,   102], device='cuda:0')
got:
tensor([ 4654,  8586,  1006,  4012, 22090,  1006, 13075,  2692,  1007,  1012,
         3191,  1006,  1007,  1007,   102,  3793,  1035,  5371,  1012,  3975,
         1006,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 12324, 17727, 17727,  1012,  2128, 11066,  1006, 13075,  2692,
         1007,   102], device='cuda:0')
got:
tensor([13075,  2692,  1012,  2139,  8569,  2290,  1006,  1005,  2139,  8569,
         2290,  1005,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102, 13075,  2692,  1012,  2139,  8569,  2290,
         1006,  5549,  1027,  2995,  1007,   102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  2448,  1006,  2139,  8569,  2290,  1027,
         2995,  1007,   102], device='cuda:0')
got:
tensor([ 1051,  2094,  1027, 11186,  1012,  2131,  1006,  1005,  8299,  1024,
         1013,  1013,  7479,  1012,  9530,  8873,  2290,  1005,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  5227,  1012, 12098,  5620,  1031,  1005,  2026, 28689,  2213,
         1005,  1033,   102], device='cuda:0')
got:
tensor([ 2007,  2330,  1006, 13075,  2692,  1007,  2004,  1042,  1024,  1042,
         1027,  3191,  4179,  1006,  1007,  3210,  1027,  4175,  1006,  1005,
         1032,  1050,  1005,  1007,  2096, 20934,  2546,  1024,  3210,  1009,
         1027,  4175,  1006,  1005,  1032,  1050,  1005], device='cuda:0')
source:
tensor([  101,  9808,  1012, 28093,  1006, 13075,  2692,  1007,  1012,  2358,
         1035,  2946,   102], device='cuda:0')
got:
tensor([ 7680,  1006,  8875,  1031,  1005,  2358,  2099,  2692,  1005,  1033,
         2005,  2773,  1999, 13075,  2692,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  4175,  1006,  1005,  2358,  2099,  2692,
         1005,  1007,   102], device='cuda:0')
got:
tensor([ 7680,  1006,  8875,  1031,  1005,  2358,  2099,  2692,  1005,  1033,
         2005,  2773,  1999, 13075,  2692,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  4175,  1006,  1005,  2358,  2099,  2692,
         1005,  1007,   102], device='cuda:0')
got:
tensor([ 3844,  4014,  1012,  6100,  2475,  1006, 13075,  2692,  1010, 13075,
         2487,  1007,   102,  1011,  1015,   102,   102, 13075,  2692,   102,
          102,   102,   102,   102, 13075,  2487,   102,  1035,  6100,  2475,
         1005,   102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  3844,  4014,  1012,  6100,  1006, 13075,  2692,  1010, 13075,
         2487,  1007,   102], device='cuda:0')
got:
tensor([2070, 1035, 2765, 1027, 4275, 1012, 4831, 2078, 1006, 1031, 1005, 1037,
        1005, 1010, 1005, 1038, 1005, 1033, 1007,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102], device='cuda:0')
source:
tensor([  101, 12731, 25301,  2099,  1012, 18584,  5643,  1006,  1007,  1031,
         1014,  1033,   102], device='cuda:0')
got:
tensor([27937,  1012,  5490,  5339,  1006,  1006, 13075,  2692,  1012,  7680,
         1006,  8123,  1027,  1015,  1007,  1007,  1012,  2812,  1006,  1007,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,  1012], device='cuda:0')
source:
tensor([  101, 27937,  1012,  2812,  1006, 13075,  2692,  1010,  8123,  1027,
         1015,  1007,   102], device='cuda:0')
got:
tensor([ 6140,  1006, 13075,  2487,  1012,  2131,  1006, 13075,  2692,  1007,
         1007,   102, 13075,  2487,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102, 13075,  2487,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  6140,  1006, 13075,  2487,  1012,  5950,  1006, 13075,  2692,
         1007,  1007,   102], device='cuda:0')
got:
tensor([13075,  2692,  1031,  1005,  2358,  2099,  2692,  1005,  1033,  1027,
         1015,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102, 13075,  2692,  1031,  1005,  2358,  2099,
         2692,  1005,  1033,   102,  8123,  1027,  1015,  1007,   102],
       device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012, 10651,  1006,  2358,  2099,  2692,  1027,
         1015,  1007,   102], device='cuda:0')
got:
tensor([ 2051,  1012,  2651,  1006,  1007,  1009,  3058,  7292,  1012, 22313,
        20042,  2050,  1006,  2420,  1027,  1015,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101,  3058,  7292,  1012,  2085,  1006,  1052, 22123,  2480,  1012,
        11396,  1007,   102], device='cuda:0')
got:
tensor([ 6140,  1006,  2461,  1006, 14257,  1006, 13075,  2692,  1012,  1035,
         1035,  4487,  6593,  1035,  1035,  1007,  1007,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,  1005,
          102,   102,   102,   102,   102,   102,   102,  2003,  7076],
       device='cuda:0')
source:
tensor([  101, 20014,  1006,  2461,  1006,  1016,  1012,  4868,  1008,  2531,
         1007,  1007,   102], device='cuda:0')
got:
tensor([13075,  2692,  1012,  3975,  1006,  1005,  2358,  2099,  2692,  1005,
         1007,   102, 13075,  2692,  1012, 12667, 24901,  1006,  1005,  2358,
         2099,  2692,  1005,  1007,   102,   102,   102,   102,   102,  3975,
         1006,  1005,  2358,  2099,  2692,  1005,  1007,   102,   102],
       device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  3975,  1006,  1005,  2358,  2099,  2692,
         1005,  1007,   102], device='cuda:0')
got:
tensor([13075,  2487,  1027,  1046,  3385,  1012, 15653,  2015,  1006, 13075,
         2692,  1010,  5676,  1035,  2004,  6895,  2072,  1027,  6270,  1007,
          102,   102,   102,   102, 13075,  2487,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102, 13075,  2487],
       device='cuda:0')
source:
tensor([  101, 13075,  2487,  1027,  1046,  3385,  1012, 15665,  1006, 13075,
         2692,  1007,   102], device='cuda:0')
got:
tensor([ 9808,  1012,  2330,  1006, 13075,  2692,  1010,  1005,  2358,  2099,
         2692,  1005,  1007,   102,   102,   102, 13075,  2692,   102,   102,
          102,   102,   102,   102,  5549,  1024,  3413,   102,   102,   102,
          102,   102,   102,   102,  9808,  1012,  4130,  1012,  3693],
       device='cuda:0')
source:
tensor([  101,  2330,  1006, 13075,  2692,  1010,  1005,  2358,  2099,  2692,
         1005,  1007,   102], device='cuda:0')
got:
tensor([25353,  2015,  1012,  4130,  1012, 19274,  1006,  1014,  1010,  1005,
         2358,  2099,  2692,  1005,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101, 16234,  1012,  3722,  8873, 21928,  1006,  1005,  2358,  2099,
         2692,  1005,  1007,   102], device='cuda:0')
got:
tensor([16371,  8737,  2100,  1012,  9530, 16280,  8185,  1006,  1031,  1015,
         1010,  1016,  1010,  1017,  1033,  1010,  8123,  1027,  1014,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,  8185,   102],
       device='cuda:0')
source:
tensor([  101, 27937,  1012,  9530, 16280, 12556,  1006,  1006,  1037,  1010,
         1038,  1007,  1007,   102], device='cuda:0')
got:
tensor([13075,  2692,  1027,  2358,  2099,  1006, 13075,  2692,  1007,   102,
          102,   102,   102,   102,   102,   102, 13075,  2692,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102, 13075,  2692,
          102,   102,   102,   102,   102,   102,   102,  5164,  1012],
       device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012, 21933,  3207,  1006,  1005,  5164,  1035,
         4019,  1005,  1007,   102], device='cuda:0')
got:
tensor([13075,  2692,  1027,  2358,  2099,  1006, 13075,  2692,  1007,   102,
          102,   102,   102,   102,   102,   102, 13075,  2692,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102, 13075,  2692,
          102,   102,   102,   102,   102,   102,   102,  5164,  1012],
       device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012, 21933,  3207,  1006,  1005, 27260,  1035,
         4019,  1005,  1007,   102], device='cuda:0')
got:
tensor([ 1000,  1000,  1000,  2358,  2099,  2692,  1000,  1000,  1000,  1012,
         3693,  1006, 13075,  2692,  1007,   102, 13075,  2692,  1007,   102,
          102,   102,   102,   102,  1005,  2358,  2099,  2692,  1005,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101,  1005,  2358,  2099,  2692,  1005,  1009,  2358,  2099,  1006,
        13075,  2692,  1007,   102], device='cuda:0')
got:
tensor([ 3091,  1027, 18798,  1006, 13075,  2692,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102, 13075,  2692,  1031,  1011,  1015,  1033,   102,
          102,   102,   102,   102,  2003, 18798,  1006, 13075,  2692],
       device='cuda:0')
source:
tensor([  101, 18798,  1006,  4098,  1006, 13075,  2692,  1010,  3145,  1027,
        18798,  1007,  1007,   102], device='cuda:0')
got:
tensor([ 1031,  1060,  1031,  1005,  2358,  2099,  2692,  1005,  1033,  2005,
         1060,  1999, 13075,  2692,  1033,   102,  1016,   102,   102,   102,
          102,   102,   102,  1033,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  1033,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101, 13075,  2692,  1031,  1014,  1033,  1031,  1005,  2358,  2099,
         2692,  1005,  1033,   102], device='cuda:0')
got:
tensor([ 1031,  3145,  2005,  8875,  1999, 13075,  2692,  2005,  3145,  1010,
         3643,  1999,  2862,  1006, 13075,  2487,  1012,  5167,  1006,  1007,
         1007,  1033,   102,   102,   102,   102,   102,   102,   102, 13075,
         2692,  1031,  1014,  1033,   102, 13075,  2487,  1012,  5167],
       device='cuda:0')
source:
tensor([  101,  1031, 13075,  2487,  1031,  1047,  1033,  2005,  1047,  1999,
        13075,  2692,  1033,   102], device='cuda:0')
got:
tensor([ 7680,  1006, 18798,  1006,  1060,  1007,  2005,  1060,  1999,  2862,
         1006, 13075,  2692,  1012,  5167,  1006,  1007,  1007,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101, 18798,  1006,  2862,  1006, 13075,  2692,  1012,  6309,  1006,
         1007,  1007,  1007,   102], device='cuda:0')
got:
tensor([13075,  2692,  1012,  2275,  1035,  5950,  1006,  1005, 13075,  2692,
         1005,  1007,   102,  1017,   102,   102,  7685,  1012,  4257,   102,
          102,   102,   102,   102,   102,  9470,  1035, 24240,  1006,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  2404,  1006,  1006,  1011,  1050,  1010,
         1050,  1007,  1007,   102], device='cuda:0')
got:
tensor([ 9808,  1012,  2291,  1006,  1005,  2358,  2099,  2692,  1005,  1007,
          102,   102, 16101, 18442,  1006,  9808,  1012,  4130,  1012,  3693,
         1006, 16101, 18442,  1010,  1005,  2358,  2099,  2692,  1005,  1007,
         1007,   102,   102,   102,   102,   102, 10047,  2191,  2213],
       device='cuda:0')
source:
tensor([  101,  3844,  4014,  1012, 28549, 13334,  1006,  1005,  2358,  2099,
         2692,  1005,  1007,   102], device='cuda:0')
got:
tensor([16371,  8737,  2100,  1012,  9530, 16280, 12556,  1006, 13075,  2692,
         1010, 13075,  2487,  1007,   102,  1024,  1010,  8123,  1027,  1014,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102, 16371],
       device='cuda:0')
source:
tensor([  101, 27937,  1012,  9140,  1006,  1006, 13075,  2692,  1010, 13075,
         2487,  1007,  1007,   102], device='cuda:0')
got:
tensor([13075,  2692,  1012, 11814,  1031,  1024,  1010,  1006, 13075,  2692,
         1012,  5725,  1007,  1033,   102,   102,   102,   102,   102,   102,
          102,  1033,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  1033,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101, 13075,  2692,  1031, 13075,  2692,  1012,  7753,  1031,  1011,
         1015,  1033,  1033,   102], device='cuda:0')
got:
tensor([13075,  2692,  1012,  3693,  1006,  1031,  1005,  2358,  2099,  2692,
         1005,  1033,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102, 13075,  2692,  1033,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101,  1000,  1000,  1000,  1000,  1000,  1000,  1012,  3693,  1006,
        13075,  2692,  1007,   102], device='cuda:0')
got:
tensor([13075,  2692,  1012,  6039,  2532,  1006,  4118,  1027,  1005,  2358,
         2099,  2692,  1005,  1010,  1999, 24759, 10732,  1027,  2995,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  4530,  2532,  1006, 16745,  1027,  1031,
         1015,  1033,  1007,   102], device='cuda:0')
got:
tensor([1031, 1045, 2005, 1045, 1999, 2846, 1006, 1015, 1010, 2184, 1007, 2065,
        1045,  999, 1027, 2184, 1033,  102,  102,  102,  102,  102,  102, 2184,
         102,  102, 1031, 1024, 1024, 1011, 1015, 1033,  102,  102,  102,  102,
         102,  102,  102], device='cuda:0')
source:
tensor([  101,  2862,  1006, 11674,  1006,  2862,  1006,  2846,  1006,  2184,
         1007,  1007,  1007,  1007,   102], device='cuda:0')
got:
tensor([1000, 1000, 1000, 2358, 2099, 2692, 1000, 1000, 1000, 1012, 3975, 1006,
        1005, 1010, 1005, 1007,  102, 1005,  102, 1005, 1007,  102,  102,  102,
        1005, 2358, 2099, 2692, 1005, 1007,  102,  102,  102,  102,  102,  102,
         102,  102,  102], device='cuda:0')
source:
tensor([ 101, 1000, 1000, 1000, 2358, 2099, 2692, 1000, 1000, 1000, 1012, 3975,
        1006, 1007,  102], device='cuda:0')
got:
tensor([ 2330,  1006,  1005, 13075,  2692,  1005,  1010,  1005,  1059,  1005,
         1007,  1012,  2485,  1006,  1007,   102,   102,   102,   102,   102,
          102,   102,   102, 13075,  2692,  1012,  2485,  1006,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,  5371,  1012],
       device='cuda:0')
source:
tensor([  101,  2330,  1006, 13075,  2692,  1010,  1005,  1059,  1005,  1007,
         1012,  2485,  1006,  1007,   102], device='cuda:0')
got:
tensor([13075,  2692,  1031,  1005, 13075,  2487,  1005,  1033,  1027, 13075,
         2692,  1031,  1005, 13075,  2487,  1005,  1033,  1012, 10439, 10497,
         1006, 13075,  2692,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101, 13075,  2692,  1031,  1005, 13075,  2487,  1005,  1033,  1027,
        13075,  2692,  1012,  5950,   102], device='cuda:0')
got:
tensor([1031, 2358, 2099, 2692, 1033,  102, 1031, 1024, 1060, 1033,  102, 1031,
        2358, 2099, 2692, 1033,  102, 1031, 2358, 2099, 2692, 1033,  102, 1033,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
        1033,  102,  102], device='cuda:0')
source:
tensor([ 101, 5300, 1027, 7680, 1006, 1031, 2358, 2099, 2692, 1033, 1010, 1031,
        1033, 1007,  102], device='cuda:0')
got:
tensor([2128, 1012, 4942, 1006, 1005, 1006, 1029, 1026, 1027, 1031, 1037, 1011,
        1062, 1033, 1007,  102, 1005, 1010, 1005, 1032, 1032, 1015, 1005, 1010,
        1005, 1037, 1009, 1038, 1005, 1007,  102,  102,  102,  102,  102,  102,
         102,  102,  102], device='cuda:0')
source:
tensor([ 101, 2026, 3367, 4892, 1012, 5672, 1006, 1005, 1005, 1010, 1005, 1035,
        1005, 1007,  102], device='cuda:0')
got:
tensor([ 9808,  1012,  4130,  1012, 14689, 15069,  1006,  2358,  2099,  2692,
         1007,   102,  9808,  1012,  4130,  1012, 14689, 15069,  1006,  1035,
         1035,  5371,  1035,  1035,  1007,   102,   102,   102,  2213,  1005,
          102,  2203,  1006,  1005,  2358,  2099,  2692,  1005,  1007],
       device='cuda:0')
source:
tensor([  101,  9808,  1012,  4130,  1012, 14689, 15069,  1006,  1005,  2358,
         2099,  2692,  1005,  1007,   102], device='cuda:0')
got:
tensor([ 1005, 13075,  2487,  1005,  1999,  2862,  1006, 13075,  2692,  1012,
         5167,  1006,  1007,  1007,   102,  2275,  1006,  1005, 13075,  2487,
         1005,  1007,   102,   102,   102,   102,   102,   102,  2995,   102,
          102,   102,   102,   102,   102,   102,   102, 13075,  2692],
       device='cuda:0')
source:
tensor([  101,  2035,  1006, 13075,  2487,  1006,  1060,  1007,  2005,  1060,
         1999, 13075,  2692,  1007,   102], device='cuda:0')
got:
tensor([ 2131, 19321,  2099,  1006, 13075,  2692,  1010,  1005,  2358,  2099,
         2692,  1005,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  1005,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101,  2131, 19321,  2099,  1006, 13075,  2692,  1010,  1005,  2358,
         2099,  2692,  1005,  1007,   102], device='cuda:0')
got:
tensor([ 1031, 13075,  2692,  2005, 13075,  2475,  1999,  2846,  1006, 18798,
         1006, 13075,  2487,  1007,  1007,  2065, 13075,  2692,  1033,   102,
         3975,  1006,  1007,  1033,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102, 13075,  2475,  1007,  1033],
       device='cuda:0')
source:
tensor([  101, 13075,  2692,  1027,  1031,  1060,  2005,  1060,  1999, 13075,
         2475,  2065,  1060,  1033,   102], device='cuda:0')
got:
tensor([ 2128,  1012,  3975,  1006,  1005,  2358,  2099,  2692,  1005,  1010,
        13075,  2692,  1007,   102,   102,  2128,  1012,  4942,  1006,  1005,
         2358,  2099,  2692,  1005,  1010,  1005,  2358,  2099,  2692,  1005,
         1007,   102,   102,   102,   102,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101,  2128,  1012,  3975,  1006,  1005,  2358,  2099,  2692,  1005,
         1010, 13075,  2692,  1007,   102], device='cuda:0')
got:
tensor([13075,  2692,  1012,  5200,  1012,  5754, 17287,  2618,  1006,  2066,
         1035,  4175,  1027,  3263,  1007,   102, 16356,  2015,  1035,  2946,
         1006,  1052,  2243,  1027,  3998,  1007,   102,   102, 16356,  2015,
         1035,  2597,  1006,  1005,  2946,  1005,  1007,   102,  1024,  6140,
         1006], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  2275,  1035,  1054, 20470,  2884,  1035,
         2597,  1006, 11502,  1007,   102], device='cuda:0')
got:
tensor([ 4062,  1012,  2424,  1035,  5783,  1035,  2011,  1035, 26726,  8988,
         1006,  1000,  1013,  1013,  5724,  1031,  1030,  8909,  1027,  1005,
        11562,  1005,  1033,  1013,  1013,  1037,  1031,  1030,  2465,  1027,
         1005, 11562,  1005,  1033,  1000,  1007,   102,   102,   102,   102,
          102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  2131,  1035, 17961,  1006,  1005,  5110,
        11039, 19968,  1005,  1007,   102], device='cuda:0')
got:
tensor([13075,  2692,  1027,  1005,  2358,  2099,  2692,  1005,  1009, 13075,
         2692,  1031,  1015,  1024,  1033,   102, 13075,  2692,  1031,  1016,
         1024,  1033,   102,   102, 13075,  2692,  1033,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012, 19274,  1006,  1014,  1010,  1005,  2358,
         2099,  2692,  1005,  1007,   102], device='cuda:0')
got:
tensor([13075,  2692,  1031,  1011,  1015,  1033,   102,  1012, 12098,  5620,
        11589,  1006,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102], device='cuda:0')
source:
tensor([  101,  2862,  1006, 13075,  2692,  1012,  6309,  1006,  1007,  1007,
         1031,  1011,  1015,  1033,   102], device='cuda:0')
got:
tensor([13075,  2692,  1012,  4339,  1006,  1005,  2358,  2099,  2692,  1005,
         1007,   102,   102,   102,   102,  3210,  1027,  1031,  1033,   102,
         1012, 13075,  2692,  1006,  1005,  2358,  2099,  2692,  1005,  1007,
          102,   102,   102,   102,   102,   102,   102,  6583, 10623,  2015,
         1005], device='cuda:0')
source:
tensor([  101,  6140,  1006,  1005,  2358,  2099,  2692,  1005,  1010,  5371,
         1027, 13075,  2692,  1007,   102], device='cuda:0')
got:
tensor([13075,  2692,  1027, 27937,  1012,  9530, 16280, 12556,  1006, 13075,
         2692,  1007,   102,  1024,   102,  1011,  1015,   102,   102,   102,
          102,   102,   102,   102, 13075,  2692,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1031,  1024,  1010,  1006, 27937,  1012,  2047,
         8528,  2483,  1007,  1033,   102], device='cuda:0')
got:
tensor([ 1042,  1027,  2330,  1006,  1005,  2358,  2099,  2692,  1005,  1010,
         1005, 25610,  1005,  1007,   102,  2026,  8873,  2571,  1012,  4339,
         1006,  1005,  2358,  2099,  2692,  1005,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
         1005], device='cuda:0')
source:
tensor([ 101, 5371, 1027, 2330, 1006, 1005, 2358, 2099, 2692, 1005, 1010, 1005,
        1037, 1005, 1007,  102], device='cuda:0')
got:
tensor([1000, 1000, 1000, 2358, 2099, 2692, 1000, 1000, 1000, 1012, 4289, 1006,
        1005, 2358, 2099, 2692, 1005, 1007,  102,  102,  102,  102,  102, 1005,
        1007,  102, 1005, 2358, 2099, 2692, 1005,  102,  102,  102,  102,  102,
         102,  102,  102,  102, 1005], device='cuda:0')
source:
tensor([ 101, 1000, 1000, 1000, 2358, 2099, 2692, 1000, 1000, 1000, 1012, 4289,
        1006, 2969, 1007,  102], device='cuda:0')
got:
tensor([16371,  8737,  2100,  1012,  9530, 11266,  1006,  1031,  1006,  1060,
         1010, 13075,  2487,  1007,  1010,  1006,  1014,  1010,  1016,  1007,
         1033,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102, 16371,  8737,  2100,
         1012], device='cuda:0')
source:
tensor([  101, 27937,  1012,  5443,  2696,  3600,  1006,  1006, 13075,  2692,
         1010, 13075,  2487,  1007,  1007,   102], device='cuda:0')
got:
tensor([13075,  2487,  1027,  4942, 21572,  9623,  2015,  1012,  4638,  1035,
         6434,  1006, 13075,  2692,  1010, 13075,  2487,  1027,  1052,  1012,
        13075,  2692,  1007,   102,  6434,  1027,  1052,  1012,  4604,  1006,
         1005,  6434,  1005,  1007,   102,   102,   102,   102,   102,   102,
          102], device='cuda:0')
source:
tensor([  101,  4903,  6657,  2102,  1012,  4903,  6657,  2102,  1006, 13075,
         2692,  1010, 13075,  2487,  1007,   102], device='cuda:0')
got:
tensor([1031, 4487, 6593, 1006, 1060, 1007, 2005, 1060, 1999, 2358, 2099, 2692,
        1012, 3975, 1006, 1005, 1010, 1005, 1007, 1033,  102, 1031, 1024, 1011,
        1015, 1033,  102,  102,  102,  102,  102, 1007,  102,  102,  102,  102,
         102,  102,  102,  102,  102], device='cuda:0')
source:
tensor([ 101, 6140, 1006, 1031, 8875, 2005, 8875, 1999, 1031, 2358, 2099, 2692,
        1033, 1033, 1007,  102], device='cuda:0')
got:
tensor([ 9808,  1012,  4130,  1012,  3975,  1006, 13075,  2692,  1007,   102,
         5371, 18442,  1027,  9808,  1012,  4130,  1012,  7818, 20330,  1006,
         1005,  1010,  1005,  1007,   102,   102,  5371, 18442,  1012, 11562,
         1006,  1007,   102,   102,   102,   102,   102,   102,  5371, 18442,
          102], device='cuda:0')
source:
tensor([  101,  9808,  1012,  4130,  1012,  3975, 10288,  2102,  1006, 13075,
         2692,  1007,  1031,  1014,  1033,   102], device='cuda:0')
got:
tensor([13075,  2692,  1012,  4066,  1006,  3145,  1027, 23375,  1060,  1024,
        13075,  2487,  1012,  5950,  1006,  1060,  1031,  1005, 13075,  2692,
         1005,  1033,  1007,  1010,  7901,  1027,  2995,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102, 13075,  2487,   102,
          102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  4066,  1006,  3145,  1027, 13075,  2487,
         1010,  7901,  1027,  2995,  1007,   102], device='cuda:0')
got:
tensor([ 4942, 21572,  9623,  2015,  1012,  2655,  1006,  1005,  3231,  1012,
        14021,  2060, 11263, 12273,  1005,  1007,   102,   102,   102,   102,
          102, 13075,  2692,   102,  4942, 21572,  9623,  2015,  1012,  2655,
         1006,  1005,  2358,  2099,  2692,  1005,  1010,  5806,  1027,  2995,
         1007], device='cuda:0')
source:
tensor([  101,  4942, 21572,  9623,  2015,  1012,  2655,  1006,  1031,  1005,
        13075,  2692,  1005,  1033,  1007,   102], device='cuda:0')
got:
tensor([ 3565,  1006, 13075,  2692,  1010,  2969,  1007,  1012,  1035,  1035,
         1999,  4183,  1035,  1035,  1006,  1008, 12098,  5620,  1010,  1008,
         1008,  6448,  2906,  5620,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102, 13075,  2487,   102,
          102], device='cuda:0')
source:
tensor([  101,  3565,  1006, 13075,  2487,  1010, 18856,  2015,  1007,  1012,
        13075,  2692,  1006,  1037,  1007,   102], device='cuda:0')
got:
tensor([ 6434,  1027,  2330,  1006,  1005,  2358,  2099,  2692,  1005,  1010,
         1005, 25610,  1005,  1007,   102,  4339,  1006,  1005,  1032,  1050,
         1005,  1007,   102,  3793,   102,  4339,  1006,  2240,  1007,   102,
          102,  2330,  1006,  1005,  2358,  2099,  2692,  1005,  1007,   102,
          102], device='cuda:0')
source:
tensor([ 101, 1042, 1027, 2330, 1006, 1005, 2358, 2099, 2692, 1005, 1010, 1005,
        1059, 1005, 1007,  102], device='cuda:0')
got:
tensor([16371,  8737,  2100,  1012,  4257, 18150,  3334,  1006, 13075,  2692,
         1007,   102, 14689,  1006,  1060,  1010,  1015,  1007,   102,   102,
          102,   102,   102,   102, 27937,  1012,  4013,  2094,  1006, 13075,
         2692,  1007,   102,  1014,  1007,   102,   102,   102,   102,   102,
          102], device='cuda:0')
source:
tensor([  101,  4098,  1006,  1031,  4098,  1006,  1045,  1007,  2005,  1045,
         1999, 13075,  2692,  1033,  1007,   102], device='cuda:0')
got:
tensor([ 2461,  1006, 13075,  2692,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  2461,  1006, 13075,  2692,  1010,  1016,
         1007,   102,   102,   102,  2461,  1006, 13075,  2692,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
         1016], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1027,  2358,  2099,  1006,  2461,  1006, 13075,
         2692,  1010,  1016,  1007,  1007,   102], device='cuda:0')
got:
tensor([1031, 3643, 2005, 8875, 1999, 2358, 2099, 2487, 2065, 1060, 1031, 1005,
        2358, 2099, 2692, 1005, 1033, 1027, 1027, 1005, 2358, 2099, 2487, 1005,
        1033,  102,  102,  102,  102,  102, 2358, 2099, 2692, 1033,  102,  102,
         102,  102,  102,  102,  102], device='cuda:0')
source:
tensor([ 101, 1031, 2358, 2099, 2692, 1031, 1060, 1033, 2005, 1060, 1999, 2358,
        2099, 2487, 1033,  102], device='cuda:0')
got:
tensor([13075,  2487,  1012, 10439, 10497,  1006, 13075,  2692,  1007,   102,
        13075,  2487,   102,   102,   102,   102, 13075,  2692,   102,   102,
          102,   102,   102,   102, 13075,  2487,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102, 13075,  2487,   102,
          102], device='cuda:0')
source:
tensor([  101,  2005,  2240,  1999, 13075,  2692,  1024, 13075,  2487,  1012,
        10439, 10497,  1006,  2240,  1007,   102], device='cuda:0')
got:
tensor([ 1005,  1003,  1012,  1016,  2546,  1005,  1003,  1017,  1012,  6227,
        22394, 22407, 23777,  2475,   102,   102,  1017,  1012,  1017,  2546,
         1005,  1003,  1006,  1015,  1012,  6227, 22394, 22407,  2581, 19961,
         2475,  1010,  1017,  1007,   102,   102,   102,   102,   102,   102,
          102], device='cuda:0')
source:
tensor([  101,  2461,  1006,  1015,  1012,  6227, 22394, 22407, 23777,  2581,
        19961,  2475,  1010,  1017,  1007,   102], device='cuda:0')
got:
tensor([ 6140,  1006,  1031,  1005,  2358,  2099,  2692,  1005,  1012,  3693,
         1006,  1039,  1007,  2005,  1039,  1999, 13075,  2692,  1033,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,  1005,
          102,  1005,   102,  1033,   102,   102,   102,   102,   102,   102,
         1005], device='cuda:0')
source:
tensor([  101,  2128,  1012,  2424,  8095,  1006,  1005,  2358,  2099,  2692,
         1005,  1010, 13075,  2692,  1007,   102], device='cuda:0')
got:
tensor([ 2128,  1012,  2424,  8095,  1006,  1005,  2358,  2099,  2692,  1005,
         1010, 13075,  2692,  1007,   102,  1011,  1015,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,  2128,  1012,
         2424,  8095,  1006,  1005,  2358,  2099,  2692,  1005,  1010, 13075,
         2692], device='cuda:0')
source:
tensor([  101,  2128,  1012,  2424,  8095,  1006,  1005,  2358,  2099,  2692,
         1005,  1010, 13075,  2692,  1007,   102], device='cuda:0')
got:
tensor([22649,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102], device='cuda:0')
source:
tensor([  101,  2709,  8299,  6072, 26029,  3366,  1006,  1005, 24641,  1005,
         1010,  3570,  1027, 22649,  1007,   102], device='cuda:0')
got:
tensor([13075,  2692,  1027,  1031,  1031,  1033,  2005,  1045,  1999,  2846,
         1006, 18798,  1006, 13075,  2692,  1007,  1007,  1033,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  1033,   102,   102,   102,   102,   102,
          102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1027,  1031,  1031,  1033,  2005,  1050,  1999,
         2846,  1006,  1016,  1007,  1033,   102], device='cuda:0')
got:
tensor([ 1031, 20014,  1006,  1060,  1007,  2005,  1060,  1999, 13075,  2487,
         1033,   102, 13075,  2692,  1033,   102, 13075,  2487,   102,   102,
          102,   102,   102,   102, 13075,  2487,  1033,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102, 13075,  2487,   102,
          102], device='cuda:0')
source:
tensor([  101, 13075,  2487,  1027,  1031, 20014,  1006,  1060,  1007,  2005,
         1060,  1999, 13075,  2692,  1033,   102], device='cuda:0')
got:
tensor([ 1031, 14257,  1006,  1060,  1007,  2005,  1060,  1999, 13075,  2692,
         1033,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,  1033,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  1033,   102,   102,   102,   102,   102,
          102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1027,  1031, 14257,  1006,  1060,  1007,  2005,
         1060,  1999, 13075,  2692,  1033,   102], device='cuda:0')
got:
tensor([2862, 1006, 1005, 2358, 2099, 2692, 1005, 1007,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102, 1055,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102], device='cuda:0')
source:
tensor([  101,  1031, 10381,  2099,  1006,  1045,  1007,  2005,  1045,  1999,
         2846,  1006, 13029,  1007,  1033,   102], device='cuda:0')
got:
tensor([1000, 1000, 1000, 1000, 1000, 1000, 1012, 3693, 1006, 2358, 2099, 2692,
        1007,  102,  102,  102, 1031, 2358, 2099, 2692, 1033,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102, 1005], device='cuda:0')
source:
tensor([ 101, 1000, 1000, 1000, 1000, 1000, 1000, 1012, 3693, 1006, 1031, 2358,
        2099, 2692, 1033, 1007,  102], device='cuda:0')
got:
tensor([27937,  1012, 16417, 17421,  1006,  1005,  1045, 15992,  1010, 20912,
         2140,  1011,  1028,  1045,  3501,  2140,  1005,  1007,   102,   102,
          102,   102,   102,   102,  8123,  1027,  1015,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102], device='cuda:0')
source:
tensor([  101, 16371,  8737,  2100,  1012,  5717,  2015,  1006,  1006,  1017,
         1010,  1017,  1010,  1017,  1007,  1007,   102], device='cuda:0')
got:
tensor([ 1031,  1006,  1060,  1010,  1061,  1007,  2005,  1060,  1010,  1061,
         1999, 14101,  1006, 13075,  2692,  1010, 13075,  2692,  1007,  1033,
          102,   102,   102,   102,   102,   102,  1033,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102], device='cuda:0')
source:
tensor([  101,  1000,  1000,  1000,  2358,  2099,  2692,  1000,  1000,  1000,
         1012,  3693,  1006, 13075,  2692,  1007,   102], device='cuda:0')
got:
tensor([ 1040,  2546,  1012,  2177,  3762,  1006,  1005,  2358,  2099,  2692,
         1005,  1007,  1012, 11307,  1006, 23375,  1060,  1024,  1060,  1012,
         2177,  3762,  1006,  1005,  2358,  2099,  2692,  1005,  1007,  1007,
          102,   102,   102,   102,   102,   102,  1012,  6039,  2532,  1006,
         1015], device='cuda:0')
source:
tensor([ 101, 1040, 2546, 1012, 1038, 1012, 2358, 2099, 1012, 3397, 1006, 1005,
        1034, 1042, 1005, 1007,  102], device='cuda:0')
got:
tensor([13075,  2692,  1027,  1031,  1031,  1033,  2005,  1045,  1999,  2846,
         1006,  2531,  1007,  1033,   102,   102,  1012, 13075,  2692,  1033,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  1033,   102,   102,   102,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1027,  1031,  4874,  1006,  1007,  2005,  1035,
         1999,  2846,  1006,  2531,  1007,  1033,   102], device='cuda:0')
got:
tensor([ 1031,  5216,  1031,  1015,  1024,  1033,  2005,  8875,  1999,  2846,
         1006, 18798,  1006,  2358,  2099,  2692,  1007,  1007,  1033,   102,
         7901,  1006,  1007,   102,  1031,  2358,  2099,  2692,  1033,   102,
          102,  1031,  2358,  2099,  2692,  1033,   102,   102,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([ 101, 1031, 1060, 1031, 1024, 1024, 1011, 1015, 1033, 2005, 1060, 1999,
        2358, 2099, 2692, 1033,  102], device='cuda:0')
got:
tensor([ 2026,  2638, 13668,  2923,  1027,  2862,  1006, 13075,  2692,  1007,
          102,  2275,  1006, 13075,  2692,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,  2025], device='cuda:0')
source:
tensor([  101,  2862,  1006,  3641, 29201,  1012,  2013, 14839,  2015,  1006,
         1005, 13075,  2692,  1005,  1007,  1007,   102], device='cuda:0')
got:
tensor([ 4942, 21572,  9623,  2015,  1012,  2655,  1006,  1005,  2358,  2099,
         2692,  1005,  1010,  5806,  1027,  2995,  1007,   102,   102,   102,
          102,   102,   102,   102,  4942, 21572,  9623,  2015,  1012,  2655,
         1006,  1005,  2358,  2099,  2692,  1005,  1007,   102,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([  101,  4942, 21572,  9623,  2015,  1012,  2655,  1006,  1031,  1005,
         2358,  2099,  2692,  1005,  1033,  1007,   102], device='cuda:0')
got:
tensor([2128, 1012, 2424, 8095, 1006, 1005, 1032, 1032, 1059, 1009, 1005, 1010,
        5164, 1007,  102, 1032, 1032, 1055, 1008, 1006, 1007,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102], device='cuda:0')
source:
tensor([ 101, 2128, 1012, 3975, 1006, 1005, 1009, 1005, 1010, 1005, 7592, 2088,
        7099, 3793, 1005, 1007,  102], device='cuda:0')
got:
tensor([2709, 2862, 1006, 2846, 1006, 1015, 1007, 1007,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102], device='cuda:0')
source:
tensor([ 101, 1006, 1050, 2005, 1050, 1999, 1031, 1015, 1010, 1016, 1010, 1017,
        1010, 1019, 1033, 1007,  102], device='cuda:0')
got:
tensor([ 1046,  3385,  1012,  4372, 16044,  1006,  1005, 21183,  2546,  1011,
         1022,  1005,  1007,   102,  1005,  1007,   102,   102,   102,  1005,
         1007,   102,  1005,   102,  1005,  2358,  2099,  2692,  1005,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([  101,  1046,  3385,  1012, 15653,  2015,  1006, 26066,  1006,  1005,
         1017,  1012,  1023,  1005,  1007,  1007,   102], device='cuda:0')
got:
tensor([13075,  2692,  1031,  1005,  2358,  2099,  2692,  1005,  1033,  1027,
         1017,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102, 13075,  2692,  1031,  1005,
         2358,  2099,  2487,  1005,  1033,   102,   102,   102,   102,   102,
         1017,  1007], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1031,  1005,  2358,  2099,  2692,  1005,  1033,
         1027,  1005,  2358,  2099,  2487,  1005,   102], device='cuda:0')
got:
tensor([13075,  2692,  1031,  1005,  2358,  2099,  2692,  1005,  1033,  1027,
         1015,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102, 13075,  2692,  1031,  1005,  2358,  2099,
         2692,  1005,  1033,   102,  8123,  1027,  1015,  1007,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012, 10651,  1006,  1063,  1005,  2358,  2099,
         2692,  1005,  1024,  1015,  1065,  1007,   102], device='cuda:0')
got:
tensor([13075,  2692,  1031,  1005,  2358,  2099,  2692,  1005,  1033,  1027,
         1015,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102, 13075,  2692,  1031,  1005,  2358,  2099,
         2692,  1005,  1033,   102,  8123,  1027,  1015,  1007,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012, 10651,  1006,  4487,  6593,  1006,  2358,
         2099,  2692,  1027,  1015,  1007,  1007,   102], device='cuda:0')
got:
tensor([1031, 1055, 1012, 6167, 1006, 1007, 2005, 1055, 1999, 2128, 1012, 2424,
        8095, 1006, 1005, 1032, 1032, 1055, 1005, 1010, 1005, 7592, 1032, 1032,
        1055, 1005, 1007, 1033,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102], device='cuda:0')
source:
tensor([ 101, 2128, 1012, 3975, 1006, 1005, 1006, 1032, 1032, 1059, 1009, 1007,
        1005, 1010, 1055, 1007,  102], device='cuda:0')
got:
tensor([ 1040,  2546,  1031,  1005, 13075,  2692,  1005,  1033,  1012,  2358,
         2099,  1012,  2131,  1006,  1005, 13075,  2692,  1005,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([  101,  1040,  2546,  1012,  5950,  1012,  2131,  1035,  8840,  2278,
         1006,  1005, 13075,  2692,  1005,  1007,   102], device='cuda:0')
got:
tensor([13075,  2692,  1031,  1005,  2358,  2099,  2692,  1005,  1033,  1027,
         1015,   102,   102, 13075,  2692,  1031,  1005,  2358,  2099,  2692,
         1005,  1033,   102, 13075,  2692,  1031,  1005,  2358,  2099,  2692,
         1005,  1033,   102,   102,   102,   102,   102,   102,   102,   102,
        13075,  2692], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012, 10651,  1006,  1063,  1005,  2358,  2099,
         2692,  1005,  1024,  1015,  1065,  1007,   102], device='cuda:0')
got:
tensor([ 6140,  1006,  1005,  3643,  2003,  1000,  1063,  1065,  1000,  1005,
         1012,  4289,  1006, 13075,  2692,  1007,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102, 13075,
         2692,  1007], device='cuda:0')
source:
tensor([  101,  6140,  1006,  1005,  1000,  1063,  1065,  1000,  1005,  1012,
         4289,  1006, 13075,  2692,  1007,  1007,   102], device='cuda:0')
got:
tensor([6140, 1006, 1005, 1032, 1050, 1005, 1012, 3693, 1006, 1005, 1003, 1055,
        1005, 1003, 1006, 1015, 1010, 1016, 1007, 1007,  102, 1005, 1010, 1005,
        1032, 1050, 1005, 1007,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102], device='cuda:0')
source:
tensor([  101, 25353,  2015,  1012,  2358, 26797,  2102,  1012,  4339,  1006,
         1005,  2358,  2099,  2692,  1005,  1007,   102], device='cuda:0')
got:
tensor([1000, 1000, 1000, 1000, 1000, 1000, 1012, 3693, 1006, 1031, 2358, 2099,
        2692, 1033, 1007,  102,  102,  102,  102,  102,  102,  102,  102,  102,
        1005, 2358, 2099, 2692, 1005, 1033,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102], device='cuda:0')
source:
tensor([ 101, 1000, 1000, 1000, 1000, 1000, 1000, 1012, 3693, 1006, 1031, 2358,
        2099, 2692, 1033, 1007,  102], device='cuda:0')
got:
tensor([13075,  2692,  1012,  2000,  1035, 20116,  2615,  1006,  1005, 20116,
         2615,  1005,  1010,  5950,  1027,  6270,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,  4339,  1006,
         2240,  1007,   102,   102,   102,   102,   102,  3793,   102,   102,
          102,  2000], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  2000,  1035, 20116,  2615,  1006,  5371,
        18442,  1010,  5950,  1027,  6270,  1007,   102], device='cuda:0')
got:
tensor([13075,  2692,  1012,  4372, 16044,  1006,  1005,  2004,  6895,  2072,
         1005,  1010,  1005,  8568,  1005,  1007,   102,   102,   102,   102,
          102,   102,   102,   102, 13075,  2692,  1012, 21933,  3207,  1006,
         1005, 27260,  1035,  4019,  1005,  1007,   102,   102,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  4372, 16044,  1006,  1005, 11163,  1011,
         6070, 28154,  1011,  2321,  1005,  1007,   102], device='cuda:0')
got:
tensor([18798,  1006,  2275,  1006, 13075,  2692,  1007,  1007,  1027,  1027,
         1015,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,  1024,  3413,   102,   102,
          102,   102,   102,   102,   102,   102,   102,  1024,  3413,   102,
          102,  2003], device='cuda:0')
source:
tensor([  101,  2035,  1006,  1060,  1027,  1027, 13075,  2692,  1031,  1014,
         1033,  2005,  1060,  1999, 13075,  2692,  1007,   102],
       device='cuda:0')
got:
tensor([13075,  2692,  1012,  5200,  1012,  2344,  1035,  2011,  1006,  1005,
         1011,  9004,  1035,  1035,  2287,  1005,  1007,  1031,  1014,  1033,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  5200,  1012, 11307,  1006,  1007,  1031,
         1024,  1015,  1033,  1012,  2131,  1006,  1007,   102],
       device='cuda:0')
got:
tensor([2128, 1012, 3975, 1006, 1005, 2358, 2099, 2487, 1005, 1010, 1005, 2358,
        2099, 2692, 1005, 1007,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102, 1005, 2358,
        2099, 2692, 1005, 1007,  102,  102], device='cuda:0')
source:
tensor([ 101, 2128, 1012, 3975, 1006, 1005, 2358, 2099, 2487, 1005, 1010, 1005,
        2358, 2099, 2692, 1005, 1007,  102], device='cuda:0')
got:
tensor([ 7680,  1006, 13075,  2692,  1007,   102,  2005,  1060,  1999, 13075,
         2487,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  1033,   102,   102,   102,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([  101,  6140,  1006,  7680,  1006,  5216,  1031, 13075,  2692,  1033,
         2005,  5216,  1999, 13075,  2487,  1007,  1007,   102],
       device='cuda:0')
got:
tensor([13075,  2692,  1027,  1031,  1045,  1031,  1014,  1033,  2005,  1045,
         1999, 13075,  2692,  1033,   102,   102, 13075,  2692,  1033,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,  1050], device='cuda:0')
source:
tensor([  101,  1031,  3746,  2005, 12183,  4221,  2213,  1999, 13075,  2692,
         2005,  3746,  1999, 12183,  4221,  2213,  1033,   102],
       device='cuda:0')
got:
tensor([27937,  1012,  5717,  2015,  1006,  1006,  1020,  1010,  1023,  1010,
         2184,  1007,  1007,  1009, 27937,  1012,  9140,  1006,  1031,  2358,
         2099,  2692,  1033,  1007,  1031,  1006,  3904,  1007,  1010,  1024,
         1010,  1006,  3904,  1007,  1033,   102,   102,   102,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([  101, 27937,  1012,  4555,  1006,  1031,  2358,  2099,  2692,  1033,
         1010,  1031,  2358,  2099,  2487,  1033,  1007,   102],
       device='cuda:0')
got:
tensor([ 6140,  1006, 13075,  2692,  1031,  1011,  1017,  1024,  1033,  1007,
          102, 13075,  2692,  1031,  1024,  1017,  1033,   102,   102,   102,
          102, 13075,  2692,  1031,  1014,  1033,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,  1033], device='cuda:0')
source:
tensor([  101,  6140,  1006, 13075,  2692,  1031,  1017,  1024,  1033,  1009,
        13075,  2692,  1031,  1024,  1017,  1033,  1007,   102],
       device='cuda:0')
got:
tensor([ 1040,  2546,  1012,  6611,  1006, 23375,  1060,  1024,  1060,  1012,
         3475,  2319,  1010,  8123,  1027,  1014,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([  101,  1040,  2546,  1012,  2004, 13874,  1006, 22017,  2140,  1007,
         1012,  7680,  1006,  8123,  1027,  1015,  1007,   102],
       device='cuda:0')
got:
tensor([2128, 1012, 3945, 1006, 1005, 2358, 2099, 2692, 1005, 1010, 2358, 2099,
        2487, 1007, 1012, 2177, 1006, 1015, 1007,  102, 1005, 2358, 2099, 2692,
        1005, 1007,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102], device='cuda:0')
source:
tensor([ 101, 2128, 1012, 3945, 1006, 1005, 2358, 2099, 2692, 1005, 1010, 1005,
        2358, 2099, 2487, 1005, 1007,  102], device='cuda:0')
got:
tensor([ 1031,  8875,  2005,  8875,  1999, 13075,  2692,  2065,  8875,  1012,
         3975,  1006,  1005,  1010,  1005,  1007,  1033,   102,   102,   102,
          102,   102,   102,  1033,   102,   102,   102,   102,   102,   102,
          102,   102,  1017,  1007,   102,   102,   102,   102,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([  101,  1031,  1060,  2005,  1060,  1999, 13075,  2692,  2065, 18798,
         1006,  1060,  1007,  1027,  1027,  1017,  1033,   102],
       device='cuda:0')
got:
tensor([13075,  2692,  1027,  1031,  1060,  2005,  1060,  1999, 13075,  2487,
         2065,  1060,  1012,  2003,  4305, 23806,  1006,  1007,  1033,   102,
          102, 13075,  2692,   102,   102,   102,   102,   102,   102, 13075,
         2487,   102,   102,   102, 13075,  2692,   102,  1033,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1027,  1031, 13075,  2487,  1006,  1007,  2005,
         1045,  1999,  2846,  1006,  2531,  1007,  1033,   102],
       device='cuda:0')
got:
tensor([ 1055,  2487,  1027, 22851,  1012, 13590,  1006, 13075,  2692,  1010,
        13075,  2487,  1010,  2129,  1027,  1005,  5110,  1005,  1010,  2006,
         1027,  1031,  1005,  2358,  2099,  2692,  1005,  1033,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012, 13590,  1006, 13075,  2487,  1010,  2006,
         1027,  1005,  2358,  2099,  2692,  1005,  1007,   102],
       device='cuda:0')
got:
tensor([ 9808,  1012,  4130,  1012,  2691, 28139,  8873,  2595,  1006,  1031,
         1005, 13075,  2692,  1005,  1010,  1005,  2070,  1035,  1042,  1005,
         1033,  1007,   102,  2003,  4305, 23806,  1006,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,  1035], device='cuda:0')
source:
tensor([  101,  4487,  3367, 21823,  4877,  1012, 16101,  1035, 21183,  4014,
         1012, 12395, 15069,  1006, 13075,  2692,  1007,   102],
       device='cuda:0')
got:
tensor([13075,  2692,  1012,  2424,  1035,  2035,  1006,  1005,  2358,  2099,
         2692,  1005,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,  1005,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,  3793,   102,   102,
          102,   102], device='cuda:0')
source:
tensor([  101,  6140,  1006, 13075,  2692,  1012,  2424,  1006,  1005,  2358,
         2099,  2692,  1005,  1007,  1012,  5164,  1007,   102],
       device='cuda:0')
got:
tensor([1040, 2546, 1031, 1005, 2358, 2099, 2692, 1005, 1033, 1012, 5950, 1006,
        1005, 2358, 2099, 2692, 1005, 1007,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102, 2213, 1005, 1007,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102], device='cuda:0')
source:
tensor([ 101, 1040, 2546, 1012, 8840, 2278, 1031, 1040, 2546, 1031, 1005, 2358,
        2099, 2692, 1005, 1033, 1033,  102], device='cuda:0')
got:
tensor([ 2128,  1012,  2424,  8095,  1006,  1005,  1032,  1032,  1055,  1009,
         1005,  1010, 13075,  2692,  1007,   102, 13075,  2692,   102,   102,
          102,   102,   102,   102, 13075,  2692,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
         1005,   102,  1005], device='cuda:0')
source:
tensor([  101,  1000,  1000,  1000,  1000,  1000,  1000,  1012,  3693,  1006,
        13075,  2692,  1012,  3975,  1006,  1007,  1007,   102],
       device='cuda:0')
got:
tensor([27937,  1012,  2812,  1006, 27937,  1012,  7637,  1006,  1031,  2358,
         2099,  2692,  1033,  1007,  1010,  8123,  1027,  1015,  1007,   102,
          102,   102,   102,   102,   102,  8123,  1027,  1014,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102], device='cuda:0')
source:
tensor([  101, 27937,  1012,  6721,  1012, 23046,  1006, 27937,  1012,  9099,
        20688,  1006,  2358,  2099,  2692,  1007,  1007,   102],
       device='cuda:0')
got:
tensor([20014,  1006,  2358,  2099,  1006,  1045,  1007,  2005,  1045,  1999,
        13075,  2692,  1007,   102,   102,  1011,  1015,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102], device='cuda:0')
source:
tensor([  101,  1056,  2475,  1027,  1031,  4949,  1006, 20014,  1010,  1060,
         1007,  2005,  1060,  1999, 13075,  2692,  1033,   102],
       device='cuda:0')
got:
tensor([ 1000,  1000,  1000,  2358,  2099,  2692,  1000,  1000,  1000,  1012,
         4372, 16044,  1006,  1005,  3763,  1011,  1015,  1005,  1007,   102,
         1005,  1007,   102,  1005,  2358,  2099,  2692,  1005,  1007,   102,
          102,   102,   102,   102,   102,   102,  1012,  4372, 16044,  1006,
         1005, 21183,  2546], device='cuda:0')
source:
tensor([  101, 12359,  1027,  2918, 21084,  1012,  1038, 21084,  2368, 16044,
         1006,  1005,  2358,  2099,  2692,  1005,  1007,   102],
       device='cuda:0')
got:
tensor([13075,  2692,  1012,  4372, 16044,  1006,  1005,  2358,  2099,  2692,
         1005,  1007,   102,   102,   102,   102,   102, 13075,  2692,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,  1005,
         2358,  2099,  2692,  1005,  1007,   102,   102,   102,   102,   102,
          102,   102,   102], device='cuda:0')
source:
tensor([  101, 12359,  1027,  1005,  2358,  2099,  2692,  1005,  1012,  4372,
        16044,  1006,  1005, 13075,  2692,  1005,  1007,   102],
       device='cuda:0')
got:
tensor([ 4487,  6593,  1006,  4949,  1006, 20014,  1010,  1060,  1012,  3975,
         1006,  1005,  1024,  1005,  1007,  1007,  2005,  1060,  1999,  1055,
         1012,  3975,  1006,  1005,  1010,  1005,  1007,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,  2842,  1005,  1007,
          102,   102,  1005], device='cuda:0')
source:
tensor([  101,  1040,  1027,  2004,  2102,  1012, 18204,  1035,  9345,  2140,
         1006,  1005,  2358,  2099,  2692,  1005,  1007,   102],
       device='cuda:0')
got:
tensor([ 6434,  1027,  2330,  1006,  1005,  2358,  2099,  2692,  1005,  1010,
         1005, 25610,  1005,  1007,   102,  4339,  1006,  1005,  1032,  1050,
         1005,  1007,   102,  3793,   102,  4339,  1006,  2240,  1007,   102,
          102,  2330,  1006,  1005,  2358,  2099,  2692,  1005,  1007,   102,
          102,   102,   102], device='cuda:0')
source:
tensor([ 101, 2047, 1035, 5371, 1027, 2330, 1006, 1005, 2358, 2099, 2692, 1005,
        1010, 1005, 1059, 1005, 1007,  102], device='cuda:0')
got:
tensor([1031, 2862, 1006, 1056, 1007, 2005, 1056, 1999, 2358, 2099, 2692, 1033,
         102, 1031, 2358, 2099, 2692, 1033,  102,  102, 1008, 1017, 1007,  102,
         102,  102,  102,  102,  102,  102, 1006, 1007, 1033,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102], device='cuda:0')
source:
tensor([  101,  4949,  1006, 23375,  1037,  1024,  1037,  1031,  1014,  1033,
         1010,  1006,  2358,  2099,  2692,  1007,  1007,   102],
       device='cuda:0')
got:
tensor([ 1040,  2546,  1012,  2177,  3762,  1006,  1005,  6120,  1005,  1007,
         1012, 12943,  2290,  1006,  1031,  1005,  1058,  1005,  1010,  1005,
         1028,  1015,  1005,  1010,  1005, 20704,  2290,  1005,  1033,  1007,
          102,  8123,  1027,  1015,  1007,   102,   102,   102,   102,   102,
          102,   102,   102], device='cuda:0')
source:
tensor([  101,  1040,  2546,  1012,  5436,  1006,  2785,  1027,  1005,  3347,
         2232,  1005,  1010, 16934,  1027,  2995,  1007,   102],
       device='cuda:0')
got:
tensor([13075,  2692,  1012,  2177,  3762,  1006,  1005,  6120,  1005,  1007,
         1012,  2946,  1006,  1007,  1012,  2358, 12881,  7292,  1006,  1005,
         1003,  1061,  1011,  1003,  1049,  1011,  1003,  1040,  1005,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  2275,  1035,  1060, 26348, 20470,  9050,
         1006, 10873,  1010,  9963,  1027,  3429,  1007,   102],
       device='cuda:0')
got:
tensor([22851,  1012,  9530, 11266,  1006,  1031,  1040,  2546,  1031,  1005,
         2358,  2099,  2692,  1005,  1033,  1012,  1056,  1007,  1033,   102,
         8123,  1027,  1015,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102], device='cuda:0')
source:
tensor([ 101, 1040, 2546, 1012, 2177, 3762, 1006, 1005, 2358, 2099, 2692, 1005,
        1007, 1012, 2034, 1006, 1007,  102], device='cuda:0')
got:
tensor([ 3231,  1012,  2490,  1012,  5896,  1035,  2393,  2121,  1012, 25645,
         1035,  4942, 21572,  9623,  2015,  1006,  1005,  2358,  2099,  2692,
         1005,  1010,  5806,  1027,  2995,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  4942], device='cuda:0')
source:
tensor([  101,  4942, 21572,  9623,  2015,  1012,  4831,  2078,  1006,  1031,
         1005,  2358,  2099,  2692,  1005,  1033,  1007,   102],
       device='cuda:0')
got:
tensor([19616,  1006, 13075,  2692,  1010,  3145,  1027, 13075,  2692,  1012,
         2131,  1007,   102,  7901,  1006,  2995,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,  7901,  1006,  2995,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102], device='cuda:0')
source:
tensor([  101, 19616,  1006, 13075,  2692,  1010,  3145,  1027, 13075,  2692,
         1012,  2131,  1010,  7901,  1027,  2995,  1007,   102],
       device='cuda:0')
got:
tensor([27937,  1012,  5717,  2015,  1006,  1006,  2358,  2099,  2692,  1007,
         1007,  1009, 27937,  1012,  9140,  1006,  1031,  2358,  2099,  2487,
         1033,  1007,   102,  1006,  1031,  2358,  2099,  2487,  1033,  1007,
          102,   102,   102,   102,   102,   102,   102,  1017,  1007,   102,
          102,   102,   102], device='cuda:0')
source:
tensor([  101, 27937,  1012,  5443,  2696,  3600,  1006,  1006,  2358,  2099,
         2487,  1010,  2358,  2099,  2692,  1007,  1007,   102],
       device='cuda:0')
got:
tensor([19616,  1006,  1031,  2358,  2099,  2692,  1033,  1010,  3145,  1027,
        23375,  1060,  1024,  1060,  1031,  1015,  1033,  1007,   102,  1031,
         1016,  1033,   102,   102,   102,  2213,  1031,  1014,  1033,   102,
          102,   102,   102,   102,   102,   102,   102,  8123,  1027,  1015,
         1007,   102,   102], device='cuda:0')
source:
tensor([  101,  2358,  2099,  2692,  1012,  4066,  1006,  3145,  1027, 23375,
         5216,  1024,  5216,  1031,  1016,  1033,  1007,   102],
       device='cuda:0')
got:
tensor([ 1031,  8875,  2005,  8875,  1999, 13075,  2692,  2065, 13075,  2487,
         1027,  1027,  2382,  1033,   102,  2009,  2121,  1006, 13075,  2692,
         1007,  1033,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102, 13075,  2487,  1027,  2382,
          102,   102, 13075], device='cuda:0')
source:
tensor([  101,  1031,  1060,  2005,  1060,  1999, 13075,  2692,  2065,  1060,
         1012, 13075,  2487,  1027,  1027,  2382,  1033,   102],
       device='cuda:0')
got:
tensor([9808, 1012, 2291, 1006, 1005, 2358, 2099, 2692, 1005, 1007,  102, 1006,
        1005, 2358, 2099, 2487, 1005, 1007,  102,  102,  102,  102,  102,  102,
         102, 2509, 1005, 1007,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102], device='cuda:0')
source:
tensor([ 101, 9808, 1012, 2291, 1006, 1005, 2358, 2099, 2487, 1005, 1010, 1005,
        2358, 2099, 2692, 1005, 1007,  102], device='cuda:0')
got:
tensor([ 1031,  1005,  1005,  1012,  3693,  1006,  1060,  1007,  2005,  1060,
         1999, 13075,  2692,  1033,   102,   102,   102,   102,   102,   102,
         1033,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  1033,   102,   102,   102,   102,   102,
          102,   102,   102], device='cuda:0')
source:
tensor([  101,  6140,  1006,  1005,  1005,  1012,  3693,  1006,  4949,  1006,
         2358,  2099,  1010, 13075,  2692,  1007,  1007,  1007,   102],
       device='cuda:0')
got:
tensor([ 9808,  1012,  2291,  1006,  1005, 18750, 15069,  1012,  1052,  2100,
         1005,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,  5371, 18442,  1012,  2275,  1006,
         1005,  1003,  1055,  1005,  1007,   102,   102,   102,   102,   102,
          102,   102,   102], device='cuda:0')
source:
tensor([  101, 25353,  2015,  1012,  4130,  1012, 10439, 10497,  1006,  1005,
         1013,  4130,  1013,  2000,  1013,  3649,  1005,  1007,   102],
       device='cuda:0')
got:
tensor([ 4942, 21572,  9623,  2015,  1012,  2655,  1006,  1005,  2358,  2099,
         2692,  1005,  1010,  5806,  1027,  2995,  1007,   102,   102,   102,
          102,   102,   102,  1005,  1010,  5806,  1027,  2995,  1007,   102,
          102,   102,   102,   102,   102,   102,   102, 10047,  2290,  1012,
         2485,  1006,  1007], device='cuda:0')
source:
tensor([  101,  4942, 21572,  9623,  2015,  1012,  2655,  1006,  1005,  2358,
         2099,  2692,  1005,  1010,  5806,  1027,  2995,  1007,   102],
       device='cuda:0')
got:
tensor([ 2007,  2330,  1006,  1005,  2358,  2099,  2692,  1005,  1010,  1005,
         2358,  2099,  2692,  1005,  1007,  2004,  1042,  1024, 13075,  2487,
         1012,  4339,  1006,  1005,  2358,  2099,  2692,  1005,  1007,   102,
          102,   102,   102,   102,   102,   102,   102, 13075,  2692,  1007,
          102, 13075,  2692], device='cuda:0')
source:
tensor([  101, 13075,  2487,  1012,  4339,  1006,  1005,  2358,  2099,  2692,
         1005,  1012,  3693,  1006, 13075,  2692,  1007,  1007,   102],
       device='cuda:0')
got:
tensor([ 1031,  1031,  2358,  2099,  2692,  1033,  2005,  1037,  1999, 14101,
         1006,  1031,  2358,  2099,  2487,  1033,  1010,  1031,  2358,  2099,
         2475,  1033,  1007,  1033,   102,   102,   102,  1031,  2358,  2099,
         2692,  1033,   102,   102,   102,   102,   102,   102,   102,   102,
          102,  1033,   102], device='cuda:0')
source:
tensor([ 101, 1031, 2358, 2099, 2692, 1033, 1009, 1031, 2358, 2099, 2487, 1033,
        1009, 1031, 2358, 2099, 2475, 1033,  102], device='cuda:0')
got:
tensor([13075,  2692,  1012,  6611,  1006, 23375,  1060,  1024,  1060,  1012,
         2000,  1035,  2504,  1035,  5300,  1006,  1014,  1007,  1010,  8123,
         1027,  1015,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102, 13075], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012, 25141,  1035,  5950,  1006,  2504,  1027,
         1014,  1010,  1999, 24759, 10732,  1027,  2995,  1007,   102],
       device='cuda:0')
got:
tensor([16371,  8737,  2100,  1012,  9140,  1006,  1031, 13075,  2692,  1010,
         1031,  1014,  1010,  1015,  1033,  1010,  1031,  1015,  1010,  1016,
         1033,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,  1033,   102,   102,   102,   102,   102,   102,
          102,   102, 13075], device='cuda:0')
source:
tensor([  101, 16371,  8737,  2100,  1012,  9140,  1006, 13075,  2692,  1007,
         1031,  1014,  1033,  1012,  2000,  9863,  1006,  1007,   102],
       device='cuda:0')
got:
tensor([ 1031,  7680,  1006,  1060,  1031,  1014,  1033,  2005,  1060,  1999,
        13075,  2692,  1007,  1033,   102,   102,   102,   102,   102,   102,
         1033,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  1033,   102,   102,   102,   102,   102,
          102,   102,   102], device='cuda:0')
source:
tensor([ 101, 7680, 1006, 1031, 3940, 1031, 1014, 1033, 2005, 3940, 1999, 2862,
        1035, 1997, 1035, 7689, 1033, 1007,  102], device='cuda:0')
got:
tensor([2448, 1006, 1005, 2358, 2099, 2692, 1005, 1007,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
        1005, 1007,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102], device='cuda:0')
source:
tensor([  101,  4942, 21572,  9623,  2015,  1012,  2655,  1006,  1005,  2358,
         2099,  2692,  1005,  1010,  5806,  1027,  2995,  1007,   102],
       device='cuda:0')
got:
tensor([ 2007,  2330,  1006, 13075,  2692,  1007,  2004,  1042,  1024, 13075,
         2692,  1027,  1042,  1012,  3191, 12735,  1006,  1007,   102,   102,
          102,   102,   102, 13075,  2692,  1012,  3975,  1006,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
         1005,  1007,   102], device='cuda:0')
source:
tensor([  101,  1031,  2240,  1012, 12667, 24901,  1006,  1005,  1032,  1050,
         1005,  1007,  2005,  2240,  1999, 13075,  2692,  1033,   102],
       device='cuda:0')
got:
tensor([ 4098,  1006, 13075,  2692,  1010,  3145,  1027, 23375,  1060,  1024,
         1060,  1031,  1015,  1033,  1007,   102,  1060,  1031,  1014,  1033,
          102,  2003,  6072, 11314,  1012,  6415,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  1060], device='cuda:0')
source:
tensor([  101,  4098,  1006, 13075,  2692,  1010,  3145,  1027,  8875, 18150,
         3334,  1006,  1015,  1007,  1007,  1031,  1014,  1033,   102],
       device='cuda:0')
got:
tensor([19616,  1006,  2862,  1006, 13075,  2692,  1012,  5167,  1006,  1007,
         1007,  1010,  3145,  1027, 23375,  1060,  1024,  1060,  1031,  1015,
         1033,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102], device='cuda:0')
source:
tensor([  101, 19616,  1006, 13075,  2692,  1010, 23375,  1060,  1024,  1006,
         3014,  1006,  1060,  1007,  1010,  1060,  1007,  1007,   102],
       device='cuda:0')
got:
tensor([13075,  2692,  1027,  1031,  1060,  2005,  1060,  1999, 13075,  2487,
         2065,  1060,  1033,   102,  2000,  9863,  1006,  1007,   102,   102,
          102, 13075,  2692,  1033,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,  2862,  1006, 13075,
         2487,  1007,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1027,  1031,  1060,  2005,  1060,  1999, 13075,
         2487,  2065,  1060,   999,  1027,  1031,  1033,  1033,   102],
       device='cuda:0')
got:
tensor([2128, 1012, 2674, 1006, 1005, 2358, 2099, 2692, 1005, 1010, 1005, 2358,
        2099, 2487, 1005, 1007,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102, 1005, 2358, 2099, 2692, 1005,
        1007,  102,  102,  102,  102,  102,  102], device='cuda:0')
source:
tensor([ 101, 2128, 1012, 2424, 8095, 1006, 1005, 2358, 2099, 2692, 1005, 1010,
        1005, 2358, 2099, 2487, 1005, 1007,  102], device='cuda:0')
got:
tensor([ 9530,  8873,  2290,  1027, 13075,  2692,  1012,  3194,  1012,  2191,
         1035,  2035,  1006,  1005,  2358,  2099,  2692,  1005,  1007,   102,
          102,   102,   102, 13075,  2692,  1033,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 10439,  1012,  9530,  8873,  2290,  1031,  1005, 13075,  2692,
         1005,  1033,  1027,  1005,  2358,  2099,  2692,  1005,   102],
       device='cuda:0')
got:
tensor([ 2330,  1006, 13075,  2487,  1010,  1005,  1054,  1005,  1007,  1012,
         4339,  1006, 13075,  2692,  1007,   102,   102,   102,   102,   102,
          102,   102,   102, 13075,  2487,  1012,  4339,  1006,  2240,  1007,
          102,  1014,   102,   102,  4942,  9863,  1007,   102,   102,   102,
          102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  2330,  1006,  1005, 13075,  2487,  1005,  1010,  1005, 25610,
         1005,  1007,  1012,  4339,  1006, 13075,  2692,  1007,   102],
       device='cuda:0')
got:
tensor([13075,  2692,  1027,  1031,  1031,  1033,  2005,  4942,  9863,  1999,
        13075,  2692,  2065,  1005,  1005,  1999,  1055,  1033,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,  1033,   102,
          102,   102,   102,   102,   102,   102,   102,   102,  1033,   102,
          102,   102, 13075,  2692,   102], device='cuda:0')
source:
tensor([  101,  1031,  5783,  2005,  5783,  1999, 13075,  2692,  2065,  2003,
         7076, 26897,  1006,  5783,  1010, 20014,  1007,  1033,   102],
       device='cuda:0')
got:
tensor([ 1031,  1047,  2005,  1047,  1010,  1058,  1999, 13075,  2692,  1012,
         5167,  1006,  1007,  2065,  1058,  1012,  4627, 24415,  1006,  1005,
         1039,  1005,  1007,  1033,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  1033,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  2862,  1006, 13075,  2692,  1012,  2131,  1035,  2846,  1006,
         1007,  1012,  2131,  1035,  6309,  1006,  1007,  1007,   102],
       device='cuda:0')
got:
tensor([ 6140,  1006,  6721,  1012,  7170,  1006,  1005,  2358,  2099,  2692,
         1005,  1007,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,  5371, 18442,  2015,  1027,  6270,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([ 101, 6721, 1012, 3601, 1006, 9808, 1012, 2862, 4305, 2099, 1006, 1005,
        2358, 2099, 2692, 1005, 1007, 1007,  102], device='cuda:0')
got:
tensor([25353,  2015,  1012,  4130,  1012,  2131, 20492, 14428,  1006,  1005,
         2358,  2099,  2692,  1005,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,  1052,  2243,  1027,  1052,  2243,
         2480,   102,   102,   102,   102,   102,   102,   102,  2358,  2099,
         2692,  1007,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  9808,  1012,  3102,  1006,  9808,  1012,  2131, 23267,  1006,
         1007,  1010,  4742,  1012,  9033, 12349,  2099,  2487,  1007,   102],
       device='cuda:0')
got:
tensor([13075,  2487,  1027,  1031, 14257,  1006,  8875,  1007,  2005,  8875,
         1999, 13075,  2692,  1012,  3975,  1006,  1005,  1010,  1005,  1007,
         1033,   102, 13075,  2487,   102,   102,   102,   102,   102, 13075,
         2692,  1007,   102,   102,   102,   102,   102, 13075,  2487,   102,
          102,   102, 14257,  1006,  1007], device='cuda:0')
source:
tensor([  101, 13075,  2487,  1027, 14257,  1006, 13075,  2692,  1012,  5672,
         1006,  1005,  1010,  1005,  1010,  1005,  1005,  1007,  1007,   102],
       device='cuda:0')
got:
tensor([1000, 1000, 1000, 2358, 2099, 2692, 1000, 1000, 1000, 1012, 3693, 1006,
        1031, 2358, 2099, 2692, 1033, 1007,  102,  102,  102,  102,  102, 1005,
        1010, 1005, 1003, 1055, 1005, 1007,  102,  102,  102,  102,  102,  102,
         102,  102, 2358, 2099, 2692, 1005, 1033,  102,  102], device='cuda:0')
source:
tensor([  101, 14257,  1006,  1005,  2358,  2099,  2692,  1005,  1012,  5672,
         1006,  1005,  1010,  1005,  1010,  1005,  1005,  1007,  1007,   102],
       device='cuda:0')
got:
tensor([ 1031,  8875,  1012,  3975,  1006,  1007,  2005,  8875,  1999, 13075,
         2692,  1012,  3975,  1006,  1005,  1010,  1005,  1007,  1033,   102,
          102,   102,   102,   102, 13075,  2692,  1033,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,  1033,   102,   102,
          102,   102, 13075,  2692,  1007], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1027,  1005,  1010,  1005,  1012,  3693,  1006,
         4949,  1006,  2358,  2099,  1010, 13075,  2692,  1007,  1007,   102],
       device='cuda:0')
got:
tensor([ 1031, 20014,  1006,  1060,  1007,  2005,  1060,  1999, 13075,  2692,
         1012,  3975,  1006,  1005,  1010,  1005,  1007,  1033,   102,   102,
          102,   102,   102,  1033,   102,   102,   102,   102,   102,  1005,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  2171,  1027,  1005], device='cuda:0')
source:
tensor([  101,  1031, 20014,  1006,  1055,  1007,  2005,  1055,  1999, 13075,
         2692,  1012,  3975,  1006,  1005,  1010,  1005,  1007,  1033,   102],
       device='cuda:0')
got:
tensor([14101,  1006, 13075,  2692,  1010, 13075,  2487,  1007,   102,  2275,
         1006, 13075,  2692,  1007,   102, 13075,  2487,  1007,   102,   102,
          102,   102,   102,   102, 13075,  2487,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  1011,  1015,  1007], device='cuda:0')
source:
tensor([  101,  1031, 11748,  2005,  3940,  1999, 14101,  1006, 13075,  2692,
         1010, 13075,  2487,  1007,  2005, 11748,  1999,  3940,  1033,   102],
       device='cuda:0')
got:
tensor([2007, 2330, 1006, 1005, 2358, 2099, 2692, 1005, 1010, 1005, 1054, 1005,
        1007, 2004, 1042, 1024, 1042, 1012, 4339, 1006, 1005, 1032, 1050, 1005,
        1007,  102, 1024, 3210, 1009, 1027, 2330, 1006, 1005, 2358, 2099, 2692,
        1005, 1007,  102,  102,  102,  102,  102,  102,  102], device='cuda:0')
source:
tensor([ 101, 1031, 2240, 1012, 3975, 1006, 1007, 2005, 2240, 1999, 2330, 1006,
        1005, 2358, 2099, 2692, 1005, 1007, 1033,  102], device='cuda:0')
got:
tensor([19616,  1006, 13075,  2692,  1010,  3145,  1027, 23375,  1060,  1024,
        13075,  2487,  1031,  1060,  1033,  1031,  1005, 13075,  2692,  1005,
         1033,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,  1033,   102, 13075,  2692,  1012,
         5950,  1006,  1060,  1031,  1005], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  4066,  1006,  3145,  1027, 23375,  1060,
         1024,  1060,  1031,  1005, 13075,  2487,  1005,  1033,  1007,   102],
       device='cuda:0')
got:
tensor([ 4098,  1006, 13075,  2692,  1010,  3145,  1027, 23375,  1060,  1024,
         1060,  1031,  1015,  1033,  1007,   102,  1060,  1031,  1014,  1033,
          102, 13075,  2692,  1031,  1015,  1033,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,  1033,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  4098,  1006, 13075,  2692,  1010,  3145,  1027, 23375,  8875,
         1024,  8875,  1031,  1015,  1033,  1007,  1031,  1014,  1033,   102],
       device='cuda:0')
got:
tensor([13075,  2487,  1012, 13075,  2692,  1012,  6148,  1006,  1014,  1007,
          102,   102,   102,   102,   102, 13075,  2692,  1012, 16356,  1006,
         1007,   102,   102,   102,   102,  3609,  1027, 13075,  2487,   102,
          102,   102,   102,   102,   102,   102,   102, 13075,  2692,  1007,
          102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2487,  1012,  3609,  8237,  1006, 13075,  2692,  1027,
        13075,  2692,  1010,  6187,  2595,  1027, 22260,  2509,  1007,   102],
       device='cuda:0')
got:
tensor([ 6140,  1006,  1031,  1006,  1060,  1010,  1061,  1007,  2005,  1060,
         1010,  1061,  1999, 14101,  1006,  2358,  2099,  2692,  1010,  2358,
         2099,  2692,  1007,  1033,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,  1033,   102,   102,
          102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  2862,  1006,  2009,  8743, 13669,  2015,  1012, 14930,  1006,
         1006,  2358,  2099,  2692,  1007,  1010,  1016,  1007,  1007,   102],
       device='cuda:0')
got:
tensor([ 5219,  1012, 15389,  1006,  1005, 19274,  2046,  1056,  2487,  7276,
         1008,  2013,  2795,  2475,  1998,  1045,  2487,  7276,  1008,  2013,
         1056,  2487,  1025,  7276,  1008,  2013,  1056,  2487,  5300,  1006,
         1029,  1007,  1005,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  5219,  1012, 15389,  1006,  1005, 19274,  2046,  1056,  2487,
         1006,  7276,  1008,  2013,  1056,  2475,  1007,  1005,  1007,   102],
       device='cuda:0')
got:
tensor([6140, 1006, 1005, 2358, 2099, 2487, 1005, 1012, 5672, 1006, 1005, 2358,
        2099, 2692, 1005, 1010, 1005, 1005, 1007, 1007,  102,  102,  102,  102,
         102,  102,  102,  102,  102, 1005, 1032, 1050, 1005, 1007,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102, 1005], device='cuda:0')
source:
tensor([  101,  6140,  1006,  1005,  2358,  2099,  2487,  1005,  1012,  4372,
        16044,  1006,  1005,  5164,  1035,  4019,  1005,  1007,  1007,   102],
       device='cuda:0')
got:
tensor([27937,  1012, 12098,  2290,  2860,  5886,  2063,  1006, 13075,  2692,
         1012,  4338,  1031,  1014,  1033,  1010, 13075,  2692,  1012,  5950,
         1007,   102, 13075,  2692,  1012,  7680,  1006,  1007,   102,   102,
          102,   102,   102,   102,   102, 13075,  2692,  1012,  2812,  1006,
         1007,   102,  1011,  1015,  1007], device='cuda:0')
source:
tensor([  101,  1006, 13075,  2692,  1031,  1015,  1024,  1033,  1009, 13075,
         2692,  1031,  1024,  1011,  1015,  1033,  1007,  1013,  1016,   102],
       device='cuda:0')
got:
tensor([1000, 1000, 1000, 2358, 2099, 2487, 1000, 1000, 1000, 1012, 4175, 1006,
        1005, 2358, 2099, 2692, 1005, 1007,  102,  102,  102,  102,  102,  102,
        5164, 1012, 4175, 1006, 1005, 2358, 2099, 2692, 1005, 1007,  102,  102,
         102,  102,  102,  102, 1005,  102, 1005,  102, 1005], device='cuda:0')
source:
tensor([ 101, 1000, 1000, 1000, 2358, 2099, 2487, 1000, 1000, 1000, 1012, 4175,
        1006, 1005, 2358, 2099, 2692, 1005, 1007,  102], device='cuda:0')
got:
tensor([24471,  6894,  2497,  1012,  5227,  1012, 24471, 20974,  3388,  7373,
         3726,  1006, 13075,  2692,  1010, 13075,  2487,  1007,   102,   102,
          102,   102,   102, 13075,  2487,   102,  3931,  1024,  2709,  1005,
         1032,  1050,  1005,   102,   102,   102,   102,  5371, 18442,  2015,
         1027,  3191,  1006,  1007,   102], device='cuda:0')
source:
tensor([  101, 24471,  6894,  2497,  1012,  5227,  1012, 24471, 20974,  3388,
         7373,  3726,  1006, 13075,  2692,  1010, 13075,  2487,  1007,   102],
       device='cuda:0')
got:
tensor([13075,  2692,  1012,  4066,  1006,  3145,  1027, 23375,  1060,  1024,
         1060,  1031,  1016,  1033,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
        16371,  8737,  2100,  1012,  4066], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  4066,  1006,  3145,  1027, 23375,  1060,
         1024,  1060,  1031,  1015,  1033,  1031,  1016,  1033,  1007,   102],
       device='cuda:0')
got:
tensor([ 1031,  1006,  1060,  1009,  2410,  1007,  2005,  1060,  1010,  1061,
         1999, 14101,  1006, 13075,  2692,  1010, 13075,  2692,  1031,  1015,
         1024,  1033,  1007,  1033,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  1033,   102,   102,   102,   102,   102,
          102,   102, 13075,  2692,  1033], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1031,  1024,  1033,  1027,  1031,  1006,  1060,
         1011,  2410,  1007,  2005,  1060,  1999, 13075,  2692,  1033,   102],
       device='cuda:0')
got:
tensor([ 6140,  1006,  9808,  1012,  4831,  2078,  1006,  1005,  2358,  2099,
         2692,  1005,  1007,  1012, 24501,  3270,  5051,  1006,  1016,  1010,
         1011,  1015,  1007,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  4942, 21572,  9623,  2015,  1012,  4638,  1035,  6434,  1006,
         1005,  2358,  2099,  2692,  1005,  1010,  5806,  1027,  2995,  1007,
          102], device='cuda:0')
got:
tensor([ 1054,  1027, 11186,  1012,  2131,  1006, 13075,  2692,  1007,   102,
        20346,  2015,  1027,  1063,  2358,  2099,  2692,  1065,   102,   102,
          102,   102,   102, 13075,  2692,  1065,   102,   102,  1035,  4471,
         1027,  1005,  1032,  1032,  1015,  1005,   102,  6583, 10623,  6583,
         1035,  1054,  1006, 20934,  2546], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  4604,  1006,  1005,  8299,  1013,  1015,
         1012,  1014,  3263,  7929,  1032,  1054,  1032,  1050,  1005,  1007,
          102], device='cuda:0')
got:
tensor([22260,  1012,  2275,  1035,  1061, 26348, 20470,  9050,  1006,  1031,
         1005,  2358,  2099,  2475,  1005,  1010,  1005,  2358,  2099,  2509,
         1005,  1033,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
         1005,   102,  1005,  1033,  1007], device='cuda:0')
source:
tensor([  101, 20228,  2102,  1012,  5436,  1006,  2358,  2099,  2475,  1010,
         2358,  2099,  2509,  1010,  3830,  1027,  1005, 24833,  1005,  1007,
          102], device='cuda:0')
got:
tensor([ 4098,  1006, 13075,  2692,  1010,  3145,  1027, 23375,  1060,  1024,
        14689,  1006,  1060,  1031,  1015,  1033,  1007,  2065,  1060,  1031,
         1014,  1033,  2842,  1060,  1031,  1014,  1033,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  1006,  1047,  2005,  1047,  1010,  1058,  1999, 13075,  2692,
         1012,  5167,  1006,  1007,  2065,  1058,   999,  1027,  1014,  1007,
          102], device='cuda:0')
got:
tensor([ 2358,  2099,  2692,  1012, 21933,  3207,  1006,  1005,  2358,  2099,
         2692,  1005,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  1005,  2358,  2099,  2692,  1005,   102,
          102,   102,   102,   102,   102,   102,   102,  2358, 26797,  2102,
         1012, 21933,  3207,  1006,  1005], device='cuda:0')
source:
tensor([  101,  1000,  1000,  1000,  2358,  2099,  2692,  1000,  1000,  1000,
         1012, 21933,  3207,  1006,  1005,  5164,  1035,  4019,  1005,  1007,
          102], device='cuda:0')
got:
tensor([2128, 1012, 2424, 8095, 1006, 1005, 2358, 2099, 2487, 1005, 1010, 1005,
        2358, 2099, 2692, 1005, 1007,  102,  102,  102,  102,  102,  102,  102,
         102, 1011, 1015,  102, 1005, 1010, 1005, 2358, 2099, 2692, 1005, 1007,
         102,  102,  102,  102,  102,  102,  102,  102, 1005], device='cuda:0')
source:
tensor([  101,  1000,  1000,  1000,  2358,  2099,  2487,  1000,  1000,  1000,
         1012, 21792, 22254,  1006,  1005,  2358,  2099,  2692,  1005,  1007,
          102], device='cuda:0')
got:
tensor([13075,  2692,  1012,  2131,  1006, 13075,  2487,  1010,  3145,  1027,
        23375,  1060,  1024,  1060,  1012, 13075,  2692,  1012,  7901,  1006,
         1007,  1007,   102,   102,   102,   102,   102,  7901,  1027,  2995,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  4066,  1006,  3145,  1027, 23375,  1060,
         1024,  1060,  1012, 13075,  2487,  1010,  7901,  1027,  2995,  1007,
          102], device='cuda:0')
got:
tensor([13075,  2692,  1012,  4066,  1006,  3145,  1027, 23375,  1060,  1024,
         1060,  1012, 13075,  2487,  1007,   102,  7901,  1027,  2995,   102,
          102,   102,   102,   102, 13075,  2692,  1012,  4066,  1006,  2995,
         1007,   102,  7901,  1027,  2995,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  4066,  1006,  3145,  1027, 23375,  1060,
         1024,  1060,  1012, 13075,  2487,  1010,  7901,  1027,  2995,  1007,
          102], device='cuda:0')
got:
tensor([ 2065, 13075,  2692,  1012,  2424,  1006,  1005,  2358,  2099,  2692,
         1005,  1007,  1027,  1027,  1011,  1015,  1024,  6140,  1006,  1000,
         2053,  1005,  2003,  1005,  2182,   999,  1000,  1007,  2842,  1024,
         6140,  1006, 13075,  2487,  1007,   102,  2842,  1024,  6140,  1006,
         1005,  2358,  2099,  2692,  1005], device='cuda:0')
source:
tensor([  101, 22017,  2140,  1006,  2128,  1012,  3945,  1006,  1005,  2358,
         2099,  2692,  1005,  1010,  1005, 13075,  2487,  1005,  1007,  1007,
          102], device='cuda:0')
got:
tensor([ 2151,  1006,  8875,  1999, 13075,  2692,  1012,  6309,  1006,  1007,
         1007,   102,  1005,  2358,  2099,  2692,  1005,  2005,  8875,  1999,
         2862,  1006,  1005,  2358,  2099,  2692,  1005,  1007,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,  1005,   102,  1005], device='cuda:0')
source:
tensor([  101,  2151,  1006,  3145,  1012,  4627, 24415,  1006,  1005,  2358,
         2099,  2692,  1005,  1007,  2005,  3145,  1999, 13075,  2692,  1007,
          102], device='cuda:0')
got:
tensor([19616,  1006, 13075,  2692,  1010,  3145,  1027, 23375,  1060,  1024,
         1060,  1031,  1005,  2358,  2099,  2692,  1005,  1033,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,  1055,  1012,  3975,  1006,  1005], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  4066,  1006,  3145,  1027, 23375,  1060,
         1024,  1060,  1031,  1005,  2358,  2099,  2692,  1005,  1033,  1007,
          102], device='cuda:0')
got:
tensor([ 6140,  1006, 13075,  2487,  1012,  2131,  1006, 13075,  2692,  1007,
         1007,   102, 13075,  2487,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102, 13075,  2487,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102, 13075,  2487,   102,
          102,   102, 13075,  2692,  1033,   102], device='cuda:0')
source:
tensor([  101,  3046,  1024,  6140,  1006, 13075,  2487,  1012,  5950,  1006,
        13075,  2692,  1007,  1007,  3272,  3643,  2121, 29165,  1024,  3413,
          102], device='cuda:0')
got:
tensor([27937,  1012,  2073,  1006,  1037,  1027,  1027,  1015,  1007,   102,
          102,   102,   102,  1008,  1016,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,  1052,  2100,  1012, 24501,  3270,
         5051,  1006,  1011,  1015,  1010,  1016,  1007,   102,   102,   102,
          102,   102,  1013,  1016,  1010,  1017], device='cuda:0')
source:
tensor([  101, 19616,  1006,  2862,  2629,  1010,  3145,  1027, 23375, 19449,
         1024,  1006,  3014,  1006, 19449,  1007,  1010, 19449,  1007,  1007,
          102], device='cuda:0')
got:
tensor([ 1031,  2330,  1006, 13075,  2692,  1007,  2005,  1042,  1999,  2330,
         1006,  1005,  3793,  1013,  5810,  1005,  1010,  1005, 21144,  1005,
         1007,  1033,   102, 13075,  2692,  1012,  4339,  1006,  2240,  1007,
          102,   102,   102,   102,  1012,  2240,  1012,  3975,  1006,  1007,
          102,   102,  2240,  1010,  2203,  1027], device='cuda:0')
source:
tensor([  101,  1031,  1060,  2005,  1060,  1999, 13075,  2692,  1012,  3975,
        12735,  1006,  1007,  2065,  1060,   999,  1027,  1005,  1005,  1033,
          102], device='cuda:0')
got:
tensor([ 2128,  1012,  4942,  1006,  1005,  1026,  1031,  1034,  1028,  1033,
         1008,  1028,  1005,  1010,  1005,  1005,  1010, 13075,  2692,  1007,
          102,   102, 13075,  2692,  1012,  6167,  1006,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,  5164,   102,   102,
          102,  1005,   102,   102,  1005,  1010], device='cuda:0')
source:
tensor([  101,  2128,  1012,  4942,  1006,  1005,  1031,  1034,  1032,  1032,
         1059,  1033,  1005,  1010,  1005,  1005,  1010, 13075,  2692,  1007,
          102], device='cuda:0')
got:
tensor([18798,  1006,  4487,  6593,  1006,  1006,  1060,  1010,  7680,  1006,
         1060,  1007,  2005,  1060,  1999, 13075,  2692,  1012,  3975,  1006,
         1007,  1007,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,  2003,  7076, 26897,
         1006,  1060,  1010, 20014,  1010,  1060], device='cuda:0')
source:
tensor([  101, 18798,  1006,  2275,  1006,  2330,  1006, 13075,  2692,  1007,
         1012,  3191,  1006,  1007,  1012,  3975,  1006,  1007,  1007,  1007,
          102], device='cuda:0')
got:
tensor([ 1000,  1000,  1000,  1000,  1000,  1000,  1012,  3693,  1006, 11307,
         1006,  2358,  2099,  1012,  4019,  1010,  1005,  1032,  1032,  1015,
         1005,  1007,  1007,   102,  1005,  2358,  2099,  2692,  1005,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
         1005,   102,   102,  1005,   102,  1005], device='cuda:0')
source:
tensor([  101,  1000,  1000,  1000,  2358,  2099,  2692,  1000,  1000,  1000,
         1012, 21933,  3207,  1006,  1005,  5164,  1035,  4019,  1005,  1007,
          102], device='cuda:0')
got:
tensor([16371,  8737,  2100,  1012,  9530, 16280, 12556,  1006, 13075,  2692,
         1010, 13075,  2487,  1007,   102,  1024,  1010,  8123,  1027,  1014,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102, 16371,  8737,
         2100,  1012,  9530, 16280, 12556,  1006], device='cuda:0')
source:
tensor([  101,  6140,  1006,  9530, 16280, 12556,  1006,  1006, 13075,  2692,
         1010, 13075,  2487,  1007,  1010,  8123,  1027,  1014,  1007,  1007,
          102], device='cuda:0')
got:
tensor([16371,  8737,  2100,  1012,  9530, 16280, 12556,  1006, 13075,  2692,
         1010, 13075,  2487,  1007,   102,  1024,  1010,  1024,  1033,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102, 13075,  2487,   102,
          102,   102, 16371,  8737,  2100,  1012], device='cuda:0')
source:
tensor([  101,  6140,  1006,  9530, 16280, 12556,  1006,  1006, 13075,  2692,
         1010, 13075,  2487,  1007,  1010,  8123,  1027,  1015,  1007,  1007,
          102], device='cuda:0')
got:
tensor([25353,  2015,  1012,  4130,  1012, 19274,  1006,  1014,  1010,  1005,
         2358,  2099,  2692,  1005,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,  4769,  1027,  1005,  1032,  1050,
         1005,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  6140,  1006, 22278,  1012,  2131,  4215, 13626,  2378, 14876,
         1006,  1005,  2358,  2099,  2692,  1005,  1010,  3770,  1007,  1007,
          102], device='cuda:0')
got:
tensor([10923, 10524,  8043,  1012,  2275,  1035,  1061, 26348, 20470,  9050,
         1006,  1005,  2358,  2099,  2692,  1005,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,  1005,
         2358,  2099,  2692,  1005,   102,   102,   102,   102,   102,   102,
          102,  1005,   102,   102,  1005,  1007], device='cuda:0')
source:
tensor([  101, 13109, 19895,  1006,  1035,  1035,  2171,  1035,  1035,  1010,
        23561,  1035, 19622,  1027,  1005,  2358,  2099,  2692,  1005,  1007,
          102], device='cuda:0')
got:
tensor([ 2128,  1012,  4942,  1006,  1005,  1031,  1034,  1037,  1011, 23564,
         1011,  1062,  1033,  1005,  1010,  1005,  1005,  1010,  1005,  2358,
         2099,  2487,  1005,  1007,   102,   102,   102,   102,   102,  2358,
         2099,  2692,  1005,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  1005,  1010], device='cuda:0')
source:
tensor([ 101, 2128, 1012, 4942, 1006, 1005, 2358, 2099, 2692, 1005, 1010, 1005,
        1005, 1010, 1005, 2358, 2099, 2487, 1005, 1007,  102], device='cuda:0')
got:
tensor([ 6520, 23422,  1012,  3945, 13462,  2011,  3178,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,  1012,  2177,  1006,  1015,
         1007,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  4443,  1012,  5200,  1012, 11307,  1006,  9047,  1035,  3058,
         1035,  1035,  3397,  1027,  1005,  5511,  1024,  4002,  1005,  1007,
          102], device='cuda:0')
got:
tensor([2128, 1012, 3975, 1006, 1005, 1032, 1032, 1056, 1009, 1005, 1010, 1005,
        2358, 2099, 2487, 1005, 1007,  102,  102,  102, 1005, 1010, 1005, 2358,
        2099, 2692, 1005, 1007,  102,  102,  102,  102,  102, 1012, 3975, 1006,
        1005, 2358, 2099, 2692, 1005, 1007,  102,  102,  102,  102],
       device='cuda:0')
source:
tensor([ 101, 1005, 1037, 1032, 1050, 1038, 1032, 1054, 1032, 1050, 1039, 1005,
        1012, 3975, 1006, 1005, 2358, 2099, 2487, 1005, 1007,  102],
       device='cuda:0')
got:
tensor([1000, 1000, 1000, 2358, 2099, 2487, 1000, 1000, 1000, 1012, 5672, 1006,
        1005, 2358, 2099, 2692, 1005, 1010, 1005, 1005, 1007,  102, 1005, 1010,
        1005, 2358, 2099, 2692, 1005, 1007,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102, 1005,  102, 1005],
       device='cuda:0')
source:
tensor([ 101, 6140, 1006, 1005, 2358, 2099, 2487, 1005, 1012, 5672, 1006, 1005,
        2358, 2099, 2692, 1005, 1010, 1005, 1005, 1007, 1007,  102],
       device='cuda:0')
got:
tensor([ 2128,  1012,  3975,  1006,  1005,  2358,  2099,  2692,  1005,  1010,
        13075,  2692,  1007,   102, 13075,  2692,  1012, 12667, 24901,  1006,
         1005,  2358,  2099,  2692,  1005,  1007,   102,   102,   102,  1005,
         2358,  2099,  2692,  1005,  1007,   102,   102,   102,   102,   102,
          102,   102,  1011,  1015,   102,   102], device='cuda:0')
source:
tensor([  101,  6140,  1006, 13075,  2692,  1012,  1054, 19362,  3775,  3508,
         1006,  1005,  2358,  2099,  2692,  1005,  1007,  1031,  1014,  1033,
         1007,   102], device='cuda:0')
got:
tensor([ 9808,  1012, 13075,  2692,  1012,  3975,  1006,  1005,  2358,  2099,
         2692,  1005,  1007,  1031,  1011,  1015,  1033,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,  1005,  1007,
          102,   102,   102,   102,   102,   102,   102,  1005,   102,  1005,
          102,  1005,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  6140,  1006,  1060,  1012, 12667, 24759,  4183,  1006,  1005,
         2358,  2099,  2692,  1005,  1010,  1015,  1007,  1031,  1014,  1033,
         1007,   102], device='cuda:0')
got:
tensor([ 2862,  1006,  6721,  1012, 14566, 18447,  1006,  1014,  1010,  1023,
         1007,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  1031, 20014,  1006,  6694,  1008,  6721,  1012,  6721,  1006,
         1007,  1007,  2005,  1045,  1999,  2846,  1006,  6694,  2692,  1007,
         1033,   102], device='cuda:0')
got:
tensor([12731,  2099,  1012, 15389,  1006,  1005,  2358,  2099,  2692,  1005,
         1010,  1005,  2358,  2099,  2487,  1005,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,  2358,
         2099,  2692,  1005,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  1005,   102], device='cuda:0')
source:
tensor([  101, 16962,  1012,  1043,  4160,  2140,  4226,  2854,  1006,  1005,
         2358,  2099,  2692,  1005,  1010, 29379,  1012,  3145,  1006,  1007,
         1007,   102], device='cuda:0')
got:
tensor([ 3058,  7292,  1012,  2358, 14536,  7292,  1006,  1005,  2358,  2099,
         2692,  1005,  1010,  1005,  2358,  2099,  2692,  1005,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,  1005,
         2358,  2099,  2692,  1005,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  3058,  7292,  1012,  3058,  7292,  1012,  2358, 14536,  7292,
         1006,  5164,  1035,  3058,  1010,  1005,  2358,  2099,  2692,  1005,
         1007,   102], device='cuda:0')
got:
tensor([ 4098,  1006, 13075,  2692,  1010,  3145,  1027, 23375,  1060,  1024,
        14689,  1006,  1060,  1031,  1015,  1033,  1007,  1010,  7901,  1027,
         2995,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  1035,  1038,   102,   102], device='cuda:0')
source:
tensor([  101,  4098,  1006,  1047,  2005,  1047,  1010,  1058,  1999, 13075,
         2692,  1012,  5167,  1006,  1007,  2065,  1058,   999,  1027,  1014,
         1007,   102], device='cuda:0')
got:
tensor([ 4098,  1006, 13075,  2692,  1010,  3145,  1027, 23375,  1060,  1024,
         1006, 18798,  1006,  1060,  1007,  1010,  1011,  1015,  1007,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  1011,  1015,  1007,   102], device='cuda:0')
source:
tensor([  101,  4098,  1006,  1047,  2005,  1047,  1010,  1058,  1999, 13075,
         2692,  1012,  5167,  1006,  1007,  2065,  1058,   999,  1027,  1014,
         1007,   102], device='cuda:0')
got:
tensor([13075,  2692,  1012,  2177,  3762,  1006,  1005,  2358,  2099,  2692,
         1005,  1007,  1031,  1005,  2358,  2099,  2692,  1005,  1033,  1012,
        10938,  1006,  7680,  1007,  1027,  1027,  1014,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,  2003,  2025,
         1017,  1033,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1031, 13075,  2692,  1031,  1005,  2358,  2099,
         2692,  1005,  1033,  1033,  1012,  5950,  1012,  2000,  9863,  1006,
         1007,   102], device='cuda:0')
got:
tensor([ 1040,  2546,  1012,  6611,  1006, 23375,  1060,  1024,  1060,  1012,
         7753,  1031,  1005,  1054,  1005,  1033,  1010,  8123,  1027,  1015,
         1007,   102,  1040,  2546,  1012,  7753,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,  1012,  2000,  9863,  1006,
         1007,   102,  8123,  1027,  1015,  1007], device='cuda:0')
source:
tensor([  101,  1040,  2546,  1012, 25141,  1035,  5950,  1006,  2504,  1027,
         1031,  1005, 16356,  1005,  1010,  1005, 27885,  2015,  1005,  1033,
         1007,   102], device='cuda:0')
got:
tensor([ 4062,  1012,  2131,  1035, 16129,  1006,  1007,   102,   102,   102,
          102,   102,  4062,  1012,  2131,  1035,  2516,  1006,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  4062,  1012, 15389,  1035,  5896,  1006,  1005,  2709,  6254,
         1012,  6254, 12260,  3672,  1012,  6058, 11039, 19968,  1025,  1005,
         1007,   102], device='cuda:0')
got:
tensor([13075,  2692,  1012,  6039,  2532,  1006,  4118,  1027,  1005, 21461,
         8591,  1005,  1010,  1999, 24759, 10732,  1027,  2995,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
         2004,  1035,  2035,  1006,  1007,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  6039,  2532,  1006, 13075,  2692,  1012,
         2812,  1006,  8123,  1027,  1015,  1007,  1010,  8123,  1027,  1015,
         1007,   102], device='cuda:0')
got:
tensor([ 6140,  1006,  1005,  2358,  2099,  2692,  1005,  1012,  3693,  1006,
         1031,  2358,  2099,  2692,  1033,  1007,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,  1033,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102, 13075,  2692,  1033,  1007,   102], device='cuda:0')
source:
tensor([  101,  6140,  1006,  1005,  2358,  2099,  2692,  1005,  1012,  3693,
         1006,  4949,  1006,  2358,  2099,  1010, 13075,  2692,  1007,  1007,
         1007,   102], device='cuda:0')
got:
tensor([ 6140,  1006,  1005,  2358,  2099,  2692,  1005,  1012, 21933,  3207,
         1006,  1005, 21183,  2546,  1011,  1022,  1005,  1007,  1007,   102,
         1005, 21183,  2546,  1011,  1022,  1005,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,  1005,   102,
         1005,   102,  1005,   102,  1005,  1007], device='cuda:0')
source:
tensor([  101,  6140,  1006,  1005,  2358,  2099,  2692,  1005,  1012,  4372,
        16044,  1006,  1005,  6315,  1035, 27260,  1035,  4019,  1005,  1007,
         1007,   102], device='cuda:0')
got:
tensor([ 6140,  1006, 13075,  2692,  1012,  2597,  1006,  1015,  1007,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102, 13075,  2692,  1031,  1015,  1033,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  1031,  1045,  2005,  1045,  1010,  1060,  1999,  4372, 17897,
        11657,  1006, 13075,  2692,  1007,  2065,  1060,  1027,  1027,  1015,
         1033,   102], device='cuda:0')
got:
tensor([ 6140,  1006, 13075,  2692,  1012,  2597,  1006,  1015,  1007,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102, 13075,  2692,  1031,  1015,  1033,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  1031,  1045,  2005,  1045,  1010,  1060,  1999,  4372, 17897,
        11657,  1006, 13075,  2692,  1007,  2065,  1060,  1027,  1027,  1015,
         1033,   102], device='cuda:0')
got:
tensor([ 4180,  1012,  5200,  1012,  3443,  1006,  1046,  3385,  1006, 13075,
         2692,  1007,  1007,   102,   102,  3433,  1012,  2131,  1006,  4180,
         1035,  2828,  1027,  1005, 11562,  1005,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,  5244,  1012,  3793,
          102,   102,  1035,  2597,  1006,  1007], device='cuda:0')
source:
tensor([  101,  2709,  8299,  6072, 26029,  3366,  1006, 13075,  2692,  1010,
         2771, 11368, 18863,  1027,  1005,  4646,  1013,  1046,  3385,  1005,
         1007,   102], device='cuda:0')
got:
tensor([ 1000,  1000,  1000,  2358,  2099,  2692,  1000,  1000,  1000,  1012,
         4289,  1006, 13075,  2692,  1007,   102,   102,   102,   102,   102,
          102, 13075,  2692,  1031,  2358,  2099,  2692,  1033,   102,   102,
          102,   102,   102,   102,   102,  2213,  1012,  2177,  1006,  1015,
         1007,   102,  1024,  3413,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101, 13075,  2692,  1027,  1031,  1005,  2358,  2099,  2692,  1005,
         1012,  4289,  1006,  5783,  1007,  2005,  5783,  1999, 13075,  2692,
         1033,   102], device='cuda:0')
got:
tensor([16371,  8737,  2100,  1012, 13590,  1006,  1031,  2358,  2099,  2692,
         1010,  2358,  2099,  2487,  1033,  1010,  1031,  2358,  2099,  2692,
         1033,  1007,   102,   102,   102,   102,   102,   102,   102,  1031,
         1015,  1010,  1016,  1033,  1007,   102,   102,   102,   102,   102,
          102,   102,  1016,   102,   102,  1005,  1007,   102],
       device='cuda:0')
source:
tensor([  101, 27937,  1012,  5930,  1035,  9991,  1006,  1006,  1031,  2358,
         2099,  2692,  1033,  1010,  1031,  2358,  2099,  2487,  1033,  1007,
         1007,   102], device='cuda:0')
got:
tensor([1031, 2773, 2005, 2773, 1999, 2358, 2099, 2692, 2065, 1045, 2025, 1999,
        1031, 2358, 2099, 2692, 1033, 1033,  102,  102,  102,  102,  102, 1033,
         102,  102,  102,  102,  102,  102, 1031, 1024, 1016, 1033,  102,  102,
         102,  102,  102,  102,  102, 1031, 1024, 1011, 1015, 1033,  102,  102],
       device='cuda:0')
source:
tensor([  101,  1031,  5783,  2005,  5783,  1999,  2358,  2099,  2692,  2065,
         2025,  2003,  7076, 26897,  1006,  5783,  1010,  2358,  2099,  1007,
         1033,   102], device='cuda:0')
got:
tensor([ 3058,  7292,  1012,  3058,  7292,  1012,  2358, 14536,  7292,  1006,
         1005,  2358,  2099,  2692,  1005,  1010,  1005,  1003,  1038,  1003,
         1040,  1010,  1003,  1061,  1005,  1007,  1012,  2358, 12881,  7292,
         1006,  1005,  1003,  1037,  1005,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([ 101, 1006, 1056, 1011, 3058, 7292, 1012, 3058, 7292, 1006, 2358, 2099,
        2692, 1007, 1007, 1012, 2561, 1035, 3823, 1006, 1007,  102],
       device='cuda:0')
got:
tensor([ 4098,  1006, 13075,  2692,  1010,  3145,  1027, 23375,  1060,  1024,
        14689,  1006,  1060,  1031,  1015,  1033,  1007,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101,  4098,  1006, 13075,  2692,  1012,  8117,  1006,  1007,  1010,
        13075,  2692,  1012,  4098,  1006,  1007,  1010,  3145,  1027, 14689,
         1007,   102], device='cuda:0')
got:
tensor([ 2128,  1012,  3975,  1006,  1005,  1032,  1032,  1055,  1009,  1005,
         1010, 13075,  2692,  1007,   102, 13075,  2692,  1012, 12667, 24901,
         1006,  1007,   102,   102,   102,   102,   102,   102, 13075,  2692,
         1012,  3975,  1006,  1005,  2358,  2099,  2692,  1005,  1007,   102,
          102,   102,   102,  1005,  1007,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  5672,  1006,  1005,  1005,  1010,  1005,
          999,   999,  1005,  1007,  1012,  3975,  1006,  1005,   999,  1005,
         1007,   102], device='cuda:0')
got:
tensor([ 1000,  1000,  1000,   100,  1000,  1000,  1000,  1012,  4372, 16044,
         1006,  1005, 21183,  2546,  1011,  1022,  1005,  1007,  1012, 21933,
         3207,  1006,  1005, 21183,  2546,  1011,  1022,  1005,  1007,   102,
          102,   102,   102,   102,   102,  1012,  4372, 16044,  1006,  1005,
        27260,  1035,  4019,  1005,  1007,   102,  1012, 21933],
       device='cuda:0')
source:
tensor([  101,  1040,  1012, 21933,  3207,  1006,  1005, 18133, 12521, 22203,
         1005,  1007,  1012,  4372, 16044,  1006,  1005, 21183,  2546,  2620,
         1005,  1007,   102], device='cuda:0')
got:
tensor([ 1031, 13075,  2692,  1012,  3828,  8873,  2290,  1006,  1005,  2358,
         2099,  2692,  1005,  1007,  2005, 13075,  2692,  1999,  1055,  1033,
          102,   102,   102,   102,   102,   102,   102,   102,  2265,  1006,
         1007,   102,   102,   102,  1033,   102,   102,   102,   102,   102,
         1005,   102,   102,   102,  1005,  1007,   102,   102],
       device='cuda:0')
source:
tensor([  101,  4060,  2571,  1012, 15653,  1006, 13075,  2692,  1010,  2330,
         1006,  1005,  2358,  2099,  2692,  1005,  1010,  1005, 25610,  1005,
         1007,  1007,   102], device='cuda:0')
got:
tensor([ 6140,  1006, 13075,  2692,  1012,  3945,  1006,  1005,  2358,  2099,
         2692,  1005,  1007,  1012,  2177,  1006,  1015,  1007,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102, 13075,  2692,  1012,
         2177,  1006,  1014,  1007,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101,  6140,  1006,  2128,  1012,  3945,  1006,  1005,  2358,  2099,
         2692,  1005,  1010, 13075,  2692,  1007,  1012,  2177,  1006,  1014,
         1007,  1007,   102], device='cuda:0')
got:
tensor([ 7680,  1006,  2003,  7076, 26897,  1006,  1060,  1010, 20014,  1007,
         2005,  1060,  1999, 13075,  2692,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,  6583, 10623,  2015,
         1027,  1014,  1007,   102,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101,  1031,  1031,  1060,  1010, 13075,  2692,  1012,  4175,  1006,
         1060,  1007,  1033,  2005,  1060,  1999,  2275,  1006, 13075,  2692,
         1007,  1033,   102], device='cuda:0')
got:
tensor([2358, 2099, 2475, 1031, 1005, 2358, 2099, 2692, 1005, 1033, 1027, 1040,
        2546, 1031, 1005, 2358, 2099, 2487, 1005, 1033, 1012, 2358, 2099, 1031,
        1005, 2358, 2099, 2692, 1005, 1033,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102, 1033,  102,  102,  102],
       device='cuda:0')
source:
tensor([ 101, 2358, 2099, 2475, 1031, 1005, 2358, 2099, 2487, 1005, 1033, 1027,
        2358, 2099, 2475, 1031, 1005, 2358, 2099, 2692, 1005, 1033,  102],
       device='cuda:0')
got:
tensor([13075,  2487,  1027,  4949,  1006, 20014,  1010, 13075,  2692,  1012,
         3975,  1006,  1007,  1007,   102, 13075,  2487,   102,   102,   102,
          102, 13075,  2487,   102,   102,   102,   102, 13075,  2487,   102,
          102,  2862,  1006, 13075,  2692,  1007,   102, 13075,  2487,   102,
          102,   102, 13075,  2487,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101, 13075,  2487,  1027,  1031, 20014,  1006,  2193,  1007,  2005,
         2193,  1999, 13075,  2692,  1012,  3975,  1006,  1005,  1010,  1005,
         1007,  1033,   102], device='cuda:0')
got:
tensor([ 1040,  2546,  1012, 22210,  1006,  1040,  2546,  1012,  7753,  1010,
         8123,  1027,  1015,  1007,   102,   102,  1040,  2546,  1012, 25141,
         1035,  5950,  1006,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102, 25462,  2015,
         1012,  4066,  1006,  1005,  1054,  1005,  1010,  8123],
       device='cuda:0')
source:
tensor([  101,  1040,  2546,  1012,  4066,  1035,  5300,  1006,  1031,  1005,
         2291,  1035, 16371,  2213,  1005,  1010,  1005,  4487,  2015,  1005,
         1033,  1007,   102], device='cuda:0')
got:
tensor([ 1031,  1049,  1012,  2707,  1006,  1007,  2005,  1049,  1999,  2128,
         1012,  2424,  8095,  1006,  1005,  2358,  2099,  2692,  1005,  1010,
        13075,  2692,  1007,  1033,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  1012,  2177,  1006,  1015,  1007,   102,
        13075,  2692,   102,  1033,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101,  1031,  1045,  2005,  1045,  1999, 13075,  2692,  2065,  2128,
         1012,  3945,  1006,  1005,  2358,  2099,  2692,  1005,  1010,  1045,
         1007,  1033,   102], device='cuda:0')
got:
tensor([13075,  2692,  1012, 24501,  3270,  5051,  1006, 13075,  2692,  1010,
         1011,  1015,  1007,  1012,  2946,  1006,  1007,   102,   102,   102,
          102,   102,   102, 13075,  2487,   102,   102,  1058, 16356,  2015,
         1035,  4578,  1006,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102, 13075,  2692,  1007],
       device='cuda:0')
source:
tensor([  101, 13075,  2692,  1027, 13075,  2692,  1012, 24501,  4697,  1006,
         1006,  2358,  2099,  2692,  1007,  1010, 13075,  2692,  1012, 13075,
         2487,  1007,   102], device='cuda:0')
got:
tensor([13075,  2692,  1027,  1031,  1005,  2358,  2099,  2692,  1005,  1033,
         1012,  2003,  8873,  2571,  1006, 13075,  2692,  1007,   102,   102,
          102, 13075,  2692,  1033,   102,   102,   102,   102,  2358,  2099,
         2692,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101, 13075,  2692,  1027,  4949,  1006, 20014,  1010,  2330,  1006,
         1005,  2358,  2099,  2692,  1005,  1007,  1012,  3191, 12735,  1006,
         1007,  1007,   102], device='cuda:0')
got:
tensor([ 2128,  1012,  2424,  8095,  1006,  1005,  1032,  1032,  1059,  1009,
         1006,  1029,  1024,  1011,  1032,  1032,  1059,  1009,  1007,  1005,
         1010, 13075,  2692,  1007,   102,   102, 13075,  2692,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,  5164,  1012,
         3975,  1006,  1007,   102,   102,  1005,   102,   102],
       device='cuda:0')
source:
tensor([  101,  2128,  1012,  3975,  1006,  1005,  1031,  1033,  1006,  1029,
         1027,  1031,  1037,  1011,  1062,  1033,  1007,  1005,  1010, 13075,
         2692,  1007,   102], device='cuda:0')
got:
tensor([ 1031, 19616,  1006,  8875,  1007,  2005,  8875,  1999, 19616,  1006,
         1048,  1010,  3145,  1027, 23375,  1056,  1024,  1056,  1031,  1014,
         1033,  1007,  1033,   102,  1055,   102,   102,   102,   102,   102,
         1055,   102,   102,   102,  1033,   102,   102,   102,   102,   102,
          102,   102,  1031,  1015,  1033,   102,  1055,   102],
       device='cuda:0')
source:
tensor([  101, 29248,  1012,  4066,  1006,  3145,  1027, 23375,  5216,  1024,
         1006,  5216,  1031,  1016,  1033,  1010,  5216,  1031,  1015,  1033,
         1007,  1007,   102], device='cuda:0')
got:
tensor([2128, 1012, 4942, 1006, 1005, 1000, 1006, 1031, 1037, 1011, 1062, 1033,
        1007, 1005, 1010, 1005, 1032, 1032, 1015, 1005, 1010, 1005, 2358, 2099,
        2487, 1005, 1007,  102,  102,  102,  102, 1005, 2358, 2099, 2692, 1005,
        1007,  102,  102,  102,  102,  102,  102,  102, 1005, 1010, 1005, 2358],
       device='cuda:0')
source:
tensor([ 101, 1000, 1000, 1000, 2358, 2099, 2487, 1000, 1000, 1000, 1012, 5672,
        1006, 1005, 2358, 2099, 2692, 1005, 1010, 1005, 1005, 1007,  102],
       device='cuda:0')
got:
tensor([ 7680,  1006,  4949,  1006, 20014,  1010, 13075,  2692,  1007,  1007,
          102,   102,   102,  1031,  1014,  1033,   102,   102,   102,   102,
        13075,  2692,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102, 13075,  2692,  1033,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101,  7680,  1006,  1015,  1026,  1026,  1045,  2005,  1045,  1010,
         1038,  1999,  4372, 17897, 11657,  1006, 13075,  2692,  1007,  2065,
         1038,  1007,   102], device='cuda:0')
got:
tensor([19616,  1006, 13075,  2692,  1010,  3145,  1027, 23375,  1060,  1024,
        13075,  2487,  1031,  1060,  1033,  1031,  1005, 13075,  2692,  1005,
         1033,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102, 13075,  2692,  1012,
         5950,  1006,  2862,  1006,  1060,  1031,  1005, 13075],
       device='cuda:0')
source:
tensor([  101,  2047,  9863,  1027, 19616,  1006, 13075,  2692,  1010,  3145,
         1027, 23375,  1047,  1024,  1047,  1031,  1005, 13075,  2487,  1005,
         1033,  1007,   102], device='cuda:0')
got:
tensor([ 1038,  1027,  2330,  1006, 13075,  2487,  1010,  1005,  1054,  1005,
         1007,   102,  4339,  1006, 13075,  2692,  1007,   102,   102,   102,
          102,   102,   102, 13075,  2487,   102,  1014,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  2240,  1027,  1014,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101, 13075,  2487,  1012,  4339,  1006,  2358,  6820,  6593,  1012,
         5308,  1006,  1005,  1019,  2497,  1005,  1010,  1008, 13075,  2692,
         1007,  1007,   102], device='cuda:0')
got:
tensor([ 6140,  1006, 13075,  2692,  1012,  2177,  3762,  1006,  1005, 13075,
         2487,  1005,  1007,  1012,  2946,  1006,  1007,  1007,   102,   102,
          102,   102,   102, 13075,  2692,  1010, 13075,  2487,  1012,  5950,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  1035,  2946,  1006,  1007,   102,   102],
       device='cuda:0')
source:
tensor([  101, 22851,  1012,  2186,  1006,  2862,  1006,  2275,  1006, 13075,
         2692,  1007,  1012,  6840,  1006,  2275,  1006, 13075,  2487,  1007,
         1007,  1007,  1007,   102], device='cuda:0')
got:
tensor([ 1005,  2358,  2099,  2692,  1005,  1009, 13075,  2692,  1010, 13075,
         2487,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
         1005, 13075,  2692,  1005,   102,   102,  1006,  1005,  2358,  2099,
         2487,  1005,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  1005,   102,  1005,  1007],
       device='cuda:0')
source:
tensor([  101,  1000,  1000,  1000,  2358,  2099,  2692,  1000,  1000,  1000,
         1012,  4289,  1006,  2969,  1012, 13075,  2692,  1010,  2969,  1012,
        13075,  2487,  1007,   102], device='cuda:0')
got:
tensor([ 4949,  1006, 20014,  1010,  2128,  1012,  2424,  8095,  1006,  1005,
         1032,  1032,  1040,  1009,  1005,  1010, 13075,  2692,  1007,  1007,
          102, 13075,  2692,  1033,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  1055,  1027,  1005,  1005,  1007,   102,
          102,   102,   102,   102, 13075,  2692,   102,   102],
       device='cuda:0')
source:
tensor([  101,  1031,  1005,  1005,  1012,  3693,  1006,  2358,  2099,  1006,
         1040,  1007,  2005,  1040,  1999,  1060,  1007,  2005,  1060,  1999,
        13075,  2692,  1033,   102], device='cuda:0')
got:
tensor([1000, 1000, 1000, 2358, 2099, 2692, 1000, 1000, 1000, 1012, 5672, 1006,
        1000, 1005, 1000, 1010, 1005, 2358, 2099, 2487, 1005, 1007,  102, 1005,
        2358, 2099, 2692, 1005, 1007,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102, 1005,  102,  102, 1005,  102, 1005,  102,  102],
       device='cuda:0')
source:
tensor([ 101, 2128, 1012, 4942, 1006, 1005, 1032, 1032, 1040, 1005, 1010, 1005,
        2358, 2099, 2487, 1005, 1010, 1005, 2358, 2099, 2692, 1005, 1007,  102],
       device='cuda:0')
got:
tensor([ 8117,  1006, 13075,  2692,  1010,  3145,  1027, 23375,  1060,  1024,
        14689,  1006,  1060,  1011,  1015,  1007,  1007,   102,   102,   102,
          102,   102,   102, 13075,  2692,  1031,  1014,  1033,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  1014,   102,  1005,   102,  1005,  1007],
       device='cuda:0')
source:
tensor([  101,  2358,  2099,  1006, 20014,  1006, 13075,  2692,  1007,  1009,
         1015,  1007,  1012,  1062,  8873,  3363,  1006, 18798,  1006, 13075,
         2692,  1007,  1007,   102], device='cuda:0')
got:
tensor([13075,  2692,  1012,  2177,  3762,  1006,  1005,  5950,  1005,  1007,
         1012,  2946,  1006,  1007,  1012, 25141,  1035,  5950,  1006,  4530,
         1027,  2995,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101,  2035,  1006, 13075,  2692,  1012,  5950,  1031,  1024,  1011,
         1015,  1033,  1026,  1027, 13075,  2692,  1012,  5950,  1031,  1015,
         1024,  1033,  1007,   102], device='cuda:0')
got:
tensor([13075,  2692,  1012,  2177,  3762,  1006,  1031,  1005, 13075,  2692,
         1005,  1010,  1005,  1016,  1005,  1033,  1007,  1012,  2946,  1006,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102, 13075,  2692,  1012,  7753,   102,   102],
       device='cuda:0')
source:
tensor([  101, 13075,  2692,  1027,  1031,  1031,  1037,  1010,  1038,  1033,
         1010,  1031,  1039,  1010,  1040,  1033,  1010,  1031,  1041,  1010,
         1042,  1033,  1033,   102], device='cuda:0')
got:
tensor([19616,  1006,  2862,  1006,  2846,  1006, 18798,  1006,  1055,  1007,
         1007,  1007,  1010,  3145,  1027, 23375,  1060,  1024,  1060,  1031,
         1015,  1033,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  1011,  1015,  1033,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101, 19616,  1006,  2862,  1010,  3145,  1027, 23375,  1060,  1024,
         1006,  1060,  1031,  1014,  1033,  1010,  1011,  1060,  1031,  1015,
         1033,  1007,  1007,   102], device='cuda:0')
got:
tensor([ 4062,  1012,  2424,  1035,  5783,  1035,  2011,  1035, 20116,  2015,
         1035, 27000,  1006,  1005,  2358,  2099,  2692,  1005,  1007,  1012,
        11562,  1006,  1007,   102,   102,   102,   102, 11562,  1006,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
         1013,  1008, 11562,  1006,  1007,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101,  4062,  1012,  2424, 12260,  3672,  1006,  2011,  1012,  4957,
        18209,  1006,  1005,  2358,  2099,  2692,  1005,  1007,  1007,  1012,
        11562,  1006,  1007,   102], device='cuda:0')
got:
tensor([ 4062,  1012,  2424,  1035,  5783,  1035,  2011,  1035, 20116,  2015,
         1035, 27000,  1006,  1005,  2358,  2099,  2692,  1005,  1007,  1012,
        11562,  1006,  1007,   102,   102,   102,   102, 11562,  1006,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
         1013,  5810,  1035,  2171,  1027,  1005,  2358,  2099],
       device='cuda:0')
source:
tensor([  101,  4062,  1012,  2424,  1035,  5783,  1035,  2011,  1035,  4957,
         1035,  3793,  1006,  1005,  2358,  2099,  2692,  1005,  1007,  1012,
        11562,  1006,  1007,   102], device='cuda:0')
got:
tensor([ 6140,  1006, 19616,  1006, 13075,  2692,  1010,  3145,  1027, 23375,
         1060,  1024, 18798,  1006,  1060,  1007,  1010, 18798,  1006,  1060,
         1007,  1007,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,  1005,   102, 13075,  2692,  1010,  7901,  1027,  2995,  1007],
       device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  4066,  1006,  3145,  1027, 23375,  1056,
         1024, 18798,  1006,  1056,  1031,  1015,  1033,  1007,  1010,  7901,
         1027,  2995,  1007,   102], device='cuda:0')
got:
tensor([ 2862,  1006,  4949,  1006, 20014,  1010, 13075,  2692,  1007,  1007,
          102,   102,   102,   102,   102,   102, 13075,  2692,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102, 13075,  2692,  1033,   102,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101, 16371,  8737,  2100,  1012,  9140,  1006, 13075,  2692,  1007,
         1012, 24501,  3270,  5051,  1006,  1011,  1015,  1007,  1012,  2000,
         9863,  1006,  1007,   102], device='cuda:0')
got:
tensor([ 4487,  6593,  1006,  1006,  1058,  1010,  1047,  1007,  2005,  1047,
         1010,  1058,  1999, 13075,  2692,  1012,  5167,  1006,  1007,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
         1006,  1058,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,  1005,  1007,   102,   102,   102,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101, 24501,  1027,  4487,  6593,  1006,  1006,  1058,  1010,  1047,
         1007,  2005,  1047,  1010,  1058,  1999, 13075,  2692,  1012,  5167,
         1006,  1007,  1007,   102], device='cuda:0')
got:
tensor([9808, 1012, 2291, 1006, 1005, 2358, 2099, 2692, 1005, 1007,  102, 1006,
        1005, 2358, 2099, 2487, 1005, 1007,  102,  102,  102,  102,  102,  102,
         102, 4281,  102,  102,  102,  102, 2358, 2099, 2692, 1007,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102], device='cuda:0')
source:
tensor([  101,  4942, 21572,  9623,  2015,  1012,  4831,  2078,  1006,  1031,
         1005,  2358,  2099,  2692,  1005,  1010,  1005,  2358,  2099,  2487,
         1005,  1033,  1007,   102], device='cuda:0')
got:
tensor([13075,  2692,  1012,  2177,  3762,  1006,  1005,  2358,  2099,  2692,
         1005,  1007,  1012, 12943,  2290,  1006, 23375,  1060,  1024,  1060,
         1012, 24473,  2094,  1006,  1007,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,  1005,  1007,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  2275,  1035,  5950,  1006,  1005,  2358,
         2099,  2692,  1005,  1007,  1012,  5950,  1012,  2131,  1035, 24473,
         2015,  1006,  1007,   102], device='cuda:0')
got:
tensor([ 6140,  1006,  1016,  1007,   102,   102,   102,   102,   102,   102,
          102, 24388,  2063,  1006,  1019,  1007,   102,   102,   102,   102,
          102,   102,  1016,   102,  2260,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,  1016,   102,   102,
         2184,   102,   102,   102,  1016,   102,   102,  1016,   102,   102],
       device='cuda:0')
source:
tensor([  101,  2279,  1006,  2009,  8743, 13669,  2015,  1012,  2003, 13231,
         1006,  2846,  1006,  2184,  1007,  1010,  1019,  1010,  1019,  1009,
         1015,  1007,  1007,   102], device='cuda:0')
got:
tensor([ 1031, 20014,  1006,  1045,  1007,  2005,  1045,  1999,  2846,  1006,
         2184,  1007,  1033,   102,   102,   102,   102,   102,  1033,   102,
          102,   102,   102,   102,   102,   102,  1033,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  1031,  1045,  1033,   102,   102,  1033,   102,   102],
       device='cuda:0')
source:
tensor([  101,  4949,  1006, 20014,  1010,  9345,  2140,  1006,  7953,  1006,
         1005,  4607,  1996,  4895, 19699,  9013, 18718,  3616,  1024,  1005,
         1007,  1007,  1007,   102], device='cuda:0')
got:
tensor([19616,  1006,  2862,  1006,  2951,  1012,  5300,  1006,  1007,  1007,
         1010,  3145,  1027, 23375,  1060,  1024,  1060,  1031,  1015,  1033,
         1031,  1005,  1037,  1005,  1033,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  1016,  1010,  3145,  1027, 23375,  1060],
       device='cuda:0')
source:
tensor([  101,  2862,  1035,  1997,  1035,  4487, 16649,  1012,  4066,  1006,
         3145,  1027,  6872,  1012,  8875, 18150,  3334,  1006,  1005,  2171,
         1005,  1007,  1007,   102], device='cuda:0')
got:
tensor([19616,  1006,  2862,  1006,  2951,  1012,  5300,  1006,  1007,  1007,
         1010,  3145,  1027, 23375,  1060,  1024,  1060,  1031,  1015,  1033,
         1031,  1005,  1037,  1005,  1033,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  1016,  1010,  3145,  1027, 23375,  1060],
       device='cuda:0')
source:
tensor([  101,  2862,  1035,  1997,  1035,  4487, 16649,  1012,  4066,  1006,
         3145,  1027,  6872,  1012,  8875, 18150,  3334,  1006,  1005,  2287,
         1005,  1007,  1007,   102], device='cuda:0')
got:
tensor([ 1031,  1047,  2005,  1047,  1010,  1058,  1999, 14101,  1006, 13075,
         2692,  1012,  5167,  1006,  1007,  1007,  2065,  1047,   999,  1027,
         1005,  2358,  2099,  2487,  1005,  1033,   102,   102,   102,   102,
          102,   102,   102,   102,  1033,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101,  1000,  1000,  1000,  2358,  2099,  2692,  1000,  1000,  1000,
         1012,  3693,  1006, 13075,  2692,  1031,  1005,  2358,  2099,  2487,
         1005,  1033,  1007,   102], device='cuda:0')
got:
tensor([ 1046,  3385,  1012, 15665,  1006,  5227,  1012,  2695,  1012,  2131,
         1006,  1005,  2358,  2099,  2692,  1005,  1007,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,  6583, 10623,  2015,
         1027,  6270,  1007,   102,   102,   102,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101,  1046,  3385,  1012,  7170,  1006, 24471,  6894,  2497,  1012,
         5227,  1012, 24471,  4135, 11837,  1006,  1005,  2358,  2099,  2692,
         1005,  1007,  1007,   102], device='cuda:0')
got:
tensor([ 2358,  2099,  2692,  1012, 21933,  3207,  1006,  1005, 21183,  2546,
         1011,  1022,  1005,  1010,  1005,  8568,  1005,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,  2002,  2595,  4305,
        23806,  1006,  1007,   102,   102,   102,   102,   102,   102,   102,
         1032,  1050,  1005,   102,  2002,  2595,  1005,  1007,   102,   102],
       device='cuda:0')
source:
tensor([  101, 27507,  1012,  2013,  5369,  2595,  1006,  1005,  2358,  2099,
         2692,  1005,  1007,  1012, 21933,  3207,  1006,  1005, 21183,  2546,
         1011,  1022,  1005,  1007,   102], device='cuda:0')
got:
tensor([27937,  1012,  9530, 16280, 12556,  1006,  1006, 13075,  2692,  1031,
         2358,  2099,  2692,  1033,  1007,  1007,   102,  1031,  2358,  2099,
         2692,  1033,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,  1033,   102,   102,   102,
          102,   102, 13075,  2692,  1031,  1024,  1024,  1011,  1015,  1033],
       device='cuda:0')
source:
tensor([  101,  1000,  1000,  1000,  2358,  2099,  2692,  1000,  1000,  1000,
         1012,  3693,  1006,  2358,  2099,  1006,  1060,  1007,  2005,  1060,
         1999, 13075,  2692,  1007,   102], device='cuda:0')
got:
tensor([13075,  2692,  1012,  3769,  1006,  1005,  2358,  2099,  2692,  1005,
         1010,  3904,  1007,   102,   102,   102,   102,  1031,  2358,  2099,
         2692,  1033,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102, 13075,  2692,  1012,  6309,  1006,  1007,   102,   102],
       device='cuda:0')
source:
tensor([  101,  1063,  1045,  1024, 13075,  2692,  1031,  1045,  1033,  2005,
         1045,  1999, 13075,  2692,  2065,  1045,   999,  1027,  1005,  2358,
         2099,  2692,  1005,  1065,   102], device='cuda:0')
got:
tensor([13075,  2692,  1012,  3975,  1006,  1005,  1032,  1032,  1015,  1005,
         1007,  1031,  1024,  1011,  1015,  1033,   102, 13075,  2692,  1012,
        21792, 22254,  1006, 13075,  2692,  1007,   102,   102,   102,  1005,
          102,  1005,   102,   102,   102,   102,   102,   102,   102,   102,
          102,  1005,   102,   102, 13075,  2692,  1012,  3975,  1006,  1007],
       device='cuda:0')
source:
tensor([  101,  1000,  1000,  1000,  1000,  1000,  1000,  1012,  3693,  1006,
        13075,  2692,  1012,  3975,  1006,  1005,  1005,  1007,  1031,  1024,
         1011,  1015,  1033,  1007,   102], device='cuda:0')
got:
tensor([ 7680,  1006,  7680,  1006,  1060,  1007,  2005,  1060,  1999, 13075,
         2692,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,  7680,  1006,  1007,
          102, 13075,  2692,  1007,   102,   102,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101,  7680,  1006,  7680,  1006,  1045,  1007,  2065,  2003,  7076,
        26897,  1006,  1045,  1010,  2862,  1007,  2842,  1045,  2005,  1045,
         1999, 13075,  2692,  1007,   102], device='cuda:0')
got:
tensor([ 9808,  1012,  4130,  1012, 16101, 18442,  1006,  9808,  1012,  4130,
         1012,  6526,  1006,  1005,  2358,  2099,  2692,  1005,  1007,  1007,
          102,   102,   102,   102,   102,  5371, 18442,  1027,  1005,  1003,
         1055,  1005,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  1035,  2171,  1027,  1005,  2358,  2099,  2692,  1005],
       device='cuda:0')
source:
tensor([ 101, 2065, 2025, 9808, 1012, 4130, 1012, 6526, 1006, 2358, 2099, 2692,
        1007, 1024, 9808, 1012, 2191, 4305, 2869, 1006, 2358, 2099, 2692, 1007,
         102], device='cuda:0')
got:
tensor([13075,  2487,  1031,  1014,  1033,  1012,  4487,  6593,  1006, 13075,
         2692,  1031,  1047,  1033,  1007,   102, 13075,  2487,  1012,  5167,
         1006,  1007,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102, 13075,  2692,  1012,
         2424,  1006,  1005, 13075,  2487,  1005,  1007,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101, 13075,  2692,  1027,  4487,  6593,  1006,  1006,  2501,  1031,
         1005,  1035,  8909,  1005,  1033,  1010,  2501,  1007,  2005,  2501,
         1999, 13075,  2487,  1007,   102], device='cuda:0')
got:
tensor([ 7680,  1006,  2003,  7076, 26897,  1006,  1060,  1010, 20014,  1007,
         2005,  1060,  1999, 13075,  2692,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,  6583, 10623,  2015,
         1027,  1014,  1007,   102,   102,   102,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101,  4487,  6593,  1006,  1006,  1060,  1010, 13075,  2692,  1012,
         4175,  1006,  1060,  1007,  1007,  2005,  1060,  1999,  2275,  1006,
        13075,  2692,  1007,  1007,   102], device='cuda:0')
got:
tensor([ 1031,  1045,  2005,  1045,  1010,  1046,  1999,  4372, 17897, 11657,
         1006,  2358,  2099,  2692,  1007,  2065,  1058,  1033,   102,  1031,
         1014,  1033,   102,  1027,  1027,  1015,  1033,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,  2003,  2025,  1999,
         2168,  1033,   102,  8123,  1027,  1014,  1007,   102,   102,   102],
       device='cuda:0')
source:
tensor([ 101, 1040, 2546, 1031, 1040, 2546, 1031, 1005, 2358, 2099, 2692, 1005,
        1033, 1027, 1027, 2995, 1033, 1012, 5950, 1012, 2000, 9863, 1006, 1007,
         102], device='cuda:0')
got:
tensor([25353,  2015,  1012,  4130,  1012, 19274,  1006,  1014,  1010,  1005,
         2358,  2099,  2692,  1005,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,  4487,  2615,  1012,  2131,  2906,  9447,  1006,
         1005,  2358,  2099,  2692,  1005,  1007,   102,   102,   102,   102,
          102,   102,  4487,  2615,  1006,  1007,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101, 11350,  1012,  2424,  1006,  1005,  4487,  2615,  1005,  1010,
         8909,  1027,  1005,  2358,  2099,  2692,  1005,  1007,  1012, 21933,
         8737,  9232,  1006,  1007,   102], device='cuda:0')
got:
tensor([ 1031, 13075,  2487,  1031,  1005, 13075,  2692,  1005,  1033,  1012,
        11307,  1006, 13075,  2692,  1012, 13075,  2487,  1007,  1033,   102,
          102,   102,   102,   102,   102,   102,  1033,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102, 13075,  2692,  1012,
         7753,   102,   102,   102,  1033,   102,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101,  1040,  2546,  1031,  1040,  2546,  1031,  1005, 13075,  2487,
         1005,  1033,  1012,  2358,  2099,  1012,  3397,  1006,  1005, 13075,
         2692,  1005,  1007,  1033,   102], device='cuda:0')
got:
tensor([ 1000,  1000,  1000,  1000,  1000,  1000,  1012,  3693,  1006,  2358,
         2099,  1006,  1045,  1007,  2005,  1045,  1999, 13075,  2692,  1007,
          102, 13075,  2692,  1012,  3975,  1006,  1007,   102,   102,  1005,
         1010,  1005,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102, 13075,  2692,  1005,   102,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101,  1000,  1000,  1000,  1010,  1000,  1000,  1000,  1012,  3693,
         1006,  1031,  2358,  2099,  1006,  1045,  1007,  2005,  1045,  1999,
        13075,  2692,  1033,  1007,   102], device='cuda:0')
got:
tensor([13075,  2692,  1027,  1031,  1033,   102,  1012,  4895,  5831,  2361,
         1006,  1007,   102,   102,   102,  3972, 13075,  2692,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,  1033,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101,  2765,  1027,  1031,  1037,  2005,  1037,  1010,  1038,  1999,
        13075,  2692,  1033,  1010,  1031,  1038,  2005,  1037,  1010,  1038,
         1999, 13075,  2692,  1033,   102], device='cuda:0')
got:
tensor([ 2709,  2862,  1006,  4895,  5831,  2361,  1012,  4895,  5831,  2361,
         1006, 13075,  2692,  1007,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  1016,  1010, 13075,  2692,  1007,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101,  2765,  1027,  1006,  1037,  2005,  1037,  1010,  1038,  1999,
        13075,  2692,  1007,  1010,  1006,  1038,  2005,  1037,  1010,  1038,
         1999, 13075,  2692,  1007,   102], device='cuda:0')
got:
tensor([ 4487,  6593,  1006,  1006,  1058,  1010,  1047,  1007,  2005,  1047,
         1010,  1058,  1999, 13075,  2692,  1012,  5167,  1006,  1007,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
         1006,  1058,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  1006,  1058,  1007,   102,  1006,  1058,  1007,   102],
       device='cuda:0')
source:
tensor([  101,  1063,  1045,  1031,  1015,  1033,  1024,  1045,  1031,  1014,
         1033,  2005,  1045,  1999,  2862,  1006, 13075,  2692,  1012,  5167,
         1006,  1007,  1007,  1065,   102], device='cuda:0')
got:
tensor([ 2655,  1006,  1520, 17170,  1035,  6434,  1010,  1520, 17170,  1035,
        17170, 17170, 17170,  1007,   102, 17170,   102,   102,   102,   102,
          102,   102,   102,   102, 17170,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101,  4942, 21572,  9623,  2015,  1012,  4638,  1035,  2655,  1006,
         1005, 12436, 13102,  1064, 17170, 17170,  1035,  6434,  1005,  1010,
         5806,  1027,  2995,  1007,   102], device='cuda:0')
got:
tensor([ 3231,  8873,  2571,  1027, 24471,  6894,  2497,  1012,  5227,  1012,
        24471,  4135, 11837,  2121,  1006,  1007,  3231,  8873,  2571,  1012,
        12850,  1006,  1005,  2358,  2099,  2692,  1005,  1010,  1005,  2358,
         2099,  2487,  1005,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  1005,  1007,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101, 24471,  6894,  2497,  1012,  5227,  1012, 24471, 20974,  3388,
         7373,  3726,  1006,  1005,  2358,  2099,  2692,  1005,  1010,  1005,
         2358,  2099,  2487,  1005,  1007,   102], device='cuda:0')
got:
tensor([ 8026,  3022,  6895,  2072,  1012,  4372, 16044,  1006,  1005,  2358,
         2099,  2692,  1005,  1007,   102,  1005,  1999,  8026,   102,   102,
          102,   102,   102,  1005,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  1016,  1012,  4372, 16044,  1006,  1005],
       device='cuda:0')
source:
tensor([  101,  2918, 21084,  1012,  1038, 21084,  2368, 16044,  1006, 27507,
         1006,  1005,  2358,  2099,  2692,  1005,  1010,  1005, 21183,  2546,
         1011,  1022,  1005,  1007,  1007,   102], device='cuda:0')
got:
tensor([ 2047,  1035,  2862,  1027,  1031,  1006,  1045,  1007,  2005,  1045,
         1999, 13075,  2692,  1033,   102,  2275,  1006, 13075,  2692,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  1006,  1007,  1033,   102,   102,   102,   102,   102,
          102,   102,  1035,  1041,  1007,   102,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101,  1031,  1047,  2005,  1047,  1010,  1058,  1999,  2862,  1006,
         4675,  1006, 13075,  2692,  1007,  1012,  5167,  1006,  1007,  1007,
         2065,  1058,  1028,  1015,  1033,   102], device='cuda:0')
got:
tensor([22260,  1012,  2275,  1035,  1061, 26348, 20470,  9050,  1006,  1031,
         1005,  2358,  2099,  2475,  1005,  1010,  1005,  2358,  2099,  2509,
         1005,  1033,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
         1005,   102,  1005,  1033,  1007,   102,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101, 20228,  2102,  1012,  5436,  1006,  2358,  2099,  2475,  1010,
         2358,  2099,  2509,  1010,  3830,  1027,  1005,  1002,  1044,  1035,
         1016,  2080,  1002,  1005,  1007,   102], device='cuda:0')
got:
tensor([ 1031, 13075,  2692,  1031,  1005,  2358,  2099,  2692,  1005,  1033,
         2005, 13075,  2692,  1999,  2846,  1006, 18798,  1006, 13075,  2692,
         1007,  1007,  1033,   102,  8123,  1027,  1015,  1007,  1033,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102, 13075,  2692,  1031,  1014,  1033,   102, 13075,  2692],
       device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  6335, 10085,  1031, 27937,  1012,  4257,
         8540,  6290,  2080,  1006, 13075,  2692,  1031,  1005,  2358,  2099,
         2692,  1005,  1033,  1007,  1033,   102], device='cuda:0')
got:
tensor([13075,  2692,  1012,  5672,  1006,  1005,  2358,  2099,  2692,  1005,
         1010,  1005,  2358,  2099,  2487,  1005,  1007,   102,   102,   102,
          102,   102,   102,   102, 13075,  2692,  1010,  1005,  2358,  2099,
         2487,  1005,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  5672,  1006,  1063,  1005,  2358,  2099,
         2692,  1005,  1024,  1005,  2358,  2099,  2487,  1005,  1065,  1010,
        19723, 10288,  1027,  2995,  1007,   102], device='cuda:0')
got:
tensor([13075,  2692,  1012,  5672,  1006,  1005,  2358,  2099,  2692,  1005,
         1010,  1005,  2358,  2099,  2487,  1005,  1007,   102,   102,   102,
          102,   102,   102,   102, 13075,  2692,  1031,  1005,  2358,  2099,
         2692,  1005,  1033,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  5672,  1006,  1063,  1005,  2358,  2099,
         2692,  1005,  1024,  1005,  2358,  2099,  2487,  1005,  1065,  1010,
        19723, 10288,  1027,  2995,  1007,   102], device='cuda:0')
got:
tensor([ 6140,  1006,  1005,  1005,  1012,  3693,  1006,  1031,  2358,  2099,
         1006,  1045,  1007,  2005,  1045,  1999, 14101,  1006, 13075,  2692,
         1031,  1015,  1024,  1033,  1010, 13075,  2692,  1031,  1011,  1015,
         1033,  1007,  1007,  1033,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102], device='cuda:0')
source:
tensor([  101,  1031,  1006,  1060,  1009,  1061,  1007,  2005,  1060,  1010,
         1061,  1999, 14101,  1006, 13075,  2692,  1010, 13075,  2692,  1031,
         1015,  1024,  1033,  1007,  1033,   102], device='cuda:0')
got:
tensor([ 4062,  1012,  2424,  1035,  5783,  1035,  2011,  1035, 20116,  2015,
         1035, 27000,  1006,  1005,  2358,  2099,  2692,  1005,  1007,  1012,
        11562,  1006,  1007,   102,   102,   102,   102, 11562,  1006,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
         1013,  1008, 11562,  1006,  1007,   102,   102,   102,   102,   102,
          102], device='cuda:0')
source:
tensor([  101,  4062,  1012,  2424,  1035,  5783,  1035,  2011,  1035,  7704,
         1035,  4957,  1035,  3793,  1006,  1005,  2358,  2099,  2692,  1005,
         1007,  1012, 11562,  1006,  1007,   102], device='cuda:0')
got:
tensor([ 2128,  1012,  3975,  1006,  1005,  1032,  1032,  1055,  1009,  1005,
         1010, 13075,  2692,  1007,   102, 13075,  2692,  1012,  3975,  1006,
         1005,  2358,  2099,  2692,  1005,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,  1005,  1007,   102,   102,   102,   102,
          102,   102,  1005,   102,  1005,  1007,   102,   102,   102,   102,
          102], device='cuda:0')
source:
tensor([  101,  2128,  1012,  2424,  8095,  1006,  1005,  1032,  1032,  1038,
         1006,  1032,  1032,  1059,  1009,  1007,  1040,  1032,  1032,  1038,
         1005,  1010, 13075,  2692,  1007,   102], device='cuda:0')
got:
tensor([ 2128,  1012,  2424,  8095,  1006,  1005,  1032,  1032,  1059,  1009,
         1005,  1010, 13075,  2692,  1007,   102,  1005,  2358,  2099,  2692,
         1005,  1007,   102,  1005,  2358,  2099,  2692,  1005,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
         1005,   102,  1005,   102,  1005,   102,  1005,   102,  1005,   102,
         1005], device='cuda:0')
source:
tensor([  101,  1031,  2773,  2005,  2773,  1999, 13075,  2692,  1012,  3975,
         1006,  1007,  2065,  2773,  1012,  4627, 24415,  1006,  1005,  2358,
         2099,  2692,  1005,  1007,  1033,   102], device='cuda:0')
got:
tensor([4289, 3334, 1027, 1005, 2358, 2099, 2487, 1005, 1012, 1005,  102, 1005,
         102, 1005,  102, 1005, 1007,  102,  102,  102,  102,  102,  102, 1005,
        2358, 2099, 2692, 1005,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102, 2358, 2099, 2487,  102,  102,  102, 1005,  102, 1005,  102,
         102, 1005, 1007], device='cuda:0')
source:
tensor([  101,  2051,  1012,  2358, 12881,  7292,  1006,  1005,  2358,  2099,
         2487,  1005,  1010,  2051,  1012,  2334,  7292,  1006, 15170, 23352,
        16576, 24434,  2692,  1007,  1007,   102], device='cuda:0')
got:
tensor([14257,  1006,  1005,  2358,  2099,  2692,  1005,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,  1005,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,  1005,   102,
         1005,   102,  1005,   102,   102,  1005,  1003,  1055,  1005,  1003,
         1006], device='cuda:0')
source:
tensor([ 101, 6140, 1006, 1005, 1063, 1014, 1024, 1012, 1014, 2546, 1065, 1003,
        1005, 1012, 4289, 1006, 1015, 1012, 1014, 1013, 1017, 1008, 2531, 1007,
        1007,  102], device='cuda:0')
got:
tensor([13075,  2692,  1012,  2000,  1035, 20116,  2615,  1006,  1005,  2358,
         2099,  2487,  1005,  1010,  8902,  2015,  1027,  1031,  1005,  2358,
         2099,  2692,  1005,  1033,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  2000,  1035, 29296,  1006,  1005,  2358,
         2099,  2692,  1005,  1010,  3194,  1010,  8040, 28433,  1027,  1005,
         2358,  2099,  2487,  1005,  1007,   102], device='cuda:0')
got:
tensor([ 1031,  1060,  2005,  1060,  1999, 13075,  2692,  2065,  1060,  2025,
         1999, 13075,  2487,  1033,   102,  5950,  1006,  8875,  1007,  1033,
          102,  4487,  6593,  1006,  1031,  1060,  2005,  1061,  1999, 13075,
         2692,  1033,  1007,  1033,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  4942,  9863,  1007,   102,   102,   102,
          102], device='cuda:0')
source:
tensor([  101,  2047,  9863,  1027,  1031,  1058,  2005,  1045,  1010,  1058,
         1999,  4372, 17897, 11657,  1006, 13075,  2692,  1007,  2065,  1045,
         2025,  1999, 13075,  2487,  1033,   102], device='cuda:0')
got:
tensor([10722, 10814,  1006, 14101,  1006,  1008,  1031,  1006,  2358,  2099,
         2692,  1007,  1010,  1006,  2358,  2099,  2692,  1007,  1033,  1007,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,  1033,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102], device='cuda:0')
source:
tensor([  101,  2013,  4569,  6593, 13669,  2015, 12324,  5547,  5547,  1006,
        23375,  1037,  1010,  1038,  1024,  1037,  1009,  1038,  1010,  1006,
         2358,  2099,  2692,  1007,  1007,   102], device='cuda:0')
got:
tensor([ 1040,  2546,  1012,  6611,  1006, 23375,  1060,  1024,  1060,  1012,
         5672,  1006,  1005,  1031,  1034,  1037,  1011, 23564,  1011,  1062,
         1033,  1005,  1010,  1005,  1005,  1007,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,  1005,   102,  1005,  1010,  8123,  1027,  1015,  1007,   102,
          102], device='cuda:0')
source:
tensor([  101,  1040,  2546,  1031,  1005,  2846,  1005,  1033,  1012,  5672,
         1006,  1005,  1010,  1005,  1010,  1005,  1011,  1005,  1010,  1999,
        24759, 10732,  1027,  2995,  1007,   102], device='cuda:0')
got:
tensor([13075,  2692,  1012,  2177,  3762,  1006, 13075,  2487,  1005,  1007,
         1012,  2946,  1006,  1007,  1012,  2177,  3762,  1006, 23375,  1060,
         1024,  1060,  1012, 13075,  2692,  1031,  1005, 13075,  2487,  1005,
         1033,  1012,  6039,  2532,  1006,  1014,  1007,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  2177,  3762,  1006,  1005, 13075,  2487,
         1005,  1007,  1012, 11307,  1006, 23375,  1060,  1024, 18798,  1006,
         1060,  1007,  1028,  1015,  1007,   102], device='cuda:0')
got:
tensor([ 2358,  2099,  2487,  1012,  2358,  2099,  1031,  1005,  2358,  2099,
         2692,  1005,  1033,  1027,  1040,  2546,  1031,  1005,  2358,  2099,
         2692,  1005,  1033,  1012,  2004, 13874,  1006, 20014,  1007,   102,
          102,   102,   102,   102,   102,   102,  2358,  2099,  2692,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102], device='cuda:0')
source:
tensor([  101,  2358,  2099,  2487,  1031,  1005,  2358,  2099,  2692,  1005,
         1033,  1012,  6611,  1006, 23375,  1060,  1024,  1060,  1012,  2205,
        17080, 12032,  1006,  1007,  1007,   102], device='cuda:0')
got:
tensor([19616,  1006, 13075,  2692,  1010,  3145,  1027, 23375,  1045,  1024,
        13075,  2487,  1031,  1045,  1033,  1031,  1005, 13075,  2692,  1005,
         1033,  1007,   102,   102,   102,   102,   102,   102,   102,  7901,
         1006,  2995,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  7901,  1027,  2995,  1007,   102,   102,   102,   102,
          102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1027, 19616,  1006, 13075,  2692,  1010,  3145,
         1027,  8875, 18150,  3334,  1006,  1005, 13075,  2487,  1005,  1007,
         1010,  7901,  1027,  2995,  1007,   102], device='cuda:0')
got:
tensor([13075,  2692,  1012,  8840,  2278,  1031, 13075,  2692,  1031,  1005,
         2358,  2099,  2692,  1005,  1033,  1012,  2003,  2378,  1006, 13075,
         2692,  1007,  1033,   102,  8123,  1027,  1015,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  8840,  2278,  1031, 13075,  2692,  1031,
         1014,  1033,  1012,  2358,  2099,  1012,  3397,  1006,  1005,  2358,
         2099,  2692,  1005,  1007,  1033,   102], device='cuda:0')
got:
tensor([13075,  2692,  1012,  4066,  1006,  3145,  1027, 23375,  1060,  1024,
         1060,  1031,  1016,  1033,  1007,   102,   102,   102,   102,   102,
          102, 13075,  2487,  1012,  2896,  1006,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,  5950,  1006,  1060,
         1031,  1014,  1033,  1007,   102,   102,   102,   102,   102,   102,
          102], device='cuda:0')
source:
tensor([  101, 19616,  1006, 13075,  2692,  1010,  3145,  1027, 23375, 13075,
         2487,  1024, 13075,  2487,  1012,  3975,  1006,  1005,  1010,  1005,
         1007,  1031,  1015,  1033,  1007,   102], device='cuda:0')
got:
tensor([19616,  1006, 13075,  2692,  1010,  3145,  1027, 23375,  1045,  1024,
        13075,  2487,  1012,  5950,  1006,  2862,  1006,  1045,  1012,  5300,
         1006,  1007,  1007,  1031,  1014,  1033,  1010,  7901,  1027,  2995,
         1007,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102, 13075,  2692,
          102], device='cuda:0')
source:
tensor([  101,  2047,  9863,  1027, 19616,  1006, 13075,  2692,  1010,  3145,
         1027,  8875, 18150,  3334,  1006,  1005, 13075,  2487,  1005,  1007,
         1010,  7901,  1027,  2995,  1007,   102], device='cuda:0')
got:
tensor([13075,  2692,  1012,  5200,  1012, 11307,  1006,  8909,  1027,  1015,
         1007,  1012,  2131,  1006,  1005,  2358,  2099,  2692,  1005,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102, 13075,  2692,  1012,  5200,  1012,  2035,  1006,  1007,
          102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  5200,  1012, 11307,  1006,  2177,  1027,
         2177,  1007,  1012,  2344,  1035,  2011,  1006,  1005,  1011,  2794,
         1005,  1007,  1031,  1014,  1033,   102], device='cuda:0')
got:
tensor([2330, 1006, 1005, 2358, 2099, 2692, 1005, 1010, 1005, 1054, 1005, 1007,
        1012, 4339, 1006, 1005, 2358, 2099, 2692, 1005, 1007,  102,  102,  102,
         102,  102, 4471,  102, 1005, 1007,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102, 1005,  102, 1005, 1007,  102,
         102,  102,  102], device='cuda:0')
source:
tensor([  101,  3433,  1027, 24471,  6894,  2497,  1012,  5227,  1012, 24471,
         4135, 11837,  1006,  1005,  2358,  2099,  2692,  1005,  1007, 16129,
         1027,  3433,  1012,  3191,  1006,  1007,   102], device='cuda:0')
got:
tensor([ 3058,  7292,  1012,  3058,  7292,  1012,  2013,  7292,  9153,  8737,
         1006, 13075,  2692,  1013,  6694,  1012,  1014,  1007,   102,   102,
          102,  1005,   102,  1005,  2358,  2099,  2692,  1005,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  1024,  6140,  1006,  1005,  2358,  2099,
         2692], device='cuda:0')
source:
tensor([  101,  3058,  7292,  1012,  3058,  7292,  1012,  2013,  7292,  9153,
         8737,  1006, 13075,  2692,  1007,  1012,  2358, 12881,  7292,  1006,
         1005,  2358,  2099,  2692,  1005,  1007,   102], device='cuda:0')
got:
tensor([ 3027,  2361,  1012,  2128, 16344, 21114,  2854,  1006,  1005,  3058,
         5371, 18442,  1005,  1010,  5371,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,  1055,  4859,  1035,  5371, 18442,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  1035,  3793,   102,   102,   102,   102,   102,   102,
          102], device='cuda:0')
source:
tensor([  101,  3027,  2361,  1012,  2358,  2953, 12735,  1006,  1005,  2358,
         2953,  1005,  1009,  5371, 18442,  1010,  2330,  1006,  5371, 18442,
         1010,  1005,  1054,  1005,  1007,  1007,   102], device='cuda:0')
got:
tensor([ 1031,  4949,  1006, 20014,  1010,  4942,  9863,  1007,  2005,  4942,
         9863,  1999, 13075,  2692,  1033,   102,  1033,   102,   102,   102,
          102,   102,   102,   102,   102,  1033,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,  1033,   102,   102,
          102,   102,   102,   102,   102, 13075,  2692,   102,   102,  1033,
          102], device='cuda:0')
source:
tensor([  101,  1031, 20014,  1006,  1005,  1005,  1012,  3693,  1006,  2358,
         2099,  1006,  1040,  1007,  2005,  1040,  1999,  1060,  1007,  1007,
         2005,  1060,  1999, 13075,  2692,  1033,   102], device='cuda:0')
got:
tensor([2128, 1012, 4942, 1006, 1005, 1006, 1012, 1008, 1007, 1005, 1010, 1005,
        2358, 2099, 2475, 1005, 1010, 1005, 2358, 2099, 2692, 1005, 1007,  102,
        1005, 2358, 2099, 2487, 1005, 1007,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102, 1005, 1010, 1005, 2358,
        2099, 2487, 1005], device='cuda:0')
source:
tensor([ 101, 2128, 1012, 4942, 1006, 1005, 1032, 1032, 1038, 2232, 2509, 1032,
        1032, 1038, 1005, 1010, 1005, 2358, 2099, 2487, 1005, 1010, 2358, 2099,
        2475, 1007,  102], device='cuda:0')
got:
tensor([13075,  2487,  1012, 15389,  1006,  1005, 19274,  2030,  5672,  2046,
         2795,  5300,  1006,  1003,  1055,  1007,  1005,  1003,  1006, 13075,
         2692,  1010,  1007,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102, 13075,  2487,   102,
          102,   102,  2951,   102,   102,   102,   102,   102,   102,   102,
          102], device='cuda:0')
source:
tensor([  101, 13075,  2487,  1012, 15389,  1006,  1000, 19274,  2046,  3231,
         5300,  1006,  1029,  1010,  1005,  3347,  1005,  1007,  1000,  1010,
         1006, 13075,  2692,  1010,  1007,  1007,   102], device='cuda:0')
got:
tensor([ 2128,  1012,  4942,  1006,  1005,  1031,  1034,  1032,  1032,  1059,
         1009,  1033,  1005,  1010,  1005,  1005,  1010, 13075,  2692,  1007,
          102,  1005,  1005,  1010, 13075,  2692,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  5164,  1012,  6167,  1006,  1007,   102,   102,   102,
          102], device='cuda:0')
source:
tensor([  101,  2128,  1012,  4942,  1006,  1005,  1031,  1034,  1037,  1011,
        23564,  1011,  1062,  2692,  1011,  1023,  1033,  1009,  1005,  1010,
         1005,  1005,  1010, 13075,  2692,  1007,   102], device='cuda:0')
got:
tensor([ 1031,  7680,  1006,  1060,  1007,  2005,  1060,  1999, 13075,  2487,
         2065,  1060,  1012,  3975,  1006,  1007,  1033,   102, 13075,  2692,
         1033,   102,   102,   102,   102,   102,   102,   102, 13075,  2692,
         1033,   102,   102,   102,   102,   102,   102,  7680,  1006, 13075,
         2487,  1007,   102, 13075,  2692,  1007,   102,   102,  1033,   102,
          102], device='cuda:0')
source:
tensor([  101,  1031,  7680,  1006, 13075,  2487,  1031,  1024, 13075,  2692,
         1033,  1007,  2005, 13075,  2692,  1010,  1035,  1999,  4372, 17897,
        11657,  1006, 13075,  2487,  1007,  1033,   102], device='cuda:0')
got:
tensor([11350,  1012,  2424,  8095,  1006,  1005,  2358,  2099,  2692,  1005,
         1010,  2012, 16344,  2015,  1027,  1063,  1005,  2358,  2099,  2487,
         1005,  1024,  1005,  2358,  2099,  2487,  1005,  1065,  1007,   102,
          102,  1012,  2177,  1006,  1015,  1007,   102,   102,   102,   102,
          102,   102,  1035,  3793,   102,   102,   102,   102,  1005,  1065,
          102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  2424,  1035,  2035,  1006,  1005,  2358,
         2099,  2692,  1005,  1010,  1063,  1005,  2465,  1005,  1024,  1005,
         2358,  2099,  2487,  1005,  1065,  1007,   102], device='cuda:0')
got:
tensor([ 1031,  1047,  2005,  1047,  1010,  1043,  1999,  2009,  8743, 13669,
         2015,  1012,  2177,  3762,  1006,  1031,  2358,  2099,  2692,  1033,
         1007,  1033,   102,  1031,  2358,  2099,  2692,  1033,   102,   102,
          102,   102,  1007,   102,   102,   102,   102,   102,   102,  1033,
          102,   102,   102,   102,  1005,   102,  1005,   102,   102,   102,
          102], device='cuda:0')
source:
tensor([ 101, 2862, 1006, 4487, 6593, 1006, 1006, 1060, 1031, 1014, 1033, 1010,
        1060, 1007, 2005, 1060, 1999, 2358, 2099, 2692, 1007, 1012, 5300, 1006,
        1007, 1007,  102], device='cuda:0')
got:
tensor([ 6140,  1006, 13075,  2692,  1012,  2597,  1006,  1015,  1007,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102, 13075,  2692,  1031,  1015,  1033,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102], device='cuda:0')
source:
tensor([  101,  2005,  1045,  1999,  1031,  1045,  2005,  1045,  1010,  1060,
         1999,  4372, 17897, 11657,  1006, 13075,  2692,  1007,  2065,  1060,
         1027,  1027,  1015,  1033,  1024,  3413,   102], device='cuda:0')
got:
tensor([ 6140,  1006, 13075,  2692,  1012,  2597,  1006,  1015,  1007,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102, 13075,  2692,  1031,  1015,  1033,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102], device='cuda:0')
source:
tensor([  101,  2005,  1045,  1999,  1006,  1045,  2005,  1045,  1010,  1060,
         1999,  4372, 17897, 11657,  1006, 13075,  2692,  1007,  2065,  1060,
         1027,  1027,  1015,  1007,  1024,  3413,   102], device='cuda:0')
got:
tensor([ 2128,  1012,  2424,  8095,  1006,  1005,  1032,  1032,  1059,  1009,
         1005,  1010,  1005,  2358,  2099,  2692,  1005,  1007,   102,   102,
          102,   102,  1005,  1010, 13075,  2692,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,  5164,  1012,  3975,
         1006,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102], device='cuda:0')
source:
tensor([ 101, 2128, 1012, 2424, 8095, 1006, 1005, 1006, 1012, 1009, 1029, 1007,
        1024, 1006, 1012, 1009, 1029, 1007, 1032, 1032, 1038, 1029, 1005, 1010,
        3793, 1007,  102], device='cuda:0')
got:
tensor([ 2128,  1012,  4942,  1006,  1005,  1032,  1032,  1031,  1006,  1031,
         1034,  1032,  1032,  1033,  1033,  1008,  1007,  1032,  1032,  1033,
         1005,  1010,  1005,  1005,  1010, 13075,  2692,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  5164,   102,  1005,  1010, 13075,  2692,  1007,   102,
          102,   102,   102], device='cuda:0')
source:
tensor([  101,  2128,  1012,  2424,  8095,  1006,  1005,  1006,  1012,  1008,
         1029,  1007,  1032,  1032,  1031,  1012,  1008,  1029,  1032,  1032,
         1033,  1005,  1010, 13075,  2692,  1007,   102], device='cuda:0')
got:
tensor([13075,  2692,  1027,  1031,  2330,  1006,  1005,  2358,  2099,  2692,
         1005,  1007,  1012,  3191,  1006,  1007,  1033,   102, 13075,  2692,
         1033,   102,   102,   102, 13075,  2692,   102,   102,   102,   102,
          102,   102,   102,   102,   102, 10047,  2290,  1012,  3975,  1006,
         1007,   102, 13075,  2692,  1007,   102,   102,   102,   102,   102,
          102,   102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1027,  1031,  2240,  1012,  6167,  1006,  1007,
         2005,  2240,  1999,  2330,  1006,  1005,  2358,  2099,  2692,  1005,
         1010,  1005,  1054,  1005,  1007,  1033,   102], device='cuda:0')
got:
tensor([ 3795,  2015,  1006,  1007,  1031,  1005,  2358,  2099,  2692,  1005,
         1033,  1012,  4289,  1006,  1008, 12098,  5620,  1007,   102,   102,
          102,   102,   102,   102,  7685,  1006,  1005,  2358,  2099,  2692,
         1005,  1007,   102,   102,   102,   102,  5244,  1006,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102], device='cuda:0')
source:
tensor([  101,  2005,  1045,  1010,  1046,  1999,  4031,  1006,  2862,  1006,
         2846,  1006, 17273,  1007,  1007,  1010,  2862,  1006,  2846,  1006,
        17273,  1007,  1007,  1007,  1024,  3413,   102], device='cuda:0')
got:
tensor([13075,  2692,  1012,  5672,  1006,  1005,  2358,  2099,  2692,  1005,
         1010,  1005,  1005,  1007,   102, 13075,  2692,  1027, 13075,  2692,
         1012, 12667, 24901,  1006,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102, 13075,  2692,  1012,
         3975,  1006,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102], device='cuda:0')
source:
tensor([  101,  1000,  1000,  1000,  1000,  1000,  1000,  1012,  3693,  1006,
        13075,  2692,  1012, 12667, 24759,  4183,  1006,  1005,  2358,  2099,
         2692,  1005,  1010,  1015,  1007,  1007,   102], device='cuda:0')
got:
tensor([19616,  1006, 13075,  2692,  1010,  3145,  1027, 23375, 10722,  2361,
         1024, 13075,  2487,  1031,  1024,  1024,  1011,  1015,  1033,  1010,
         7901,  1027,  2995,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  3145,  1027,  8875,  1031,  1015,  1033,   102,  1024,
        13075,  2692,  1033], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1027, 19616,  1006, 13075,  2692,  1010,  3145,
         1027, 23375,  1037,  1024,  1037,  1031,  1005, 13075,  2487,  1005,
         1033,  1010,  7901,  1027,  2995,  1007,   102], device='cuda:0')
got:
tensor([ 2128,  1012,  2424,  8095,  1006,  1005,  1032,  1032,  1055,  1009,
         1005,  1010,  1005,  2358,  2099,  2692,  1005,  1010, 13075,  2692,
         1007,   102,   102,   102,   102,   102,   102,   102, 13075,  2692,
         1005,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
         1011,  1015,  1005,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102], device='cuda:0')
source:
tensor([  101,  2128,  1012,  3945,  1006,  1005,  1032,  1032,  1031,  1006,
         1012,  1008,  1007,  1032,  1032,  1033,  1005,  1010, 13075,  2692,
         1007,  1012,  2177,  1006,  1015,  1007,   102], device='cuda:0')
got:
tensor([ 2358,  6820,  6593,  1012,  4895, 23947,  1006,  1005,  1028,  1053,
         1005,  1010, 13075,  2692,  1007,   102,  1011,  1015,   102,   102,
          102,   102,  1006, 13075,  2692,  1007,   102,   102, 13075,  2692,
         1012, 24501,  3270,  5051,  1006,  1011,  1015,  1007,   102,   102,
          102,   102,   102,   102,  1005,   102,   102,   102,   102,   102,
          102,   102,   102], device='cuda:0')
source:
tensor([  101,  2358,  6820,  6593,  1012,  4895, 23947,  1006,  1005,  1044,
         1005,  1010,  2358,  6820,  6593,  1012,  5308,  1006,  1005,  1044,
         1005,  1010, 13075,  2692,  1007,  1007,   102], device='cuda:0')
got:
tensor([ 4949,  1006,  7680,  1010, 14101,  1006,  1008, 13075,  2692,  1007,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,  1033,   102,   102, 13075,  2692,  1007,   102,   102,   102,
          102,   102,   102], device='cuda:0')
source:
tensor([  101,  1031,  1031,  7680,  1006,  8875,  1007,  2005,  8875,  1999,
        14101,  1006,  1008,  5167,  1007,  1033,  2005,  5167,  1999, 14101,
         1006,  1008, 13075,  2692,  1007,  1033,   102], device='cuda:0')
got:
tensor([ 1063,  3145,  1024, 11748,  2005,  3145,  1010, 11748,  1999,  2862,
         1006, 13075,  2692,  1012,  5167,  1006,  1007,  1007,  2065,  1058,
          999,  1027,  1005,  1061,  2509,  1005,  1065,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  1065,   102,   102,   102,   102,   102,
         1065,   102,   102], device='cuda:0')
source:
tensor([  101, 24501,  1027,  1063,  1047,  1024,  1058,  2005,  1047,  1010,
         1058,  1999,  2862,  1006, 13075,  2692,  1012,  5167,  1006,  1007,
         1007,  2065,  1058,  2003,  2025,  3904,  1065,   102],
       device='cuda:0')
got:
tensor([ 4487,  6593,  1006,  1006,  1047,  1010,  1058,  1007,  2005,  1047,
         1010,  1058,  1999, 13075,  2487,  1012,  5167,  1006,  1007,  2065,
         1047,   999,  1027, 13075,  2692,  1031,  1047,  1033,  1007,   102,
          102,   102,   102,   102,   102,   102,   102, 13075,  2487,   102,
          102,   102, 13075,  2692,  1031,  1047,  1033,   102,   102,   102,
          102,   102,   102], device='cuda:0')
source:
tensor([  101,  1063, 13075,  2487,  1024,  1031,  1040,  1031, 13075,  2487,
         1033,  2005,  1040,  1999, 13075,  2692,  1033,  2005, 13075,  2487,
         1999, 13075,  2692,  1031,  1014,  1033,  1065,   102],
       device='cuda:0')
got:
tensor([ 9808,  1012,  4130,  1012,  3693,  1006, 13075,  2692,  1007,   102,
         6764,  1027,  1031,  1033,   102,  1035,  5371, 18442,  1027,  4339,
         1006, 13075,  2692,  1007,   102,   102,  1024,  3338,   102,   102,
         3338,   102,   102,   102,   102,   102,   102,  5371, 18442,  2015,
          102,   102,  1035,  2946,   102,   102,  1024,  3413,   102,   102,
         1009,  1027,  1042], device='cuda:0')
source:
tensor([  101,  2005,  7117,  1010, 16101,  2015,  1010,  5371, 18442,  2015,
         1999,  9808,  1012,  3328,  1006, 13075,  2692,  1007,  1024,  2005,
         1042,  1999,  5371, 18442,  2015,  1024,  3413,   102],
       device='cuda:0')
got:
tensor([27937,  1012,  5717,  2015,  1006,  1006, 13075,  2692,  1010, 13075,
         2487,  1007,  1007,   102,   102,  1016,  1010, 13075,  2487,   102,
          102,   102,   102, 13075,  2487,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102, 13075,  2487,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
        13075,  2487,   102], device='cuda:0')
source:
tensor([  101, 27937,  1012,  9140,  1006,  1031, 14101,  1006,  1060,  1010,
         1061,  1007,  2005,  1060,  1010,  1061,  1999, 14101,  1006, 13075,
         2692,  1010, 13075,  2487,  1007,  1033,  1007,   102],
       device='cuda:0')
got:
tensor([ 2128,  1012,  2424,  8095,  1006,  1005,  1032,  1032,  1031,  1006,
         1012,  1008,  1029,  1007,  1032,  1032,  1033,  1005,  1010, 13075,
         2692,  1007,   102, 13075,  2692,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
         1005,   102,  5164,  1012,  2177,  1006,  1014,  1007,   102,  1005,
          102,  1005,   102], device='cuda:0')
source:
tensor([  101, 19719,  1027,  2128,  1012,  4942,  1006,  1005,  1031,  1034,
         1006,  1007,  1063,  1065,  1031,  1032,  1032,  1033,  1033,  1005,
         1010,  1005,  1005,  1010, 13075,  2692,  1007,   102],
       device='cuda:0')
got:
tensor([ 1031,  1006,  1060,  1010, 13075,  2692,  1007,  2005,  1060,  1999,
        13075,  2487,  1033,   102,   102,  2846,  1006,  1016,  1010,  1017,
         1007,  1033,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,  1033,   102,   102,
          102,   102,   102,   102,  1999, 13075,  2692,  1033,   102,   102,
          102,   102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2487,  1012, 10439, 10497,  1006,  1006, 13075,  2692,
         1031,  1014,  1033,  1031,  1014,  1033,  1010, 13075,  2692,  1031,
         1014,  1033,  1031,  1016,  1033,  1007,  1007,   102],
       device='cuda:0')
got:
tensor([19616,  1006, 13075,  2692,  1010,  3145,  1027, 13075,  2692,  1012,
         2131,  1007,   102,  7901,  1006,  2995,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,  7901,  1006,  2995,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102], device='cuda:0')
source:
tensor([  101, 19616,  1006,  2862,  1006, 13075,  2692,  1012,  5167,  1006,
         1007,  1007,  1010,  3145,  1027, 23375,  3940,  1024,  3940,  1031,
         1015,  1033,  1010,  7901,  1027,  2995,  1007,   102],
       device='cuda:0')
got:
tensor([13075,  2692,  1031,  1005,  2358,  2099,  2692,  1005,  1033,  1027,
        13075,  2692,  1031,  1005,  2358,  2099,  2487,  1005,  1033,  1012,
         6611,  1006, 23375,  1060,  1024,  2358,  2099,  2692,  1031,  1005,
         2358,  2099,  2692,  1005,  1033,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
        13075,  2692,  1031], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  1060,  2015,  1006,  1005,  2358,  2099,
         2487,  1005,  1010,  2504,  1027,  1005,  2358,  2099,  2692,  1005,
         1010,  4530,  1035,  2504,  1027,  6270,  1007,   102],
       device='cuda:0')
got:
tensor([ 1031, 19616,  1006,  8875,  1007,  2005,  8875,  1999, 19616,  1006,
         1048,  1010,  3145,  1027, 23375,  1056,  1024,  1056,  1031,  1014,
         1033,  1007,  1033,   102,  1055,   102,   102,   102,   102,   102,
         1055,   102,   102,   102,  1033,   102,   102,   102,   102,   102,
          102,   102,  1031,  1015,  1033,   102,  1055,   102,   102,  1055,
          102,   102,   102], device='cuda:0')
source:
tensor([  101, 29248,  1012,  4066,  1006,  3145,  1027, 23375,  5216,  1024,
         1006,  5216,  1031,  1016,  1033,  1010,  5216,  1031,  1015,  1033,
         1010,  5216,  1031,  1014,  1033,  1007,  1007,   102],
       device='cuda:0')
got:
tensor([27937,  1012,  5717,  2015,  1006,  1006, 13075,  2692,  1011,  1015,
         1010,  8123,  1027,  1016,  1007,  1007,  1012, 23289,  2140,  1006,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102, 13075,  2692,  1031,
         1024,  1010,  1024,  1011,  1015,  1033,   102,   102,   102,   102,
          102,   102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1031,  1024,  1011,  1015,  1033,  1009,  1006,
        13075,  2692,  1031,  1015,  1024,  1033,  1011, 13075,  2692,  1031,
         1024,  1011,  1015,  1033,  1007,  1013,  1016,   102],
       device='cuda:0')
got:
tensor([ 1040,  2546,  1012,  4066,  1006,  1005,  1051, 10841, 14343,  5897,
         1997,  1063,  1065,  1005,  1012,  4289,  1006,  1040,  2546,  1012,
         7753,  1007,  1010,  8123,  1027,  1015,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,  1055,  1012,
         4066,  1006,  1005,  1037,  1005,  1007,   102,   102,   102,   102,
          102,   102,   102], device='cuda:0')
source:
tensor([  101,  1040,  2546,  1012,  2177,  3762,  1006,  1005,  4013,  3215,
         1005,  1007,  1012,  7680,  1006,  1007,  1012,  4066,  1006,  1005,
         7644,  1005,  1010, 22316,  1027,  6270,  1007,   102],
       device='cuda:0')
got:
tensor([ 2128,  1012,  2424,  8095,  1006,  1005,  1031,  1032,  1032,  1059,
         1033,  1009,  1005,  1010,  1005,  2358,  2099,  2692,  1005,  1007,
          102,  1005,  1010, 13075,  2692,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102], device='cuda:0')
source:
tensor([ 101, 2128, 1012, 2424, 8095, 1006, 1005, 3231, 1006, 1031, 1032, 1032,
        1040, 1012, 1033, 1008, 1032, 1032, 1040, 1009, 1007, 1005, 1010, 2358,
        2099, 2692, 1007,  102], device='cuda:0')
got:
tensor([ 1063,  3145,  1024, 11748,  2005,  3145,  1010, 11748,  1999,  2862,
         1006, 13075,  2692,  1012,  5167,  1006,  1007,  1007,  2065,  1058,
          999,  1027,  1005,  1061,  2509,  1005,  1065,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  1065,   102,   102,   102,   102,   102,
         1065,   102,   102], device='cuda:0')
source:
tensor([  101, 24501,  1027,  4487,  6593,  1006,  1006,  1047,  1010,  1058,
         1007,  2005,  1047,  1010,  1058,  1999, 13075,  2692,  1012,  5167,
         1006,  1007,  2065,  1058,  2003,  2025,  3904,  1007,   102],
       device='cuda:0')
got:
tensor([13075,  2692,  1012, 10651,  1006,  1063,  1005,  2358,  2099,  2692,
         1005,  1024,  1005,  2358,  2099,  2487,  1005,  1065,  1007,   102,
          102,   102,   102,   102, 13075,  2692,  1033,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  1035,  8909,  1027,  3263,   102,   102,   102,   102,
          102,   102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  5587,  1035,  6685,  1006,  1005,  2358,
         2099,  2692,  1005,  1010,  2895,  1027,  1005,  2544,  1005,  1010,
         2544,  1027,  1005,  2358,  2099,  2487,  1005,  1007,   102],
       device='cuda:0')
got:
tensor([ 4487,  6593,  1006,  1006,  1047,  1010,  1058,  1007,  2005,  1047,
         1010,  1058,  1999, 13075,  2692,  1012,  5167,  1006,  1007,  2065,
         1058,  1028,  1015,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102, 13075,  2692,  1031,
         1015,  1033,  1007,   102,   102,   102,   102,   102,  1005,  2358,
         2099,  2692,  1005], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012, 10651,  1006,  1006,  1060,  1010,  1061,
         1008,  1016,  1007,  2005,  1060,  1010,  1061,  1999,  2862,  1006,
        13075,  2692,  1012,  5167,  1006,  1007,  1007,  1007,   102],
       device='cuda:0')
got:
tensor([ 6140,  1006,  1006,  3058,  7292,  1012,  3058,  1012,  2651,  1006,
         1007,  1009,  3058,  7292,  1012, 22313, 20042,  2050,  1006,  1020,
         1008, 19342,  1013,  2260,  1007,  1007,  1012, 11163, 14192,  4017,
         1006,  1007,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102], device='cuda:0')
source:
tensor([  101,  1006,  3058,  7292,  1012,  3058,  7292,  1012,  2085,  1006,
         1007,  1011,  3058,  7292,  1012, 22313, 20042,  2050,  1006,  2420,
         1027,  1021,  1007,  1007,  1012,  3058,  1006,  1007,   102],
       device='cuda:0')
got:
tensor([ 4487,  6593,  1006,  1006,  1047,  1010,  1058,  1007,  2005,  1047,
         1010,  1058,  1999, 13075,  2692,  1012,  5167,  1006,  1007,  2065,
         1058,  1007,   102,   102,   102,  1040,  1031,  1047,  1033,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  1008,  1016,  1007,   102,   102,   102,   102,   102,
          102,   102,   102], device='cuda:0')
source:
tensor([  101,  4487,  6593,  1006,  1006,  1047,  1010,  1031,  1040,  1031,
         1047,  1033,  2005,  1040,  1999, 13075,  2692,  1033,  1007,  2005,
         1047,  1999, 13075,  2692,  1031,  1014,  1033,  1007,   102],
       device='cuda:0')
got:
tensor([ 1031,  8875,  2005,  8875,  1999, 13075,  2692,  2065,  8875,  1031,
         1014,  1033,  1027,  1027,  1005,  2358,  2099,  2692,  1005,  1033,
          102,  2846,  1006,  1015,  1007,  1033,   102,   102,   102,   102,
          102,   102,   102,   102,  1033,   102,   102,   102,   102,   102,
          102,   102, 13075,  2692,  1031,  1014,  1033,   102,   102,   102,
          102,   102,   102], device='cuda:0')
source:
tensor([  101,  1031,  5950,  2005,  5950,  1010,  8875,  1999,  4372, 17897,
        11657,  1006, 13075,  2692,  1007,  2065,  8875,  1031,  1014,  1033,
         1027,  1027,  1005,  2358,  2099,  2692,  1005,  1033,   102],
       device='cuda:0')
got:
tensor([ 6140,  1006,  1005,  2358,  2099,  2692,  1005,  1012,  5672,  1006,
         1005,  1010,  1005,  1010,  1005,  1005,  1007,  1007,   102,   102,
          102,   102,   102, 13075,  2692,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,  1005,  1010,  1005,  1032,  1050,
         1005,  1007,   102], device='cuda:0')
source:
tensor([  101,  1005,  2034,  5164,  2003,  1024,  1003,  1055,  1010,  2117,
         2028,  2003,  1024,  1003,  1055,  1005,  1003,  1006, 13075,  2692,
         1010,  1005, 20248,  1012, 14841,  2546,  1005,  1007,   102],
       device='cuda:0')
got:
tensor([13075,  2487,  1012, 13590,  1006, 13075,  2692,  1010, 13075,  2475,
         1010,  2129,  1027,  1005,  5110,  1005,  1010,  7753,  1027,  1031,
         1005, 13075,  2509,  1005,  1033,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102, 13075,  2487,  1012,
         2000,  1035,  4487,  6593,  1006,  1007,   102,   102,   102, 13075,
         2509,  1033,   102], device='cuda:0')
source:
tensor([  101, 22851,  1012,  2951, 15643,  1006,  1063,  1005, 13075,  2475,
         1005,  1024, 13075,  2692,  1012,  5950,  1010,  1005, 13075,  2509,
         1005,  1024, 13075,  2692,  1012,  5300,  1065,  1007,   102],
       device='cuda:0')
got:
tensor([25353,  2015,  1012,  2275,  3207,  7011, 11314,  2368,  3597,  4667,
         1006,  1005,  2358,  2099,  2692,  1005,  1007,   102,   102,   102,
          102, 13075,  2692,  1007,   102,   102, 23422,  1012,  3443,  1006,
         1005,  2358,  2099,  2692,  1005,  1007,   102,   102,   102,   102,
          102,   102,  1013,  1016,  1005,   102,   102,   102,   102,   102,
          102,   102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1027,  4275,  1012, 25869,  3790,  1006,  4098,
         1035,  3091,  1027,  1021,  1010, 12398,  1027,  1005,  2358,  2099,
         2692,  1005,  1010, 10086,  3085,  1027,  6270,  1007,   102],
       device='cuda:0')
got:
tensor([2128, 1012, 2424, 8095, 1006, 1005, 1032, 1032, 1006, 1031, 1034, 1002,
        1033, 1008, 1032, 1032, 1007, 1005, 1010, 1005, 2358, 2099, 2692, 1005,
        1007,  102,  102,  102,  102,  102,  102,  102,  102,  102, 2213, 1012,
        2177, 1006, 1015, 1007,  102, 1005, 1007,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102], device='cuda:0')
source:
tensor([ 101, 2128, 1012, 2424, 8095, 1006, 1005, 1032, 1032, 1006, 1012, 1009,
        1029, 1032, 1032, 1007, 1064, 1032, 1032, 1059, 1005, 1010, 1005, 2358,
        2099, 2692, 1005, 1007,  102], device='cuda:0')
got:
tensor([2128, 1012, 2424, 8095, 1006, 1005, 1034, 1006, 1012, 1008, 1029, 4937,
        1012, 1008, 1029, 1007, 1005, 1010, 1005, 2358, 2099, 2487, 1005, 1007,
         102,  102,  102,  102,  102,  102, 2358, 2099, 2692, 1005, 1007,  102,
         102,  102,  102,  102,  102,  102, 1011, 1015, 1007,  102,  102,  102,
         102,  102,  102,  102,  102], device='cuda:0')
source:
tensor([ 101, 2128, 1012, 2424, 8095, 1006, 1005, 1032, 1032, 1006, 1012, 1008,
        1029, 1032, 1032, 1007, 1064, 1032, 1032, 1059, 1005, 1010, 1005, 2358,
        2099, 2487, 1005, 1007,  102], device='cuda:0')
got:
tensor([1045, 1027, 1031, 2358, 2099, 2692, 1033,  102, 5950, 1006, 1005, 2358,
        2099, 2692, 1005, 1007,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102, 2358, 2099, 2692, 1007,  102,  102,  102,
         102,  102,  102,  102,  102,  102, 1045, 1027, 1014,  102,  102,  102,
         102,  102,  102,  102,  102], device='cuda:0')
source:
tensor([  101,  1031,  1060,  2005,  1060,  1999,  2846,  1006, 18798,  1006,
        13075,  2692,  1007,  1007,  2065, 13075,  2692,  1031,  1060,  1033,
         1027,  1027,  1005,  2358,  2099,  2692,  1005,  1033,   102],
       device='cuda:0')
got:
tensor([24471,  6894,  2497,  1012, 11968,  3366,  1012,  4895, 28940, 12184,
         1006, 13075,  2487,  1010, 13075,  2475,  1027,  1005, 13075,  2692,
         1005,  1007,   102,   102, 13075,  2509,   102,   102,  1035,  2013,
         1035,  5164,  1006,  1005, 13075,  2487,  1005,  1007,   102,   102,
          102,   102,  1035,  3793,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  1054,  1027, 11186,  1012,  2695,  1006, 13075,  2487,  1010,
        13075,  2692,  1027, 13075,  2692,  1010, 13075,  2475,  1027, 13075,
         2475,  1010, 13075,  2509,  1027, 13075,  2509,  1007,   102],
       device='cuda:0')
got:
tensor([16371,  8737,  2100,  1012,  9530, 16280, 12556,  1006, 13075,  2692,
         1010, 13075,  2487,  1007,   102,  1024,  1010,  8123,  1027,  1014,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102, 16371,  8737,
         2100,  1012,  9530, 16280, 12556,  1006, 13075,  2692,  1010, 13075,
         2487,  1007,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  1039,  1027, 27937,  1012,  1054,  1035,  1031, 13075,  2692,
         1031,  1006,  3904,  1007,  1010,  1024,  1033,  1010, 13075,  2487,
         1031,  1006,  3904,  1007,  1010,  1024,  1033,  1033,   102],
       device='cuda:0')
got:
tensor([ 1061,  1027,  4949,  1006,  6872,  1012,  8875, 18150,  3334,  1006,
         1014,  1007,  1010, 13075,  2692,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,  1033,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  1031,  1061,  2005,  1060,  1999, 13075,  2692,  2005,  1061,
         1999,  1006,  1060,  2065,  2003,  7076, 26897,  1006,  1060,  1010,
         2862,  1007,  2842,  1031,  1060,  1033,  1007,  1033,   102],
       device='cuda:0')
got:
tensor([ 2128,  1012,  2424,  8095,  1006,  1005,  1006,  1029,  1026,  1027,
         1031,  1032,  1032,  1059,  1032,  1032,  1040,  1012,  1033,  1009,
         1007,  1005,  1010, 13075,  2692,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
         1005,   102,   102,   102,  1005,  1010,  1005,  1005,  1007,   102,
          102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  2128,  1012,  2424,  8095,  1006,  1005,  3231,  1006,  1031,
         1014,  1011,  1023,  1012,  1033,  1008,  1031,  1014,  1011,  1023,
         1033,  1009,  1007,  1005,  1010, 13075,  2692,  1007,   102],
       device='cuda:0')
got:
tensor([9808, 1012, 2291, 1006, 1005, 5896, 2475, 1012, 1052, 2100, 2487, 1005,
        1007,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102, 1005,
        1010, 1005, 2358, 2099, 2692, 1005, 1007,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102], device='cuda:0')
source:
tensor([  101,  4942, 21572,  9623,  2015,  1012,  2655,  1006,  1031,  1005,
        18750,  1012,  4654,  2063,  1005,  1010,  1005,  2358,  2099,  2692,
         1005,  1010,  1005,  2358,  2099,  2487,  1005,  1033,  1007,   102],
       device='cuda:0')
got:
tensor([ 7680,  1006, 13075,  2692,  1007,   102,   102,  1012,  2000,  9863,
         1006,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102, 13075,  2692,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102, 13075,  2692,  1033,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  1031,  7680,  1006,  5216,  1031,  1045,  1033,  2005,  5216,
         1999, 13075,  2692,  1007,  2005,  1045,  1999,  2846,  1006, 18798,
         1006, 13075,  2692,  1031,  1014,  1033,  1007,  1007,  1033,   102],
       device='cuda:0')
got:
tensor([29296,  4221,  2509,  1012, 19274,  1006,  1014,  1010,  1005,  2358,
         2099,  2692,  1005,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,  2509,  1012, 19274,
         1006,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 16962,  1012, 15389,  1006,  1000, 19274,  2046,  2556,  5300,
         1006,  1005,  3231,  2475,  1005,  1010,  1029,  1010,  2184,  1007,
         1000,  1010,  1006,  2358,  2099,  2692,  1010,  1007,  1007,   102],
       device='cuda:0')
got:
tensor([ 3058,  7292,  1012,  3058,  7292,  1012,  2358, 14536,  7292,  1006,
         1005,  2358,  2099,  2692,  1005,  1010,  1005,  1003,  1037,  1010,
         1003,  1040,  1013,  1003,  1038,  1003,  1061,  1005,  1007,  1012,
         2358, 12881,  7292,  1006,  1005,  1003,  1042,  1005,  1007,   102,
         1024,  1003,  1049,  1005,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  3058,  7292,  1012,  3058,  7292,  1012,  2085,  1006,  1007,
         1012,  2358, 12881,  7292,  1006,  1005,  1003,  1044,  1024,  1003,
         1049,  1024,  1003,  1055,  1012,  1003,  1042,  1005,  1007,   102],
       device='cuda:0')
got:
tensor([ 1000,  1000,  1000,  1000,  1000,  1000,  1012,  3693,  1006,  1039,
         2005,  1039,  1999, 13075,  2692,  2065,  1039,  1012,  2003,  4305,
        23806,  1006,  1007,  1007,   102,   102,   102,   102, 13075,  2692,
         1005,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
         1005,   102,   102,   102,  1005,   102,  1005,   102,   102,  1005,
         1007,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  1000,  1000,  1000,  1000,  1000,  1000,  1012,  3693,  1006,
         1031,  1060,  2005,  1060,  1999,  1005, 13075,  2692,  1005,  2065,
         1060,  1012,  2003,  4305, 23806,  1006,  1007,  1033,  1007,   102],
       device='cuda:0')
got:
tensor([ 9808,  1012,  4130,  1012,  3975,  1006,  9808,  1012,  4130,  1012,
        14689, 15069,  1006,  2358,  2099,  2692,  1007,  1007,   102,   102,
          102,   102,   102,  5371, 18442,  1012,  3975,  1006,  1005,  2358,
         2099,  2692,  1005,  1007,   102,   102,   102,  5371, 18442,  1007,
          102,   102,  3338,   102,   102,   102,   102,   102,   102,   102,
         5371, 18442,   102,  5371, 18442,   102], device='cuda:0')
source:
tensor([  101,  6140,  1006,  9808,  1012,  4130,  1012,  3975, 10288,  2102,
         1006,  9808,  1012,  4130,  1012,  2918, 18442,  1006,  1005,  2358,
         2099,  2692,  1005,  1007,  1007,  1031,  1014,  1033,  1007,   102],
       device='cuda:0')
got:
tensor([ 4487,  6593,  1006,  1006,  1047,  1010,  1058,  1007,  2005,  1047,
         1010,  1058,  1999, 14101,  1006, 13075,  2692,  1010, 13075,  2692,
         1031,  1015,  1024,  1033,  1007,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102, 13075,  2692,  1031,  1016,  1024,  1033,  1007,   102,
          102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  4487,  6593,  1006, 13075,  2692,  1031,  1045,  1024,  1045,
         1009,  1016,  1033,  2005,  1045,  1999,  2846,  1006,  1014,  1010,
        18798,  1006, 13075,  2692,  1007,  1010,  1016,  1007,  1007,   102],
       device='cuda:0')
got:
tensor([ 1000,  1000,  1000,  1000,  1000,  1000,  1012,  3693,  1006, 24471,
         6894,  2497,  1012, 11968,  3366,  1012,  3975,  1006,  1007,  1007,
          102,   102, 13075,  2692,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,  1055,  1012,  3524,  1006,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  6140,  1006,  2128,  1012,  2424,  8095,  1006,  1005,  1006,
        16770,  1029,  1024,  1013,  1013,  1031,  1034,  1032,  1032,  1055,
         1033,  1009,  1007,  1005,  1010, 13075,  2692,  1007,  1007,   102],
       device='cuda:0')
got:
tensor([ 1031,  1006,  1005,  2358,  2099,  2692,  1005,  1007,  2005,  1055,
         1999, 13075,  2692,  1033,   102,  2128,  1012,  2424,  8095,  1006,
         1005,  1032,  1032,  1006,  1005,  2358,  2099,  2692,  1005,  1010,
        13075,  2692,  1007,  1033,   102,   102,   102,   102,   102,   102,
         1005,  1007,  1033,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  1000,  1000,  1000,  1000,  1000,  1000,  1012,  3693,  1006,
         1031,  1006,  1005,  1003,  1040,  1030,  1003,  1040,  1005,  1003,
         1056,  1007,  2005,  1056,  1999, 13075,  2692,  1033,  1007,   102],
       device='cuda:0')
got:
tensor([ 6140,  1006, 13075,  2692,  1012,  2597,  1006,  1015,  1007,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102, 13075,  2692,  1031,  1015,  1033,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  8991,  1027,  1006,  1045,  2005,  1045,  1010,  1060,  1999,
         4372, 17897, 11657,  1006, 13075,  2692,  1007,  2065,  1060,  1027,
         1027,  1015,  1007,  2005,  1045,  1999,  8991,  1024,  3413,   102],
       device='cuda:0')
got:
tensor([ 2128,  1012,  4942,  1006,  1005,  1032,  1032,  1038,  1032,  1032,
         1040,  1009,  1032,  1032,  1038,  1005,  1010,  1005,  1005,  1010,
        13075,  2692,  1007,   102, 13075,  2692,  1031,  1024,  1024,  1011,
         1015,  1033,   102,   102,  1032,  1032,  1055,  1009,  1032,  1032,
         1016,   102,  2128,  1012,  4942,  1006,  1005,  1032,  1032,  1055,
         1009,  1005,  1010,  1005,  1005,  1010], device='cuda:0')
source:
tensor([  101,  6140,  1006, 13075,  2692,  1012,  4372, 16044,  1006,  1005,
        27260,  1011,  4019,  1005,  1007,  1012,  5672,  1006,  1005,  1000,
         1005,  1010,  1005,  1032,  1032,  1000,  1005,  1007,  1007,   102],
       device='cuda:0')
got:
tensor([ 2739, 16344,  1027, 19457, 16344,  1012,  5672,  1006,  1005,  1049,
         1005,  1010,  1005,  1005,  1007,   102,  3972, 12870,  1006,  1007,
          102,   102,   102,   102,  1055,   102,  4471,   102, 19457, 16344,
         1012,  5308,  1006,  1007,   102,  5164,  1012, 11562,  1006,  1007,
          102,   102,  1005,   102,  1005,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  1000,  1000,  1000,  1000,  1000,  1000,  1012,  3693,  1006,
         1031, 25869,  2005, 25869,  1999,  1005,  2009,  2003, 13580,  1005,
         2065, 25869,   999,  1027,  1005,  1045,  1005,  1033,  1007,   102],
       device='cuda:0')
got:
tensor([19616,  1006, 13075,  2692,  1010,  3145,  1027, 23375,  1060,  1024,
         1006,  1060,  1031,  1015,  1033,  1010,  1060,  1031,  1016,  1033,
         1007,  1010,  7901,  1027,  2995,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102, 13075,  2475,  1007,
          102,   102,   102,   102, 13075,  2692,  1012,  3975,  1006,  1005,
        13075,  2487,  1005,  1007,   102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  4066,  1006,  3145,  1027, 23375,  8875,
         1024,  1006,  8875,  1031,  1005, 13075,  2487,  1005,  1033,  1010,
         8875,  1031,  1005, 13075,  2475,  1005,  1033,  1007,  1007,   102],
       device='cuda:0')
got:
tensor([ 1000,  1000,  1000, 13075,  2692,  1000,  1000,  1000,  1012,  4289,
         1006,  1005,  2358,  2099,  2487,  1005,  1010,  1005,  2358,  2099,
         2475,  1005,  1007,   102,  1005,  2358,  2099,  2692,  1005,   102,
         1005,  1009,  1006,  1005,  2358,  2099,  2487,  1005,  1007,   102,
          102,   102,   102,   102,  1005,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  6140,  1006,  1005,  1003,  1008,  1055,  1024,  1003,  1008,
         1055,  1005,  1003,  1006,  2322,  1010,  1005, 13075,  2692,  1005,
         1010,  2322,  1010,  1005,  2358,  2099,  2487,  1005,  1007,  1007,
          102], device='cuda:0')
got:
tensor([27937,  1012, 16417, 17421,  1006,  1005, 10147,  1010,  1045,  3501,
         1011,  1028,  1046,  1005,  1010, 13075,  2692,  1010, 13075,  2487,
         1007,   102,   102, 13075,  2487,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
        13075,  2692,  1010, 13075,  2487,  1007], device='cuda:0')
source:
tensor([  101, 16596,  7685,  1012, 23435, 27364,  1006, 13075,  2692,  1010,
        13075,  2487,  1010, 19589,  1027,  1031,  1015,  1010,  1015,  1033,
         1007,  1012, 19948,  8528,  2229,  1006,  1014,  1010,  1015,  1007,
          102], device='cuda:0')
got:
tensor([13075,  2692,  1012,  6167,  1006,  1007,   102,  1031,  1024,  1010,
         1006,  3904,  1007,  1033,   102, 13075,  2692,  1012,  3975,  1006,
         1005,  1010,  1005,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,  1008,  1016,  1005,  1007,   102,
          102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1027, 27937,  1012, 17306, 11335,  2100,  1006,
        13075,  2692,  1007,  1012, 24501,  3270,  5051,  1006,  1015,  1010,
         1011,  1015,  1007,  1031,  1006,  1014,  1007,  1010,  1024,  1033,
          102], device='cuda:0')
got:
tensor([ 4949,  1006,  2862,  1010,  2275,  1006, 13075,  2692,  1007,  1007,
          102,  7680,  1006,  1015,  1007,   102,  9377,  1027,  1014,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102, 13075,  2692,  1031,  1015,  1033,   102,  1005,   102,
         1005,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  2862,  1006,  4949,  1006, 23375,  1060,  1010,  1061,  1024,
         1060,  1009,  1061,  1010, 13075,  2692,  1031,  1024,  1011,  1015,
         1033,  1010, 13075,  2692,  1031,  1015,  1024,  1033,  1007,  1007,
          102], device='cuda:0')
got:
tensor([ 3058,  7292,  1012,  3058,  7292,  1012,  2358, 14536,  7292,  1006,
         1005,  2358,  2099,  2692,  1005,  1010,  1005,  1003,  1038,  1003,
         1040,  1010,  1003,  1061,  1005,  1007,  1012,  3058,  1006,  1007,
          102,  1016,   102,   102,  2213,  1005,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 22851,  1012,  3058,  1035,  2846,  1006,  1005,  2358,  2099,
         2692,  1005,  1010, 10424,  2063,  4160,  1027,  1005, 24185,  2213,
         1011,  1016, 19699,  2072,  1005,  1010,  6993,  1027,  2410,  1007,
          102], device='cuda:0')
got:
tensor([ 1031,  3643,  2005,  8875,  1999, 13075,  2692,  2065,  1005,  2358,
         2099,  2692,  1005,  1999,  3145,  1012,  3975,  1006,  1005,  1010,
         1005,  1007,  1033,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,  1033,   102,   102,   102,
          102,   102,   102,   102,  1005,  1007,   102,   102,  1005,  1007,
          102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  1031,  3643,  2005,  3145,  1010,  3643,  1999,  2862,  1006,
        13075,  2692,  1012,  5167,  1006,  1007,  1007,  2065,  3145,  1012,
         4627, 24415,  1006,  1005,  2358,  2099,  2692,  1005,  1007,  1033,
          102], device='cuda:0')
got:
tensor([13075,  2692,  1012,  2177,  3762,  1006,  1005,  2358,  2099,  2692,
         1005,  1007,  1012, 12943,  2290,  1006, 23375,  1060,  1024,  1060,
         1012,  5672,  1006,  1005,  2358,  2099,  2692,  1005,  1010,  1005,
         1005,  1007,  1012, 13988, 17421,  1006,  1007,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102, 13075,  2692,  1012], device='cuda:0')
source:
tensor([  101,  4675,  1006,  1005,  1005,  1012,  3693,  1006, 13075,  2692,
         1031,  1005,  2358,  2099,  2692,  1005,  1033,  1007,  1012,  3975,
         1006,  1007,  1007,  1012,  2087,  1035,  2691,  1006,  2531,  1007,
          102], device='cuda:0')
got:
tensor([ 9808,  1012,  4130,  1012, 16101, 18442,  1006,  9808,  1012,  4130,
         1012, 14689, 15069,  1006,  1035,  1035,  5371,  1035,  1035,  1007,
         1007,   102,  1035,  1035,  1007,   102,  1035,  1035,  5371,  1035,
         1035,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  1035,  1035,   102,  1035,  1035,   102,   102,   102,
          102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  9808,  1012,  4130,  1012,  2918, 18442,  1006,  9808,  1012,
         4130,  1012, 16101, 18442,  1006,  9808,  1012,  4130,  1012,  2613,
        15069,  1006,  1035,  1035,  5371,  1035,  1035,  1007,  1007,  1007,
          102], device='cuda:0')
got:
tensor([ 7680,  1006,  4949,  1006, 20014,  1010,  1031,  2358,  2099,  2692,
         1033,  1007,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,  5244,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  7680,  1006, 20014,  1006, 14257,  1006,  8875,  1007,  1007,
         2005,  8875,  1999,  1031,  1035,  1042,  2005,  1035,  1042,  1999,
         1031,  2358,  2099,  2692,  1033,  2065,  1035,  1042,  1033,  1007,
          102], device='cuda:0')
got:
tensor([13075,  2692,  1012,  4339,  1006,  1005,  2358,  2099,  2692,  1005,
         1007,   102,   102,   102,   102,  3210,  1027,  1031,  1033,   102,
         1012, 13075,  2692,  1006,  1005,  2358,  2099,  2692,  1005,  1007,
          102,   102,   102,   102,   102,   102,   102,  6583, 10623,  2015,
         1005,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,  1005], device='cuda:0')
source:
tensor([  101,  1042,  1027,  2330,  1006,  1005, 13075,  2692,  1005,  1010,
         1005,  1059,  1005,  1007,  1042,  1012,  4339,  1006,  1005,  7632,
         2045,  1032,  1050,  1005,  1007,  1042,  1012,  2485,  1006,  1007,
          102], device='cuda:0')
got:
tensor([24471,  6894,  2497,  1012, 11968,  3366,  1012, 14686,  1035,  4606,
         1006, 13075,  2692,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
         1005,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  1008,  2047,  1035,  5164,  1027,  1005,  1005,  1007,
          102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  2128,  1012,  2424,  8095,  1006,  1005,  1000,  1006,  8299,
         1012,  1008,  1029,  1007,  1000,  1005,  1010, 13075,  2692,  1010,
         2128,  1012,  4800,  4179,  1064,  2128,  1012, 11089,  8095,  1007,
          102], device='cuda:0')
got:
tensor([24471,  6894,  2497,  1012, 11968,  3366,  1012, 14686,  1006, 13075,
         2487,  1010, 13075,  2692,  1007,   102,  2707,  1006,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
         1005,   102,   102,  1005,   102,  1005,   102,   102,   102,  1005,
          102,  1005,   102,  1005,   102,  1005], device='cuda:0')
source:
tensor([  101,  2128,  1012,  2424,  8095,  1006,  1005,  8299,  1024,  1013,
         1013,  1031,  1034,  1056,  1033,  1031,  1034,  1055,  1000,  1033,
         1009,  1032,  1032,  1012, 16129,  1005,  1010, 13075,  2487,  1007,
          102], device='cuda:0')
got:
tensor([ 3058,  7292,  1012,  3058,  7292,  1012, 11506,  1006, 13075,  2692,
         1010,  3058,  7292,  1012,  2051,  1012,  8117,  1007,   102,   102,
          102,   102,   102, 13075,  2692,  1012,  2358, 12881,  7292,  1006,
         1005,  1003,  1037,  1005,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  1003,  1049,  1013,  1003,  1040,  1013,
         1003,  1061,  1005,  1007,   102,   102], device='cuda:0')
source:
tensor([  101,  2059,  1027,  3058,  7292,  1012,  3058,  7292,  1012,  2358,
        14536,  7292,  1006, 13075,  2692,  1010,  1005,  1003,  1061,  1011,
         1003,  1049,  1011,  1003,  1040,  1005,  1007,  1012,  3058,  1006,
         1007,   102], device='cuda:0')
got:
tensor([14257,  1006, 20014,  1006,  1005,  2358,  2099,  2692,  1005,  1010,
         1014,  1007,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  1017,  1065,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102, 14257,  1006,  1005], device='cuda:0')
source:
tensor([  101,  2358,  6820,  6593,  1012,  4895, 23947,  1006,  1005,   999,
         1042,  1005,  1010,  1005,  2358,  2099,  2692,  1005,  1012, 21933,
         3207,  1006,  1005,  2002,  2595,  1005,  1007,  1007,  1031,  1014,
         1033,   102], device='cuda:0')
got:
tensor([ 2128,  1012,  2424,  8095,  1006,  1005,  1032,  1032,  1040,  1009,
         1005,  1010, 13075,  2692,  1007,   102,  1005,  2358,  2099,  2692,
         1005,  1007,   102,   102, 13075,  2692,  1012, 12667, 24901,  1006,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  1011,  1015,  1005,  1010, 13075,  2692,  1007,   102,
          102,   102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  1000,  1000,  1000,  2358,  2099,  2692,  1000,  1000,  1000,
         1012,  3693,  1006, 13075,  2692,  1012,  3975,  1006,  1005,  2358,
         2099,  2692,  1005,  1007,  1031,  1024,  1024,  1011,  1015,  1033,
         1007,   102], device='cuda:0')
got:
tensor([ 3058,  7292,  1012,  3058,  7292,  1012,  2358, 14536,  7292,  1006,
         1005,  2358,  2099,  2692,  1005,  1010,  1005,  2358,  2099,  2487,
         1005,  1007,  1012,  2051,  1006,  1007,   102,  2184,   102,  2410,
         1005,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,  1013,  1016,   102,   102,   102,  1005,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,  2358],
       device='cuda:0')
source:
tensor([  101,  2051,  1012,  2358, 12881,  7292,  1006,  1005,  2358,  2099,
         2487,  1005,  1010,  2051,  1012, 13938,  7292,  1006, 13138, 21084,
         2581, 11387, 22203, 17914,  2581,  1013,  6694,  1012,  1014,  1007,
         1007,   102], device='cuda:0')
got:
tensor([ 4062,  1012,  5587,  1035,  5896,  1006,  1005,  2358,  2099,  2692,
         1005,  1010,  1005,  1013,  2188,  1013,  4205,  1013, 18750,  2026,
        22483,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101, 16602,  1012, 15389,  1035,  5896,  1006,  1000,  6254,  1012,
         2131, 12260,  3672,  3762,  3593,  1006,  1005,  1060,  2100,  2480,
         1005,  1007,  1012,  3643,  1009,  1027,  1005,  1015,  1005,  1000,
         1007,   102], device='cuda:0')
got:
tensor([1000, 1000, 1000, 2358, 2099, 2692, 1000, 1000, 1000, 1012, 4289, 1006,
        1005, 2358, 2099, 2487, 1005, 1010, 1005, 2358, 2099, 2692, 1005, 1007,
         102,  102,  102,  102,  102,  102, 1006, 1007,  102,  102,  102,  102,
         102,  102,  102,  102, 1005,  102, 1005, 1065,  102,  102, 1005, 1007,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102],
       device='cuda:0')
source:
tensor([  101,  1000,  1000,  1000,  1006,  1063,  1024,  1040,  1065,  3289,
         1010,  1002,  1063,  1024,  1040,  1065,  1007,  1000,  1000,  1000,
         1012,  4289,  1006,  2969,  1012,  3289,  1010,  2969,  1012, 12408,
         1007,   102], device='cuda:0')
got:
tensor([ 1031,  4949,  1006, 20014,  1010,  4942,  9863,  1007,  2005,  4942,
         9863,  1999, 13075,  2692,  1033,   102,  1033,   102,   102,   102,
          102,   102,   102,   102,  1033,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  1033,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  1033,   102,   102,   102,   102,   102,
         1033,   102,   102,   102,   102,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101, 13075,  2692,  1027,  1031, 20014,  1006,  1005,  1005,  1012,
         3693,  1006,  1031,  2358,  2099,  1006,  1061,  1007,  2005,  1061,
         1999,  1060,  1033,  1007,  1007,  2005,  1060,  1999, 13075,  2692,
         1033,   102], device='cuda:0')
got:
tensor([ 6140,  1006, 13075,  2487,  1012,  8292,  5339,  1035,  3058,  7292,
         1006, 13075,  2692,  1010,  3058,  7292,  1012, 22313, 20042,  2050,
         1006,  2847,  1027,  2531,  1007,  1007,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  5200,  1012, 10651,  1006, 13075,  2487,
         1027,  1042,  1006,  1005, 13075,  2487,  1005,  1007,  1009, 22313,
        20042,  2050,  1006,  2420,  1027, 19342, 18827,  1012,  2423,  1007,
         1007,   102], device='cuda:0')
got:
tensor([ 9808,  1012,  4130,  1012,  7818, 20330,  1006,  1005,  1066,  1032,
         1050,  1005,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  5371, 18442,  1027,  9808,  1012,  4130,
         1012,  7818, 20330,  1006,  1005,  1003,  1055,  1005,  1007,   102,
          102,   102,  5371, 18442,  1027,  1052,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101,  9808,  1012, 28093,  2615, 10343,  1006,  1005,  1013,  1005,
         1007,  1012,  1042,  1035,  6764,  1011,  9808,  1012, 28093,  2615,
        10343,  1006,  1005,  1013,  1005,  1007,  1012,  1042,  1035, 21461,
         9910,   102], device='cuda:0')
got:
tensor([ 1000,  1000,  1000,  2358,  2099,  2692,  1000,  1000,  1000,  1012,
         4372, 16044,  1006,  1005,  3763,  1011,  1015,  1005,  1007,   102,
         1005,  2358,  2099,  2692,  1005,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,  1012,  4372, 16044,  1006,
         1005, 21183,  2546,  1011,  1022,  1005,  1007,   102,  1005,  2358,
         2099,  2692,  1005,  1007,   102,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101,  1000,  1000,  1000,  2358,  2099,  2692,  1000,  1000,  1000,
         1012,  4372, 16044,  1006,  1005,  3763,  1011,  1015,  1005,  1007,
         1012, 21933,  3207,  1006,  1005, 21183,  2546,  1011,  1022,  1005,
         1007,   102], device='cuda:0')
got:
tensor([ 2128,  1012,  2424,  8095,  1006,  1005,  1006,  1029,  1027,  1006,
         1032,  1032,  1059,  1032,  1032,  1059,  1007,  1007,  1005,  1010,
         1005, 13075,  2692,  1005,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,  5164,  1012,
         2002,  2595,  4305,  8449,  2102,  1005,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,  1005,   102,  1005],
       device='cuda:0')
source:
tensor([  101,  6140,  1006,  2128,  1012,  2424,  8095,  1006,  1000,  1005,
         1032,  1032,  1032,  1032,  1031,  1014,  1011,  1021,  1033,  1063,
         1015,  1010,  1017,  1065,  1005,  1000,  1010, 13075,  2692,  1007,
         1007,   102], device='cuda:0')
got:
tensor([22851,  1012,  9530, 11266,  1006,  1031,  1040,  2546,  1031,  1005,
        13075,  1005,  1033,  1010,  8123,  1027,  1015,  1007,  1010,  8123,
         1027,  1015,  1007,  1033,   102, 22851,  1012,  2186,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,  1012],
       device='cuda:0')
source:
tensor([  101, 22851,  1012,  9530, 11266,  1006,  1031,  1040,  2546,  1031,
         1014,  1033,  1012,  6611,  1006, 22851,  1012,  2186,  1007,  1010,
         1040,  2546,  1031,  1015,  1033,  1033,  1010,  8123,  1027,  1015,
         1007,   102], device='cuda:0')
got:
tensor([13075,  2487,  1031,  1005, 13075,  2692,  1005,  1033,  1027, 13075,
         2487,  1031,  1005, 13075,  2475,  1005,  1033,   102,   102,   102,
        13075,  2487,  1031,  1005, 13075,  2475,  1005,  1033,   102,   102,
          102,   102,   102,   102,   102,   102,   102, 13075,  2487,   102,
          102,   102,   102,   102,  1033,   102, 13075,  2692,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101, 13075,  2487,  1031,  1005, 13075,  2692,  1005,  1033,  1027,
        13075,  2487,  1031,  1005, 13075,  2475,  1005,  1033,  1012,  6611,
         1006, 23375,  1060,  1024,  1060,  1012, 13075,  2692,  1006,  1007,
         1007,   102], device='cuda:0')
got:
tensor([2128, 1012, 4942, 1006, 1005, 1006, 1012, 1008, 1007, 1005, 1010, 1005,
        2358, 2099, 2487, 1005, 1010, 1005, 2358, 2099, 2692, 1005, 1007,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102, 1005,
        1007,  102,  102,  102,  102,  102,  102,  102, 1005, 1010, 1005, 2358,
        2099, 2487, 1005, 1007,  102,  102,  102,  102,  102,  102,  102],
       device='cuda:0')
source:
tensor([  101,  1000,  1000,  1000,  1000,  1000,  1000,  1012,  3693,  1006,
         1031, 25869,  2005, 25869,  1999,  1005,  2358,  2099,  2487,  1005,
         2065, 25869,   999,  1027,  1005,  2358,  2099,  2692,  1005,  1033,
         1007,   102], device='cuda:0')
got:
tensor([ 3463,  1009,  1027,  1031,  2169,  2005,  2169,  1999,  9808,  1012,
         2862,  4305,  2099,  1006,  1005,  2358,  2099,  2692,  1005,  1007,
         2065,  2169,  1012,  4515, 24415,  1006,  1005,  2358,  2099,  2487,
         1005,  1007,  1033,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  1031,  1024,  1011,  1015,  1033,   102,
          102,   102,   102,   102,   102,   102,   102,   102,  1005],
       device='cuda:0')
source:
tensor([  101,  2005,  5371,  1999,  9808,  1012,  2862,  4305,  2099,  1006,
         1005,  2358,  2099,  2692,  1005,  1007,  1024,  2065,  5371,  1012,
         4515, 24415,  1006,  1005,  2358,  2099,  2487,  1005,  1007,  1024,
         3413,   102], device='cuda:0')
got:
tensor([2007, 2330, 1006, 1005, 2358, 2099, 2487, 1005, 1010, 1005, 1054, 1005,
        1007, 2004, 1042, 1024, 3413,  102,  102,  102, 1005, 2358, 2099, 2692,
        1005, 1007,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102, 1055, 1012, 4339, 1006, 1005, 2358, 2099, 2487, 1005, 1007,  102,
         102,  102,  102,  102,  102, 2358, 2099, 2692, 1005, 1007,  102],
       device='cuda:0')
source:
tensor([ 101, 2007, 2330, 1006, 1005, 2358, 2099, 2487, 1005, 1010, 1005, 1037,
        1005, 1007, 2004, 1996, 1035, 5371, 1024, 1996, 1035, 5371, 1012, 4339,
        1006, 1005, 7592, 1032, 1050, 1005, 1007,  102], device='cuda:0')
got:
tensor([ 2005, 16101, 18442,  1010, 16101, 18442,  2015,  1010,  5371, 18442,
         2015,  1999,  9808,  1012,  3328,  1006,  1005,  2358,  2099,  2692,
         1005,  1007,  1024,  2005,  4942,  4305, 12789,  4168,  1999, 16101,
        18442,  2015,  1024,  6140,  1006,  9808,  1012,  4130,  1012,  3693,
         1006, 16101, 18442,  1010,  4942,  4305, 12789,  4168,  1007,  1007,
         2005,  5371, 18442,  1999,  5371, 18442,  2015,  1024,  3413],
       device='cuda:0')
source:
tensor([ 101, 2005, 1042, 2078, 1999, 9808, 1012, 2862, 4305, 2099, 1006, 1005,
        2358, 2099, 2692, 1005, 1007, 1024, 2065, 9808, 1012, 4130, 1012, 2003,
        8873, 2571, 1006, 1042, 2078, 1007, 1024, 3413,  102], device='cuda:0')
got:
tensor([ 1031,  1049,  1012,  3975,  1006,  1007,  2005,  1049,  1999,  2128,
         1012,  2424,  8095,  1006,  1005,  1032,  1032,  1031,  1006,  1031,
         1034,  1032,  1032,  1033,  1033,  1009,  1007,  1032,  1032,  1016,
         1009,  1005,  1010, 13075,  2692,  1007,  1033,   102,   102,   102,
          102,   102,   102,   102,  1005,  1010, 13075,  2692,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101,  1031,  1049,  1012,  2177,  1006,  1014,  1007,  2005,  1049,
         1999,  2128,  1012,  2424, 21646,  1006,  1005,  1006,  1032,  1032,
         1040,  1007,  1032,  1032,  1015,  1008,  1005,  1010, 13075,  2692,
         1007,  1033,   102], device='cuda:0')
got:
tensor([ 6140,  1006, 13075,  2692,  1012, 26726,  8988,  1006,  1005,  1012,
         1013,  1013,  1037,  1031,  1030,  8909,  1027,  1000,  3793,  1037,
         1000,  1033,  1005,  1007,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,  1010, 13075,  2692,  1012,
         2131,  1006,  1005,  2358,  2099,  2487,  1005,  1007,   102],
       device='cuda:0')
source:
tensor([  101,  6140,  1006, 13075,  2692,  1012,  2424,  1006,  3793,  1027,
         1005,  2358,  2099,  2692,  1005,  1007,  1012,  2424,  2638, 18413,
         1006,  1005, 13075,  2487,  1005,  1007,  1012,  8417,  1031,  1014,
         1033,  1007,   102], device='cuda:0')
got:
tensor([ 2128,  1012,  4942,  1006,  1005,  1032,  1032,  1031,  1006,  1012,
         1008,  1029,  1007,  1032,  1032,  1033,  1005,  1010,  1005,  1005,
         1010, 13075,  2692,  1007,   102,   102,   102,   102,   102,   102,
          102,  1032,  1032,  1012,  1032,  1032,  1055,  1008,  1032,  1032,
         1016,  1005,  1010, 13075,  2692,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101,  2128,  1012,  2424,  8095,  1006,  1005,  1006,  1012,  1008,
         1029,  1007,  1006,  1029,  1024,  1032,  1032,  1031,  1012,  1008,
         1029,  1032,  1032,  1033,  1064,  1002,  1007,  1005,  1010, 13075,
         2692,  1007,   102], device='cuda:0')
got:
tensor([ 9808,  1012,  2291,  1006,  1005,  2358,  2099,  2692,  1005,  1007,
          102,   102,   102,  2330,  1006, 13075,  2692,  1007,   102,   102,
          102,   102,   102,   102,  2358,  2099,  2487,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  1052,  2100,   102,  1052,  1012,  2358,  2099,  2692,
         1007,   102,   102,   102,   102,   102,   102,   102,  2358],
       device='cuda:0')
source:
tensor([  101,  9808,  1012,  2291,  1006,  1005, 25781,  1011,  5536,  1011,
         1041,  1032,  1005, 24234,  1011,  1039,  1000, 19219,  2080, 26794,
         1011,  2131, 10651,  1025,  4654,  8586, 24234,  1000,  1032,  1005,
         1005,  1007,   102], device='cuda:0')
got:
tensor([ 2007,  2330,  1006,  1005, 13075,  2692,  1005,  1010,  1005, 13075,
         2487,  1005,  1007,  2004,  1042,  1024, 13075,  2475,  1012,  4339,
         1006,  1005,  1032,  1050,  1005,  1012,  3693,  1006, 13075,  2509,
         1007,  1007,   102,   102,   102,   102,   102, 13075,  2475,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102, 13075,  2487,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101, 13075,  2509,  1012,  4339,  1006,  1005,  1003,  1054,  1032,
         1050,  1003,  1054,  1032,  1050,  1003,  1054,  1032,  1050,  1005,
         1003,  1006, 13075,  2692,  1010, 13075,  2487,  1010, 13075,  2475,
         1007,  1007,   102], device='cuda:0')
got:
tensor([13075,  2692,  1012,  6611,  1006, 23375,  1060,  1024,  1060,  1012,
         6039,  2532,  1006,  1060,  1012,  7753,  1007,  1010,  8123,  1027,
         1014,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102, 13075,  2692,  1012,  6611,  1006, 22851,  1012,  2186,
         1007,   102,   102,   102,   102,   102, 13075,  2692,  1012],
       device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  2275,  1035,  5950,  1006,  2862,  1006,
         1005,  4647,  1005,  1007,  1007,  1012,  4530,  1006, 10722, 21112,
         1010, 10697,  1027,  1005,  8568,  1005,  1007,  1012, 25141,  1035,
         5950,  1006,  1007,   102], device='cuda:0')
got:
tensor([ 6140,  1006, 11350,  1012,  2131,  1035,  2350, 26348, 20470,  9050,
         1006, 13075,  2692,  1007,  1012,  4180,  1035,  2828,  1006,  1005,
        13075,  2487,  1005,  1007,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  1035,  3793,   102,   102,   102,   102,   102,   102,
          102,   102,   102,  1005,   102,  1005,   102,  1005,   102],
       device='cuda:0')
source:
tensor([  101,  2969,  1012,  4062,  1012,  2424,  1035,  5783,  1035,  2011,
         1035, 20116,  2015,  1035, 27000,  1006,  1005,  1012,  2070, 26266,
         1037,  1005,  1007,  1012,  2131,  1035, 17961,  1006,  1005, 13075,
         2692,  1005,  1007,   102], device='cuda:0')
got:
tensor([ 1055,  1012, 21792, 22254,  1006,  1005,  1032,  1032,  1055,  1005,
         1010,  1005,  2358,  2099,  2487,  1005,  1007,   102,   102,   102,
          102,  1055,  1012,  3975,  1006,  1005,  1032,  1050,  1005,  1007,
          102,  1014,   102,   102,  1055,  1012,  3975,  1006,  1005,  1012,
         1005,  1007,   102,   102,  1005,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,  1055,  1012,  3975,  1006],
       device='cuda:0')
source:
tensor([ 101, 1031, 1060, 1012, 6167, 1006, 1007, 2005, 1060, 1999, 1005, 1016,
        1012, 3503, 1002, 1002, 3793, 1002, 1002, 5164, 1005, 1012, 3975, 1006,
        1005, 1002, 1002, 3793, 1002, 1002, 1005, 1007, 1033,  102],
       device='cuda:0')
got:
tensor([ 9808,  1012,  4130,  1012,  2691, 28139,  8873,  2595,  1006,  1031,
         1005, 13075,  2692,  1005,  1010,  1005,  2070,  1035,  1042,  1005,
         1033,  1007,   102,  2003,  4305, 23806,  1006,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,  1035,  1042,  1027,  1042,  2005,  1039,  1999, 13075,  2692,
         1007,   102,   102,   102,   102,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101,  3046,  1024,  9808,  1012,  2191,  4305,  2869,  1006, 13075,
         2692,  1007,  3272,  9808,  2121, 29165,  1024,  2065,  2025,  9808,
         1012, 13075,  2692,  1012,  2003,  4305,  2099,  1006, 13075,  2692,
         1007,  1024,  5333,   102], device='cuda:0')
got:
tensor([ 1031,  3145,  2005,  8875,  1999, 13075,  2692,  2065,  8875,  1031,
         1005,  2358,  2099,  2692,  1005,  1033,  1027,  1027,  1005,  2358,
         2099,  2487,  1005,  1033,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  1033,   102,   102,   102,   102,   102,
          102,   102,  1031,  1040,  1031,  1005,  2358,  2099,  2692,  1005,
         1033,   102,   102,  1031,  1005,  2358,  2099,  2692,  1005],
       device='cuda:0')
source:
tensor([  101,  1031,  1006,  2358,  2099,  2692,  1031,  1005,  2358,  2099,
         2692,  1005,  1033,  1010,  2358,  2099,  2692,  1031,  1005,  2358,
         2099,  2487,  1005,  1033,  1007,  2005,  2358,  2099,  2692,  1999,
        13075,  2692,  1033,   102], device='cuda:0')
got:
tensor([9808, 1012, 2291, 1006, 1005, 2358, 2099, 2692, 1005, 1007,  102, 1011,
        1015,  102, 1052, 2100, 2480,  102,  102,  102,  102,  102,  102,  102,
         102, 1054, 1024, 2026, 1035, 4654, 8586, 1006, 1007,  102,  102,  102,
         102,  102,  102,  102,  102,  102, 1035, 3793,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102, 2358, 2099, 2692],
       device='cuda:0')
source:
tensor([  101,  4942, 21572,  9623,  2015,  1012,  2655,  1006,  1031,  1005,
         1013,  2149,  2099,  1013,  8026,  1013, 12667, 23235,  1005,  1010,
         1005,  1011,  1011, 21161,  1005,  1010,  1005,  2358,  2099,  2692,
         1005,  1033,  1007,   102], device='cuda:0')
got:
tensor([10373,  9863,  1027,  1005,  1032,  1050,  1005,  1012,  3693,  1006,
         1031,  2358,  2099,  1006,  1045,  1007,  2005,  1045,  1999, 13075,
         2692,  1033,  1007,   102,   102,   102,   102,   102,   102,  1005,
          102,  1005,   102,   102,   102,   102,   102,  5164,  1012,  3975,
         1006,  1007,   102,   102,  1033,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,  1005],
       device='cuda:0')
source:
tensor([  101,  1000,  1000,  1000,  1010,  1000,  1000,  1000,  1012,  3693,
         1006,  1005,  1006,  1005,  1009,  1005,  1010,  1005,  1012,  3693,
         1006,  1045,  1007,  1009,  1005,  1007,  1005,  2005,  1045,  1999,
        13075,  2692,  1007,   102], device='cuda:0')
got:
tensor([ 3463,  1009,  1027,  1031,  2169,  2005,  2169,  1999,  9808,  1012,
         2862,  4305,  2099,  1006,  1005,  2358,  2099,  2692,  1005,  1007,
         2065,  2169,  1012,  4515, 24415,  1006,  1005,  2358,  2099,  2487,
         1005,  1007,  1033,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  1031,  1024,  1011,  1015,  1033,   102,
          102,   102,   102,   102,   102,   102,   102,   102,  1005],
       device='cuda:0')
source:
tensor([  101,  9808,  1012, 10381,  4305,  2099,  1006,  1005,  2358,  2099,
         2692,  1005,  1007,  2005,  5371,  1999,  1043,  4135,  2497,  1012,
         1043,  4135,  2497,  1006,  1005,  1008,  1012, 19067,  2102,  1005,
         1007,  1024,  3413,   102], device='cuda:0')
got:
tensor([ 2128,  1012,  3945,  1006,  1005,  1031,  1034,  1037,  1011,  1062,
         1033,  1005,  1010, 13075,  2692,  1007,  1012,  2177,  1006,  1015,
         1007,   102,  1005,  2896,  1006,  1007,   102,   102,  1063,  1014,
         1065,  1005,  1010, 13075,  2692,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,  1005,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,  1005,   102,  1005],
       device='cuda:0')
source:
tensor([  101,  2128,  1012,  4942,  1006,  1005,  1034,  1031,  1037,  1011,
         1062,  2692,  1011,  1023,  1033,  1008,  1006,  1029,   999,  1031,
         1037,  1011,  1062,  1033,  1007,  1005,  1010,  1005,  1005,  1010,
        13075,  2692,  1007,   102], device='cuda:0')
got:
tensor([ 4949,  1006, 20014,  1010, 13075,  2692,  1012,  5167,  1006,  1007,
         1007,   102,  1027,  1031,  2358,  2099,  2692,  1033,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102, 13075,  2692,  1033,   102,  2358,  2099,  2692,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102],
       device='cuda:0')
source:
tensor([  101,  2279,  1006,  1045,  2005,  1045,  1010,  1060,  1999,  4372,
        17897, 11657,  1006, 13075,  2692,  1007,  2065,  2025,  2003,  7076,
        26897,  1006,  1060,  1010, 22017,  2140,  1007,  1998,  1060,  1027,
         1027,  1015,  1007,   102], device='cuda:0')
got:
tensor([25353,  2015,  1012,  4130,  1012, 19274,  1006,  1014,  1010,  1005,
         2358,  2099,  2692,  1005,  1007,   102, 13075,  2692,   102,   102,
          102,   102,   102, 13075,  2692,  1031,  1015,  1024,  1033,   102,
          102,  1032,  1032,  1015,  1012,  1014,   102,   102,   102,   102,
         1005,   102,   102, 13075,  2692,  1007,   102,   102,   102,   102,
         1005,   102,   102,   102,   102,   102,  1005,  2358,  2099],
       device='cuda:0')
source:
tensor([  101, 25353,  2015,  1012,  4130,  1012, 19274,  1006,  1015,  1010,
         9808,  1012,  4130,  1012,  3693,  1006,  9808,  1012,  4130,  1012,
        16101, 18442,  1006, 13075,  2692,  1007,  1010,  1005,  2358,  2099,
         2692,  1005,  1007,  1007,   102], device='cuda:0')
got:
tensor([22851,  1012,  3191,  1035,  3793,  1006,  1005,  2358,  2099,  2692,
         1005,  1010, 13075,  2692,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102, 13075,  2692,
         1012,  4339,  1006,  1005,  2358,  2099,  2692,  1005,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,  1005],
       device='cuda:0')
source:
tensor([  101, 27937,  1012,  3828,  2102, 18413,  1006,  1005,  1039,  1024,
         1032,  1032,  2951,  1032,  1032, 27937,  1012, 19067,  2102,  1005,
         1010, 13075,  2692,  1012,  5300,  1010,  4718,  2102,  1027,  1005,
         1003,  1040,  1005,  1007,   102], device='cuda:0')
got:
tensor([13075,  2692,  1012,  4339,  1012,  3793, 13874,  1006,  1005,  2358,
         2099,  2692,  1005,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102, 13075,  2692,  1033,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,  1005,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,  1005],
       device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  2000,  1035, 20116,  2615,  1006,  1005,
         2358,  2099,  2692,  1005,  1010, 20346,  1027,  3904,  1010,  5950,
         1027,  3904,  1010, 19802,  1027,  1005,  1005,  1010,  5549,  1027,
         1005,  1037,  1005,  1007,   102], device='cuda:0')
got:
tensor([ 6140,  1006,  1005,  2561,  3465,  2003,  1024,  1002,  1063,  1024,
         1010,  1012,  1016,  2546,  1065,  1005,  1012,  4289,  1006, 13075,
         2692,  1007,  1007,   102,   102,   102,   102,   102, 13075,  2692,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  6140,  1006,  1005,  1032,  1050,  1005,  1012,  3693,  1006,
         1005,  1032,  1056,  1005,  1012,  3693,  1006,  2358,  2099,  1006,
         8902,  1007,  2005,  8902,  1999,  5216,  1007,  2005,  5216,  1999,
        13075,  2692,  1007,  1007,   102], device='cuda:0')
got:
tensor([ 9808,  1012,  4130,  1012,  2691, 28139,  8873,  2595,  1006,  1031,
         1005, 13075,  2692,  1005,  1010,  1005,  2070,  1035,  1042,  1005,
         1033,  1007,   102,  2003,  4305, 23806,  1006,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,  1035,  1042,  1027,  1042,  2005,  1039,  1999, 13075,  2692,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  3046,  1024,  9808,  1012,  2191,  4305,  2869,  1006, 13075,
         2692,  1007,  3272,  9808,  2121, 29165,  2004,  6453,  1024,  2065,
         6453,  1012,  9413, 19139,   999,  1027,  9413, 19139,  1012, 25212,
         9048,  3367,  1024,  5333,   102], device='cuda:0')
got:
tensor([ 2695,  1035,  3433,  1027, 11186,  1012,  2695,  1006, 24471,  2140,
         1027,  1005, 13075,  2692,  1005,  1010, 11498,  5244,  1027,  1031,
         1005, 13075,  2487,  1005,  1010,  1005, 13075,  2475,  1005,  1033,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
         1035,  4019,  1006, 13075,  2475,  1007,   102,   102,   102,   102,
          102, 13075,  2487,  1012,  4339,  1006, 13075,  2475,  1007,   102,
          102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 11186,  1012,  2695,  1006, 24471,  2140,  1010, 13075,  2692,
         1027, 13075,  2692,  1010, 20346,  2015,  1027, 20346,  2015,  1035,
         4487,  6593,  1010,  8740,  2705,  1027,  1006, 13075,  2487,  1010,
        13075,  2475,  1007,  1007,   102], device='cuda:0')
got:
tensor([22851,  1012,  3191,  1035, 20116,  2615,  1006,  1005,  2358,  2099,
         2692,  1005,  1010, 19802,  1027,  1005,  1032,  1056,  1005,  1007,
          102,   102,   102,   102,   102,  3210,   102,   102,   102,   102,
          102,   102,   102,  1012,  3191,  1006,  1007,   102,  5164,  1012,
         3975,  1006,  1005,  1010,  1005,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,  1005,  1007,
          102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  8840,  2140,  1027,  2862,  1006, 20116,  2615,  1012,  8068,
         1006,  2330,  1006,  1005,  2358,  2099,  2692,  1005,  1010,  1005,
        21144,  1005,  1007,  1010,  3972, 27605,  3334,  1027,  1005,  1032,
         1056,  1005,  1007,  1007,   102], device='cuda:0')
got:
tensor([ 3795,  2015,  1006,  1007,  1031,  1005,  2358,  2099,  2692,  1005,
         1033,  1012,  4289,  1006,  1008, 12098,  5620,  1007,   102,   102,
          102,   102,   102,   102,  7685,  1006,  1005,  2358,  2099,  2692,
         1005,  1007,   102,   102,   102,   102,  5244,  1006,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,  1005,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 13103,  1027,  2009,  2121,  1035, 12997, 24388,  2063,  1006,
         1005, 17613,  1012, 16923,  1012,  1015,  1012,  1015,  1005,  1010,
         1005, 17613,  1012, 16923,  1012, 20637,  1012, 20637,  1005,  1010,
         3357,  1027,  1015,  1007,   102], device='cuda:0')
got:
tensor([ 9808,  1012,  4130,  1012,  3693,  1006, 13075,  2692,  1012,  3975,
         1006,  1005,  1035,  1005,  1007,  1007,   102,   102,   102,   102,
          102,   102,   102,   102, 13075,  2692,  1012, 10639,  1006,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  1035,  5371,  1012,  4339,  1006,  1005,  1003,  1055,
         1005,  1007,   102,   102,   102,   102,   102,   102,  1005,   102,
          102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 25353,  2015,  1012,  4130,  1012, 10439, 10497,  1006,  9808,
         1012,  4130,  1012,  3693,  1006,  9808,  1012,  4130,  1012, 16101,
        18442,  1006,  1035,  1035,  5371,  1035,  1035,  1007,  1010,  1005,
        13075,  2692,  1005,  1007,  1007,   102], device='cuda:0')
got:
tensor([ 2128,  1012,  4942,  1006,  1005,  1031,  1034,  1014,  1011,  1023,
         1033,  1009,  1005,  1010,  1005,  1005,  1010, 13075,  2692,  1007,
          102,  1005,  1044,  1034,  1004,  3449,  2140,  1005,  1010, 13075,
         2692,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  1005,  1010, 13075,  2692,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  2128,  1012,  4942,  1006,  1005,  1031,  1034,  1032,  1032,
         7842,  1011, 23564,  1011,  1062,  2692,  1011,  1023,  1033,  1005,
         1010,  1005,  1005,  1010, 13075,  2692,  1007,  1012,  2896,  1006,
         1007,  1012,  6167,  1006,  1007,   102], device='cuda:0')
got:
tensor([ 2128,  1012,  4942,  1006,  1005,  1031,  1034,  1014,  1011,  1023,
         1033,  1009,  1005,  1010,  1005,  1005,  1010, 13075,  2692,  1007,
          102,  1005, 13075,  2692,  1005,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,  1005,  1010, 13075,  2692,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  2128,  1012,  4942,  1006,  1005,  1006,  1029,   999,  1032,
         1032,  1055,  1007,  1031,  1032,  1032,  1059,  1035,  1033,  1005,
         1010,  1005,  1005,  1010, 13075,  2692,  1007,  1012,  2896,  1006,
         1007,  1012,  6167,  1006,  1007,   102], device='cuda:0')
got:
tensor([20228,  2102,  1012,  8040, 20097,  1006,  1060,  1010,  1061,  1010,
         3609,  1027,  1005,  2358,  2099,  2692,  1005,  1010,  3609,  1027,
         1005,  3904,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
         1005,   102,   102,   102,  1005,  1010, 12115,  1027,  1005,  2358,
         2099,  2692,  1005,  1007,   102,   102,   102,   102,  1012,  8040,
        20097,  1006,  1060,  1012,  3975], device='cuda:0')
source:
tensor([  101, 20228,  2102,  1012,  8040, 20097,  1006, 27937,  1012,  6721,
         1012, 14566,  2078,  1006,  2531,  1007,  1010, 27937,  1012,  6721,
         1012, 14566,  2078,  1006,  2531,  1007,  1010,  2227, 18717,  2015,
         1027,  1005,  3904,  1005,  1007,   102], device='cuda:0')
got:
tensor([2007, 2330, 1006, 1005, 2358, 2099, 2487, 1005, 1010, 1005, 2358, 2099,
        2692, 1005, 1007, 2004, 1042, 1024, 1042, 1012, 4339, 1006, 1005, 2358,
        2099, 2475, 1005, 1007,  102,  102,  102,  102,  102,  102,  102,  102,
         102, 1005, 2358, 2099, 2692, 1005, 1007,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102, 1005, 2358, 2099, 2475, 1005,
        1007,  102,  102,  102,  102], device='cuda:0')
source:
tensor([ 101, 2330, 1006, 1005, 2358, 2099, 2475, 1005, 1010, 1005, 1059, 1005,
        1007, 1012, 4339, 1006, 1005, 2358, 2099, 2692, 1005, 1009, 2330, 1006,
        1005, 2358, 2099, 2487, 1005, 1007, 1012, 3191, 1006, 1007, 1007,  102],
       device='cuda:0')
got:
tensor([ 1000,  1000,  1000,  1045,  2031,  1024,  1032,  1032,  1057,  8889,
         2509, 20952,  2102,  1063,  1014,  1065,  1032,  1032,  1038,  1032,
         1032,  1040,  1063,  1015,  1065,  1000,  1000,  1000,  1012,  4289,
         1006,  2026,  1035, 16129,  1007,   102,  1065,   102,   102,   102,
          102,   102,  1035, 16129,  1035,  4769,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 12997,  1027,  2128,  1012,  2424,  8095,  1006,  1005,  1031,
         1014,  1011,  1023,  1033,  1009,  1006,  1029,  1024,  1032,  1032,
         1012,  1031,  1014,  1011,  1023,  1033,  1009,  1007,  1063,  1017,
         1065,  1005,  1010,  1055,  1007,   102], device='cuda:0')
got:
tensor([22851,  1012,  9530, 11266,  1006,  1031,  1040,  2546,  1010, 22851,
         1012,  2951, 15643,  1006,  1031,  1005,  2358,  2099,  2692,  1005,
         1010,  1005,  2358,  2099,  2487,  1005,  1033,  1033,  1010,  8123,
         1027,  1015,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  1040,  2546,  1031,  1005,  2358,  2099,  2692,  1005,
         1033,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 22851,  1012,  2951, 15643,  1006,  2041,  1012,  2000,  9863,
         1006,  1007,  1010,  7753,  1027,  1031,  1005,  2358,  2099,  2692,
         1005,  1010,  1005,  2358,  2099,  2487,  1005,  1033,  1010,  5950,
         1027,  2041,  1012,  5950,  1007,   102], device='cuda:0')
got:
tensor([13075,  2692,  1012,  8840,  2278,  1031, 13075,  2692,  1031,  1005,
         2358,  2099,  2692,  1005,  1033,  1027,  1027,  1005,  2358,  2099,
         2487,  1005,  1033,   102,  2358,  2099,  2487,  1007,   102,   102,
          102,   102,   102,   102,  1033,   102,  2003,  2378,  1006, 13075,
         2692,  1031,  1005,  2358,  2099,  2487,  1005,  1033,   102, 13075,
         2692,  1007,  1033,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012,  8840,  2278,  1031, 13075,  2692,  1031,
         1005,  2358,  2099,  2692,  1005,  1033,  1027,  1027,  1005,  2358,
         2099,  2487,  1005,  1010,  1005,  2358,  2099,  2692,  1005,  1033,
         1012,  5300,  1031,  1014,  1033,   102], device='cuda:0')
got:
tensor([ 1031,  1060,  2005,  1060,  1999, 13075,  2692,  2065,  1005,  2358,
         2099,  2692,  1005,  1999,  1060,  1031,  1024,  1011,  1015,  1033,
         1033,   102,  2003,  7076, 26897,  1006,  2358,  2099,  2487,  1007,
         1033,   102,   102,   102,  1033,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  1005,   102,  1005,  1007,   102,   102,
         1033,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  1031,  1060,  2005,  1060,  1999, 13075,  2692,  2065,  2025,
         1060,  1012,  4627, 24415,  1006,  1005,  2358,  2099,  2692,  1005,
         1007,  1998,  2025,  1060,  1012,  4627, 24415,  1006,  1005,  2358,
         2099,  2487,  1005,  1007,  1033,   102], device='cuda:0')
got:
tensor([22851,  1012,  9530, 11266,  1006,  1031, 13075,  2475,  1010, 13075,
         2487,  1012, 13075,  2475,  1033,  1010,  8123,  1027,  1015,  1007,
         1012, 14916, 14074,  1006,  7753,  1027,  1063,  1005, 13075,  2475,
         1005,  1024,  1005,  2358,  2099,  2692,  1005,  1065,  1010,  2129,
         1027,  1005,  5110,  1005,  1065,  1007,   102,   102,   102,   102,
          102,   102,   102, 13075,  2487,  1012, 14916, 14074,  1006,  1007,
          102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 22851,  1012, 13590,  1006, 13075,  2475,  1010, 13075,  2509,
         1010,  2006,  1027,  1031,  1005,  2358,  2099,  2692,  1005,  1033,
         1010, 16809,  2229,  1027,  1006,  1005, 13075,  2549,  1005,  1010,
         1005, 13075,  2629,  1005,  1007,  1007,   102], device='cuda:0')
got:
tensor([2128, 1012, 3975, 1006, 1005, 2358, 2099, 2692, 1005, 1010, 1005, 2358,
        2099, 2487, 1005, 1007,  102,  102,  102, 1005, 2358, 2099, 2692, 1005,
        1007,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102, 1005,  102, 1005,  102, 1005, 1007,  102,
         102,  102,  102,  102,  102,  102,  102,  102, 3975, 1006, 1005, 2358,
        2099, 2692, 1005, 1007,  102], device='cuda:0')
source:
tensor([ 101, 1000, 1000, 1000, 2358, 2099, 2692, 1000, 1000, 1000, 1012, 5672,
        1006, 1005, 2358, 2099, 2475, 1005, 1010, 1005, 1013, 1032, 1060, 8889,
        1013, 1005, 1007, 1012, 3975, 1006, 1005, 1032, 1060, 8889, 1005, 1007,
         102], device='cuda:0')
got:
tensor([ 2047,  1035,  2862,  1027,  1063,  1047,  1024,  1058,  2005,  1040,
         1999, 13075,  2692,  1065,   102,   102,  4487,  6593,  1006,  3940,
         1031,  1014,  1033,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,  1065,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
         1065,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  6140,  1006,  4487,  6593,  1006, 14101,  1006, 13075,  2692,
         1031,  1014,  1033,  1010, 14101,  1006,  1008,  1031,  2862,  1006,
         1040,  1012,  5300,  1006,  1007,  1007,  2005,  1040,  1999, 13075,
         2692,  1033,  1007,  1007,  1007,  1007,   102], device='cuda:0')
got:
tensor([27937,  1012,  2151,  1006, 27937,  1012,  1999,  2487,  2094,  1006,
        13075,  2692,  1010,  1014,  1010,  1015,  1007,  1007,   102,   102,
          102,   102,   102, 13075,  2692,  1031,  1014,  1033,   102,   102,
          102,   102,   102,   102,   102,   102,   102,  2003,  7076, 26897,
         1006,  1060,  1010, 13075,  2692,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,  1006,  1007,
          102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 27937,  1012,  2073,  1006, 27937,  1012,  1999,  2487,  2094,
         1006, 13075,  2692,  1010,  1031,  2358,  2099,  2692,  1033,  1007,
         1012, 24501,  3270,  5051,  1006, 13075,  2692,  1012,  4338,  1007,
         1010, 13075,  2692,  1010,  1014,  1007,   102], device='cuda:0')
got:
tensor([7680, 1006, 1040, 1012, 2177, 3762, 1006, 1005, 8909, 1005, 1007, 1012,
        2946, 1006, 1007, 1007,  102,  102,  102,  102,  102,  102,  102,  102,
         102, 4460, 1027, 1005, 1051, 1005, 1007,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102], device='cuda:0')
source:
tensor([  101,  1040,  2546,  1012,  2177,  3762,  1006,  1031,  1005,  8902,
         2487,  1005,  1010,  1005,  8902,  2475,  1005,  1033,  1007,  1031,
         1005,  8902,  2509,  1005,  1033,  1012, 16634,  7413,  1006,  1007,
         1012, 25141,  1035,  5950,  1006,  1007,   102], device='cuda:0')
got:
tensor([13075,  2692,  1031, 27937,  1012, 19027, 15465,  1006, 18798,  1006,
        13075,  2692,  1012,  4338,  1031,  1014,  1033,  1007,  1010,  1024,
         1033,  1007,   102,  1024,  1010,  8123,  1027,  1015,  1007,  1033,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102, 13075,  2692,  1031,  1024,  1010,  1016,  1033,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1012, 24501,  3270,  5051,  1006,  1011,  1015,
         1010,  1046,  1007,  1012,  2812,  1006,  8123,  1027,  1015,  1007,
         1012, 24501,  3270,  5051,  1006, 13075,  2692,  1012,  4338,  1031,
         1014,  1033,  1010,  1011,  1015,  1007,   102], device='cuda:0')
got:
tensor([20228,  2102,  1012,  8040, 20097,  1006,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  1008,  1008,  1016,  1010,  1005,  1032,  1032,  1015,
         1005,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 20228,  2102,  1012,  5436,  1006, 27937,  1012,  6721,  1012,
        14566,  2078,  1006,  2531,  1007,  1010, 27937,  1012,  6721,  1012,
        14566,  2078,  1006,  2531,  1007,  1010,  1005,  1051,  1005,  1010,
         1049, 11329,  1027,  1005,  3904,  1005,  1007,   102],
       device='cuda:0')
got:
tensor([13075,  2692,  1031,  1005,  2358,  2099,  2692,  1005,  1033,  1012,
         6611,  1006, 23375,  1060,  1024,  1060,  1031, 18798,  1006,  1060,
         1007,  1013,  7886,  1033,  1007,   102,   102,   102,   102,   102,
         2213,  1005,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102, 13075,  2692,  1031,  1011,  1015,  1033,   102,  1005,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1027, 13075,  2692,  1031,  1006, 13075,  2692,
         1031,  1005,  2358,  2099,  2692,  1005,  1033,  1028,  1027,  5585,
         1007,  1004,  1006, 13075,  2692,  1031,  1005,  2358,  2099,  2692,
         1005,  1033,  1026,  1027,  7886,  1007,  1033,   102],
       device='cuda:0')
got:
tensor([ 2128,  1012,  2424,  8095,  1006,  1005,  1032,  1032,  1012,  1006,
         1029,  1024,  1032,  1032,  1054,  1009,  1007,  1005,  1010, 13075,
         2692,  1007,   102,  1005,  2358,  2099,  2692,  1005,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  1011,  1015,  1012,  1014,   102,   102,  1005,   102,
         1005,   102,  1005,   102,  1005,   102,  1005,   102,  1005,   102,
          102,   102,   102,  1012,  2177], device='cuda:0')
source:
tensor([  101,  2128,  1012,  2424,  8095,  1006,  1005,  1050,  1006,  1029,
         1026,  1027,  1031,  1034,  1050,  1033,  1050,  1007,  1050,  1009,
         1006,  1029,  1027,  1031,  1034,  1050,  1033,  1007,  1006,  1029,
         1045,  1007,  1005,  1010, 13075,  2692,  1007,   102],
       device='cuda:0')
got:
tensor([ 2128,  1012,  4942,  1006,  1005,  1006,  1029,  1026,  1027,  1031,
         1037,  1011,  1062,  1033,  1007,  1032,  1032,  1007,  1005,  1010,
         1005,  1032,  1032,  1015,  1005,  1010, 13075,  2692,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
         1005,   102,   102,  1005,  1010, 13075,  2692,  1007,   102,   102,
          102,  1005,   102,  1005,   102,  1005,   102,  1005,   102,   102,
          102,  1005,   102,  1005,  1007], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1027,  2128,  1012,  4942,  1006,  1005,  1032,
         1032,  1038,  1006,  1032,  1032,  1059,  1009,  1007,  1006,  1032,
         1032,  1015,  1032,  1032,  1038,  1007,  1009,  1005,  1010,  1005,
         1032,  1032,  1015,  1005,  1010, 13075,  2692,  1007,   102],
       device='cuda:0')
got:
tensor([ 1031,  1049,  1012,  5672,  1006,  1005,  1031,  1032,  1060,  8889,
         1033,  1005,  1010,  1005,  2358,  2099,  2692,  1005,  1007,  2005,
         1060,  1999, 13075,  2692,  1033,   102,   102,   102,   102,   102,
         1005,   102,  1005,   102,  1005,  1007,  1033,   102,   102,   102,
          102,   102,   102,   102,   102,  1005,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,  1005,   102,  1005,   102,
         1005,  1007,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  1031,  2128,  1012,  4942,  1006,  1005,  1006,  1029,  1026,
          999,  1032,  1032,  1040,  1007,  1032,  1032,  1012,  1006,  1029,
          999,  1032,  1032,  1040,  1007,  1005,  1010,  1005,  1005,  1010,
         1045,  1007,  2005,  1045,  1999, 13075,  2692,  1033,   102],
       device='cuda:0')
got:
tensor([ 1000,  1000,  1000,  2358,  2099,  2692,  1000,  1000,  1000,  1012,
         3693,  1006,  4949,  1006, 23375,  1060,  1024,  1060,  1009,  1061,
         1007,  1007,   102, 13075,  2692,  1031,  1024,  1024,  1011,  1015,
         1033,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,  1005,   102, 13075,  2692,  1031,  2358,  2099,  2692,  1033,
          102,   102,   102,   102,   102,  1005,   102,  1005,  1007,   102,
          102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  1000,  1000,  1000,  1000,  1000,  1000,  1012,  3693,  1006,
         1031,  1006,  1005,  1003,  1040,  1030,  1003,  1040,  1005,  1003,
         1006,  1056,  1031,  1014,  1033,  1010,  1056,  1031,  1015,  1033,
         1007,  1007,  2005,  1056,  1999, 13075,  2692,  1033,  1007,   102],
       device='cuda:0')
got:
tensor([19616,  1006,  2358,  2099,  2692,  1010,  3145,  1027,  6872,  1012,
         8875, 18150,  3334,  1006,  1005,  2358,  2099,  2487,  1005,  1010,
         1005,  2358,  2099,  2475,  1005,  1007,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,  4066,  1006,  1005,  2358,  2099,  2692,  1005,  1010,  1005,
         2358,  2099,  2487,  1005,  1007,   102,  1005,   102,  1005,  1010,
         1005,  2358,  2099,  2475,  1005], device='cuda:0')
source:
tensor([  101,  1048,  1012,  4066,  1006,  3145,  1027, 23375,  1060,  1024,
         1006,  1060,  1031,  1005,  2358,  2099,  2692,  1005,  1033,  1010,
         1060,  1031,  1005,  2358,  2099,  2487,  1005,  1033,  1010,  1060,
         1031,  1005,  2358,  2099,  2475,  1005,  1033,  1007,  1007,   102],
       device='cuda:0')
got:
tensor([13075,  2487,  1012,  4066,  1006,  3145,  1027, 23375,  1060,  1024,
         1060,  1031,  1016,  1033,  1010,  7901,  1027,  2995,  1007,   102,
          102,   102,   102,   102, 13075,  2487,  1012,  4066,  1006,  3145,
         1027,  6872,  1012,  8875, 18150,  3334,  1006,  1015,  1007,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 19616,  1006, 13075,  2487,  1010,  3145,  1027, 23375,  1060,
         1024,  3058,  7292,  1012,  2358, 14536,  7292,  1006,  1060,  1031,
         1015,  1033,  1010,  1005,  1003,  1040,  1013,  1003,  1049,  1013,
         1003,  1061,  1005,  1007,  1010,  7901,  1027,  2995,  1007,   102],
       device='cuda:0')
got:
tensor([ 2128,  1012,  4942,  1006,  1005,  1031,  1034,  1032,  1032,  1060,
         8889,  1011,  1032,  1060,  2581,  2546,  1033,  1009,  1005,  1010,
         1005,  1005,  1010, 13075,  2692,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  1035,  3793,   102,   102,   102,   102,   102,   102,
         1005,   102,   102,  1005,   102,  1005,   102,   102,  2003,  1005,
         1010, 13075,  2692,  1007,   102], device='cuda:0')
source:
tensor([  101, 13523, 24759,  4140, 29521,  1012, 22110,  1006,  1005, 15489,
         1005,  1010,  1008,  1008,  1063,  1005, 20344,  1011, 14262, 10128,
         1005,  1024,  1005, 13075,  2692,  1005,  1010,  1005,  2155,  1005,
         1024,  1005, 20344,  1011, 14262, 10128,  1005,  1065,  1007,   102],
       device='cuda:0')
got:
tensor([ 3463,  1009,  1027,  1031,  2169,  2005,  2169,  1999,  9808,  1012,
         2862,  4305,  2099,  1006,  1005,  2358,  2099,  2692,  1005,  1007,
         2065,  2169,  1012,  4515, 24415,  1006,  1005,  2358,  2099,  2487,
         1005,  1007,  1033,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  1031,  1024,  1011,  1015,  1033,   102,
          102,   102,   102,   102,   102,   102,   102,   102,  1005,  1007,
          102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  2005,  7117,  1010, 16101,  2015,  1010,  6764,  1999,  9808,
         1012,  3328,  1006,  1005,  2358,  2099,  2692,  1005,  1007,  1024,
         2005,  5371,  1999,  6764,  1024,  2065,  5371,  1012,  4515, 24415,
         1006,  1005,  2358,  2099,  2487,  1005,  1007,  1024,  3413,   102],
       device='cuda:0')
got:
tensor([13075,  2692,  1027, 16371,  8737,  2100,  1012,  7170,  2102, 18413,
         1006,  2330,  1006,  1005,  2358,  2099,  2487,  1005,  1010,  1005,
         2358,  2099,  2692,  1005,  1007,  1010,  3972, 27605,  3334,  1027,
         1005,  1010,  1005,  1007,   102,   102,   102,   102,   102,   102,
          102,   102, 13075,  2692,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1027, 16371,  8737,  2100,  1012,  2013, 21646,
         1006,  3642,  6169,  1012,  2330,  1006,  1005,  2358,  2099,  2487,
         1005,  1010, 17181,  1027,  1005,  2358,  2099,  2692,  1005,  1007,
         1010, 26718, 18863,  1027,  1005,  1026, 23343,  1005,  1007,   102],
       device='cuda:0')
got:
tensor([13075,  2692,  1031,  1006, 13075,  2692,  1031,  1005,  2358,  2099,
         2487,  1005,  1033,  1028,  2753,  1010,  8123,  1027,  1015,  1007,
         1064,  1006, 13075,  2692,  1031,  1005,  2358,  2099,  2475,  1005,
         1033,  1026,  2753,  1007,  1033,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102, 13075,  2692,  1031,  1005,  2358,  2099,  2692,
         1005,  1033,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1031,  1005,  2358,  2099,  2692,  1005,  1033,
         1031,  1006, 13075,  2692,  1031,  1005,  2358,  2099,  2487,  1005,
         1033,  1028,  2753,  1007,  1004,  1006, 13075,  2692,  1031,  1005,
         2358,  2099,  2475,  1005,  1033,  1027,  1027,  7706,  1007,  1033,
          102], device='cuda:0')
got:
tensor([ 4098,  1006, 14689,  1006,  1060,  1011,  1061,  1007,  2005,  1060,
         1010,  1061,  1999, 14101,  1006, 13075,  2692,  1010, 13075,  2487,
         1007,  1007,   102,  1011, 13075,  2487,  1031,  1024,  1024,  1011,
         1015,  1033,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  1045,  1009,  2184,   102,   102, 13075,  2692,  1031,
         1024,  1011,  1015,  1033,   102,   102,   102,   102,  2184,  1005,
          102,   102,   102,   102,   102, 13075,  2487,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 16721,  4160,  1012, 17953,  2906,  8449,  2102,  1006,  2184,
         1010,  2846,  1006, 18798,  1006, 13075,  2692,  1007,  1007,  1010,
         3145,  1027, 23375,  1045,  1024, 14689,  1006, 13075,  2692,  1031,
         1045,  1033,  1011, 13075,  2487,  1031,  1045,  1033,  1007,  1007,
          102], device='cuda:0')
got:
tensor([ 3795,  2015,  1006,  1007,  1031,  1005,  2358,  2099,  2692,  1005,
         1033,  1012,  4289,  1006,  1008, 12098,  5620,  1007,   102,   102,
          102,   102,   102,   102,  7685,  1006,  1005,  2358,  2099,  2692,
         1005,  1007,   102,   102,   102,   102,  5244,  1006,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,  1005,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  2005,  1045,  1999,  2846,  1006, 17273,  1007,  1024,  2005,
         1046,  1999,  2846,  1006, 17273,  1007,  1024, 12997,  1027,  1005,
        17613,  1012, 16923,  1012,  1003,  1040,  1012,  1003,  1040,  1005,
         1003,  1006,  1045,  1010,  1046,  1007,  6140,  1006, 12997,  1007,
          102], device='cuda:0')
got:
tensor([ 4098,  1006,  1040,  2546,  1012,  6309,  1006,  1007,  1007,  1031,
         1005,  2358,  2099,  2487,  1005,  1033,  1027,  1027,  1005,  2358,
         2099,  2692,  1005,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  3145,  1027, 23375,  1060,  1024,  1060,  1031,  1015,
         1033,   102,   102,   102,   102,  1005,   102,  1005,   102,  1005,
          102,  1005,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  2862,  1006,  2358,  2099,  2692,  1031,  1005,  1037,  1005,
         1033,  1031,  1005,  2358,  2099,  2487,  1005,  1033,  1012,  5300,
         1006,  1007,  1007,  1031,  1014,  1033,  1031,  1005,  2364,  2850,
         2696,  1005,  1033,  1031,  1014,  1033,  1031,  1005, 18558,  1005,
         1033,   102], device='cuda:0')
got:
tensor([1031, 8875, 2005, 8875, 1999, 2330, 1006, 1005, 2358, 2099, 2475, 1005,
        1010, 1005, 2358, 2099, 2692, 1005, 1007, 2065, 1005, 2358, 2099, 2487,
        1005, 1999, 8875, 1033,  102, 5950, 1006, 8875, 1007,  102,  102,  102,
         102,  102,  102,  102, 1005,  102, 1005,  102, 1005, 1999, 1055, 1033,
         102,  102,  102,  102,  102,  102,  102,  102, 1005,  102, 1005, 1007,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102, 1031, 1014, 1033,  102,  102,  102,  102,  102,
        1031, 1014, 1033,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102], device='cuda:0')
source:
tensor([  101,  1031,  1045,  2005,  1045,  1010,  1046,  1999,  4372, 17897,
        11657,  1006,  2358,  2099,  2475,  1007,  2065,  1005,  2358,  2099,
         2692,  1005,  1999,  1046,  1012,  2896,  1006,  1007,  2030,  1005,
         2358,  2099,  2487,  1005,  1999,  1046,  1012,  2896,  1006,  1007,
         1033,   102], device='cuda:0')
got:
tensor([ 1000,  1000,  1000,  1000,  1000,  1000,  1012,  3693,  1006, 24471,
         6894,  2497,  1012, 11968,  3366,  1012,  3975,  1006,  1007,  1007,
          102,   102, 13075,  2692,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,  1055,  1012,  3524,  1006,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,  1055,  1027,
         1005,  1005,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,  1055], device='cuda:0')
source:
tensor([  101,  6140,  1006,  2128,  1012,  3945,  1006,  1005,  1006,  1029,
         1052,  1026, 24471,  2140,  1028, 16770,  1029,  1024,  1013,  1013,
         1031,  1034,  1032,  1032,  1055,  1033,  1009,  1007,  1005,  1010,
        13075,  2692,  1007,  1012,  2177,  1006,  1005, 24471,  2140,  1005,
         1007,  1007,   102], device='cuda:0')
got:
tensor([27937,  1012,  2073,  1006,  1006,  2358,  2099,  2692,  1031,  1024,
         1010,  1006,  1015,  1007,  1033,  1028,  1014,  1007,  1012,  2035,
         1006,  8123,  1027,  1015,  1007,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  8123,  1027,  1014,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  2358,  2099,  2692,  1031, 27937,  1012,  2073,  1006,  1006,
         2358,  2099,  2692,  1031,  1024,  1010,  1006,  1014,  1007,  1033,
         1027,  1027,  1014,  1007,  1008,  1006,  2358,  2099,  2692,  1031,
         1024,  1010,  1006,  1015,  1007,  1033,  1027,  1027,  1015,  1007,
         1007,  1033,   102], device='cuda:0')
got:
tensor([ 1031,  1005,  2358,  2099,  2692,  1005,  1010,  1005,  2358,  2099,
         2692,  1005,  1033,  1027,  1005,  1038,  1005,  1009,  1040,  2546,
         1031,  1005,  2358,  2099,  2692,  1005,  1033,  1012,  2004, 13874,
         1006, 14257,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  1035,  3823,  1027,  1014,   102,   102,   102,   102,
          102,  1033,   102,   102,   102,   102,   102,   102,  2358,  2099,
         2692,  1012,  2358, 12881,  7292,  1006,  1005,  1003,  1055,  1005,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  1031,  1040,  1012,  2358, 12881,  7292,  1006,  1005,  1003,
         1061,  1003,  1049,  1003,  1040,  1005,  1007,  2005,  1040,  1999,
        25462,  2015,  1012,  3058,  1035,  2846,  1006,  1005,  2286,  2692,
        19317,  2575,  1005,  1010,  1005,  2286,  2692, 14142,  2475,  1005,
         1007,  1033,   102], device='cuda:0')
got:
tensor([ 2051,  1012, 12395,  7292,  1006,  3058,  7292,  1012,  3058,  7292,
         1012,  2085,  1006,  1007,  1012,  2051,  8525, 10814,  1006,  1007,
         1007,   102,   102,  2509,  1012,  2002,  2595,  4305,  2099,  1006,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  1013,  2260,   102,   102,   102,   102,   102,   102,
          102,   102,   102,  1005,   102,  1005,   102,  1005,   102,   102,
          102,   102,   102,  1005,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  2051,  1012,  2358, 14536,  7292,  1006,  1005,  2382,  1013,
         6021,  1013,  5641,  2385,  1024,  2861,  1024,  3590,  1012, 13138,
         1005,  1010,  1005,  1003,  1040,  1013,  1003,  1049,  1013,  1003,
         1061,  1003,  1044,  1024,  1003,  1049,  1024,  1003,  1055,  1012,
         1003,  1042,  1005,  1007,   102], device='cuda:0')
got:
tensor([ 9808,  1012,  2291,  1006, 13075,  2692,  1007,   102, 13075,  2487,
         1012,  5672,  1006, 13075,  2475,  1010, 13075,  2487,  1007,   102,
          102,   102,   102, 13075,  2475,   102,   102,  1011,  1054,  1005,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
        13075,  2692,  1009,  1005,  1005,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  2128,  1012,  4942,  1006,  1005,  1006,  1032,  1032,  1035,
         1037,  1007,  1029,  1032,  1032,  1012,  1006,  1031,  1034,  1032,
         1032,  1012,  1033,  1008,  1007,  1002,  1005,  1010,  1005,  1035,
        10514,  4246,  1012,  1032,  1032,  1016,  1005,  1010,  1005,  2358,
         2099,  2692,  1005,  1007,   102], device='cuda:0')
got:
tensor([14101,  1006, 13075,  2692,  1010, 13075,  2487,  1007,   102,   102,
        13075,  2692,  1010, 13075,  2487,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,  1011,  1016,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,  1011,  1015,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102, 13075,  2692,  1012,  2177,
         1006,  1014,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 27937,  1012,  9140,  1006, 14101,  1006, 13075,  2692,  1012,
        23289,  2140,  1006,  1007,  1010, 13075,  2487,  1012, 23289,  2140,
         1006,  1007,  1007,  1010, 26718, 18863,  1027,  1005,  1045,  2549,
         1010,  1045,  2549,  1005,  1007,  1012, 24501,  3270,  5051,  1006,
        13075,  2692,  1012,  4338,  1007,   102], device='cuda:0')
got:
tensor([13075,  2692,  1012,  5672,  1006,  1005,  1005,  1010,  1005,  1005,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102, 13075,  2692,  1012,  7753,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102], device='cuda:0')
source:
tensor([  101, 13075,  2692,  1027,  2128,  1012,  4942,  1006,  1005,  1034,
        16770,  1029,  1024,  1032,  1032,  1013,  1032,  1032,  1013,  1012,
         1008,  1031,  1032,  1032,  1054,  1032,  1032,  1050,  1033,  1008,
         1005,  1010,  1005,  1005,  1010, 13075,  2692,  1010,  9245,  1027,
         2128,  1012,  4800,  4179,  1007,   102], device='cuda:0')
got:
tensor([1031, 2358, 2099, 2692, 1033,  102,  102, 1031, 1015, 1024, 1033,  102,
         102,  102,  102, 1031, 1016, 1033,  102,  102, 1005,  102,  102,  102,
        1005, 2358, 2099, 2692, 1005, 1007,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102, 1016, 1010, 1017, 1007,  102,  102,
         102,  102,  102,  102,  102, 1033,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
        1031, 1015, 1033,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102], device='cuda:0')
source:
tensor([  101, 14101,  1006,  1008,  1031,  1006,  1005,  1037,  1005,  1010,
         1015,  1007,  1010,  1006,  1005,  1038,  1005,  1010,  1016,  1007,
         1010,  1006,  1005,  1039,  1005,  1010,  1017,  1007,  1010,  1006,
         1005,  1040,  1005,  1010,  1018,  1007,  1010,  1006,  1005,  1041,
         1005,  1010,  1007,  1033,  1007,   102], device='cuda:0')
got:
tensor([ 2358,  6820,  6593,  1012,  4895, 23947,  1006,  1005, 22861,  2497,
         1005,  1010,  6315,  1035, 27507,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,  2385,   102,   102,  2002,  2595, 19968,
         2226,  2595,  4305,  8449,  2102,  1006,  1007,   102,  2002,  2595,
         4305,  8449,  2102,  1006,  7953,  1006,  1005,  2002,  2595,  1005,
         1007,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102, 27507,  1006,  2531,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102, 27507,  1006,  1005,  1038,
         1005,   102, 27507,  1006,  1005,  2002,  2595,  1005,  1007,   102,
          102, 27507,  1006,  1005,   102,   102,   102,   102,   102,   102,
          102,  1032,  1032,  1032], device='cuda:0')
source:
tensor([  101,  1000,  1000,  1000,  1032,  1032,  1060,  2546,  2509,  1032,
         1032,  1060,  4783,  1032,  1032,  1060, 17914,  1032,  1032,  1060,
        17914,  1000,  1000,  1000,  1012,  5672,  1006,  1005,  1032,  1032,
         1060,  1005,  1010,  1005,  1005,  1007,  1012, 21933,  3207,  1006,
         1005,  2002,  2595,  1005,  1007,   102], device='cuda:0')
got:
tensor([ 1031,  2330,  1006,  1005,  2358,  2099,  2692,  1005,  1010,  1005,
        11113,  1005,  1007,  2005,  1035,  1999,  2846,  1006,  1015,  1010,
        18798,  1006,  2358,  2099,  2692,  1007,  1007,  1033,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  1033,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102], device='cuda:0')
source:
tensor([ 101, 4949, 1006, 3904, 1010, 1008, 1031, 1006, 1005, 1037, 1005, 1010,
        1015, 1007, 1010, 1006, 1005, 1038, 1005, 1010, 1016, 1007, 1010, 1006,
        1005, 1039, 1005, 1010, 1017, 1007, 1010, 1006, 1005, 1040, 1005, 1010,
        1018, 1007, 1010, 1006, 1005, 1041, 1005, 1010, 1007, 1033, 1007,  102],
       device='cuda:0')
got:
tensor([13075,  2692,  1031,  1031,  1005,  2358,  2099,  2692,  1005,  1010,
         1005,  2358,  2099,  2487,  1005,  1033,  1033,  1012, 13590,  1006,
        13075,  2692,  1010,  2006,  1027,  1005,  2358,  2099,  2475,  1005,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102, 13075,  2692,  1031,  1005,  2358,  2099,  2487,  1005,
         1033,  1010,  2129,  1027,  1005,  5110,  1005,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102, 13075,  2692,  1031,
         1005,  2358,  2099,  2475,  1005,  1033,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
        13075,  2692,  1005,   102,   102, 13075,  2692,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102, 13075,  2692], device='cuda:0')
source:
tensor([  101, 13075,  2487,  1031,  1005,  2358,  2099,  2475,  1005,  1033,
         1027, 27937,  1012,  2073,  1006, 13075,  2487,  1031,  1005,  2358,
         2099,  2487,  1005,  1033,  1012,  3475, 18083,  1010, 13075,  2487,
         1031,  1005,  2358,  2099,  2692,  1005,  1033,  1010, 13075,  2487,
         1031,  1005,  2358,  2099,  2487,  1005,  1033,  1007,   102],
       device='cuda:0')
got:
tensor([13075,  2487,  1012, 25141,  1035,  5950,  1006,  1007,  1012, 13075,
         2692,  1012,  2177,  3762,  1006,  1005, 13075,  2475,  1005,  1007,
         1031,  1014,  1033,  1012,  2004, 13874,  1006, 13075,  2487,  1007,
          102,  8123,  1027,  1015,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102, 13075,  2475,
          102,  1033,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102, 13075,  2487,  1012, 25141,
         1035,  5950,  1006,  2171,  1007,   102,   102,   102,   102,   102,
          102,   102,   102, 13075,  2475,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102, 13075,  2475,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102, 13075,  2487,  1012], device='cuda:0')
source:
tensor([  101, 13075,  2487,  1031,  1005, 13075,  2692,  1005,  1033,  1012,
         5436,  1006,  2785,  1027,  1005,  3347,  1005,  1010, 13075,  2475,
         1027,  1031,  1005,  1054,  1005,  1010,  1005,  1043,  1005,  1010,
         1005,  1038,  1005,  1010,  1005,  1054,  1005,  1010,  1005,  1043,
         1005,  1010,  1005,  1038,  1005,  1010,  1005,  1054,  1005,  1033,
         1007,   102], device='cuda:0')
got:
tensor([ 3231,  8873,  2571,  1027, 24471,  6894,  2497,  1012,  5227,  1012,
        24471,  4135, 11837,  2121,  1006, 13075,  2692,  1007,   102,  1012,
         4339,  1006,  1005,  2358,  2099,  2692,  1005,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,  1005,  2358,  2099,
         2692,  1005,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,  3828,  1006,  1005,  2358,  2099,  2692,  1005,
         1007,   102,   102,  1005,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  3433,  1027, 11186,  1012,  2131,  1006, 13075,  2692,  1010,
         5460,  1027,  2995,  1007,  2007,  2330,  1006,  1005,  2358,  2099,
         2692,  1005,  1010,  1005, 25610,  1005,  1007,  2004,  5047,  1024,
         2005,  2951,  1999, 28816, 22117,  1006,  3433,  1012,  2009,  2121,
         1035,  4180,  1006,  1007,  1007,  1024,  5047,  1012,  4339,  1006,
         2951,  1007,   102], device='cuda:0')
got:
tensor([ 1031,  1060,  2005,  1060,  1999, 13075,  2692,  2065,  1060,  2003,
         2025,  2358,  2099,  2692,  1033,   102,  1031,  2358,  2099,  2487,
         1033,   102,   102,   102,  1006,  2358,  2099,  2692,  1007,   102,
          102,   102,   102,  1033,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,  1031,  1024,  1010,  1006,  1007,  1033,
          102,   102,   102,   102,   102,   102,   102,   102,  1006,  1031,
         1060,  1033,  1007,   102,   102,   102,   102,   102,   102,  1031,
         1024,  1010,  1006,  1005,  2358,  2099,  2692,  1005,  1007,  1033,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,  1031,  1014,
         1033,   102,  1031,  1014,  1033,   102,   102,  1031,  1014,  1033,
          102,   102,   102,   102,  1031,  1060,  1033,   102,   102,   102,
          102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  1031,  2358,  2099,  2692,  2005,  2358,  2099,  2692,  1999,
         1031,  1005,  9779,  2102,  1005,  1010,  1005,  1060,  6305,  1005,
         1010,  1005, 14405,  1005,  1010,  1005, 23746,  2050,  1005,  1033,
         2065,  1005,  2358,  2099,  2692,  1005,  2025,  1999,  2358,  2099,
         2692,  1998,  1005,  2358,  2099,  2487,  1005,  2025,  1999,  2358,
         2099,  2692,  1033,   102], device='cuda:0')
got:
tensor([1000, 1000, 1000, 2358, 2099, 2549, 1000, 1000, 1000, 1012, 5672, 1006,
        1005, 2358, 2099, 2692, 1005, 1010, 1005, 2358, 2099, 2487, 1005, 1007,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102, 1005,  102,  102, 1005, 1007,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102, 2358, 2099, 2692, 1007,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102], device='cuda:0')
source:
tensor([ 101, 1000, 1000, 1000, 2358, 2099, 2549, 1000, 1000, 1000, 1012, 5672,
        1006, 1005, 2358, 2099, 2509, 1005, 1010, 1005, 1003, 8915, 8737, 1003,
        1005, 1007, 1012, 5672, 1006, 1005, 2358, 2099, 2475, 1005, 1010, 1005,
        2358, 2099, 2509, 1005, 1007, 1012, 5672, 1006, 1005, 1003, 8915, 8737,
        1003, 1005, 1010, 1005, 2358, 2099, 2475, 1005, 1007,  102],
       device='cuda:0')
got:
tensor([ 3231,  8873,  2571,  1027, 24471,  6894,  2497,  1012,  5227,  1012,
        24471,  4135, 11837,  2121,  1006, 13075,  2692,  1010, 13075,  2487,
         1007,   102,  1035,  2047,  1035, 24471,  2140,  1006,  1007,   102,
          102,   102,   102,   102,   102,   102, 13075,  2487,   102,   102,
         1005,  1007,   102,   102,   102,   102,   102,   102,   102, 13075,
         2692,  1010, 13075,  2487,  1007,   102, 13075,  2692,  1027,  2330,
         1006,  1005, 13075,  2487,  1005,  1007,   102,   102,   102, 13075,
         2692,  1005,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102, 13075,  2692,  1005,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102], device='cuda:0')
source:
tensor([  101,  1057,  1027, 24471,  6894,  2497,  1012,  5227,  1012, 24471,
         4135, 11837,  1006, 13075,  2692,  1007,  1042,  1027,  2330,  1006,
        13075,  2487,  1010,  1005, 25610,  1005,  1007, 18804,  1027,  1057,
         1012, 18558,  1006,  1007,  5371,  1035,  2946,  1027, 20014,  1006,
        18804,  1012,  2131,  4974,  2545,  1006,  1005,  4180,  1011,  3091,
         1005,  1007,  1031,  1014,  1033,  1007,  6140,  1006,  1005,  8816,
         2075,  1024,  1003,  1055, 27507,  1024,  1003,  1055,  1005,  1003,
         1006, 13075,  2487,  1010,  5371,  1035,  2946,  1007,  1007,  5371,
         1035,  2946,  1035, 21469,  1027,  1014,  3796,  1035,  1055,  2480,
         1027,  6282,  2683,  2475,  2096,  2995,  1024, 17698,  1027,  1057,
         1012,  3191,  1006,  3796,  1035,  1055,  2480,  1007,  2065,  2025,
        17698,  1024,  3338,  5371,  1035,  2946,  1035, 21469,  1009,  1027,
        18798,  1006, 17698,  1007,  1042,  1012,  4339,  1006, 17698,  1007,
         3570,  1027,  1005,  1003,  2184,  2094,  1031,  1003,  1017,  1012,
         1016,  2546,  1003,  1003,  1033,  1005,  1003,  1006,  5371,  1035,
         2946,  1035, 21469,  1010,  5371,  1035,  2946,  1035, 21469,  1008,
         2531,  1012,  1014,  1013,  5371,  1035,  2946,  1007,  3570,  1027,
         3570,  1009, 10381,  2099,  1006,  1022,  1007,  1008,  1006, 18798,
         1006,  3570,  1007,  1009,  1015,  1007,  6140,  1006,  3570,  1010,
         2203,  1027,  1005,  1005,  1007,  1042,  1012,  2485,  1006,  1007,
          102], device='cuda:0')
--------- B -----------
{'intent': {'gloss': ['function', 'to', 'convert', 'strings', 'into', 'integers'], 'words': ['function', 'to', 'convert', 'strings', 'into', 'integers'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'int()'}
Generated  translation
map ( int, var ) 
--------- B -----------
{'intent': {'gloss': ['count', 'the', 'occurrences', 'of', 'items', 'in', 'list', 'var0'], 'words': ['count', 'the', 'occurrences', 'of', 'items', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': 'counter(var0)'}
Generated  translation
sum ( isinstance ( x, int ) for x in var0 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'tuple', 'var0', 'to', 'list'], 'words': ['convert', 'tuple', 'var0', 'to', 'list'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 't'}, 'snippet': 'list(var0)'}
Generated  translation
[ ( i, int ( j ) ) for i in var0 ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'list', 'var0', 'to', 'tuple'], 'words': ['convert', 'list', 'var0', 'to', 'tuple'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 't'}, 'snippet': 'tuple(l)'}
Generated  translation
map ( int, var0 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'sorted', 'list', 'of', 'keys', 'of', 'dict', 'var0'], 'words': ['get', 'sorted', 'list', 'of', 'keys', 'of', 'dict', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'd'}, 'snippet': 'sorted(var0)'}
Generated  translation
sorted ( var0, key = lambda k : d [ k ] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'length', 'of', 'list', 'var0'], 'words': ['get', 'the', 'length', 'of', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'my_list'}, 'snippet': 'len(var0)'}
Generated  translation
len ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['getting', 'the', 'length', 'of', 'array', 'var0'], 'words': ['getting', 'the', 'length', 'of', 'array', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': 'len(var0)'}
Generated  translation
len ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['getting', 'the', 'length', 'of', 'array', 'var0'], 'words': ['getting', 'the', 'length', 'of', 'array', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': 'len(var0)'}
Generated  translation
len ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['getting', 'the', 'length', 'of', 'var0'], 'words': ['getting', 'the', 'length', 'of', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'my_tuple'}, 'snippet': 'len(var0)'}
Generated  translation
len ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['getting', 'the', 'length', 'of', 'var0'], 'words': ['getting', 'the', 'length', 'of', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'my_string'}, 'snippet': 'len(var0)'}
Generated  translation
len ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'type', 'of', 'var0'], 'words': ['get', 'the', 'type', 'of', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'i'}, 'snippet': 'type(var0)'}
Generated  translation
type ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['determine', 'the', 'type', 'of', 'variable', 'var0'], 'words': ['determine', 'the', 'type', 'of', 'variable', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'v'}, 'snippet': 'type(var0)'}
Generated  translation
isinstance ( var0, str ) 
--------- B -----------
{'intent': {'gloss': ['determine', 'the', 'type', 'of', 'variable', 'var0'], 'words': ['determine', 'the', 'type', 'of', 'variable', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'v'}, 'snippet': 'type(var0)'}
Generated  translation
isinstance ( var0, str ) 
--------- B -----------
{'intent': {'gloss': ['determine', 'the', 'type', 'of', 'variable', 'var0'], 'words': ['determine', 'the', 'type', 'of', 'variable', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'v'}, 'snippet': 'type(var0)'}
Generated  translation
isinstance ( var0, str ) 
--------- B -----------
{'intent': {'gloss': ['determine', 'the', 'type', 'of', 'variable', 'var0'], 'words': ['determine', 'the', 'type', 'of', 'variable', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'v'}, 'snippet': 'type(var0)'}
Generated  translation
isinstance ( var0, str ) 
--------- B -----------
{'intent': {'gloss': ['put', 'the', 'curser', 'at', 'beginning', 'of', 'the', 'file'], 'words': ['put', 'the', 'curser', 'at', 'beginning', 'of', 'the', 'file'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'file.seek(0)'}
Generated  translation
ctypes. windll. file ('\ n ', 1 ) 
--------- B -----------
{'intent': {'gloss': ['make', 'a', 'delay', 'of', '1', 'second'], 'words': ['make', 'a', 'delay', 'of', '1', 'second'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'time.sleep(1)'}
Generated  translation
time. sleep ( 1 ) 
--------- B -----------
{'intent': {'gloss': ['declare', 'an', 'array'], 'words': ['declare', 'an', 'array'], 'after': [' ', ' ', '']}, 'slot_map': {}, 'snippet': 'my_list = []'}
Generated  translation
[ ] 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'by', 'space'], 'words': ['split', 'string', 'var0', 'by', 'space'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'text'}, 'snippet': 'var0.split()'}
Generated  translation
re. split ('\ \ [ (. * ) \ \ ] ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'into', 'a', 'list', 'by', 'whitespace'], 'words': ['split', 'string', 'var0', 'into', 'a', 'list', 'by', 'whitespace'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'line'}, 'snippet': 'var0.split()'}
Generated  translation
[ item. strip ( ) for item in var0. split ( ',') ] 
--------- B -----------
{'intent': {'gloss': ['add', 'a', 'header', 'to', 'a', 'csv', 'file'], 'words': ['add', 'a', 'header', 'to', 'a', 'csv', 'file'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'writer.writeheader()'}
Generated  translation
open ('a ','r'). close ( ) 
--------- B -----------
{'intent': {'gloss': ['calculate', 'sum', 'over', 'all', 'rows', 'of', '2d', 'numpy', 'array'], 'words': ['calculate', 'sum', 'over', 'all', 'rows', 'of', '2d', 'numpy', 'array'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'a.sum(axis=1)'}
Generated  translation
sum ( np. where ( np. arange ( len ( var0 ) ), axis = 1 ) ) 
--------- B -----------
{'intent': {'gloss': ['append', 'elements', 'of', 'a', 'set', 'var0', 'to', 'a', 'list', 'var1'], 'words': ['append', 'elements', 'of', 'a', 'set', 'var0', 'to', 'a', 'list', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'b', 'var1': 'a'}, 'snippet': 'var1.extend(var0)'}
Generated  translation
[ x for x in var0 if x in var1 ] 
--------- B -----------
{'intent': {'gloss': ['removing', 'duplicates', 'in', 'list', 'var0'], 'words': ['removing', 'duplicates', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 't'}, 'snippet': 'list(set(var0))'}
Generated  translation
mynewlist = list ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['removing', 'duplicates', 'in', 'list', 'var0'], 'words': ['removing', 'duplicates', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'source_list'}, 'snippet': 'list(set(var0))'}
Generated  translation
mynewlist = list ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['how', 'to', 'sort', 'dictionaries', 'by', 'keys', 'in', 'python'], 'words': ['how', 'to', 'sort', 'dictionaries', 'by', 'keys', 'in', 'python'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'sorted(d.items())'}
Generated  translation
sorted ( list ( data. items ( ) ), key = lambda t : d [ 1 ] [ 0 ] ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'string', 'str0', 'into', 'integer'], 'words': ['convert', 'string', 'str0', 'into', 'integer'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '1'}, 'snippet': "int('str0')"}
Generated  translation
int ('str0 ', 2 ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'object', 'var0', 'is', 'a', 'string'], 'words': ['check', 'if', 'object', 'var0', 'is', 'a', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'o'}, 'snippet': 'type(var0) is str'}
Generated  translation
isinstance ( var0, str ) 
--------- B -----------
{'intent': {'gloss': ['append', 'list', 'var0', 'to', 'var1'], 'words': ['append', 'list', 'var0', 'to', 'var1'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list1', 'var1': 'list2'}, 'snippet': 'var1.extend(var0)'}
Generated  translation
var1. append ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['append', 'list', 'var0', 'to', 'var1'], 'words': ['append', 'list', 'var0', 'to', 'var1'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylog', 'var1': 'list1'}, 'snippet': 'var1.extend(var0)'}
Generated  translation
var1. append ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['append', 'list', 'var0', 'to', 'var1'], 'words': ['append', 'list', 'var0', 'to', 'var1'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'c'}, 'snippet': 'var1.extend(var0)'}
Generated  translation
var1. append ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['insert', 'item', 'str0', 'to', 'a', 'list', 'var0'], 'words': ['insert', 'item', 'str0', 'to', 'a', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '12', 'var0': 'my_list'}, 'snippet': 'var0.append(12)'}
Generated  translation
var0. insert ( 0,'str0') 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'type', 'of', 'variable', 'var0'], 'words': ['get', 'the', 'type', 'of', 'variable', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'variable_name'}, 'snippet': 'print(type(var0))'}
Generated  translation
getattr ( var0,'var0 ) 
--------- B -----------
{'intent': {'gloss': ['download', 'a', 'file', 'var0', 'over', 'http'], 'words': ['download', 'a', 'file', 'var0', 'over', 'http'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'url'}, 'snippet': 'r = requests.get(var0)'}
Generated  translation
with open ( var0 ) as f : return var0 = f. write ('http : / / www. google. com') 
--------- B -----------
{'intent': {'gloss': ['read', 'keyboard', '-', 'input'], 'words': ['read', 'keyboard', '-', 'input'], 'after': [' ', '', '', '']}, 'slot_map': {}, 'snippet': "input('enter your input:')"}
Generated  translation
read int ( input ('window - input'). split ( ',') ) 
--------- B -----------
{'intent': {'gloss': ['append', 'elements', 'of', 'a', 'set', 'to', 'a', 'list', 'in', 'python'], 'words': ['append', 'elements', 'of', 'a', 'set', 'to', 'a', 'list', 'in', 'python'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'a.extend(list(b))'}
Generated  translation
['hello'for x in set ( ['a ','b'] ) ] 
--------- B -----------
{'intent': {'gloss': ['change', 'working', 'directory', 'to', 'the', 'directory', 'var0'], 'words': ['change', 'working', 'directory', 'to', 'the', 'directory', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'owd'}, 'snippet': 'os.chdir(var0)'}
Generated  translation
os. chdir ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'dictionary', 'var0', 'in', 'ascending', 'order', 'based', 'on', 'its', 'keys', 'and', 'items'], 'words': ['sort', 'dictionary', 'var0', 'in', 'ascending', 'order', 'based', 'on', 'its', 'keys', 'and', 'items'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'o'}, 'snippet': 'sorted(var0.items())'}
Generated  translation
sorted ( list ( var0. items ( ) ), key = lambda k _ v : k. lower ( ) ) 
--------- B -----------
{'intent': {'gloss': ['unzip', 'the', 'list', 'str0'], 'words': ['unzip', 'the', 'list', 'str0'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {'str0': "[('a', 1), ('b', 2), ('c', 3), ('d', 4)]", '[ str0 ]': "[('a', 1), ('b', 2), ('c', 3), ('d', 4)]"}, 'snippet': 'zip(*[ str0 ])'}
Generated  translation
[ str0 ] 
--------- B -----------
{'intent': {'gloss': ['unzip', 'the', 'list', 'str0'], 'words': ['unzip', 'the', 'list', 'str0'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {'str0': "[('a', 1), ('b', 2), ('c', 3), ('d', 4)]", '[ str0 ]': "[('a', 1), ('b', 2), ('c', 3), ('d', 4)]"}, 'snippet': 'zip(*[ str0 ])'}
Generated  translation
[ str0 ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'list', 'str0', 'into', 'a', 'dictionary'], 'words': ['convert', 'list', 'str0', 'into', 'a', 'dictionary'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "[('name', 'joe'), ('age', 22)]", '[ str0 ]': "[('name', 'joe'), ('age', 22)]"}, 'snippet': 'dict([ str0 ])'}
Generated  translation
dict ( map ( lambda s : s. split (':'), [ str0 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['plot', 'dataframe', 'var0', 'without', 'a', 'legend'], 'words': ['plot', 'dataframe', 'var0', 'without', 'a', 'legend'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': 'var0.plot(legend=false)'}
Generated  translation
var0. plot ( x ='fft ', y ='r') 
--------- B -----------
{'intent': {'gloss': ['decode', 'json', 'string', 'str0', 'to', 'python', 'dict'], 'words': ['decode', 'json', 'string', 'str0', 'to', 'python', 'dict'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'request.body'}, 'snippet': 'json.loads(request.body)'}
Generated  translation
json. load ( open ('str0') ) 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'datetime', 'with', 'the', 'current', 'date', '&', 'time'], 'words': ['create', 'a', 'datetime', 'with', 'the', 'current', 'date', '&', 'time'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'datetime.datetime.now()'}
Generated  translation
datetime. datetime. now ( ). date ( ) 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'multi', '-', 'line', 'string', 'var0', 'into', 'separate', 'strings'], 'words': ['split', 'a', 'multi', '-', 'line', 'string', 'var0', 'into', 'separate', 'strings'], 'after': [' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'inputstring'}, 'snippet': "var0.split('\\n')"}
Generated  translation
re. findall ('\ \ w + ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'string', 'var0', 'by', 'space', 'with', 'str0', 'splits'], 'words': ['split', 'a', 'string', 'var0', 'by', 'space', 'with', 'str0', 'splits'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's', 'str0': '4'}, 'snippet': "var0.split(' ', 4)"}
Generated  translation
re. split ('\ \ [. *? \ \ ] ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'key', 'str0', 'from', 'dictionary', 'var0'], 'words': ['remove', 'key', 'str0', 'from', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'ele', 'var0': 'd'}, 'snippet': "del var0['str0']"}
Generated  translation
var0. pop ('str0 ', none ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'tuple', 'var0', 'to', 'list'], 'words': ['convert', 'tuple', 'var0', 'to', 'list'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'level1'}, 'snippet': 'var0 = map(list, var0)'}
Generated  translation
[ ( i, int ( j ) ) for i in var0 ] 
--------- B -----------
{'intent': {'gloss': ['get', 'attribute', 'var0', 'of', 'object', 'var1'], 'words': ['get', 'attribute', 'var0', 'of', 'object', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'my_str', 'var1': 'my_object'}, 'snippet': 'getattr(var1, var0)'}
Generated  translation
getattr ( var1, var0 ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'object', 'var0', 'is', 'a', 'string'], 'words': ['check', 'if', 'object', 'var0', 'is', 'a', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'obj'}, 'snippet': 'isinstance(var0, str)'}
Generated  translation
isinstance ( var0, str ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'object', 'var0', 'is', 'a', 'string'], 'words': ['check', 'if', 'object', 'var0', 'is', 'a', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'o'}, 'snippet': 'isinstance(var0, str)'}
Generated  translation
isinstance ( var0, str ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'object', 'var0', 'is', 'a', 'string'], 'words': ['check', 'if', 'object', 'var0', 'is', 'a', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'o'}, 'snippet': 'isinstance(var0, str)'}
Generated  translation
isinstance ( var0, str ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'var0', 'is', 'a', 'string'], 'words': ['check', 'if', 'var0', 'is', 'a', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'obj_to_test'}, 'snippet': 'isinstance(var0, str)'}
Generated  translation
isinstance ( var0, str ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'path', 'var0', 'is', 'an', 'absolute', 'path'], 'words': ['check', 'if', 'path', 'var0', 'is', 'an', 'absolute', 'path'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'my_path'}, 'snippet': 'os.path.isabs(var0)'}
Generated  translation
os. path. isfile ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['reload', 'a', 'module', 'var0'], 'words': ['reload', 'a', 'module', 'var0'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {'var0': 'module'}, 'snippet': 'import imp\nimp.reload(var0)'}
Generated  translation
exec ( compile ( var0 ). read ( ) ) 
--------- B -----------
{'intent': {'gloss': ['enable', 'debug', 'mode', 'on', 'flask', 'application', 'var0'], 'words': ['enable', 'debug', 'mode', 'on', 'flask', 'application', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'app'}, 'snippet': 'var0.run(debug=true)'}
Generated  translation
var0. debug ('debug') 
--------- B -----------
{'intent': {'gloss': ['how', 'do', 'i', 'get', 'the', 'url', 'parameter', 'in', 'a', 'flask', 'view'], 'words': ['how', 'do', 'i', 'get', 'the', 'url', 'parameter', 'in', 'a', 'flask', 'view'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "request.args['myparam']"}
Generated  translation
od = requests. get ('http : / / www. config') 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'characters', 'count', 'in', 'a', 'file', 'var0'], 'words': ['get', 'the', 'characters', 'count', 'in', 'a', 'file', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'filepath'}, 'snippet': 'os.stat(var0).st_size'}
Generated  translation
with open ( var0 ) as f : f = readline ( ) lines = count ('\ n') while buf : lines + = count ('\ n 
--------- B -----------
{'intent': {'gloss': ['count', 'the', 'occurrences', 'of', 'item', 'str0', 'in', 'list', 'var0'], 'words': ['count', 'the', 'occurrences', 'of', 'item', 'str0', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'a', 'var0': 'l'}, 'snippet': "var0.count('str0')"}
Generated  translation
sum ( item ['str0'] for word in var0 ) 
--------- B -----------
{'intent': {'gloss': ['count', 'the', 'occurrences', 'of', 'item', 'str0', 'in', 'list', 'var0'], 'words': ['count', 'the', 'occurrences', 'of', 'item', 'str0', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'b', 'var0': 'l'}, 'snippet': "var0.count('str0')"}
Generated  translation
sum ( item ['str0'] for word in var0 ) 
--------- B -----------
{'intent': {'gloss': ['copy', 'file', 'var0', 'to', 'directory', 'var1'], 'words': ['copy', 'file', 'var0', 'to', 'directory', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'srcfile', 'var1': 'dstdir'}, 'snippet': 'shutil.copy(var0, var1)'}
Generated  translation
shutil. copy2 ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['how', 'to', 'get', 'a', 'single', 'result', 'from', 'a', 'sqlite', 'query', 'in', 'python', '?'], 'words': ['how', 'to', 'get', 'a', 'single', 'result', 'from', 'a', 'sqlite', 'query', 'in', 'python', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'cursor.fetchone()[0]'}
Generated  translation
some _ result = models. popen ( ['a ','b'] ) 
--------- B -----------
{'intent': {'gloss': ['calculate', 'mean', 'across', 'dimension', 'in', 'a', '2d', 'array', 'var0'], 'words': ['calculate', 'mean', 'across', 'dimension', 'in', 'a', '2d', 'array', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'np.mean(var0, axis=1)'}
Generated  translation
np. sqrt ( ( var0. sum ( axis = 1 ) ). mean ( ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'position', 'of', 'item', 'var0', 'in', 'list', 'var1'], 'words': ['get', 'the', 'position', 'of', 'item', 'var0', 'in', 'list', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'element', 'var1': 'testlist'}, 'snippet': 'print(var1.index(var0))'}
Generated  translation
print ( var1. get ( var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['add', 'key', 'str0', 'to', 'dictionary', 'var0', 'with', 'value', '1'], 'words': ['add', 'key', 'str0', 'to', 'dictionary', 'var0', 'with', 'value', '1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'a', 'var0': 'data'}, 'snippet': 'var0.update(str0=1)'}
Generated  translation
var0 ['str0'] = 1 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'value', 'of', 'datetime', '.', 'today', '(', ')', 'in', 'the', 'utc', 'time', 'zone'], 'words': ['get', 'a', 'value', 'of', 'datetime', '.', 'today', '(', ')', 'in', 'the', 'utc', 'time', 'zone'], 'after': [' ', ' ', ' ', ' ', '', '', '', '', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'datetime.now(pytz.utc)'}
Generated  translation
time. today ( ) + datetime. timedelta ( days = 1 ) 
--------- B -----------
{'intent': {'gloss': ['round', 'off', 'the', 'float', 'that', 'is', 'the', 'product', 'of', 'str0', 'and', 'convert', 'it', 'to', 'an', 'int'], 'words': ['round', 'off', 'the', 'float', 'that', 'is', 'the', 'product', 'of', 'str0', 'and', 'convert', 'it', 'to', 'an', 'int'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '2.52 * 100'}, 'snippet': 'int(round(2.51 * 100))'}
Generated  translation
print ( round ( float ( var0. _ _ dict _ _ ) ) ) 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'by', 'str0'], 'words': ['split', 'string', 'var0', 'by', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'text', 'str0': ','}, 'snippet': "var0.split('str0')"}
Generated  translation
var0. split ('str0') 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'urllib', 'unquoted', 'string', 'var0', 'to', 'a', 'json', 'data', 'var1'], 'words': ['convert', 'a', 'urllib', 'unquoted', 'string', 'var0', 'to', 'a', 'json', 'data', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'unescaped', 'var1': 'json_data'}, 'snippet': 'var1 = json.loads(var0)'}
Generated  translation
var1 = json. dumps ( var0, ensure _ ascii = false ) 
--------- B -----------
{'intent': {'gloss': ['open', 'file', 'var0', 'with', 'mode', 'str0'], 'words': ['open', 'file', 'var0', 'with', 'mode', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'path', 'str0': 'r'}, 'snippet': "open(var0, 'str0')"}
Generated  translation
os. open ( var0,'str0') 
--------- B -----------
{'intent': {'gloss': ['enable', 'warnings', 'using', 'action', 'str0'], 'words': ['enable', 'warnings', 'using', 'action', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'always'}, 'snippet': "warnings.simplefilter('str0')"}
Generated  translation
sys. path. insert ( 0,'str0') 
--------- B -----------
{'intent': {'gloss': ['create', 'new', 'matrix', 'object', 'by', 'concatenating', 'data', 'from', 'matrix', 'a', 'and', 'matrix', 'b'], 'words': ['create', 'new', 'matrix', 'object', 'by', 'concatenating', 'data', 'from', 'matrix', 'a', 'and', 'matrix', 'b'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'np.concatenate((a, b))'}
Generated  translation
numpy. concate matrix ( [ 1, 2, 3 ], axis = 0 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'raw', 'string', 'var0', 'into', 'a', 'normal', 'string'], 'words': ['convert', 'a', 'raw', 'string', 'var0', 'into', 'a', 'normal', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'raw_string'}, 'snippet': "var0.decode('string_escape')"}
Generated  translation
var0 = str ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'raw', 'string', 'var0', 'into', 'a', 'normal', 'string'], 'words': ['convert', 'a', 'raw', 'string', 'var0', 'into', 'a', 'normal', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'raw_byte_string'}, 'snippet': "var0.decode('unicode_escape')"}
Generated  translation
var0 = str ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['cast', 'an', 'int', 'var0', 'to', 'a', 'string', 'and', 'concat', 'to', 'string', 'str0'], 'words': ['cast', 'an', 'int', 'var0', 'to', 'a', 'string', 'and', 'concat', 'to', 'string', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'i', 'str0': 'me'}, 'snippet': "'str0' + str(var0)"}
Generated  translation
" " " str0 " " ". join ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['length', 'of', 'longest', 'element', 'in', 'list', 'var0'], 'words': ['length', 'of', 'longest', 'element', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'words'}, 'snippet': 'len(max(var0, key=len))'}
Generated  translation
length = len ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'value', 'associated', 'with', 'unicode', 'key', 'str0', 'of', 'first', 'dictionary', 'in', 'list', 'var0'], 'words': ['get', 'the', 'value', 'associated', 'with', 'unicode', 'key', 'str0', 'of', 'first', 'dictionary', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'from_user', 'var0': 'result'}, 'snippet': "var0[0]['str0']"}
Generated  translation
[ x ['str0'] for x in var0 ] 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'list', 'from', 'a', 'list', 'var0', 'with', 'values', 'mapped', 'into', 'a', 'dictionary', 'var1'], 'words': ['get', 'a', 'list', 'from', 'a', 'list', 'var0', 'with', 'values', 'mapped', 'into', 'a', 'dictionary', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'lst', 'var1': 'dct'}, 'snippet': '[var1[k] for k in var0]'}
Generated  translation
[ key for item in var0 for key, value in list ( var1. items ( ) ) ] 
--------- B -----------
{'intent': {'gloss': ['get', 'number', 'of', 'keys', 'in', 'dictionary', 'var0'], 'words': ['get', 'number', 'of', 'keys', 'in', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'yourdict'}, 'snippet': 'len(list(var0.keys()))'}
Generated  translation
sum ( len ( x ) for x in list ( var0. items ( ) ) ) 
--------- B -----------
{'intent': {'gloss': ['reverse', 'a', 'priority', 'queue', 'var0', 'in', 'python', 'without', 'using', 'classes'], 'words': ['reverse', 'a', 'priority', 'queue', 'var0', 'in', 'python', 'without', 'using', 'classes'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'q'}, 'snippet': 'var0.put((-n, n))'}
Generated  translation
var0. set _ index ('var0') 
--------- B -----------
{'intent': {'gloss': ['remove', 'directory', 'tree', 'str0'], 'words': ['remove', 'directory', 'tree', 'str0'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {'str0': '/folder_name'}, 'snippet': "shutil.rmtree('str0')"}
Generated  translation
os. system ('str0') 
--------- B -----------
{'intent': {'gloss': ['numpy', 'concatenate', 'two', 'arrays', 'var0', 'and', 'var1', 'along', 'the', 'first', 'axis'], 'words': ['numpy', 'concatenate', 'two', 'arrays', 'var0', 'and', 'var1', 'along', 'the', 'first', 'axis'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'b'}, 'snippet': 'np.array((var0, var1))'}
Generated  translation
numpy. concatenate ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['select', 'the', 'last', 'column', 'of', 'dataframe', 'var0'], 'words': ['select', 'the', 'last', 'column', 'of', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': 'var0[var0.columns[-1]]'}
Generated  translation
var0. ix [ :, ( var0. tail ) ] 
--------- B -----------
{'intent': {'gloss': ['join', 'a', 'list', 'of', 'strings', 'var0', 'using', 'a', 'space', 'str0'], 'words': ['join', 'a', 'list', 'of', 'strings', 'var0', 'using', 'a', 'space', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list', 'str0': ''}, 'snippet': '""" """.join(var0)'}
Generated  translation
var0. join ( ['str0'] ) 
--------- B -----------
{'intent': {'gloss': ['drop', 'rows', 'of', 'pandas', 'dataframe', 'var0', 'having', 'nan', 'in', 'column', 'at', 'index', 'str0'], 'words': ['drop', 'rows', 'of', 'pandas', 'dataframe', 'var0', 'having', 'nan', 'in', 'column', 'at', 'index', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': '1'}, 'snippet': 'var0.dropna(subset=[1])'}
Generated  translation
var0. fillna ( method ='str0 ', inplace = true ) 
--------- B -----------
{'intent': {'gloss': ['reverse', 'the', 'list', 'that', 'contains', '1', 'to', '10'], 'words': ['reverse', 'the', 'list', 'that', 'contains', '1', 'to', '10'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'list(reversed(list(range(10))))'}
Generated  translation
[ i for i in range ( 1, 10 ) if i! = 10 ] 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'str0', 'into', 'a', 'list', 'on', 'white', 'spaces'], 'words': ['split', 'string', 'str0', 'into', 'a', 'list', 'on', 'white', 'spaces'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'qh qd jc kd js'}, 'snippet': '"""str0""".split()'}
Generated  translation
" " " str0 " " ". split ( ',') 
--------- B -----------
{'intent': {'gloss': ['erase', 'all', 'the', 'contents', 'of', 'a', 'file', 'var0'], 'words': ['erase', 'all', 'the', 'contents', 'of', 'a', 'file', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'filename'}, 'snippet': "open(var0, 'w').close()"}
Generated  translation
open ('var0 ','w'). close ( ) 
--------- B -----------
{'intent': {'gloss': ['add', 'indexes', 'in', 'a', 'data', 'frame', 'var0', 'to', 'a', 'column', 'var1'], 'words': ['add', 'indexes', 'in', 'a', 'data', 'frame', 'var0', 'to', 'a', 'column', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'var1': 'index1'}, 'snippet': "var0['var1'] = var0.index"}
Generated  translation
var0 ['var1'] = var0 ['var1']. append ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'list', 'containing', 'flattened', 'list', 'str0'], 'words': ['create', 'a', 'list', 'containing', 'flattened', 'list', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "[['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]", '[ str0 ]': "[['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]"}, 'snippet': 'values = sum([ str0 ], [])'}
Generated  translation
[ str0 ] 
--------- B -----------
{'intent': {'gloss': ['replace', 'spaces', 'with', 'underscore'], 'words': ['replace', 'spaces', 'with', 'underscore'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "mystring.replace(' ', '_')"}
Generated  translation
re. sub ('(? < = [ a - z ] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'an', 'absolute', 'file', 'path', 'of', 'file', 'str0'], 'words': ['get', 'an', 'absolute', 'file', 'path', 'of', 'file', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'mydir/myfile.txt'}, 'snippet': "os.path.abspath('str0')"}
Generated  translation
os. path. abspath ( str0 ) 
--------- B -----------
{'intent': {'gloss': ['check', 'characters', 'of', 'string', 'var0', 'are', 'true', 'predication', 'of', 'function', 'var1'], 'words': ['check', 'characters', 'of', 'string', 'var0', 'are', 'true', 'predication', 'of', 'function', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'string', 'var1': 'predicate'}, 'snippet': 'all(var1(x) for x in var0)'}
Generated  translation
' var1'in list ( var0. items ( ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'attribute', 'str0', 'from', 'object', 'var0'], 'words': ['get', 'attribute', 'str0', 'from', 'object', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'attr', 'var0': 'obj'}, 'snippet': "getattr(var0, 'str0')"}
Generated  translation
getattr ( var0,'str0') 
--------- B -----------
{'intent': {'gloss': ['create', 'var0', 'to', 'contain', 'the', 'lists', 'from', 'list', 'var1', 'excluding', 'the', 'empty', 'lists', 'from', 'var1'], 'words': ['create', 'var0', 'to', 'contain', 'the', 'lists', 'from', 'list', 'var1', 'excluding', 'the', 'empty', 'lists', 'from', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list2', 'var1': 'list1', 'var2': 'list1'}, 'snippet': 'var0 = [x for x in var2 if x]'}
Generated  translation
[ var0 for var2 in range ( len ( var1 ) ) if var0 ] 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'based', 'on', 'occurrences', 'of', 'regex', 'pattern', 'str0'], 'words': ['split', 'string', 'var0', 'based', 'on', 'occurrences', 'of', 'regex', 'pattern', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'input', 'str0': '[ ](?=[a-z]+\\b)', '[ str0 )': '[ ](?=[a-z]+\\b)'}, 'snippet': "re.split('str0', var0)"}
Generated  translation
re. split ('str0 ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['place', 'the', 'radial', 'ticks', 'in', 'plot', 'var0', 'at', '135', 'degrees'], 'words': ['place', 'the', 'radial', 'ticks', 'in', 'plot', 'var0', 'at', '135', 'degrees'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'ax'}, 'snippet': 'var0.set_rlabel_position(135)'}
Generated  translation
var0. objects. annotate ( like _ count = 200 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'html', 'source', 'of', 'selenium', 'webelement', 'var0'], 'words': ['get', 'html', 'source', 'of', 'selenium', 'webelement', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'element'}, 'snippet': "var0.get_attribute('innerhtml')"}
Generated  translation
driver. find _ element _ by _ xpath ( " / / option [ @ id ='click'] / / a [ @ class ='click'] " ) 
--------- B -----------
{'intent': {'gloss': ['add', 'an', 'entry', 'str0', 'at', 'the', 'beginning', 'of', 'list', 'var0'], 'words': ['add', 'an', 'entry', 'str0', 'at', 'the', 'beginning', 'of', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'wuggah', 'var0': 'mylist'}, 'snippet': "var0.insert(0, 'str0')"}
Generated  translation
var0 ='str0'+ var0 [ 1 : ] 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'last', 'key', 'of', 'dictionary', 'var0'], 'words': ['get', 'the', 'last', 'key', 'of', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'dict'}, 'snippet': 'list(var0.keys())[-1]'}
Generated  translation
var0 [ - 1 ] 
--------- B -----------
{'intent': {'gloss': ['write', 'line', 'str0', 'to', 'file', 'var0'], 'words': ['write', 'line', 'str0', 'to', 'file', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'hi there', 'var0': 'f'}, 'snippet': "print('str0', file=var0)"}
Generated  translation
var0. write ('str0') 
--------- B -----------
{'intent': {'gloss': ['add', 'a', 'new', 'axis', 'to', 'array', 'var0'], 'words': ['add', 'a', 'new', 'axis', 'to', 'array', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'var0[:, (np.newaxis)]'}
Generated  translation
var0 = np. concatenate ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['open', 'a', 'file', 'str0', 'in', 'append', 'mode'], 'words': ['open', 'a', 'file', 'str0', 'in', 'append', 'mode'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'output.txt'}, 'snippet': "file = open('str0', 'a')"}
Generated  translation
f = open ('str0 ','wb') 
--------- B -----------
{'intent': {'gloss': ['format', 'string', 'str0'], 'words': ['format', 'string', 'str0'], 'after': [' ', ' ', '']}, 'slot_map': {'str0': '({0.goals} goals, ${0.penalties})', '( str0 )': '({0.goals} goals, ${0.penalties})'}, 'snippet': '"""str0""".format(self)'}
Generated  translation
" " " str0 " " ". format ('str0') 
--------- B -----------
{'intent': {'gloss': ['concat', 'two', 'matrices', 'var0', 'and', 'var1', 'in', 'numpy'], 'words': ['concat', 'two', 'matrices', 'var0', 'and', 'var1', 'in', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'b'}, 'snippet': 'np.vstack((var0, var1))'}
Generated  translation
numpy. concat ( [ ( x, var1 ), ( 0, 2 ) ] ) 
--------- B -----------
{'intent': {'gloss': ['send', 'the', 'output', 'of', 'pprint', 'object', 'var0', 'to', 'file', 'var1'], 'words': ['send', 'the', 'output', 'of', 'pprint', 'object', 'var0', 'to', 'file', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'dataobject', 'var1': 'logfile'}, 'snippet': 'pprint.pprint(var0, var1)'}
Generated  translation
var1 = subprocess. check _ output ( var0, var1 = p. var0 ) 
--------- B -----------
{'intent': {'gloss': ['iterate', 'ove', 'list', 'str0', 'using', 'list', 'comprehension'], 'words': ['iterate', 'ove', 'list', 'str0', 'using', 'list', 'comprehension'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '[1, 2, 3]', '[ str0 ]': '[1, 2, 3]'}, 'snippet': 'print([item for item in [ str0 ]])'}
Generated  translation
[ dict ( x ) for x in str0. split ( ',') ] 
--------- B -----------
{'intent': {'gloss': ['get', 'filename', 'without', 'extension', 'from', 'file', 'var0'], 'words': ['get', 'filename', 'without', 'extension', 'from', 'file', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'filename'}, 'snippet': 'os.path.splitext(var0)[0]'}
Generated  translation
os. path. split ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'objects', 'var0', ',', 'based', 'on', 'a', 'function', 'var1', 'in', 'descending', 'order'], 'words': ['sort', 'a', 'list', 'of', 'objects', 'var0', ',', 'based', 'on', 'a', 'function', 'var1', 'in', 'descending', 'order'], 'after': [' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'ut', 'var1': 'cmpfun'}, 'snippet': 'var0.sort(key=var1, reverse=true)'}
Generated  translation
var0. sort ( key = lambda x : var1. index ( x ['var0'] ), reverse = true ) 
--------- B -----------
{'intent': {'gloss': ['call', 'a', 'shell', 'script', 'var0', 'using', 'subprocess'], 'words': ['call', 'a', 'shell', 'script', 'var0', 'using', 'subprocess'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'notepad'}, 'snippet': "subprocess.call(['var0'])"}
Generated  translation
subprocess. call ('test. sh otherfunc') 
--------- B -----------
{'intent': {'gloss': ['call', 'a', 'base', 'class', "'", 's', 'class', 'method', 'var0', 'from', 'derived', 'class', 'var1'], 'words': ['call', 'a', 'base', 'class', "'", 's', 'class', 'method', 'var0', 'from', 'derived', 'class', 'var1'], 'after': [' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'do', 'var1': 'derived'}, 'snippet': 'super(var1, cls).var0(a)'}
Generated  translation
super ( var0, self ). _ _ init _ _ ( * args, * * kwargs ) 
--------- B -----------
{'intent': {'gloss': ['open', 'a', 'file', 'str0', 'in', 'write', 'mode'], 'words': ['open', 'a', 'file', 'str0', 'in', 'write', 'mode'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'yourfile.txt'}, 'snippet': "f = open('str0', 'w')"}
Generated  translation
output = open ('str0 ','wb') 
--------- B -----------
{'intent': {'gloss': ['find', 'maximal', 'value', 'in', 'matrix', 'var0'], 'words': ['find', 'maximal', 'value', 'in', 'matrix', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'matrix'}, 'snippet': 'max([max(i) for i in var0])'}
Generated  translation
numpy. flatgetter ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['round', 'number', 'var0', 'to', '2', 'precision', 'after', 'the', 'decimal', 'point'], 'words': ['round', 'number', 'var0', 'to', '2', 'precision', 'after', 'the', 'decimal', 'point'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'answer'}, 'snippet': 'var0 = str(round(var0, 2))'}
Generated  translation
round ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'list', 'of', 'values', 'from', 'dictionary', 'str0', 'w', '.', 'r', '.', 't', '.', 'list', 'of', 'keys', 'str1'], 'words': ['get', 'list', 'of', 'values', 'from', 'dictionary', 'str0', 'w', '.', 'r', '.', 't', '.', 'list', 'of', 'keys', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'mydict', 'str1': 'mykeys'}, 'snippet': '[str0[x] for x in str1]'}
Generated  translation
[ value for item in str1 if x ['str0'] = ='str1'] 
--------- B -----------
{'intent': {'gloss': ['append', 'items', 'in', 'list', 'var0', 'to', 'var1'], 'words': ['append', 'items', 'in', 'list', 'var0', 'to', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylog', 'var1': 'list1'}, 'snippet': 'for line in var0:\n    var1.append(line)'}
Generated  translation
var1. append ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['truncate', 'float', '1', '.', '923328437452', 'to', '3', 'decimal', 'places'], 'words': ['truncate', 'float', '1', '.', '923328437452', 'to', '3', 'decimal', 'places'], 'after': [' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'round(1.923328437452, 3)'}
Generated  translation
' %. 2f'% 3. 923328432 
--------- B -----------
{'intent': {'gloss': ['extract', 'attributes', 'str0', 'from', 'string', 'var0'], 'words': ['extract', 'attributes', 'str0', 'from', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'src="js/([^"]*\\bjquery\\b[^"]*)"', 'var0': 'data'}, 'snippet': "re.findall('str0', var0)"}
Generated  translation
print ( ['str0 '. join ( c ) for c in var0 ] ) 
--------- B -----------
{'intent': {'gloss': ['find', 'all', 'matches', 'of', 'regex', 'pattern', 'str0', 'in', 'string', 'var0'], 'words': ['find', 'all', 'matches', 'of', 'regex', 'pattern', 'str0', 'in', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '([a-fa-f\\d]{32})', 'var0': 'data', '( str0 )': '([a-fa-f\\d]{32})'}, 'snippet': "re.findall('str0', var0)"}
Generated  translation
re. findall ('str0 ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', '401', 'unauthorized', 'in', 'django'], 'words': ['return', 'a', '401', 'unauthorized', 'in', 'django'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "return httpresponse('unauthorized', status=401)"}
Generated  translation
401 
--------- B -----------
{'intent': {'gloss': ['create', 'list', 'var0', 'containing', 'two', 'empty', 'lists'], 'words': ['create', 'list', 'var0', 'containing', 'two', 'empty', 'lists'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'y'}, 'snippet': 'var0 = [[] for n in range(2)]'}
Generated  translation
var0 = [ [ ] for i in range ( len ( var0 ) ) ] 
--------- B -----------
{'intent': {'gloss': ['converting', 'list', 'of', 'strings', 'var0', 'to', 'list', 'of', 'integer', 'var1'], 'words': ['converting', 'list', 'of', 'strings', 'var0', 'to', 'list', 'of', 'integer', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'intstringlist', 'var1': 'nums'}, 'snippet': 'var1 = [int(x) for x in var0]'}
Generated  translation
[ int ( x ) for x in var1 ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'int', 'values', 'in', 'list', 'var0', 'to', 'float'], 'words': ['convert', 'int', 'values', 'in', 'list', 'var0', 'to', 'float'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'numlist'}, 'snippet': 'var0 = [float(x) for x in var0]'}
Generated  translation
[ float ( x ) for x in var0 ] 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'list', 'containing', 'all', 'ascii', 'characters', 'as', 'its', 'elements'], 'words': ['create', 'a', 'list', 'containing', 'all', 'ascii', 'characters', 'as', 'its', 'elements'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': '[chr(i) for i in range(127)]'}
Generated  translation
list ('str0') 
--------- B -----------
{'intent': {'gloss': ['concatenate', 'a', 'list', 'of', 'strings', 'str0'], 'words': ['concatenate', 'a', 'list', 'of', 'strings', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "['a', 'b', 'c']", '[ str0 ]': "['a', 'b', 'c']"}, 'snippet': '"""""".join([ str0 ])'}
Generated  translation
" " " " " ". join ( str0 ) 
--------- B -----------
{'intent': {'gloss': ['create', '3d', 'array', 'of', 'zeroes', 'of', 'size', 'str0'], 'words': ['create', '3d', 'array', 'of', 'zeroes', 'of', 'size', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '(3,3,3)', '( str0 )': '(3,3,3)'}, 'snippet': 'numpy.zeros((3, 3, 3))'}
Generated  translation
np. einsum ('ijk, ikl - > ijl') 
--------- B -----------
{'intent': {'gloss': ['join', 'elements', 'of', 'list', 'var0', 'with', 'a', 'comma', 'str0'], 'words': ['join', 'elements', 'of', 'list', 'var0', 'with', 'a', 'comma', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l', 'str0': ','}, 'snippet': '"""str0""".join(var0)'}
Generated  translation
[ ( x, y ) for x, y in zip ( var0, var0 ) ] 
--------- B -----------
{'intent': {'gloss': ['filter', 'rows', 'in', 'pandas', 'starting', 'with', 'alphabet', 'str0', 'using', 'regular', 'expression', '.'], 'words': ['filter', 'rows', 'in', 'pandas', 'starting', 'with', 'alphabet', 'str0', 'using', 'regular', 'expression', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'f'}, 'snippet': "df.b.str.contains('^f')"}
Generated  translation
df. groupby ('str0'). filter ( lambda x : x. groupby ('str0') ) 
--------- B -----------
{'intent': {'gloss': ['initialize', 'a', 'list', 'var0', 'of', '100', 'objects', 'object', '(', ')'], 'words': ['initialize', 'a', 'list', 'var0', 'of', '100', 'objects', 'object', '(', ')'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '']}, 'slot_map': {'var0': 'lst'}, 'snippet': 'var0 = [object() for _ in range(100)]'}
Generated  translation
var0 = [ [ ] for i in range ( 100 ) ] 
--------- B -----------
{'intent': {'gloss': ['get', 'reverse', 'of', 'list', 'items', 'from', 'list', 'str0', 'using', 'extended', 'slicing'], 'words': ['get', 'reverse', 'of', 'list', 'items', 'from', 'list', 'str0', 'using', 'extended', 'slicing'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'b'}, 'snippet': '[x[::-1] for x in str0]'}
Generated  translation
[ row [ 1 : ] for item in range ( len ( str0 ) ) ] 
--------- B -----------
{'intent': {'gloss': ['removing', 'duplicates', 'in', 'list', 'var0'], 'words': ['removing', 'duplicates', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'abracadabra'}, 'snippet': "list(ordereddict.fromkeys('var0'))"}
Generated  translation
mynewlist = list ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['call', 'a', 'shell', 'script', 'str0', 'using', 'subprocess'], 'words': ['call', 'a', 'shell', 'script', 'str0', 'using', 'subprocess'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': './test.sh'}, 'snippet': "subprocess.call(['str0'])"}
Generated  translation
subprocess. call ('str0 ', shell = true ) 
--------- B -----------
{'intent': {'gloss': ['separate', 'words', 'delimited', 'by', 'one', 'or', 'more', 'spaces', 'into', 'a', 'list'], 'words': ['separate', 'words', 'delimited', 'by', 'one', 'or', 'more', 'spaces', 'into', 'a', 'list'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "re.split(' +', 'hello world sample text')"}
Generated  translation
re. findall ('\ \ w + ', string ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'list', 'into', 'a', 'generator', 'object'], 'words': ['convert', 'a', 'list', 'into', 'a', 'generator', 'object'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': '(n for n in [1, 2, 3, 5])'}
Generated  translation
return list ( range ( 1 ) ) 
--------- B -----------
{'intent': {'gloss': ['encode', 'str0', 'to', 'a', 'json', 'string'], 'words': ['encode', 'str0', 'to', 'a', 'json', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "decimal('3.9')"}, 'snippet': "json.dumps(decimal('3.9'))"}
Generated  translation
json. encode ('utf - 8') 
--------- B -----------
{'intent': {'gloss': ['add', 'key', 'str0', 'to', 'dictionary', 'var0', 'with', 'value', 'str1'], 'words': ['add', 'key', 'str0', 'to', 'dictionary', 'var0', 'with', 'value', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'mynewkey', 'var0': 'd', 'str1': 'mynewvalue'}, 'snippet': "var0['str0'] = 'str1'"}
Generated  translation
var0 ['str0'] = 3 
--------- B -----------
{'intent': {'gloss': ['add', 'key', 'str0', 'to', 'dictionary', 'var0', 'with', 'value', '1'], 'words': ['add', 'key', 'str0', 'to', 'dictionary', 'var0', 'with', 'value', '1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'a', 'var0': 'data'}, 'snippet': "var0.update({'str0': 1})"}
Generated  translation
var0 ['str0'] = 1 
--------- B -----------
{'intent': {'gloss': ['add', 'key', 'str0', 'to', 'dictionary', 'var0', 'with', 'value', '1'], 'words': ['add', 'key', 'str0', 'to', 'dictionary', 'var0', 'with', 'value', '1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'a', 'var0': 'data'}, 'snippet': 'var0.update(dict(str0=1))'}
Generated  translation
var0 ['str0'] = 1 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'string', 'into', 'a', 'list', 'of', 'words', 'and', 'whitespace'], 'words': ['split', 'a', 'string', 'into', 'a', 'list', 'of', 'words', 'and', 'whitespace'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "re.split('(\\\\w+)', s)"}
Generated  translation
[ s. strip ( ) for s in re. findall ('\ \ s ','hello \ \ s') ] 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'integer', 'location', 'of', 'a', 'key', 'var0', 'in', 'a', 'pandas', 'data', 'frame'], 'words': ['get', 'the', 'integer', 'location', 'of', 'a', 'key', 'var0', 'in', 'a', 'pandas', 'data', 'frame'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'bob'}, 'snippet': "df.index.get_loc('var0')"}
Generated  translation
df ['var0']. str. get ('var0') 
--------- B -----------
{'intent': {'gloss': ['add', 'an', 'item', 'with', 'key', 'str0', 'and', 'value', '1', 'to', 'an', 'dictionary', 'var0'], 'words': ['add', 'an', 'item', 'with', 'key', 'str0', 'and', 'value', '1', 'to', 'an', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'third_key', 'var0': 'my_dict'}, 'snippet': "var0.update({'str0': 1})"}
Generated  translation
var0 ['str0'] = 1 
--------- B -----------
{'intent': {'gloss': ['print', 'a', 'string', 'var0', 'with', 'string', 'format'], 'words': ['print', 'a', 'string', 'var0', 'with', 'string', 'format'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'word'}, 'snippet': 'print(\'"{}"\'.format(var0))'}
Generated  translation
print ('value is " { } " '. format ( var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['print', 'str0', 'without', 'newline'], 'words': ['print', 'str0', 'without', 'newline'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {'str0': '.'}, 'snippet': "sys.stdout.write('str0')"}
Generated  translation
print ('\ n '. join ('% s'% ( 1, 2 ) ) 
--------- B -----------
{'intent': {'gloss': ['concatenate', 'array', 'of', 'strings', 'str0', 'into', 'a', 'string'], 'words': ['concatenate', 'array', 'of', 'strings', 'str0', 'into', 'a', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "['a', 'b', 'c', 'd']", '[ str0 ]': "['a', 'b', 'c', 'd']"}, 'snippet': '"""""".join([ str0 ])'}
Generated  translation
" " " " " ". join ( [ str0 ] ) 
--------- B -----------
{'intent': {'gloss': ['write', 'dataframe', 'var0', ',', 'excluding', 'index', ',', 'to', 'a', 'csv', 'file'], 'words': ['write', 'dataframe', 'var0', ',', 'excluding', 'index', ',', 'to', 'a', 'csv', 'file'], 'after': [' ', ' ', '', ' ', ' ', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': 'var0.to_csv(filename, index=false)'}
Generated  translation
var0. to _ csv ('csv ', index = false ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'unicode', 'string', 'var0', 'to', 'ascii'], 'words': ['convert', 'unicode', 'string', 'var0', 'to', 'ascii'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': "var0.encode('iso-8859-15')"}
Generated  translation
var0. encode ('ascii ','ignore') 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'all', 'elements', 'in', 'list', 'var0', 'are', 'identical'], 'words': ['check', 'if', 'all', 'elements', 'in', 'list', 'var0', 'are', 'identical'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylist'}, 'snippet': 'all(x == var0[0] for x in var0)'}
Generated  translation
len ( set ( var0 ) ) = = 1 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'first', 'object', 'from', 'a', 'queryset', 'in', 'django', 'model', 'var0'], 'words': ['get', 'the', 'first', 'object', 'from', 'a', 'queryset', 'in', 'django', 'model', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'entry'}, 'snippet': 'var0.objects.filter()[:1].get()'}
Generated  translation
var0. objects. order _ by ('- pet _ _ age') [ 0 ] 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'str0', 'using', 'a', 'regex', 'str1'], 'words': ['split', 'string', 'str0', 'using', 'a', 'regex', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'words, words, words.', 'str1': '(\\w+)', '( str1 )': '(\\w+)'}, 'snippet': "re.split('str1', 'str0')"}
Generated  translation
re. split ('str1 ','str0') 
--------- B -----------
{'intent': {'gloss': ['sum', 'elements', 'at', 'index', 'var0', 'of', 'each', 'list', 'in', 'list', 'var1'], 'words': ['sum', 'elements', 'at', 'index', 'var0', 'of', 'each', 'list', 'in', 'list', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'column', 'var1': 'data'}, 'snippet': 'print(sum(row[var0] for row in var1))'}
Generated  translation
sum ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['flatten', 'list', 'var0'], 'words': ['flatten', 'list', 'var0'], 'after': [' ', ' ', '']}, 'slot_map': {'var0': 'list_of_menuitems'}, 'snippet': '[image for menuitem in var0 for image in menuitem]'}
Generated  translation
var0 = [ i [ 0 ] for i in var0 ] 
--------- B -----------
{'intent': {'gloss': ['create', 'array', 'containing', 'the', 'maximum', 'value', 'of', 'respective', 'elements', 'of', 'array', 'str0', 'and', 'array', 'str1'], 'words': ['create', 'array', 'containing', 'the', 'maximum', 'value', 'of', 'respective', 'elements', 'of', 'array', 'str0', 'and', 'array', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '[2, 3, 4]', 'str1': '[1, 5, 2]', '[ str0 ]': '[2, 3, 4]', '[ str1 ]': '[1, 5, 2]'}, 'snippet': 'np.maximum([ str0 ], [ str1 ])'}
Generated  translation
np. zeros ( ( 6, 9, 10 ) ) + np. array ( [ str0 ] ) [ ( none ), :, ( none ) ] 
--------- B -----------
{'intent': {'gloss': ['print', 'a', 'list', 'var0', 'and', 'move', 'first', '3', 'elements', 'to', 'the', 'end', 'of', 'the', 'list'], 'words': ['print', 'a', 'list', 'var0', 'and', 'move', 'first', '3', 'elements', 'to', 'the', 'end', 'of', 'the', 'list'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': 'print(var0[3:] + var0[:3])'}
Generated  translation
print ( var0 [ - 3 : ] ) 
--------- B -----------
{'intent': {'gloss': ['count', 'non', 'zero', 'values', 'in', 'each', 'column', 'in', 'pandas', 'data', 'frame'], 'words': ['count', 'non', 'zero', 'values', 'in', 'each', 'column', 'in', 'pandas', 'data', 'frame'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'df.astype(bool).sum(axis=1)'}
Generated  translation
df. apply ( lambda x : x. isnan, axis = 0 ) 
--------- B -----------
{'intent': {'gloss': ['search', 'for', 'string', 'that', 'matches', 'regular', 'expression', 'pattern', 'str0', 'in', 'string', 'str1'], 'words': ['search', 'for', 'string', 'that', 'matches', 'regular', 'expression', 'pattern', 'str0', 'in', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '(?<!distillr)\\\\acrotray\\.exe', 'str1': 'c:\\somedir\\acrotray.exe'}, 'snippet': "re.search('str0', 'str1')"}
Generated  translation
re. search ('str0 ', str1 ). group ( 1 ) 
--------- B -----------
{'intent': {'gloss': ['loop', 'over', 'a', 'list', 'var0', 'if', 'sublists', 'length', 'equals', '3'], 'words': ['loop', 'over', 'a', 'list', 'var0', 'if', 'sublists', 'length', 'equals', '3'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylist'}, 'snippet': '[x for x in var0 if len(x) == 3]'}
Generated  translation
[ item for item in var0 if item. split ( ',') ] 
--------- B -----------
{'intent': {'gloss': ['create', 'list', 'var0', 'containing', '100', 'instances', 'of', 'object', 'var1'], 'words': ['create', 'list', 'var0', 'containing', '100', 'instances', 'of', 'object', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'lst', 'var1': 'object'}, 'snippet': 'var0 = [var1() for i in range(100)]'}
Generated  translation
var0 = [ x for x in var1 if x. isdigit ( ) ] 
--------- B -----------
{'intent': {'gloss': ['joining', 'data', 'from', 'dataframe', 'var0', 'with', 'data', 'from', 'dataframe', 'var1', 'based', 'on', 'matching', 'values', 'of', 'column', 'str0', 'in', 'both', 'dataframes'], 'words': ['joining', 'data', 'from', 'dataframe', 'var0', 'with', 'data', 'from', 'dataframe', 'var1', 'based', 'on', 'matching', 'values', 'of', 'column', 'str0', 'in', 'both', 'dataframes'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df1', 'var1': 'df2', 'str0': 'date_time'}, 'snippet': "var0.merge(var1, on='str0')"}
Generated  translation
s1 = pd. merge ( var0, var1, how ='inner ', on = ['str0'] ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'a', 'directory', 'var0', 'exists', 'and', 'create', 'it', 'if', 'necessary'], 'words': ['check', 'if', 'a', 'directory', 'var0', 'exists', 'and', 'create', 'it', 'if', 'necessary'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'path'}, 'snippet': 'distutils.dir_util.mkpath(var0)'}
Generated  translation
os. path. commonprefix ( ['var0 ','some _ f'] ) 
--------- B -----------
{'intent': {'gloss': ['access', 'a', 'tag', 'called', 'str0', 'in', 'beautifulsoup', 'var0'], 'words': ['access', 'a', 'tag', 'called', 'str0', 'in', 'beautifulsoup', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'name', 'var0': 'soup'}, 'snippet': "print(var0.find('str0').string)"}
Generated  translation
var0. find _ all ('str0') 
--------- B -----------
{'intent': {'gloss': ['get', 'index', 'of', 'rows', 'in', 'column', 'str0'], 'words': ['get', 'index', 'of', 'rows', 'in', 'column', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'boolcol'}, 'snippet': "df.loc[df['str0']]"}
Generated  translation
df ['str0']. index ('str0') 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'on', 'white', 'spaces'], 'words': ['split', 'string', 'var0', 'on', 'white', 'spaces'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'my_string'}, 'snippet': '""" """.join(var0.split())'}
Generated  translation
re. findall ('\ \ s + ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['shuffle', 'columns', 'of', 'an', 'numpy', 'array', 'str0'], 'words': ['shuffle', 'columns', 'of', 'an', 'numpy', 'array', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'r'}, 'snippet': 'np.random.shuffle(np.transpose(str0))'}
Generated  translation
np. mean ( np. trace ( [ str0 ] ), axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'items', 'in', 'var0', 'to', 'integers'], 'words': ['convert', 'items', 'in', 'var0', 'to', 'integers'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 't1'}, 'snippet': 't2 = [map(int, x) for x in var0]'}
Generated  translation
int ( str ( i ) for i in var0 ) 
--------- B -----------
{'intent': {'gloss': ['encode', 'string', 'str0'], 'words': ['encode', 'string', 'str0'], 'after': [' ', ' ', '']}, 'slot_map': {'str0': 'data to be encoded'}, 'snippet': "encoded = base64.b64encode('str0')"}
Generated  translation
" " " str0 " " ". encode ('latin - 1') 
--------- B -----------
{'intent': {'gloss': ['encode', 'a', 'string', 'str0', 'to', 'var0', 'encoding'], 'words': ['encode', 'a', 'string', 'str0', 'to', 'var0', 'encoding'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'data to be encoded', 'var0': 'ascii'}, 'snippet': "encoded = 'str0'.encode('var0')"}
Generated  translation
var0. encode ('str0') 
--------- B -----------
{'intent': {'gloss': ['convert', 'unicode', 'string', 'ustr0', 'into', 'dictionary'], 'words': ['convert', 'unicode', 'string', 'ustr0', 'into', 'dictionary'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "{'code1':1,'code2':1}", '{ str0 }': "{'code1':1,'code2':1}"}, 'snippet': "d = ast.literal_eval('str0')"}
Generated  translation
dict ( map ( int, x. split (':') ) for x in s. split ( ',') ) 
--------- B -----------
{'intent': {'gloss': ['open', 'a', 'file', 'str0', 'in', 'write', 'mode'], 'words': ['open', 'a', 'file', 'str0', 'in', 'write', 'mode'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'path/to/file_name.ext'}, 'snippet': "new_file = open('str0', 'w')"}
Generated  translation
output = open ('str0 ','wb') 
--------- B -----------
{'intent': {'gloss': ['convert', 'tuple', 'of', 'tuples', 'str0', 'to', 'list', 'in', 'one', 'line'], 'words': ['convert', 'tuple', 'of', 'tuples', 'str0', 'to', 'list', 'in', 'one', 'line'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "(('aa',), ('bb',), ('cc',))", '( str0 )': "(('aa',), ('bb',), ('cc',))"}, 'snippet': 'map(lambda a: a[0], ( str0 ))'}
Generated  translation
[ list ( t ) for t in str0 ] 
--------- B -----------
{'intent': {'gloss': ['plotting', 'stacked', 'barplots', 'on', 'a', 'panda', 'data', 'frame'], 'words': ['plotting', 'stacked', 'barplots', 'on', 'a', 'panda', 'data', 'frame'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "df.plot(kind='barh', stacked=true)"}
Generated  translation
df. groupby ('colour'). agg ( ['v ','> 1 ','avg'] ) 
--------- B -----------
{'intent': {'gloss': ['rotate', 'the', 'xtick', 'labels', 'of', 'matplotlib', 'plot', 'var0', 'by', 'str0', 'degrees', 'to', 'make', 'long', 'labels', 'readable'], 'words': ['rotate', 'the', 'xtick', 'labels', 'of', 'matplotlib', 'plot', 'var0', 'by', 'str0', 'degrees', 'to', 'make', 'long', 'labels', 'readable'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'ax', 'str0': '45'}, 'snippet': 'var0.set_xticklabels(labels, rotation=45)'}
Generated  translation
var0. groupby ('colour'). size ( ). strftime ('% y - % m - % d') 
--------- B -----------
{'intent': {'gloss': ['pandas', 'dataframe', 'get', 'first', 'row', 'of', 'each', 'group', 'by', 'str0'], 'words': ['pandas', 'dataframe', 'get', 'first', 'row', 'of', 'each', 'group', 'by', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'id'}, 'snippet': "df.groupby('str0').first()"}
Generated  translation
pd. concat ( [ df ['str0']. t ) ] 
--------- B -----------
{'intent': {'gloss': ['call', 'a', 'subprocess', 'with', 'arguments', 'str0', 'that', 'may', 'contain', 'spaces'], 'words': ['call', 'a', 'subprocess', 'with', 'arguments', 'str0', 'that', 'may', 'contain', 'spaces'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'c:\\program files\\vmware\\vmware server\\vmware-cmd.bat'}, 'snippet': "subprocess.popen(['str0'])"}
Generated  translation
test. support. script _ helper. spawn _ subprocess ('str0 ', shell = true ) 
--------- B -----------
{'intent': {'gloss': ['reverse', 'sort', 'counter', 'var0', 'by', 'values'], 'words': ['reverse', 'sort', 'counter', 'var0', 'by', 'values'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'sorted(var0, key=var0.get, reverse=true)'}
Generated  translation
sorted ( var0, key = var0. get ) 
--------- B -----------
{'intent': {'gloss': ['append', 'a', 'numpy', 'array', 'str0', 'to', 'a', 'numpy', 'array', 'str1'], 'words': ['append', 'a', 'numpy', 'array', 'str0', 'to', 'a', 'numpy', 'array', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'b', 'str1': 'a'}, 'snippet': 'np.vstack((str1, str0))'}
Generated  translation
np. zeros ( ( str0 ) ) + np. array ( [ str1 ] ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'lists', 'str0', 'such', 'that', 'third', 'row', 'comes', 'first'], 'words': ['sort', 'a', 'list', 'of', 'lists', 'str0', 'such', 'that', 'third', 'row', 'comes', 'first'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'c2'}, 'snippet': 'str0.sort(key=lambda row: row[2])'}
Generated  translation
sorted ( [ str0 ], key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'elements', 'from', 'list', 'var0', ',', 'that', 'have', 'a', 'field', 'var1', 'value', '30'], 'words': ['get', 'elements', 'from', 'list', 'var0', ',', 'that', 'have', 'a', 'field', 'var1', 'value', '30'], 'after': [' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylist', 'var1': 'n'}, 'snippet': '[x for x in var0 if x.var1 == 30]'}
Generated  translation
[ item for item in var0 if var1 = = 30 ] 
--------- B -----------
{'intent': {'gloss': ['execute', 'script', 'str0', 'using', 'str1', 'shell'], 'words': ['execute', 'script', 'str0', 'using', 'str1', 'shell'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'script.ps1', 'str1': 'powershell.exe'}, 'snippet': "os.system('str1', 'str0')"}
Generated  translation
os. system ('str0') 
--------- B -----------
{'intent': {'gloss': ['concatenate', 'items', 'of', 'list', 'var0', 'with', 'a', 'space', 'str0'], 'words': ['concatenate', 'items', 'of', 'list', 'var0', 'with', 'a', 'space', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l', 'str0': ''}, 'snippet': "print(' '.join(map(str, var0)))"}
Generated  translation
[''. join ( x ) for x in var0 ] 
--------- B -----------
{'intent': {'gloss': ['set', 'pythonpath', 'in', 'python', 'script', '.'], 'words': ['set', 'pythonpath', 'in', 'python', 'script', '.'], 'after': [' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "sys.path.append('/path/to/whatever')"}
Generated  translation
os. system ('pythonpath. py') 
--------- B -----------
{'intent': {'gloss': ['running', 'bash', 'script', 'str0'], 'words': ['running', 'bash', 'script', 'str0'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {'str0': 'sleep.sh'}, 'snippet': "subprocess.call('str0', shell=true)"}
Generated  translation
subprocess. call ('str0 ', shell = true ) 
--------- B -----------
{'intent': {'gloss': ['write', 'the', 'elements', 'of', 'list', 'var0', 'concatenated', 'by', 'special', 'character', 'str0', 'to', 'file', 'var1'], 'words': ['write', 'the', 'elements', 'of', 'list', 'var0', 'concatenated', 'by', 'special', 'character', 'str0', 'to', 'file', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'lines', 'str0': '\n', 'var1': 'myfile'}, 'snippet': "var1.write('str0'.join(var0))"}
Generated  translation
with open ('str0 ','str0') as f : var1. write ('str0') 
--------- B -----------
{'intent': {'gloss': ['merge', 'list', 'str0', 'and', 'list', 'str1', 'and', 'list', 'str2', 'into', 'one', 'list'], 'words': ['merge', 'list', 'str0', 'and', 'list', 'str1', 'and', 'list', 'str2', 'into', 'one', 'list'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "['it']", 'str1': "['was']", 'str2': "['annoying']", '[ str0 ]': "['it']", '[ str1 ]': "['was']", '[ str2 ]': "['annoying']"}, 'snippet': '[ str0 ] + [ str1 ] + [ str2 ]'}
Generated  translation
[ [ str0 ] for a in zip ( [ str1 ], [ str2 ] ) ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'index', 'at', 'level', '0', 'into', 'a', 'column', 'in', 'dataframe', 'var0'], 'words': ['convert', 'index', 'at', 'level', '0', 'into', 'a', 'column', 'in', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': 'var0.reset_index(level=0, inplace=true)'}
Generated  translation
var0. apply ( lambda x : x. to _ level _ values ( 0 ), axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'the', 'first', 'row', 'of', 'numpy', 'matrix', 'var0', 'to', 'a', 'list'], 'words': ['convert', 'the', 'first', 'row', 'of', 'numpy', 'matrix', 'var0', 'to', 'a', 'list'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'numpy.array(var0)[0].tolist()'}
Generated  translation
numpy. array ( [ var0, [ 0, 1 ], [ 1, 2 ] ) 
--------- B -----------
{'intent': {'gloss': ['how', 'do', 'i', 'sum', 'the', 'first', 'value', 'in', 'each', 'tuple', 'in', 'a', 'list', 'of', 'tuples', 'in', 'python', '?'], 'words': ['how', 'do', 'i', 'sum', 'the', 'first', 'value', 'in', 'each', 'tuple', 'in', 'a', 'list', 'of', 'tuples', 'in', 'python', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'sum([pair[0] for pair in list_of_pairs])'}
Generated  translation
[ sum ( x [ 0 ] for x in var0 ) ] 
--------- B -----------
{'intent': {'gloss': ['run', 'r', 'script', 'str0'], 'words': ['run', 'r', 'script', 'str0'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {'str0': '/usr/bin/rscript --vanilla /pathto/myrscript.r'}, 'snippet': "subprocess.call('str0', shell=true)"}
Generated  translation
run ('str0') 
--------- B -----------
{'intent': {'gloss': ['read', 'a', 'file', 'var0', 'without', 'newlines'], 'words': ['read', 'a', 'file', 'var0', 'without', 'newlines'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'file'}, 'snippet': "[line.rstrip('\\n') for line in var0]"}
Generated  translation
with open ( var0 ) as f : var0 = f. readlines ( ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'item', 'at', 'index', '0', 'from', 'the', 'tuple', 'that', 'has', 'maximum', 'value', 'at', 'index', '1', 'in', 'list', 'var0'], 'words': ['get', 'the', 'item', 'at', 'index', '0', 'from', 'the', 'tuple', 'that', 'has', 'maximum', 'value', 'at', 'index', '1', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'lis'}, 'snippet': 'max(var0, key=itemgetter(1))[0]'}
Generated  translation
max ( var0, key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'lis', 'var0', 'in', 'ascending', 'order', 'based', 'on', 'the', 'degrees', 'value', 'of', 'its', 'elements'], 'words': ['sort', 'lis', 'var0', 'in', 'ascending', 'order', 'based', 'on', 'the', 'degrees', 'value', 'of', 'its', 'elements'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list5'}, 'snippet': 'sorted(var0, lambda x: (degree(x), x))'}
Generated  translation
sorted ( list ( var0. items ( ) ), key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'new', 'list', 'var0by', 'removing', 'empty', 'list', 'from', 'a', 'list', 'of', 'lists', 'var1'], 'words': ['get', 'a', 'new', 'list', 'var0by', 'removing', 'empty', 'list', 'from', 'a', 'list', 'of', 'lists', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list2', 'var1': 'list1'}, 'snippet': 'var0 = [x for x in var1 if x != []]'}
Generated  translation
var0 = [ x for x in var1 if x ] 
--------- B -----------
{'intent': {'gloss': ['match', 'regex', 'str0', 'with', 'string', 'str1'], 'words': ['match', 'regex', 'str0', 'with', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '\\((.*?)\\)|(\\w)', 'str1': '(zyx)bc'}, 'snippet': "re.findall('str0', 'str1')"}
Generated  translation
re. match ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['initialize', 'var0', 'in', 'flask', 'config', 'with', 'str0'], 'words': ['initialize', 'var0', 'in', 'flask', 'config', 'with', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'secret_key', 'str0': 'your_secret_string'}, 'snippet': "app.config['var0'] = 'str0'"}
Generated  translation
config = var0. engine. make _ all ('str0') 
--------- B -----------
{'intent': {'gloss': ['write', 'bytes', 'var0', 'to', 'a', 'file', 'var1', 'in', 'python', '3'], 'words': ['write', 'bytes', 'var0', 'to', 'a', 'file', 'var1', 'in', 'python', '3'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'bytes_', 'var1': 'filename'}, 'snippet': "open('var1', 'wb').write(var0)"}
Generated  translation
open ( var1,'r'). write ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['eliminate', 'all', 'strings', 'from', 'list', 'var0'], 'words': ['eliminate', 'all', 'strings', 'from', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'lst'}, 'snippet': '[element for element in var0 if isinstance(element, int)]'}
Generated  translation
var0 = [ [ ] for sublist in var0 if'' in s ] 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'list', 'of', 'all', 'keys', 'in', 'cassandra', 'database', 'var0', 'with', 'pycassa'], 'words': ['get', 'a', 'list', 'of', 'all', 'keys', 'in', 'cassandra', 'database', 'var0', 'with', 'pycassa'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'cf'}, 'snippet': 'list(var0.get_range().get_keys())'}
Generated  translation
[ k for k, v in var0. items ( ) if v. startswith ('c') ] 
--------- B -----------
{'intent': {'gloss': ['choose', 'a', 'random', 'file', 'from', 'the', 'directory', 'contents', 'of', 'the', 'c', 'drive', ',', 'str0'], 'words': ['choose', 'a', 'random', 'file', 'from', 'the', 'directory', 'contents', 'of', 'the', 'c', 'drive', ',', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '']}, 'slot_map': {'str0': 'c:\\'}, 'snippet': "random.choice(os.listdir('str0'))"}
Generated  translation
print ( random. load ('str0') ) 
--------- B -----------
{'intent': {'gloss': ['send', 'a', 'signal', 'str0', 'to', 'the', 'current', 'process'], 'words': ['send', 'a', 'signal', 'str0', 'to', 'the', 'current', 'process'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'signal.sigusr1'}, 'snippet': 'os.kill(os.getpid(), signal.sigusr1)'}
Generated  translation
sys. path. getmtime ('str0') 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'string', 'var0', 'with', 'dot', 'and', 'comma', 'into', 'a', 'float', 'number', 'var1'], 'words': ['convert', 'a', 'string', 'var0', 'with', 'dot', 'and', 'comma', 'into', 'a', 'float', 'number', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'my_string', 'var1': 'my_float'}, 'snippet': "var1 = float(var0.replace(',', ''))"}
Generated  translation
var1 = [ float ( item ) for item in var0. split ( ',') ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'string', 'str0', 'with', 'dot', 'and', 'comma', 'into', 'a', 'floating', 'number'], 'words': ['convert', 'a', 'string', 'str0', 'with', 'dot', 'and', 'comma', 'into', 'a', 'floating', 'number'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '123,456.908'}, 'snippet': "float('str0'.replace(',', ''))"}
Generated  translation
" " " str0 " " ". join ( [ str0 ] ) 
--------- B -----------
{'intent': {'gloss': ['make', 'a', 'comma', '-', 'separated', 'string', 'from', 'a', 'list', 'var0'], 'words': ['make', 'a', 'comma', '-', 'separated', 'string', 'from', 'a', 'list', 'var0'], 'after': [' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylist'}, 'snippet': "var0 = ','.join(map(str, var0))"}
Generated  translation
[ item. split ( ) for item in var0. split ( ',') ] 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'list', 'of', 'integers', 'by', 'splitting', 'a', 'string', 'var0', 'with', 'comma'], 'words': ['get', 'a', 'list', 'of', 'integers', 'by', 'splitting', 'a', 'string', 'var0', 'with', 'comma'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'user'}, 'snippet': "[int(s) for s in var0.split(',')]"}
Generated  translation
[ int ( x ) for x in var0. split ( ',') ] 
--------- B -----------
{'intent': {'gloss': ['combine', 'lists', 'var0', 'and', 'var1', 'by', 'alternating', 'their', 'elements'], 'words': ['combine', 'lists', 'var0', 'and', 'var1', 'by', 'alternating', 'their', 'elements'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l1', 'var1': 'l2'}, 'snippet': '[val for pair in zip(var0, var1) for val in pair]'}
Generated  translation
zip ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['retrieve', 'each', 'line', 'from', 'a', 'file', 'str0', 'as', 'a', 'list'], 'words': ['retrieve', 'each', 'line', 'from', 'a', 'file', 'str0', 'as', 'a', 'list'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'file.txt'}, 'snippet': "[line.split() for line in open('str0')]"}
Generated  translation
with open ('str0 ','r') as f : f. write ('\ n') 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'dictionary', 'var0', 'by', 'the', 'key', 'var1'], 'words': ['sort', 'a', 'list', 'of', 'dictionary', 'var0', 'by', 'the', 'key', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylist', 'var1': 'title'}, 'snippet': "var0.sort(key=lambda x: x['var1'])"}
Generated  translation
sorted ( var0, key = lambda x : var1 [ x ] ['var0'] ) 
--------- B -----------
{'intent': {'gloss': ['find', 'the', 'first', 'element', 'of', 'the', 'tuple', 'with', 'the', 'maximum', 'second', 'element', 'in', 'a', 'list', 'of', 'tuples', 'var0'], 'words': ['find', 'the', 'first', 'element', 'of', 'the', 'tuple', 'with', 'the', 'maximum', 'second', 'element', 'in', 'a', 'list', 'of', 'tuples', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'lis'}, 'snippet': 'max(var0, key=lambda item: item[1])[0]'}
Generated  translation
max ( var0, key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['add', 'color', 'bar', 'with', 'image', 'var0', 'to', 'plot', 'var1'], 'words': ['add', 'color', 'bar', 'with', 'image', 'var0', 'to', 'plot', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mappable', 'var1': 'plt'}, 'snippet': 'var1.colorbar(var0=var0, cax=ax3)'}
Generated  translation
var1. var0. seek ( 0 ) 
--------- B -----------
{'intent': {'gloss': ['generate', 'all', '2', '-', 'element', 'subsets', 'of', 'tuple', 'str0'], 'words': ['generate', 'all', '2', '-', 'element', 'subsets', 'of', 'tuple', 'str0'], 'after': [' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '(1, 2, 3)', '( str0 )': '(1, 2, 3)'}, 'snippet': 'list(itertools.combinations(( str0 ), 2))'}
Generated  translation
print ( [ ( x, y ) for x, y in zip ( str0, str0 ) ] ) 
--------- B -----------
{'intent': {'gloss': ['how', 'do', 'i', 'insert', 'into', 't1', '(', 'select', '*', 'from', 't2', ')', 'in', 'sqlalchemy', '?'], 'words': ['how', 'do', 'i', 'insert', 'into', 't1', '(', 'select', '*', 'from', 't2', ')', 'in', 'sqlalchemy', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', '', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "session.execute('insert into t1 (select * from t2)')"}
Generated  translation
session. execute ('insert into t1 select * from table2 and i1 select * from t1 ; select * from t1 values (? )') 
--------- B -----------
{'intent': {'gloss': ['print', 'new', 'line', 'character', 'as', 'str0', 'in', 'a', 'string', 'str1'], 'words': ['print', 'new', 'line', 'character', 'as', 'str0', 'in', 'a', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '\n', 'str1': 'foo\nbar'}, 'snippet': "print('str1'.encode('string_escape'))"}
Generated  translation
print ('str1 '. replace ('str0 ','' ) ) 
--------- B -----------
{'intent': {'gloss': ['calculate', 'the', 'mean', 'of', 'each', 'element', 'in', 'array', 'var0', 'with', 'the', 'element', 'previous', 'to', 'it'], 'words': ['calculate', 'the', 'mean', 'of', 'each', 'element', 'in', 'array', 'var0', 'with', 'the', 'element', 'previous', 'to', 'it'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': '(var0[1:] + var0[:-1]) / 2'}
Generated  translation
np. argwhere ( var0. shape [ 0 ], var0. index ) 
--------- B -----------
{'intent': {'gloss': ['count', 'number', 'of', 'times', 'string', 'str0', 'occurred', 'in', 'string', 'str1'], 'words': ['count', 'number', 'of', 'times', 'string', 'str0', 'occurred', 'in', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'brown', 'str1': 'the big brown fox is brown'}, 'snippet': '"""str1""".count(\'str0\')'}
Generated  translation
" " " str1 " " ". count ('str0') 
--------- B -----------
{'intent': {'gloss': ['download', 'the', 'file', 'from', 'url', 'var0', 'and', 'save', 'it', 'under', 'file', 'var1'], 'words': ['download', 'the', 'file', 'from', 'url', 'var0', 'and', 'save', 'it', 'under', 'file', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'url', 'var1': 'file_name'}, 'snippet': 'urllib.request.urlretrieve(var0, var1)'}
Generated  translation
urllib. request. urlretrieve ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'tuples', 'var0', 'by', 'third', 'item', 'in', 'the', 'tuple'], 'words': ['sort', 'a', 'list', 'of', 'tuples', 'var0', 'by', 'third', 'item', 'in', 'the', 'tuple'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'b'}, 'snippet': 'var0.sort(key=lambda x: x[1][2])'}
Generated  translation
var0. sort ( key = lambda x : x [ 2 ] ) 
--------- B -----------
{'intent': {'gloss': ['subtract', '13', 'from', 'every', 'number', 'in', 'a', 'list', 'var0'], 'words': ['subtract', '13', 'from', 'every', 'number', 'in', 'a', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'var0[:] = [(x - 13) for x in var0]'}
Generated  translation
[ ( x + 13 ) for x, y in zip ( var0, var0 [ 1 : ] ) ] 
--------- B -----------
{'intent': {'gloss': ['capture', 'final', 'output', 'of', 'a', 'chain', 'of', 'system', 'commands', 'str0'], 'words': ['capture', 'final', 'output', 'of', 'a', 'chain', 'of', 'system', 'commands', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'ps -ef | grep something | wc -l'}, 'snippet': "subprocess.check_output('str0', shell=true)"}
Generated  translation
print ( os. popen ('str0'). reshape ( 2, - 1 ) ) 
--------- B -----------
{'intent': {'gloss': ['sending', 'http', 'headers', 'to', 'var0'], 'words': ['sending', 'http', 'headers', 'to', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'client'}, 'snippet': "var0.send('http/1.0 200 ok\\r\\n')"}
Generated  translation
r = requests. get ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['subscript', 'text', 'str0', 'with', 'str1', 'as', 'subscripted', 'in', 'matplotlib', 'labels', 'for', 'arrays', 'str2', 'and', 'str3', '.'], 'words': ['subscript', 'text', 'str0', 'with', 'str1', 'as', 'subscripted', 'in', 'matplotlib', 'labels', 'for', 'arrays', 'str2', 'and', 'str3', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'h20', 'str1': '2', 'str2': 'x', 'str3': 'y'}, 'snippet': "plt.plot(str2, str3, label='h₂o')"}
Generated  translation
ax. set _ yticklabels ( ['str2 ','str3'] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'largest', 'key', 'whose', 'not', 'associated', 'with', 'value', 'of', '0', 'in', 'dictionary', 'var0'], 'words': ['get', 'the', 'largest', 'key', 'whose', 'not', 'associated', 'with', 'value', 'of', '0', 'in', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': '(k for k, v in var0.items() if v != 0)'}
Generated  translation
max ( var0, key = lambda x : abs ( x [ 1 ] ) if x [ 0 ] else x [ 0 ] ) 
--------- B -----------
{'intent': {'gloss': ['decode', 'string', 'str0', 'into', 'a', 'normal', 'string'], 'words': ['decode', 'string', 'str0', 'into', 'a', 'normal', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '\\x89\\n'}, 'snippet': '"""str0""".decode(\'string_escape\')'}
Generated  translation
str0. decode ('str0') 
--------- B -----------
{'intent': {'gloss': ['find', 'last', 'occurrence', 'of', 'character', 'str0', 'in', 'string', 'str1'], 'words': ['find', 'last', 'occurrence', 'of', 'character', 'str0', 'in', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '}', 'str1': 'abcd}def}'}, 'snippet': '"""str1""".rfind(\'str0\')'}
Generated  translation
re. findall ('str1 ','str0') 
--------- B -----------
{'intent': {'gloss': ['reverse', 'list', 'var0', 'based', 'on', 'the', 'var1', 'attribute', 'of', 'each', 'object'], 'words': ['reverse', 'list', 'var0', 'based', 'on', 'the', 'var1', 'attribute', 'of', 'each', 'object'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'ut', 'var1': 'count'}, 'snippet': 'var0.sort(key=lambda x: x.var1, reverse=true)'}
Generated  translation
var0. get ( var1, key = lambda x : x. var0. reverse ( ) ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'objects', 'var0', 'in', 'reverse', 'order', 'by', 'their', 'var1', 'property'], 'words': ['sort', 'a', 'list', 'of', 'objects', 'var0', 'in', 'reverse', 'order', 'by', 'their', 'var1', 'property'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'ut', 'var1': 'count'}, 'snippet': 'var0.sort(key=lambda x: x.var1, reverse=true)'}
Generated  translation
var0. sort ( key = lambda x : x. var1 ) 
--------- B -----------
{'intent': {'gloss': ['return', 'var0', 'if', 'string', 'var1', 'contains', 'regex', 'str0'], 'words': ['return', 'var0', 'if', 'string', 'var1', 'contains', 'regex', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'true', 'var1': 'foobarrrr', 'str0': 'ba[rzd]'}, 'snippet': "bool(re.search('str0', 'var1'))"}
Generated  translation
if var0. find ('str0') = = - 1 : print ( " no'is'here! " ) else : print ( var1 ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'any', 'key', 'in', 'the', 'dictionary', 'var0', 'starts', 'with', 'the', 'string', 'str0'], 'words': ['check', 'if', 'any', 'key', 'in', 'the', 'dictionary', 'var0', 'starts', 'with', 'the', 'string', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'dict1', 'str0': 'emp$$'}, 'snippet': "any(key.startswith('str0') for key in var0)"}
Generated  translation
any ( item in var0. keys ( ) ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'var0', 'of', 'dicts', 'by', 'dict', 'value', 'str0'], 'words': ['sort', 'a', 'list', 'var0', 'of', 'dicts', 'by', 'dict', 'value', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l', 'str0': 'title'}, 'snippet': "var0.sort(key=lambda x: x['str0'])"}
Generated  translation
sorted ( var0, key = lambda x : x ['str0'] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'position', 'of', 'item', 'var0', 'in', 'list', 'var1'], 'words': ['get', 'the', 'position', 'of', 'item', 'var0', 'in', 'list', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'element', 'var1': 'testlist'}, 'snippet': 'try:\n    print(var1.index(var0))\nexcept valueerror:\n    pass'}
Generated  translation
print ( var1. get ( var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['how', 'do', 'i', 'perform', 'secondary', 'sorting', 'in', 'python', '?'], 'words': ['how', 'do', 'i', 'perform', 'secondary', 'sorting', 'in', 'python', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'sorted(list5, key=lambda vertex: (degree(vertex), vertex))'}
Generated  translation
np. where ( a = = 1 ) 
--------- B -----------
{'intent': {'gloss': ['append', 'each', 'line', 'in', 'file', 'var0', 'into', 'a', 'list'], 'words': ['append', 'each', 'line', 'in', 'file', 'var0', 'into', 'a', 'list'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'myfile'}, 'snippet': "[x for x in var0.splitlines() if x != '']"}
Generated  translation
[ open ( var0 ) for f in open ('text / plain ','rb') ] 
--------- B -----------
{'intent': {'gloss': ['remove', 'symbols', 'from', 'a', 'string', 'var0'], 'words': ['remove', 'symbols', 'from', 'a', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': "re.sub('[^\\\\w]', ' ', var0)"}
Generated  translation
re. sub ('< [ ^ > ] * > ','', var0 ) 
--------- B -----------
{'intent': {'gloss': ['count', 'the', 'number', 'of', 'keys', 'in', 'dictionary', 'var0'], 'words': ['count', 'the', 'number', 'of', 'keys', 'in', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'yourdictfile'}, 'snippet': 'len(set(open(var0).read().split()))'}
Generated  translation
len ( dict ( ( x, sum ( x ) for x in var0. split ( ) ) ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'escape', 'character', 'from', 'string', 'str0'], 'words': ['remove', 'escape', 'character', 'from', 'string', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '\\a'}, 'snippet': '"""str0""".decode(\'string_escape\')'}
Generated  translation
" " " " " ". join ( filter ( str. escape,'\ \ 1') ) 
--------- B -----------
{'intent': {'gloss': ['numpy', 'concatenate', 'two', 'arrays', 'var0', 'and', 'var1', 'along', 'the', 'first', 'axis'], 'words': ['numpy', 'concatenate', 'two', 'arrays', 'var0', 'and', 'var1', 'along', 'the', 'first', 'axis'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'b'}, 'snippet': 'print(concatenate((var0, var1), axis=0))'}
Generated  translation
numpy. concatenate ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['numpy', 'concatenate', 'two', 'arrays', 'var0', 'and', 'var1', 'along', 'the', 'second', 'axis'], 'words': ['numpy', 'concatenate', 'two', 'arrays', 'var0', 'and', 'var1', 'along', 'the', 'second', 'axis'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'b'}, 'snippet': 'print(concatenate((var0, var1), axis=1))'}
Generated  translation
numpy. concatenate ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['fetch', 'address', 'information', 'for', 'host', 'str0', 'ion', 'port', '80'], 'words': ['fetch', 'address', 'information', 'for', 'host', 'str0', 'ion', 'port', '80'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'google.com'}, 'snippet': "print(socket.getaddrinfo('str0', 80))"}
Generated  translation
sys. path. insert ( 0,'str0') 
--------- B -----------
{'intent': {'gloss': ['flask', 'set', 'folder', 'str0', 'as', 'the', 'default', 'template', 'folder'], 'words': ['flask', 'set', 'folder', 'str0', 'as', 'the', 'default', 'template', 'folder'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'wherever'}, 'snippet': "flask(__name__, template_folder='str0')"}
Generated  translation
webbrowser. set _ yticklabels ('str0') 
--------- B -----------
{'intent': {'gloss': ['delete', 'all', 'instances', 'of', 'a', 'character', 'str0', 'in', 'a', 'string', 'str1'], 'words': ['delete', 'all', 'instances', 'of', 'a', 'character', 'str0', 'in', 'a', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'i', 'str1': 'it is icy'}, 'snippet': "re.sub('str0', '', 'str1')"}
Generated  translation
re. sub ('[ ^ a - za - z ] ','','str1') 
--------- B -----------
{'intent': {'gloss': ['django', 'filter', 'by', 'hour'], 'words': ['django', 'filter', 'by', 'hour'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "entry.objects.filter(pub_date__contains='08:00')"}
Generated  translation
django. searchset by hour 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'multi', '-', 'line', 'string', 'str0', 'by', 'new', 'line', 'character', 'str1'], 'words': ['split', 'a', 'multi', '-', 'line', 'string', 'str0', 'by', 'new', 'line', 'character', 'str1'], 'after': [' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'a \n b \r\n c', 'str1': '\n'}, 'snippet': "' a \\n b \\r\\n c '.split('str1')"}
Generated  translation
re. split ('\ \ t + ','str1') 
--------- B -----------
{'intent': {'gloss': ['remove', 'substring', 'str0', 'from', 'a', 'string', 'str1'], 'words': ['remove', 'substring', 'str0', 'from', 'a', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'bag,', 'str1': 'lamp, bag, mirror'}, 'snippet': "print('str1'.replace('str0', ''))"}
Generated  translation
" " " str1 " " ". replace ('str0 ','' ) 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'string', 'var0', 'by', 'last', 'occurrence', 'of', 'character', 'str0'], 'words': ['split', 'a', 'string', 'var0', 'by', 'last', 'occurrence', 'of', 'character', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x', 'str0': '-'}, 'snippet': "print(var0.rpartition('str0')[0])"}
Generated  translation
re. split ('str0 ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'last', 'part', 'of', 'a', 'string', 'before', 'the', 'character', 'str0'], 'words': ['get', 'the', 'last', 'part', 'of', 'a', 'string', 'before', 'the', 'character', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '-'}, 'snippet': "print(x.rsplit('str0', 1)[0])"}
Generated  translation
os. var0. split ('str0') [ - 1 ] 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'random', 'list', 'of', 'integers'], 'words': ['create', 'a', 'random', 'list', 'of', 'integers'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': '[int(1000 * random.random()) for i in range(10000)]'}
Generated  translation
list ( random. randint ( 0, 9 ) ) 
--------- B -----------
{'intent': {'gloss': ['google', 'app', 'engine', 'execute', 'gql', 'query', 'str0', 'with', 'parameter', 'str1'], 'words': ['google', 'app', 'engine', 'execute', 'gql', 'query', 'str0', 'with', 'parameter', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'select * from schedule where station = $1', 'str1': 'foo.key()'}, 'snippet': "db.gqlquery('str0', foo.key())"}
Generated  translation
cur. execute ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'string', 'into', 'datetime', 'using', 'the', 'format', 'str0'], 'words': ['convert', 'a', 'string', 'into', 'datetime', 'using', 'the', 'format', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '%y-%m-%d %h:%m:%s.%f'}, 'snippet': "datetime.datetime.strptime(string_date, 'str0')"}
Generated  translation
datetime. strptime ('str0 ','str0') 
--------- B -----------
{'intent': {'gloss': ['find', 'the', 'key', 'associated', 'with', 'the', 'largest', 'value', 'in', 'dictionary', 'var0', 'whilst', 'key', 'is', 'non', '-', 'zero', 'value'], 'words': ['find', 'the', 'key', 'associated', 'with', 'the', 'largest', 'value', 'in', 'dictionary', 'var0', 'whilst', 'key', 'is', 'non', '-', 'zero', 'value'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'max(k for k, v in var0.items() if v != 0)'}
Generated  translation
max ( var0, key = lambda x : abs ( x [ 1 ] ), reverse = true ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'largest', 'key', 'in', 'a', 'dictionary', 'var0', 'with', 'non', '-', 'zero', 'value'], 'words': ['get', 'the', 'largest', 'key', 'in', 'a', 'dictionary', 'var0', 'with', 'non', '-', 'zero', 'value'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'max(k for k, v in var0.items() if v != 0)'}
Generated  translation
max ( var0, key = lambda x : ( len ( x ), - 1 ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'index', 'of', 'rows', 'in', 'dataframe', 'var0', 'which', 'column', 'str0', 'matches', 'value', 'true'], 'words': ['get', 'index', 'of', 'rows', 'in', 'dataframe', 'var0', 'which', 'column', 'str0', 'matches', 'value', 'true'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'boolcol'}, 'snippet': "var0[var0['str0']].index.tolist()"}
Generated  translation
var0. groupby ('str0') ['str0']. transform ( sum ) = = 0 
--------- B -----------
{'intent': {'gloss': ['convert', 'pandas', 'index', 'in', 'a', 'dataframe', 'to', 'columns'], 'words': ['convert', 'pandas', 'index', 'in', 'a', 'dataframe', 'to', 'columns'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "df.reset_index(level=['tick', 'obs'])"}
Generated  translation
df. apply ( lambda x : x. columns ['r'], axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'html', 'from', 'the', 'current', 'web', 'page', 'of', 'a', 'selenium', 'driver'], 'words': ['get', 'the', 'html', 'from', 'the', 'current', 'web', 'page', 'of', 'a', 'selenium', 'driver'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "driver.execute_script('return document.documentelement.outerhtml;')"}
Generated  translation
driver. get _ html ( ) 
--------- B -----------
{'intent': {'gloss': ['replacing', 'nan', 'in', 'the', 'dataframe', 'var0', 'with', 'row', 'average'], 'words': ['replacing', 'nan', 'in', 'the', 'dataframe', 'var0', 'with', 'row', 'average'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': 'var0.fillna(var0.mean(axis=1), axis=1)'}
Generated  translation
var0. fillna ( method ='ffill ', inplace = true ) 
--------- B -----------
{'intent': {'gloss': ['print', 'elements', 'of', 'list', 'var0', 'seperated', 'by', 'tabs', 'str0'], 'words': ['print', 'elements', 'of', 'list', 'var0', 'seperated', 'by', 'tabs', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list', 'str0': '\t'}, 'snippet': "print('str0'.join(map(str, var0)))"}
Generated  translation
print ('str0 '. join ( [ str0 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['print', 'unicode', 'string', 'str0', 'with', 'utf', '-', '8'], 'words': ['print', 'unicode', 'string', 'str0', 'with', 'utf', '-', '8'], 'after': [' ', ' ', ' ', ' ', ' ', '', '', '']}, 'slot_map': {'str0': 'Ð¿Ñ\x80Ð¸'}, 'snippet': "print('str0'.encode('raw_unicode_escape'))"}
Generated  translation
print ('str0 '. decode ('utf - 8') ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'words': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'testlist'}, 'snippet': '[i for i, x in enumerate(var0) if x == 1]'}
Generated  translation
print ( var0. position ( 1 ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'words': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'testlist'}, 'snippet': '[i for i, x in enumerate(var0) if x == 1]'}
Generated  translation
print ( var0. position ( 1 ) ) 
--------- B -----------
{'intent': {'gloss': ['django', 'response', 'with', 'json', 'var0'], 'words': ['django', 'response', 'with', 'json', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'data'}, 'snippet': "return httpresponse(var0, mimetype='application/json')"}
Generated  translation
content. objects. create ( json ( var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['formate', 'each', 'string', 'cin', 'list', 'var0', 'into', 'pattern', 'str0'], 'words': ['formate', 'each', 'string', 'cin', 'list', 'var0', 'into', 'pattern', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'elements', 'str0': '%{0}%'}, 'snippet': "var0 = ['str0'.format(element) for element in var0]"}
Generated  translation
" " " str0 " " ". format ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['converting', 'two', 'lists', 'str0', 'and', 'str1', 'into', 'a', 'matrix'], 'words': ['converting', 'two', 'lists', 'str0', 'and', 'str1', 'into', 'a', 'matrix'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '[1, 2, 3]', 'str1': '[4, 5, 6]', '[ str0 ]': '[1, 2, 3]', '[ str1 ]': '[4, 5, 6]'}, 'snippet': 'np.column_stack(([ str0 ], [ str1 ]))'}
Generated  translation
numpy. merge ( [ str0, str1 ], [ str0 ] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'all', 'the', 'elements', 'except', 'strings', 'from', 'the', 'list', 'str0', '.'], 'words': ['get', 'all', 'the', 'elements', 'except', 'strings', 'from', 'the', 'list', 'str0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'lst'}, 'snippet': '[element for element in str0 if not isinstance(element, str)]'}
Generated  translation
[ word for word in str0 if i not in [ str0 ] ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'datetime', 'object', 'str0', 'to', 'seconds'], 'words': ['convert', 'datetime', 'object', 'str0', 'to', 'seconds'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '(1970, 1, 1)', '( str0 )': '(1970, 1, 1)'}, 'snippet': '(t - datetime.datetime( str0 )).total_seconds()'}
Generated  translation
datetime. datetime. strptime ('str0 ','% b % d, % y'). strftime ('% a') 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'highest', 'element', 'in', 'absolute', 'value', 'in', 'a', 'numpy', 'matrix', 'var0'], 'words': ['get', 'the', 'highest', 'element', 'in', 'absolute', 'value', 'in', 'a', 'numpy', 'matrix', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'max(var0.min(), var0.max(), key=abs)'}
Generated  translation
max ( var0, key = lambda x : abs ( x [ 1 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'string', 'var0', 'considering', 'the', 'spaces', 'str0'], 'words': ['split', 'a', 'string', 'var0', 'considering', 'the', 'spaces', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mystring', 'str0': ''}, 'snippet': "var0.replace(' ', '! !').split('!')"}
Generated  translation
re. split ('\ \ s + ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['how', 'to', 'convert', 'a', 'string', 'from', 'cp', '-', '1251', 'to', 'utf', '-', '8', '?'], 'words': ['how', 'to', 'convert', 'a', 'string', 'from', 'cp', '-', '1251', 'to', 'utf', '-', '8', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', '', '', '', '']}, 'slot_map': {}, 'snippet': "d.decode('cp1251').encode('utf8')"}
Generated  translation
" " " [UNK] " " ". encode ('utf - 8'). decode ('utf - 8') 
--------- B -----------
{'intent': {'gloss': ['python', 'save', 'list', 'var0', 'to', 'file', 'object', 'str0'], 'words': ['python', 'save', 'list', 'var0', 'to', 'file', 'object', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylist', 'str0': 'save.txt'}, 'snippet': "pickle.dump(var0, open('str0', 'wb'))"}
Generated  translation
[ var0. savefig ('str0') for var0 in s ] 
--------- B -----------
{'intent': {'gloss': ['search', 'for', 'occurrences', 'of', 'regex', 'pattern', 'str0', 'in', 'xml', 'string', 'var0'], 'words': ['search', 'for', 'occurrences', 'of', 'regex', 'pattern', 'str0', 'in', 'xml', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '>.*<', 'var0': 'line'}, 'snippet': "print(re.search('str0', var0).group(0))"}
Generated  translation
print ( var0. search ('str0'). group ( 1 ) ) 
--------- B -----------
{'intent': {'gloss': ['count', 'the', 'occurrences', 'of', 'items', 'in', 'list', 'var0'], 'words': ['count', 'the', 'occurrences', 'of', 'items', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': '[[x, var0.count(x)] for x in set(var0)]'}
Generated  translation
sum ( isinstance ( x, int ) for x in var0 ) 
--------- B -----------
{'intent': {'gloss': ['copy', 'all', 'values', 'in', 'a', 'column', 'str0', 'to', 'a', 'new', 'column', 'str1', 'in', 'a', 'pandas', 'data', 'frame', 'str2'], 'words': ['copy', 'all', 'values', 'in', 'a', 'column', 'str0', 'to', 'a', 'new', 'column', 'str1', 'in', 'a', 'pandas', 'data', 'frame', 'str2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'b', 'str1': 'd', 'str2': 'df'}, 'snippet': "str2['str1'] = str2['str0']"}
Generated  translation
str2 ['str0'] = df ['str1']. str ['str0'] 
--------- B -----------
{'intent': {'gloss': ['convert', 'string', 'var0', 'into', 'a', 'list', 'of', 'integers', 'var1'], 'words': ['convert', 'string', 'var0', 'into', 'a', 'list', 'of', 'integers', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'user_input', 'var1': 'user_list'}, 'snippet': "var1 = [int(number) for number in var0.split(',')]"}
Generated  translation
var1 = map ( int, var0. split ( ) ) 
--------- B -----------
{'intent': {'gloss': ['sorting', 'data', 'in', 'dataframe', 'pandas'], 'words': ['sorting', 'data', 'in', 'dataframe', 'pandas'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "df.sort_values(['system_num', 'dis'])"}
Generated  translation
df. sorting ( df. columns, axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'all', 'matches', 'with', 'regex', 'pattern', 'str0', 'in', 'list', 'of', 'string', 'var0'], 'words': ['get', 'all', 'matches', 'with', 'regex', 'pattern', 'str0', 'in', 'list', 'of', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '\\d+[xx]', 'var0': 'teststr'}, 'snippet': "[i for i in var0 if re.search('str0', i)]"}
Generated  translation
[ m. start ( ) for m in re. findall ('str0 ', var0 ) ] 
--------- B -----------
{'intent': {'gloss': ['resized', 'image', 'var0', 'to', 'width', ',', 'height', 'of', 'str0', 'with', 'filter', 'of', 'var1'], 'words': ['resized', 'image', 'var0', 'to', 'width', ',', 'height', 'of', 'str0', 'with', 'filter', 'of', 'var1'], 'after': [' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'image', 'str0': '(x, y)', 'var1': 'antialias', '( str0 )': '(x, y)'}, 'snippet': 'var0 = var0.resize(( str0 ), var0.var1)'}
Generated  translation
var0. reshape ( var0, - 1 ). size ( ) 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'list', 'of', 'integers', 'var0', 'from', 'a', 'file', 'str0'], 'words': ['get', 'a', 'list', 'of', 'integers', 'var0', 'from', 'a', 'file', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'lst', 'str0': 'filename.txt'}, 'snippet': "var0 = map(int, open('str0').readlines())"}
Generated  translation
var0 = ['str0']. isfile ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'at', 'every', 'space', 'followed', 'by', 'an', 'upper', '-', 'case', 'letter'], 'words': ['split', 'string', 'var0', 'at', 'every', 'space', 'followed', 'by', 'an', 'upper', '-', 'case', 'letter'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', '']}, 'slot_map': {'var0': 'input'}, 'snippet': "re.split('[ ](?=[a-z])', var0)"}
Generated  translation
re. findall ('\ \ w + (? : - \ \ w + ) ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['sorting', 'a', 'list', 'of', 'lists', 'in', 'python'], 'words': ['sorting', 'a', 'list', 'of', 'lists', 'in', 'python'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'c2.sort(key=lambda row: (row[2], row[1]))'}
Generated  translation
[ sorted ( item ) for item in sorted ( l, key = lambda t : t [ 0 ] ) ] 
--------- B -----------
{'intent': {'gloss': ['delete', 'all', 'characters', 'str0', 'in', 'string', 'str1'], 'words': ['delete', 'all', 'characters', 'str0', 'in', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'i', 'str1': 'it is icy'}, 'snippet': '"""str1""".replace(\'str0\', \'\')'}
Generated  translation
re. sub ('" ( [ a - z ] ) ','\ \ 1 ','str1') 
--------- B -----------
{'intent': {'gloss': ['sum', 'the', 'corresponding', 'decimal', 'values', 'for', 'binary', 'values', 'of', 'each', 'boolean', 'element', 'in', 'list', 'var0'], 'words': ['sum', 'the', 'corresponding', 'decimal', 'values', 'for', 'binary', 'values', 'of', 'each', 'boolean', 'element', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'sum(1 << i for i, b in enumerate(var0) if b)'}
Generated  translation
sum ( map ( int, var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'dictionaries', 'var0', 'by', 'the', 'value', 'of', 'the', 'dictionary', 'key', 'var1'], 'words': ['sort', 'a', 'list', 'of', 'dictionaries', 'var0', 'by', 'the', 'value', 'of', 'the', 'dictionary', 'key', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list_to_be_sorted', 'var1': 'name'}, 'snippet': "newlist = sorted(var0, key=lambda k: k['var1'])"}
Generated  translation
sorted ( var0, key = lambda x : var1 [ x ] ['var0'] ) 
--------- B -----------
{'intent': {'gloss': ['write', 'var0', 'to', 'a', 'binary', 'file', 'var1'], 'words': ['write', 'var0', 'to', 'a', 'binary', 'file', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'newfilebytes', 'var1': 'newfile'}, 'snippet': "var1.write(struct.pack('5b', *var0))"}
Generated  translation
b = open ( var1,'r') 
--------- B -----------
{'intent': {'gloss': ['find', 'intersection', 'data', 'between', 'series', 'var0', 'and', 'series', 'var1'], 'words': ['find', 'intersection', 'data', 'between', 'series', 'var0', 'and', 'series', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's1', 'var1': 's2'}, 'snippet': 'pd.series(list(set(var0).intersection(set(var1))))'}
Generated  translation
print ( var0. groupby ('var1'). size ( ) ) 
--------- B -----------
{'intent': {'gloss': ['format', 'string', 'str0', 'with', 'variables', 'var0', 'and', 'var1'], 'words': ['format', 'string', 'str0', 'with', 'variables', 'var0', 'and', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '({} goals, ${})', 'var0': 'goals', 'var1': 'penalties', '( str0 )': '({} goals, ${})'}, 'snippet': '"""str0""".format(self.var0, self.var1)'}
Generated  translation
' str0'+ var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['combine', 'elements', 'of', 'each', 'list', 'in', 'list', 'var0', 'into', 'digits', 'of', 'a', 'single', 'integer'], 'words': ['combine', 'elements', 'of', 'each', 'list', 'in', 'list', 'var0', 'into', 'digits', 'of', 'a', 'single', 'integer'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': "[''.join(str(d) for d in x) for x in var0]"}
Generated  translation
map ( int, re. findall ('\ \ d + ', var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['substitute', 'ascii', 'letters', 'in', 'string', 'str0', 'with', 'empty', 'string', 'str1'], 'words': ['substitute', 'ascii', 'letters', 'in', 'string', 'str0', 'with', 'empty', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'aas30dsa20', 'str1': ''}, 'snippet': "re.sub('\\\\d', 'str1', 'str0')"}
Generated  translation
" " " str0 " " ". replace ( "'",'str1') 
--------- B -----------
{'intent': {'gloss': ['increment', 'a', 'value', 'with', 'leading', 'zeroes', 'in', 'a', 'number', 'var0'], 'words': ['increment', 'a', 'value', 'with', 'leading', 'zeroes', 'in', 'a', 'number', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'str(int(var0) + 1).zfill(len(var0))'}
Generated  translation
min ( var0, key = lambda x : abs ( x - 1 ) ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'a', 'pandas', 'dataframe', 'var0', "'", 's', 'index', 'is', 'sorted'], 'words': ['check', 'if', 'a', 'pandas', 'dataframe', 'var0', "'", 's', 'index', 'is', 'sorted'], 'after': [' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': 'all(var0.index[:-1] <= var0.index[1:])'}
Generated  translation
var0. groupby ('index'). size ( ). reset _ index ( drop = true ) 
--------- B -----------
{'intent': {'gloss': ['create', 'multidimensional', 'array', 'var0', 'with', '3', 'rows', 'and', '2', 'columns', 'in', 'python'], 'words': ['create', 'multidimensional', 'array', 'var0', 'with', '3', 'rows', 'and', '2', 'columns', 'in', 'python'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'matrix'}, 'snippet': 'var0 = [[a, b], [c, d], [e, f]]'}
Generated  translation
var0. groupby ( ['var0 ','2'] ). size ( ) 
--------- B -----------
{'intent': {'gloss': ['sorting', 'a', 'python', 'list', 'by', 'two', 'criteria'], 'words': ['sorting', 'a', 'python', 'list', 'by', 'two', 'criteria'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'sorted(list, key=lambda x: (x[0], -x[1]))'}
Generated  translation
sorted ( list ( range ( len ( s ) ) ), key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['click', 'a', 'href', 'button', 'having', 'text', 'str0', 'with', 'selenium'], 'words': ['click', 'a', 'href', 'button', 'having', 'text', 'str0', 'with', 'selenium'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'send inmail'}, 'snippet': "driver.findelement(by.linktext('str0')).click()"}
Generated  translation
driver. find _ element _ by _ css _ selector ('str0'). click ( ) 
--------- B -----------
{'intent': {'gloss': ['click', 'a', 'href', 'button', 'with', 'text', 'str0', 'with', 'selenium'], 'words': ['click', 'a', 'href', 'button', 'with', 'text', 'str0', 'with', 'selenium'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'send inmail'}, 'snippet': "driver.find_element_by_link_text('str0').click()"}
Generated  translation
driver. find _ element _ by _ css _ selector ('str0'). click ( ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'var0', 'by', 'length', 'of', 'value', 'in', 'tuple'], 'words': ['sort', 'a', 'list', 'var0', 'by', 'length', 'of', 'value', 'in', 'tuple'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': 'var0.sort(key=lambda t: len(t[1]), reverse=true)'}
Generated  translation
print ( sorted ( var0, key = lambda x : len ( x ), len ( x ) ) ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'array', 'var0', 'into', 'a', 'list'], 'words': ['convert', 'array', 'var0', 'into', 'a', 'list'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'numpy.array(var0).reshape(-1).tolist()'}
Generated  translation
list ( map ( int, var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['swap', 'keys', 'with', 'values', 'in', 'a', 'dictionary', 'var0'], 'words': ['swap', 'keys', 'with', 'values', 'in', 'a', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'res = dict((v, k) for k, v in var0.items())'}
Generated  translation
dict ( ( v, k ) for k, v in var0. items ( ) ) 
--------- B -----------
{'intent': {'gloss': ['open', 'a', 'background', 'process', 'str0', 'with', 'arguments', 'str1'], 'words': ['open', 'a', 'background', 'process', 'str0', 'with', 'arguments', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'background-process', 'str1': 'arguments'}, 'snippet': "subprocess.popen(['str0', 'str1'])"}
Generated  translation
os. system ('str0') 
--------- B -----------
{'intent': {'gloss': ['find', 'duplicate', 'names', 'in', 'column', 'str0', 'of', 'the', 'dataframe', 'var0'], 'words': ['find', 'duplicate', 'names', 'in', 'column', 'str0', 'of', 'the', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'name', 'var0': 'x'}, 'snippet': "var0.set_index('str0').index.get_duplicates()"}
Generated  translation
var0. groupby ('str0'). agg ( lambda x : x. duplicated ( ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', '5th', 'item', 'of', 'a', 'generator'], 'words': ['get', 'the', '5th', 'item', 'of', 'a', 'generator'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'next(itertools.islice(range(10), 5, 5 + 1))'}
Generated  translation
print ( 2 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'list', 'of', 'string', 'numbers', 'into', 'list', 'of', 'integers'], 'words': ['convert', 'list', 'of', 'string', 'numbers', 'into', 'list', 'of', 'integers'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "map(int, eval(input('enter the unfriendly numbers: ')))"}
Generated  translation
[ int ( i ) for i in range ( 10 ) ] 
--------- B -----------
{'intent': {'gloss': ['how', 'do', 'i', 'sort', 'a', 'list', 'of', 'dictionaries', 'by', 'values', 'of', 'the', 'dictionary', 'in', 'python', '?'], 'words': ['how', 'do', 'i', 'sort', 'a', 'list', 'of', 'dictionaries', 'by', 'values', 'of', 'the', 'dictionary', 'in', 'python', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "list_of_dicts.sort(key=operator.itemgetter('name'))"}
Generated  translation
sorted ( list ( data. values ( ) ), key = lambda x : x [ 1 ] ['a'] ) 
--------- B -----------
{'intent': {'gloss': ['how', 'do', 'i', 'sort', 'a', 'list', 'of', 'dictionaries', 'by', 'values', 'of', 'the', 'dictionary', 'in', 'python', '?'], 'words': ['how', 'do', 'i', 'sort', 'a', 'list', 'of', 'dictionaries', 'by', 'values', 'of', 'the', 'dictionary', 'in', 'python', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "list_of_dicts.sort(key=operator.itemgetter('age'))"}
Generated  translation
sorted ( list ( data. values ( ) ), key = lambda x : x [ 1 ] ['a'] ) 
--------- B -----------
{'intent': {'gloss': ['join', 'together', 'with', 'str0', 'elements', 'inside', 'a', 'list', 'indexed', 'with', 'str1', 'within', 'a', 'dictionary', 'var0'], 'words': ['join', 'together', 'with', 'str0', 'elements', 'inside', 'a', 'list', 'indexed', 'with', 'str1', 'within', 'a', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': ',', 'str1': 'category', 'var0': 'trans'}, 'snippet': '"""str0""".join(var0[\'str1\'])'}
Generated  translation
[ k for k, v in zip ( var0. items ( ) ) if k! ='str1'] 
--------- B -----------
{'intent': {'gloss': ['get', 'json', 'data', 'from', 'restful', 'service', 'str0'], 'words': ['get', 'json', 'data', 'from', 'restful', 'service', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'url'}, 'snippet': "json.load(urllib.request.urlopen('str0'))"}
Generated  translation
json. loads ( request. post. get ('str0') ) 
--------- B -----------
{'intent': {'gloss': ['decode', 'a', 'hex', 'string', 'str0', 'to', 'utf', '-', '8', '.'], 'words': ['decode', 'a', 'hex', 'string', 'str0', 'to', 'utf', '-', '8', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', '', '', '']}, 'slot_map': {'str0': '4a4b4c'}, 'snippet': "bytes.fromhex('str0').decode('utf-8')"}
Generated  translation
str0. decode ('utf - 8 ','ignore') 
--------- B -----------
{'intent': {'gloss': ['concatenate', 'elements', 'of', 'list', 'var0', 'by', 'a', 'colon', 'str0'], 'words': ['concatenate', 'elements', 'of', 'list', 'var0', 'by', 'a', 'colon', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'b', 'str0': ':'}, 'snippet': '"""str0""".join(str(x) for x in var0)'}
Generated  translation
np. concatenate ( ( var0 [ str0 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'key', 'str0', 'from', 'dictionary', 'var0'], 'words': ['remove', 'key', 'str0', 'from', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'c', 'var0': 'd'}, 'snippet': "{i: var0[i] for i in var0 if i != 'str0'}"}
Generated  translation
var0. pop ('str0 ', none ) 
--------- B -----------
{'intent': {'gloss': ['cut', 'off', 'the', 'last', 'word', 'of', 'a', 'sentence', 'var0'], 'words': ['cut', 'off', 'the', 'last', 'word', 'of', 'a', 'sentence', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'content'}, 'snippet': '""" """.join(var0.split(\' \')[:-1])'}
Generated  translation
var0. split ('\ \ 1') [ : - 1 ] 
--------- B -----------
{'intent': {'gloss': ['sum', 'all', 'elements', 'of', 'nested', 'list', 'var0'], 'words': ['sum', 'all', 'elements', 'of', 'nested', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': 'sum(sum(i) if isinstance(i, list) else i for i in var0)'}
Generated  translation
sum ( sum ( x ) for x in var0 ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'directory', 'str0', 'exists', 'and', 'create', 'it', 'if', 'necessary'], 'words': ['check', 'if', 'directory', 'str0', 'exists', 'and', 'create', 'it', 'if', 'necessary'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'directory'}, 'snippet': 'if not os.path.exists(str0):\n    os.makedirs(str0)'}
Generated  translation
os. path. dirname ( os. path. exists ('str0') ) 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'dictionary', 'var0', 'of', 'key', '-', 'value', 'pairs', 'in', 'pymongo', 'cursor', 'var1'], 'words': ['get', 'a', 'dictionary', 'var0', 'of', 'key', '-', 'value', 'pairs', 'in', 'pymongo', 'cursor', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'records', 'var1': 'cursor'}, 'snippet': "var0 = dict((record['_id'], record) for record in var1)"}
Generated  translation
var1 [ 0 ]. dict ( var0 [ k ] ) 
--------- B -----------
{'intent': {'gloss': ['count', 'the', 'occurrences', 'of', 'items', 'in', 'list', 'var0'], 'words': ['count', 'the', 'occurrences', 'of', 'items', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': 'dict((x, var0.count(x)) for x in set(var0))'}
Generated  translation
sum ( isinstance ( x, int ) for x in var0 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'list', 'of', 'indexes', 'of', 'rows', 'where', 'column', 'str0', 'values', 'match', 'true'], 'words': ['get', 'list', 'of', 'indexes', 'of', 'rows', 'where', 'column', 'str0', 'values', 'match', 'true'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'boolcol'}, 'snippet': "df[df['str0'] == true].index.tolist()"}
Generated  translation
[ i for i, j in enumerate ( str0 ) if v ] 
--------- B -----------
{'intent': {'gloss': ['remove', 'a', 'div', 'with', 'a', 'id', 'str0', 'using', 'beautifulsoup'], 'words': ['remove', 'a', 'div', 'with', 'a', 'id', 'str0', 'using', 'beautifulsoup'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'main-content'}, 'snippet': "soup.find('div', id='str0').decompose()"}
Generated  translation
sys. path. insert ( 0,'str0') 
--------- B -----------
{'intent': {'gloss': ['filter', 'rows', 'containing', 'key', 'word', 'var0', 'in', 'column', 'var1'], 'words': ['filter', 'rows', 'containing', 'key', 'word', 'var0', 'in', 'column', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'ball', 'var1': 'ids'}, 'snippet': "df[df['var1'].str.contains('var0')]"}
Generated  translation
[ var1 ['var0']. filter ( var0. var1 ) ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'list', 'var0', 'into', 'a', 'comma', 'separated', 'string'], 'words': ['convert', 'list', 'var0', 'into', 'a', 'comma', 'separated', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list_of_ints'}, 'snippet': '""",""".join([str(i) for i in var0])'}
Generated  translation
" " " " " ". join ( str ( i ) for i in var0 ) 
--------- B -----------
{'intent': {'gloss': ['unzip', 'list', 'var0'], 'words': ['unzip', 'list', 'var0'], 'after': [' ', ' ', '']}, 'slot_map': {'var0': 'original'}, 'snippet': 'result = [a for a, b in var0], [b for a, b in var0]'}
Generated  translation
var0 = [ ] 
--------- B -----------
{'intent': {'gloss': ['unzip', 'list', 'var0', 'and', 'return', 'a', 'generator'], 'words': ['unzip', 'list', 'var0', 'and', 'return', 'a', 'generator'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'original'}, 'snippet': 'result = (a for a, b in var0), (b for a, b in var0)'}
Generated  translation
return list ( unzip. unzip ( var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['reverse', 'the', 'keys', 'and', 'values', 'in', 'a', 'dictionary', 'var0'], 'words': ['reverse', 'the', 'keys', 'and', 'values', 'in', 'a', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mydictionary'}, 'snippet': '{i[1]: i[0] for i in list(var0.items())}'}
Generated  translation
dict ( ( v, k ) for k, v in var0. items ( ) ) 
--------- B -----------
{'intent': {'gloss': ['call', 'multiple', 'bash', 'function', '‘vasp', '’', 'and', '‘tee', 'tee', '_', 'output', '’', 'using', '‘|', '’'], 'words': ['call', 'multiple', 'bash', 'function', '‘vasp', '’', 'and', '‘tee', 'tee', '_', 'output', '’', 'using', '‘|', '’'], 'after': [' ', ' ', ' ', ' ', '', ' ', ' ', ' ', '', '', '', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "subprocess.check_call('vasp | tee tee_output', shell=true)"}
Generated  translation
call ( ‘ tee _ output, ‘ tee _ tee tee tee ) 
--------- B -----------
{'intent': {'gloss': ['download', 'a', 'file', 'str0', 'over', 'http', 'and', 'save', 'to', 'str1'], 'words': ['download', 'a', 'file', 'str0', 'over', 'http', 'and', 'save', 'to', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'http://www.example.com/songs/mp3.mp3', 'str1': 'mp3.mp3'}, 'snippet': "urllib.request.urlretrieve('str0', 'str1')"}
Generated  translation
testfile = urllib. request. urlopener ( ) testfile. retrieve ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['encode', 'binary', 'string', 'str0', 'to', 'base64', 'code'], 'words': ['encode', 'binary', 'string', 'str0', 'to', 'base64', 'code'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'your string'}, 'snippet': "base64.b64encode(bytes('str0', 'utf-8'))"}
Generated  translation
binascii. encode ('str0') 
--------- B -----------
{'intent': {'gloss': ['identify', 'duplicate', 'values', 'in', 'list', 'var0'], 'words': ['identify', 'duplicate', 'values', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylist'}, 'snippet': '[k for k, v in list(counter(var0).items()) if v > 1]'}
Generated  translation
new _ list = [ ( i ) for i in var0 ] 
--------- B -----------
{'intent': {'gloss': ['subscript', 'text', 'str0', 'with', 'str1', 'as', 'subscripted', 'in', 'matplotlib', 'labels', 'for', 'arrays', 'str2', 'and', 'str3', '.'], 'words': ['subscript', 'text', 'str0', 'with', 'str1', 'as', 'subscripted', 'in', 'matplotlib', 'labels', 'for', 'arrays', 'str2', 'and', 'str3', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'h20', 'str1': '2', 'str2': 'x', 'str3': 'y'}, 'snippet': "plt.plot(str2, str3, label='$h_2o$')"}
Generated  translation
ax. set _ yticklabels ( ['str2 ','str3'] ) 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'list', 'containing', 'the', 'indexes', 'of', 'rows', 'where', 'the', 'value', 'of', 'column', 'str0', 'in', 'dataframe', 'var0', 'are', 'equal', 'to', 'true'], 'words': ['create', 'a', 'list', 'containing', 'the', 'indexes', 'of', 'rows', 'where', 'the', 'value', 'of', 'column', 'str0', 'in', 'dataframe', 'var0', 'are', 'equal', 'to', 'true'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'boolcol', 'var0': 'df'}, 'snippet': "var0.iloc[np.flatnonzero(var0['str0'])]"}
Generated  translation
[ var0 ['str0'] for var0 in range ( len ( var0 ) ) ] 
--------- B -----------
{'intent': {'gloss': ['replace', 'all', 'occurences', 'of', 'newlines', 'str0', 'with', 'str1', 'in', 'dataframe', 'var0'], 'words': ['replace', 'all', 'occurences', 'of', 'newlines', 'str0', 'with', 'str1', 'in', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '\n', 'str1': '<br>', 'var0': 'df'}, 'snippet': "var0.replace({'str0': 'str1'}, regex=true)"}
Generated  translation
var0. replace ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['replace', 'all', 'occurrences', 'of', 'a', 'string', 'str0', 'by', 'string', 'str1', 'in', 'a', 'pandas', 'data', 'frame', 'var0'], 'words': ['replace', 'all', 'occurrences', 'of', 'a', 'string', 'str0', 'by', 'string', 'str1', 'in', 'a', 'pandas', 'data', 'frame', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '\n', 'str1': '<br>', 'var0': 'df'}, 'snippet': "var0.replace({'str0': 'str1'}, regex=true)"}
Generated  translation
var0. replace ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'list', 'containing', 'each', 'two', 'adjacent', 'letters', 'in', 'string', 'var0', 'as', 'its', 'elements'], 'words': ['create', 'a', 'list', 'containing', 'each', 'two', 'adjacent', 'letters', 'in', 'string', 'var0', 'as', 'its', 'elements'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'word'}, 'snippet': '[(x + y) for x, y in zip(var0, var0[1:])]'}
Generated  translation
print (''. join ( [ str ( i ) for i in zip ( var0 [ 1 : ], var0 [ - 1 ] ) ) ] ) 
--------- B -----------
{'intent': {'gloss': ['click', 'a', 'href', 'button', 'str0', 'with', 'selenium'], 'words': ['click', 'a', 'href', 'button', 'str0', 'with', 'selenium'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'send'}, 'snippet': "driver.find_element_by_partial_link_text('str0').click()"}
Generated  translation
driver. find _ element _ by _ css _ selector ('str0'). click ( ) 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'by', 'words', 'that', 'ends', 'with', 'str0'], 'words': ['split', 'string', 'var0', 'by', 'words', 'that', 'ends', 'with', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's', 'str0': 'd'}, 'snippet': "re.findall('\\\\b(\\\\w+)d\\\\b', var0)"}
Generated  translation
re. split ('\ \ s + ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['find', 'all', 'words', 'in', 'a', 'string', 'var0', 'that', 'start', 'with', 'the', 'str0', 'sign'], 'words': ['find', 'all', 'words', 'in', 'a', 'string', 'var0', 'that', 'start', 'with', 'the', 'str0', 'sign'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mystring', 'str0': '$'}, 'snippet': "[word for word in var0.split() if word.startswith('str0')]"}
Generated  translation
re. findall ('\ \ w + ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'unix', 'timestamp', 'str0', 'to', 'formatted', 'string', 'str1'], 'words': ['convert', 'unix', 'timestamp', 'str0', 'to', 'formatted', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '1347517370', 'str1': '%y-%m-%d %h:%m:%s'}, 'snippet': "time.strftime('str1', time.localtime(1347517370))"}
Generated  translation
formatter ='str1 '.'
--------- B -----------
{'intent': {'gloss': ['display', 'the', 'float', 'str0', 'as', 'a', 'percentage'], 'words': ['display', 'the', 'float', 'str0', 'as', 'a', 'percentage'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '1/3*100'}, 'snippet': "print('{0:.0f}%'.format(1.0 / 3 * 100))"}
Generated  translation
float ('str0') 
--------- B -----------
{'intent': {'gloss': ['write', 'records', 'in', 'dataframe', 'var0', 'to', 'table', 'str0', 'in', 'schema', 'str1'], 'words': ['write', 'records', 'in', 'dataframe', 'var0', 'to', 'table', 'str0', 'in', 'schema', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'test', 'str1': 'a_schema'}, 'snippet': "var0.to_sql('str0', engine, schema='str1')"}
Generated  translation
var0. to _ csv ('str1 ', cols = ['str0'] ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'elements', 'from', 'list', 'var0', 'that', 'have', 'an', 'index', 'number', 'mentioned', 'in', 'list', 'var1'], 'words': ['remove', 'elements', 'from', 'list', 'var0', 'that', 'have', 'an', 'index', 'number', 'mentioned', 'in', 'list', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'oldlist', 'var1': 'removelist'}, 'snippet': 'newlist = [v for i, v in enumerate(var0) if i not in var1]'}
Generated  translation
[ x for x in var0 if x not in var1 ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'tuple', 'of', 'tuples', 'str0', 'to', 'tuple'], 'words': ['convert', 'tuple', 'of', 'tuples', 'str0', 'to', 'tuple'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "(('aa',), ('bb',), ('cc',))", '( str0 )': "(('aa',), ('bb',), ('cc',))"}, 'snippet': 'from functools import reduce\nreduce(lambda a, b: a + b, ( str0 ))'}
Generated  translation
tuple ( zip ( * [ ( str0 ), ( str0 ) ] ) ) 
--------- B -----------
{'intent': {'gloss': ['python', 'pandas', ':', 'how', 'to', 'replace', 'a', 'characters', 'in', 'a', 'column', 'of', 'a', 'dataframe', '?'], 'words': ['python', 'pandas', ':', 'how', 'to', 'replace', 'a', 'characters', 'in', 'a', 'column', 'of', 'a', 'dataframe', '?'], 'after': [' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "df['range'].replace(',', '-', inplace=true)"}
Generated  translation
df. apply ( lambda x : x. replace ('[ ^ a - za - z ] ','' ) ) 
--------- B -----------
{'intent': {'gloss': ['filter', 'dataframe', 'var0', 'by', 'values', 'in', 'column', 'var1', 'that', 'appear', 'more', 'than', 'once'], 'words': ['filter', 'dataframe', 'var0', 'by', 'values', 'in', 'column', 'var1', 'that', 'appear', 'more', 'than', 'once'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'var1': 'a'}, 'snippet': "var0.groupby('var1').filter(lambda x: len(x) > 1)"}
Generated  translation
var0. groupby ( var1'). size ( ). groupby ( lambda x : x. var0 ['var1']. fillna ( 0 ) ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'datetime', 'column', 'str0', 'of', 'pandas', 'dataframe', 'str1', 'to', 'ordinal'], 'words': ['convert', 'datetime', 'column', 'str0', 'of', 'pandas', 'dataframe', 'str1', 'to', 'ordinal'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'date', 'str1': 'df'}, 'snippet': "str1['str0'].apply(lambda x: x.toordinal())"}
Generated  translation
str1. str ['str0'] = df ['str0']. astype ( int ) 
--------- B -----------
{'intent': {'gloss': ['reverse', 'sort', 'list', 'of', 'dicts', 'var0', 'by', 'value', 'for', 'key', 'var1'], 'words': ['reverse', 'sort', 'list', 'of', 'dicts', 'var0', 'by', 'value', 'for', 'key', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l', 'var1': 'time'}, 'snippet': "var0 = sorted(var0, key=itemgetter('var1'), reverse=true)"}
Generated  translation
sorted ( var0, key = lambda i : var1 [ i ] ['var0'] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'rows', 'of', 'dataframe', 'var0', 'that', 'match', 'regex', 'str0'], 'words': ['get', 'rows', 'of', 'dataframe', 'var0', 'that', 'match', 'regex', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': '(hel|just)', '( str0 )': '(hel|just)'}, 'snippet': "var0.loc[var0[0].str.contains('str0')]"}
Generated  translation
var0. loc [ var0 ['str0']. isin ( var0 ) ] 
--------- B -----------
{'intent': {'gloss': ['sort', 'list', 'var0', 'based', 'on', 'second', 'index', 'of', 'each', 'string', 'var1'], 'words': ['sort', 'list', 'var0', 'based', 'on', 'second', 'index', 'of', 'each', 'string', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list_of_strings', 'var1': 's'}, 'snippet': "sorted(var0, key=lambda var1: var1.split(',')[1])"}
Generated  translation
var0. sort ( key = lambda x : x [ 2 ] ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'dictionaries', 'var0', 'by', 'values', 'in', 'key', 'var1', 'in', 'descending', 'order'], 'words': ['sort', 'a', 'list', 'of', 'dictionaries', 'var0', 'by', 'values', 'in', 'key', 'var1', 'in', 'descending', 'order'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l', 'var1': 'name'}, 'snippet': "newlist = sorted(var0, key=itemgetter('var1'), reverse=true)"}
Generated  translation
sorted ( var0, key = lambda i : var1. index ( list ( i. values ( ) ) [ 0 ], reverse = true ) ) 
--------- B -----------
{'intent': {'gloss': ['django', 'get', 'maximum', 'value', 'associated', 'with', 'field', 'str0', 'in', 'model', 'var0'], 'words': ['django', 'get', 'maximum', 'value', 'associated', 'with', 'field', 'str0', 'in', 'model', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'added', 'var0': 'authorizedemail'}, 'snippet': "var0.objects.filter(group=group).order_by('-added')[0]"}
Generated  translation
var0. objects. filter ( id = 1 ). get ('str0') 
--------- B -----------
{'intent': {'gloss': ['download', 'a', 'file', 'str0', 'over', 'http'], 'words': ['download', 'a', 'file', 'str0', 'over', 'http'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'http://www.example.com/'}, 'snippet': "response = urllib.request.urlopen('str0')\nhtml = response.read()"}
Generated  translation
open ('str0 ','r'). write ('str0') 
--------- B -----------
{'intent': {'gloss': ['convert', 'epoch', 'time', 'represented', 'as', 'milliseconds', 'var0', 'to', 'string', 'using', 'format', 'str0'], 'words': ['convert', 'epoch', 'time', 'represented', 'as', 'milliseconds', 'var0', 'to', 'string', 'using', 'format', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's', 'str0': '%y-%m-%d %h:%m:%s.%f'}, 'snippet': "datetime.datetime.fromtimestamp(var0).strftime('str0')"}
Generated  translation
datetime. datetime. fromtimestamp ( var0 / 1000. 0 ) 
--------- B -----------
{'intent': {'gloss': ['upload', 'file', 'using', 'ftp'], 'words': ['upload', 'file', 'using', 'ftp'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "ftp.storlines('stor ' + filename, open(filename, 'r'))"}
Generated  translation
ftp. retrbinary ('date filename ', file ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'list', 'of', 'lists', 'var0', 'to', 'list', 'of', 'integers'], 'words': ['convert', 'list', 'of', 'lists', 'var0', 'to', 'list', 'of', 'integers'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': "[int(''.join(str(d) for d in x)) for x in var0]"}
Generated  translation
[ map ( int, sublist ) for sublist in var0 ] 
--------- B -----------
{'intent': {'gloss': ['replace', 'a', 'separate', 'word', 'str0', 'by', 'str1', 'in', 'a', 'string', 'str2'], 'words': ['replace', 'a', 'separate', 'word', 'str0', 'by', 'str1', 'in', 'a', 'string', 'str2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'h3', 'str1': 'h1', 'str2': 'text'}, 'snippet': "re.sub('\\\\bh3\\\\b', 'str1', str2)"}
Generated  translation
re. sub ('(. * ) ','str2 ','str0') 
--------- B -----------
{'intent': {'gloss': ['insert', 'data', 'from', 'a', 'string', 'var0', 'to', 'sqlite', 'db', 'var1'], 'words': ['insert', 'data', 'from', 'a', 'string', 'var0', 'to', 'sqlite', 'db', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'testfield', 'var1': 'c'}, 'snippet': 'var1.execute("insert into test values (?, \'bar\')", (var0,))'}
Generated  translation
var1. execute ('insert or replace into table values ( % s )'% ( var0, ) ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'all', 'special', 'characters', ',', 'punctuation', 'and', 'spaces', 'from', 'a', 'string', 'var0', 'using', 'regex'], 'words': ['remove', 'all', 'special', 'characters', ',', 'punctuation', 'and', 'spaces', 'from', 'a', 'string', 'var0', 'using', 'regex'], 'after': [' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mystring'}, 'snippet': "re.sub('[^a-za-z0-9]+', '', var0)"}
Generated  translation
re. sub ('[ ^ \ \ w + ] ','', var0 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'list', 'containing', 'the', 'sum', 'of', 'each', 'element', 'var0', 'in', 'list', 'var1', 'plus', 'the', 'previous', 'elements'], 'words': ['get', 'a', 'list', 'containing', 'the', 'sum', 'of', 'each', 'element', 'var0', 'in', 'list', 'var1', 'plus', 'the', 'previous', 'elements'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'i', 'var1': 'l'}, 'snippet': '[sum(var1[:var0]) for var0, _ in enumerate(var1)]'}
Generated  translation
[ sum ( x ) for x in var1 if x. split ( ) ] 
--------- B -----------
{'intent': {'gloss': ['beautifulsoup', 'find', 'all', 'str0', 'elements', 'in', 'html', 'string', 'var0', 'with', 'class', 'of', 'str1'], 'words': ['beautifulsoup', 'find', 'all', 'str0', 'elements', 'in', 'html', 'string', 'var0', 'with', 'class', 'of', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'span', 'var0': 'soup', 'str1': 'stargryb sp'}, 'snippet': "var0.find_all('str0', {'class': 'str1'})"}
Generated  translation
soup. findall ('str0 ', attrs = {'str1':'str1'} ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'duplicate', 'elements', 'from', 'list', 'str0'], 'words': ['remove', 'duplicate', 'elements', 'from', 'list', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'l'}, 'snippet': 'list(dict((x[0], x) for x in str0).values())'}
Generated  translation
[ k for k, g in itertools. groupby ( [ str0 ] ) ] 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'words': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'testlist'}, 'snippet': 'for i in [i for i, x in enumerate(var0) if x == 1]:\n    pass'}
Generated  translation
print ( var0. position ( 1 ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'words': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'testlist'}, 'snippet': 'for i in (i for i, x in enumerate(var0) if x == 1):\n    pass'}
Generated  translation
print ( var0. position ( 1 ) ) 
--------- B -----------
{'intent': {'gloss': ['python', 'split', 'a', 'string', 'using', 'regex'], 'words': ['python', 'split', 'a', 'string', 'using', 'regex'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "re.findall('(.+?):(.+?)\\\\b ?', text)"}
Generated  translation
re. findall ('\ \ w + ','str0') 
--------- B -----------
{'intent': {'gloss': ['get', 'all', 'text', 'that', 'is', 'not', 'enclosed', 'within', 'square', 'brackets', 'in', 'string', 'var0'], 'words': ['get', 'all', 'text', 'that', 'is', 'not', 'enclosed', 'within', 'square', 'brackets', 'in', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'example_str'}, 'snippet': "re.findall('(.*?)\\\\[.*?\\\\]', var0)"}
Generated  translation
re. sub ('\ \ [ ( [ ^ \ \ ] ] * ) \ \ ] ','', var0 ) 
--------- B -----------
{'intent': {'gloss': ['read', 'a', 'file', 'str0', 'into', 'a', 'list', 'var0'], 'words': ['read', 'a', 'file', 'str0', 'into', 'a', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'c:/name/mydocuments/numbers', 'var0': 'data'}, 'snippet': "var0 = [line.strip() for line in open('str0', 'r')]"}
Generated  translation
var0 = [ open ('str0'). read ( ) ] 
--------- B -----------
{'intent': {'gloss': ['loop', 'through', 'the', 'ip', 'address', 'range', 'str0'], 'words': ['loop', 'through', 'the', 'ip', 'address', 'range', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '192.168.x.x'}, 'snippet': 'for i, j in product(list(range(256)), list(range(256))):\n    pass'}
Generated  translation
globals ( ) ['str0']. format ( * args ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'last', 'comma', 'character', 'str0', 'in', 'string', 'var0'], 'words': ['remove', 'last', 'comma', 'character', 'str0', 'in', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': ',', 'var0': 's'}, 'snippet': '"""""".join(var0.rsplit(\'str0\', 1))'}
Generated  translation
var0. replace ('str0 ','' ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'dictionary', 'var0', 'based', 'on', 'key', 'var1', 'in', 'descending', 'order'], 'words': ['sort', 'a', 'list', 'of', 'dictionary', 'var0', 'based', 'on', 'key', 'var1', 'in', 'descending', 'order'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l', 'var1': 'time'}, 'snippet': "var0 = sorted(var0, key=lambda a: a['var1'], reverse=true)"}
Generated  translation
sorted ( var0, key = lambda tup : var1 [ : : - 1 ], reverse = true ) 
--------- B -----------
{'intent': {'gloss': ['find', 'the', 'string', 'in', 'var0', 'between', 'two', 'special', 'characters', 'str0', 'and', 'str1'], 'words': ['find', 'the', 'string', 'in', 'var0', 'between', 'two', 'special', 'characters', 'str0', 'and', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'your_string', 'str0': '[', 'str1': ']'}, 'snippet': "re.search('\\\\[(.*)\\\\]', var0).group(1)"}
Generated  translation
re. findall ('\ \ s + ','str0 ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'integer', 'var0', 'into', 'an', 'unassigned', 'integer'], 'words': ['convert', 'integer', 'var0', 'into', 'an', 'unassigned', 'integer'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'number'}, 'snippet': "struct.unpack('h', struct.pack('h', var0))"}
Generated  translation
struct. unpack ('> q ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['sum', 'elements', 'at', 'the', 'same', 'index', 'in', 'list', 'var0'], 'words': ['sum', 'elements', 'at', 'the', 'same', 'index', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'data'}, 'snippet': '[[sum(item) for item in zip(*items)] for items in zip(*var0)]'}
Generated  translation
map ( sum, zip ( * var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'rid', 'of', 'none', 'values', 'in', 'dictionary', 'var0'], 'words': ['get', 'rid', 'of', 'none', 'values', 'in', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'kwargs'}, 'snippet': 'res = {k: v for k, v in list(var0.items()) if v is not none}'}
Generated  translation
{ key : val for key, val in list ( var0. items ( ) ) if v! ='y3'} 
--------- B -----------
{'intent': {'gloss': ['merge', 'a', 'nested', 'dictionary', 'var0', 'into', 'a', 'flat', 'dictionary', 'by', 'concatenating', 'nested', 'values', 'with', 'the', 'same', 'key', 'var1'], 'words': ['merge', 'a', 'nested', 'dictionary', 'var0', 'into', 'a', 'flat', 'dictionary', 'by', 'concatenating', 'nested', 'values', 'with', 'the', 'same', 'key', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'dicts', 'var1': 'k'}, 'snippet': '{var1: [d[var1] for d in var0] for var1 in var0[0]}'}
Generated  translation
dict ( ( k, v ) for k, v in var1. items ( ) if k! = var0 [ k ] ) 
--------- B -----------
{'intent': {'gloss': ['loop', 'over', 'files', 'in', 'directory', 'var0'], 'words': ['loop', 'over', 'files', 'in', 'directory', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'source'}, 'snippet': 'for root, dirs, filenames in os.walk(var0):\n    for f in filenames:\n        pass'}
Generated  translation
os. path. join ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['join', 'each', 'element', 'in', 'array', 'var0', 'with', 'element', 'at', 'the', 'same', 'index', 'in', 'array', 'var1', 'as', 'a', 'tuple'], 'words': ['join', 'each', 'element', 'in', 'array', 'var0', 'with', 'element', 'at', 'the', 'same', 'index', 'in', 'array', 'var1', 'as', 'a', 'tuple'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'b'}, 'snippet': 'np.array([zip(x, y) for x, y in zip(var0, var1)])'}
Generated  translation
np. zeros ( ( var0, var1 ) ) 
--------- B -----------
{'intent': {'gloss': ['extract', 'brackets', 'from', 'string', 'var0'], 'words': ['extract', 'brackets', 'from', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': "brackets = re.sub('[^(){}[\\\\]]', '', var0)"}
Generated  translation
re. findall ('\ \ [ (. *? ) \ \ ] ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['append', 'a', 'tuple', 'of', 'elements', 'from', 'list', 'var0', 'with', 'indexes', 'str0', 'to', 'list', 'var1'], 'words': ['append', 'a', 'tuple', 'of', 'elements', 'from', 'list', 'var0', 'with', 'indexes', 'str0', 'to', 'list', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'str0': '[0][0] [0][2]', 'var1': 'b', '[ str0 ]': '[0][0] [0][2]'}, 'snippet': 'var1.append((var0[0][0], var0[0][2]))'}
Generated  translation
[ ( x, var0 ) for x in var1 ] 
--------- B -----------
{'intent': {'gloss': ['reverse', 'sort', 'counter', 'var0', 'by', 'value'], 'words': ['reverse', 'sort', 'counter', 'var0', 'by', 'value'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'sorted(list(var0.items()), key=lambda pair: pair[1], reverse=true)'}
Generated  translation
sorted ( var0, key = var0. get ) 
--------- B -----------
{'intent': {'gloss': ['add', 'a', 'column', 'str0', 'with', 'value', 'str1', 'to', 'dataframe', 'var0'], 'words': ['add', 'a', 'column', 'str0', 'with', 'value', 'str1', 'to', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'day', 'str1': 'sat', 'var0': 'df'}, 'snippet': "var0.xs('str1', level='str0', drop_level=false)"}
Generated  translation
var0 ['str0'] = var0 ['str1']. apply ( lambda x : str0 ['str0'] ) 
--------- B -----------
{'intent': {'gloss': ['sorting', 'a', 'list', 'of', 'lists', 'in', 'python'], 'words': ['sorting', 'a', 'list', 'of', 'lists', 'in', 'python'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'c2.sort(key=lambda row: (row[2], row[1], row[0]))'}
Generated  translation
[ sorted ( item ) for item in sorted ( l, key = lambda t : t [ 0 ] ) ] 
--------- B -----------
{'intent': {'gloss': ['get', 'an', 'array', 'of', 'the', 'mean', 'of', 'each', 'two', 'consecutive', 'values', 'in', 'numpy', 'array', 'var0'], 'words': ['get', 'an', 'array', 'of', 'the', 'mean', 'of', 'each', 'two', 'consecutive', 'values', 'in', 'numpy', 'array', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'var0[:-1] + (var0[1:] - var0[:-1]) / 2'}
Generated  translation
np. zeros ( ( var0 - 1, axis = 2 ) ). ravel ( ) 
--------- B -----------
{'intent': {'gloss': ['how', 'to', 'sort', 'a', 'dataframe', 'by', 'the', 'ocurrences', 'in', 'a', 'column', 'in', 'python', '(', 'pandas', ')'], 'words': ['how', 'to', 'sort', 'a', 'dataframe', 'by', 'the', 'ocurrences', 'in', 'a', 'column', 'in', 'python', '(', 'pandas', ')'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '']}, 'slot_map': {}, 'snippet': "df.groupby('prots').sum().sort('scores', ascending=false)"}
Generated  translation
df. sort ('ocurrence of { } '. format ( df. columns ), axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['python', 'regex', 'to', 'find', 'all', 'numbers', 'and', 'dots', 'from', 'str0'], 'words': ['python', 'regex', 'to', 'find', 'all', 'numbers', 'and', 'dots', 'from', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'text'}, 'snippet': "re.findall('test([\\\\d.]*\\\\d+)', str0)"}
Generated  translation
re. findall ('[ \ \ w ] + ','str0') 
--------- B -----------
{'intent': {'gloss': ['get', 'rid', 'of', 'none', 'values', 'in', 'dictionary', 'var0'], 'words': ['get', 'rid', 'of', 'none', 'values', 'in', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'kwargs'}, 'snippet': 'res = dict((k, v) for k, v in var0.items() if v is not none)'}
Generated  translation
{ key : val for key, val in list ( var0. items ( ) ) if v! ='y3'} 
--------- B -----------
{'intent': {'gloss': ['argparse', 'add', 'argument', 'with', 'flag', 'str0', 'and', 'version', 'action', 'of', 'str1', 'to', 'parser', 'var0'], 'words': ['argparse', 'add', 'argument', 'with', 'flag', 'str0', 'and', 'version', 'action', 'of', 'str1', 'to', 'parser', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '--version', 'str1': '%(prog)s 2.0', 'var0': 'parser'}, 'snippet': "var0.add_argument('str0', action='version', version='str1')"}
Generated  translation
var0. update ( {'str0':'str1'} ) 
--------- B -----------
{'intent': {'gloss': ['multiple', 'each', 'value', 'by', 'str0', 'for', 'all', 'keys', 'in', 'a', 'dictionary', 'var0'], 'words': ['multiple', 'each', 'value', 'by', 'str0', 'for', 'all', 'keys', 'in', 'a', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '2', 'var0': 'my_dict'}, 'snippet': 'var0.update((x, y * 2) for x, y in list(var0.items()))'}
Generated  translation
dict ( ( k, v ) for k, v in var0. items ( ) if v > 1 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'date', '7', 'days', 'before', 'the', 'current', 'date'], 'words': ['get', 'the', 'date', '7', 'days', 'before', 'the', 'current', 'date'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': '(datetime.datetime.now() - datetime.timedelta(days=7)).date()'}
Generated  translation
print ( ( datetime. date. today ( ) + datetime. timedelta ( 6 * 365 / 12 ) ). isoformat ( ) ) 
--------- B -----------
{'intent': {'gloss': ['combine', 'list', 'of', 'dictionaries', 'var0', 'with', 'the', 'same', 'keys', 'in', 'each', 'list', 'to', 'a', 'single', 'dictionary'], 'words': ['combine', 'list', 'of', 'dictionaries', 'var0', 'with', 'the', 'same', 'keys', 'in', 'each', 'list', 'to', 'a', 'single', 'dictionary'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'dicts'}, 'snippet': 'dict((k, [d[k] for d in var0]) for k in var0[0])'}
Generated  translation
dict ( ( k, v ) for k, v in var0. items ( ) if v ) 
--------- B -----------
{'intent': {'gloss': ['find', 'the', 'index', 'of', 'a', 'list', 'with', 'the', 'first', 'element', 'equal', 'to', 'str0', 'within', 'the', 'list', 'of', 'lists', 'var0'], 'words': ['find', 'the', 'index', 'of', 'a', 'list', 'with', 'the', 'first', 'element', 'equal', 'to', 'str0', 'within', 'the', 'list', 'of', 'lists', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '332', 'var0': 'thelist'}, 'snippet': "[index for index, item in enumerate(var0) if item[0] == 'str0']"}
Generated  translation
[ item for item in var0 if item [ 0 ] = ='str0'] 
--------- B -----------
{'intent': {'gloss': ['use', 'str0', 'operator', 'to', 'print', 'variable', 'values', 'var0', 'inside', 'a', 'string'], 'words': ['use', 'str0', 'operator', 'to', 'print', 'variable', 'values', 'var0', 'inside', 'a', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '%s', 'var0': 'str1'}, 'snippet': "'first string is: %s, second one is: %s' % (var0, 'geo.tif')"}
Generated  translation
print ('str0 '. replace ( ', ','' ) ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'pandas', 'series', 'var0', 'into', 'a', 'pandas', 'dataframe', 'var1', 'with', 'columns', 'var2', 'and', 'var3'], 'words': ['convert', 'a', 'pandas', 'series', 'var0', 'into', 'a', 'pandas', 'dataframe', 'var1', 'with', 'columns', 'var2', 'and', 'var3'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'sf', 'var1': 'df', 'var2': 'email', 'var3': 'list'}, 'snippet': "pd.dataframe({'var2': var0.index, 'var3': var0.values})"}
Generated  translation
var1. merge ( var0, var2, how ='inner ', columns = ['var3'] ) 
--------- B -----------
{'intent': {'gloss': ['django', 'set', 'default', 'value', 'of', 'field', 'var0', 'equal', 'to', 'str0'], 'words': ['django', 'set', 'default', 'value', 'of', 'field', 'var0', 'equal', 'to', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'b', 'str0': '0000000'}, 'snippet': "var0 = models.charfield(max_length=7, default='str0', editable=false)"}
Generated  translation
sys. setdefaultencoding ('str0') 
--------- B -----------
{'intent': {'gloss': ['get', 'whatever', 'is', 'between', 'parentheses', 'as', 'a', 'single', 'match', ',', 'and', 'any', 'char', 'outside', 'as', 'an', 'individual', 'match', 'in', 'string', 'str0'], 'words': ['get', 'whatever', 'is', 'between', 'parentheses', 'as', 'a', 'single', 'match', ',', 'and', 'any', 'char', 'outside', 'as', 'an', 'individual', 'match', 'in', 'string', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '(zyx)bc'}, 'snippet': "re.findall('\\\\(.+?\\\\)|\\\\w', 'str0')"}
Generated  translation
re. findall ('\ \ ( [ ^ $ ] * \ \ ) ','str0') 
--------- B -----------
{'intent': {'gloss': ['match', 'multiple', 'regex', 'patterns', 'with', 'the', 'alternation', 'operator', 'str0', 'in', 'a', 'string', 'str1'], 'words': ['match', 'multiple', 'regex', 'patterns', 'with', 'the', 'alternation', 'operator', 'str0', 'in', 'a', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '|', 'str1': '(zyx)bc'}, 'snippet': "re.findall('\\\\(.*?\\\\)|\\\\w', 'str1')"}
Generated  translation
re. findall ('^ (. *? cat. *? ) ','str1') 
--------- B -----------
{'intent': {'gloss': ['find', 'the', 'index', 'of', 'an', 'element', 'str0', 'in', 'a', 'list', 'var0'], 'words': ['find', 'the', 'index', 'of', 'an', 'element', 'str0', 'in', 'a', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'msft', 'var0': 'stocks_list'}, 'snippet': "[x for x in range(len(var0)) if var0[x] == 'str0']"}
Generated  translation
i = [ str0 ] 
--------- B -----------
{'intent': {'gloss': ['send', 'multipart', 'encoded', 'file', 'var0', 'to', 'url', 'var1', 'with', 'headers', 'var2', 'and', 'metadata', 'var3'], 'words': ['send', 'multipart', 'encoded', 'file', 'var0', 'to', 'url', 'var1', 'with', 'headers', 'var2', 'and', 'metadata', 'var3'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'files', 'var1': 'url', 'var2': 'headers', 'var3': 'data'}, 'snippet': 'r = requests.post(var1, var0=var0, var2=var2, var3=var3)'}
Generated  translation
urllib. parse. unquote ( var1, var2 ='var0') 
--------- B -----------
{'intent': {'gloss': ['numpy', 'concatenate', 'two', 'arrays', 'var0', 'and', 'var1', 'along', 'the', 'first', 'axis'], 'words': ['numpy', 'concatenate', 'two', 'arrays', 'var0', 'and', 'var1', 'along', 'the', 'first', 'axis'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'b'}, 'snippet': 'c = np.r_[var0[(none), :], var1[(none), :]]'}
Generated  translation
numpy. concatenate ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'list', 'of', 'lists', 'var0', 'into', 'a', 'flat', 'list'], 'words': ['convert', 'list', 'of', 'lists', 'var0', 'into', 'a', 'flat', 'list'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'data'}, 'snippet': '[y for x in var0 for y in (x if isinstance(x, list) else [x])]'}
Generated  translation
y = map ( operator. itemgetter ( 0 ), var0 ) 
--------- B -----------
{'intent': {'gloss': ['find', 'all', 'numbers', 'and', 'dots', 'from', 'a', 'string', 'var0', 'using', 'regex'], 'words': ['find', 'all', 'numbers', 'and', 'dots', 'from', 'a', 'string', 'var0', 'using', 'regex'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'text'}, 'snippet': "re.findall('test([0-9.]*[0-9]+)', var0)"}
Generated  translation
re. findall ('(? < = [ \ \ w \ \ d. ] + ) ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['run', 'script', 'str0', 'with', 'argument', 'str1', 'on', 'terminal', 'using', 'python', 'executable'], 'words': ['run', 'script', 'str0', 'with', 'argument', 'str1', 'on', 'terminal', 'using', 'python', 'executable'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'hello.py', 'str1': 'htmlfilename.htm'}, 'snippet': "subprocess.call(['python.exe', 'str0', 'str1'])"}
Generated  translation
os. system ('script2. py1') 
--------- B -----------
{'intent': {'gloss': ['sum', 'columns', 'of', 'a', 'list', 'var0'], 'words': ['sum', 'columns', 'of', 'a', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'array'}, 'snippet': '[sum(row[i] for row in var0) for i in range(len(var0[0]))]'}
Generated  translation
sum ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['insert', 'a', 'str0', 'value', 'into', 'a', 'sqlite3', 'table', '.'], 'words': ['insert', 'a', 'str0', 'value', 'into', 'a', 'sqlite3', 'table', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'none'}, 'snippet': 'db.execute("insert into present values(\'test2\', ?, 10)", (str0,))'}
Generated  translation
sqlite3. insert ( 0,'str0') 
--------- B -----------
{'intent': {'gloss': ['using', '%', 'f', 'with', 'strftime', '(', ')', 'in', 'python', 'to', 'get', 'microseconds'], 'words': ['using', '%', 'f', 'with', 'strftime', '(', ')', 'in', 'python', 'to', 'get', 'microseconds'], 'after': [' ', '', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "datetime.datetime.now().strftime('%h:%m:%s.%f')"}
Generated  translation
datetime. datetime. strptime ('str0 ','% a, % d / % b % y'). strftime ('% f') 
--------- B -----------
{'intent': {'gloss': ['get', 'digits', 'only', 'from', 'a', 'string', 'var0', 'using', 'lambda', 'function'], 'words': ['get', 'digits', 'only', 'from', 'a', 'string', 'var0', 'using', 'lambda', 'function'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'aas30dsa20'}, 'snippet': '"""""".join([x for x in \'var0\' if x.isdigit()])'}
Generated  translation
" " " " " ". join ( c for c in var0 if c. isdigit ( ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'filename', 'without', 'the', 'extension', 'from', 'file', 'str0'], 'words': ['get', 'the', 'filename', 'without', 'the', 'extension', 'from', 'file', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'hemanth.txt'}, 'snippet': "print(os.path.splitext(os.path.basename('str0'))[0])"}
Generated  translation
os. path. split ( os. path. abspath ( str0 ) ) 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'dictionary', 'by', 'adding', 'each', 'two', 'adjacent', 'elements', 'in', 'tuple', 'var0', 'as', 'key', '/', 'value', 'pair', 'to', 'it'], 'words': ['create', 'a', 'dictionary', 'by', 'adding', 'each', 'two', 'adjacent', 'elements', 'in', 'tuple', 'var0', 'as', 'key', '/', 'value', 'pair', 'to', 'it'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'dict(var0[i:i + 2] for i in range(0, len(var0), 2))'}
Generated  translation
dict ( ( k, v ) for k, v in zip ( var0, var0 [ 1 : ] ) ) 
--------- B -----------
{'intent': {'gloss': ['extract', 'a', 'url', 'from', 'a', 'string', 'var0'], 'words': ['extract', 'a', 'url', 'from', 'a', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mystring'}, 'snippet': "print(re.findall('(https?://[^\\\\s]+)', var0))"}
Generated  translation
" " " " " ". join ( urllib. parse. split ( ) ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'elements', 'of', 'each', 'tuple', 'in', 'list', 'var0', 'into', 'a', 'string', 'separated', 'by', 'character', 'str0'], 'words': ['convert', 'elements', 'of', 'each', 'tuple', 'in', 'list', 'var0', 'into', 'a', 'string', 'separated', 'by', 'character', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l', 'str0': '@'}, 'snippet': '""" """.join([(\'%d@%d\' % t) for t in var0])'}
Generated  translation
[ ('str0') for s in var0 ] 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'words': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'testlist'}, 'snippet': 'gen = (i for i, x in enumerate(var0) if x == 1)\nfor i in gen:\n    pass'}
Generated  translation
print ( var0. position ( 1 ) ) 
--------- B -----------
{'intent': {'gloss': ['double', 'backslash', 'escape', 'all', 'double', 'quotes', 'in', 'string', 'var0'], 'words': ['double', 'backslash', 'escape', 'all', 'double', 'quotes', 'in', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': 'print(var0.encode(\'unicode-escape\').replace(\'"\', \'\\\\"\'))'}
Generated  translation
re. sub ('\ \ b \ \ d + \ \ b ','', var0 ) 
--------- B -----------
{'intent': {'gloss': ['how', 'to', 'delete', 'all', 'instances', 'of', 'a', 'character', 'in', 'a', 'string', 'in', 'python', '?'], 'words': ['how', 'to', 'delete', 'all', 'instances', 'of', 'a', 'character', 'in', 'a', 'string', 'in', 'python', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': '"""""".join([char for char in \'it is icy\' if char != \'i\'])'}
Generated  translation
newstr = oldstr. replace ('m ','' ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'dictionary', 'var0', 'first', 'by', 'key', 'var1', 'and', 'then', 'by', 'var2'], 'words': ['sort', 'a', 'list', 'of', 'dictionary', 'var0', 'first', 'by', 'key', 'var1', 'and', 'then', 'by', 'var2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list', 'var1': 'points', 'var2': 'time'}, 'snippet': "var0.sort(key=lambda item: (item['var1'], item['var2']))"}
Generated  translation
sorted ( var0, key = lambda x : ( x [ 1 ], x [ 2 ] ), reverse = true ) 
--------- B -----------
{'intent': {'gloss': ['format', 'number', 'of', 'spaces', 'between', 'strings', 'var0', ',', 'str0', 'and', 'str1', 'to', 'be', 'str2'], 'words': ['format', 'number', 'of', 'spaces', 'between', 'strings', 'var0', ',', 'str0', 'and', 'str1', 'to', 'be', 'str2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'python', 'str0': ':', 'str1': 'very good', 'str2': '20'}, 'snippet': "print('%*s : %*s' % (20, 'var0', 20, 'str1'))"}
Generated  translation
" " " var0 " " ". format ('str1 ','str2') 
--------- B -----------
{'intent': {'gloss': ['multiply', 'a', 'matrix', 'var0', 'with', 'a', '3d', 'tensor', 'var1', 'in', 'scipy'], 'words': ['multiply', 'a', 'matrix', 'var0', 'with', 'a', '3d', 'tensor', 'var1', 'in', 'scipy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'p', 'var1': 't'}, 'snippet': 'scipy.tensordot(var0, var1, axes=[1, 1]).swapaxes(0, 1)'}
Generated  translation
np. einsum ('ji, ij - > j ', var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'scalar', 'var0', 'to', 'array'], 'words': ['convert', 'scalar', 'var0', 'to', 'array'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'var0 = np.asarray(var0).reshape(1, -1)[(0), :]'}
Generated  translation
var0. strip ( ) 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'list', 'of', 'pairs', 'from', 'a', 'string', 'var0', 'using', 'lambda', 'function'], 'words': ['get', 'a', 'list', 'of', 'pairs', 'from', 'a', 'string', 'var0', 'using', 'lambda', 'function'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'word'}, 'snippet': 'list(map(lambda x, y: x + y, var0[:-1], var0[1:]))'}
Generated  translation
map ( list, set ( var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'datetimeindex', 'containing', '13', 'periods', 'of', 'the', 'second', 'friday', 'of', 'each', 'month', 'starting', 'from', 'date', 'str0'], 'words': ['create', 'a', 'datetimeindex', 'containing', '13', 'periods', 'of', 'the', 'second', 'friday', 'of', 'each', 'month', 'starting', 'from', 'date', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '2016-01-01'}, 'snippet': "pd.date_range('str0', freq='wom-2fri', periods=13)"}
Generated  translation
datetime. datetime. strptime ('str0 ','% b % d, % y'). date ( ) 
--------- B -----------
{'intent': {'gloss': ['create', 'list', 'of', 'values', 'from', 'dictionary', 'var0', 'that', 'have', 'a', 'key', 'that', 'starts', 'with', 'str0'], 'words': ['create', 'list', 'of', 'values', 'from', 'dictionary', 'var0', 'that', 'have', 'a', 'key', 'that', 'starts', 'with', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'dict1', 'str0': 'emp$$'}, 'snippet': "[value for key, value in list(var0.items()) if key.startswith('str0')]"}
Generated  translation
[ value for item in var0 if'str0'in key. split ( ',') ] 
--------- B -----------
{'intent': {'gloss': ['count', 'most', 'frequent', '100', 'words', 'in', 'column', 'str0', 'of', 'dataframe', 'var0'], 'words': ['count', 'most', 'frequent', '100', 'words', 'in', 'column', 'str0', 'of', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'text', 'var0': 'df'}, 'snippet': "counter(' '.join(var0['str0']).split()).most_common(100)"}
Generated  translation
var0. groupby ('str0'). agg ( lambda x : x. replace ('str0 ','' ). cumsum ( ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'current', 'directory', 'of', 'a', 'script'], 'words': ['get', 'the', 'current', 'directory', 'of', 'a', 'script'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'os.path.basename(os.path.dirname(os.path.realpath(__file__)))'}
Generated  translation
os. path. dirname ( os. path. abspath ( _ _ file _ _ ) ) 
--------- B -----------
{'intent': {'gloss': ['sum', 'integers', 'contained', 'in', 'strings', 'in', 'list', 'str0'], 'words': ['sum', 'integers', 'contained', 'in', 'strings', 'in', 'list', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "['', '3.4', '', '', '1.0']", '[ str0 ]': "['', '3.4', '', '', '1.0']"}, 'snippet': 'sum(int(float(item)) for item in [_f for _f in [ str0 ] if\n    _f])'}
Generated  translation
sum ( map ( int, [ str0 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['write', 'line', 'str0', 'to', 'file', 'var0'], 'words': ['write', 'line', 'str0', 'to', 'file', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'hi there', 'var0': 'myfile'}, 'snippet': "f = open('var0', 'w')\nf.write('hi there\\n')\nf.close()"}
Generated  translation
var0. write ('str0') 
--------- B -----------
{'intent': {'gloss': ['get', 'all', 'urls', 'within', 'text', 'var0'], 'words': ['get', 'all', 'urls', 'within', 'text', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': 're.findall(\'"(http.*?)"\', var0, re.multiline | re.dotall)'}
Generated  translation
urllib. parse. quote _ plus ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['match', 'urls', 'whose', 'domain', 'doesn', "'", 't', 'start', 'with', 'var0', 'from', 'string', 'var1', 'using', 'regex'], 'words': ['match', 'urls', 'whose', 'domain', 'doesn', "'", 't', 'start', 'with', 'var0', 'from', 'string', 'var1', 'using', 'regex'], 'after': [' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 't', 'var1': 'document'}, 'snippet': 're.findall(\'http://[^t][^s"]+\\\\.html\', var1)'}
Generated  translation
urllib. parse. quote ( var1, var0 ) 
--------- B -----------
{'intent': {'gloss': ['format', 'a', 'datetime', 'string', 'var0', 'to', 'extract', 'date', 'only'], 'words': ['format', 'a', 'datetime', 'string', 'var0', 'to', 'extract', 'date', 'only'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'when'}, 'snippet': "then = datetime.datetime.strptime(var0, '%y-%m-%d').date()"}
Generated  translation
datetime. datetime. combine ( var0, datetime. time. min ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'hex', 'string', 'str0', 'to', 'a', 'float', 'number'], 'words': ['convert', 'hex', 'string', 'str0', 'to', 'a', 'float', 'number'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '470fc614'}, 'snippet': "struct.unpack('!f', 'str0'.decode('hex'))[0]"}
Generated  translation
float ( int ('str0 ', 0 ) ) 
--------- B -----------
{'intent': {'gloss': ['reverse', 'the', 'order', 'of', 'words', ',', 'delimited', 'by', 'str0', ',', 'in', 'string', 'var0'], 'words': ['reverse', 'the', 'order', 'of', 'words', ',', 'delimited', 'by', 'str0', ',', 'in', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', '', ' ', ' ', ' ', '', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '.', 'var0': 's'}, 'snippet': '"""str0""".join(var0.split(\'str0\')[::-1])'}
Generated  translation
re. findall ('\ \ d + ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['parse', 'milliseconds', 'epoch', 'time', 'str0', 'to', 'format', 'str1'], 'words': ['parse', 'milliseconds', 'epoch', 'time', 'str0', 'to', 'format', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '1236472051807', 'str1': '%y-%m-%d %h:%m:%s'}, 'snippet': "time.strftime('str1', time.gmtime(1236472051807 / 1000.0))"}
Generated  translation
datetime. datetime. strptime ('str0 ','str1'). time ( ) 
--------- B -----------
{'intent': {'gloss': ['add', 'one', 'to', 'the', 'hidden', 'web', 'element', 'with', 'id', 'str0', 'with', 'selenium', 'python', 'script'], 'words': ['add', 'one', 'to', 'the', 'hidden', 'web', 'element', 'with', 'id', 'str0', 'with', 'selenium', 'python', 'script'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'xyz'}, 'snippet': 'browser.execute_script("document.getelementbyid(\'xyz\').value+=\'1\'")'}
Generated  translation
driver. add _ script ('str0 ','/ home / adam / python myscript ) 
--------- B -----------
{'intent': {'gloss': ['format', 'the', 'variables', 'str0', 'and', 'str1', 'using', 'string', 'formatting'], 'words': ['format', 'the', 'variables', 'str0', 'and', 'str1', 'using', 'string', 'formatting'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'self.goals', 'str1': 'self.penalties'}, 'snippet': '"""({:d} goals, ${:d})""".format(self.goals, self.penalties)'}
Generated  translation
" " " str0 " " ". format ('str1 ','str0') 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'list', 'of', 'lists', 'var0', 'to', 'list', 'of', 'integers'], 'words': ['convert', 'a', 'list', 'of', 'lists', 'var0', 'to', 'list', 'of', 'integers'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': "var0 = [int(''.join([str(y) for y in x])) for x in var0]"}
Generated  translation
[ map ( int, sublist ) for sublist in var0 ] 
--------- B -----------
{'intent': {'gloss': ['update', 'datetime', 'field', 'in', 'var0', 'to', 'be', 'the', 'existing', 'var1', 'plus', '100', 'years'], 'words': ['update', 'datetime', 'field', 'in', 'var0', 'to', 'be', 'the', 'existing', 'var1', 'plus', '100', 'years'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mymodel', 'var1': 'timestamp'}, 'snippet': "var0.objects.update(var1=f('var1') + timedelta(days=36524.25))"}
Generated  translation
print ( var1. cert _ datetime ( var0, datetime. timedelta ( hours = 100 ) ) ) 
--------- B -----------
{'intent': {'gloss': ['determine', 'number', 'of', 'files', 'on', 'a', 'drive', 'with', 'python'], 'words': ['determine', 'number', 'of', 'files', 'on', 'a', 'drive', 'with', 'python'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "os.statvfs('/').f_files - os.statvfs('/').f_ffree"}
Generated  translation
os. path. expanduser ('~ \ n') 
--------- B -----------
{'intent': {'gloss': ['encode', 'a', 'latin', 'character', 'in', 'string', 'str0', 'properly'], 'words': ['encode', 'a', 'latin', 'character', 'in', 'string', 'str0', 'properly'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'sopetÃ³n'}, 'snippet': '"""str0""".encode(\'latin-1\').decode(\'utf-8\')'}
Generated  translation
" " " str0 " " ". encode ('latin - 1') 
--------- B -----------
{'intent': {'gloss': ['find', 'octal', 'characters', 'matches', 'from', 'a', 'string', 'var0', 'using', 'regex'], 'words': ['find', 'octal', 'characters', 'matches', 'from', 'a', 'string', 'var0', 'using', 'regex'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'str'}, 'snippet': 'print(re.findall("\'\\\\\\\\[0-7]{1,3}\'", var0))'}
Generated  translation
re. findall ('(? = ( \ \ w \ \ w ) ) ','var0') 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'list', 'in', 'first', 'column', 'into', 'multiple', 'columns', 'keeping', 'other', 'columns', 'as', 'well', 'in', 'pandas', 'data', 'frame'], 'words': ['split', 'a', 'list', 'in', 'first', 'column', 'into', 'multiple', 'columns', 'keeping', 'other', 'columns', 'as', 'well', 'in', 'pandas', 'data', 'frame'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'pd.concat([df[0].apply(pd.series), df[1]], axis=1)'}
Generated  translation
pd. concat ( [ df ['var'], axis = 1 ), axis = 1 ) ] 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'new', 'column', 'var0', 'in', 'pandas', 'data', 'frame', 'var1', 'based', 'on', 'the', 'values', 'in', 'column', 'var2'], 'words': ['create', 'a', 'new', 'column', 'var0', 'in', 'pandas', 'data', 'frame', 'var1', 'based', 'on', 'the', 'values', 'in', 'column', 'var2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'weekday', 'var1': 'data', 'var2': 'my_dt'}, 'snippet': "var1['var0'] = var1['var2'].apply(lambda x: x.var0())"}
Generated  translation
var1 ['var0'] = var1 ['var2'] 
--------- B -----------
{'intent': {'gloss': ['delete', 'all', 'occurrences', 'of', 'character', 'str0', 'in', 'string', 'str1'], 'words': ['delete', 'all', 'occurrences', 'of', 'character', 'str0', 'in', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'i', 'str1': 'it is icy'}, 'snippet': '"""""".join([char for char in \'str1\' if char != \'str0\'])'}
Generated  translation
re. sub ('(. * ) ','str1 ','str0') 
--------- B -----------
{'intent': {'gloss': ['find', 'all', 'files', 'in', 'directory', 'str0', 'with', 'extension', 'str1'], 'words': ['find', 'all', 'files', 'in', 'directory', 'str0', 'with', 'extension', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '/mydir', 'str1': '.txt'}, 'snippet': "for file in os.listdir('str0'):\n    if file.endswith('str1'):\n        pass"}
Generated  translation
results + = [ each for each in os. listdir ('str0') if each. endswith ('str1') ] 
--------- B -----------
{'intent': {'gloss': ['write', 'line', 'str0', 'to', 'file', 'str1'], 'words': ['write', 'line', 'str0', 'to', 'file', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'hello', 'str1': 'somefile.txt'}, 'snippet': "with open('str1', 'a') as the_file:\n    the_file.write('hello\\n')"}
Generated  translation
with open ('str1 ','r') as f : pass 
--------- B -----------
{'intent': {'gloss': ['loop', 'over', 'files', 'in', 'directory', 'str0'], 'words': ['loop', 'over', 'files', 'in', 'directory', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '.'}, 'snippet': "for fn in os.listdir('str0'):\n    if os.path.isfile(fn):\n        pass"}
Generated  translation
for dirname, dirnames, filenames in os. walk ('str0') : for subdirname in dirnames : print ( os. path. join ( dirname, subdirname ) ) for filename in filenames : pas
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'string', 'var0', 'with', 'into', 'all', 'strings', 'of', 'repeated', 'characters'], 'words': ['split', 'a', 'string', 'var0', 'with', 'into', 'all', 'strings', 'of', 'repeated', 'characters'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': "[m.group(0) for m in re.finditer('(\\\\d)\\\\1*', var0)]"}
Generated  translation
[ m. split ( ) for m in re. findall ('\ \ [ ( [ ^ \ \ ] ] + ) \ \ 2 + ', var0 ) ] 
--------- B -----------
{'intent': {'gloss': ['in', 'var0', ',', 'get', 'the', 'content', 'of', 'the', 'sibling', 'of', 'the', 'var1', 'tag', 'with', 'text', 'content', 'str0'], 'words': ['in', 'var0', ',', 'get', 'the', 'content', 'of', 'the', 'sibling', 'of', 'the', 'var1', 'tag', 'with', 'text', 'content', 'str0'], 'after': [' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'soup', 'var1': 'td', 'str0': 'address:'}, 'snippet': "print(var0.find(text='str0').findnext('var1').contents[0])"}
Generated  translation
print ( var0. xpath ( '. / / a [ @ id = " text a " ]') ) 
--------- B -----------
{'intent': {'gloss': ['use', 'a', 'regex', 'to', 'get', 'all', 'text', 'in', 'a', 'string', 'var0', 'that', 'is', 'not', 'surrounded', 'by', 'square', 'brackets'], 'words': ['use', 'a', 'regex', 'to', 'get', 'all', 'text', 'in', 'a', 'string', 'var0', 'that', 'is', 'not', 'surrounded', 'by', 'square', 'brackets'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'example_str'}, 'snippet': "re.findall('(.*?)(?:\\\\[.*?\\\\]|$)', var0)"}
Generated  translation
re. sub ('\ \ [ (. *? ) \ \ ] ','', var0 ) 
--------- B -----------
{'intent': {'gloss': ['open', 'a', 'str0', 'terminal', 'from', 'python', 'script', 'and', 'run', 'str1', 'command', '.'], 'words': ['open', 'a', 'str0', 'terminal', 'from', 'python', 'script', 'and', 'run', 'str1', 'command', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'gnome', 'str1': 'sudo apt-get update'}, 'snippet': 'os.system(\'gnome-terminal -e \\\'bash -c "sudo apt-get update; exec bash"\\\'\')'}
Generated  translation
os. system ('str0') 
--------- B -----------
{'intent': {'gloss': ['write', 'multiple', 'strings', 'var0', ',', 'var1', 'and', 'var2', 'in', 'one', 'line', 'in', 'a', 'file', 'var3'], 'words': ['write', 'multiple', 'strings', 'var0', ',', 'var1', 'and', 'var2', 'in', 'one', 'line', 'in', 'a', 'file', 'var3'], 'after': [' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'line1', 'var1': 'line2', 'var2': 'line3', 'var3': 'target'}, 'snippet': "var3.write('%r\\n%r\\n%r\\n' % (var0, var1, var2))"}
Generated  translation
with open ('var0 ','var1') as f : var2. write ('\ n '. join ( var3 ) ) 
--------- B -----------
{'intent': {'gloss': ['pandas', ':', 'delete', 'rows', 'in', 'dataframe', 'var0', 'based', 'on', 'multiple', 'columns', 'values'], 'words': ['pandas', ':', 'delete', 'rows', 'in', 'dataframe', 'var0', 'based', 'on', 'multiple', 'columns', 'values'], 'after': ['', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': "var0.set_index(list('bc')).drop(tuples, errors='ignore').reset_index()"}
Generated  translation
var0. apply ( lambda x : x. fillna ( x. columns ), axis = 0 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'content', 'of', 'child', 'tag', 'withvar0', 'attribute', 'whose', 'parent', 'has', 'css', 'var1'], 'words': ['get', 'the', 'content', 'of', 'child', 'tag', 'withvar0', 'attribute', 'whose', 'parent', 'has', 'css', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'href', 'var1': 'someclass'}, 'snippet': "self.driver.find_element_by_css_selector('.someclass a').get_attribute('var0')"}
Generated  translation
print ( soup. get _ majorticklabels ( var0 ). content _ type ('var1') ) 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'string', 'by', 'a', 'delimiter', 'in', 'python'], 'words': ['split', 'a', 'string', 'by', 'a', 'delimiter', 'in', 'python'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "[x.strip() for x in '2.matches $$text$$ string'.split('$$text$$')]"}
Generated  translation
s. rfind ('\ \ s ','str1') 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'a', 'directory', 'var0', 'exists', 'and', 'create', 'it', 'if', 'necessary'], 'words': ['check', 'if', 'a', 'directory', 'var0', 'exists', 'and', 'create', 'it', 'if', 'necessary'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'path'}, 'snippet': 'try:\n    os.makedirs(var0)\nexcept oserror:\n    if not os.var0.isdir(var0):\n        raise'}
Generated  translation
os. path. commonprefix ( ['var0 ','some _ f'] ) 
--------- B -----------
{'intent': {'gloss': ['extract', 'all', 'the', 'values', 'with', 'keys', 'str0', 'and', 'str1', 'from', 'a', 'list', 'of', 'dictionaries', 'var0', 'to', 'list', 'of', 'tuples'], 'words': ['extract', 'all', 'the', 'values', 'with', 'keys', 'str0', 'and', 'str1', 'from', 'a', 'list', 'of', 'dictionaries', 'var0', 'to', 'list', 'of', 'tuples'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'x', 'str1': 'y', 'var0': 'd'}, 'snippet': "[(str0['str0'], str0['str1']) for str0 in var0]"}
Generated  translation
[ key for item in var0 if item ['str0'] = ='str1'] 
--------- B -----------
{'intent': {'gloss': ['running', 'r', 'script', 'str0', 'from', 'python'], 'words': ['running', 'r', 'script', 'str0', 'from', 'python'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '/pathto/myrscript.r'}, 'snippet': "subprocess.call(['/usr/bin/rscript', '--vanilla', 'str0'])"}
Generated  translation
os. system ('str0') 
--------- B -----------
{'intent': {'gloss': ['convert', 'list', 'of', 'tuples', 'var0', 'to', 'a', 'string'], 'words': ['convert', 'list', 'of', 'tuples', 'var0', 'to', 'a', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': '""", """.join(\'(\' + \', \'.join(i) + \')\' for i in var0)'}
Generated  translation
emaillist ='\ n '. join ( [ str ( i ) for i in var0 ] ) 
--------- B -----------
{'intent': {'gloss': ['find', 'all', 'files', 'in', 'directory', 'str0', 'with', 'extension', 'str1'], 'words': ['find', 'all', 'files', 'in', 'directory', 'str0', 'with', 'extension', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '/mydir', 'str1': '.txt'}, 'snippet': "os.chdir('str0')\nfor file in glob.glob('*.txt'):\n    pass"}
Generated  translation
results + = [ each for each in os. listdir ('str0') if each. endswith ('str1') ] 
--------- B -----------
{'intent': {'gloss': ['python', 'regex', '-', 'check', 'for', 'a', 'capital', 'letter', 'with', 'a', 'following', 'lowercase', 'in', 'string', 'var0'], 'words': ['python', 'regex', '-', 'check', 'for', 'a', 'capital', 'letter', 'with', 'a', 'following', 'lowercase', 'in', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'string'}, 'snippet': "re.sub('^[a-z0-9]*(?![a-z])', '', var0)"}
Generated  translation
re. search ('[ ^ a - z ] ', var0 ). group ( 1 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'index', 'of', 'an', 'integer', 'str0', 'from', 'a', 'list', 'var0', 'if', 'the', 'list', 'also', 'contains', 'boolean', 'items'], 'words': ['get', 'the', 'index', 'of', 'an', 'integer', 'str0', 'from', 'a', 'list', 'var0', 'if', 'the', 'list', 'also', 'contains', 'boolean', 'items'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '1', 'var0': 'lst'}, 'snippet': 'next(i for i, x in enumerate(var0) if not isinstance(x, bool) and x == 1)'}
Generated  translation
map ( int, var0. items ( ) ) 
--------- B -----------
{'intent': {'gloss': ['insert', 'directory', 'str0', 'into', 'directory', 'var0'], 'words': ['insert', 'directory', 'str0', 'into', 'directory', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'apps', 'var0': '__file__'}, 'snippet': "sys.path.insert(1, os.path.join(os.path.dirname(var0), 'str0'))"}
Generated  translation
sys. path. insert ( 0,'str0') 
--------- B -----------
{'intent': {'gloss': ['write', 'the', 'data', 'of', 'dataframe', 'var0', 'into', 'text', 'file', 'str0'], 'words': ['write', 'the', 'data', 'of', 'dataframe', 'var0', 'into', 'text', 'file', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'np.txt'}, 'snippet': "np.savetxt('c:\\\\data\\\\np.txt', var0.values, fmt='%d')"}
Generated  translation
pd. read _ text ('str0 ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['write', 'content', 'of', 'dataframe', 'var0', 'into', 'text', 'file', 'str0'], 'words': ['write', 'content', 'of', 'dataframe', 'var0', 'into', 'text', 'file', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'c:\\data\\pandas.txt'}, 'snippet': "var0.to_csv('str0', header=none, index=none, sep=' ', mode='a')"}
Generated  translation
var0. write. texttype ('str0') 
--------- B -----------
{'intent': {'gloss': ['print', 'a', '2', 'dimensional', 'list', 'var0', 'as', 'a', 'table', 'with', 'delimiters'], 'words': ['print', 'a', '2', 'dimensional', 'list', 'var0', 'as', 'a', 'table', 'with', 'delimiters'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'tab'}, 'snippet': "print('\\n'.join('\\t'.join(str(col) for col in row) for row in var0))"}
Generated  translation
print ('total cost is : $ { :,. 2f } '. format ( var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'a', 'directory', 'var0', 'exists', 'and', 'create', 'it', 'if', 'necessary'], 'words': ['check', 'if', 'a', 'directory', 'var0', 'exists', 'and', 'create', 'it', 'if', 'necessary'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'path'}, 'snippet': 'try:\n    os.makedirs(var0)\nexcept oserror as exception:\n    if exception.errno != errno.eexist:\n        raise'}
Generated  translation
os. path. commonprefix ( ['var0 ','some _ f'] ) 
--------- B -----------
{'intent': {'gloss': ['send', 'a', 'post', 'request', 'with', 'raw', 'data', 'var0', 'and', 'basic', 'authentication', 'with', 'var1', 'and', 'var2'], 'words': ['send', 'a', 'post', 'request', 'with', 'raw', 'data', 'var0', 'and', 'basic', 'authentication', 'with', 'var1', 'and', 'var2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'data', 'var1': 'username', 'var2': 'password'}, 'snippet': 'requests.post(url, var0=var0, headers=headers_dict, auth=(var1, var2))'}
Generated  translation
post _ response = requests. post ( url ='var0 ', params = ['var1 ','var2'] ) 
--------- B -----------
{'intent': {'gloss': ['parse', 'tab', '-', 'delimited', 'csv', 'file', 'str0', 'into', 'a', 'list'], 'words': ['parse', 'tab', '-', 'delimited', 'csv', 'file', 'str0', 'into', 'a', 'list'], 'after': [' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'text.txt'}, 'snippet': "lol = list(csv.reader(open('str0', 'rb'), delimiter='\\t'))"}
Generated  translation
pd. read _ csv ('str0 ', sep ='\ t') 
--------- B -----------
{'intent': {'gloss': ['loop', 'through', 'the', 'ip', 'address', 'range', 'str0'], 'words': ['loop', 'through', 'the', 'ip', 'address', 'range', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '192.168.x.x'}, 'snippet': "generator = iter_iprange('192.168.1.1', '192.168.255.255', step=1)"}
Generated  translation
globals ( ) ['str0']. format ( * args ) 
--------- B -----------
{'intent': {'gloss': ['modify', 'sys', '.', 'path', 'for', 'python', 'module', 'var0'], 'words': ['modify', 'sys', '.', 'path', 'for', 'python', 'module', 'var0'], 'after': [' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'subdir'}, 'snippet': "sys.path.append(os.path.join(os.path.dirname(__file__), 'var0'))"}
Generated  translation
os. path. join ( var0. split ('_') ) 
--------- B -----------
{'intent': {'gloss': ['lower', 'a', 'string', 'var0', 'and', 'remove', 'non', '-', 'alphanumeric', 'characters', 'aside', 'from', 'space'], 'words': ['lower', 'a', 'string', 'var0', 'and', 'remove', 'non', '-', 'alphanumeric', 'characters', 'aside', 'from', 'space'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'text'}, 'snippet': "re.sub('[^\\\\sa-za-z0-9]', '', var0).lower().strip()"}
Generated  translation
re. sub ('[ ^ 0 - 9 ] + ','', var0 ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'all', 'non', '-', 'alphanumeric', 'characters', 'except', 'space', 'from', 'a', 'string', 'var0', 'and', 'lower', 'it'], 'words': ['remove', 'all', 'non', '-', 'alphanumeric', 'characters', 'except', 'space', 'from', 'a', 'string', 'var0', 'and', 'lower', 'it'], 'after': [' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'text'}, 'snippet': "re.sub('(?!\\\\s)[\\\\w_]', '', var0).lower().strip()"}
Generated  translation
re. sub ('[ ^ 0 - 9 ] + ','', var0 ) 
--------- B -----------
{'intent': {'gloss': ['scatter', 'a', 'plot', 'with', 'x', ',', 'y', 'position', 'of', 'str0', 'and', 'face', 'color', 'equal', 'to', 'none'], 'words': ['scatter', 'a', 'plot', 'with', 'x', ',', 'y', 'position', 'of', 'str0', 'and', 'face', 'color', 'equal', 'to', 'none'], 'after': [' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'np.random.randn(100)'}, 'snippet': "plt.scatter(np.random.randn(100), np.random.randn(100), facecolors='none')"}
Generated  translation
plt. scatter ( x, y, color ='str0 ', color ='none ) 
--------- B -----------
{'intent': {'gloss': ['prepend', 'the', 'line', 'str0', 'to', 'the', 'contents', 'of', 'file', 'str1', 'and', 'save', 'as', 'the', 'file', 'str2'], 'words': ['prepend', 'the', 'line', 'str0', 'to', 'the', 'contents', 'of', 'file', 'str1', 'and', 'save', 'as', 'the', 'file', 'str2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '#test firstline\n', 'str1': 'infile', 'str2': 'outfile'}, 'snippet': "open('str2', 'w').write('str0' + open('str1').read())"}
Generated  translation
with open ('str1 ','str0') as f : f. write ('str2') 
--------- B -----------
{'intent': {'gloss': ['extract', 'ip', 'address', 'from', 'an', 'html', 'string'], 'words': ['extract', 'ip', 'address', 'from', 'an', 'html', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "ip = re.findall('[0-9]+(?:\\\\.[0-9]+){3}', s)"}
Generated  translation
" " " i have : \ \ u003dft { 0 } \ \ b \ \ d { 1 } " " ". format ( my _ html ) 
--------- B -----------
{'intent': {'gloss': ['unpack', 'a', 'series', 'of', 'tuples', 'in', 'pandas', 'into', 'a', 'dataframe', 'with', 'column', 'names', 'str0', 'and', 'str1'], 'words': ['unpack', 'a', 'series', 'of', 'tuples', 'in', 'pandas', 'into', 'a', 'dataframe', 'with', 'column', 'names', 'str0', 'and', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'out-1', 'str1': 'out-2'}, 'snippet': "pd.dataframe(out.tolist(), columns=['str0', 'str1'], index=out.index)"}
Generated  translation
pd. concat ( [ df, pd. dataframe ( ['str0 ','str1'] ], axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'first', 'value', 'from', 'dataframe', 'var0', 'where', 'column', 'str0', 'is', 'equal', 'to', 'str1'], 'words': ['get', 'the', 'first', 'value', 'from', 'dataframe', 'var0', 'where', 'column', 'str0', 'is', 'equal', 'to', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'letters', 'str1': 'c'}, 'snippet': "var0.loc[var0['str0'] == 'str1', 'str0'].values[0]"}
Generated  translation
var0. loc [ var0 ['str0'] = ='str1'] 
--------- B -----------
{'intent': {'gloss': ['remove', 'all', 'strings', 'from', 'a', 'list', 'a', 'strings', 'var0', 'where', 'the', 'values', 'starts', 'with', 'str0', 'or', 'str1'], 'words': ['remove', 'all', 'strings', 'from', 'a', 'list', 'a', 'strings', 'var0', 'where', 'the', 'values', 'starts', 'with', 'str0', 'or', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'sents', 'str0': '@$\t', 'str1': '#'}, 'snippet': "[x for x in var0 if not x.startswith('str0') and not x.startswith('str1')]"}
Generated  translation
[ x for x in var0 if'str0'in x [ : - 1 ] ] 
--------- B -----------
{'intent': {'gloss': ['create', 'new', 'dataframe', 'object', 'by', 'merging', 'columns', 'str0', 'of', 'dataframes', 'var0', 'and', 'var1', 'and', 'rename', 'the', 'columns', 'from', 'dataframes', 'var0', 'and', 'var1', 'with', 'suffix', 'var4', 'and', 'var5', 'respectively'], 'words': ['create', 'new', 'dataframe', 'object', 'by', 'merging', 'columns', 'str0', 'of', 'dataframes', 'var0', 'and', 'var1', 'and', 'rename', 'the', 'columns', 'from', 'dataframes', 'var0', 'and', 'var1', 'with', 'suffix', 'var4', 'and', 'var5', 'respectively'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'key', 'var0': 'split_df', 'var1': 'csv_df', 'var2': 'split_df', 'var3': 'csv_df', 'var4': '_left', 'var5': '_right'}, 'snippet': "pd.merge(var2, var3, on=['str0'], suffixes=('var4', 'var5'))"}
Generated  translation
pd. concat ( [ var2, var1. var2 ], axis = 1 ). rename ( columns = {'var2':'str0'}, how ='inner'} ) 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'string', 'str0', 'by', 'str1', 'keeping', 'str1', 'in', 'the', 'result'], 'words': ['split', 'a', 'string', 'str0', 'by', 'str1', 'keeping', 'str1', 'in', 'the', 'result'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'docs/src/scripts/temp', 'str1': '/', 'str2': '/'}, 'snippet': '"""str0""".replace(\'str2\', \'/\\x00/\').split(\'\\x00\')'}
Generated  translation
re. split ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['group', 'a', 'list', 'of', 'dicts', 'var0', 'into', 'one', 'dict', 'by', 'key'], 'words': ['group', 'a', 'list', 'of', 'dicts', 'var0', 'into', 'one', 'dict', 'by', 'key'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'ld'}, 'snippet': 'print(dict(zip(var0[0], zip(*[list(d.values()) for d in var0]))))'}
Generated  translation
new _ list = { k : v for d in var0 } 
--------- B -----------
{'intent': {'gloss': ['replace', 'all', 'elements', 'in', 'array', 'var0', 'that', 'are', 'not', 'present', 'in', 'array', 'str0', 'with', 'zeros'], 'words': ['replace', 'all', 'elements', 'in', 'array', 'var0', 'that', 'are', 'not', 'present', 'in', 'array', 'str0', 'with', 'zeros'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'str0': '[1, 3, 4]', '[ str0 ]': '[1, 3, 4]'}, 'snippet': 'np.where(np.in1d(var0, [ str0 ]).reshape(var0.shape), var0, 0)'}
Generated  translation
np. any ( np. in1d ( var0, 0, 1 ) ) 
--------- B -----------
{'intent': {'gloss': ['how', 'to', 'count', 'distinct', 'values', 'in', 'a', 'column', 'of', 'a', 'pandas', 'group', 'by', 'object', '?'], 'words': ['how', 'to', 'count', 'distinct', 'values', 'in', 'a', 'column', 'of', 'a', 'pandas', 'group', 'by', 'object', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "df.groupby(['col1', 'col2'])['col3'].nunique().reset_index()"}
Generated  translation
sum ( d. groupby ('id'). size ( ) ) 
--------- B -----------
{'intent': {'gloss': ['average', 'each', 'two', 'columns', 'of', 'array', 'var0'], 'words': ['average', 'each', 'two', 'columns', 'of', 'array', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'data'}, 'snippet': 'var0.reshape(-1, j).mean(axis=1).reshape(var0.shape[0], -1)'}
Generated  translation
var0 [ np. arange ( len ( var0. shape [ 0 ] ), : ] ) 
--------- B -----------
{'intent': {'gloss': ['do', 'a', 'scatter', 'plot', 'with', 'empty', 'circles'], 'words': ['do', 'a', 'scatter', 'plot', 'with', 'empty', 'circles'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "plt.plot(np.random.randn(100), np.random.randn(100), 'o', mfc='none')"}
Generated  translation
plt. scatter ( ) 
--------- B -----------
{'intent': {'gloss': ['select', 'rows', 'in', 'a', 'dataframe', 'var0', 'column', 'str0', 'between', 'two', 'values', '99', 'and', '101'], 'words': ['select', 'rows', 'in', 'a', 'dataframe', 'var0', 'column', 'str0', 'between', 'two', 'values', '99', 'and', '101'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'closing_price'}, 'snippet': "var0 = var0[(var0['str0'] >= 99) & (var0['str0'] <= 101)]"}
Generated  translation
var0 ['str0']. apply ( lambda x : x [ len ( x ) / 101 ] ) 
--------- B -----------
{'intent': {'gloss': ['regex', ',', 'find', 'str0s', 'only', 'in', 'the', 'middle', 'of', 'string', 'var0'], 'words': ['regex', ',', 'find', 'str0s', 'only', 'in', 'the', 'middle', 'of', 'string', 'var0'], 'after': ['', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'n', 'var0': 's'}, 'snippet': "re.findall('n(?<=[^n]n)n+(?=[^n])(?i)', var0)"}
Generated  translation
re. findall ('\ \. (? : \ \ r + ) ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'duplicate', 'words', 'from', 'a', 'string', 'var0', 'using', 'regex'], 'words': ['remove', 'duplicate', 'words', 'from', 'a', 'string', 'var0', 'using', 'regex'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'text'}, 'snippet': "var0 = re.sub('\\\\b(\\\\w+)( \\\\1\\\\b)+', '\\\\1', var0)"}
Generated  translation
re. sub ('(? < = [ a - z ] ) \ \ ) ','\ \ 1 ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['replace', 'dot', 'characters', 'str0', 'associated', 'with', 'ascii', 'letters', 'in', 'list', 'var0', 'with', 'space', 'str1'], 'words': ['replace', 'dot', 'characters', 'str0', 'associated', 'with', 'ascii', 'letters', 'in', 'list', 'var0', 'with', 'space', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '.', 'var0': 's', 'str1': ''}, 'snippet': "[re.sub('(?<!\\\\d)\\\\.(?!\\\\d)', ' ', i) for i in var0]"}
Generated  translation
[ m. replace ('[ \ x00 ] ','str0') for x in var0 ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'each', 'tuple', 'in', 'list', 'var0', 'to', 'a', 'string', 'with', 'str0', 'separating', 'the', 'tuples', "'", 'elements'], 'words': ['convert', 'each', 'tuple', 'in', 'list', 'var0', 'to', 'a', 'string', 'with', 'str0', 'separating', 'the', 'tuples', "'", 'elements'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '']}, 'slot_map': {'var0': 'l', 'str0': '@'}, 'snippet': '""" """.join([(\'%d@%d\' % (t[0], t[1])) for t in var0])'}
Generated  translation
" " " str0 " " ". join ( map ( lambda x : x + y ) ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'dictionaries', 'by', 'the', 'value', 'of', 'keys', 'str0', ',', 'str1', ',', 'str2', 'in', 'ascending', 'order', '.'], 'words': ['sort', 'a', 'list', 'of', 'dictionaries', 'by', 'the', 'value', 'of', 'keys', 'str0', ',', 'str1', ',', 'str2', 'in', 'ascending', 'order', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'title', 'str1': 'title_url', 'str2': 'id'}, 'snippet': "l.sort(key=lambda x: (x['str0'], x['str1'], x['str2']))"}
Generated  translation
sorted ( str0, key = operator. itemgetter ('str1 ','str2') ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'list', 'var0', 'in', 'descending', 'order', 'based', 'on', 'the', 'date', 'value', 'in', 'second', 'element', 'of', 'each', 'list', 'in', 'list', 'var0'], 'words': ['sort', 'list', 'var0', 'in', 'descending', 'order', 'based', 'on', 'the', 'date', 'value', 'in', 'second', 'element', 'of', 'each', 'list', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'li', 'var1': 'li'}, 'snippet': "sorted(var1, key=lambda x: datetime.strptime(x[1], '%d/%m/%y'), reverse=true)"}
Generated  translation
var1. sort ( key = lambda x : x [ 2 ], reverse = true ) 
--------- B -----------
{'intent': {'gloss': ['set', 'font', 'var0', 'to', 'display', 'non', '-', 'ascii', 'characters', 'in', 'matplotlib'], 'words': ['set', 'font', 'var0', 'to', 'display', 'non', '-', 'ascii', 'characters', 'in', 'matplotlib'], 'after': [' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'arial'}, 'snippet': "matplotlib.rc('font', **{'sans-serif': 'var0', 'family': 'sans-serif'})"}
Generated  translation
re. sub ('[ ^ \ \ x00 - \ x7f ] + ','', var0 ) 
--------- B -----------
{'intent': {'gloss': ['find', 'all', 'files', 'in', 'directory', 'str0', 'with', 'extension', 'str1'], 'words': ['find', 'all', 'files', 'in', 'directory', 'str0', 'with', 'extension', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '/mydir', 'str1': '.txt'}, 'snippet': "for root, dirs, files in os.walk('str0'):\n    for file in files:\n        if file.endswith('str1'):\n            pass"}
Generated  translation
results + = [ each for each in os. listdir ('str0') if each. endswith ('str1') ] 
--------- B -----------
{'intent': {'gloss': ['load', 'data', 'containing', 'str0', 'from', 'file', 'str1', 'into', 'numpy', 'array', 'var0'], 'words': ['load', 'data', 'containing', 'str0', 'from', 'file', 'str1', 'into', 'numpy', 'array', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'utf-8', 'str1': 'new.txt', 'var0': 'arr'}, 'snippet': "var0 = numpy.fromiter(codecs.open('str1', encoding='str0'), dtype='<u2')"}
Generated  translation
var0 = numpy. loadtxt ( open ('str1 ','str0'), delimiter = ',') 
--------- B -----------
{'intent': {'gloss': ['select', 'values', 'from', 'column', 'str0', 'for', 'which', 'corresponding', 'values', 'in', 'column', 'str1', 'will', 'be', 'greater', 'than', '50', ',', 'and', 'in', 'column', 'str2', '-', 'equal', '900', 'in', 'dataframe', 'var0'], 'words': ['select', 'values', 'from', 'column', 'str0', 'for', 'which', 'corresponding', 'values', 'in', 'column', 'str1', 'will', 'be', 'greater', 'than', '50', ',', 'and', 'in', 'column', 'str2', '-', 'equal', '900', 'in', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'a', 'str1': 'b', 'str2': 'c', 'var0': 'df'}, 'snippet': "var0['str0'][(var0['str1'] > 50) & (var0['str2'] == 900)]"}
Generated  translation
var0 [ ( var0 ['str1'] > 50, axis = 1 ) | ( var0 ['str2'] < 50 ) ] 
--------- B -----------
{'intent': {'gloss': ['find', '10', 'largest', 'differences', 'between', 'each', 'respective', 'elements', 'of', 'list', 'var0', 'and', 'list', 'var1'], 'words': ['find', '10', 'largest', 'differences', 'between', 'each', 'respective', 'elements', 'of', 'list', 'var0', 'and', 'list', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l1', 'var1': 'l2'}, 'snippet': 'heapq.nlargest(10, range(len(var0)), key=lambda i: abs(var0[i] - var1[i]))'}
Generated  translation
max ( abs ( x - y ) for x, y in zip ( var0, var1 ) ) 
--------- B -----------
{'intent': {'gloss': ['loop', 'through', 'the', 'ip', 'address', 'range', 'str0'], 'words': ['loop', 'through', 'the', 'ip', 'address', 'range', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '192.168.x.x'}, 'snippet': "for i in range(256):\n    for j in range(256):\n        ip = '192.168.%d.%d' % (i, j)\n        print(ip)"}
Generated  translation
globals ( ) ['str0']. format ( * args ) 
--------- B -----------
{'intent': {'gloss': ['find', 'a', 'value', 'within', 'nested', 'json', 'str0', 'where', 'the', 'key', 'inside', 'another', 'key', 'str1', 'is', 'unknown', '.'], 'words': ['find', 'a', 'value', 'within', 'nested', 'json', 'str0', 'where', 'the', 'key', 'inside', 'another', 'key', 'str1', 'is', 'unknown', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'data', 'str1': 'b'}, 'snippet': "list(str0['a']['str1'].values())[0]['maindata'][0]['info']"}
Generated  translation
max ( df. keys ( ) ) ['str1'] = ='str0'
--------- B -----------
{'intent': {'gloss': ['finding', 'the', 'index', 'of', 'elements', 'containing', 'substring', 'str0', 'and', 'str1', 'in', 'a', 'list', 'of', 'strings', 'str2', '.'], 'words': ['finding', 'the', 'index', 'of', 'elements', 'containing', 'substring', 'str0', 'and', 'str1', 'in', 'a', 'list', 'of', 'strings', 'str2', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'how', 'str1': 'what', 'str2': 'mylist'}, 'snippet': "[i for i, j in enumerate(str2) if 'str0' in j.lower() or 'str1' in j.lower()]"}
Generated  translation
[ item for item in open ('str2 ','str0') if'str1'in item ] 
--------- B -----------
{'intent': {'gloss': ['extract', 'a', 'url', 'from', 'a', 'string', 'var0'], 'words': ['extract', 'a', 'url', 'from', 'a', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mystring'}, 'snippet': "print(re.search('(?p<url>https?://[^\\\\s]+)', var0).group('url'))"}
Generated  translation
" " " " " ". join ( urllib. parse. split ( ) ) 
--------- B -----------
{'intent': {'gloss': ['selecting', 'rows', 'in', 'numpy', 'ndarray', 'str0', ',', 'where', 'the', 'value', 'in', 'the', 'first', 'column', 'is', '0', 'and', 'value', 'in', 'the', 'second', 'column', 'is', '1'], 'words': ['selecting', 'rows', 'in', 'numpy', 'ndarray', 'str0', ',', 'where', 'the', 'value', 'in', 'the', 'first', 'column', 'is', '0', 'and', 'value', 'in', 'the', 'second', 'column', 'is', '1'], 'after': [' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'a'}, 'snippet': 'str0[np.where((str0[:, (0)] == 0) * (str0[:, (1)] == 1))]'}
Generated  translation
np. where ( ( str0 [ :, ( 1 ) ] > 0 ). all ( axis = 1 ) ) 
--------- B -----------
{'intent': {'gloss': ['how', 'to', 'create', 'a', 'list', 'of', 'date', 'string', 'in', 'str0', 'format', 'with', 'python', 'pandas', '?'], 'words': ['how', 'to', 'create', 'a', 'list', 'of', 'date', 'string', 'in', 'str0', 'format', 'with', 'python', 'pandas', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'yyyymmdd'}, 'snippet': "[d.strftime('%y%m%d') for d in pandas.date_range('20130226', '20130302')]"}
Generated  translation
['str0 ','str0'] ='b'+ df ['str0']. astype ( float ) 
--------- B -----------
{'intent': {'gloss': ['how', 'can', 'i', 'parse', 'a', 'time', 'string', 'containing', 'milliseconds', 'in', 'it', 'with', 'python', '?'], 'words': ['how', 'can', 'i', 'parse', 'a', 'time', 'string', 'containing', 'milliseconds', 'in', 'it', 'with', 'python', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "time.strptime('30/03/09 16:31:32.123', '%d/%m/%y %h:%m:%s.%f')"}
Generated  translation
time. mktime ( datetime. datetime. now ( ). timetuple ( ) ) 
--------- B -----------
{'intent': {'gloss': ['insert', 'var0', 'before', 'the', 'file', 'extension', 'in', 'str0', 'or', 'replace', 'var1', 'with', 'var2', 'if', 'it', 'precedes', 'the', 'extension', '.'], 'words': ['insert', 'var0', 'before', 'the', 'file', 'extension', 'in', 'str0', 'or', 'replace', 'var1', 'with', 'var2', 'if', 'it', 'precedes', 'the', 'extension', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'var0': '_suff', 'str0': 'long.file.name.jpg', 'var1': '_a', 'var2': 'suff'}, 'snippet': "re.sub('(\\\\_a)?\\\\.([^\\\\.]*)$', '_suff.\\\\2', 'str0')"}
Generated  translation
os. system ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['zip', 'two', '2', '-', 'd', 'arrays', 'var0', 'and', 'var1'], 'words': ['zip', 'two', '2', '-', 'd', 'arrays', 'var0', 'and', 'var1'], 'after': [' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'b'}, 'snippet': "np.array(zip(var0.ravel(), var1.ravel()), dtype='i4,i4').reshape(var0.shape)"}
Generated  translation
zip ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'any', 'url', 'within', 'string', 'var0'], 'words': ['remove', 'any', 'url', 'within', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'text'}, 'snippet': "var0 = re.sub('^https?:\\\\/\\\\/.*[\\\\r\\\\n]*', '', var0, flags=re.multiline)"}
Generated  translation
var0. replace ('','' ) 
--------- B -----------
{'intent': {'gloss': ['unzip', 'list', 'str0'], 'words': ['unzip', 'list', 'str0'], 'after': [' ', ' ', '']}, 'slot_map': {'str0': "[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]", '[ str0 ]': "[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]"}, 'snippet': "zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e',)])"}
Generated  translation
[ str0 ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'hex', '-', 'string', 'representation', 'to', 'actual', 'bytes'], 'words': ['convert', 'a', 'hex', '-', 'string', 'representation', 'to', 'actual', 'bytes'], 'after': [' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': '"""\\\\xf3\\\\xbe\\\\x80\\\\x80""".replace(\'\\\\x\', \'\').decode(\'hex\')'}
Generated  translation
struct. unpack ('bbb ', raw _ bytes ) 
--------- B -----------
{'intent': {'gloss': ['unzip', 'list', 'str0', 'and', 'fill', 'empty', 'results', 'with', 'none'], 'words': ['unzip', 'list', 'str0', 'and', 'fill', 'empty', 'results', 'with', 'none'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]", '[ str0 ]': "[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]"}, 'snippet': "map(none, *[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e',)])"}
Generated  translation
[ open ('str0 ','ab') for _ in range ( 1, len ( str0 ) ) ] 
--------- B -----------
{'intent': {'gloss': ['combine', 'values', 'from', 'column', 'str0', 'and', 'column', 'str1', 'of', 'dataframe', 'var0', 'into', 'column', 'str2', 'of', 'datafram', 'var0'], 'words': ['combine', 'values', 'from', 'column', 'str0', 'and', 'column', 'str1', 'of', 'dataframe', 'var0', 'into', 'column', 'str2', 'of', 'datafram', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'b', 'str1': 'a', 'var0': 'df', 'str2': 'c', 'var1': 'df'}, 'snippet': "var1['str2'] = np.where(var1['str1'].isnull, var1['str0'], var1['str1'])"}
Generated  translation
var0 [ ['str0 ','str1'] ]. merge ( var0, on ='str2') 
--------- B -----------
{'intent': {'gloss': ['make', 'a', 'barplot', 'of', 'data', 'in', 'column', 'var0', 'of', 'dataframe', 'var1', 'colour', '-', 'coded', 'according', 'to', 'list', 'var2'], 'words': ['make', 'a', 'barplot', 'of', 'data', 'in', 'column', 'var0', 'of', 'dataframe', 'var1', 'colour', '-', 'coded', 'according', 'to', 'list', 'var2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'group', 'var1': 'df', 'var2': 'color'}, 'snippet': "var1['var0'].plot(kind='bar', var2=['r', 'g', 'b', 'r', 'g', 'b', 'r'])"}
Generated  translation
var1. reset _ index ( ). var0. groupby ('var2') [ 0 ]. astype ( var1 ) 
--------- B -----------
{'intent': {'gloss': ['download', 'a', 'file', 'var0', 'over', 'http', 'and', 'save', 'to', 'str0'], 'words': ['download', 'a', 'file', 'var0', 'over', 'http', 'and', 'save', 'to', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'url', 'str0': '10mb'}, 'snippet': "response = requests.get(var0, stream=true)\nwith open('str0', 'wb') as handle:\n    for data in tqdm(response.iter_content()):\n        handle.write(data)"}
Generated  translation
testfile = urllib. request. urlopener ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['removing', 'an', 'element', 'from', 'a', 'list', 'based', 'on', 'a', 'predicate', 'str0', 'or', 'str1'], 'words': ['removing', 'an', 'element', 'from', 'a', 'list', 'based', 'on', 'a', 'predicate', 'str0', 'or', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'x', 'str1': 'n'}, 'snippet': "[str0 for str0 in ['aat', 'xac', 'ant', 'tta'] if 'str0' not in str0 and \n    'str1' not in str0]"}
Generated  translation
[ x for x in var0 if x is not str0 ] 
--------- B -----------
{'intent': {'gloss': ['replace', 'each', 'str0', 'with', 'str1', 'and', 'each', 'str1', 'with', 'str0', 'in', 'the', 'string', 'str4', 'in', 'a', 'single', 'pass', '.'], 'words': ['replace', 'each', 'str0', 'with', 'str1', 'and', 'each', 'str1', 'with', 'str0', 'in', 'the', 'string', 'str4', 'in', 'a', 'single', 'pass', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'a', 'str1': 'b', 'str2': 'b', 'str3': 'a', 'str4': 'obama'}, 'snippet': '"""str4""".replace(\'str3\', \'%temp%\').replace(\'str2\', \'str3\').replace(\'%temp%\',\n    \'str2\')'}
Generated  translation
" " " str4 " " ". replace ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['download', 'a', 'file', 'var0', 'over', 'http', 'and', 'save', 'to', 'var1'], 'words': ['download', 'a', 'file', 'var0', 'over', 'http', 'and', 'save', 'to', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'url', 'var1': 'file_name'}, 'snippet': "u = urllib.request.urlopen(var0)\nf = open(var1, 'wb')\nmeta = u.info()\nfile_size = int(meta.getheaders('content-length')[0])\nprint('downloading: %s bytes: %s' % (var1, file_size))\nfile_size_dl = 0\nblock_sz = 8192\nwhile true:\n    buffer = u.read(block_sz)\n    if not buffer:\n        break\n    file_size_dl += len(buffer)\n    f.write(buffer)\n    status = '%10d  [%3.2f%%]' % (file_size_dl, file_size_dl * 100.0 /\n        file_size)\n    status = status + chr(8) * (len(status) + 1)\n    print(status, end=' ')\nf.close()"}
Generated  translation
testfile = urllib. request. urlopener ( var0, var1 ) 
test greedy accuracy 0.044
test greedy bleu score 0.3143154670159123
test greedy exececution accuracy 0.0
got:
tensor([ 4949,  1006, 20014,  1010, 13075,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102])
source:
tensor([  101, 20014,  1006,  1007,   102])
got:
tensor([ 7680,  1006,  2003,  7076, 26897,  1006,  1060,  1010, 20014,  1007,
         2005,  1060,  1999, 13075,  2692,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102])
source:
tensor([  101,  4675,  1006, 13075,  2692,  1007,   102])
got:
tensor([ 1031,  1006,  1058,  1010,  1047,  1007,  2005,  1047,  1010,  1058,
         1999, 13075,  2692,  1012,  5167,  1006,  1007,  1033,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102])
source:
tensor([  101,  2862,  1006, 13075,  2692,  1007,   102])
got:
tensor([ 4949,  1006, 20014,  1010, 13075,  2692,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102])
source:
tensor([  101, 10722, 10814,  1006,  1048,  1007,   102])
got:
tensor([19616,  1006, 13075,  2692,  1010,  3145,  1027, 23375,  1047,  1024,
         1040,  1031,  1047,  1033,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102])
source:
tensor([  101, 19616,  1006, 13075,  2692,  1007,   102])
got:
tensor([18798,  1006, 13075,  2692,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102])
source:
tensor([  101, 18798,  1006, 13075,  2692,  1007,   102])
got:
tensor([18798,  1006, 13075,  2692,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102])
source:
tensor([  101, 18798,  1006, 13075,  2692,  1007,   102])
got:
tensor([18798,  1006, 13075,  2692,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102])
source:
tensor([  101, 18798,  1006, 13075,  2692,  1007,   102])
got:
tensor([18798,  1006, 13075,  2692,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102])
source:
tensor([  101, 18798,  1006, 13075,  2692,  1007,   102])
got:
tensor([18798,  1006, 13075,  2692,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102])
source:
tensor([  101, 18798,  1006, 13075,  2692,  1007,   102])
got:
tensor([ 2828,  1006, 13075,  2692,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102])
source:
tensor([  101,  2828,  1006, 13075,  2692,  1007,   102])
got:
tensor([ 2003,  7076, 26897,  1006, 13075,  2692,  1010,  2358,  2099,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102])
source:
tensor([  101,  2828,  1006, 13075,  2692,  1007,   102])
got:
tensor([ 2003,  7076, 26897,  1006, 13075,  2692,  1010,  2358,  2099,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102])
source:
tensor([  101,  2828,  1006, 13075,  2692,  1007,   102])
got:
tensor([ 2003,  7076, 26897,  1006, 13075,  2692,  1010,  2358,  2099,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102])
source:
tensor([  101,  2828,  1006, 13075,  2692,  1007,   102])
got:
tensor([ 2003,  7076, 26897,  1006, 13075,  2692,  1010,  2358,  2099,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102])
source:
tensor([  101,  2828,  1006, 13075,  2692,  1007,   102])
got:
tensor([ 3058,  7292,  1012,  3058,  7292,  1012,  2358, 14536,  7292,  1006,
         1005,  4175,  1005,  1010,  1005,  1003,  1061,  1011,  1003,  1049,
         1011,  1003, 26718,  1003,  1044,  1024,  1003,  1049,  1024,  1003,
         1055,  1005,  1007,   102])
source:
tensor([ 101, 5371, 1012, 6148, 1006, 1014, 1007,  102])
got:
tensor([2051, 1012, 3637, 1006, 1015, 1007,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102])
source:
tensor([ 101, 2051, 1012, 3637, 1006, 1015, 1007,  102])
got:
tensor([1031, 1033,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102])
source:
tensor([ 101, 2026, 1035, 2862, 1027, 1031, 1033,  102])
got:
tensor([ 2128,  1012,  3975,  1006,  1005,  1032,  1032,  1056,  1009,  1005,
         1010, 13075,  2692,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1012,  3975,  1006,  1007,   102])
got:
tensor([ 1031,  8875,  1012,  6167,  1006,  1007,  2005,  8875,  1999, 13075,
         2692,  1012,  3975,  1006,  1005,  1010,  1005,  1007,  1033,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1012,  3975,  1006,  1007,   102])
got:
tensor([ 2330,  1006,  1005,  5371,  1012, 19067,  2102,  1005,  1010,  1005,
         1054,  1005,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102])
source:
tensor([ 101, 3213, 1012, 4339, 4974, 2121, 1006, 1007,  102])
got:
tensor([16371,  8737,  2100,  1012,  7680,  1006,  8123,  1027,  1015,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102])
source:
tensor([ 101, 1037, 1012, 7680, 1006, 8123, 1027, 1015, 1007,  102])
got:
tensor([13075,  2487,  1027,  1031,  1060,  2005,  1060,  1999, 13075,  2692,
         1033,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102])
source:
tensor([  101, 13075,  2487,  1012,  7949,  1006, 13075,  2692,  1007,   102])
got:
tensor([ 2026,  2638, 13668,  2923,  1027,  2862,  1006, 13075,  2692,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102])
source:
tensor([  101,  2862,  1006,  2275,  1006, 13075,  2692,  1007,  1007,   102])
got:
tensor([ 2026,  2638, 13668,  2923,  1027,  2862,  1006, 13075,  2692,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102])
source:
tensor([  101,  2862,  1006,  2275,  1006, 13075,  2692,  1007,  1007,   102])
got:
tensor([19616,  1006,  2862,  1006,  2951,  1012,  5167,  1006,  1007,  1007,
         1010,  3145,  1027, 23375,  1060,  1024,  1060,  1031,  1015,  1033,
         1031,  1014,  1033,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102])
source:
tensor([  101, 19616,  1006,  1040,  1012,  5167,  1006,  1007,  1007,   102])
got:
tensor([20014,  1006,  1005,  2358,  2099,  2692,  1005,  1010,  1016,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102])
source:
tensor([  101, 20014,  1006,  1005,  2358,  2099,  2692,  1005,  1007,   102])
got:
tensor([ 2003,  7076, 26897,  1006, 13075,  2692,  1010,  2358,  2099,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102])
source:
tensor([  101,  2828,  1006, 13075,  2692,  1007,  2003,  2358,  2099,   102])
got:
tensor([13075,  2487,  1012, 10439, 10497,  1006, 13075,  2692,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102])
source:
tensor([  101, 13075,  2487,  1012,  7949,  1006, 13075,  2692,  1007,   102])
got:
tensor([13075,  2487,  1012, 10439, 10497,  1006, 13075,  2692,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102])
source:
tensor([  101, 13075,  2487,  1012,  7949,  1006, 13075,  2692,  1007,   102])
got:
tensor([13075,  2487,  1012, 10439, 10497,  1006, 13075,  2692,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102])
source:
tensor([  101, 13075,  2487,  1012,  7949,  1006, 13075,  2692,  1007,   102])
got:
tensor([13075,  2692,  1012, 19274,  1006,  1014,  1010,  1005,  2358,  2099,
         2692,  1005,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1012, 10439, 10497,  1006,  2260,  1007,   102])
got:
tensor([ 2003,  7076, 26897,  1006, 13075,  2692,  1010,  2358,  2099,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  6140,  1006,  2828,  1006, 13075,  2692,  1007,  1007,   102])
got:
tensor([ 3027,  2361,  1012,  2128, 16344, 21114,  2854,  1006, 13075,  2692,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  1054,  1027, 11186,  1012,  2131,  1006, 13075,  2692,  1007,
          102])
got:
tensor([25353,  2015,  1012,  2358, 26797,  2102,  1012,  3191,  1006,  7953,
         1006,  1007,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102])
source:
tensor([ 101, 7953, 1006, 1005, 4607, 2115, 7953, 1024, 1005, 1007,  102])
got:
tensor([ 2275,  1006,  1031,  1005,  1037,  1005,  1010,  1005,  1038,  1005,
         1033,  1007,  1012, 10439, 10497,  1006,  1031,  2358,  2099,  2692,
         1033,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102])
source:
tensor([ 101, 1037, 1012, 7949, 1006, 2862, 1006, 1038, 1007, 1007,  102])
got:
tensor([ 9808,  1012, 10381,  4305,  2099,  1006, 13075,  2692,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  9808,  1012, 10381,  4305,  2099,  1006, 13075,  2692,  1007,
          102])
got:
tensor([19616,  1006,  2862,  1006, 13075,  2692,  1012,  5167,  1006,  1007,
         1007,  1010,  3145,  1027, 23375,  1060,  1024,  1060,  1031,  1015,
         1033,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 19616,  1006, 13075,  2692,  1012,  5167,  1006,  1007,  1007,
          102])
got:
tensor([1031, 2358, 2099, 2692, 1033,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102])
source:
tensor([  101, 14101,  1006,  1008,  1031,  2358,  2099,  2692,  1033,  1007,
          102])
got:
tensor([1031, 2358, 2099, 2692, 1033,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102])
source:
tensor([  101, 14101,  1006,  1008,  1031,  2358,  2099,  2692,  1033,  1007,
          102])
got:
tensor([ 4487,  6593,  1006,  4949,  1006, 23375,  1055,  1024,  1055,  1012,
         3975,  1006,  1005,  1024,  1005,  1007,  1010,  1031,  2358,  2099,
         2692,  1033,  1007,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102])
source:
tensor([ 101, 4487, 6593, 1006, 1031, 2358, 2099, 2692, 1033, 1007,  102])
got:
tensor([13075,  2692,  1012,  2177,  3762,  1006,  1005, 15489,  1005,  1007,
         1012,  2946,  1006,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1012,  5436,  1006,  5722,  1027,  6270,  1007,
          102])
got:
tensor([1046, 3385, 1012, 7170, 1006, 2330, 1006, 1005, 2358, 2099, 2692, 1005,
        1007, 1007,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102])
source:
tensor([  101,  1046,  3385,  1012, 15665,  1006,  5227,  1012,  2303,  1007,
          102])
got:
tensor([3058, 7292, 1012, 3058, 7292, 1012, 2085, 1006, 1007, 1012, 3058, 1006,
        1007,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102])
source:
tensor([ 101, 3058, 7292, 1012, 3058, 7292, 1012, 2085, 1006, 1007,  102])
got:
tensor([ 2128,  1012,  2424,  8095,  1006,  1005,  1032,  1032,  1059,  1009,
         1005,  1010, 13075,  2692,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1012,  3975,  1006,  1005,  1032,  1050,  1005,
         1007,   102])
got:
tensor([ 2128,  1012,  3975,  1006,  1005,  1032,  1032,  1031,  1012,  1008,
         1029,  1032,  1032,  1033,  1005,  1010, 13075,  2692,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1012,  3975,  1006,  1005,  1005,  1010,  1018,
         1007,   102])
got:
tensor([13075,  2692,  1012,  3769,  1006,  1005,  2358,  2099,  2692,  1005,
         1010,  3904,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  3972, 13075,  2692,  1031,  1005,  2358,  2099,  2692,  1005,
         1033,   102])
got:
tensor([ 1031,  1006,  1058,  1010,  1047,  1007,  2005,  1047,  1010,  1058,
         1999, 13075,  2692,  1012,  5167,  1006,  1007,  1033,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1027,  4949,  1006,  2862,  1010, 13075,  2692,
         1007,   102])
got:
tensor([ 2131, 19321,  2099,  1006, 13075,  2487,  1010, 13075,  2692,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  2131, 19321,  2099,  1006, 13075,  2487,  1010, 13075,  2692,
         1007,   102])
got:
tensor([ 2003,  7076, 26897,  1006, 13075,  2692,  1010,  2358,  2099,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  2003,  7076, 26897,  1006, 13075,  2692,  1010,  2358,  2099,
         1007,   102])
got:
tensor([ 2003,  7076, 26897,  1006, 13075,  2692,  1010,  2358,  2099,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  2003,  7076, 26897,  1006, 13075,  2692,  1010,  2358,  2099,
         1007,   102])
got:
tensor([ 2003,  7076, 26897,  1006, 13075,  2692,  1010,  2358,  2099,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  2003,  7076, 26897,  1006, 13075,  2692,  1010,  2358,  2099,
         1007,   102])
got:
tensor([ 2003,  7076, 26897,  1006, 13075,  2692,  1010,  2358,  2099,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  2003,  7076, 26897,  1006, 13075,  2692,  1010,  2358,  2099,
         1007,   102])
got:
tensor([ 9808,  1012,  4130,  1012,  2003,  8873,  2571,  1006, 13075,  2692,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  9808,  1012,  4130,  1012, 18061,  5910,  1006, 13075,  2692,
         1007,   102])
got:
tensor([ 4654,  8586,  1006,  4012, 22090,  1006, 13075,  2692,  1007,  1012,
         3191,  1006,  1007,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 12324, 17727, 17727,  1012,  2128, 11066,  1006, 13075,  2692,
         1007,   102])
got:
tensor([13075,  2692,  1012,  2139,  8569,  2290,  1006,  1005,  2139,  8569,
         2290,  1005,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1012,  2448,  1006,  2139,  8569,  2290,  1027,
         2995,  1007,   102])
got:
tensor([ 5227,  1012, 12098,  5620,  1012,  2131,  1006,  1005,  8299,  1024,
         1013,  1013,  7479,  1012,  1054,  1005,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  5227,  1012, 12098,  5620,  1031,  1005,  2026, 28689,  2213,
         1005,  1033,   102])
got:
tensor([18798,  1006, 13075,  2692,  1007,  1012,  4175,  1006,  1005,  1032,
         1050,  1005,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  9808,  1012, 28093,  1006, 13075,  2692,  1007,  1012,  2358,
         1035,  2946,   102])
got:
tensor([ 7680,  1006,  8875,  1031,  1005,  2358,  2099,  2692,  1005,  1033,
         2005,  2773,  1999, 13075,  2692,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1012,  4175,  1006,  1005,  2358,  2099,  2692,
         1005,  1007,   102])
got:
tensor([ 7680,  1006,  8875,  1031,  1005,  2358,  2099,  2692,  1005,  1033,
         2005,  2773,  1999, 13075,  2692,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1012,  4175,  1006,  1005,  2358,  2099,  2692,
         1005,  1007,   102])
got:
tensor([ 3844,  4014,  1012,  6100,  2475,  1006, 13075,  2692,  1010, 13075,
         2487,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  3844,  4014,  1012,  6100,  1006, 13075,  2692,  1010, 13075,
         2487,  1007,   102])
got:
tensor([ 3392,  1012,  5200,  1012, 11307,  1006,  8909,  1027,  1015,  1007,
         1012,  2344,  1035,  2011,  1006,  1005,  1037,  1005,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 12731, 25301,  2099,  1012, 18584,  5643,  1006,  1007,  1031,
         1014,  1033,   102])
got:
tensor([27937,  1012,  5490,  5339,  1006,  1006, 13075,  2692,  1012,  7680,
         1006,  8123,  1027,  1015,  1007,  1007,  1012,  2812,  1006,  1007,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 27937,  1012,  2812,  1006, 13075,  2692,  1010,  8123,  1027,
         1015,  1007,   102])
got:
tensor([ 6140,  1006, 13075,  2487,  1012,  2131,  1006, 13075,  2692,  1007,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  6140,  1006, 13075,  2487,  1012,  5950,  1006, 13075,  2692,
         1007,  1007,   102])
got:
tensor([13075,  2692,  1031,  1005,  2358,  2099,  2692,  1005,  1033,  1027,
         1015,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1012, 10651,  1006,  2358,  2099,  2692,  1027,
         1015,  1007,   102])
got:
tensor([ 3058,  7292,  1012,  3058,  7292,  1012, 11396, 19779,  1006,  1007,
         1012,  2051,  1006,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  3058,  7292,  1012,  2085,  1006,  1052, 22123,  2480,  1012,
        11396,  1007,   102])
got:
tensor([ 6140,  1006,  2461,  1006, 14257,  1006, 13075,  2692,  1012,  1035,
         1035,  4487,  6593,  1035,  1035,  1007,  1007,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 20014,  1006,  2461,  1006,  1016,  1012,  4868,  1008,  2531,
         1007,  1007,   102])
got:
tensor([ 2128,  1012,  3975,  1006,  1005,  2358,  2099,  2692,  1005,  1010,
        13075,  2692,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1012,  3975,  1006,  1005,  2358,  2099,  2692,
         1005,  1007,   102])
got:
tensor([13075,  2487,  1027,  1046,  3385,  1012, 15653,  2015,  1006, 13075,
         2692,  1010,  5676,  1035,  2004,  6895,  2072,  1027,  6270,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2487,  1027,  1046,  3385,  1012, 15665,  1006, 13075,
         2692,  1007,   102])
got:
tensor([ 9808,  1012,  2330,  1006, 13075,  2692,  1010,  1005,  2358,  2099,
         2692,  1005,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  2330,  1006, 13075,  2692,  1010,  1005,  2358,  2099,  2692,
         1005,  1007,   102])
got:
tensor([24471,  6894,  2497,  1012,  5227,  1012, 24471,  4135, 11837,  1006,
         1005,  2358,  2099,  2692,  1005,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 16234,  1012,  3722,  8873, 21928,  1006,  1005,  2358,  2099,
         2692,  1005,  1007,   102])
got:
tensor([16371,  8737,  2100,  1012,  9530, 16280,  8185,  1006,  1031,  1015,
         1010,  1016,  1010,  1017,  1033,  1010,  8123,  1027,  1014,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 27937,  1012,  9530, 16280, 12556,  1006,  1006,  1037,  1010,
         1038,  1007,  1007,   102])
got:
tensor([ 6140,  1006, 13075,  2692,  1012,  4372, 16044,  1006,  1005,  6315,
         1035,  5164,  1005,  1007,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1012, 21933,  3207,  1006,  1005,  5164,  1035,
         4019,  1005,  1007,   102])
got:
tensor([ 6140,  1006, 13075,  2692,  1012,  4372, 16044,  1006,  1005,  6315,
         1035,  5164,  1005,  1007,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1012, 21933,  3207,  1006,  1005, 27260,  1035,
         4019,  1005,  1007,   102])
got:
tensor([ 1000,  1000,  1000,  2358,  2099,  2692,  1000,  1000,  1000,  1012,
         3693,  1006, 13075,  2692,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  1005,  2358,  2099,  2692,  1005,  1009,  2358,  2099,  1006,
        13075,  2692,  1007,   102])
got:
tensor([ 3091,  1027, 18798,  1006, 13075,  2692,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 18798,  1006,  4098,  1006, 13075,  2692,  1010,  3145,  1027,
        18798,  1007,  1007,   102])
got:
tensor([ 1031,  1060,  1031,  1005,  2358,  2099,  2692,  1005,  1033,  2005,
         1060,  1999, 13075,  2692,  1033,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1031,  1014,  1033,  1031,  1005,  2358,  2099,
         2692,  1005,  1033,   102])
got:
tensor([ 1031,  3145,  2005,  8875,  1999, 13075,  2692,  2005,  3145,  1010,
         3643,  1999,  2862,  1006, 13075,  2487,  1012,  5167,  1006,  1007,
         1007,  1033,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  1031, 13075,  2487,  1031,  1047,  1033,  2005,  1047,  1999,
        13075,  2692,  1033,   102])
got:
tensor([ 7680,  1006, 18798,  1006,  1060,  1007,  2005,  1060,  1999,  2862,
         1006, 13075,  2692,  1012,  5167,  1006,  1007,  1007,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 18798,  1006,  2862,  1006, 13075,  2692,  1012,  6309,  1006,
         1007,  1007,  1007,   102])
got:
tensor([ 6721,  1012,  7099,  1006,  2862,  1006, 13075,  2692,  1012,  5167,
         1006,  1007,  1007,  1010,  3145,  1027,  6872,  1012,  8875, 18150,
         3334,  1006,  1015,  1007,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1012,  2404,  1006,  1006,  1011,  1050,  1010,
         1050,  1007,  1007,   102])
got:
tensor([9808, 1012, 2291, 1006, 1005, 2358, 2099, 2692, 1005, 1007,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102])
source:
tensor([  101,  3844,  4014,  1012, 28549, 13334,  1006,  1005,  2358,  2099,
         2692,  1005,  1007,   102])
got:
tensor([16371,  8737,  2100,  1012,  9530, 16280, 12556,  1006, 13075,  2692,
         1010, 13075,  2487,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 27937,  1012,  9140,  1006,  1006, 13075,  2692,  1010, 13075,
         2487,  1007,  1007,   102])
got:
tensor([13075,  2692,  1012,  8840,  2278,  1031,  1024,  1010,  1006, 13075,
         2692,  1012,  5725,  1006,  1015,  1007,  1033,  1007,  1033,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1031, 13075,  2692,  1012,  7753,  1031,  1011,
         1015,  1033,  1033,   102])
got:
tensor([13075,  2692,  1012,  3693,  1006,  1031,  1005,  2358,  2099,  2692,
         1005,  1033,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  1000,  1000,  1000,  1000,  1000,  1000,  1012,  3693,  1006,
        13075,  2692,  1007,   102])
got:
tensor([13075,  2692,  1012,  6039,  2532,  1006,  4118,  1027,  1005,  2358,
         2099,  2692,  1005,  1010,  1999, 24759, 10732,  1027,  2995,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1012,  4530,  2532,  1006, 16745,  1027,  1031,
         1015,  1033,  1007,   102])
got:
tensor([1031, 1045, 2005, 1045, 1999, 2846, 1006, 1015, 1010, 2184, 1007, 2065,
        1045,  999, 1027, 2184, 1033,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102])
source:
tensor([  101,  2862,  1006, 11674,  1006,  2862,  1006,  2846,  1006,  2184,
         1007,  1007,  1007,  1007,   102])
got:
tensor([1000, 1000, 1000, 2358, 2099, 2692, 1000, 1000, 1000, 1012, 3975, 1006,
        1007,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102])
source:
tensor([ 101, 1000, 1000, 1000, 2358, 2099, 2692, 1000, 1000, 1000, 1012, 3975,
        1006, 1007,  102])
got:
tensor([ 2330,  1006,  1005, 13075,  2692,  1005,  1010,  1005,  1059,  1005,
         1007,  1012,  2485,  1006,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  2330,  1006, 13075,  2692,  1010,  1005,  1059,  1005,  1007,
         1012,  2485,  1006,  1007,   102])
got:
tensor([13075,  2692,  1031,  1005, 13075,  2487,  1005,  1033,  1027, 13075,
         2692,  1031,  1005, 13075,  2487,  1005,  1033,  1012, 10439, 10497,
         1006, 13075,  2692,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1031,  1005, 13075,  2487,  1005,  1033,  1027,
        13075,  2692,  1012,  5950,   102])
got:
tensor([1031, 2358, 2099, 2692, 1033,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102])
source:
tensor([ 101, 5300, 1027, 7680, 1006, 1031, 2358, 2099, 2692, 1033, 1010, 1031,
        1033, 1007,  102])
got:
tensor([2128, 1012, 4942, 1006, 1005, 1006, 1029, 1026, 1027, 1031, 1037, 1011,
        1062, 1033, 1007,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102])
source:
tensor([ 101, 2026, 3367, 4892, 1012, 5672, 1006, 1005, 1005, 1010, 1005, 1035,
        1005, 1007,  102])
got:
tensor([ 9808,  1012,  4130,  1012, 14689, 15069,  1006,  2358,  2099,  2692,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  9808,  1012,  4130,  1012, 14689, 15069,  1006,  1005,  2358,
         2099,  2692,  1005,  1007,   102])
got:
tensor([ 1005, 13075,  2487,  1005,  1999,  2862,  1006, 13075,  2692,  1012,
         5167,  1006,  1007,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  2035,  1006, 13075,  2487,  1006,  1060,  1007,  2005,  1060,
         1999, 13075,  2692,  1007,   102])
got:
tensor([ 2131, 19321,  2099,  1006, 13075,  2692,  1010,  1005,  2358,  2099,
         2692,  1005,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  2131, 19321,  2099,  1006, 13075,  2692,  1010,  1005,  2358,
         2099,  2692,  1005,  1007,   102])
got:
tensor([13075,  2692,  1027,  1031,  1031,  1060,  2005,  1060,  1999, 13075,
         2475,  1033,  2005,  1061,  1999,  2846,  1006, 18798,  1006, 13075,
         2475,  1007,  1007,  1033,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1027,  1031,  1060,  2005,  1060,  1999, 13075,
         2475,  2065,  1060,  1033,   102])
got:
tensor([ 2128,  1012,  3975,  1006,  1005,  2358,  2099,  2692,  1005,  1010,
        13075,  2692,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  2128,  1012,  3975,  1006,  1005,  2358,  2099,  2692,  1005,
         1010, 13075,  2692,  1007,   102])
got:
tensor([13075,  2692,  1012,  2177,  3762,  1006,  2504,  1027,  1014,  1007,
         1012,  2946,  1006,  1007,  1012, 25141,  1035,  5950,  1006,  4530,
         1027,  2995,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([  101, 13075,  2692,  1012,  2275,  1035,  1054, 20470,  2884,  1035,
         2597,  1006, 11502,  1007,   102])
got:
tensor([ 4062,  1012,  2424,  1035,  5783,  1035,  2011,  1035, 26726,  8988,
         1006,  1000,  1013,  1013,  4487,  2615,  1031,  1030,  8909,  1027,
         1005,  1037,  1005,  1033,  1013,  1013,  1037,  1031,  1030,  2465,
         1027,  1005, 11562,  1005,  1033,  1000,  1007,   102,   102,   102,
          102])
source:
tensor([  101, 13075,  2692,  1012,  2131,  1035, 17961,  1006,  1005,  5110,
        11039, 19968,  1005,  1007,   102])
got:
tensor([13075,  2692,  1027,  1005,  2358,  2099,  2692,  1005,  1009, 13075,
         2692,  1031,  1015,  1024,  1033,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([  101, 13075,  2692,  1012, 19274,  1006,  1014,  1010,  1005,  2358,
         2099,  2692,  1005,  1007,   102])
got:
tensor([13075,  2692,  1031,  1011,  1015,  1033,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([  101,  2862,  1006, 13075,  2692,  1012,  6309,  1006,  1007,  1007,
         1031,  1011,  1015,  1033,   102])
got:
tensor([13075,  2692,  1012,  4339,  1006,  1005,  2358,  2099,  2692,  1005,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([  101,  6140,  1006,  1005,  2358,  2099,  2692,  1005,  1010,  5371,
         1027, 13075,  2692,  1007,   102])
got:
tensor([13075,  2692,  1027, 13075,  2692,  1012,  4338,  1031,  1014,  1033,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([  101, 13075,  2692,  1031,  1024,  1010,  1006, 27937,  1012,  2047,
         8528,  2483,  1007,  1033,   102])
got:
tensor([ 1042,  1027,  2330,  1006,  1005,  2358,  2099,  2692,  1005,  1010,
         1005, 25610,  1005,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([ 101, 5371, 1027, 2330, 1006, 1005, 2358, 2099, 2692, 1005, 1010, 1005,
        1037, 1005, 1007,  102])
got:
tensor([1000, 1000, 1000, 2358, 2099, 2692, 1000, 1000, 1000, 1012, 4289, 1006,
        1005, 2358, 2099, 2692, 1005, 1007,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102])
source:
tensor([ 101, 1000, 1000, 1000, 2358, 2099, 2692, 1000, 1000, 1000, 1012, 4289,
        1006, 2969, 1007,  102])
got:
tensor([16371,  8737,  2100,  1012,  9530, 11266,  1006,  1031,  1006,  1060,
         1010,  1061,  1007,  2005,  1060,  1010,  1061,  1999, 14101,  1006,
        13075,  2692,  1010, 13075,  2487,  1007,  1033,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([  101, 27937,  1012,  5443,  2696,  3600,  1006,  1006, 13075,  2692,
         1010, 13075,  2487,  1007,  1007,   102])
got:
tensor([ 6434,  1027,  4942, 21572,  9623,  2015,  1012,  4638,  1035,  6434,
         1006, 13075,  2487,  1010, 13075,  2692,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([  101,  4903,  6657,  2102,  1012,  4903,  6657,  2102,  1006, 13075,
         2692,  1010, 13075,  2487,  1007,   102])
got:
tensor([4487, 6593, 1006, 1031, 1060, 1012, 3975, 1006, 1005, 1027, 1005, 1007,
        2005, 1060, 1999, 1055, 1012, 3975, 1006, 1007, 1033, 1007,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102])
source:
tensor([ 101, 6140, 1006, 1031, 8875, 2005, 8875, 1999, 1031, 2358, 2099, 2692,
        1033, 1033, 1007,  102])
got:
tensor([ 9808,  1012,  4130,  1012,  3975,  1006, 13075,  2692,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([  101,  9808,  1012,  4130,  1012,  3975, 10288,  2102,  1006, 13075,
         2692,  1007,  1031,  1014,  1033,   102])
got:
tensor([13075,  2692,  1012,  4066,  1006,  3145,  1027, 23375,  1060,  1024,
         1060,  1012, 13075,  2487,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([  101, 13075,  2692,  1012,  4066,  1006,  3145,  1027, 13075,  2487,
         1010,  7901,  1027,  2995,  1007,   102])
got:
tensor([ 4942, 21572,  9623,  2015,  1012,  2655,  1006,  1005,  3231,  1012,
        14021,  2060, 11263, 12273,  1005,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([  101,  4942, 21572,  9623,  2015,  1012,  2655,  1006,  1031,  1005,
        13075,  2692,  1005,  1033,  1007,   102])
got:
tensor([ 3565,  1006, 13075,  2692,  1010,  2969,  1007,  1012,  1035,  1035,
         1999,  4183,  1035,  1035,  1006,  1008, 12098,  5620,  1010,  1008,
         1008,  6448,  2906,  5620,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([  101,  3565,  1006, 13075,  2487,  1010, 18856,  2015,  1007,  1012,
        13075,  2692,  1006,  1037,  1007,   102])
got:
tensor([ 6434,  1027,  2330,  1006,  1005,  2358,  2099,  2692,  1005,  1010,
         1005, 25610,  1005,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([ 101, 1042, 1027, 2330, 1006, 1005, 2358, 2099, 2692, 1005, 1010, 1005,
        1059, 1005, 1007,  102])
got:
tensor([16371,  8737,  2100,  1012, 24501,  3270,  5051,  1006, 13075,  2692,
         1010,  1006,  1011,  1015,  1010,  1015,  1007,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([  101,  4098,  1006,  1031,  4098,  1006,  1045,  1007,  2005,  1045,
         1999, 13075,  2692,  1033,  1007,   102])
got:
tensor([ 2461,  1006, 13075,  2692,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([  101, 13075,  2692,  1027,  2358,  2099,  1006,  2461,  1006, 13075,
         2692,  1010,  1016,  1007,  1007,   102])
got:
tensor([1031, 8875, 2005, 8875, 1999, 2358, 2099, 2487, 2005, 8875, 1999, 2358,
        2099, 2692, 1033,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102])
source:
tensor([ 101, 1031, 2358, 2099, 2692, 1031, 1060, 1033, 2005, 1060, 1999, 2358,
        2099, 2487, 1033,  102])
got:
tensor([13075,  2487,  1012, 10439, 10497,  1006, 13075,  2692,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([  101,  2005,  2240,  1999, 13075,  2692,  1024, 13075,  2487,  1012,
        10439, 10497,  1006,  2240,  1007,   102])
got:
tensor([ 1005,  1003,  1012,  1016,  2546,  1005,  1003,  1017,  1012,  6227,
        22394, 22407, 23777,  2475,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([  101,  2461,  1006,  1015,  1012,  6227, 22394, 22407, 23777,  2581,
        19961,  2475,  1010,  1017,  1007,   102])
got:
tensor([ 6140,  1006,  1031,  1005,  2358,  2099,  2692,  1005,  1012,  3693,
         1006,  1039,  1007,  2005,  1039,  1999, 13075,  2692,  2065,  1039,
         1012,  2003,  4305, 23806,  1006,  1007,  1033,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([  101,  2128,  1012,  2424,  8095,  1006,  1005,  2358,  2099,  2692,
         1005,  1010, 13075,  2692,  1007,   102])
got:
tensor([ 2128,  1012,  2424,  8095,  1006,  1005,  2358,  2099,  2692,  1005,
         1010, 13075,  2692,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([  101,  2128,  1012,  2424,  8095,  1006,  1005,  2358,  2099,  2692,
         1005,  1010, 13075,  2692,  1007,   102])
got:
tensor([22649, 23422,  1012,  5200,  1012, 11307,  1006,  8909,  1027,  1015,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([  101,  2709,  8299,  6072, 26029,  3366,  1006,  1005, 24641,  1005,
         1010,  3570,  1027, 22649,  1007,   102])
got:
tensor([13075,  2692,  1027,  1031,  1031,  1033,  2005,  1045,  1999,  2846,
         1006, 18798,  1006, 13075,  2692,  1007,  1007,  1033,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([  101, 13075,  2692,  1027,  1031,  1031,  1033,  2005,  1050,  1999,
         2846,  1006,  1016,  1007,  1033,   102])
got:
tensor([ 1031, 20014,  1006,  1060,  1007,  2005,  1060,  1999, 13075,  2487,
         1033,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([  101, 13075,  2487,  1027,  1031, 20014,  1006,  1060,  1007,  2005,
         1060,  1999, 13075,  2692,  1033,   102])
got:
tensor([ 1031, 14257,  1006,  1060,  1007,  2005,  1060,  1999, 13075,  2692,
         1033,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([  101, 13075,  2692,  1027,  1031, 14257,  1006,  1060,  1007,  2005,
         1060,  1999, 13075,  2692,  1033,   102])
got:
tensor([ 2862,  1006,  4949,  1006,  2030,  2094,  1010, 13075,  2692,  1007,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([  101,  1031, 10381,  2099,  1006,  1045,  1007,  2005,  1045,  1999,
         2846,  1006, 13029,  1007,  1033,   102])
got:
tensor([1000, 1000, 1000, 1000, 1000, 1000, 1012, 3693, 1006, 2358, 2099, 2692,
        1007,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102])
source:
tensor([ 101, 1000, 1000, 1000, 1000, 1000, 1000, 1012, 3693, 1006, 1031, 2358,
        2099, 2692, 1033, 1007,  102])
got:
tensor([27937,  1012, 16417, 17421,  1006,  1005,  1045, 15992,  1010, 20912,
         2140,  1011,  1028,  1045,  3501,  2140,  1005,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([  101, 16371,  8737,  2100,  1012,  5717,  2015,  1006,  1006,  1017,
         1010,  1017,  1010,  1017,  1007,  1007,   102])
got:
tensor([ 1031,  1006,  1060,  1010,  1061,  1007,  2005,  1060,  1010,  1061,
         1999, 14101,  1006, 13075,  2692,  1010, 13075,  2692,  1007,  1033,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([  101,  1000,  1000,  1000,  2358,  2099,  2692,  1000,  1000,  1000,
         1012,  3693,  1006, 13075,  2692,  1007,   102])
got:
tensor([ 1040,  2546,  1012,  2177,  3762,  1006,  1005,  2358,  2099,  2692,
         1005,  1007,  1012, 11307,  1006, 23375,  1060,  1024,  1060,  1031,
         1015,  1033,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([ 101, 1040, 2546, 1012, 1038, 1012, 2358, 2099, 1012, 3397, 1006, 1005,
        1034, 1042, 1005, 1007,  102])
got:
tensor([13075,  2692,  1027,  1031,  1031,  1033,  2005,  1045,  1999,  2846,
         1006,  2531,  1007,  1033,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101, 13075,  2692,  1027,  1031,  4874,  1006,  1007,  2005,  1035,
         1999,  2846,  1006,  2531,  1007,  1033,   102])
got:
tensor([ 1031,  1045,  1012,  3975,  1006,  1005,  2358,  2099,  2692,  1005,
         1007,  1031,  1015,  1033,  2005,  1045,  1999,  2846,  1006, 18798,
         1006,  2358,  2099,  2692,  1007,  1007,  1033,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([ 101, 1031, 1060, 1031, 1024, 1024, 1011, 1015, 1033, 2005, 1060, 1999,
        2358, 2099, 2692, 1033,  102])
got:
tensor([ 2026,  2638, 13668,  2923,  1027,  2862,  1006, 13075,  2692,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101,  2862,  1006,  3641, 29201,  1012,  2013, 14839,  2015,  1006,
         1005, 13075,  2692,  1005,  1007,  1007,   102])
got:
tensor([ 4942, 21572,  9623,  2015,  1012,  2655,  1006,  1005,  2358,  2099,
         2692,  1005,  1010,  5806,  1027,  2995,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101,  4942, 21572,  9623,  2015,  1012,  2655,  1006,  1031,  1005,
         2358,  2099,  2692,  1005,  1033,  1007,   102])
got:
tensor([2128, 1012, 3975, 1006, 1007,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102])
source:
tensor([ 101, 2128, 1012, 3975, 1006, 1005, 1009, 1005, 1010, 1005, 7592, 2088,
        7099, 3793, 1005, 1007,  102])
got:
tensor([ 2862,  1006,  2009,  8743, 13669,  2015,  1012,  4031,  1006,  1008,
         1016,  1007,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([ 101, 1006, 1050, 2005, 1050, 1999, 1031, 1015, 1010, 1016, 1010, 1017,
        1010, 1019, 1033, 1007,  102])
got:
tensor([ 1046,  3385,  1012,  4372, 16044,  1006,  1005, 21183,  2546,  1011,
         1022,  1005,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101,  1046,  3385,  1012, 15653,  2015,  1006, 26066,  1006,  1005,
         1017,  1012,  1023,  1005,  1007,  1007,   102])
got:
tensor([13075,  2692,  1031,  1005,  2358,  2099,  2692,  1005,  1033,  1027,
         1017,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101, 13075,  2692,  1031,  1005,  2358,  2099,  2692,  1005,  1033,
         1027,  1005,  2358,  2099,  2487,  1005,   102])
got:
tensor([13075,  2692,  1031,  1005,  2358,  2099,  2692,  1005,  1033,  1027,
         1015,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101, 13075,  2692,  1012, 10651,  1006,  1063,  1005,  2358,  2099,
         2692,  1005,  1024,  1015,  1065,  1007,   102])
got:
tensor([13075,  2692,  1031,  1005,  2358,  2099,  2692,  1005,  1033,  1027,
         1015,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101, 13075,  2692,  1012, 10651,  1006,  4487,  6593,  1006,  2358,
         2099,  2692,  1027,  1015,  1007,  1007,   102])
got:
tensor([1031, 1055, 1012, 6167, 1006, 1007, 2005, 1055, 1999, 2128, 1012, 2424,
        8095, 1006, 1005, 1032, 1032, 1055, 1005, 1010, 1055, 1007, 1033,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102])
source:
tensor([ 101, 2128, 1012, 3975, 1006, 1005, 1006, 1032, 1032, 1059, 1009, 1007,
        1005, 1010, 1055, 1007,  102])
got:
tensor([ 1040,  2546,  1031,  1005, 13075,  2692,  1005,  1033,  1012,  2358,
         2099,  1012,  2131,  1006,  1005, 13075,  2692,  1005,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101,  1040,  2546,  1012,  5950,  1012,  2131,  1035,  8840,  2278,
         1006,  1005, 13075,  2692,  1005,  1007,   102])
got:
tensor([13075,  2692,  1031,  1005,  2358,  2099,  2692,  1005,  1033,  1027,
         1015,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101, 13075,  2692,  1012, 10651,  1006,  1063,  1005,  2358,  2099,
         2692,  1005,  1024,  1015,  1065,  1007,   102])
got:
tensor([ 6140,  1006,  1005,  3643,  2003,  1000,  1063,  1065,  1000,  1005,
         1012,  4289,  1006, 13075,  2692,  1007,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101,  6140,  1006,  1005,  1000,  1063,  1065,  1000,  1005,  1012,
         4289,  1006, 13075,  2692,  1007,  1007,   102])
got:
tensor([6140, 1006, 1005, 1032, 1050, 1005, 1012, 3693, 1006, 2358, 2099, 2692,
        1007, 1007,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102])
source:
tensor([  101, 25353,  2015,  1012,  2358, 26797,  2102,  1012,  4339,  1006,
         1005,  2358,  2099,  2692,  1005,  1007,   102])
got:
tensor([1000, 1000, 1000, 1000, 1000, 1000, 1012, 3693, 1006, 1031, 2358, 2099,
        2692, 1033, 1007,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102])
source:
tensor([ 101, 1000, 1000, 1000, 1000, 1000, 1000, 1012, 3693, 1006, 1031, 2358,
        2099, 2692, 1033, 1007,  102])
got:
tensor([13075,  2692,  1012,  2000,  1035, 20116,  2615,  1006,  1005, 20116,
         2615,  1005,  1010,  5950,  1027,  6270,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101, 13075,  2692,  1012,  2000,  1035, 20116,  2615,  1006,  5371,
        18442,  1010,  5950,  1027,  6270,  1007,   102])
got:
tensor([13075,  2692,  1012,  4372, 16044,  1006,  1005,  2004,  6895,  2072,
         1005,  1010,  1005,  8568,  1005,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101, 13075,  2692,  1012,  4372, 16044,  1006,  1005, 11163,  1011,
         6070, 28154,  1011,  2321,  1005,  1007,   102])
got:
tensor([18798,  1006,  2275,  1006, 13075,  2692,  1007,  1007,  1027,  1027,
         1015,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101,  2035,  1006,  1060,  1027,  1027, 13075,  2692,  1031,  1014,
         1033,  2005,  1060,  1999, 13075,  2692,  1007,   102])
got:
tensor([13075,  2692,  1012,  5200,  1012,  2035,  1006,  1007,  1012,  2034,
         1006,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101, 13075,  2692,  1012,  5200,  1012, 11307,  1006,  1007,  1031,
         1024,  1015,  1033,  1012,  2131,  1006,  1007,   102])
got:
tensor([2128, 1012, 3975, 1006, 1005, 2358, 2099, 2487, 1005, 1010, 1005, 2358,
        2099, 2692, 1005, 1007,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102])
source:
tensor([ 101, 2128, 1012, 3975, 1006, 1005, 2358, 2099, 2487, 1005, 1010, 1005,
        2358, 2099, 2692, 1005, 1007,  102])
got:
tensor([ 1031,  7680,  1006,  1060,  1007,  2005,  1060,  1999, 13075,  2487,
         1033,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101,  6140,  1006,  7680,  1006,  5216,  1031, 13075,  2692,  1033,
         2005,  5216,  1999, 13075,  2487,  1007,  1007,   102])
got:
tensor([13075,  2692,  1027,  1031,  1045,  1031,  1014,  1033,  2005,  1045,
         1999, 13075,  2692,  1033,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101,  1031,  3746,  2005, 12183,  4221,  2213,  1999, 13075,  2692,
         2005,  3746,  1999, 12183,  4221,  2213,  1033,   102])
got:
tensor([27937,  1012,  5717,  2015,  1006,  1006,  1020,  1010,  1023,  1010,
         2184,  1007,  1007,  1009, 27937,  1012,  9140,  1006,  1031,  2358,
         2099,  2692,  1033,  1007,  1031,  1006,  3904,  1007,  1010,  1024,
         1010,  1006,  3904,  1007,  1033,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101, 27937,  1012,  4555,  1006,  1031,  2358,  2099,  2692,  1033,
         1010,  1031,  2358,  2099,  2487,  1033,  1007,   102])
got:
tensor([ 6140,  1006, 13075,  2692,  1031,  1011,  1017,  1024,  1033,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101,  6140,  1006, 13075,  2692,  1031,  1017,  1024,  1033,  1009,
        13075,  2692,  1031,  1024,  1017,  1033,  1007,   102])
got:
tensor([ 1040,  2546,  1012,  6611,  1006, 23375,  1060,  1024,  1060,  1012,
         3475,  2319,  1010,  8123,  1027,  1014,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101,  1040,  2546,  1012,  2004, 13874,  1006, 22017,  2140,  1007,
         1012,  7680,  1006,  8123,  1027,  1015,  1007,   102])
got:
tensor([2128, 1012, 3945, 1006, 1005, 2358, 2099, 2692, 1005, 1010, 2358, 2099,
        2487, 1007, 1012, 2177, 1006, 1015, 1007,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102])
source:
tensor([ 101, 2128, 1012, 3945, 1006, 1005, 2358, 2099, 2692, 1005, 1010, 1005,
        2358, 2099, 2487, 1005, 1007,  102])
got:
tensor([ 2005,  8875,  1999, 13075,  2692,  1024,  3413,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101,  1031,  1060,  2005,  1060,  1999, 13075,  2692,  2065, 18798,
         1006,  1060,  1007,  1027,  1027,  1017,  1033,   102])
got:
tensor([13075,  2692,  1027,  1031, 13075,  2487,  2005,  1035,  1999,  2846,
         1006,  2531,  1007,  1033,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101, 13075,  2692,  1027,  1031, 13075,  2487,  1006,  1007,  2005,
         1045,  1999,  2846,  1006,  2531,  1007,  1033,   102])
got:
tensor([ 1055,  2487,  1027, 22851,  1012, 13590,  1006, 13075,  2692,  1010,
        13075,  2487,  1010,  2129,  1027,  1005,  5110,  1005,  1010,  2006,
         1027,  1031,  1005,  2358,  2099,  2692,  1005,  1033,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101, 13075,  2692,  1012, 13590,  1006, 13075,  2487,  1010,  2006,
         1027,  1005,  2358,  2099,  2692,  1005,  1007,   102])
got:
tensor([ 9808,  1012,  4130,  1012,  2691, 28139,  8873,  2595,  1006,  1031,
         1005, 13075,  2692,  1005,  1010,  9808,  1012,  4130,  1012,  2613,
        15069,  1006, 13075,  2692,  1007,  1033,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101,  4487,  3367, 21823,  4877,  1012, 16101,  1035, 21183,  4014,
         1012, 12395, 15069,  1006, 13075,  2692,  1007,   102])
got:
tensor([13075,  2692,  1012,  2424,  1035,  2035,  1006,  1005,  2358,  2099,
         2692,  1005,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102])
source:
tensor([  101,  6140,  1006, 13075,  2692,  1012,  2424,  1006,  1005,  2358,
         2099,  2692,  1005,  1007,  1012,  5164,  1007,   102])
got:
tensor([1040, 2546, 1031, 1005, 2358, 2099, 2692, 1005, 1033, 1012, 5950, 1006,
        1005, 2358, 2099, 2692, 1005, 1007,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102])
source:
tensor([ 101, 1040, 2546, 1012, 8840, 2278, 1031, 1040, 2546, 1031, 1005, 2358,
        2099, 2692, 1005, 1033, 1033,  102])
got:
tensor([ 2128,  1012,  2424,  8095,  1006,  1005,  1032,  1032,  1055,  1009,
         1005,  1010, 13075,  2692,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101,  1000,  1000,  1000,  1000,  1000,  1000,  1012,  3693,  1006,
        13075,  2692,  1012,  3975,  1006,  1007,  1007,   102])
got:
tensor([27937,  1012, 12098,  2290,  2860,  5886,  2063,  1006, 27937,  1012,
         2035,  1006,  2358,  2099,  2692,  1027,  1027,  1031,  2358,  2099,
         2692,  1033,  1010,  8123,  1027,  1006,  1015,  1010,  1016,  1007,
         1007,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101, 27937,  1012,  6721,  1012, 23046,  1006, 27937,  1012,  9099,
        20688,  1006,  2358,  2099,  2692,  1007,  1007,   102])
got:
tensor([20014,  1006,  2358,  2099,  1006,  1045,  1007,  2005,  1045,  1999,
        13075,  2692,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101,  1056,  2475,  1027,  1031,  4949,  1006, 20014,  1010,  1060,
         1007,  2005,  1060,  1999, 13075,  2692,  1033,   102])
got:
tensor([ 1000,  1000,  1000,  2358,  2099,  2692,  1000,  1000,  1000,  1012,
         4372, 16044,  1006,  1005,  3763,  1011,  1015,  1005,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101, 12359,  1027,  2918, 21084,  1012,  1038, 21084,  2368, 16044,
         1006,  1005,  2358,  2099,  2692,  1005,  1007,   102])
got:
tensor([13075,  2692,  1012,  4372, 16044,  1006,  1005,  2358,  2099,  2692,
         1005,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101, 12359,  1027,  1005,  2358,  2099,  2692,  1005,  1012,  4372,
        16044,  1006,  1005, 13075,  2692,  1005,  1007,   102])
got:
tensor([ 4487,  6593,  1006,  4949,  1006, 20014,  1010,  1060,  1012,  3975,
         1006,  1005,  1024,  1005,  1007,  1007,  2005,  1060,  1999,  1055,
         1012,  3975,  1006,  1005,  1010,  1005,  1007,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101,  1040,  1027,  2004,  2102,  1012, 18204,  1035,  9345,  2140,
         1006,  1005,  2358,  2099,  2692,  1005,  1007,   102])
got:
tensor([ 6434,  1027,  2330,  1006,  1005,  2358,  2099,  2692,  1005,  1010,
         1005, 25610,  1005,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([ 101, 2047, 1035, 5371, 1027, 2330, 1006, 1005, 2358, 2099, 2692, 1005,
        1010, 1005, 1059, 1005, 1007,  102])
got:
tensor([1031, 2862, 1006, 1056, 1007, 2005, 1056, 1999, 2358, 2099, 2692, 1033,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102])
source:
tensor([  101,  4949,  1006, 23375,  1037,  1024,  1037,  1031,  1014,  1033,
         1010,  1006,  2358,  2099,  2692,  1007,  1007,   102])
got:
tensor([ 1040,  2546,  1012,  6611,  1006, 23375,  1060,  1024,  1060,  1012,
         2000,  9863,  1006,  1007,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101,  1040,  2546,  1012,  5436,  1006,  2785,  1027,  1005,  3347,
         2232,  1005,  1010, 16934,  1027,  2995,  1007,   102])
got:
tensor([13075,  2692,  1012,  2177,  3762,  1006,  1005,  6120,  1005,  1007,
         1012,  2946,  1006,  1007,  1012,  2358, 12881,  7292,  1006,  1005,
         1003,  1061,  1011,  1003,  1049,  1011,  1003,  1040,  1005,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101, 13075,  2692,  1012,  2275,  1035,  1060, 26348, 20470,  9050,
         1006, 10873,  1010,  9963,  1027,  3429,  1007,   102])
got:
tensor([22851,  1012,  9530, 11266,  1006,  1031,  1040,  2546,  2692,  1012,
         2132,  1006,  1015,  1007,  1010,  8123,  1027,  1015,  1007,  1033,
         1010,  8123,  1027,  1015,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([ 101, 1040, 2546, 1012, 2177, 3762, 1006, 1005, 2358, 2099, 2692, 1005,
        1007, 1012, 2034, 1006, 1007,  102])
got:
tensor([ 4942, 21572,  9623,  2015,  1012,  2655,  1006,  1031,  2358,  2099,
         2692,  1033,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101,  4942, 21572,  9623,  2015,  1012,  4831,  2078,  1006,  1031,
         1005,  2358,  2099,  2692,  1005,  1033,  1007,   102])
got:
tensor([19616,  1006, 13075,  2692,  1010,  3145,  1027, 13075,  2692,  1012,
         2131,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101, 19616,  1006, 13075,  2692,  1010,  3145,  1027, 13075,  2692,
         1012,  2131,  1010,  7901,  1027,  2995,  1007,   102])
got:
tensor([27937,  1012,  5717,  2015,  1006,  1006,  2358,  2099,  2692,  1007,
         1007,  1009, 27937,  1012,  9140,  1006,  1031,  2358,  2099,  2487,
         1033,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101, 27937,  1012,  5443,  2696,  3600,  1006,  1006,  2358,  2099,
         2487,  1010,  2358,  2099,  2692,  1007,  1007,   102])
got:
tensor([19616,  1006,  1031,  2358,  2099,  2692,  1033,  1010,  3145,  1027,
        23375,  1060,  1024,  1060,  1031,  1015,  1033,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101,  2358,  2099,  2692,  1012,  4066,  1006,  3145,  1027, 23375,
         5216,  1024,  5216,  1031,  1016,  1033,  1007,   102])
got:
tensor([ 1031,  3145,  2005,  8875,  1999, 13075,  2692,  2065, 13075,  2487,
         1027,  1027,  2382,  1033,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101,  1031,  1060,  2005,  1060,  1999, 13075,  2692,  2065,  1060,
         1012, 13075,  2487,  1027,  1027,  2382,  1033,   102])
got:
tensor([9808, 1012, 2291, 1006, 1005, 2358, 2099, 2692, 1005, 1007,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102])
source:
tensor([ 101, 9808, 1012, 2291, 1006, 1005, 2358, 2099, 2487, 1005, 1010, 1005,
        2358, 2099, 2692, 1005, 1007,  102])
got:
tensor([ 1031,  1060,  2005,  1060,  1999, 13075,  2692,  2065,  1060,  2025,
         1999,  1031,  2358,  2099,  2692,  1033,  1033,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101,  6140,  1006,  1005,  1005,  1012,  3693,  1006,  4949,  1006,
         2358,  2099,  1010, 13075,  2692,  1007,  1007,  1007,   102])
got:
tensor([ 4942, 21572,  9623,  2015,  1012,  2655,  1006,  1031,  1005,  3231,
         1012, 14021,  1005,  1010,  2358,  2099,  1006, 14383,  3593,  1007,
         1033,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101, 25353,  2015,  1012,  4130,  1012, 10439, 10497,  1006,  1005,
         1013,  4130,  1013,  2000,  1013,  3649,  1005,  1007,   102])
got:
tensor([ 4942, 21572,  9623,  2015,  1012,  2655,  1006,  1005,  2358,  2099,
         2692,  1005,  1010,  5806,  1027,  2995,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101,  4942, 21572,  9623,  2015,  1012,  2655,  1006,  1005,  2358,
         2099,  2692,  1005,  1010,  5806,  1027,  2995,  1007,   102])
got:
tensor([ 2007,  2330,  1006,  1005,  2358,  2099,  2692,  1005,  1010,  1005,
         2358,  2099,  2692,  1005,  1007,  2004,  1042,  1024, 13075,  2487,
         1012,  4339,  1006,  1005,  2358,  2099,  2692,  1005,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101, 13075,  2487,  1012,  4339,  1006,  1005,  2358,  2099,  2692,
         1005,  1012,  3693,  1006, 13075,  2692,  1007,  1007,   102])
got:
tensor([ 1031,  1031,  2358,  2099,  2692,  1033,  2005,  1037,  1999, 14101,
         1006,  1031,  2358,  2099,  2487,  1033,  1010,  1031,  2358,  2099,
         2475,  1033,  1007,  1033,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([ 101, 1031, 2358, 2099, 2692, 1033, 1009, 1031, 2358, 2099, 2487, 1033,
        1009, 1031, 2358, 2099, 2475, 1033,  102])
got:
tensor([13075,  2692,  1012,  4530,  1006, 13075,  2692,  1012,  7753,  1031,
         1014,  1033,  1010,  8123,  1027,  1015,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101, 13075,  2692,  1012, 25141,  1035,  5950,  1006,  2504,  1027,
         1014,  1010,  1999, 24759, 10732,  1027,  2995,  1007,   102])
got:
tensor([16371,  8737,  2100,  1012,  7170,  2102, 18413,  1006, 13075,  2692,
         1010, 13075,  2692,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101, 16371,  8737,  2100,  1012,  9140,  1006, 13075,  2692,  1007,
         1031,  1014,  1033,  1012,  2000,  9863,  1006,  1007,   102])
got:
tensor([ 1031,  7680,  1006,  1060,  1031,  1014,  1033,  2005,  1060,  1999,
        13075,  2692,  1007,  1033,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([ 101, 7680, 1006, 1031, 3940, 1031, 1014, 1033, 2005, 3940, 1999, 2862,
        1035, 1997, 1035, 7689, 1033, 1007,  102])
got:
tensor([2448, 1006, 1005, 2358, 2099, 2692, 1005, 1007,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102])
source:
tensor([  101,  4942, 21572,  9623,  2015,  1012,  2655,  1006,  1005,  2358,
         2099,  2692,  1005,  1010,  5806,  1027,  2995,  1007,   102])
got:
tensor([ 2007,  2330,  1006, 13075,  2692,  1007,  2004,  1042,  1024, 13075,
         2692,  1027,  1042,  1012,  3191, 12735,  1006,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101,  1031,  2240,  1012, 12667, 24901,  1006,  1005,  1032,  1050,
         1005,  1007,  2005,  2240,  1999, 13075,  2692,  1033,   102])
got:
tensor([ 4098,  1006, 13075,  2692,  1010,  3145,  1027, 23375,  1060,  1024,
         1060,  1031,  1015,  1033,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101,  4098,  1006, 13075,  2692,  1010,  3145,  1027,  8875, 18150,
         3334,  1006,  1015,  1007,  1007,  1031,  1014,  1033,   102])
got:
tensor([19616,  1006,  2862,  1006, 13075,  2692,  1012,  5167,  1006,  1007,
         1007,  1010,  3145,  1027,  6872,  1012,  8875, 18150,  3334,  1006,
         1015,  1007,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101, 19616,  1006, 13075,  2692,  1010, 23375,  1060,  1024,  1006,
         3014,  1006,  1060,  1007,  1010,  1060,  1007,  1007,   102])
got:
tensor([13075,  2692,  1027,  1031,  1060,  2005,  1060,  1999, 13075,  2487,
         2065,  1060,  1033,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101, 13075,  2692,  1027,  1031,  1060,  2005,  1060,  1999, 13075,
         2487,  2065,  1060,   999,  1027,  1031,  1033,  1033,   102])
got:
tensor([2128, 1012, 2674, 1006, 1005, 2358, 2099, 2692, 1005, 1010, 1005, 2358,
        2099, 2487, 1005, 1007,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102])
source:
tensor([ 101, 2128, 1012, 2424, 8095, 1006, 1005, 2358, 2099, 2692, 1005, 1010,
        1005, 2358, 2099, 2487, 1005, 1007,  102])
got:
tensor([ 9530,  8873,  2290,  1027, 13075,  2692,  1031,  1005,  2358,  2099,
         2692,  1005,  1033,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101, 10439,  1012,  9530,  8873,  2290,  1031,  1005, 13075,  2692,
         1005,  1033,  1027,  1005,  2358,  2099,  2692,  1005,   102])
got:
tensor([ 2330,  1006, 13075,  2487,  1010,  1005,  1054,  1005,  1007,  1012,
         4339,  1006, 13075,  2692,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101,  2330,  1006,  1005, 13075,  2487,  1005,  1010,  1005, 25610,
         1005,  1007,  1012,  4339,  1006, 13075,  2692,  1007,   102])
got:
tensor([13075,  2692,  1012,  5672,  1006,  1005,  1005,  1010,  1005,  1005,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101,  1031,  5783,  2005,  5783,  1999, 13075,  2692,  2065,  2003,
         7076, 26897,  1006,  5783,  1010, 20014,  1007,  1033,   102])
got:
tensor([ 1031,  4487,  6593,  1006, 15609,  1010,  1060,  1007,  2005,  1060,
         1999, 13075,  2692,  1012,  6309,  1006,  1007,  1033,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101,  2862,  1006, 13075,  2692,  1012,  2131,  1035,  2846,  1006,
         1007,  1012,  2131,  1035,  6309,  1006,  1007,  1007,   102])
got:
tensor([6140, 1006, 6721, 1012, 7170, 1006, 1005, 2358, 2099, 2692, 1005, 1007,
        1007,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102])
source:
tensor([ 101, 6721, 1012, 3601, 1006, 9808, 1012, 2862, 4305, 2099, 1006, 1005,
        2358, 2099, 2692, 1005, 1007, 1007,  102])
got:
tensor([25353,  2015,  1012,  4130,  1012,  2131, 20492, 14428,  1006,  1005,
         2358,  2099,  2692,  1005,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101,  9808,  1012,  3102,  1006,  9808,  1012,  2131, 23267,  1006,
         1007,  1010,  4742,  1012,  9033, 12349,  2099,  2487,  1007,   102])
got:
tensor([13075,  2487,  1027,  1031, 14257,  1006,  8875,  1007,  2005,  8875,
         1999, 13075,  2692,  1012,  3975,  1006,  1005,  1010,  1005,  1007,
         1033,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2487,  1027, 14257,  1006, 13075,  2692,  1012,  5672,
         1006,  1005,  1010,  1005,  1010,  1005,  1005,  1007,  1007,   102])
got:
tensor([1000, 1000, 1000, 2358, 2099, 2692, 1000, 1000, 1000, 1012, 3693, 1006,
        1031, 2358, 2099, 2692, 1033, 1007,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102])
source:
tensor([  101, 14257,  1006,  1005,  2358,  2099,  2692,  1005,  1012,  5672,
         1006,  1005,  1010,  1005,  1010,  1005,  1005,  1007,  1007,   102])
got:
tensor([ 1031,  8875,  1012,  3975,  1006,  1007,  2005,  8875,  1999, 13075,
         2692,  1012,  3975,  1006,  1005,  1010,  1005,  1007,  1033,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1027,  1005,  1010,  1005,  1012,  3693,  1006,
         4949,  1006,  2358,  2099,  1010, 13075,  2692,  1007,  1007,   102])
got:
tensor([ 1031, 20014,  1006,  1060,  1007,  2005,  1060,  1999, 13075,  2692,
         1012,  3975,  1006,  1005,  1010,  1005,  1007,  1033,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101,  1031, 20014,  1006,  1055,  1007,  2005,  1055,  1999, 13075,
         2692,  1012,  3975,  1006,  1005,  1010,  1005,  1007,  1033,   102])
got:
tensor([14101,  1006, 13075,  2692,  1010, 13075,  2487,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101,  1031, 11748,  2005,  3940,  1999, 14101,  1006, 13075,  2692,
         1010, 13075,  2487,  1007,  2005, 11748,  1999,  3940,  1033,   102])
got:
tensor([2007, 2330, 1006, 1005, 2358, 2099, 2692, 1005, 1010, 1005, 1054, 1005,
        1007, 2004, 1042, 1024, 1042, 1012, 4339, 1006, 1005, 1032, 1050, 1005,
        1007,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102])
source:
tensor([ 101, 1031, 2240, 1012, 3975, 1006, 1007, 2005, 2240, 1999, 2330, 1006,
        1005, 2358, 2099, 2692, 1005, 1007, 1033,  102])
got:
tensor([19616,  1006, 13075,  2692,  1010,  3145,  1027, 23375,  1060,  1024,
        13075,  2487,  1031,  1060,  1033,  1031,  1005, 13075,  2692,  1005,
         1033,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1012,  4066,  1006,  3145,  1027, 23375,  1060,
         1024,  1060,  1031,  1005, 13075,  2487,  1005,  1033,  1007,   102])
got:
tensor([ 4098,  1006, 13075,  2692,  1010,  3145,  1027, 23375,  1060,  1024,
         1060,  1031,  1015,  1033,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101,  4098,  1006, 13075,  2692,  1010,  3145,  1027, 23375,  8875,
         1024,  8875,  1031,  1015,  1033,  1007,  1031,  1014,  1033,   102])
got:
tensor([13075,  2487,  1012, 10651,  1006, 13075,  2692,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2487,  1012,  3609,  8237,  1006, 13075,  2692,  1027,
        13075,  2692,  1010,  6187,  2595,  1027, 22260,  2509,  1007,   102])
got:
tensor([ 6140,  1006,  1031,  1006,  1060,  1010,  1061,  1007,  2005,  1060,
         1010,  1061,  1999, 14101,  1006,  2358,  2099,  2692,  1010,  2358,
         2099,  2692,  1031,  1015,  1024,  1024,  1016,  1033,  1007,  1033,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101,  2862,  1006,  2009,  8743, 13669,  2015,  1012, 14930,  1006,
         1006,  2358,  2099,  2692,  1007,  1010,  1016,  1007,  1007,   102])
got:
tensor([12731, 25301,  2099,  1012, 15389,  1006,  1005, 19274,  2046,  1056,
         2487,  7276,  1008,  2013,  2795,  2487,  5300,  1006,  1029,  1007,
         1005,  1010,  1063,  1065,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101,  5219,  1012, 15389,  1006,  1005, 19274,  2046,  1056,  2487,
         1006,  7276,  1008,  2013,  1056,  2475,  1007,  1005,  1007,   102])
got:
tensor([6140, 1006, 1005, 2358, 2099, 2487, 1005, 1007,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102])
source:
tensor([  101,  6140,  1006,  1005,  2358,  2099,  2487,  1005,  1012,  4372,
        16044,  1006,  1005,  5164,  1035,  4019,  1005,  1007,  1007,   102])
got:
tensor([27937,  1012,  2812,  1006, 13075,  2692,  1010,  8123,  1027,  1015,
         1007,  1012,  2812,  1006,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101,  1006, 13075,  2692,  1031,  1015,  1024,  1033,  1009, 13075,
         2692,  1031,  1024,  1011,  1015,  1033,  1007,  1013,  1016,   102])
got:
tensor([1000, 1000, 1000, 2358, 2099, 2487, 1000, 1000, 1000, 1012, 4175, 1006,
        1005, 2358, 2099, 2692, 1005, 1007,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102])
source:
tensor([ 101, 1000, 1000, 1000, 2358, 2099, 2487, 1000, 1000, 1000, 1012, 4175,
        1006, 1005, 2358, 2099, 2692, 1005, 1007,  102])
got:
tensor([24471,  6894,  2497,  1012,  5227,  1012, 24471, 20974,  3388,  7373,
         3726,  1006, 13075,  2692,  1010, 13075,  2487,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101, 24471,  6894,  2497,  1012,  5227,  1012, 24471, 20974,  3388,
         7373,  3726,  1006, 13075,  2692,  1010, 13075,  2487,  1007,   102])
got:
tensor([13075,  2692,  1012,  4066,  1006,  3145,  1027, 23375,  1060,  1024,
         1060,  1031,  1016,  1033,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1012,  4066,  1006,  3145,  1027, 23375,  1060,
         1024,  1060,  1031,  1015,  1033,  1031,  1016,  1033,  1007,   102])
got:
tensor([ 1031,  1006,  1060,  1009,  2410,  1007,  2005,  1060,  1010,  1061,
         1999, 14101,  1006, 13075,  2692,  1010, 13075,  2692,  1031,  1015,
         1024,  1033,  1007,  1033,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1031,  1024,  1033,  1027,  1031,  1006,  1060,
         1011,  2410,  1007,  2005,  1060,  1999, 13075,  2692,  1033,   102])
got:
tensor([ 6140,  1006,  9808,  1012,  4372, 21663,  2239,  1012,  2131,  1006,
         1005,  2358,  2099,  2692,  1005,  1007,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101,  4942, 21572,  9623,  2015,  1012,  4638,  1035,  6434,  1006,
         1005,  2358,  2099,  2692,  1005,  1010,  5806,  1027,  2995,  1007,
          102])
got:
tensor([ 1054,  1027, 11186,  1012,  2131,  1006, 13075,  2692,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1012,  4604,  1006,  1005,  8299,  1013,  1015,
         1012,  1014,  3263,  7929,  1032,  1054,  1032,  1050,  1005,  1007,
          102])
got:
tensor([22260,  1012,  2275,  1035,  1061, 26348, 20470,  9050,  1006,  1031,
         1005,  2358,  2099,  2475,  1005,  1010,  1005,  2358,  2099,  2509,
         1005,  1033,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101, 20228,  2102,  1012,  5436,  1006,  2358,  2099,  2475,  1010,
         2358,  2099,  2509,  1010,  3830,  1027,  1005, 24833,  1005,  1007,
          102])
got:
tensor([ 4098,  1006, 13075,  2692,  1010,  3145,  1027, 23375,  1060,  1024,
        14689,  1006,  1060,  1031,  1015,  1033,  1007,  2065,  1060,  1031,
         1014,  1033,  2842,  1060,  1031,  1014,  1033,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101,  1006,  1047,  2005,  1047,  1010,  1058,  1999, 13075,  2692,
         1012,  5167,  1006,  1007,  2065,  1058,   999,  1027,  1014,  1007,
          102])
got:
tensor([ 2358,  2099,  2692,  1012, 21933,  3207,  1006,  1005,  2358,  2099,
         2692,  1005,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101,  1000,  1000,  1000,  2358,  2099,  2692,  1000,  1000,  1000,
         1012, 21933,  3207,  1006,  1005,  5164,  1035,  4019,  1005,  1007,
          102])
got:
tensor([2128, 1012, 2424, 8095, 1006, 1005, 2358, 2099, 2487, 1005, 1010, 1005,
        2358, 2099, 2692, 1005, 1007,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102])
source:
tensor([  101,  1000,  1000,  1000,  2358,  2099,  2487,  1000,  1000,  1000,
         1012, 21792, 22254,  1006,  1005,  2358,  2099,  2692,  1005,  1007,
          102])
got:
tensor([13075,  2692,  1012,  2131,  1006,  3145,  1027, 23375,  1060,  1024,
         1060,  1012, 13075,  2487,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1012,  4066,  1006,  3145,  1027, 23375,  1060,
         1024,  1060,  1012, 13075,  2487,  1010,  7901,  1027,  2995,  1007,
          102])
got:
tensor([13075,  2692,  1012,  4066,  1006,  3145,  1027, 23375,  1060,  1024,
         1060,  1012, 13075,  2487,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1012,  4066,  1006,  3145,  1027, 23375,  1060,
         1024,  1060,  1012, 13075,  2487,  1010,  7901,  1027,  2995,  1007,
          102])
got:
tensor([13075,  2692,  1027,  2128,  1012,  4942,  1006,  1005,  2358,  2099,
         2692,  1005,  1010,  1005,  1005,  1010, 13075,  2487,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101, 22017,  2140,  1006,  2128,  1012,  3945,  1006,  1005,  2358,
         2099,  2692,  1005,  1010,  1005, 13075,  2487,  1005,  1007,  1007,
          102])
got:
tensor([ 2151,  1006,  1005,  2358,  2099,  2692,  1005,  1999,  2862,  1006,
        13075,  2692,  1012,  5167,  1006,  1007,  1007,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101,  2151,  1006,  3145,  1012,  4627, 24415,  1006,  1005,  2358,
         2099,  2692,  1005,  1007,  2005,  3145,  1999, 13075,  2692,  1007,
          102])
got:
tensor([19616,  1006, 13075,  2692,  1010,  3145,  1027, 23375,  1060,  1024,
         1060,  1031,  1005,  2358,  2099,  2692,  1005,  1033,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1012,  4066,  1006,  3145,  1027, 23375,  1060,
         1024,  1060,  1031,  1005,  2358,  2099,  2692,  1005,  1033,  1007,
          102])
got:
tensor([ 6140,  1006, 13075,  2487,  1012,  2131,  1006, 13075,  2692,  1007,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101,  3046,  1024,  6140,  1006, 13075,  2487,  1012,  5950,  1006,
        13075,  2692,  1007,  1007,  3272,  3643,  2121, 29165,  1024,  3413,
          102])
got:
tensor([19616,  1006,  4372, 17897, 11657,  1006,  1037,  1007,  1010,  3145,
         1027, 23375,  1060,  1024,  1060,  1031,  1015,  1033,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101, 19616,  1006,  2862,  2629,  1010,  3145,  1027, 23375, 19449,
         1024,  1006,  3014,  1006, 19449,  1007,  1010, 19449,  1007,  1007,
          102])
got:
tensor([ 2007,  2330,  1006, 13075,  2692,  1007,  2004,  1042,  1024,  1042,
         1012,  4339,  1006,  1005,  1032,  1050,  1005,  1012,  3693,  1006,
        13075,  2692,  1007,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101,  1031,  1060,  2005,  1060,  1999, 13075,  2692,  1012,  3975,
        12735,  1006,  1007,  2065,  1060,   999,  1027,  1005,  1005,  1033,
          102])
got:
tensor([ 2128,  1012,  4942,  1006,  1005,  1026,  1031,  1034,  1028,  1033,
         1008,  1028,  1005,  1010,  1005,  1005,  1010, 13075,  2692,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101,  2128,  1012,  4942,  1006,  1005,  1031,  1034,  1032,  1032,
         1059,  1033,  1005,  1010,  1005,  1005,  1010, 13075,  2692,  1007,
          102])
got:
tensor([ 7680,  1006, 18798,  1006,  1060,  1007,  2005,  1060,  1999, 13075,
         2692,  1012,  3975,  1006,  1007,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101, 18798,  1006,  2275,  1006,  2330,  1006, 13075,  2692,  1007,
         1012,  3191,  1006,  1007,  1012,  3975,  1006,  1007,  1007,  1007,
          102])
got:
tensor([ 1000,  1000,  1000,  1000,  1000,  1000,  1012,  3693,  1006, 11307,
         1006,  2358,  2099,  1012,  2003,  4305, 23806,  1010,  1005,  2358,
         2099,  2692,  1005,  1007,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101,  1000,  1000,  1000,  2358,  2099,  2692,  1000,  1000,  1000,
         1012, 21933,  3207,  1006,  1005,  5164,  1035,  4019,  1005,  1007,
          102])
got:
tensor([16371,  8737,  2100,  1012,  9530, 16280, 12556,  1006, 13075,  2692,
         1010, 13075,  2487,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101,  6140,  1006,  9530, 16280, 12556,  1006,  1006, 13075,  2692,
         1010, 13075,  2487,  1007,  1010,  8123,  1027,  1014,  1007,  1007,
          102])
got:
tensor([16371,  8737,  2100,  1012,  9530, 16280, 12556,  1006, 13075,  2692,
         1010, 13075,  2487,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101,  6140,  1006,  9530, 16280, 12556,  1006,  1006, 13075,  2692,
         1010, 13075,  2487,  1007,  1010,  8123,  1027,  1015,  1007,  1007,
          102])
got:
tensor([25353,  2015,  1012,  4130,  1012, 19274,  1006,  1014,  1010,  1005,
         2358,  2099,  2692,  1005,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101,  6140,  1006, 22278,  1012,  2131,  4215, 13626,  2378, 14876,
         1006,  1005,  2358,  2099,  2692,  1005,  1010,  3770,  1007,  1007,
          102])
got:
tensor([10923, 10524,  8043,  1012,  2330,  1006,  1005,  2358,  2099,  2692,
         1005,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101, 13109, 19895,  1006,  1035,  1035,  2171,  1035,  1035,  1010,
        23561,  1035, 19622,  1027,  1005,  2358,  2099,  2692,  1005,  1007,
          102])
got:
tensor([ 2128,  1012,  4942,  1006,  1005,  1031,  1034,  1037,  1011, 23564,
         1011,  1062,  1033,  1005,  1010,  1005,  1005,  1010,  1005,  2358,
         2099,  2487,  1005,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([ 101, 2128, 1012, 4942, 1006, 1005, 2358, 2099, 2692, 1005, 1010, 1005,
        1005, 1010, 1005, 2358, 2099, 2487, 1005, 1007,  102])
got:
tensor([ 4062,  1012,  2424,  1035,  5783,  1035,  2011,  1035, 26726,  8988,
         1006,  1000,  1013,  1013,  1008,  1031,  1030,  8909,  1027,  1005,
         2028,  1005,  1033,  1000,  1007,  1012, 11562,  1006,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101,  4443,  1012,  5200,  1012, 11307,  1006,  9047,  1035,  3058,
         1035,  1035,  3397,  1027,  1005,  5511,  1024,  4002,  1005,  1007,
          102])
got:
tensor([2128, 1012, 3975, 1006, 1005, 2358, 2099, 2692, 1005, 1010, 1005, 2358,
        2099, 2487, 1005, 1007,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102])
source:
tensor([ 101, 1005, 1037, 1032, 1050, 1038, 1032, 1054, 1032, 1050, 1039, 1005,
        1012, 3975, 1006, 1005, 2358, 2099, 2487, 1005, 1007,  102])
got:
tensor([1000, 1000, 1000, 2358, 2099, 2487, 1000, 1000, 1000, 1012, 5672, 1006,
        1005, 2358, 2099, 2692, 1005, 1010, 1005, 1005, 1007,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102])
source:
tensor([ 101, 6140, 1006, 1005, 2358, 2099, 2487, 1005, 1012, 5672, 1006, 1005,
        2358, 2099, 2692, 1005, 1010, 1005, 1005, 1007, 1007,  102])
got:
tensor([ 2128,  1012,  3975,  1006,  1005,  2358,  2099,  2692,  1005,  1010,
        13075,  2692,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101,  6140,  1006, 13075,  2692,  1012,  1054, 19362,  3775,  3508,
         1006,  1005,  2358,  2099,  2692,  1005,  1007,  1031,  1014,  1033,
         1007,   102])
got:
tensor([2128, 1012, 2424, 8095, 1006, 1005, 1032, 1032, 1012, 1031, 1034, 1012,
        1033, 1009, 1005, 1010, 1005, 2358, 2099, 2692, 1005, 1007,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102])
source:
tensor([  101,  6140,  1006,  1060,  1012, 12667, 24759,  4183,  1006,  1005,
         2358,  2099,  2692,  1005,  1010,  1015,  1007,  1031,  1014,  1033,
         1007,   102])
got:
tensor([ 1031, 20014,  1006,  1060,  1007,  2005,  1060,  1999,  2846,  1006,
         2531,  1007,  1033,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101,  1031, 20014,  1006,  6694,  1008,  6721,  1012,  6721,  1006,
         1007,  1007,  2005,  1045,  1999,  2846,  1006,  6694,  2692,  1007,
         1033,   102])
got:
tensor([24471,  6894,  2497,  1012,  5227,  1012, 24471, 20974,  3388,  7373,
         3726,  1006,  1005,  2358,  2099,  2692,  1005,  1010,  1005,  2358,
         2099,  2487,  1005,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101, 16962,  1012,  1043,  4160,  2140,  4226,  2854,  1006,  1005,
         2358,  2099,  2692,  1005,  1010, 29379,  1012,  3145,  1006,  1007,
         1007,   102])
got:
tensor([ 3058,  7292,  1012,  2358, 14536,  7292,  1006,  1005,  2358,  2099,
         2692,  1005,  1010,  1005,  2358,  2099,  2692,  1005,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101,  3058,  7292,  1012,  3058,  7292,  1012,  2358, 14536,  7292,
         1006,  5164,  1035,  3058,  1010,  1005,  2358,  2099,  2692,  1005,
         1007,   102])
got:
tensor([ 4098,  1006, 13075,  2692,  1010,  3145,  1027, 23375,  1060,  1024,
         1006, 14689,  1006,  1060,  1031,  1015,  1033,  1007,  1010,  1060,
         1031,  1014,  1033,  1007,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101,  4098,  1006,  1047,  2005,  1047,  1010,  1058,  1999, 13075,
         2692,  1012,  5167,  1006,  1007,  2065,  1058,   999,  1027,  1014,
         1007,   102])
got:
tensor([ 4098,  1006, 14689,  1006,  1060,  1011,  1061,  1007,  2005,  1060,
         1010,  1061,  1999, 13075,  2692,  1012,  5167,  1006,  1007,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101,  4098,  1006,  1047,  2005,  1047,  1010,  1058,  1999, 13075,
         2692,  1012,  5167,  1006,  1007,  2065,  1058,   999,  1027,  1014,
         1007,   102])
got:
tensor([13075,  2692,  1012,  8840,  2278,  1031, 13075,  2692,  1031,  1005,
         2358,  2099,  2692,  1005,  1033,  1012,  2003,  2378,  1006, 13075,
         2692,  1007,  1033,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1031, 13075,  2692,  1031,  1005,  2358,  2099,
         2692,  1005,  1033,  1033,  1012,  5950,  1012,  2000,  9863,  1006,
         1007,   102])
got:
tensor([ 1040,  2546,  1012,  6611,  1006, 23375,  1060,  1024,  1060,  1012,
         7753,  1010,  8123,  1027,  1015,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101,  1040,  2546,  1012, 25141,  1035,  5950,  1006,  2504,  1027,
         1031,  1005, 16356,  1005,  1010,  1005, 27885,  2015,  1005,  1033,
         1007,   102])
got:
tensor([4062, 1012, 2131, 1006, 1007,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102])
source:
tensor([  101,  4062,  1012, 15389,  1035,  5896,  1006,  1005,  2709,  6254,
         1012,  6254, 12260,  3672,  1012,  6058, 11039, 19968,  1025,  1005,
         1007,   102])
got:
tensor([13075,  2692,  1012,  6039,  2532,  1006,  4118,  1027,  1005, 21461,
         8591,  1005,  1010,  1999, 24759, 10732,  1027,  2995,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1012,  6039,  2532,  1006, 13075,  2692,  1012,
         2812,  1006,  8123,  1027,  1015,  1007,  1010,  8123,  1027,  1015,
         1007,   102])
got:
tensor([6140, 1006, 1005, 2358, 2099, 2692, 1005, 1012, 3693, 1006, 1031, 2358,
        2099, 2692, 1033, 1007, 1007,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102])
source:
tensor([  101,  6140,  1006,  1005,  2358,  2099,  2692,  1005,  1012,  3693,
         1006,  4949,  1006,  2358,  2099,  1010, 13075,  2692,  1007,  1007,
         1007,   102])
got:
tensor([ 6140,  1006,  1005,  2358,  2099,  2692,  1005,  1012, 21933,  3207,
         1006,  1005, 21183,  2546,  1011,  1022,  1005,  1007,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101,  6140,  1006,  1005,  2358,  2099,  2692,  1005,  1012,  4372,
        16044,  1006,  1005,  6315,  1035, 27260,  1035,  4019,  1005,  1007,
         1007,   102])
got:
tensor([ 6140,  1006, 13075,  2692,  1012,  4338,  1031,  1015,  1033,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101,  1031,  1045,  2005,  1045,  1010,  1060,  1999,  4372, 17897,
        11657,  1006, 13075,  2692,  1007,  2065,  1060,  1027,  1027,  1015,
         1033,   102])
got:
tensor([ 6140,  1006, 13075,  2692,  1012,  4338,  1031,  1015,  1033,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101,  1031,  1045,  2005,  1045,  1010,  1060,  1999,  4372, 17897,
        11657,  1006, 13075,  2692,  1007,  2065,  1060,  1027,  1027,  1015,
         1033,   102])
got:
tensor([ 4180,  1012,  5200,  1012,  4469,  1006,  7276,  1027,  1063,  1005,
        13075,  2692,  1005,  1024,  1005,  3091,  1006,  2171,  1007,  1005,
         1065,  1007,  1012,  2344,  1035,  2011,  1006,  1005,  1066,  1005,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101,  2709,  8299,  6072, 26029,  3366,  1006, 13075,  2692,  1010,
         2771, 11368, 18863,  1027,  1005,  4646,  1013,  1046,  3385,  1005,
         1007,   102])
got:
tensor([ 1000,  1000,  1000,  2358,  2099,  2692,  1000,  1000,  1000,  1012,
         4289,  1006, 13075,  2692,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1027,  1031,  1005,  2358,  2099,  2692,  1005,
         1012,  4289,  1006,  5783,  1007,  2005,  5783,  1999, 13075,  2692,
         1033,   102])
got:
tensor([16371,  8737,  2100,  1012, 13590,  1006,  1031,  2358,  2099,  2692,
         1010,  2358,  2099,  2487,  1033,  1010,  1031,  2358,  2099,  2692,
         1033,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 27937,  1012,  5930,  1035,  9991,  1006,  1006,  1031,  2358,
         2099,  2692,  1033,  1010,  1031,  2358,  2099,  2487,  1033,  1007,
         1007,   102])
got:
tensor([1031, 1045, 2005, 1045, 1999, 2358, 2099, 2692, 2065, 1045, 2025, 1999,
        1031, 2358, 2099, 2692, 1033, 1033,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102])
source:
tensor([  101,  1031,  5783,  2005,  5783,  1999,  2358,  2099,  2692,  2065,
         2025,  2003,  7076, 26897,  1006,  5783,  1010,  2358,  2099,  1007,
         1033,   102])
got:
tensor([ 3058,  7292,  1012,  3058,  7292,  1012,  2358, 14536,  7292,  1006,
         1005,  2358,  2099,  2692,  1005,  1010,  1005,  1003,  1038,  1003,
         1040,  1010,  1003,  1061,  1005,  1007,  1012,  2358, 12881,  7292,
         1006,  1005,  1003,  1037,  1005,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([ 101, 1006, 1056, 1011, 3058, 7292, 1012, 3058, 7292, 1006, 2358, 2099,
        2692, 1007, 1007, 1012, 2561, 1035, 3823, 1006, 1007,  102])
got:
tensor([ 6140,  1006,  4098,  1006, 13075,  2692,  1010,  3145,  1027,  6872,
         1012,  8875, 18150,  3334,  1006,  1015,  1007,  1007,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  4098,  1006, 13075,  2692,  1012,  8117,  1006,  1007,  1010,
        13075,  2692,  1012,  4098,  1006,  1007,  1010,  3145,  1027, 14689,
         1007,   102])
got:
tensor([ 2128,  1012,  3975,  1006,  1005,  1032,  1032,  1055,  1009,  1005,
         1010, 13075,  2692,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1012,  5672,  1006,  1005,  1005,  1010,  1005,
          999,   999,  1005,  1007,  1012,  3975,  1006,  1005,   999,  1005,
         1007,   102])
got:
tensor([ 1000,  1000,  1000,   100,  1000,  1000,  1000,  1012,  4372, 16044,
         1006,  1005, 21183,  2546,  1011,  1022,  1005,  1007,  1012, 21933,
         3207,  1006,  1005, 21183,  2546,  1011,  1022,  1005,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  1040,  1012, 21933,  3207,  1006,  1005, 18133, 12521, 22203,
         1005,  1007,  1012,  4372, 16044,  1006,  1005, 21183,  2546,  2620,
         1005,  1007,   102])
got:
tensor([13075,  2692,  1012,  3828,  8873,  2290,  1006,  1005,  2358,  2099,
         2692,  1005,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  4060,  2571,  1012, 15653,  1006, 13075,  2692,  1010,  2330,
         1006,  1005,  2358,  2099,  2692,  1005,  1010,  1005, 25610,  1005,
         1007,  1007,   102])
got:
tensor([ 6140,  1006, 13075,  2692,  1012,  3945,  1006,  1005,  2358,  2099,
         2692,  1005,  1007,  1012,  2177,  1006,  1015,  1007,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  6140,  1006,  2128,  1012,  3945,  1006,  1005,  2358,  2099,
         2692,  1005,  1010, 13075,  2692,  1007,  1012,  2177,  1006,  1014,
         1007,  1007,   102])
got:
tensor([ 7680,  1006,  2003,  7076, 26897,  1006,  1060,  1010, 20014,  1007,
         2005,  1060,  1999, 13075,  2692,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  1031,  1031,  1060,  1010, 13075,  2692,  1012,  4175,  1006,
         1060,  1007,  1033,  2005,  1060,  1999,  2275,  1006, 13075,  2692,
         1007,  1033,   102])
got:
tensor([2358, 2099, 2475, 1031, 1005, 2358, 2099, 2692, 1005, 1033, 1027, 1040,
        2546, 1031, 1005, 2358, 2099, 2487, 1005, 1033, 1012, 2358, 2099, 1031,
        1005, 2358, 2099, 2692, 1005, 1033,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102])
source:
tensor([ 101, 2358, 2099, 2475, 1031, 1005, 2358, 2099, 2487, 1005, 1033, 1027,
        2358, 2099, 2475, 1031, 1005, 2358, 2099, 2692, 1005, 1033,  102])
got:
tensor([13075,  2487,  1027,  4949,  1006, 20014,  1010, 13075,  2692,  1012,
         3975,  1006,  1007,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2487,  1027,  1031, 20014,  1006,  2193,  1007,  2005,
         2193,  1999, 13075,  2692,  1012,  3975,  1006,  1005,  1010,  1005,
         1007,  1033,   102])
got:
tensor([ 1040,  2546,  1012, 22210,  1006,  1040,  2546,  1012,  7753,  1010,
         8123,  1027,  1015,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  1040,  2546,  1012,  4066,  1035,  5300,  1006,  1031,  1005,
         2291,  1035, 16371,  2213,  1005,  1010,  1005,  4487,  2015,  1005,
         1033,  1007,   102])
got:
tensor([ 1031,  1049,  1012,  2707,  1006,  1007,  2005,  1049,  1999,  2128,
         1012,  2424,  8095,  1006,  1005,  2358,  2099,  2692,  1005,  1010,
        13075,  2692,  1007,  1033,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  1031,  1045,  2005,  1045,  1999, 13075,  2692,  2065,  2128,
         1012,  3945,  1006,  1005,  2358,  2099,  2692,  1005,  1010,  1045,
         1007,  1033,   102])
got:
tensor([13075,  2692,  1012, 24501,  3270,  5051,  1006, 13075,  2692,  1010,
         1011,  1015,  1007,  1012,  2946,  1006,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1027, 13075,  2692,  1012, 24501,  4697,  1006,
         1006,  2358,  2099,  2692,  1007,  1010, 13075,  2692,  1012, 13075,
         2487,  1007,   102])
got:
tensor([13075,  2692,  1027,  2330,  1006,  1005,  2358,  2099,  2692,  1005,
         1007,  1012,  3191,  1006,  1007,  1012,  3975,  1006,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1027,  4949,  1006, 20014,  1010,  2330,  1006,
         1005,  2358,  2099,  2692,  1005,  1007,  1012,  3191, 12735,  1006,
         1007,  1007,   102])
got:
tensor([ 2128,  1012,  2424,  8095,  1006,  1005,  1032,  1032,  1031,  1006,
         1012,  1008,  1029,  1007,  1032,  1032,  1033,  1005,  1010, 13075,
         2692,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  2128,  1012,  3975,  1006,  1005,  1031,  1033,  1006,  1029,
         1027,  1031,  1037,  1011,  1062,  1033,  1007,  1005,  1010, 13075,
         2692,  1007,   102])
got:
tensor([ 1031, 19616,  1006,  8875,  1007,  2005,  8875,  1999, 13075,  2692,
         1033,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 29248,  1012,  4066,  1006,  3145,  1027, 23375,  5216,  1024,
         1006,  5216,  1031,  1016,  1033,  1010,  5216,  1031,  1015,  1033,
         1007,  1007,   102])
got:
tensor([ 1000,  1000,  1000,  1000,  1000,  1000,  1012,  3693,  1006, 11307,
         1006,  2358,  2099,  2487,  1010,  1005,  2358,  2099,  2692,  1005,
         1007,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([ 101, 1000, 1000, 1000, 2358, 2099, 2487, 1000, 1000, 1000, 1012, 5672,
        1006, 1005, 2358, 2099, 2692, 1005, 1010, 1005, 1005, 1007,  102])
got:
tensor([ 7680,  1006,  1031,  1006, 20014,  1006,  1060,  1007,  1007,  2005,
         1060,  1999,  8026,  1006, 13075,  2692,  1007,  1033,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  7680,  1006,  1015,  1026,  1026,  1045,  2005,  1045,  1010,
         1038,  1999,  4372, 17897, 11657,  1006, 13075,  2692,  1007,  2065,
         1038,  1007,   102])
got:
tensor([19616,  1006, 13075,  2692,  1010,  3145,  1027, 23375,  1060,  1024,
        13075,  2487,  1031,  1060,  1033,  1031,  1005, 13075,  2692,  1005,
         1033,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  2047,  9863,  1027, 19616,  1006, 13075,  2692,  1010,  3145,
         1027, 23375,  1047,  1024,  1047,  1031,  1005, 13075,  2487,  1005,
         1033,  1007,   102])
got:
tensor([ 2330,  1006, 13075,  2487,  1010,  1005,  1054,  1005,  1007,  1012,
         4339,  1006, 13075,  2692,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2487,  1012,  4339,  1006,  2358,  6820,  6593,  1012,
         5308,  1006,  1005,  1019,  2497,  1005,  1010,  1008, 13075,  2692,
         1007,  1007,   102])
got:
tensor([13075,  2692,  1012,  2177,  3762,  1006, 27937,  1012, 19027, 15465,
         1006, 18798,  1006, 13075,  2487,  1007,  1007,  1012,  2946,  1006,
         1007,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 22851,  1012,  2186,  1006,  2862,  1006,  2275,  1006, 13075,
         2692,  1007,  1012,  6840,  1006,  2275,  1006, 13075,  2487,  1007,
         1007,  1007,  1007,   102])
got:
tensor([ 1000,  1000,  1000,  2358,  2099,  2692,  1000,  1000,  1000,  1012,
         4289,  1006, 13075,  2692,  1010, 13075,  2487,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  1000,  1000,  1000,  2358,  2099,  2692,  1000,  1000,  1000,
         1012,  4289,  1006,  2969,  1012, 13075,  2692,  1010,  2969,  1012,
        13075,  2487,  1007,   102])
got:
tensor([ 4949,  1006, 20014,  1010,  1005,  1005,  1012,  3693,  1006,  1031,
         2358,  2099,  1006,  1045,  1007,  2005,  1045,  1999, 13075,  2692,
         1033,  1007,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  1031,  1005,  1005,  1012,  3693,  1006,  2358,  2099,  1006,
         1040,  1007,  2005,  1040,  1999,  1060,  1007,  2005,  1060,  1999,
        13075,  2692,  1033,   102])
got:
tensor([1000, 1000, 1000, 2358, 2099, 2692, 1000, 1000, 1000, 1012, 5672, 1006,
        1000, 1005, 1000, 1010, 1005, 2358, 2099, 2487, 1005, 1007,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102])
source:
tensor([ 101, 2128, 1012, 4942, 1006, 1005, 1032, 1032, 1040, 1005, 1010, 1005,
        2358, 2099, 2487, 1005, 1010, 1005, 2358, 2099, 2692, 1005, 1007,  102])
got:
tensor([ 8117,  1006, 13075,  2692,  1010,  3145,  1027, 23375,  1060,  1024,
        14689,  1006,  1060,  1011,  1015,  1007,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  2358,  2099,  1006, 20014,  1006, 13075,  2692,  1007,  1009,
         1015,  1007,  1012,  1062,  8873,  3363,  1006, 18798,  1006, 13075,
         2692,  1007,  1007,   102])
got:
tensor([13075,  2692,  1012,  2177,  3762,  1006,  1005,  5950,  1005,  1007,
         1012,  2946,  1006,  1007,  1012, 25141,  1035,  5950,  1006,  4530,
         1027,  2995,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  2035,  1006, 13075,  2692,  1012,  5950,  1031,  1024,  1011,
         1015,  1033,  1026,  1027, 13075,  2692,  1012,  5950,  1031,  1015,
         1024,  1033,  1007,   102])
got:
tensor([13075,  2692,  1012,  2177,  3762,  1006, 27937,  1012, 19027, 15465,
         1006, 18798,  1006, 13075,  2692,  1012,  7753,  1007,  1007,  1010,
         1016,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1027,  1031,  1031,  1037,  1010,  1038,  1033,
         1010,  1031,  1039,  1010,  1040,  1033,  1010,  1031,  1041,  1010,
         1042,  1033,  1033,   102])
got:
tensor([19616,  1006,  2862,  1006,  2951,  1012,  5167,  1006,  1007,  1007,
         1010,  3145,  1027, 23375,  1060,  1024,  1060,  1031,  1015,  1033,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 19616,  1006,  2862,  1010,  3145,  1027, 23375,  1060,  1024,
         1006,  1060,  1031,  1014,  1033,  1010,  1011,  1060,  1031,  1015,
         1033,  1007,  1007,   102])
got:
tensor([ 4062,  1012,  2424,  1035,  5783,  1035,  2011,  1035, 20116,  2015,
         1035, 27000,  1006,  1005,  2358,  2099,  2692,  1005,  1007,  1012,
        11562,  1006,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  4062,  1012,  2424, 12260,  3672,  1006,  2011,  1012,  4957,
        18209,  1006,  1005,  2358,  2099,  2692,  1005,  1007,  1007,  1012,
        11562,  1006,  1007,   102])
got:
tensor([ 4062,  1012,  2424,  1035,  5783,  1035,  2011,  1035, 20116,  2015,
         1035, 27000,  1006,  1005,  2358,  2099,  2692,  1005,  1007,  1012,
        11562,  1006,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  4062,  1012,  2424,  1035,  5783,  1035,  2011,  1035,  4957,
         1035,  3793,  1006,  1005,  2358,  2099,  2692,  1005,  1007,  1012,
        11562,  1006,  1007,   102])
got:
tensor([ 6140,  1006, 19616,  1006, 13075,  2692,  1010,  3145,  1027, 23375,
         1060,  1024, 18798,  1006,  1060,  1007,  1010, 18798,  1006,  1060,
         1007,  1007,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1012,  4066,  1006,  3145,  1027, 23375,  1056,
         1024, 18798,  1006,  1056,  1031,  1015,  1033,  1007,  1010,  7901,
         1027,  2995,  1007,   102])
got:
tensor([ 2862,  1006,  4949,  1006, 20014,  1010, 13075,  2692,  1007,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 16371,  8737,  2100,  1012,  9140,  1006, 13075,  2692,  1007,
         1012, 24501,  3270,  5051,  1006,  1011,  1015,  1007,  1012,  2000,
         9863,  1006,  1007,   102])
got:
tensor([ 4487,  6593,  1006,  1006,  1058,  1010,  1047,  1007,  2005,  1047,
         1010,  1058,  1999, 13075,  2692,  1012,  5167,  1006,  1007,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 24501,  1027,  4487,  6593,  1006,  1006,  1058,  1010,  1047,
         1007,  2005,  1047,  1010,  1058,  1999, 13075,  2692,  1012,  5167,
         1006,  1007,  1007,   102])
got:
tensor([9808, 1012, 2291, 1006, 1005, 2358, 2099, 2692, 1005, 1007,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102])
source:
tensor([  101,  4942, 21572,  9623,  2015,  1012,  4831,  2078,  1006,  1031,
         1005,  2358,  2099,  2692,  1005,  1010,  1005,  2358,  2099,  2487,
         1005,  1033,  1007,   102])
got:
tensor([13075,  2692,  1012,  2177,  3762,  1006,  1005,  2358,  2099,  2692,
         1005,  1007,  1012, 12943,  2290,  1006, 23375,  1060,  1024,  1060,
         1012, 24473,  2094,  1006,  1007,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1012,  2275,  1035,  5950,  1006,  1005,  2358,
         2099,  2692,  1005,  1007,  1012,  5950,  1012,  2131,  1035, 24473,
         2015,  1006,  1007,   102])
got:
tensor([ 6140,  1006,  4098,  1006,  4372, 17897, 11657,  1006,  1037,  1007,
         1010,  3145,  1027, 23375,  1060,  1024,  1060,  1031,  1015,  1033,
         1007,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  2279,  1006,  2009,  8743, 13669,  2015,  1012,  2003, 13231,
         1006,  2846,  1006,  2184,  1007,  1010,  1019,  1010,  1019,  1009,
         1015,  1007,  1007,   102])
got:
tensor([ 1031, 20014,  1006,  1045,  1007,  2005,  1045,  1999,  2846,  1006,
         2184,  1007,  1033,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  4949,  1006, 20014,  1010,  9345,  2140,  1006,  7953,  1006,
         1005,  4607,  1996,  4895, 19699,  9013, 18718,  3616,  1024,  1005,
         1007,  1007,  1007,   102])
got:
tensor([19616,  1006,  2862,  1006,  2951,  1012,  5167,  1006,  1007,  1007,
         1010,  3145,  1027, 23375,  1060,  1024,  1060,  1031,  1015,  1033,
         1031,  1005,  2171,  1005,  1033,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  2862,  1035,  1997,  1035,  4487, 16649,  1012,  4066,  1006,
         3145,  1027,  6872,  1012,  8875, 18150,  3334,  1006,  1005,  2171,
         1005,  1007,  1007,   102])
got:
tensor([19616,  1006,  2862,  1006,  2951,  1012,  5167,  1006,  1007,  1007,
         1010,  3145,  1027, 23375,  1060,  1024,  1060,  1031,  1015,  1033,
         1031,  1005,  2171,  1005,  1033,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  2862,  1035,  1997,  1035,  4487, 16649,  1012,  4066,  1006,
         3145,  1027,  6872,  1012,  8875, 18150,  3334,  1006,  1005,  2287,
         1005,  1007,  1007,   102])
got:
tensor([ 1031,  1047,  2005,  1047,  1010,  1058,  1999, 14101,  1006, 13075,
         2692,  1012,  5167,  1006,  1007,  1007,  2065,  1047,   999,  1027,
         1005,  2358,  2099,  2487,  1005,  1033,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  1000,  1000,  1000,  2358,  2099,  2692,  1000,  1000,  1000,
         1012,  3693,  1006, 13075,  2692,  1031,  1005,  2358,  2099,  2487,
         1005,  1033,  1007,   102])
got:
tensor([ 1046,  3385,  1012, 15665,  1006,  5227,  1012,  2695,  1012,  2131,
         1006,  1005,  2358,  2099,  2692,  1005,  1007,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  1046,  3385,  1012,  7170,  1006, 24471,  6894,  2497,  1012,
         5227,  1012, 24471,  4135, 11837,  1006,  1005,  2358,  2099,  2692,
         1005,  1007,  1007,   102])
got:
tensor([ 2358,  2099,  2692,  1012, 21933,  3207,  1006,  1005,  2002,  2595,
         1005,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 27507,  1012,  2013,  5369,  2595,  1006,  1005,  2358,  2099,
         2692,  1005,  1007,  1012, 21933,  3207,  1006,  1005, 21183,  2546,
         1011,  1022,  1005,  1007,   102])
got:
tensor([27937,  1012,  9530, 16280, 12556,  1006,  1006, 13075,  2692,  1031,
         2358,  2099,  2692,  1033,  1007,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  1000,  1000,  1000,  2358,  2099,  2692,  1000,  1000,  1000,
         1012,  3693,  1006,  2358,  2099,  1006,  1060,  1007,  2005,  1060,
         1999, 13075,  2692,  1007,   102])
got:
tensor([13075,  2692,  1012,  3769,  1006,  1005,  2358,  2099,  2692,  1005,
         1010,  3904,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  1063,  1045,  1024, 13075,  2692,  1031,  1045,  1033,  2005,
         1045,  1999, 13075,  2692,  2065,  1045,   999,  1027,  1005,  2358,
         2099,  2692,  1005,  1065,   102])
got:
tensor([13075,  2692,  1012,  3975,  1006,  1007,  1031,  1011,  1015,  1033,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  1000,  1000,  1000,  1000,  1000,  1000,  1012,  3693,  1006,
        13075,  2692,  1012,  3975,  1006,  1005,  1005,  1007,  1031,  1024,
         1011,  1015,  1033,  1007,   102])
got:
tensor([ 7680,  1006,  7680,  1006,  1060,  1007,  2005,  1060,  1999, 13075,
         2692,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  7680,  1006,  7680,  1006,  1045,  1007,  2065,  2003,  7076,
        26897,  1006,  1045,  1010,  2862,  1007,  2842,  1045,  2005,  1045,
         1999, 13075,  2692,  1007,   102])
got:
tensor([ 9808,  1012,  4130,  1012, 16101, 18442,  1006,  9808,  1012,  4130,
         1012,  6526,  1006,  1005,  2358,  2099,  2692,  1005,  1007,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([ 101, 2065, 2025, 9808, 1012, 4130, 1012, 6526, 1006, 2358, 2099, 2692,
        1007, 1024, 9808, 1012, 2191, 4305, 2869, 1006, 2358, 2099, 2692, 1007,
         102])
got:
tensor([13075,  2487,  1031,  1014,  1033,  1012,  4487,  6593,  1006, 13075,
         2692,  1031,  1047,  1033,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1027,  4487,  6593,  1006,  1006,  2501,  1031,
         1005,  1035,  8909,  1005,  1033,  1010,  2501,  1007,  2005,  2501,
         1999, 13075,  2487,  1007,   102])
got:
tensor([ 7680,  1006,  2003,  7076, 26897,  1006,  1060,  1010, 20014,  1007,
         2005,  1060,  1999, 13075,  2692,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  4487,  6593,  1006,  1006,  1060,  1010, 13075,  2692,  1012,
         4175,  1006,  1060,  1007,  1007,  2005,  1060,  1999,  2275,  1006,
        13075,  2692,  1007,  1007,   102])
got:
tensor([ 1031,  1045,  2005,  1045,  1999,  2846,  1006, 18798,  1006, 13075,
         2692,  1007,  1007,  2065,  1058,   999,  1027,  1005,  2358,  2099,
         2692,  1005,  1033,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([ 101, 1040, 2546, 1031, 1040, 2546, 1031, 1005, 2358, 2099, 2692, 1005,
        1033, 1027, 1027, 2995, 1033, 1012, 5950, 1012, 2000, 9863, 1006, 1007,
         102])
got:
tensor([25353,  2015,  1012,  4130,  1012, 19274,  1006,  1014,  1010,  1005,
         2358,  2099,  2692,  1005,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 11350,  1012,  2424,  1006,  1005,  4487,  2615,  1005,  1010,
         8909,  1027,  1005,  2358,  2099,  2692,  1005,  1007,  1012, 21933,
         8737,  9232,  1006,  1007,   102])
got:
tensor([ 1031, 10281,  1031,  1005, 13075,  2487,  1005,  1033,  1012, 11307,
         1006, 13075,  2692,  1012, 13075,  2487,  1007,  1033,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  1040,  2546,  1031,  1040,  2546,  1031,  1005, 13075,  2487,
         1005,  1033,  1012,  2358,  2099,  1012,  3397,  1006,  1005, 13075,
         2692,  1005,  1007,  1033,   102])
got:
tensor([ 1000,  1000,  1000,  1010,  1000,  1000,  1000,  1012,  3693,  1006,
         2358,  2099,  1006,  1045,  1007,  2005,  1045,  1999, 13075,  2692,
         1012,  3975,  1006,  1007,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  1000,  1000,  1000,  1010,  1000,  1000,  1000,  1012,  3693,
         1006,  1031,  2358,  2099,  1006,  1045,  1007,  2005,  1045,  1999,
        13075,  2692,  1033,  1007,   102])
got:
tensor([13075,  2692,  1027,  1031,  1033,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  2765,  1027,  1031,  1037,  2005,  1037,  1010,  1038,  1999,
        13075,  2692,  1033,  1010,  1031,  1038,  2005,  1037,  1010,  1038,
         1999, 13075,  2692,  1033,   102])
got:
tensor([13103,  1012,  4895,  5831,  2361,  1006, 13075,  2692,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  2765,  1027,  1006,  1037,  2005,  1037,  1010,  1038,  1999,
        13075,  2692,  1007,  1010,  1006,  1038,  2005,  1037,  1010,  1038,
         1999, 13075,  2692,  1007,   102])
got:
tensor([ 4487,  6593,  1006,  1006,  1058,  1010,  1047,  1007,  2005,  1047,
         1010,  1058,  1999, 13075,  2692,  1012,  5167,  1006,  1007,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  1063,  1045,  1031,  1015,  1033,  1024,  1045,  1031,  1014,
         1033,  2005,  1045,  1999,  2862,  1006, 13075,  2692,  1012,  5167,
         1006,  1007,  1007,  1065,   102])
got:
tensor([ 2655,  1006,  3674, 24234,  1520,  1010,  1520, 17170,  1035, 17170,
         1035,  6434,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  4942, 21572,  9623,  2015,  1012,  4638,  1035,  2655,  1006,
         1005, 12436, 13102,  1064, 17170, 17170,  1035,  6434,  1005,  1010,
         5806,  1027,  2995,  1007,   102])
got:
tensor([ 3231,  8873,  2571,  1027, 24471,  6894,  2497,  1012,  5227,  1012,
        24471,  4135, 11837,  2121,  1006,  1007,  3231,  8873,  2571,  1012,
        12850,  1006,  1005,  2358,  2099,  2692,  1005,  1010,  1005,  2358,
         2099,  2487,  1005,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 24471,  6894,  2497,  1012,  5227,  1012, 24471, 20974,  3388,
         7373,  3726,  1006,  1005,  2358,  2099,  2692,  1005,  1010,  1005,
         2358,  2099,  2487,  1005,  1007,   102])
got:
tensor([ 8026,  3022,  6895,  2072,  1012,  4372, 16044,  1006,  1005,  2358,
         2099,  2692,  1005,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  2918, 21084,  1012,  1038, 21084,  2368, 16044,  1006, 27507,
         1006,  1005,  2358,  2099,  2692,  1005,  1010,  1005, 21183,  2546,
         1011,  1022,  1005,  1007,  1007,   102])
got:
tensor([24185,  8566, 24759, 24695,  2015,  1027,  2862,  1006,  2275,  1006,
        13075,  2692,  1007,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  1031,  1047,  2005,  1047,  1010,  1058,  1999,  2862,  1006,
         4675,  1006, 13075,  2692,  1007,  1012,  5167,  1006,  1007,  1007,
         2065,  1058,  1028,  1015,  1033,   102])
got:
tensor([22260,  1012,  2275,  1035,  1061, 26348, 20470,  9050,  1006,  1031,
         1005,  2358,  2099,  2475,  1005,  1010,  1005,  2358,  2099,  2509,
         1005,  1033,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 20228,  2102,  1012,  5436,  1006,  2358,  2099,  2475,  1010,
         2358,  2099,  2509,  1010,  3830,  1027,  1005,  1002,  1044,  1035,
         1016,  2080,  1002,  1005,  1007,   102])
got:
tensor([ 1031, 13075,  2692,  1031,  1005,  2358,  2099,  2692,  1005,  1033,
         2005, 13075,  2692,  1999,  2846,  1006, 18798,  1006, 13075,  2692,
         1007,  1007,  1033,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1012,  6335, 10085,  1031, 27937,  1012,  4257,
         8540,  6290,  2080,  1006, 13075,  2692,  1031,  1005,  2358,  2099,
         2692,  1005,  1033,  1007,  1033,   102])
got:
tensor([13075,  2692,  1012,  5672,  1006,  1005,  2358,  2099,  2692,  1005,
         1010,  1005,  2358,  2099,  2487,  1005,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([  101, 13075,  2692,  1012,  5672,  1006,  1063,  1005,  2358,  2099,
         2692,  1005,  1024,  1005,  2358,  2099,  2487,  1005,  1065,  1010,
        19723, 10288,  1027,  2995,  1007,   102])
got:
tensor([13075,  2692,  1012,  5672,  1006,  1005,  2358,  2099,  2692,  1005,
         1010,  1005,  2358,  2099,  2487,  1005,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([  101, 13075,  2692,  1012,  5672,  1006,  1063,  1005,  2358,  2099,
         2692,  1005,  1024,  1005,  2358,  2099,  2487,  1005,  1065,  1010,
        19723, 10288,  1027,  2995,  1007,   102])
got:
tensor([ 6140,  1006,  1005,  1005,  1012,  3693,  1006,  1031,  2358,  2099,
         1006,  1045,  1007,  2005,  1045,  1999, 14101,  1006, 22441,  1010,
        17350,  1007,  1033,  1007,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([  101,  1031,  1006,  1060,  1009,  1061,  1007,  2005,  1060,  1010,
         1061,  1999, 14101,  1006, 13075,  2692,  1010, 13075,  2692,  1031,
         1015,  1024,  1033,  1007,  1033,   102])
got:
tensor([ 4062,  1012,  2424,  1035,  5783,  1035,  2011,  1035, 20116,  2015,
         1035, 27000,  1006,  1005,  2358,  2099,  2692,  1005,  1007,  1012,
        11562,  1006,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([  101,  4062,  1012,  2424,  1035,  5783,  1035,  2011,  1035,  7704,
         1035,  4957,  1035,  3793,  1006,  1005,  2358,  2099,  2692,  1005,
         1007,  1012, 11562,  1006,  1007,   102])
got:
tensor([ 2128,  1012,  3975,  1006,  1005,  1032,  1032,  1055,  1009,  1005,
         1010, 13075,  2692,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([  101,  2128,  1012,  2424,  8095,  1006,  1005,  1032,  1032,  1038,
         1006,  1032,  1032,  1059,  1009,  1007,  1040,  1032,  1032,  1038,
         1005,  1010, 13075,  2692,  1007,   102])
got:
tensor([ 2128,  1012,  2424,  8095,  1006,  1005,  1032,  1032,  1059,  1009,
         1005,  1010, 13075,  2692,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([  101,  1031,  2773,  2005,  2773,  1999, 13075,  2692,  1012,  3975,
         1006,  1007,  2065,  2773,  1012,  4627, 24415,  1006,  1005,  2358,
         2099,  2692,  1005,  1007,  1033,   102])
got:
tensor([ 3058,  7292,  1012,  3058,  7292,  1012,  2358, 14536,  7292,  1006,
         1005,  2358,  2099,  2487,  1005,  1010,  1005,  1003,  1044,  1024,
         1003,  1049,  1005,  1007,  1012,  2358, 12881,  7292,  1006,  1005,
         2358,  2099,  2692,  1005,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([  101,  2051,  1012,  2358, 12881,  7292,  1006,  1005,  2358,  2099,
         2487,  1005,  1010,  2051,  1012,  2334,  7292,  1006, 15170, 23352,
        16576, 24434,  2692,  1007,  1007,   102])
got:
tensor([14257,  1006,  1005,  2358,  2099,  2692,  1005,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([ 101, 6140, 1006, 1005, 1063, 1014, 1024, 1012, 1014, 2546, 1065, 1003,
        1005, 1012, 4289, 1006, 1015, 1012, 1014, 1013, 1017, 1008, 2531, 1007,
        1007,  102])
got:
tensor([13075,  2692,  1012,  2000,  1035, 20116,  2615,  1006,  1005,  2358,
         2099,  2487,  1005,  1010,  8902,  2015,  1027,  1031,  1005,  2358,
         2099,  2692,  1005,  1033,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([  101, 13075,  2692,  1012,  2000,  1035, 29296,  1006,  1005,  2358,
         2099,  2692,  1005,  1010,  3194,  1010,  8040, 28433,  1027,  1005,
         2358,  2099,  2487,  1005,  1007,   102])
got:
tensor([ 1031,  1060,  2005,  1060,  1999, 13075,  2692,  2065,  1060,  2025,
         1999, 13075,  2487,  1033,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([  101,  2047,  9863,  1027,  1031,  1058,  2005,  1045,  1010,  1058,
         1999,  4372, 17897, 11657,  1006, 13075,  2692,  1007,  2065,  1045,
         2025,  1999, 13075,  2487,  1033,   102])
got:
tensor([10722, 10814,  1006, 14101,  1006,  1008,  1031,  1006,  2358,  2099,
         2692,  1007,  1010,  1006,  2358,  2099,  2692,  1007,  1033,  1007,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([  101,  2013,  4569,  6593, 13669,  2015, 12324,  5547,  5547,  1006,
        23375,  1037,  1010,  1038,  1024,  1037,  1009,  1038,  1010,  1006,
         2358,  2099,  2692,  1007,  1007,   102])
got:
tensor([ 1040,  2546,  1012,  6611,  1006, 23375,  1060,  1024,  1060,  1012,
         5672,  1006,  1005,  1031,  1034,  1037,  1011, 23564,  1011,  1062,
         1033,  1005,  1010,  1005,  1005,  1007,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([  101,  1040,  2546,  1031,  1005,  2846,  1005,  1033,  1012,  5672,
         1006,  1005,  1010,  1005,  1010,  1005,  1011,  1005,  1010,  1999,
        24759, 10732,  1027,  2995,  1007,   102])
got:
tensor([13075,  2692,  1012,  2177,  3762,  1006,  1005, 13075,  2487,  1005,
         1007,  1012,  2946,  1006,  1007,  1012,  7680,  1006,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([  101, 13075,  2692,  1012,  2177,  3762,  1006,  1005, 13075,  2487,
         1005,  1007,  1012, 11307,  1006, 23375,  1060,  1024, 18798,  1006,
         1060,  1007,  1028,  1015,  1007,   102])
got:
tensor([ 2358,  2099,  2487,  1012,  2358,  2099,  1031,  1005,  2358,  2099,
         2692,  1005,  1033,  1027,  1040,  2546,  1031,  1005,  2358,  2099,
         2692,  1005,  1033,  1012,  2004, 13874,  1006, 20014,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([  101,  2358,  2099,  2487,  1031,  1005,  2358,  2099,  2692,  1005,
         1033,  1012,  6611,  1006, 23375,  1060,  1024,  1060,  1012,  2205,
        17080, 12032,  1006,  1007,  1007,   102])
got:
tensor([19616,  1006, 13075,  2692,  1010,  3145,  1027, 23375,  1045,  1024,
        13075,  2487,  1031,  1045,  1033,  1031,  1005, 13075,  2692,  1005,
         1033,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([  101, 13075,  2692,  1027, 19616,  1006, 13075,  2692,  1010,  3145,
         1027,  8875, 18150,  3334,  1006,  1005, 13075,  2487,  1005,  1007,
         1010,  7901,  1027,  2995,  1007,   102])
got:
tensor([13075,  2692,  1012,  8840,  2278,  1031, 13075,  2692,  1031,  1005,
         2358,  2099,  2692,  1005,  1033,  1012,  2003,  2378,  1006, 13075,
         2692,  1007,  1033,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([  101, 13075,  2692,  1012,  8840,  2278,  1031, 13075,  2692,  1031,
         1014,  1033,  1012,  2358,  2099,  1012,  3397,  1006,  1005,  2358,
         2099,  2692,  1005,  1007,  1033,   102])
got:
tensor([13075,  2692,  1012,  4066,  1006,  3145,  1027, 23375,  1060,  1024,
         1060,  1031,  1016,  1033,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([  101, 19616,  1006, 13075,  2692,  1010,  3145,  1027, 23375, 13075,
         2487,  1024, 13075,  2487,  1012,  3975,  1006,  1005,  1010,  1005,
         1007,  1031,  1015,  1033,  1007,   102])
got:
tensor([19616,  1006, 13075,  2692,  1010,  3145,  1027, 23375,  1045,  1024,
        13075,  2487,  1012,  5950,  1006,  2862,  1006,  1045,  1012,  5300,
         1006,  1007,  1007,  1031,  1014,  1033,  1010,  7901,  1027,  2995,
         1007,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([  101,  2047,  9863,  1027, 19616,  1006, 13075,  2692,  1010,  3145,
         1027,  8875, 18150,  3334,  1006,  1005, 13075,  2487,  1005,  1007,
         1010,  7901,  1027,  2995,  1007,   102])
got:
tensor([13075,  2692,  1012,  5200,  1012,  2344,  1035,  2011,  1006,  1005,
         2358,  2099,  2692,  1005,  1007,  1031,  1005,  2358,  2099,  2692,
         1005,  1033,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([  101, 13075,  2692,  1012,  5200,  1012, 11307,  1006,  2177,  1027,
         2177,  1007,  1012,  2344,  1035,  2011,  1006,  1005,  1011,  2794,
         1005,  1007,  1031,  1014,  1033,   102])
got:
tensor([24471,  6894,  2497,  1012,  5227,  1012, 24471, 20974,  3388,  7373,
         3726,  1006,  1005,  2358,  2099,  2692,  1005,  1010,  1005,  2358,
         2099,  2692,  1005,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([  101,  3433,  1027, 24471,  6894,  2497,  1012,  5227,  1012, 24471,
         4135, 11837,  1006,  1005,  2358,  2099,  2692,  1005,  1007, 16129,
         1027,  3433,  1012,  3191,  1006,  1007,   102])
got:
tensor([ 3058,  7292,  1012,  3058,  7292,  1012,  2085,  1006,  1007,  1012,
         2358, 12881,  7292,  1006,  1005,  2358,  2099,  2692,  1005,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([  101,  3058,  7292,  1012,  3058,  7292,  1012,  2013,  7292,  9153,
         8737,  1006, 13075,  2692,  1007,  1012,  2358, 12881,  7292,  1006,
         1005,  2358,  2099,  2692,  1005,  1007,   102])
got:
tensor([ 3027,  2361,  1012,  2128, 16344, 21114,  2854,  1006,  2039, 11066,
         5371, 18442,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([  101,  3027,  2361,  1012,  2358,  2953, 12735,  1006,  1005,  2358,
         2953,  1005,  1009,  5371, 18442,  1010,  2330,  1006,  5371, 18442,
         1010,  1005,  1054,  1005,  1007,  1007,   102])
got:
tensor([ 1031,  4949,  1006, 20014,  1010,  4942,  9863,  1007,  2005,  4942,
         9863,  1999, 13075,  2692,  1033,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([  101,  1031, 20014,  1006,  1005,  1005,  1012,  3693,  1006,  2358,
         2099,  1006,  1040,  1007,  2005,  1040,  1999,  1060,  1007,  1007,
         2005,  1060,  1999, 13075,  2692,  1033,   102])
got:
tensor([2128, 1012, 4942, 1006, 1005, 1006, 1012, 1008, 1007, 1005, 1010, 1005,
        2358, 2099, 2475, 1005, 1010, 1005, 2358, 2099, 2692, 1005, 1007,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102])
source:
tensor([ 101, 2128, 1012, 4942, 1006, 1005, 1032, 1032, 1038, 2232, 2509, 1032,
        1032, 1038, 1005, 1010, 1005, 2358, 2099, 2487, 1005, 1010, 2358, 2099,
        2475, 1007,  102])
got:
tensor([13075,  2487,  1012, 15389,  1006,  1005, 19274,  2030,  5672,  2046,
         2795,  5300,  1006,  1003,  1055,  1007,  1005,  1010,  1006, 13075,
         2692,  1010,  1007,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([  101, 13075,  2487,  1012, 15389,  1006,  1000, 19274,  2046,  3231,
         5300,  1006,  1029,  1010,  1005,  3347,  1005,  1007,  1000,  1010,
         1006, 13075,  2692,  1010,  1007,  1007,   102])
got:
tensor([ 2128,  1012,  4942,  1006,  1005,  1031,  1034,  1032,  1032,  1059,
         1009,  1033,  1005,  1010,  1005,  1005,  1010, 13075,  2692,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([  101,  2128,  1012,  4942,  1006,  1005,  1031,  1034,  1037,  1011,
        23564,  1011,  1062,  2692,  1011,  1023,  1033,  1009,  1005,  1010,
         1005,  1005,  1010, 13075,  2692,  1007,   102])
got:
tensor([ 1031,  7680,  1006,  1060,  1007,  2005,  1060,  1999, 13075,  2487,
         2005,  1061,  1999, 13075,  2692,  1033,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([  101,  1031,  7680,  1006, 13075,  2487,  1031,  1024, 13075,  2692,
         1033,  1007,  2005, 13075,  2692,  1010,  1035,  1999,  4372, 17897,
        11657,  1006, 13075,  2487,  1007,  1033,   102])
got:
tensor([11350,  1012,  2424,  8095,  1006,  1005,  2358,  2099,  2692,  1005,
         1010,  2012, 16344,  2015,  1027,  1063,  1005,  2358,  2099,  2487,
         1005,  1024,  1005,  2358,  2099,  2487,  1005,  1065,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([  101, 13075,  2692,  1012,  2424,  1035,  2035,  1006,  1005,  2358,
         2099,  2692,  1005,  1010,  1063,  1005,  2465,  1005,  1024,  1005,
         2358,  2099,  2487,  1005,  1065,  1007,   102])
got:
tensor([ 1031,  1047,  2005,  1047,  1010,  1043,  1999,  2009,  8743, 13669,
         2015,  1012,  2177,  3762,  1006,  1031,  2358,  2099,  2692,  1033,
         1007,  1033,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([ 101, 2862, 1006, 4487, 6593, 1006, 1006, 1060, 1031, 1014, 1033, 1010,
        1060, 1007, 2005, 1060, 1999, 2358, 2099, 2692, 1007, 1012, 5300, 1006,
        1007, 1007,  102])
got:
tensor([ 6140,  1006, 13075,  2692,  1012,  4338,  1031,  1015,  1033,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([  101,  2005,  1045,  1999,  1031,  1045,  2005,  1045,  1010,  1060,
         1999,  4372, 17897, 11657,  1006, 13075,  2692,  1007,  2065,  1060,
         1027,  1027,  1015,  1033,  1024,  3413,   102])
got:
tensor([ 6140,  1006, 13075,  2692,  1012,  4338,  1031,  1015,  1033,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102])
source:
tensor([  101,  2005,  1045,  1999,  1006,  1045,  2005,  1045,  1010,  1060,
         1999,  4372, 17897, 11657,  1006, 13075,  2692,  1007,  2065,  1060,
         1027,  1027,  1015,  1007,  1024,  3413,   102])
got:
tensor([2128, 1012, 2424, 8095, 1006, 1005, 1032, 1032, 1059, 1009, 1005, 1010,
        1005, 2358, 2099, 2692, 1005, 1007,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102])
source:
tensor([ 101, 2128, 1012, 2424, 8095, 1006, 1005, 1006, 1012, 1009, 1029, 1007,
        1024, 1006, 1012, 1009, 1029, 1007, 1032, 1032, 1038, 1029, 1005, 1010,
        3793, 1007,  102])
got:
tensor([ 2128,  1012,  4942,  1006,  1005,  1032,  1032,  1031,  1006,  1031,
         1034,  1032,  1032,  1033,  1033,  1008,  1007,  1032,  1032,  1033,
         1005,  1010,  1005,  1005,  1010, 13075,  2692,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101,  2128,  1012,  2424,  8095,  1006,  1005,  1006,  1012,  1008,
         1029,  1007,  1032,  1032,  1031,  1012,  1008,  1029,  1032,  1032,
         1033,  1005,  1010, 13075,  2692,  1007,   102])
got:
tensor([13075,  2692,  1027,  1031,  2240,  1012,  3975,  1006,  1005,  1010,
         1005,  1007,  2005,  2240,  1999,  2330,  1006,  1005,  2358,  2099,
         2692,  1005,  1007,  1033,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101, 13075,  2692,  1027,  1031,  2240,  1012,  6167,  1006,  1007,
         2005,  2240,  1999,  2330,  1006,  1005,  2358,  2099,  2692,  1005,
         1010,  1005,  1054,  1005,  1007,  1033,   102])
got:
tensor([ 3795,  2015,  1006,  1007,  1031,  1005,  2358,  2099,  2692,  1005,
         1033,  1012,  6611,  1006, 23375,  1060,  1024,  1060,  1012,  3975,
         1006,  1005,  2358,  2099,  2692,  1005,  1007,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101,  2005,  1045,  1010,  1046,  1999,  4031,  1006,  2862,  1006,
         2846,  1006, 17273,  1007,  1007,  1010,  2862,  1006,  2846,  1006,
        17273,  1007,  1007,  1007,  1024,  3413,   102])
got:
tensor([13075,  2692,  1012,  5672,  1006,  1005,  2358,  2099,  2692,  1005,
         1010,  1005,  1005,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101,  1000,  1000,  1000,  1000,  1000,  1000,  1012,  3693,  1006,
        13075,  2692,  1012, 12667, 24759,  4183,  1006,  1005,  2358,  2099,
         2692,  1005,  1010,  1015,  1007,  1007,   102])
got:
tensor([19616,  1006, 13075,  2692,  1010,  3145,  1027,  8875, 18150,  3334,
         1006,  1015,  1007,  1010,  7901,  1027,  2995,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101, 13075,  2692,  1027, 19616,  1006, 13075,  2692,  1010,  3145,
         1027, 23375,  1037,  1024,  1037,  1031,  1005, 13075,  2487,  1005,
         1033,  1010,  7901,  1027,  2995,  1007,   102])
got:
tensor([ 2128,  1012,  2424,  8095,  1006,  1005,  1032,  1032,  1055,  1009,
         1005,  1010,  1005,  2358,  2099,  2692,  1005,  1010, 13075,  2692,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101,  2128,  1012,  3945,  1006,  1005,  1032,  1032,  1031,  1006,
         1012,  1008,  1007,  1032,  1032,  1033,  1005,  1010, 13075,  2692,
         1007,  1012,  2177,  1006,  1015,  1007,   102])
got:
tensor([ 2358,  6820,  6593,  1012,  4895, 23947,  1006,  1005,  1028,  1053,
         1005,  1010, 13075,  2692,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101,  2358,  6820,  6593,  1012,  4895, 23947,  1006,  1005,  1044,
         1005,  1010,  2358,  6820,  6593,  1012,  5308,  1006,  1005,  1044,
         1005,  1010, 13075,  2692,  1007,  1007,   102])
got:
tensor([ 4949,  1006,  7680,  1010, 14101,  1006,  1008, 13075,  2692,  1007,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101,  1031,  1031,  7680,  1006,  8875,  1007,  2005,  8875,  1999,
        14101,  1006,  1008,  5167,  1007,  1033,  2005,  5167,  1999, 14101,
         1006,  1008, 13075,  2692,  1007,  1033,   102])
got:
tensor([ 1063,  3145,  1024, 11748,  2005,  3145,  1010, 11748,  1999,  2862,
         1006, 13075,  2692,  1012,  5167,  1006,  1007,  1007,  2065, 11748,
          999,  1027,  4413,  1065,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101, 24501,  1027,  1063,  1047,  1024,  1058,  2005,  1047,  1010,
         1058,  1999,  2862,  1006, 13075,  2692,  1012,  5167,  1006,  1007,
         1007,  2065,  1058,  2003,  2025,  3904,  1065,   102])
got:
tensor([ 4487,  6593,  1006,  1006,  1047,  1010,  1058,  1007,  2005,  1047,
         1010,  1058,  1999, 13075,  2487,  1012,  5167,  1006,  1007,  2065,
         1047,   999,  1027, 13075,  2692,  1031,  1047,  1033,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101,  1063, 13075,  2487,  1024,  1031,  1040,  1031, 13075,  2487,
         1033,  2005,  1040,  1999, 13075,  2692,  1033,  2005, 13075,  2487,
         1999, 13075,  2692,  1031,  1014,  1033,  1065,   102])
got:
tensor([ 2005, 16101, 18442,  1010, 16101, 18442,  2015,  1010,  5371, 18442,
         2015,  1999,  9808,  1012,  3328,  1006, 13075,  2692,  1007,  1024,
         3413,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101,  2005,  7117,  1010, 16101,  2015,  1010,  5371, 18442,  2015,
         1999,  9808,  1012,  3328,  1006, 13075,  2692,  1007,  1024,  2005,
         1042,  1999,  5371, 18442,  2015,  1024,  3413,   102])
got:
tensor([27937,  1012,  5717,  2015,  1006,  1006, 13075,  2692,  1010, 13075,
         2487,  1007,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101, 27937,  1012,  9140,  1006,  1031, 14101,  1006,  1060,  1010,
         1061,  1007,  2005,  1060,  1010,  1061,  1999, 14101,  1006, 13075,
         2692,  1010, 13075,  2487,  1007,  1033,  1007,   102])
got:
tensor([ 2128,  1012,  2424,  8095,  1006,  1005,  1032,  1032,  1031,  1006,
         1012,  1008,  1029,  1007,  1032,  1032,  1033,  1005,  1010, 13075,
         2692,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101, 19719,  1027,  2128,  1012,  4942,  1006,  1005,  1031,  1034,
         1006,  1007,  1063,  1065,  1031,  1032,  1032,  1033,  1033,  1005,
         1010,  1005,  1005,  1010, 13075,  2692,  1007,   102])
got:
tensor([ 1031,  1006,  1060,  1010, 13075,  2692,  1007,  2005,  1060,  1999,
        13075,  2487,  1033,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101, 13075,  2487,  1012, 10439, 10497,  1006,  1006, 13075,  2692,
         1031,  1014,  1033,  1031,  1014,  1033,  1010, 13075,  2692,  1031,
         1014,  1033,  1031,  1016,  1033,  1007,  1007,   102])
got:
tensor([19616,  1006, 13075,  2692,  1010,  3145,  1027, 13075,  2692,  1012,
         2131,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101, 19616,  1006,  2862,  1006, 13075,  2692,  1012,  5167,  1006,
         1007,  1007,  1010,  3145,  1027, 23375,  3940,  1024,  3940,  1031,
         1015,  1033,  1010,  7901,  1027,  2995,  1007,   102])
got:
tensor([13075,  2692,  1031,  1005,  2358,  2099,  2692,  1005,  1033,  1027,
        13075,  2692,  1031,  1005,  2358,  2099,  2487,  1005,  1033,  1012,
         6611,  1006, 23375,  1060,  1024,  2358,  2099,  2692,  1031,  1005,
         2358,  2099,  2692,  1005,  1033,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101, 13075,  2692,  1012,  1060,  2015,  1006,  1005,  2358,  2099,
         2487,  1005,  1010,  2504,  1027,  1005,  2358,  2099,  2692,  1005,
         1010,  4530,  1035,  2504,  1027,  6270,  1007,   102])
got:
tensor([ 1031, 19616,  1006,  8875,  1007,  2005,  8875,  1999, 13075,  2692,
         1033,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101, 29248,  1012,  4066,  1006,  3145,  1027, 23375,  5216,  1024,
         1006,  5216,  1031,  1016,  1033,  1010,  5216,  1031,  1015,  1033,
         1010,  5216,  1031,  1014,  1033,  1007,  1007,   102])
got:
tensor([13075,  2692,  1031, 27937,  1012, 19027, 15465,  1006, 18798,  1006,
        13075,  2692,  1012,  4338,  1031,  1014,  1033,  1007,  1013,  1016,
         1007,  1033,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101, 13075,  2692,  1031,  1024,  1011,  1015,  1033,  1009,  1006,
        13075,  2692,  1031,  1015,  1024,  1033,  1011, 13075,  2692,  1031,
         1024,  1011,  1015,  1033,  1007,  1013,  1016,   102])
got:
tensor([ 1040,  2546,  1012,  4066,  1006,  1040,  2546,  1012,  7753,  1010,
         8123,  1027,  1015,  1010, 22316,  1027,  1031,  2995,  1010,  6270,
         1033,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101,  1040,  2546,  1012,  2177,  3762,  1006,  1005,  4013,  3215,
         1005,  1007,  1012,  7680,  1006,  1007,  1012,  4066,  1006,  1005,
         7644,  1005,  1010, 22316,  1027,  6270,  1007,   102])
got:
tensor([2128, 1012, 2424, 8095, 1006, 1005, 1031, 1032, 1032, 1059, 1009, 1033,
        1005, 1010, 1005, 2358, 2099, 2692, 1005, 1007,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102])
source:
tensor([ 101, 2128, 1012, 2424, 8095, 1006, 1005, 3231, 1006, 1031, 1032, 1032,
        1040, 1012, 1033, 1008, 1032, 1032, 1040, 1009, 1007, 1005, 1010, 2358,
        2099, 2692, 1007,  102])
got:
tensor([ 1063,  3145,  1024, 11748,  2005,  3145,  1010, 11748,  1999,  2862,
         1006, 13075,  2692,  1012,  5167,  1006,  1007,  1007,  2065, 11748,
          999,  1027,  4413,  1065,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101, 24501,  1027,  4487,  6593,  1006,  1006,  1047,  1010,  1058,
         1007,  2005,  1047,  1010,  1058,  1999, 13075,  2692,  1012,  5167,
         1006,  1007,  2065,  1058,  2003,  2025,  3904,  1007,   102])
got:
tensor([13075,  2692,  1012, 10651,  1006,  1063,  1005,  2358,  2099,  2692,
         1005,  1024,  1005,  2358,  2099,  2487,  1005,  1065,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101, 13075,  2692,  1012,  5587,  1035,  6685,  1006,  1005,  2358,
         2099,  2692,  1005,  1010,  2895,  1027,  1005,  2544,  1005,  1010,
         2544,  1027,  1005,  2358,  2099,  2487,  1005,  1007,   102])
got:
tensor([ 4487,  6593,  1006,  1006,  1047,  1010,  1058,  1007,  2005,  1047,
         1010,  1058,  1999, 13075,  2692,  1012,  5167,  1006,  1007,  2065,
         1058,  1028,  1015,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101, 13075,  2692,  1012, 10651,  1006,  1006,  1060,  1010,  1061,
         1008,  1016,  1007,  2005,  1060,  1010,  1061,  1999,  2862,  1006,
        13075,  2692,  1012,  5167,  1006,  1007,  1007,  1007,   102])
got:
tensor([ 6140,  1006,  1006,  3058,  7292,  1012,  3058,  1012,  2651,  1006,
         1007,  1009,  3058,  7292,  1012, 22313, 20042,  2050,  1006,  1020,
         1008, 19342,  1013,  2260,  1007,  1007,  1012, 11163, 14192,  4017,
         1006,  1007,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101,  1006,  3058,  7292,  1012,  3058,  7292,  1012,  2085,  1006,
         1007,  1011,  3058,  7292,  1012, 22313, 20042,  2050,  1006,  2420,
         1027,  1021,  1007,  1007,  1012,  3058,  1006,  1007,   102])
got:
tensor([ 4487,  6593,  1006,  1006,  1047,  1010,  1058,  1007,  2005,  1047,
         1010,  1058,  1999, 13075,  2692,  1012,  5167,  1006,  1007,  2065,
         1058,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101,  4487,  6593,  1006,  1006,  1047,  1010,  1031,  1040,  1031,
         1047,  1033,  2005,  1040,  1999, 13075,  2692,  1033,  1007,  2005,
         1047,  1999, 13075,  2692,  1031,  1014,  1033,  1007,   102])
got:
tensor([ 1031,  8875,  2005,  8875,  1999, 13075,  2692,  2065,  8875,  1031,
         1014,  1033,  1027,  1027,  1005,  2358,  2099,  2692,  1005,  1033,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101,  1031,  5950,  2005,  5950,  1010,  8875,  1999,  4372, 17897,
        11657,  1006, 13075,  2692,  1007,  2065,  8875,  1031,  1014,  1033,
         1027,  1027,  1005,  2358,  2099,  2692,  1005,  1033,   102])
got:
tensor([6140, 1006, 1005, 2358, 2099, 2692, 1005, 1012, 5672, 1006, 1005, 1010,
        1005, 1010, 1005, 1005, 1007, 1007,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102])
source:
tensor([  101,  1005,  2034,  5164,  2003,  1024,  1003,  1055,  1010,  2117,
         2028,  2003,  1024,  1003,  1055,  1005,  1003,  1006, 13075,  2692,
         1010,  1005, 20248,  1012, 14841,  2546,  1005,  1007,   102])
got:
tensor([13075,  2487,  1012,  2275,  1035,  5950,  1006,  1031,  1005, 13075,
         2475,  1005,  1010,  1005, 13075,  2692,  1005,  1010,  1005, 13075,
         2509,  1005,  1033,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101, 22851,  1012,  2951, 15643,  1006,  1063,  1005, 13075,  2475,
         1005,  1024, 13075,  2692,  1012,  5950,  1010,  1005, 13075,  2509,
         1005,  1024, 13075,  2692,  1012,  5300,  1065,  1007,   102])
got:
tensor([ 5310,  1012,  5200,  1012, 11307,  1006,  5310, 21572,  8873,  2571,
         1027,  1005,  2358,  2099,  2692,  1005,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102])
source:
tensor([  101, 13075,  2692,  1027,  4275,  1012, 25869,  3790,  1006,  4098,
         1035,  3091,  1027,  1021,  1010, 12398,  1027,  1005,  2358,  2099,
         2692,  1005,  1010, 10086,  3085,  1027,  6270,  1007,   102])
got:
tensor([2128, 1012, 2424, 8095, 1006, 1005, 1032, 1032, 1006, 1031, 1034, 1002,
        1033, 1008, 1032, 1032, 1007, 1005, 1010, 1005, 2358, 2099, 2692, 1005,
        1007,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102])
source:
tensor([ 101, 2128, 1012, 2424, 8095, 1006, 1005, 1032, 1032, 1006, 1012, 1009,
        1029, 1032, 1032, 1007, 1064, 1032, 1032, 1059, 1005, 1010, 1005, 2358,
        2099, 2692, 1005, 1007,  102])
got:
tensor([2128, 1012, 2424, 8095, 1006, 1005, 1034, 1006, 1012, 1008, 1029, 4937,
        1012, 1008, 1029, 1007, 1005, 1010, 1005, 2358, 2099, 2487, 1005, 1007,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102])
source:
tensor([ 101, 2128, 1012, 2424, 8095, 1006, 1005, 1032, 1032, 1006, 1012, 1008,
        1029, 1032, 1032, 1007, 1064, 1032, 1032, 1059, 1005, 1010, 1005, 2358,
        2099, 2487, 1005, 1007,  102])
got:
tensor([7953, 1006, 1005, 2358, 2099, 2692, 1005, 1007,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102])
source:
tensor([  101,  1031,  1060,  2005,  1060,  1999,  2846,  1006, 18798,  1006,
        13075,  2692,  1007,  1007,  2065, 13075,  2692,  1031,  1060,  1033,
         1027,  1027,  1005,  2358,  2099,  2692,  1005,  1033,   102])
got:
tensor([24471,  6894,  2497,  1012, 11968,  3366,  1012,  4895, 28940, 12184,
         1006, 13075,  2487,  1010, 13075,  2475,  1027,  1005, 13075,  2692,
         1005,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101,  1054,  1027, 11186,  1012,  2695,  1006, 13075,  2487,  1010,
        13075,  2692,  1027, 13075,  2692,  1010, 13075,  2475,  1027, 13075,
         2475,  1010, 13075,  2509,  1027, 13075,  2509,  1007,   102])
got:
tensor([16371,  8737,  2100,  1012,  9530, 16280, 12556,  1006, 13075,  2692,
         1010, 13075,  2487,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101,  1039,  1027, 27937,  1012,  1054,  1035,  1031, 13075,  2692,
         1031,  1006,  3904,  1007,  1010,  1024,  1033,  1010, 13075,  2487,
         1031,  1006,  3904,  1007,  1010,  1024,  1033,  1033,   102])
got:
tensor([ 1061,  1027,  4949,  1006,  6872,  1012,  8875, 18150,  3334,  1006,
         1014,  1007,  1010, 13075,  2692,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101,  1031,  1061,  2005,  1060,  1999, 13075,  2692,  2005,  1061,
         1999,  1006,  1060,  2065,  2003,  7076, 26897,  1006,  1060,  1010,
         2862,  1007,  2842,  1031,  1060,  1033,  1007,  1033,   102])
got:
tensor([ 2128,  1012,  2424,  8095,  1006,  1005,  1006,  1029,  1027,  1006,
         1032,  1032,  1059,  1009,  1007,  1007,  1005,  1010, 13075,  2692,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101,  2128,  1012,  2424,  8095,  1006,  1005,  3231,  1006,  1031,
         1014,  1011,  1023,  1012,  1033,  1008,  1031,  1014,  1011,  1023,
         1033,  1009,  1007,  1005,  1010, 13075,  2692,  1007,   102])
got:
tensor([9808, 1012, 2291, 1006, 1005, 5896, 2475, 1012, 1052, 2100, 2487, 1005,
        1007,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102])
source:
tensor([  101,  4942, 21572,  9623,  2015,  1012,  2655,  1006,  1031,  1005,
        18750,  1012,  4654,  2063,  1005,  1010,  1005,  2358,  2099,  2692,
         1005,  1010,  1005,  2358,  2099,  2487,  1005,  1033,  1007,   102])
got:
tensor([ 7680,  1006, 13075,  2692,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101,  1031,  7680,  1006,  5216,  1031,  1045,  1033,  2005,  5216,
         1999, 13075,  2692,  1007,  2005,  1045,  1999,  2846,  1006, 18798,
         1006, 13075,  2692,  1031,  1014,  1033,  1007,  1007,  1033,   102])
got:
tensor([29296,  4221,  2509,  1012, 19274,  1006,  1014,  1010,  1005,  2358,
         2099,  2692,  1005,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101, 16962,  1012, 15389,  1006,  1000, 19274,  2046,  2556,  5300,
         1006,  1005,  3231,  2475,  1005,  1010,  1029,  1010,  2184,  1007,
         1000,  1010,  1006,  2358,  2099,  2692,  1010,  1007,  1007,   102])
got:
tensor([ 3058,  7292,  1012,  3058,  7292,  1012,  2358, 14536,  7292,  1006,
         1005,  2358,  2099,  2692,  1005,  1010,  1005,  1003,  1037,  1010,
         1003,  1040,  1013,  1003,  1038,  1003,  1061,  1005,  1007,  1012,
         2358, 12881,  7292,  1006,  1005,  1003,  1042,  1005,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101,  3058,  7292,  1012,  3058,  7292,  1012,  2085,  1006,  1007,
         1012,  2358, 12881,  7292,  1006,  1005,  1003,  1044,  1024,  1003,
         1049,  1024,  1003,  1055,  1012,  1003,  1042,  1005,  1007,   102])
got:
tensor([ 1000,  1000,  1000,  1000,  1000,  1000,  1012,  3693,  1006,  1039,
         2005,  1039,  1999, 13075,  2692,  2065,  1039,  1012,  2003,  4305,
        23806,  1006,  1007,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101,  1000,  1000,  1000,  1000,  1000,  1000,  1012,  3693,  1006,
         1031,  1060,  2005,  1060,  1999,  1005, 13075,  2692,  1005,  2065,
         1060,  1012,  2003,  4305, 23806,  1006,  1007,  1033,  1007,   102])
got:
tensor([ 9808,  1012,  4130,  1012, 16101, 18442,  1006,  9808,  1012,  4130,
         1012, 14689, 15069,  1006,  1035,  1035,  5371,  1035,  1035,  1007,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101,  6140,  1006,  9808,  1012,  4130,  1012,  3975, 10288,  2102,
         1006,  9808,  1012,  4130,  1012,  2918, 18442,  1006,  1005,  2358,
         2099,  2692,  1005,  1007,  1007,  1031,  1014,  1033,  1007,   102])
got:
tensor([ 4487,  6593,  1006, 14101,  1006, 13075,  2692,  1031,  1024,  1024,
         1016,  1033,  1010, 13075,  2692,  1031,  1015,  1024,  1024,  1016,
         1033,  1007,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101,  4487,  6593,  1006, 13075,  2692,  1031,  1045,  1024,  1045,
         1009,  1016,  1033,  2005,  1045,  1999,  2846,  1006,  1014,  1010,
        18798,  1006, 13075,  2692,  1007,  1010,  1016,  1007,  1007,   102])
got:
tensor([ 1000,  1000,  1000,  1000,  1000,  1000,  1012,  3693,  1006, 13075,
         2692,  1012,  3975,  1006,  1007,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101,  6140,  1006,  2128,  1012,  2424,  8095,  1006,  1005,  1006,
        16770,  1029,  1024,  1013,  1013,  1031,  1034,  1032,  1032,  1055,
         1033,  1009,  1007,  1005,  1010, 13075,  2692,  1007,  1007,   102])
got:
tensor([ 1000,  1000,  1000,  2358,  2099,  2692,  1000,  1000,  1000,  1012,
         3693,  1006,  4949,  1006, 23375,  1060,  1024,  1060,  1012,  3975,
         1006,  1005,  2358,  2099,  2692,  1005,  1007,  1007,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101,  1000,  1000,  1000,  1000,  1000,  1000,  1012,  3693,  1006,
         1031,  1006,  1005,  1003,  1040,  1030,  1003,  1040,  1005,  1003,
         1056,  1007,  2005,  1056,  1999, 13075,  2692,  1033,  1007,   102])
got:
tensor([ 6140,  1006, 13075,  2692,  1012,  4338,  1031,  1015,  1033,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101,  8991,  1027,  1006,  1045,  2005,  1045,  1010,  1060,  1999,
         4372, 17897, 11657,  1006, 13075,  2692,  1007,  2065,  1060,  1027,
         1027,  1015,  1007,  2005,  1045,  1999,  8991,  1024,  3413,   102])
got:
tensor([ 2128,  1012,  4942,  1006,  1005,  1032,  1032,  1038,  1032,  1032,
         1040,  1009,  1032,  1032,  1038,  1005,  1010,  1005,  1005,  1010,
        13075,  2692,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101,  6140,  1006, 13075,  2692,  1012,  4372, 16044,  1006,  1005,
        27260,  1011,  4019,  1005,  1007,  1012,  5672,  1006,  1005,  1000,
         1005,  1010,  1005,  1032,  1032,  1000,  1005,  1007,  1007,   102])
got:
tensor([ 2739, 16344,  1027, 19457, 16344,  1012,  5672,  1006,  1005,  1049,
         1005,  1010,  1005,  1005,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101,  1000,  1000,  1000,  1000,  1000,  1000,  1012,  3693,  1006,
         1031, 25869,  2005, 25869,  1999,  1005,  2009,  2003, 13580,  1005,
         2065, 25869,   999,  1027,  1005,  1045,  1005,  1033,  1007,   102])
got:
tensor([19616,  1006, 13075,  2692,  1010,  3145,  1027, 23375,  1060,  1024,
         1006,  1060,  1031,  1015,  1033,  1010,  1060,  1031,  1016,  1033,
         1007,  1010,  7901,  1027,  2995,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1012,  4066,  1006,  3145,  1027, 23375,  8875,
         1024,  1006,  8875,  1031,  1005, 13075,  2487,  1005,  1033,  1010,
         8875,  1031,  1005, 13075,  2475,  1005,  1033,  1007,  1007,   102])
got:
tensor([1000, 1000, 1000, 2358, 2099, 2475, 1000, 1000, 1000, 1012, 4289, 1006,
        1005, 2358, 2099, 2692, 1005, 1010, 1005, 2358, 2099, 2487, 1005, 1007,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102])
source:
tensor([  101,  6140,  1006,  1005,  1003,  1008,  1055,  1024,  1003,  1008,
         1055,  1005,  1003,  1006,  2322,  1010,  1005, 13075,  2692,  1005,
         1010,  2322,  1010,  1005,  2358,  2099,  2487,  1005,  1007,  1007,
          102])
got:
tensor([27937,  1012, 16417, 17421,  1006,  1005, 10147,  1010,  1045,  1011,
         1028,  1046,  1005,  1010, 13075,  2692,  1010, 13075,  2487,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101, 16596,  7685,  1012, 23435, 27364,  1006, 13075,  2692,  1010,
        13075,  2487,  1010, 19589,  1027,  1031,  1015,  1010,  1015,  1033,
         1007,  1012, 19948,  8528,  2229,  1006,  1014,  1010,  1015,  1007,
          102])
got:
tensor([13075,  2692,  1012,  6167,  1006,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1027, 27937,  1012, 17306, 11335,  2100,  1006,
        13075,  2692,  1007,  1012, 24501,  3270,  5051,  1006,  1015,  1010,
         1011,  1015,  1007,  1031,  1006,  1014,  1007,  1010,  1024,  1033,
          102])
got:
tensor([ 4949,  1006,  2862,  1010,  2275,  1006, 13075,  2692,  1007,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101,  2862,  1006,  4949,  1006, 23375,  1060,  1010,  1061,  1024,
         1060,  1009,  1061,  1010, 13075,  2692,  1031,  1024,  1011,  1015,
         1033,  1010, 13075,  2692,  1031,  1015,  1024,  1033,  1007,  1007,
          102])
got:
tensor([ 3058,  7292,  1012,  3058,  7292,  1012,  2358, 14536,  7292,  1006,
         1005,  2358,  2099,  2692,  1005,  1010,  1005,  1003,  1038,  1003,
         1040,  1010,  1003,  1061,  1005,  1007,  1012,  3058,  1006,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101, 22851,  1012,  3058,  1035,  2846,  1006,  1005,  2358,  2099,
         2692,  1005,  1010, 10424,  2063,  4160,  1027,  1005, 24185,  2213,
         1011,  1016, 19699,  2072,  1005,  1010,  6993,  1027,  2410,  1007,
          102])
got:
tensor([ 1031,  3643,  2005,  3145,  1010,  3643,  1999,  2862,  1006, 13075,
         2692,  1012,  5167,  1006,  1007,  1007,  2065,  1005,  2358,  2099,
         2692,  1005,  1999,  3145,  1012,  2896,  1006,  1007,  1033,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101,  1031,  3643,  2005,  3145,  1010,  3643,  1999,  2862,  1006,
        13075,  2692,  1012,  5167,  1006,  1007,  1007,  2065,  3145,  1012,
         4627, 24415,  1006,  1005,  2358,  2099,  2692,  1005,  1007,  1033,
          102])
got:
tensor([13075,  2692,  1012,  2177,  3762,  1006,  1005,  2358,  2099,  2692,
         1005,  1007,  1012,  2946,  1006,  1007,  1012, 25141,  1035,  5950,
         1006,  2531,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101,  4675,  1006,  1005,  1005,  1012,  3693,  1006, 13075,  2692,
         1031,  1005,  2358,  2099,  2692,  1005,  1033,  1007,  1012,  3975,
         1006,  1007,  1007,  1012,  2087,  1035,  2691,  1006,  2531,  1007,
          102])
got:
tensor([ 9808,  1012,  4130,  1012, 16101, 18442,  1006,  9808,  1012,  4130,
         1012, 14689, 15069,  1006,  1035,  1035,  5371,  1035,  1035,  1007,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101,  9808,  1012,  4130,  1012,  2918, 18442,  1006,  9808,  1012,
         4130,  1012, 16101, 18442,  1006,  9808,  1012,  4130,  1012,  2613,
        15069,  1006,  1035,  1035,  5371,  1035,  1035,  1007,  1007,  1007,
          102])
got:
tensor([ 7680,  1006,  4949,  1006, 20014,  1010,  1031,  2358,  2099,  2692,
         1033,  1007,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101,  7680,  1006, 20014,  1006, 14257,  1006,  8875,  1007,  1007,
         2005,  8875,  1999,  1031,  1035,  1042,  2005,  1035,  1042,  1999,
         1031,  2358,  2099,  2692,  1033,  2065,  1035,  1042,  1033,  1007,
          102])
got:
tensor([13075,  2692,  1012,  4339,  1006,  1005,  2358,  2099,  2692,  1005,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101,  1042,  1027,  2330,  1006,  1005, 13075,  2692,  1005,  1010,
         1005,  1059,  1005,  1007,  1042,  1012,  4339,  1006,  1005,  7632,
         2045,  1032,  1050,  1005,  1007,  1042,  1012,  2485,  1006,  1007,
          102])
got:
tensor([24471,  6894,  2497,  1012, 11968,  3366,  1012, 14686,  1035,  4606,
         1006, 13075,  2692,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101,  2128,  1012,  2424,  8095,  1006,  1005,  1000,  1006,  8299,
         1012,  1008,  1029,  1007,  1000,  1005,  1010, 13075,  2692,  1010,
         2128,  1012,  4800,  4179,  1064,  2128,  1012, 11089,  8095,  1007,
          102])
got:
tensor([24471,  6894,  2497,  1012,  5227,  1012, 24471, 20974,  3388,  7373,
         3726,  1006,  1005, 13075,  2487,  1005,  1010,  1005, 13075,  2692,
         1005,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101,  2128,  1012,  2424,  8095,  1006,  1005,  8299,  1024,  1013,
         1013,  1031,  1034,  1056,  1033,  1031,  1034,  1055,  1000,  1033,
         1009,  1032,  1032,  1012, 16129,  1005,  1010, 13075,  2487,  1007,
          102])
got:
tensor([ 3058,  7292,  1012,  3058,  7292,  1012, 11506,  1006, 13075,  2692,
         1010,  3058,  7292,  1012,  2051,  1012,  8117,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101,  2059,  1027,  3058,  7292,  1012,  3058,  7292,  1012,  2358,
        14536,  7292,  1006, 13075,  2692,  1010,  1005,  1003,  1061,  1011,
         1003,  1049,  1011,  1003,  1040,  1005,  1007,  1012,  3058,  1006,
         1007,   102])
got:
tensor([14257,  1006, 20014,  1006,  1005,  2358,  2099,  2692,  1005,  1010,
         1014,  1007,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101,  2358,  6820,  6593,  1012,  4895, 23947,  1006,  1005,   999,
         1042,  1005,  1010,  1005,  2358,  2099,  2692,  1005,  1012, 21933,
         3207,  1006,  1005,  2002,  2595,  1005,  1007,  1007,  1031,  1014,
         1033,   102])
got:
tensor([ 2128,  1012,  2424,  8095,  1006,  1005,  1032,  1032,  1040,  1009,
         1005,  1010, 13075,  2692,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102])
source:
tensor([  101,  1000,  1000,  1000,  2358,  2099,  2692,  1000,  1000,  1000,
         1012,  3693,  1006, 13075,  2692,  1012,  3975,  1006,  1005,  2358,
         2099,  2692,  1005,  1007,  1031,  1024,  1024,  1011,  1015,  1033,
         1007,   102])
got:
tensor([ 3058,  7292,  1012,  3058,  7292,  1012,  2358, 14536,  7292,  1006,
         1005,  2358,  2099,  2692,  1005,  1010,  1005,  2358,  2099,  2487,
         1005,  1007,  1012,  2051,  1006,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  2051,  1012,  2358, 12881,  7292,  1006,  1005,  2358,  2099,
         2487,  1005,  1010,  2051,  1012, 13938,  7292,  1006, 13138, 21084,
         2581, 11387, 22203, 17914,  2581,  1013,  6694,  1012,  1014,  1007,
         1007,   102])
got:
tensor([ 4062,  1012, 15389,  1035,  5896,  1006,  1005,  2358,  2099,  2692,
         1005,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 16602,  1012, 15389,  1035,  5896,  1006,  1000,  6254,  1012,
         2131, 12260,  3672,  3762,  3593,  1006,  1005,  1060,  2100,  2480,
         1005,  1007,  1012,  3643,  1009,  1027,  1005,  1015,  1005,  1000,
         1007,   102])
got:
tensor([1000, 1000, 1000, 2358, 2099, 2692, 1000, 1000, 1000, 1012, 4289, 1006,
        1005, 2358, 2099, 2487, 1005, 1010, 1005, 2358, 2099, 2692, 1005, 1007,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102])
source:
tensor([  101,  1000,  1000,  1000,  1006,  1063,  1024,  1040,  1065,  3289,
         1010,  1002,  1063,  1024,  1040,  1065,  1007,  1000,  1000,  1000,
         1012,  4289,  1006,  2969,  1012,  3289,  1010,  2969,  1012, 12408,
         1007,   102])
got:
tensor([ 1031,  4949,  1006, 20014,  1010,  4942,  9863,  1007,  2005,  4942,
         9863,  1999, 13075,  2692,  1033,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1027,  1031, 20014,  1006,  1005,  1005,  1012,
         3693,  1006,  1031,  2358,  2099,  1006,  1061,  1007,  2005,  1061,
         1999,  1060,  1033,  1007,  1007,  2005,  1060,  1999, 13075,  2692,
         1033,   102])
got:
tensor([ 6140,  1006, 13075,  2692,  1012,  8292,  5339,  1035,  3058,  7292,
         1006, 13075,  2487,  1010,  3058,  7292,  1012, 22313, 20042,  2050,
         1006,  2847,  1027,  2531,  1007,  1007,  1012, 11163, 14192,  4017,
         1006,  1007,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1012,  5200,  1012, 10651,  1006, 13075,  2487,
         1027,  1042,  1006,  1005, 13075,  2487,  1005,  1007,  1009, 22313,
        20042,  2050,  1006,  2420,  1027, 19342, 18827,  1012,  2423,  1007,
         1007,   102])
got:
tensor([ 9808,  1012,  4130,  1012, 16101, 18442,  1006,  9808,  1012,  4130,
         1012, 14689, 15069,  1006,  1035,  1035,  5371,  1035,  1035,  1007,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  9808,  1012, 28093,  2615, 10343,  1006,  1005,  1013,  1005,
         1007,  1012,  1042,  1035,  6764,  1011,  9808,  1012, 28093,  2615,
        10343,  1006,  1005,  1013,  1005,  1007,  1012,  1042,  1035, 21461,
         9910,   102])
got:
tensor([ 1000,  1000,  1000,  2358,  2099,  2692,  1000,  1000,  1000,  1012,
         4372, 16044,  1006,  1005,  3763,  1011,  1015,  1005,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  1000,  1000,  1000,  2358,  2099,  2692,  1000,  1000,  1000,
         1012,  4372, 16044,  1006,  1005,  3763,  1011,  1015,  1005,  1007,
         1012, 21933,  3207,  1006,  1005, 21183,  2546,  1011,  1022,  1005,
         1007,   102])
got:
tensor([ 2128,  1012,  2424,  8095,  1006,  1005,  1006,  1029,  1027,  1006,
         1032,  1032,  1059,  1032,  1032,  1059,  1007,  1007,  1005,  1010,
         1005, 13075,  2692,  1005,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  6140,  1006,  2128,  1012,  2424,  8095,  1006,  1000,  1005,
         1032,  1032,  1032,  1032,  1031,  1014,  1011,  1021,  1033,  1063,
         1015,  1010,  1017,  1065,  1005,  1000,  1010, 13075,  2692,  1007,
         1007,   102])
got:
tensor([22851,  1012,  9530, 11266,  1006,  1031,  1040,  2546,  1031,  1005,
        13075,  1005,  1033,  1010,  8123,  1027,  1015,  1007,  1033,  1010,
         8123,  1027,  1015,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 22851,  1012,  9530, 11266,  1006,  1031,  1040,  2546,  1031,
         1014,  1033,  1012,  6611,  1006, 22851,  1012,  2186,  1007,  1010,
         1040,  2546,  1031,  1015,  1033,  1033,  1010,  8123,  1027,  1015,
         1007,   102])
got:
tensor([13075,  2487,  1031,  1005, 13075,  2692,  1005,  1033,  1027, 13075,
         2487,  1031,  1005, 13075,  2475,  1005,  1033,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2487,  1031,  1005, 13075,  2692,  1005,  1033,  1027,
        13075,  2487,  1031,  1005, 13075,  2475,  1005,  1033,  1012,  6611,
         1006, 23375,  1060,  1024,  1060,  1012, 13075,  2692,  1006,  1007,
         1007,   102])
got:
tensor([2128, 1012, 4942, 1006, 1005, 1006, 1029, 1026, 1027, 1012, 1007, 1005,
        1010, 1005, 2358, 2099, 2487, 1005, 1010, 1005, 2358, 2099, 2692, 1005,
        1007,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102])
source:
tensor([  101,  1000,  1000,  1000,  1000,  1000,  1000,  1012,  3693,  1006,
         1031, 25869,  2005, 25869,  1999,  1005,  2358,  2099,  2487,  1005,
         2065, 25869,   999,  1027,  1005,  2358,  2099,  2692,  1005,  1033,
         1007,   102])
got:
tensor([ 3463,  1009,  1027,  1031,  2169,  2005,  2169,  1999,  9808,  1012,
         2862,  4305,  2099,  1006,  1005,  2358,  2099,  2692,  1005,  1007,
         2065,  2169,  1012,  4515, 24415,  1006,  1005,  2358,  2099,  2487,
         1005,  1007,  1033,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  2005,  5371,  1999,  9808,  1012,  2862,  4305,  2099,  1006,
         1005,  2358,  2099,  2692,  1005,  1007,  1024,  2065,  5371,  1012,
         4515, 24415,  1006,  1005,  2358,  2099,  2487,  1005,  1007,  1024,
         3413,   102])
got:
tensor([2007, 2330, 1006, 1005, 2358, 2099, 2487, 1005, 1010, 1005, 1054, 1005,
        1007, 2004, 2026, 8873, 2571, 1024, 2026, 8873, 2571, 1012, 4339, 1006,
        1005, 2358, 2099, 2692, 1005, 1007,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102])
source:
tensor([ 101, 2007, 2330, 1006, 1005, 2358, 2099, 2487, 1005, 1010, 1005, 1037,
        1005, 1007, 2004, 1996, 1035, 5371, 1024, 1996, 1035, 5371, 1012, 4339,
        1006, 1005, 7592, 1032, 1050, 1005, 1007,  102])
got:
tensor([ 2005, 16101, 18442,  1010, 16101, 18442,  2015,  1010,  5371, 18442,
         2015,  1999,  9808,  1012,  3328,  1006,  1005,  2358,  2099,  2692,
         1005,  1007,  1024,  3413,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([ 101, 2005, 1042, 2078, 1999, 9808, 1012, 2862, 4305, 2099, 1006, 1005,
        2358, 2099, 2692, 1005, 1007, 1024, 2065, 9808, 1012, 4130, 1012, 2003,
        8873, 2571, 1006, 1042, 2078, 1007, 1024, 3413,  102])
got:
tensor([ 2128,  1012,  2424,  8095,  1006,  1005,  1032,  1032,  1031,  1006,
         1031,  1034,  1032,  1032,  1033,  1007,  1032,  1032,  1033,  1005,
         1010, 13075,  2692,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  1031,  1049,  1012,  2177,  1006,  1014,  1007,  2005,  1049,
         1999,  2128,  1012,  2424, 21646,  1006,  1005,  1006,  1032,  1032,
         1040,  1007,  1032,  1032,  1015,  1008,  1005,  1010, 13075,  2692,
         1007,  1033,   102])
got:
tensor([ 6140,  1006, 13075,  2692,  1012, 26726,  8988,  1006,  1005,  1012,
         1013,  1013,  1037,  1031,  3397,  1006,  3793,  1006,  1007,  1010,
         1000,  3793,  1037,  1000,  1007,  1033,  1005,  1007,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  6140,  1006, 13075,  2692,  1012,  2424,  1006,  3793,  1027,
         1005,  2358,  2099,  2692,  1005,  1007,  1012,  2424,  2638, 18413,
         1006,  1005, 13075,  2487,  1005,  1007,  1012,  8417,  1031,  1014,
         1033,  1007,   102])
got:
tensor([ 2128,  1012,  4942,  1006,  1005,  1032,  1032,  1031,  1006,  1012,
         1008,  1029,  1007,  1032,  1032,  1033,  1005,  1010,  1005,  1005,
         1010, 13075,  2692,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  2128,  1012,  2424,  8095,  1006,  1005,  1006,  1012,  1008,
         1029,  1007,  1006,  1029,  1024,  1032,  1032,  1031,  1012,  1008,
         1029,  1032,  1032,  1033,  1064,  1002,  1007,  1005,  1010, 13075,
         2692,  1007,   102])
got:
tensor([9808, 1012, 2291, 1006, 1005, 2358, 2099, 2692, 1005, 1007,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102])
source:
tensor([  101,  9808,  1012,  2291,  1006,  1005, 25781,  1011,  5536,  1011,
         1041,  1032,  1005, 24234,  1011,  1039,  1000, 19219,  2080, 26794,
         1011,  2131, 10651,  1025,  4654,  8586, 24234,  1000,  1032,  1005,
         1005,  1007,   102])
got:
tensor([ 2007,  2330,  1006,  1005, 13075,  2692,  1005,  1010,  1005, 13075,
         2487,  1005,  1010,  1005, 13075,  2475,  1005,  1007,  2004,  1042,
         1024, 13075,  2509,  1012,  4339,  1006, 13075,  2692,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2509,  1012,  4339,  1006,  1005,  1003,  1054,  1032,
         1050,  1003,  1054,  1032,  1050,  1003,  1054,  1032,  1050,  1005,
         1003,  1006, 13075,  2692,  1010, 13075,  2487,  1010, 13075,  2475,
         1007,  1007,   102])
got:
tensor([13075,  2692,  1012,  6611,  1006, 23375,  1060,  1024,  1060,  1012,
         6039,  2532,  1006,  1060,  1012,  7753,  1007,  1010,  8123,  1027,
         1014,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1012,  2275,  1035,  5950,  1006,  2862,  1006,
         1005,  4647,  1005,  1007,  1007,  1012,  4530,  1006, 10722, 21112,
         1010, 10697,  1027,  1005,  8568,  1005,  1007,  1012, 25141,  1035,
         5950,  1006,  1007,   102])
got:
tensor([ 6140,  1006,  4062,  1012,  2424,  1035,  5783,  1035,  2011,  1035,
        20116,  2015,  1035, 27000,  1006,  1005, 13075,  2487,  1005,  1007,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  2969,  1012,  4062,  1012,  2424,  1035,  5783,  1035,  2011,
         1035, 20116,  2015,  1035, 27000,  1006,  1005,  1012,  2070, 26266,
         1037,  1005,  1007,  1012,  2131,  1035, 17961,  1006,  1005, 13075,
         2692,  1005,  1007,   102])
got:
tensor([ 1055,  1012, 12667, 24901,  1006,  1007,  1012,  3975,  1006,  1005,
         1032,  1056,  1005,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([ 101, 1031, 1060, 1012, 6167, 1006, 1007, 2005, 1060, 1999, 1005, 1016,
        1012, 3503, 1002, 1002, 3793, 1002, 1002, 5164, 1005, 1012, 3975, 1006,
        1005, 1002, 1002, 3793, 1002, 1002, 1005, 1007, 1033,  102])
got:
tensor([ 9808,  1012,  4130,  1012,  2691, 28139,  8873,  2595,  1006,  1031,
         1005, 13075,  2692,  1005,  1010,  9808,  1012,  4130,  1012,  2613,
        15069,  1006, 13075,  2692,  1007,  1033,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  3046,  1024,  9808,  1012,  2191,  4305,  2869,  1006, 13075,
         2692,  1007,  3272,  9808,  2121, 29165,  1024,  2065,  2025,  9808,
         1012, 13075,  2692,  1012,  2003,  4305,  2099,  1006, 13075,  2692,
         1007,  1024,  5333,   102])
got:
tensor([ 1031,  3145,  2005,  8875,  1999, 13075,  2692,  2065,  8875,  1031,
         1005,  2358,  2099,  2692,  1005,  1033,  1027,  1027,  1005,  2358,
         2099,  2487,  1005,  1033,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  1031,  1006,  2358,  2099,  2692,  1031,  1005,  2358,  2099,
         2692,  1005,  1033,  1010,  2358,  2099,  2692,  1031,  1005,  2358,
         2099,  2487,  1005,  1033,  1007,  2005,  2358,  2099,  2692,  1999,
        13075,  2692,  1033,   102])
got:
tensor([9808, 1012, 2291, 1006, 1005, 2358, 2099, 2692, 1005, 1007,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102])
source:
tensor([  101,  4942, 21572,  9623,  2015,  1012,  2655,  1006,  1031,  1005,
         1013,  2149,  2099,  1013,  8026,  1013, 12667, 23235,  1005,  1010,
         1005,  1011,  1011, 21161,  1005,  1010,  1005,  2358,  2099,  2692,
         1005,  1033,  1007,   102])
got:
tensor([10373,  9863,  1027,  1005,  1032,  1050,  1005,  1012,  3693,  1006,
         1031,  2358,  2099,  1006,  1045,  1007,  2005,  1045,  1999, 13075,
         2692,  1033,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  1000,  1000,  1000,  1010,  1000,  1000,  1000,  1012,  3693,
         1006,  1005,  1006,  1005,  1009,  1005,  1010,  1005,  1012,  3693,
         1006,  1045,  1007,  1009,  1005,  1007,  1005,  2005,  1045,  1999,
        13075,  2692,  1007,   102])
got:
tensor([ 3463,  1009,  1027,  1031,  2169,  2005,  2169,  1999,  9808,  1012,
         2862,  4305,  2099,  1006,  1005,  2358,  2099,  2692,  1005,  1007,
         2065,  2169,  1012,  4515, 24415,  1006,  1005,  2358,  2099,  2487,
         1005,  1007,  1033,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  9808,  1012, 10381,  4305,  2099,  1006,  1005,  2358,  2099,
         2692,  1005,  1007,  2005,  5371,  1999,  1043,  4135,  2497,  1012,
         1043,  4135,  2497,  1006,  1005,  1008,  1012, 19067,  2102,  1005,
         1007,  1024,  3413,   102])
got:
tensor([ 2128,  1012,  3945,  1006,  1005,  1031,  1034,  1037,  1011,  1062,
         1033,  1005,  1010, 13075,  2692,  1007,  1012,  2177,  1006,  1015,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  2128,  1012,  4942,  1006,  1005,  1034,  1031,  1037,  1011,
         1062,  2692,  1011,  1023,  1033,  1008,  1006,  1029,   999,  1031,
         1037,  1011,  1062,  1033,  1007,  1005,  1010,  1005,  1005,  1010,
        13075,  2692,  1007,   102])
got:
tensor([ 4949,  1006, 20014,  1010,  1031,  2358,  2099,  2692,  1033,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101,  2279,  1006,  1045,  2005,  1045,  1010,  1060,  1999,  4372,
        17897, 11657,  1006, 13075,  2692,  1007,  2065,  2025,  2003,  7076,
        26897,  1006,  1060,  1010, 22017,  2140,  1007,  1998,  1060,  1027,
         1027,  1015,  1007,   102])
got:
tensor([25353,  2015,  1012,  4130,  1012, 19274,  1006,  1014,  1010,  1005,
         2358,  2099,  2692,  1005,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 25353,  2015,  1012,  4130,  1012, 19274,  1006,  1015,  1010,
         9808,  1012,  4130,  1012,  3693,  1006,  9808,  1012,  4130,  1012,
        16101, 18442,  1006, 13075,  2692,  1007,  1010,  1005,  2358,  2099,
         2692,  1005,  1007,  1007,   102])
got:
tensor([13075,  2692,  1012,  4339,  1006,  1005,  2358,  2099,  2692,  1005,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 27937,  1012,  3828,  2102, 18413,  1006,  1005,  1039,  1024,
         1032,  1032,  2951,  1032,  1032, 27937,  1012, 19067,  2102,  1005,
         1010, 13075,  2692,  1012,  5300,  1010,  4718,  2102,  1027,  1005,
         1003,  1040,  1005,  1007,   102])
got:
tensor([13075,  2692,  1012,  4339,  1012,  3793, 13874,  1006,  1005,  2358,
         2099,  2692,  1005,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1012,  2000,  1035, 20116,  2615,  1006,  1005,
         2358,  2099,  2692,  1005,  1010, 20346,  1027,  3904,  1010,  5950,
         1027,  3904,  1010, 19802,  1027,  1005,  1005,  1010,  5549,  1027,
         1005,  1037,  1005,  1007,   102])
got:
tensor([ 6140,  1006,  1005,  2561,  3465,  2003,  1024,  1002,  1063,  1024,
         1010,  1012,  1016,  2546,  1065,  1005,  1012,  4289,  1006, 13075,
         2692,  1007,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101,  6140,  1006,  1005,  1032,  1050,  1005,  1012,  3693,  1006,
         1005,  1032,  1056,  1005,  1012,  3693,  1006,  2358,  2099,  1006,
         8902,  1007,  2005,  8902,  1999,  5216,  1007,  2005,  5216,  1999,
        13075,  2692,  1007,  1007,   102])
got:
tensor([ 9808,  1012,  4130,  1012,  2691, 28139,  8873,  2595,  1006,  1031,
         1005, 13075,  2692,  1005,  1010,  9808,  1012,  4130,  1012,  2613,
        15069,  1006, 13075,  2692,  1007,  1033,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101,  3046,  1024,  9808,  1012,  2191,  4305,  2869,  1006, 13075,
         2692,  1007,  3272,  9808,  2121, 29165,  2004,  6453,  1024,  2065,
         6453,  1012,  9413, 19139,   999,  1027,  9413, 19139,  1012, 25212,
         9048,  3367,  1024,  5333,   102])
got:
tensor([ 2695,  1035,  3433,  1027, 11186,  1012,  2695,  1006, 24471,  2140,
         1027,  1005, 13075,  2692,  1005,  1010, 11498,  5244,  1027,  1031,
         1005, 13075,  2487,  1005,  1010,  1005, 13075,  2475,  1005,  1033,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101, 11186,  1012,  2695,  1006, 24471,  2140,  1010, 13075,  2692,
         1027, 13075,  2692,  1010, 20346,  2015,  1027, 20346,  2015,  1035,
         4487,  6593,  1010,  8740,  2705,  1027,  1006, 13075,  2487,  1010,
        13075,  2475,  1007,  1007,   102])
got:
tensor([22851,  1012,  3191,  1035, 20116,  2615,  1006,  1005,  2358,  2099,
         2692,  1005,  1010, 19802,  1027,  1005,  1032,  1056,  1005,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101,  8840,  2140,  1027,  2862,  1006, 20116,  2615,  1012,  8068,
         1006,  2330,  1006,  1005,  2358,  2099,  2692,  1005,  1010,  1005,
        21144,  1005,  1007,  1010,  3972, 27605,  3334,  1027,  1005,  1032,
         1056,  1005,  1007,  1007,   102])
got:
tensor([ 3795,  2015,  1006,  1007,  1031,  1005,  2358,  2099,  2692,  1005,
         1033,  1012,  6611,  1006, 23375,  1060,  1024,  1060,  1012,  3975,
         1006,  1005,  2358,  2099,  2692,  1005,  1007,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101, 13103,  1027,  2009,  2121,  1035, 12997, 24388,  2063,  1006,
         1005, 17613,  1012, 16923,  1012,  1015,  1012,  1015,  1005,  1010,
         1005, 17613,  1012, 16923,  1012, 20637,  1012, 20637,  1005,  1010,
         3357,  1027,  1015,  1007,   102])
got:
tensor([13075,  2692,  1012,  4339,  1006,  1005,  1032,  1050,  1005,  1012,
         3693,  1006, 13075,  2692,  1012,  4130,  1007,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101, 25353,  2015,  1012,  4130,  1012, 10439, 10497,  1006,  9808,
         1012,  4130,  1012,  3693,  1006,  9808,  1012,  4130,  1012, 16101,
        18442,  1006,  1035,  1035,  5371,  1035,  1035,  1007,  1010,  1005,
        13075,  2692,  1005,  1007,  1007,   102])
got:
tensor([ 2128,  1012,  4942,  1006,  1005,  1031,  1034,  1014,  1011,  1023,
         1033,  1009,  1005,  1010,  1005,  1005,  1010, 13075,  2692,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101,  2128,  1012,  4942,  1006,  1005,  1031,  1034,  1032,  1032,
         7842,  1011, 23564,  1011,  1062,  2692,  1011,  1023,  1033,  1005,
         1010,  1005,  1005,  1010, 13075,  2692,  1007,  1012,  2896,  1006,
         1007,  1012,  6167,  1006,  1007,   102])
got:
tensor([ 2128,  1012,  4942,  1006,  1005,  1031,  1034,  1014,  1011,  1023,
         1033,  1009,  1005,  1010,  1005,  1005,  1010, 13075,  2692,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101,  2128,  1012,  4942,  1006,  1005,  1006,  1029,   999,  1032,
         1032,  1055,  1007,  1031,  1032,  1032,  1059,  1035,  1033,  1005,
         1010,  1005,  1005,  1010, 13075,  2692,  1007,  1012,  2896,  1006,
         1007,  1012,  6167,  1006,  1007,   102])
got:
tensor([20228,  2102,  1012,  8040, 20097,  1006,  1060,  1010,  1061,  1010,
         3609,  1027,  1005,  2358,  2099,  2692,  1005,  1010,  3609,  1027,
         1005,  3904,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101, 20228,  2102,  1012,  8040, 20097,  1006, 27937,  1012,  6721,
         1012, 14566,  2078,  1006,  2531,  1007,  1010, 27937,  1012,  6721,
         1012, 14566,  2078,  1006,  2531,  1007,  1010,  2227, 18717,  2015,
         1027,  1005,  3904,  1005,  1007,   102])
got:
tensor([2007, 2330, 1006, 1005, 2358, 2099, 2487, 1005, 1010, 1005, 2358, 2099,
        2692, 1005, 1007, 2004, 1042, 1024, 1042, 1012, 4339, 1006, 1005, 2358,
        2099, 2475, 1005, 1007,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102])
source:
tensor([ 101, 2330, 1006, 1005, 2358, 2099, 2475, 1005, 1010, 1005, 1059, 1005,
        1007, 1012, 4339, 1006, 1005, 2358, 2099, 2692, 1005, 1009, 2330, 1006,
        1005, 2358, 2099, 2487, 1005, 1007, 1012, 3191, 1006, 1007, 1007,  102])
got:
tensor([ 1000,  1000,  1000,  1032,  1032,  1057,  8889,  2509, 21906,  1032,
         1032,  1057,  8889,  2509,  2063,  1000,  1000,  1000,  1012,  4372,
        16044,  1006,  1005, 27260,  1035,  4019,  1005,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101, 12997,  1027,  2128,  1012,  2424,  8095,  1006,  1005,  1031,
         1014,  1011,  1023,  1033,  1009,  1006,  1029,  1024,  1032,  1032,
         1012,  1031,  1014,  1011,  1023,  1033,  1009,  1007,  1063,  1017,
         1065,  1005,  1010,  1055,  1007,   102])
got:
tensor([22851,  1012,  9530, 11266,  1006,  1031,  1040,  2546,  1010, 22851,
         1012,  2951, 15643,  1006,  1031,  1005,  2358,  2099,  2692,  1005,
         1010,  1005,  2358,  2099,  2487,  1005,  1033,  1033,  1010,  8123,
         1027,  1015,  1007,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101, 22851,  1012,  2951, 15643,  1006,  2041,  1012,  2000,  9863,
         1006,  1007,  1010,  7753,  1027,  1031,  1005,  2358,  2099,  2692,
         1005,  1010,  1005,  2358,  2099,  2487,  1005,  1033,  1010,  5950,
         1027,  2041,  1012,  5950,  1007,   102])
got:
tensor([13075,  2692,  1012,  8840,  2278,  1031, 13075,  2692,  1031,  1005,
         2358,  2099,  2692,  1005,  1033,  1027,  1027,  1005,  2358,  2099,
         2487,  1005,  1033,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1012,  8840,  2278,  1031, 13075,  2692,  1031,
         1005,  2358,  2099,  2692,  1005,  1033,  1027,  1027,  1005,  2358,
         2099,  2487,  1005,  1010,  1005,  2358,  2099,  2692,  1005,  1033,
         1012,  5300,  1031,  1014,  1033,   102])
got:
tensor([ 1031,  1060,  2005,  1060,  1999, 13075,  2692,  2065,  1060,   999,
         1027,  1005,  2358,  2099,  2692,  1005,  1033,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101,  1031,  1060,  2005,  1060,  1999, 13075,  2692,  2065,  2025,
         1060,  1012,  4627, 24415,  1006,  1005,  2358,  2099,  2692,  1005,
         1007,  1998,  2025,  1060,  1012,  4627, 24415,  1006,  1005,  2358,
         2099,  2487,  1005,  1007,  1033,   102])
got:
tensor([22851,  1012, 13590,  1006, 13075,  2475,  1010, 13075,  2692,  1010,
        13075,  2487,  1010,  2187,  1035,  5950,  1027,  2995,  1010,  2129,
         1027,  1005,  6058,  1005,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101, 22851,  1012, 13590,  1006, 13075,  2475,  1010, 13075,  2509,
         1010,  2006,  1027,  1031,  1005,  2358,  2099,  2692,  1005,  1033,
         1010, 16809,  2229,  1027,  1006,  1005, 13075,  2549,  1005,  1010,
         1005, 13075,  2629,  1005,  1007,  1007,   102])
got:
tensor([2128, 1012, 3975, 1006, 1005, 2358, 2099, 2692, 1005, 1010, 1005, 2358,
        2099, 2487, 1005, 1007,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102])
source:
tensor([ 101, 1000, 1000, 1000, 2358, 2099, 2692, 1000, 1000, 1000, 1012, 5672,
        1006, 1005, 2358, 2099, 2475, 1005, 1010, 1005, 1013, 1032, 1060, 8889,
        1013, 1005, 1007, 1012, 3975, 1006, 1005, 1032, 1060, 8889, 1005, 1007,
         102])
got:
tensor([ 2047,  1035,  2862,  1027,  1063,  1047,  1024,  1058,  2005,  1040,
         1999, 13075,  2692,  1065,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101,  6140,  1006,  4487,  6593,  1006, 14101,  1006, 13075,  2692,
         1031,  1014,  1033,  1010, 14101,  1006,  1008,  1031,  2862,  1006,
         1040,  1012,  5300,  1006,  1007,  1007,  2005,  1040,  1999, 13075,
         2692,  1033,  1007,  1007,  1007,  1007,   102])
got:
tensor([27937,  1012,  2151,  1006, 27937,  1012,  1999,  2487,  2094,  1006,
        13075,  2692,  1010,  1014,  1010,  1015,  1007,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101, 27937,  1012,  2073,  1006, 27937,  1012,  1999,  2487,  2094,
         1006, 13075,  2692,  1010,  1031,  2358,  2099,  2692,  1033,  1007,
         1012, 24501,  3270,  5051,  1006, 13075,  2692,  1012,  4338,  1007,
         1010, 13075,  2692,  1010,  1014,  1007,   102])
got:
tensor([19616,  1006,  2862,  1006,  2846,  1006, 18798,  1006, 13075,  2692,
         1007,  1007,  1007,  1010,  3145,  1027, 23375,  1060,  1024,  1060,
         1031,  1015,  1033,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101,  1040,  2546,  1012,  2177,  3762,  1006,  1031,  1005,  8902,
         2487,  1005,  1010,  1005,  8902,  2475,  1005,  1033,  1007,  1031,
         1005,  8902,  2509,  1005,  1033,  1012, 16634,  7413,  1006,  1007,
         1012, 25141,  1035,  5950,  1006,  1007,   102])
got:
tensor([13075,  2692,  1012,  2177,  3762,  1006, 27937,  1012, 19027, 15465,
         1006, 18798,  1006, 13075,  2692,  1012,  4338,  1031,  1014,  1033,
         1007,  1010,  1016,  1007,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1012, 24501,  3270,  5051,  1006,  1011,  1015,
         1010,  1046,  1007,  1012,  2812,  1006,  8123,  1027,  1015,  1007,
         1012, 24501,  3270,  5051,  1006, 13075,  2692,  1012,  4338,  1031,
         1014,  1033,  1010,  1011,  1015,  1007,   102])
got:
tensor([20228,  2102,  1012,  8040, 20097,  1006,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101, 20228,  2102,  1012,  5436,  1006, 27937,  1012,  6721,  1012,
        14566,  2078,  1006,  2531,  1007,  1010, 27937,  1012,  6721,  1012,
        14566,  2078,  1006,  2531,  1007,  1010,  1005,  1051,  1005,  1010,
         1049, 11329,  1027,  1005,  3904,  1005,  1007,   102])
got:
tensor([13075,  2692,  1031,  1005,  2358,  2099,  2692,  1005,  1033,  1012,
         6611,  1006, 23375,  1060,  1024,  1060,  1031, 18798,  1006,  1060,
         1007,  1013,  7886,  1033,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1027, 13075,  2692,  1031,  1006, 13075,  2692,
         1031,  1005,  2358,  2099,  2692,  1005,  1033,  1028,  1027,  5585,
         1007,  1004,  1006, 13075,  2692,  1031,  1005,  2358,  2099,  2692,
         1005,  1033,  1026,  1027,  7886,  1007,  1033,   102])
got:
tensor([1000, 1000, 1000, 2358, 2099, 2692, 1000, 1000, 1000, 1012, 5672, 1006,
        1005, 2358, 2099, 2692, 1005, 1010, 1005, 1005, 1007,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102])
source:
tensor([  101,  2128,  1012,  2424,  8095,  1006,  1005,  1050,  1006,  1029,
         1026,  1027,  1031,  1034,  1050,  1033,  1050,  1007,  1050,  1009,
         1006,  1029,  1027,  1031,  1034,  1050,  1033,  1007,  1006,  1029,
         1045,  1007,  1005,  1010, 13075,  2692,  1007,   102])
got:
tensor([ 2128,  1012,  4942,  1006,  1005,  1006,  1029,  1026,  1027,  1031,
         1037,  1011,  1062,  1033,  1007,  1032,  1032,  1007,  1005,  1010,
         1005,  1032,  1032,  1015,  1005,  1010, 13075,  2692,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1027,  2128,  1012,  4942,  1006,  1005,  1032,
         1032,  1038,  1006,  1032,  1032,  1059,  1009,  1007,  1006,  1032,
         1032,  1015,  1032,  1032,  1038,  1007,  1009,  1005,  1010,  1005,
         1032,  1032,  1015,  1005,  1010, 13075,  2692,  1007,   102])
got:
tensor([ 1031,  1049,  1012,  5672,  1006,  1005,  1031,  1032,  1060,  8889,
         1011,  1032,  1060,  2581,  2546,  1033,  1005,  1010,  1005,  2358,
         2099,  2692,  1005,  1007,  2005,  1060,  1999, 13075,  2692,  1033,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101,  1031,  2128,  1012,  4942,  1006,  1005,  1006,  1029,  1026,
          999,  1032,  1032,  1040,  1007,  1032,  1032,  1012,  1006,  1029,
          999,  1032,  1032,  1040,  1007,  1005,  1010,  1005,  1005,  1010,
         1045,  1007,  2005,  1045,  1999, 13075,  2692,  1033,   102])
got:
tensor([ 1000,  1000,  1000,  1000,  1000,  1000,  1012,  3693,  1006, 10381,
         2099,  1006,  1045,  1007,  2005,  1045,  1999, 13075,  2692,  1007,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101,  1000,  1000,  1000,  1000,  1000,  1000,  1012,  3693,  1006,
         1031,  1006,  1005,  1003,  1040,  1030,  1003,  1040,  1005,  1003,
         1006,  1056,  1031,  1014,  1033,  1010,  1056,  1031,  1015,  1033,
         1007,  1007,  2005,  1056,  1999, 13075,  2692,  1033,  1007,   102])
got:
tensor([19616,  1006,  2358,  2099,  2692,  1010,  3145,  1027,  6872,  1012,
         8875, 18150,  3334,  1006,  1005,  2358,  2099,  2487,  1005,  1010,
         1005,  2358,  2099,  2475,  1005,  1007,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101,  1048,  1012,  4066,  1006,  3145,  1027, 23375,  1060,  1024,
         1006,  1060,  1031,  1005,  2358,  2099,  2692,  1005,  1033,  1010,
         1060,  1031,  1005,  2358,  2099,  2487,  1005,  1033,  1010,  1060,
         1031,  1005,  2358,  2099,  2475,  1005,  1033,  1007,  1007,   102])
got:
tensor([13075,  2487,  1012,  4066,  1006,  3145,  1027, 23375,  1060,  1024,
         1060,  1031,  1016,  1033,  1010,  7901,  1027,  2995,  1007,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101, 19616,  1006, 13075,  2487,  1010,  3145,  1027, 23375,  1060,
         1024,  3058,  7292,  1012,  2358, 14536,  7292,  1006,  1060,  1031,
         1015,  1033,  1010,  1005,  1003,  1040,  1013,  1003,  1049,  1013,
         1003,  1061,  1005,  1007,  1010,  7901,  1027,  2995,  1007,   102])
got:
tensor([ 2128,  1012,  4942,  1006,  1005,  1031,  1034,  1032,  1032,  1060,
         8889,  1011,  1032,  1032,  1060,  2581,  2546,  1033,  1009,  1005,
         1010,  1005,  1005,  1010, 13075,  2692,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101, 13523, 24759,  4140, 29521,  1012, 22110,  1006,  1005, 15489,
         1005,  1010,  1008,  1008,  1063,  1005, 20344,  1011, 14262, 10128,
         1005,  1024,  1005, 13075,  2692,  1005,  1010,  1005,  2155,  1005,
         1024,  1005, 20344,  1011, 14262, 10128,  1005,  1065,  1007,   102])
got:
tensor([ 3463,  1009,  1027,  1031,  2169,  2005,  2169,  1999,  9808,  1012,
         2862,  4305,  2099,  1006,  1005,  2358,  2099,  2692,  1005,  1007,
         2065,  2169,  1012,  4515, 24415,  1006,  1005,  2358,  2099,  2487,
         1005,  1007,  1033,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101,  2005,  7117,  1010, 16101,  2015,  1010,  6764,  1999,  9808,
         1012,  3328,  1006,  1005,  2358,  2099,  2692,  1005,  1007,  1024,
         2005,  5371,  1999,  6764,  1024,  2065,  5371,  1012,  4515, 24415,
         1006,  1005,  2358,  2099,  2487,  1005,  1007,  1024,  3413,   102])
got:
tensor([13075,  2692,  1027, 16371,  8737,  2100,  1012,  7170,  2102, 18413,
         1006,  2330,  1006,  1005,  2358,  2099,  2487,  1005,  1010,  1005,
         2358,  2099,  2692,  1005,  1007,  1010,  3972, 27605,  3334,  1027,
         1005,  1010,  1005,  1007,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1027, 16371,  8737,  2100,  1012,  2013, 21646,
         1006,  3642,  6169,  1012,  2330,  1006,  1005,  2358,  2099,  2487,
         1005,  1010, 17181,  1027,  1005,  2358,  2099,  2692,  1005,  1007,
         1010, 26718, 18863,  1027,  1005,  1026, 23343,  1005,  1007,   102])
got:
tensor([13075,  2692,  1031,  1006, 13075,  2692,  1031,  1005,  2358,  2099,
         2487,  1005,  1033,  1028,  2753,  1010,  8123,  1027,  1015,  1007,
         1064,  1006, 13075,  2692,  1031,  1005,  2358,  2099,  2475,  1005,
         1033,  1026,  2753,  1007,  1033,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1031,  1005,  2358,  2099,  2692,  1005,  1033,
         1031,  1006, 13075,  2692,  1031,  1005,  2358,  2099,  2487,  1005,
         1033,  1028,  2753,  1007,  1004,  1006, 13075,  2692,  1031,  1005,
         2358,  2099,  2475,  1005,  1033,  1027,  1027,  7706,  1007,  1033,
          102])
got:
tensor([ 4098,  1006, 14689,  1006,  1060,  1011,  1061,  1007,  2005,  1060,
         1010,  1061,  1999, 14101,  1006, 13075,  2692,  1010, 13075,  2487,
         1007,  1007,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102])
source:
tensor([  101, 16721,  4160,  1012, 17953,  2906,  8449,  2102,  1006,  2184,
         1010,  2846,  1006, 18798,  1006, 13075,  2692,  1007,  1007,  1010,
         3145,  1027, 23375,  1045,  1024, 14689,  1006, 13075,  2692,  1031,
         1045,  1033,  1011, 13075,  2487,  1031,  1045,  1033,  1007,  1007,
          102])
got:
tensor([ 3795,  2015,  1006,  1007,  1031,  1005,  2358,  2099,  2692,  1005,
         1033,  1012,  6611,  1006, 23375,  1060,  1024,  1060,  1012,  3975,
         1006,  1005,  2358,  2099,  2692,  1005,  1007,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102])
source:
tensor([  101,  2005,  1045,  1999,  2846,  1006, 17273,  1007,  1024,  2005,
         1046,  1999,  2846,  1006, 17273,  1007,  1024, 12997,  1027,  1005,
        17613,  1012, 16923,  1012,  1003,  1040,  1012,  1003,  1040,  1005,
         1003,  1006,  1045,  1010,  1046,  1007,  6140,  1006, 12997,  1007,
          102])
got:
tensor([ 4098,  1006,  4372, 17897, 11657,  1006,  1005,  2358,  2099,  2692,
         1005,  1007,  1010,  3145,  1027, 23375,  1060,  1024,  1060,  1031,
         1005,  2358,  2099,  2487,  1005,  1033,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102])
source:
tensor([  101,  2862,  1006,  2358,  2099,  2692,  1031,  1005,  1037,  1005,
         1033,  1031,  1005,  2358,  2099,  2487,  1005,  1033,  1012,  5300,
         1006,  1007,  1007,  1031,  1014,  1033,  1031,  1005,  2364,  2850,
         2696,  1005,  1033,  1031,  1014,  1033,  1031,  1005, 18558,  1005,
         1033,   102])
got:
tensor([1031, 1045, 2005, 1045, 1999, 1006, 2358, 2099, 2475, 2065, 1005, 2358,
        2099, 2692, 1005, 1010, 1005, 2358, 2099, 2487, 1005, 1007, 1033,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102])
source:
tensor([  101,  1031,  1045,  2005,  1045,  1010,  1046,  1999,  4372, 17897,
        11657,  1006,  2358,  2099,  2475,  1007,  2065,  1005,  2358,  2099,
         2692,  1005,  1999,  1046,  1012,  2896,  1006,  1007,  2030,  1005,
         2358,  2099,  2487,  1005,  1999,  1046,  1012,  2896,  1006,  1007,
         1033,   102])
got:
tensor([ 1000,  1000,  1000,  1000,  1000,  1000,  1012,  3693,  1006, 13075,
         2692,  1012,  3975,  1006,  1007,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102])
source:
tensor([  101,  6140,  1006,  2128,  1012,  3945,  1006,  1005,  1006,  1029,
         1052,  1026, 24471,  2140,  1028, 16770,  1029,  1024,  1013,  1013,
         1031,  1034,  1032,  1032,  1055,  1033,  1009,  1007,  1005,  1010,
        13075,  2692,  1007,  1012,  2177,  1006,  1005, 24471,  2140,  1005,
         1007,  1007,   102])
got:
tensor([27937,  1012,  2073,  1006,  1006,  2358,  2099,  2692,  1031,  1024,
         1010,  1006,  1015,  1007,  1033,  1028,  1014,  1007,  1012,  2035,
         1006,  8123,  1027,  1015,  1007,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102])
source:
tensor([  101,  2358,  2099,  2692,  1031, 27937,  1012,  2073,  1006,  1006,
         2358,  2099,  2692,  1031,  1024,  1010,  1006,  1014,  1007,  1033,
         1027,  1027,  1014,  1007,  1008,  1006,  2358,  2099,  2692,  1031,
         1024,  1010,  1006,  1015,  1007,  1033,  1027,  1027,  1015,  1007,
         1007,  1033,   102])
got:
tensor([ 3058,  7292,  1012,  3058,  7292,  1012,  2358, 14536,  7292,  1006,
         1005,  2358,  2099,  2692,  1005,  1010,  1005,  1003,  1038,  1003,
         1040,  1010,  1003,  1061,  1005,  1007,  1012,  2358, 12881,  7292,
         1006,  1005,  1003,  1037,  1005,  1007,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102])
source:
tensor([  101,  1031,  1040,  1012,  2358, 12881,  7292,  1006,  1005,  1003,
         1061,  1003,  1049,  1003,  1040,  1005,  1007,  2005,  1040,  1999,
        25462,  2015,  1012,  3058,  1035,  2846,  1006,  1005,  2286,  2692,
        19317,  2575,  1005,  1010,  1005,  2286,  2692, 14142,  2475,  1005,
         1007,  1033,   102])
got:
tensor([ 2051,  1012, 12395,  7292,  1006,  3058,  7292,  1012,  3058,  7292,
         1012,  2085,  1006,  1007,  1012,  2051,  8525, 10814,  1006,  1007,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102])
source:
tensor([  101,  2051,  1012,  2358, 14536,  7292,  1006,  1005,  2382,  1013,
         6021,  1013,  5641,  2385,  1024,  2861,  1024,  3590,  1012, 13138,
         1005,  1010,  1005,  1003,  1040,  1013,  1003,  1049,  1013,  1003,
         1061,  1003,  1044,  1024,  1003,  1049,  1024,  1003,  1055,  1012,
         1003,  1042,  1005,  1007,   102])
got:
tensor([ 9808,  1012,  2291,  1006, 13075,  2692,  1007,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102])
source:
tensor([  101,  2128,  1012,  4942,  1006,  1005,  1006,  1032,  1032,  1035,
         1037,  1007,  1029,  1032,  1032,  1012,  1006,  1031,  1034,  1032,
         1032,  1012,  1033,  1008,  1007,  1002,  1005,  1010,  1005,  1035,
        10514,  4246,  1012,  1032,  1032,  1016,  1005,  1010,  1005,  2358,
         2099,  2692,  1005,  1007,   102])
got:
tensor([14101,  1006, 13075,  2692,  1010, 13075,  2487,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102])
source:
tensor([  101, 27937,  1012,  9140,  1006, 14101,  1006, 13075,  2692,  1012,
        23289,  2140,  1006,  1007,  1010, 13075,  2487,  1012, 23289,  2140,
         1006,  1007,  1007,  1010, 26718, 18863,  1027,  1005,  1045,  2549,
         1010,  1045,  2549,  1005,  1007,  1012, 24501,  3270,  5051,  1006,
        13075,  2692,  1012,  4338,  1007,   102])
got:
tensor([13075,  2692,  1012,  5672,  1006,  1005,  1005,  1010,  1005,  1005,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102])
source:
tensor([  101, 13075,  2692,  1027,  2128,  1012,  4942,  1006,  1005,  1034,
        16770,  1029,  1024,  1032,  1032,  1013,  1032,  1032,  1013,  1012,
         1008,  1031,  1032,  1032,  1054,  1032,  1032,  1050,  1033,  1008,
         1005,  1010,  1005,  1005,  1010, 13075,  2692,  1010,  9245,  1027,
         2128,  1012,  4800,  4179,  1007,   102])
got:
tensor([1031, 2358, 2099, 2692, 1033,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102])
source:
tensor([  101, 14101,  1006,  1008,  1031,  1006,  1005,  1037,  1005,  1010,
         1015,  1007,  1010,  1006,  1005,  1038,  1005,  1010,  1016,  1007,
         1010,  1006,  1005,  1039,  1005,  1010,  1017,  1007,  1010,  1006,
         1005,  1040,  1005,  1010,  1018,  1007,  1010,  1006,  1005,  1041,
         1005,  1010,  1007,  1033,  1007,   102])
got:
tensor([ 1000,  1000,  1000,   100,  1000,  1000,  1000,  1012,  4372, 16044,
         1006,  1005,  2002,  2595,  1005,  1007,  1012, 21933,  3207,  1006,
         1005,  2002,  2595,  1005,  1007,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102])
source:
tensor([  101,  1000,  1000,  1000,  1032,  1032,  1060,  2546,  2509,  1032,
         1032,  1060,  4783,  1032,  1032,  1060, 17914,  1032,  1032,  1060,
        17914,  1000,  1000,  1000,  1012,  5672,  1006,  1005,  1032,  1032,
         1060,  1005,  1010,  1005,  1005,  1007,  1012, 21933,  3207,  1006,
         1005,  2002,  2595,  1005,  1007,   102])
got:
tensor([ 1031,  2330,  1006,  1005,  2358,  2099,  2692,  1005,  1010,  1005,
        11113,  1005,  1007,  2005,  1035,  1999,  2846,  1006,  1015,  1010,
        18798,  1006,  2358,  2099,  2692,  1007,  1007,  1033,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102])
source:
tensor([ 101, 4949, 1006, 3904, 1010, 1008, 1031, 1006, 1005, 1037, 1005, 1010,
        1015, 1007, 1010, 1006, 1005, 1038, 1005, 1010, 1016, 1007, 1010, 1006,
        1005, 1039, 1005, 1010, 1017, 1007, 1010, 1006, 1005, 1040, 1005, 1010,
        1018, 1007, 1010, 1006, 1005, 1041, 1005, 1010, 1007, 1033, 1007,  102])
got:
tensor([13075,  2692,  1031,  1031,  1005,  2358,  2099,  2692,  1005,  1010,
         1005,  2358,  2099,  2487,  1005,  1033,  1033,  1012, 13590,  1006,
        13075,  2692,  1010,  2006,  1027,  1005,  2358,  2099,  2475,  1005,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102])
source:
tensor([  101, 13075,  2487,  1031,  1005,  2358,  2099,  2475,  1005,  1033,
         1027, 27937,  1012,  2073,  1006, 13075,  2487,  1031,  1005,  2358,
         2099,  2487,  1005,  1033,  1012,  3475, 18083,  1010, 13075,  2487,
         1031,  1005,  2358,  2099,  2692,  1005,  1033,  1010, 13075,  2487,
         1031,  1005,  2358,  2099,  2487,  1005,  1033,  1007,   102])
got:
tensor([13075,  2487,  1012,  2275,  1035,  5950,  1006,  1031,  1005, 13075,
         2692,  1005,  1010,  1005, 13075,  2475,  1005,  1033,  1007,  1012,
         4895,  9153,  3600,  1006,  2504,  1027,  1014,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102])
source:
tensor([  101, 13075,  2487,  1031,  1005, 13075,  2692,  1005,  1033,  1012,
         5436,  1006,  2785,  1027,  1005,  3347,  1005,  1010, 13075,  2475,
         1027,  1031,  1005,  1054,  1005,  1010,  1005,  1043,  1005,  1010,
         1005,  1038,  1005,  1010,  1005,  1054,  1005,  1010,  1005,  1043,
         1005,  1010,  1005,  1038,  1005,  1010,  1005,  1054,  1005,  1033,
         1007,   102])
got:
tensor([ 3231,  8873,  2571,  1027, 24471,  6894,  2497,  1012,  5227,  1012,
        24471,  4135, 11837,  2121,  1006, 13075,  2692,  1007,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102])
source:
tensor([  101,  3433,  1027, 11186,  1012,  2131,  1006, 13075,  2692,  1010,
         5460,  1027,  2995,  1007,  2007,  2330,  1006,  1005,  2358,  2099,
         2692,  1005,  1010,  1005, 25610,  1005,  1007,  2004,  5047,  1024,
         2005,  2951,  1999, 28816, 22117,  1006,  3433,  1012,  2009,  2121,
         1035,  4180,  1006,  1007,  1007,  1024,  5047,  1012,  4339,  1006,
         2951,  1007,   102])
got:
tensor([ 1031,  1060,  2005,  1060,  1999, 13075,  2692,  2065,  1060,   999,
         1027,  1031,  2358,  2099,  2692,  1033,  1033,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102])
source:
tensor([  101,  1031,  2358,  2099,  2692,  2005,  2358,  2099,  2692,  1999,
         1031,  1005,  9779,  2102,  1005,  1010,  1005,  1060,  6305,  1005,
         1010,  1005, 14405,  1005,  1010,  1005, 23746,  2050,  1005,  1033,
         2065,  1005,  2358,  2099,  2692,  1005,  2025,  1999,  2358,  2099,
         2692,  1998,  1005,  2358,  2099,  2487,  1005,  2025,  1999,  2358,
         2099,  2692,  1033,   102])
got:
tensor([1000, 1000, 1000, 2358, 2099, 2549, 1000, 1000, 1000, 1012, 5672, 1006,
        1005, 2358, 2099, 2692, 1005, 1010, 1005, 2358, 2099, 2487, 1005, 1007,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
         102,  102,  102,  102])
source:
tensor([ 101, 1000, 1000, 1000, 2358, 2099, 2549, 1000, 1000, 1000, 1012, 5672,
        1006, 1005, 2358, 2099, 2509, 1005, 1010, 1005, 1003, 8915, 8737, 1003,
        1005, 1007, 1012, 5672, 1006, 1005, 2358, 2099, 2475, 1005, 1010, 1005,
        2358, 2099, 2509, 1005, 1007, 1012, 5672, 1006, 1005, 1003, 8915, 8737,
        1003, 1005, 1010, 1005, 2358, 2099, 2475, 1005, 1007,  102])
got:
tensor([ 3231,  8873,  2571,  1027, 24471,  6894,  2497,  1012,  5227,  1012,
        24471,  4135, 11837,  2121,  1006, 13075,  2692,  1010, 13075,  2487,
         1007,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
          102,   102,   102,   102])
source:
tensor([  101,  1057,  1027, 24471,  6894,  2497,  1012,  5227,  1012, 24471,
         4135, 11837,  1006, 13075,  2692,  1007,  1042,  1027,  2330,  1006,
        13075,  2487,  1010,  1005, 25610,  1005,  1007, 18804,  1027,  1057,
         1012, 18558,  1006,  1007,  5371,  1035,  2946,  1027, 20014,  1006,
        18804,  1012,  2131,  4974,  2545,  1006,  1005,  4180,  1011,  3091,
         1005,  1007,  1031,  1014,  1033,  1007,  6140,  1006,  1005,  8816,
         2075,  1024,  1003,  1055, 27507,  1024,  1003,  1055,  1005,  1003,
         1006, 13075,  2487,  1010,  5371,  1035,  2946,  1007,  1007,  5371,
         1035,  2946,  1035, 21469,  1027,  1014,  3796,  1035,  1055,  2480,
         1027,  6282,  2683,  2475,  2096,  2995,  1024, 17698,  1027,  1057,
         1012,  3191,  1006,  3796,  1035,  1055,  2480,  1007,  2065,  2025,
        17698,  1024,  3338,  5371,  1035,  2946,  1035, 21469,  1009,  1027,
        18798,  1006, 17698,  1007,  1042,  1012,  4339,  1006, 17698,  1007,
         3570,  1027,  1005,  1003,  2184,  2094,  1031,  1003,  1017,  1012,
         1016,  2546,  1003,  1003,  1033,  1005,  1003,  1006,  5371,  1035,
         2946,  1035, 21469,  1010,  5371,  1035,  2946,  1035, 21469,  1008,
         2531,  1012,  1014,  1013,  5371,  1035,  2946,  1007,  3570,  1027,
         3570,  1009, 10381,  2099,  1006,  1022,  1007,  1008,  1006, 18798,
         1006,  3570,  1007,  1009,  1015,  1007,  6140,  1006,  3570,  1010,
         2203,  1027,  1005,  1005,  1007,  1042,  1012,  2485,  1006,  1007,
          102])
--------- B -----------
{'intent': {'gloss': ['function', 'to', 'convert', 'strings', 'into', 'integers'], 'words': ['function', 'to', 'convert', 'strings', 'into', 'integers'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'int()'}
Generated  translation
map ( int, var ) 
--------- B -----------
{'intent': {'gloss': ['count', 'the', 'occurrences', 'of', 'items', 'in', 'list', 'var0'], 'words': ['count', 'the', 'occurrences', 'of', 'items', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': 'counter(var0)'}
Generated  translation
sum ( isinstance ( x, int ) for x in var0 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'tuple', 'var0', 'to', 'list'], 'words': ['convert', 'tuple', 'var0', 'to', 'list'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 't'}, 'snippet': 'list(var0)'}
Generated  translation
[ ( v, k ) for k, v in var0. items ( ) ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'list', 'var0', 'to', 'tuple'], 'words': ['convert', 'list', 'var0', 'to', 'tuple'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 't'}, 'snippet': 'tuple(l)'}
Generated  translation
map ( int, var0 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'sorted', 'list', 'of', 'keys', 'of', 'dict', 'var0'], 'words': ['get', 'sorted', 'list', 'of', 'keys', 'of', 'dict', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'd'}, 'snippet': 'sorted(var0)'}
Generated  translation
sorted ( var0, key = lambda k : d [ k ] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'length', 'of', 'list', 'var0'], 'words': ['get', 'the', 'length', 'of', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'my_list'}, 'snippet': 'len(var0)'}
Generated  translation
len ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['getting', 'the', 'length', 'of', 'array', 'var0'], 'words': ['getting', 'the', 'length', 'of', 'array', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': 'len(var0)'}
Generated  translation
len ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['getting', 'the', 'length', 'of', 'array', 'var0'], 'words': ['getting', 'the', 'length', 'of', 'array', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': 'len(var0)'}
Generated  translation
len ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['getting', 'the', 'length', 'of', 'var0'], 'words': ['getting', 'the', 'length', 'of', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'my_tuple'}, 'snippet': 'len(var0)'}
Generated  translation
len ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['getting', 'the', 'length', 'of', 'var0'], 'words': ['getting', 'the', 'length', 'of', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'my_string'}, 'snippet': 'len(var0)'}
Generated  translation
len ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'type', 'of', 'var0'], 'words': ['get', 'the', 'type', 'of', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'i'}, 'snippet': 'type(var0)'}
Generated  translation
type ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['determine', 'the', 'type', 'of', 'variable', 'var0'], 'words': ['determine', 'the', 'type', 'of', 'variable', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'v'}, 'snippet': 'type(var0)'}
Generated  translation
isinstance ( var0, str ) 
--------- B -----------
{'intent': {'gloss': ['determine', 'the', 'type', 'of', 'variable', 'var0'], 'words': ['determine', 'the', 'type', 'of', 'variable', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'v'}, 'snippet': 'type(var0)'}
Generated  translation
isinstance ( var0, str ) 
--------- B -----------
{'intent': {'gloss': ['determine', 'the', 'type', 'of', 'variable', 'var0'], 'words': ['determine', 'the', 'type', 'of', 'variable', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'v'}, 'snippet': 'type(var0)'}
Generated  translation
isinstance ( var0, str ) 
--------- B -----------
{'intent': {'gloss': ['determine', 'the', 'type', 'of', 'variable', 'var0'], 'words': ['determine', 'the', 'type', 'of', 'variable', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'v'}, 'snippet': 'type(var0)'}
Generated  translation
isinstance ( var0, str ) 
--------- B -----------
{'intent': {'gloss': ['put', 'the', 'curser', 'at', 'beginning', 'of', 'the', 'file'], 'words': ['put', 'the', 'curser', 'at', 'beginning', 'of', 'the', 'file'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'file.seek(0)'}
Generated  translation
datetime. datetime. strptime ('count ','% y - % m - % dt % h : % m : % s') 
--------- B -----------
{'intent': {'gloss': ['make', 'a', 'delay', 'of', '1', 'second'], 'words': ['make', 'a', 'delay', 'of', '1', 'second'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'time.sleep(1)'}
Generated  translation
time. sleep ( 1 ) 
--------- B -----------
{'intent': {'gloss': ['declare', 'an', 'array'], 'words': ['declare', 'an', 'array'], 'after': [' ', ' ', '']}, 'slot_map': {}, 'snippet': 'my_list = []'}
Generated  translation
[ ] 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'by', 'space'], 'words': ['split', 'string', 'var0', 'by', 'space'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'text'}, 'snippet': 'var0.split()'}
Generated  translation
re. split ('\ \ t + ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'into', 'a', 'list', 'by', 'whitespace'], 'words': ['split', 'string', 'var0', 'into', 'a', 'list', 'by', 'whitespace'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'line'}, 'snippet': 'var0.split()'}
Generated  translation
[ item. strip ( ) for item in var0. split ( ',') ] 
--------- B -----------
{'intent': {'gloss': ['add', 'a', 'header', 'to', 'a', 'csv', 'file'], 'words': ['add', 'a', 'header', 'to', 'a', 'csv', 'file'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'writer.writeheader()'}
Generated  translation
open ('file. txt ','r') 
--------- B -----------
{'intent': {'gloss': ['calculate', 'sum', 'over', 'all', 'rows', 'of', '2d', 'numpy', 'array'], 'words': ['calculate', 'sum', 'over', 'all', 'rows', 'of', '2d', 'numpy', 'array'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'a.sum(axis=1)'}
Generated  translation
numpy. sum ( axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['append', 'elements', 'of', 'a', 'set', 'var0', 'to', 'a', 'list', 'var1'], 'words': ['append', 'elements', 'of', 'a', 'set', 'var0', 'to', 'a', 'list', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'b', 'var1': 'a'}, 'snippet': 'var1.extend(var0)'}
Generated  translation
var1 = [ x for x in var0 ] 
--------- B -----------
{'intent': {'gloss': ['removing', 'duplicates', 'in', 'list', 'var0'], 'words': ['removing', 'duplicates', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 't'}, 'snippet': 'list(set(var0))'}
Generated  translation
mynewlist = list ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['removing', 'duplicates', 'in', 'list', 'var0'], 'words': ['removing', 'duplicates', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'source_list'}, 'snippet': 'list(set(var0))'}
Generated  translation
mynewlist = list ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['how', 'to', 'sort', 'dictionaries', 'by', 'keys', 'in', 'python'], 'words': ['how', 'to', 'sort', 'dictionaries', 'by', 'keys', 'in', 'python'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'sorted(d.items())'}
Generated  translation
sorted ( list ( data. items ( ) ), key = lambda x : x [ 1 ] [ 0 ] ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'string', 'str0', 'into', 'integer'], 'words': ['convert', 'string', 'str0', 'into', 'integer'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '1'}, 'snippet': "int('str0')"}
Generated  translation
int ('str0 ', 2 ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'object', 'var0', 'is', 'a', 'string'], 'words': ['check', 'if', 'object', 'var0', 'is', 'a', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'o'}, 'snippet': 'type(var0) is str'}
Generated  translation
isinstance ( var0, str ) 
--------- B -----------
{'intent': {'gloss': ['append', 'list', 'var0', 'to', 'var1'], 'words': ['append', 'list', 'var0', 'to', 'var1'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list1', 'var1': 'list2'}, 'snippet': 'var1.extend(var0)'}
Generated  translation
var1. append ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['append', 'list', 'var0', 'to', 'var1'], 'words': ['append', 'list', 'var0', 'to', 'var1'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylog', 'var1': 'list1'}, 'snippet': 'var1.extend(var0)'}
Generated  translation
var1. append ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['append', 'list', 'var0', 'to', 'var1'], 'words': ['append', 'list', 'var0', 'to', 'var1'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'c'}, 'snippet': 'var1.extend(var0)'}
Generated  translation
var1. append ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['insert', 'item', 'str0', 'to', 'a', 'list', 'var0'], 'words': ['insert', 'item', 'str0', 'to', 'a', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '12', 'var0': 'my_list'}, 'snippet': 'var0.append(12)'}
Generated  translation
var0. insert ( 0,'str0') 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'type', 'of', 'variable', 'var0'], 'words': ['get', 'the', 'type', 'of', 'variable', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'variable_name'}, 'snippet': 'print(type(var0))'}
Generated  translation
isinstance ( var0, str ) 
--------- B -----------
{'intent': {'gloss': ['download', 'a', 'file', 'var0', 'over', 'http'], 'words': ['download', 'a', 'file', 'var0', 'over', 'http'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'url'}, 'snippet': 'r = requests.get(var0)'}
Generated  translation
ftp. retrbinary ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['read', 'keyboard', '-', 'input'], 'words': ['read', 'keyboard', '-', 'input'], 'after': [' ', '', '', '']}, 'slot_map': {}, 'snippet': "input('enter your input:')"}
Generated  translation
sys. stdout. read ( input ( ) ) 
--------- B -----------
{'intent': {'gloss': ['append', 'elements', 'of', 'a', 'set', 'to', 'a', 'list', 'in', 'python'], 'words': ['append', 'elements', 'of', 'a', 'set', 'to', 'a', 'list', 'in', 'python'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'a.extend(list(b))'}
Generated  translation
set ( ['a ','b'] ). append ( [ str0 ] ) 
--------- B -----------
{'intent': {'gloss': ['change', 'working', 'directory', 'to', 'the', 'directory', 'var0'], 'words': ['change', 'working', 'directory', 'to', 'the', 'directory', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'owd'}, 'snippet': 'os.chdir(var0)'}
Generated  translation
os. chdir ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'dictionary', 'var0', 'in', 'ascending', 'order', 'based', 'on', 'its', 'keys', 'and', 'items'], 'words': ['sort', 'dictionary', 'var0', 'in', 'ascending', 'order', 'based', 'on', 'its', 'keys', 'and', 'items'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'o'}, 'snippet': 'sorted(var0.items())'}
Generated  translation
sorted ( list ( var0. items ( ) ), key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['unzip', 'the', 'list', 'str0'], 'words': ['unzip', 'the', 'list', 'str0'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {'str0': "[('a', 1), ('b', 2), ('c', 3), ('d', 4)]", '[ str0 ]': "[('a', 1), ('b', 2), ('c', 3), ('d', 4)]"}, 'snippet': 'zip(*[ str0 ])'}
Generated  translation
[ str0 ] 
--------- B -----------
{'intent': {'gloss': ['unzip', 'the', 'list', 'str0'], 'words': ['unzip', 'the', 'list', 'str0'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {'str0': "[('a', 1), ('b', 2), ('c', 3), ('d', 4)]", '[ str0 ]': "[('a', 1), ('b', 2), ('c', 3), ('d', 4)]"}, 'snippet': 'zip(*[ str0 ])'}
Generated  translation
[ str0 ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'list', 'str0', 'into', 'a', 'dictionary'], 'words': ['convert', 'list', 'str0', 'into', 'a', 'dictionary'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "[('name', 'joe'), ('age', 22)]", '[ str0 ]': "[('name', 'joe'), ('age', 22)]"}, 'snippet': 'dict([ str0 ])'}
Generated  translation
dict ( map ( lambda s : s. split (':'), [ str0 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['plot', 'dataframe', 'var0', 'without', 'a', 'legend'], 'words': ['plot', 'dataframe', 'var0', 'without', 'a', 'legend'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': 'var0.plot(legend=false)'}
Generated  translation
var0. groupby ('font'). size ( ) 
--------- B -----------
{'intent': {'gloss': ['decode', 'json', 'string', 'str0', 'to', 'python', 'dict'], 'words': ['decode', 'json', 'string', 'str0', 'to', 'python', 'dict'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'request.body'}, 'snippet': 'json.loads(request.body)'}
Generated  translation
json. load ( open ('str0') ) 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'datetime', 'with', 'the', 'current', 'date', '&', 'time'], 'words': ['create', 'a', 'datetime', 'with', 'the', 'current', 'date', '&', 'time'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'datetime.datetime.now()'}
Generated  translation
datetime. datetime. now ( ). date ( ) 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'multi', '-', 'line', 'string', 'var0', 'into', 'separate', 'strings'], 'words': ['split', 'a', 'multi', '-', 'line', 'string', 'var0', 'into', 'separate', 'strings'], 'after': [' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'inputstring'}, 'snippet': "var0.split('\\n')"}
Generated  translation
re. findall ('\ \ w + ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'string', 'var0', 'by', 'space', 'with', 'str0', 'splits'], 'words': ['split', 'a', 'string', 'var0', 'by', 'space', 'with', 'str0', 'splits'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's', 'str0': '4'}, 'snippet': "var0.split(' ', 4)"}
Generated  translation
re. split ('\ \ [. *? \ \ ] ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'key', 'str0', 'from', 'dictionary', 'var0'], 'words': ['remove', 'key', 'str0', 'from', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'ele', 'var0': 'd'}, 'snippet': "del var0['str0']"}
Generated  translation
var0. pop ('str0 ', none ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'tuple', 'var0', 'to', 'list'], 'words': ['convert', 'tuple', 'var0', 'to', 'list'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'level1'}, 'snippet': 'var0 = map(list, var0)'}
Generated  translation
[ ( v, k ) for k, v in var0. items ( ) ] 
--------- B -----------
{'intent': {'gloss': ['get', 'attribute', 'var0', 'of', 'object', 'var1'], 'words': ['get', 'attribute', 'var0', 'of', 'object', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'my_str', 'var1': 'my_object'}, 'snippet': 'getattr(var1, var0)'}
Generated  translation
getattr ( var1, var0 ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'object', 'var0', 'is', 'a', 'string'], 'words': ['check', 'if', 'object', 'var0', 'is', 'a', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'obj'}, 'snippet': 'isinstance(var0, str)'}
Generated  translation
isinstance ( var0, str ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'object', 'var0', 'is', 'a', 'string'], 'words': ['check', 'if', 'object', 'var0', 'is', 'a', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'o'}, 'snippet': 'isinstance(var0, str)'}
Generated  translation
isinstance ( var0, str ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'object', 'var0', 'is', 'a', 'string'], 'words': ['check', 'if', 'object', 'var0', 'is', 'a', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'o'}, 'snippet': 'isinstance(var0, str)'}
Generated  translation
isinstance ( var0, str ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'var0', 'is', 'a', 'string'], 'words': ['check', 'if', 'var0', 'is', 'a', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'obj_to_test'}, 'snippet': 'isinstance(var0, str)'}
Generated  translation
isinstance ( var0, str ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'path', 'var0', 'is', 'an', 'absolute', 'path'], 'words': ['check', 'if', 'path', 'var0', 'is', 'an', 'absolute', 'path'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'my_path'}, 'snippet': 'os.path.isabs(var0)'}
Generated  translation
os. path. isfile ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['reload', 'a', 'module', 'var0'], 'words': ['reload', 'a', 'module', 'var0'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {'var0': 'module'}, 'snippet': 'import imp\nimp.reload(var0)'}
Generated  translation
exec ( compile ( var0 ). read ( ) ) 
--------- B -----------
{'intent': {'gloss': ['enable', 'debug', 'mode', 'on', 'flask', 'application', 'var0'], 'words': ['enable', 'debug', 'mode', 'on', 'flask', 'application', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'app'}, 'snippet': 'var0.run(debug=true)'}
Generated  translation
var0. debug ('debug') 
--------- B -----------
{'intent': {'gloss': ['how', 'do', 'i', 'get', 'the', 'url', 'parameter', 'in', 'a', 'flask', 'view'], 'words': ['how', 'do', 'i', 'get', 'the', 'url', 'parameter', 'in', 'a', 'flask', 'view'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "request.args['myparam']"}
Generated  translation
request. args. get ('http : / / www. r') 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'characters', 'count', 'in', 'a', 'file', 'var0'], 'words': ['get', 'the', 'characters', 'count', 'in', 'a', 'file', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'filepath'}, 'snippet': 'os.stat(var0).st_size'}
Generated  translation
len ( var0 ). count ('\ n') 
--------- B -----------
{'intent': {'gloss': ['count', 'the', 'occurrences', 'of', 'item', 'str0', 'in', 'list', 'var0'], 'words': ['count', 'the', 'occurrences', 'of', 'item', 'str0', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'a', 'var0': 'l'}, 'snippet': "var0.count('str0')"}
Generated  translation
sum ( item ['str0'] for word in var0 ) 
--------- B -----------
{'intent': {'gloss': ['count', 'the', 'occurrences', 'of', 'item', 'str0', 'in', 'list', 'var0'], 'words': ['count', 'the', 'occurrences', 'of', 'item', 'str0', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'b', 'var0': 'l'}, 'snippet': "var0.count('str0')"}
Generated  translation
sum ( item ['str0'] for word in var0 ) 
--------- B -----------
{'intent': {'gloss': ['copy', 'file', 'var0', 'to', 'directory', 'var1'], 'words': ['copy', 'file', 'var0', 'to', 'directory', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'srcfile', 'var1': 'dstdir'}, 'snippet': 'shutil.copy(var0, var1)'}
Generated  translation
shutil. copy2 ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['how', 'to', 'get', 'a', 'single', 'result', 'from', 'a', 'sqlite', 'query', 'in', 'python', '?'], 'words': ['how', 'to', 'get', 'a', 'single', 'result', 'from', 'a', 'sqlite', 'query', 'in', 'python', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'cursor.fetchone()[0]'}
Generated  translation
tree. objects. filter ( id = 1 ). order _ by ('a') 
--------- B -----------
{'intent': {'gloss': ['calculate', 'mean', 'across', 'dimension', 'in', 'a', '2d', 'array', 'var0'], 'words': ['calculate', 'mean', 'across', 'dimension', 'in', 'a', '2d', 'array', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'np.mean(var0, axis=1)'}
Generated  translation
np. sqrt ( ( var0. sum ( axis = 1 ) ). mean ( ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'position', 'of', 'item', 'var0', 'in', 'list', 'var1'], 'words': ['get', 'the', 'position', 'of', 'item', 'var0', 'in', 'list', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'element', 'var1': 'testlist'}, 'snippet': 'print(var1.index(var0))'}
Generated  translation
print ( var1. get ( var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['add', 'key', 'str0', 'to', 'dictionary', 'var0', 'with', 'value', '1'], 'words': ['add', 'key', 'str0', 'to', 'dictionary', 'var0', 'with', 'value', '1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'a', 'var0': 'data'}, 'snippet': 'var0.update(str0=1)'}
Generated  translation
var0 ['str0'] = 1 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'value', 'of', 'datetime', '.', 'today', '(', ')', 'in', 'the', 'utc', 'time', 'zone'], 'words': ['get', 'a', 'value', 'of', 'datetime', '.', 'today', '(', ')', 'in', 'the', 'utc', 'time', 'zone'], 'after': [' ', ' ', ' ', ' ', '', '', '', '', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'datetime.now(pytz.utc)'}
Generated  translation
datetime. datetime. utcnow ( ). time ( ) 
--------- B -----------
{'intent': {'gloss': ['round', 'off', 'the', 'float', 'that', 'is', 'the', 'product', 'of', 'str0', 'and', 'convert', 'it', 'to', 'an', 'int'], 'words': ['round', 'off', 'the', 'float', 'that', 'is', 'the', 'product', 'of', 'str0', 'and', 'convert', 'it', 'to', 'an', 'int'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '2.52 * 100'}, 'snippet': 'int(round(2.51 * 100))'}
Generated  translation
print ( round ( float ( var0. _ _ dict _ _ ) ) ) 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'by', 'str0'], 'words': ['split', 'string', 'var0', 'by', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'text', 'str0': ','}, 'snippet': "var0.split('str0')"}
Generated  translation
re. split ('str0 ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'urllib', 'unquoted', 'string', 'var0', 'to', 'a', 'json', 'data', 'var1'], 'words': ['convert', 'a', 'urllib', 'unquoted', 'string', 'var0', 'to', 'a', 'json', 'data', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'unescaped', 'var1': 'json_data'}, 'snippet': 'var1 = json.loads(var0)'}
Generated  translation
var1 = json. dumps ( var0, ensure _ ascii = false ) 
--------- B -----------
{'intent': {'gloss': ['open', 'file', 'var0', 'with', 'mode', 'str0'], 'words': ['open', 'file', 'var0', 'with', 'mode', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'path', 'str0': 'r'}, 'snippet': "open(var0, 'str0')"}
Generated  translation
os. open ( var0,'str0') 
--------- B -----------
{'intent': {'gloss': ['enable', 'warnings', 'using', 'action', 'str0'], 'words': ['enable', 'warnings', 'using', 'action', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'always'}, 'snippet': "warnings.simplefilter('str0')"}
Generated  translation
urllib. request. urlopen ('str0') 
--------- B -----------
{'intent': {'gloss': ['create', 'new', 'matrix', 'object', 'by', 'concatenating', 'data', 'from', 'matrix', 'a', 'and', 'matrix', 'b'], 'words': ['create', 'new', 'matrix', 'object', 'by', 'concatenating', 'data', 'from', 'matrix', 'a', 'and', 'matrix', 'b'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'np.concatenate((a, b))'}
Generated  translation
numpy. concate matrix ( [ 1, 2, 3 ], axis = 0 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'raw', 'string', 'var0', 'into', 'a', 'normal', 'string'], 'words': ['convert', 'a', 'raw', 'string', 'var0', 'into', 'a', 'normal', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'raw_string'}, 'snippet': "var0.decode('string_escape')"}
Generated  translation
print ( var0. encode ('raw _ string') ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'raw', 'string', 'var0', 'into', 'a', 'normal', 'string'], 'words': ['convert', 'a', 'raw', 'string', 'var0', 'into', 'a', 'normal', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'raw_byte_string'}, 'snippet': "var0.decode('unicode_escape')"}
Generated  translation
print ( var0. encode ('raw _ string') ) 
--------- B -----------
{'intent': {'gloss': ['cast', 'an', 'int', 'var0', 'to', 'a', 'string', 'and', 'concat', 'to', 'string', 'str0'], 'words': ['cast', 'an', 'int', 'var0', 'to', 'a', 'string', 'and', 'concat', 'to', 'string', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'i', 'str0': 'me'}, 'snippet': "'str0' + str(var0)"}
Generated  translation
" " " str0 " " ". join ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['length', 'of', 'longest', 'element', 'in', 'list', 'var0'], 'words': ['length', 'of', 'longest', 'element', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'words'}, 'snippet': 'len(max(var0, key=len))'}
Generated  translation
length = len ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'value', 'associated', 'with', 'unicode', 'key', 'str0', 'of', 'first', 'dictionary', 'in', 'list', 'var0'], 'words': ['get', 'the', 'value', 'associated', 'with', 'unicode', 'key', 'str0', 'of', 'first', 'dictionary', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'from_user', 'var0': 'result'}, 'snippet': "var0[0]['str0']"}
Generated  translation
[ x ['str0'] for x in var0 ] 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'list', 'from', 'a', 'list', 'var0', 'with', 'values', 'mapped', 'into', 'a', 'dictionary', 'var1'], 'words': ['get', 'a', 'list', 'from', 'a', 'list', 'var0', 'with', 'values', 'mapped', 'into', 'a', 'dictionary', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'lst', 'var1': 'dct'}, 'snippet': '[var1[k] for k in var0]'}
Generated  translation
[ key for item in var0 for key, value in list ( var1. items ( ) ) ] 
--------- B -----------
{'intent': {'gloss': ['get', 'number', 'of', 'keys', 'in', 'dictionary', 'var0'], 'words': ['get', 'number', 'of', 'keys', 'in', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'yourdict'}, 'snippet': 'len(list(var0.keys()))'}
Generated  translation
sum ( len ( x ) for x in list ( var0. items ( ) ) ) 
--------- B -----------
{'intent': {'gloss': ['reverse', 'a', 'priority', 'queue', 'var0', 'in', 'python', 'without', 'using', 'classes'], 'words': ['reverse', 'a', 'priority', 'queue', 'var0', 'in', 'python', 'without', 'using', 'classes'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'q'}, 'snippet': 'var0.put((-n, n))'}
Generated  translation
random. sample ( list ( var0. items ( ) ), key = operator. itemgetter ( 1 ) ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'directory', 'tree', 'str0'], 'words': ['remove', 'directory', 'tree', 'str0'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {'str0': '/folder_name'}, 'snippet': "shutil.rmtree('str0')"}
Generated  translation
os. system ('str0') 
--------- B -----------
{'intent': {'gloss': ['numpy', 'concatenate', 'two', 'arrays', 'var0', 'and', 'var1', 'along', 'the', 'first', 'axis'], 'words': ['numpy', 'concatenate', 'two', 'arrays', 'var0', 'and', 'var1', 'along', 'the', 'first', 'axis'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'b'}, 'snippet': 'np.array((var0, var1))'}
Generated  translation
numpy. concatenate ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['select', 'the', 'last', 'column', 'of', 'dataframe', 'var0'], 'words': ['select', 'the', 'last', 'column', 'of', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': 'var0[var0.columns[-1]]'}
Generated  translation
var0. loc [ :, ( var0. tail ( 1 ) ] ) ] 
--------- B -----------
{'intent': {'gloss': ['join', 'a', 'list', 'of', 'strings', 'var0', 'using', 'a', 'space', 'str0'], 'words': ['join', 'a', 'list', 'of', 'strings', 'var0', 'using', 'a', 'space', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list', 'str0': ''}, 'snippet': '""" """.join(var0)'}
Generated  translation
var0. join ( ['str0'] ) 
--------- B -----------
{'intent': {'gloss': ['drop', 'rows', 'of', 'pandas', 'dataframe', 'var0', 'having', 'nan', 'in', 'column', 'at', 'index', 'str0'], 'words': ['drop', 'rows', 'of', 'pandas', 'dataframe', 'var0', 'having', 'nan', 'in', 'column', 'at', 'index', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': '1'}, 'snippet': 'var0.dropna(subset=[1])'}
Generated  translation
var0. fillna ( method ='str0 ', inplace = true ) 
--------- B -----------
{'intent': {'gloss': ['reverse', 'the', 'list', 'that', 'contains', '1', 'to', '10'], 'words': ['reverse', 'the', 'list', 'that', 'contains', '1', 'to', '10'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'list(reversed(list(range(10))))'}
Generated  translation
[ i for i in range ( 1, 10 ) if i! = 10 ] 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'str0', 'into', 'a', 'list', 'on', 'white', 'spaces'], 'words': ['split', 'string', 'str0', 'into', 'a', 'list', 'on', 'white', 'spaces'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'qh qd jc kd js'}, 'snippet': '"""str0""".split()'}
Generated  translation
" " " str0 " " ". split ( ) 
--------- B -----------
{'intent': {'gloss': ['erase', 'all', 'the', 'contents', 'of', 'a', 'file', 'var0'], 'words': ['erase', 'all', 'the', 'contents', 'of', 'a', 'file', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'filename'}, 'snippet': "open(var0, 'w').close()"}
Generated  translation
open ('var0 ','w'). close ( ) 
--------- B -----------
{'intent': {'gloss': ['add', 'indexes', 'in', 'a', 'data', 'frame', 'var0', 'to', 'a', 'column', 'var1'], 'words': ['add', 'indexes', 'in', 'a', 'data', 'frame', 'var0', 'to', 'a', 'column', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'var1': 'index1'}, 'snippet': "var0['var1'] = var0.index"}
Generated  translation
var0 ['var1'] = var0 ['var1']. append ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'list', 'containing', 'flattened', 'list', 'str0'], 'words': ['create', 'a', 'list', 'containing', 'flattened', 'list', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "[['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]", '[ str0 ]': "[['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]"}, 'snippet': 'values = sum([ str0 ], [])'}
Generated  translation
[ str0 ] 
--------- B -----------
{'intent': {'gloss': ['replace', 'spaces', 'with', 'underscore'], 'words': ['replace', 'spaces', 'with', 'underscore'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "mystring.replace(' ', '_')"}
Generated  translation
re. sub ('(? < = [ a - z ] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'an', 'absolute', 'file', 'path', 'of', 'file', 'str0'], 'words': ['get', 'an', 'absolute', 'file', 'path', 'of', 'file', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'mydir/myfile.txt'}, 'snippet': "os.path.abspath('str0')"}
Generated  translation
os. path. abspath ( str0 ) 
--------- B -----------
{'intent': {'gloss': ['check', 'characters', 'of', 'string', 'var0', 'are', 'true', 'predication', 'of', 'function', 'var1'], 'words': ['check', 'characters', 'of', 'string', 'var0', 'are', 'true', 'predication', 'of', 'function', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'string', 'var1': 'predicate'}, 'snippet': 'all(var1(x) for x in var0)'}
Generated  translation
' var1'in list ( var0. items ( ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'attribute', 'str0', 'from', 'object', 'var0'], 'words': ['get', 'attribute', 'str0', 'from', 'object', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'attr', 'var0': 'obj'}, 'snippet': "getattr(var0, 'str0')"}
Generated  translation
getattr ( var0,'str0') 
--------- B -----------
{'intent': {'gloss': ['create', 'var0', 'to', 'contain', 'the', 'lists', 'from', 'list', 'var1', 'excluding', 'the', 'empty', 'lists', 'from', 'var1'], 'words': ['create', 'var0', 'to', 'contain', 'the', 'lists', 'from', 'list', 'var1', 'excluding', 'the', 'empty', 'lists', 'from', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list2', 'var1': 'list1', 'var2': 'list1'}, 'snippet': 'var0 = [x for x in var2 if x]'}
Generated  translation
var0 = [ [ x for x in var2 ] for y in range ( len ( var2 ) ) ] 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'based', 'on', 'occurrences', 'of', 'regex', 'pattern', 'str0'], 'words': ['split', 'string', 'var0', 'based', 'on', 'occurrences', 'of', 'regex', 'pattern', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'input', 'str0': '[ ](?=[a-z]+\\b)', '[ str0 )': '[ ](?=[a-z]+\\b)'}, 'snippet': "re.split('str0', var0)"}
Generated  translation
re. split ('str0 ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['place', 'the', 'radial', 'ticks', 'in', 'plot', 'var0', 'at', '135', 'degrees'], 'words': ['place', 'the', 'radial', 'ticks', 'in', 'plot', 'var0', 'at', '135', 'degrees'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'ax'}, 'snippet': 'var0.set_rlabel_position(135)'}
Generated  translation
var0. groupby ( level = 0 ). size ( ). reset _ index ( drop = true ) 
--------- B -----------
{'intent': {'gloss': ['get', 'html', 'source', 'of', 'selenium', 'webelement', 'var0'], 'words': ['get', 'html', 'source', 'of', 'selenium', 'webelement', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'element'}, 'snippet': "var0.get_attribute('innerhtml')"}
Generated  translation
driver. find _ element _ by _ xpath ( " / / div [ @ id ='a'] / / a [ @ class ='click'] " ) 
--------- B -----------
{'intent': {'gloss': ['add', 'an', 'entry', 'str0', 'at', 'the', 'beginning', 'of', 'list', 'var0'], 'words': ['add', 'an', 'entry', 'str0', 'at', 'the', 'beginning', 'of', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'wuggah', 'var0': 'mylist'}, 'snippet': "var0.insert(0, 'str0')"}
Generated  translation
var0 ='str0'+ var0 [ 1 : ] 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'last', 'key', 'of', 'dictionary', 'var0'], 'words': ['get', 'the', 'last', 'key', 'of', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'dict'}, 'snippet': 'list(var0.keys())[-1]'}
Generated  translation
var0 [ - 1 ] 
--------- B -----------
{'intent': {'gloss': ['write', 'line', 'str0', 'to', 'file', 'var0'], 'words': ['write', 'line', 'str0', 'to', 'file', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'hi there', 'var0': 'f'}, 'snippet': "print('str0', file=var0)"}
Generated  translation
var0. write ('str0') 
--------- B -----------
{'intent': {'gloss': ['add', 'a', 'new', 'axis', 'to', 'array', 'var0'], 'words': ['add', 'a', 'new', 'axis', 'to', 'array', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'var0[:, (np.newaxis)]'}
Generated  translation
var0 = var0. shape [ 0 ] 
--------- B -----------
{'intent': {'gloss': ['open', 'a', 'file', 'str0', 'in', 'append', 'mode'], 'words': ['open', 'a', 'file', 'str0', 'in', 'append', 'mode'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'output.txt'}, 'snippet': "file = open('str0', 'a')"}
Generated  translation
f = open ('str0 ','wb') 
--------- B -----------
{'intent': {'gloss': ['format', 'string', 'str0'], 'words': ['format', 'string', 'str0'], 'after': [' ', ' ', '']}, 'slot_map': {'str0': '({0.goals} goals, ${0.penalties})', '( str0 )': '({0.goals} goals, ${0.penalties})'}, 'snippet': '"""str0""".format(self)'}
Generated  translation
" " " str0 " " ". format ('str0') 
--------- B -----------
{'intent': {'gloss': ['concat', 'two', 'matrices', 'var0', 'and', 'var1', 'in', 'numpy'], 'words': ['concat', 'two', 'matrices', 'var0', 'and', 'var1', 'in', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'b'}, 'snippet': 'np.vstack((var0, var1))'}
Generated  translation
numpy. concat ( [ ( x, y ) for x, y in zip ( var0, var1 ) ] ) 
--------- B -----------
{'intent': {'gloss': ['send', 'the', 'output', 'of', 'pprint', 'object', 'var0', 'to', 'file', 'var1'], 'words': ['send', 'the', 'output', 'of', 'pprint', 'object', 'var0', 'to', 'file', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'dataobject', 'var1': 'logfile'}, 'snippet': 'pprint.pprint(var0, var1)'}
Generated  translation
output = subprocess. check _ output ( var1, var0 ) 
--------- B -----------
{'intent': {'gloss': ['iterate', 'ove', 'list', 'str0', 'using', 'list', 'comprehension'], 'words': ['iterate', 'ove', 'list', 'str0', 'using', 'list', 'comprehension'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '[1, 2, 3]', '[ str0 ]': '[1, 2, 3]'}, 'snippet': 'print([item for item in [ str0 ]])'}
Generated  translation
dict ( [ x. split ('=') for x in s. split ( ) ] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'filename', 'without', 'extension', 'from', 'file', 'var0'], 'words': ['get', 'filename', 'without', 'extension', 'from', 'file', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'filename'}, 'snippet': 'os.path.splitext(var0)[0]'}
Generated  translation
os. path. split ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'objects', 'var0', ',', 'based', 'on', 'a', 'function', 'var1', 'in', 'descending', 'order'], 'words': ['sort', 'a', 'list', 'of', 'objects', 'var0', ',', 'based', 'on', 'a', 'function', 'var1', 'in', 'descending', 'order'], 'after': [' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'ut', 'var1': 'cmpfun'}, 'snippet': 'var0.sort(key=var1, reverse=true)'}
Generated  translation
var0. sort ( key = lambda x : x. var1 ) 
--------- B -----------
{'intent': {'gloss': ['call', 'a', 'shell', 'script', 'var0', 'using', 'subprocess'], 'words': ['call', 'a', 'shell', 'script', 'var0', 'using', 'subprocess'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'notepad'}, 'snippet': "subprocess.call(['var0'])"}
Generated  translation
subprocess. call ('test. sh otherfunc') 
--------- B -----------
{'intent': {'gloss': ['call', 'a', 'base', 'class', "'", 's', 'class', 'method', 'var0', 'from', 'derived', 'class', 'var1'], 'words': ['call', 'a', 'base', 'class', "'", 's', 'class', 'method', 'var0', 'from', 'derived', 'class', 'var1'], 'after': [' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'do', 'var1': 'derived'}, 'snippet': 'super(var1, cls).var0(a)'}
Generated  translation
super ( var0, self ). _ _ init _ _ ( * args, * * kwargs ) 
--------- B -----------
{'intent': {'gloss': ['open', 'a', 'file', 'str0', 'in', 'write', 'mode'], 'words': ['open', 'a', 'file', 'str0', 'in', 'write', 'mode'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'yourfile.txt'}, 'snippet': "f = open('str0', 'w')"}
Generated  translation
output = open ('str0 ','wb') 
--------- B -----------
{'intent': {'gloss': ['find', 'maximal', 'value', 'in', 'matrix', 'var0'], 'words': ['find', 'maximal', 'value', 'in', 'matrix', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'matrix'}, 'snippet': 'max([max(i) for i in var0])'}
Generated  translation
numpy. reshape ( var0, ( - 1, 1 ) ) 
--------- B -----------
{'intent': {'gloss': ['round', 'number', 'var0', 'to', '2', 'precision', 'after', 'the', 'decimal', 'point'], 'words': ['round', 'number', 'var0', 'to', '2', 'precision', 'after', 'the', 'decimal', 'point'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'answer'}, 'snippet': 'var0 = str(round(var0, 2))'}
Generated  translation
round ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'list', 'of', 'values', 'from', 'dictionary', 'str0', 'w', '.', 'r', '.', 't', '.', 'list', 'of', 'keys', 'str1'], 'words': ['get', 'list', 'of', 'values', 'from', 'dictionary', 'str0', 'w', '.', 'r', '.', 't', '.', 'list', 'of', 'keys', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'mydict', 'str1': 'mykeys'}, 'snippet': '[str0[x] for x in str1]'}
Generated  translation
[ item for item in str1 for item in str0 ] 
--------- B -----------
{'intent': {'gloss': ['append', 'items', 'in', 'list', 'var0', 'to', 'var1'], 'words': ['append', 'items', 'in', 'list', 'var0', 'to', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylog', 'var1': 'list1'}, 'snippet': 'for line in var0:\n    var1.append(line)'}
Generated  translation
var1. append ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['truncate', 'float', '1', '.', '923328437452', 'to', '3', 'decimal', 'places'], 'words': ['truncate', 'float', '1', '.', '923328437452', 'to', '3', 'decimal', 'places'], 'after': [' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'round(1.923328437452, 3)'}
Generated  translation
' %. 2f'% 3. 923328432 
--------- B -----------
{'intent': {'gloss': ['extract', 'attributes', 'str0', 'from', 'string', 'var0'], 'words': ['extract', 'attributes', 'str0', 'from', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'src="js/([^"]*\\bjquery\\b[^"]*)"', 'var0': 'data'}, 'snippet': "re.findall('str0', var0)"}
Generated  translation
print ( ['str0 '. join ( c ) for c in var0 if c. isdigit ( ) ] ) 
--------- B -----------
{'intent': {'gloss': ['find', 'all', 'matches', 'of', 'regex', 'pattern', 'str0', 'in', 'string', 'var0'], 'words': ['find', 'all', 'matches', 'of', 'regex', 'pattern', 'str0', 'in', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '([a-fa-f\\d]{32})', 'var0': 'data', '( str0 )': '([a-fa-f\\d]{32})'}, 'snippet': "re.findall('str0', var0)"}
Generated  translation
re. findall ('str0 ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', '401', 'unauthorized', 'in', 'django'], 'words': ['return', 'a', '401', 'unauthorized', 'in', 'django'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "return httpresponse('unauthorized', status=401)"}
Generated  translation
401ango. objects. filter ( id = 1 ) 
--------- B -----------
{'intent': {'gloss': ['create', 'list', 'var0', 'containing', 'two', 'empty', 'lists'], 'words': ['create', 'list', 'var0', 'containing', 'two', 'empty', 'lists'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'y'}, 'snippet': 'var0 = [[] for n in range(2)]'}
Generated  translation
var0 = [ [ ] for i in range ( len ( var0 ) ) ] 
--------- B -----------
{'intent': {'gloss': ['converting', 'list', 'of', 'strings', 'var0', 'to', 'list', 'of', 'integer', 'var1'], 'words': ['converting', 'list', 'of', 'strings', 'var0', 'to', 'list', 'of', 'integer', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'intstringlist', 'var1': 'nums'}, 'snippet': 'var1 = [int(x) for x in var0]'}
Generated  translation
[ int ( x ) for x in var1 ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'int', 'values', 'in', 'list', 'var0', 'to', 'float'], 'words': ['convert', 'int', 'values', 'in', 'list', 'var0', 'to', 'float'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'numlist'}, 'snippet': 'var0 = [float(x) for x in var0]'}
Generated  translation
[ float ( x ) for x in var0 ] 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'list', 'containing', 'all', 'ascii', 'characters', 'as', 'its', 'elements'], 'words': ['create', 'a', 'list', 'containing', 'all', 'ascii', 'characters', 'as', 'its', 'elements'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': '[chr(i) for i in range(127)]'}
Generated  translation
list ( map ( ord, var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['concatenate', 'a', 'list', 'of', 'strings', 'str0'], 'words': ['concatenate', 'a', 'list', 'of', 'strings', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "['a', 'b', 'c']", '[ str0 ]': "['a', 'b', 'c']"}, 'snippet': '"""""".join([ str0 ])'}
Generated  translation
" " " " " ". join ( str0 ) 
--------- B -----------
{'intent': {'gloss': ['create', '3d', 'array', 'of', 'zeroes', 'of', 'size', 'str0'], 'words': ['create', '3d', 'array', 'of', 'zeroes', 'of', 'size', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '(3,3,3)', '( str0 )': '(3,3,3)'}, 'snippet': 'numpy.zeros((3, 3, 3))'}
Generated  translation
np. einsum ('ijk, ikl - > ijl') 
--------- B -----------
{'intent': {'gloss': ['join', 'elements', 'of', 'list', 'var0', 'with', 'a', 'comma', 'str0'], 'words': ['join', 'elements', 'of', 'list', 'var0', 'with', 'a', 'comma', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l', 'str0': ','}, 'snippet': '"""str0""".join(var0)'}
Generated  translation
[ ( x, y ) for x, y in zip ( var0, var0 ) ] 
--------- B -----------
{'intent': {'gloss': ['filter', 'rows', 'in', 'pandas', 'starting', 'with', 'alphabet', 'str0', 'using', 'regular', 'expression', '.'], 'words': ['filter', 'rows', 'in', 'pandas', 'starting', 'with', 'alphabet', 'str0', 'using', 'regular', 'expression', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'f'}, 'snippet': "df.b.str.contains('^f')"}
Generated  translation
df. groupby ('str0'). filter ( lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['initialize', 'a', 'list', 'var0', 'of', '100', 'objects', 'object', '(', ')'], 'words': ['initialize', 'a', 'list', 'var0', 'of', '100', 'objects', 'object', '(', ')'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '']}, 'slot_map': {'var0': 'lst'}, 'snippet': 'var0 = [object() for _ in range(100)]'}
Generated  translation
var0 = [ [ ] for i in range ( 100 ) ] 
--------- B -----------
{'intent': {'gloss': ['get', 'reverse', 'of', 'list', 'items', 'from', 'list', 'str0', 'using', 'extended', 'slicing'], 'words': ['get', 'reverse', 'of', 'list', 'items', 'from', 'list', 'str0', 'using', 'extended', 'slicing'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'b'}, 'snippet': '[x[::-1] for x in str0]'}
Generated  translation
[ i. split ('str0') [ 1 ] for i in range ( len ( str0 ) ) ] 
--------- B -----------
{'intent': {'gloss': ['removing', 'duplicates', 'in', 'list', 'var0'], 'words': ['removing', 'duplicates', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'abracadabra'}, 'snippet': "list(ordereddict.fromkeys('var0'))"}
Generated  translation
mynewlist = list ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['call', 'a', 'shell', 'script', 'str0', 'using', 'subprocess'], 'words': ['call', 'a', 'shell', 'script', 'str0', 'using', 'subprocess'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': './test.sh'}, 'snippet': "subprocess.call(['str0'])"}
Generated  translation
subprocess. call ('str0 ', shell = true ) 
--------- B -----------
{'intent': {'gloss': ['separate', 'words', 'delimited', 'by', 'one', 'or', 'more', 'spaces', 'into', 'a', 'list'], 'words': ['separate', 'words', 'delimited', 'by', 'one', 'or', 'more', 'spaces', 'into', 'a', 'list'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "re.split(' +', 'hello world sample text')"}
Generated  translation
re. split ( ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'list', 'into', 'a', 'generator', 'object'], 'words': ['convert', 'a', 'list', 'into', 'a', 'generator', 'object'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': '(n for n in [1, 2, 3, 5])'}
Generated  translation
list ( itertools. product ( * 2 ) ) 
--------- B -----------
{'intent': {'gloss': ['encode', 'str0', 'to', 'a', 'json', 'string'], 'words': ['encode', 'str0', 'to', 'a', 'json', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "decimal('3.9')"}, 'snippet': "json.dumps(decimal('3.9'))"}
Generated  translation
json. encode ('utf - 8') 
--------- B -----------
{'intent': {'gloss': ['add', 'key', 'str0', 'to', 'dictionary', 'var0', 'with', 'value', 'str1'], 'words': ['add', 'key', 'str0', 'to', 'dictionary', 'var0', 'with', 'value', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'mynewkey', 'var0': 'd', 'str1': 'mynewvalue'}, 'snippet': "var0['str0'] = 'str1'"}
Generated  translation
var0 ['str0'] = 3 
--------- B -----------
{'intent': {'gloss': ['add', 'key', 'str0', 'to', 'dictionary', 'var0', 'with', 'value', '1'], 'words': ['add', 'key', 'str0', 'to', 'dictionary', 'var0', 'with', 'value', '1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'a', 'var0': 'data'}, 'snippet': "var0.update({'str0': 1})"}
Generated  translation
var0 ['str0'] = 1 
--------- B -----------
{'intent': {'gloss': ['add', 'key', 'str0', 'to', 'dictionary', 'var0', 'with', 'value', '1'], 'words': ['add', 'key', 'str0', 'to', 'dictionary', 'var0', 'with', 'value', '1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'a', 'var0': 'data'}, 'snippet': 'var0.update(dict(str0=1))'}
Generated  translation
var0 ['str0'] = 1 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'string', 'into', 'a', 'list', 'of', 'words', 'and', 'whitespace'], 'words': ['split', 'a', 'string', 'into', 'a', 'list', 'of', 'words', 'and', 'whitespace'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "re.split('(\\\\w+)', s)"}
Generated  translation
[ s. strip ( ) for s in re. findall ('\ \ s ', s ) ] 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'integer', 'location', 'of', 'a', 'key', 'var0', 'in', 'a', 'pandas', 'data', 'frame'], 'words': ['get', 'the', 'integer', 'location', 'of', 'a', 'key', 'var0', 'in', 'a', 'pandas', 'data', 'frame'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'bob'}, 'snippet': "df.index.get_loc('var0')"}
Generated  translation
df ['var0']. str. get ('var0') 
--------- B -----------
{'intent': {'gloss': ['add', 'an', 'item', 'with', 'key', 'str0', 'and', 'value', '1', 'to', 'an', 'dictionary', 'var0'], 'words': ['add', 'an', 'item', 'with', 'key', 'str0', 'and', 'value', '1', 'to', 'an', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'third_key', 'var0': 'my_dict'}, 'snippet': "var0.update({'str0': 1})"}
Generated  translation
var0 ['str0'] = 1 
--------- B -----------
{'intent': {'gloss': ['print', 'a', 'string', 'var0', 'with', 'string', 'format'], 'words': ['print', 'a', 'string', 'var0', 'with', 'string', 'format'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'word'}, 'snippet': 'print(\'"{}"\'.format(var0))'}
Generated  translation
print ('value is " { } " '. format ( var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['print', 'str0', 'without', 'newline'], 'words': ['print', 'str0', 'without', 'newline'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {'str0': '.'}, 'snippet': "sys.stdout.write('str0')"}
Generated  translation
print ('\ n '. join ( str0 ) ) 
--------- B -----------
{'intent': {'gloss': ['concatenate', 'array', 'of', 'strings', 'str0', 'into', 'a', 'string'], 'words': ['concatenate', 'array', 'of', 'strings', 'str0', 'into', 'a', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "['a', 'b', 'c', 'd']", '[ str0 ]': "['a', 'b', 'c', 'd']"}, 'snippet': '"""""".join([ str0 ])'}
Generated  translation
" " " " " ". join ( [ str0 ] ) 
--------- B -----------
{'intent': {'gloss': ['write', 'dataframe', 'var0', ',', 'excluding', 'index', ',', 'to', 'a', 'csv', 'file'], 'words': ['write', 'dataframe', 'var0', ',', 'excluding', 'index', ',', 'to', 'a', 'csv', 'file'], 'after': [' ', ' ', '', ' ', ' ', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': 'var0.to_csv(filename, index=false)'}
Generated  translation
var0. to _ csv ('csv ', index = false ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'unicode', 'string', 'var0', 'to', 'ascii'], 'words': ['convert', 'unicode', 'string', 'var0', 'to', 'ascii'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': "var0.encode('iso-8859-15')"}
Generated  translation
var0. encode ('ascii ','ignore') 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'all', 'elements', 'in', 'list', 'var0', 'are', 'identical'], 'words': ['check', 'if', 'all', 'elements', 'in', 'list', 'var0', 'are', 'identical'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylist'}, 'snippet': 'all(x == var0[0] for x in var0)'}
Generated  translation
len ( set ( var0 ) ) = = 1 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'first', 'object', 'from', 'a', 'queryset', 'in', 'django', 'model', 'var0'], 'words': ['get', 'the', 'first', 'object', 'from', 'a', 'queryset', 'in', 'django', 'model', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'entry'}, 'snippet': 'var0.objects.filter()[:1].get()'}
Generated  translation
var0. objects. all ( ). first ( ) 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'str0', 'using', 'a', 'regex', 'str1'], 'words': ['split', 'string', 'str0', 'using', 'a', 'regex', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'words, words, words.', 'str1': '(\\w+)', '( str1 )': '(\\w+)'}, 'snippet': "re.split('str1', 'str0')"}
Generated  translation
re. split ('str1 ','str0') 
--------- B -----------
{'intent': {'gloss': ['sum', 'elements', 'at', 'index', 'var0', 'of', 'each', 'list', 'in', 'list', 'var1'], 'words': ['sum', 'elements', 'at', 'index', 'var0', 'of', 'each', 'list', 'in', 'list', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'column', 'var1': 'data'}, 'snippet': 'print(sum(row[var0] for row in var1))'}
Generated  translation
[ sum ( x ) for x in var1 ] 
--------- B -----------
{'intent': {'gloss': ['flatten', 'list', 'var0'], 'words': ['flatten', 'list', 'var0'], 'after': [' ', ' ', '']}, 'slot_map': {'var0': 'list_of_menuitems'}, 'snippet': '[image for menuitem in var0 for image in menuitem]'}
Generated  translation
var0 = [ i [ 0 ] for i in var0 ] 
--------- B -----------
{'intent': {'gloss': ['create', 'array', 'containing', 'the', 'maximum', 'value', 'of', 'respective', 'elements', 'of', 'array', 'str0', 'and', 'array', 'str1'], 'words': ['create', 'array', 'containing', 'the', 'maximum', 'value', 'of', 'respective', 'elements', 'of', 'array', 'str0', 'and', 'array', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '[2, 3, 4]', 'str1': '[1, 5, 2]', '[ str0 ]': '[2, 3, 4]', '[ str1 ]': '[1, 5, 2]'}, 'snippet': 'np.maximum([ str0 ], [ str1 ])'}
Generated  translation
np. zeros ( ( 6, 9, 10 ) ) + np. array ( [ str0 ] ) [ ( none ), :, ( none ) ] 
--------- B -----------
{'intent': {'gloss': ['print', 'a', 'list', 'var0', 'and', 'move', 'first', '3', 'elements', 'to', 'the', 'end', 'of', 'the', 'list'], 'words': ['print', 'a', 'list', 'var0', 'and', 'move', 'first', '3', 'elements', 'to', 'the', 'end', 'of', 'the', 'list'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': 'print(var0[3:] + var0[:3])'}
Generated  translation
print ( var0 [ - 3 : ] ) 
--------- B -----------
{'intent': {'gloss': ['count', 'non', 'zero', 'values', 'in', 'each', 'column', 'in', 'pandas', 'data', 'frame'], 'words': ['count', 'non', 'zero', 'values', 'in', 'each', 'column', 'in', 'pandas', 'data', 'frame'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'df.astype(bool).sum(axis=1)'}
Generated  translation
df. apply ( lambda x : x. isnan, axis = 0 ) 
--------- B -----------
{'intent': {'gloss': ['search', 'for', 'string', 'that', 'matches', 'regular', 'expression', 'pattern', 'str0', 'in', 'string', 'str1'], 'words': ['search', 'for', 'string', 'that', 'matches', 'regular', 'expression', 'pattern', 'str0', 'in', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '(?<!distillr)\\\\acrotray\\.exe', 'str1': 'c:\\somedir\\acrotray.exe'}, 'snippet': "re.search('str0', 'str1')"}
Generated  translation
re. search ('str0 ', str1 ). group ( 1 ) 
--------- B -----------
{'intent': {'gloss': ['loop', 'over', 'a', 'list', 'var0', 'if', 'sublists', 'length', 'equals', '3'], 'words': ['loop', 'over', 'a', 'list', 'var0', 'if', 'sublists', 'length', 'equals', '3'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylist'}, 'snippet': '[x for x in var0 if len(x) == 3]'}
Generated  translation
for item in var0 : pass 
--------- B -----------
{'intent': {'gloss': ['create', 'list', 'var0', 'containing', '100', 'instances', 'of', 'object', 'var1'], 'words': ['create', 'list', 'var0', 'containing', '100', 'instances', 'of', 'object', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'lst', 'var1': 'object'}, 'snippet': 'var0 = [var1() for i in range(100)]'}
Generated  translation
var0 = [ var1 for _ in range ( 100 ) ] 
--------- B -----------
{'intent': {'gloss': ['joining', 'data', 'from', 'dataframe', 'var0', 'with', 'data', 'from', 'dataframe', 'var1', 'based', 'on', 'matching', 'values', 'of', 'column', 'str0', 'in', 'both', 'dataframes'], 'words': ['joining', 'data', 'from', 'dataframe', 'var0', 'with', 'data', 'from', 'dataframe', 'var1', 'based', 'on', 'matching', 'values', 'of', 'column', 'str0', 'in', 'both', 'dataframes'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df1', 'var1': 'df2', 'str0': 'date_time'}, 'snippet': "var0.merge(var1, on='str0')"}
Generated  translation
s1 = pd. merge ( var0, var1, how ='inner ', on = ['str0'] ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'a', 'directory', 'var0', 'exists', 'and', 'create', 'it', 'if', 'necessary'], 'words': ['check', 'if', 'a', 'directory', 'var0', 'exists', 'and', 'create', 'it', 'if', 'necessary'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'path'}, 'snippet': 'distutils.dir_util.mkpath(var0)'}
Generated  translation
os. path. commonprefix ( ['var0 ', os. path. realpath ( var0 ) ] ) 
--------- B -----------
{'intent': {'gloss': ['access', 'a', 'tag', 'called', 'str0', 'in', 'beautifulsoup', 'var0'], 'words': ['access', 'a', 'tag', 'called', 'str0', 'in', 'beautifulsoup', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'name', 'var0': 'soup'}, 'snippet': "print(var0.find('str0').string)"}
Generated  translation
var0. find _ all ('str0') 
--------- B -----------
{'intent': {'gloss': ['get', 'index', 'of', 'rows', 'in', 'column', 'str0'], 'words': ['get', 'index', 'of', 'rows', 'in', 'column', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'boolcol'}, 'snippet': "df.loc[df['str0']]"}
Generated  translation
df ['str0']. index ('str0') 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'on', 'white', 'spaces'], 'words': ['split', 'string', 'var0', 'on', 'white', 'spaces'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'my_string'}, 'snippet': '""" """.join(var0.split())'}
Generated  translation
re. findall ('\ \ s + ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['shuffle', 'columns', 'of', 'an', 'numpy', 'array', 'str0'], 'words': ['shuffle', 'columns', 'of', 'an', 'numpy', 'array', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'r'}, 'snippet': 'np.random.shuffle(np.transpose(str0))'}
Generated  translation
np. argwhere ( np. all ( str0 = = [ str0 ], axis = ( 1, 2 ) ) ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'items', 'in', 'var0', 'to', 'integers'], 'words': ['convert', 'items', 'in', 'var0', 'to', 'integers'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 't1'}, 'snippet': 't2 = [map(int, x) for x in var0]'}
Generated  translation
int ( str ( i ) for i in var0 ) 
--------- B -----------
{'intent': {'gloss': ['encode', 'string', 'str0'], 'words': ['encode', 'string', 'str0'], 'after': [' ', ' ', '']}, 'slot_map': {'str0': 'data to be encoded'}, 'snippet': "encoded = base64.b64encode('str0')"}
Generated  translation
" " " str0 " " ". encode ('latin - 1') 
--------- B -----------
{'intent': {'gloss': ['encode', 'a', 'string', 'str0', 'to', 'var0', 'encoding'], 'words': ['encode', 'a', 'string', 'str0', 'to', 'var0', 'encoding'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'data to be encoded', 'var0': 'ascii'}, 'snippet': "encoded = 'str0'.encode('var0')"}
Generated  translation
var0. encode ('str0') 
--------- B -----------
{'intent': {'gloss': ['convert', 'unicode', 'string', 'ustr0', 'into', 'dictionary'], 'words': ['convert', 'unicode', 'string', 'ustr0', 'into', 'dictionary'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "{'code1':1,'code2':1}", '{ str0 }': "{'code1':1,'code2':1}"}, 'snippet': "d = ast.literal_eval('str0')"}
Generated  translation
dict ( map ( int, x. split (':') ) for x in s. split ( ',') ) 
--------- B -----------
{'intent': {'gloss': ['open', 'a', 'file', 'str0', 'in', 'write', 'mode'], 'words': ['open', 'a', 'file', 'str0', 'in', 'write', 'mode'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'path/to/file_name.ext'}, 'snippet': "new_file = open('str0', 'w')"}
Generated  translation
output = open ('str0 ','wb') 
--------- B -----------
{'intent': {'gloss': ['convert', 'tuple', 'of', 'tuples', 'str0', 'to', 'list', 'in', 'one', 'line'], 'words': ['convert', 'tuple', 'of', 'tuples', 'str0', 'to', 'list', 'in', 'one', 'line'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "(('aa',), ('bb',), ('cc',))", '( str0 )': "(('aa',), ('bb',), ('cc',))"}, 'snippet': 'map(lambda a: a[0], ( str0 ))'}
Generated  translation
[ list ( t ) for t in str0 ] 
--------- B -----------
{'intent': {'gloss': ['plotting', 'stacked', 'barplots', 'on', 'a', 'panda', 'data', 'frame'], 'words': ['plotting', 'stacked', 'barplots', 'on', 'a', 'panda', 'data', 'frame'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "df.plot(kind='barh', stacked=true)"}
Generated  translation
df. apply ( lambda x : x. tolist ( ) ) 
--------- B -----------
{'intent': {'gloss': ['rotate', 'the', 'xtick', 'labels', 'of', 'matplotlib', 'plot', 'var0', 'by', 'str0', 'degrees', 'to', 'make', 'long', 'labels', 'readable'], 'words': ['rotate', 'the', 'xtick', 'labels', 'of', 'matplotlib', 'plot', 'var0', 'by', 'str0', 'degrees', 'to', 'make', 'long', 'labels', 'readable'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'ax', 'str0': '45'}, 'snippet': 'var0.set_xticklabels(labels, rotation=45)'}
Generated  translation
var0. groupby ('colour'). size ( ). strftime ('% y - % m - % d') 
--------- B -----------
{'intent': {'gloss': ['pandas', 'dataframe', 'get', 'first', 'row', 'of', 'each', 'group', 'by', 'str0'], 'words': ['pandas', 'dataframe', 'get', 'first', 'row', 'of', 'each', 'group', 'by', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'id'}, 'snippet': "df.groupby('str0').first()"}
Generated  translation
pd. concat ( [ df0. head ( 1 ), axis = 1 ) ], axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['call', 'a', 'subprocess', 'with', 'arguments', 'str0', 'that', 'may', 'contain', 'spaces'], 'words': ['call', 'a', 'subprocess', 'with', 'arguments', 'str0', 'that', 'may', 'contain', 'spaces'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'c:\\program files\\vmware\\vmware server\\vmware-cmd.bat'}, 'snippet': "subprocess.popen(['str0'])"}
Generated  translation
subprocess. call ( [ str0 ] ) 
--------- B -----------
{'intent': {'gloss': ['reverse', 'sort', 'counter', 'var0', 'by', 'values'], 'words': ['reverse', 'sort', 'counter', 'var0', 'by', 'values'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'sorted(var0, key=var0.get, reverse=true)'}
Generated  translation
sorted ( var0, key = var0. get ) 
--------- B -----------
{'intent': {'gloss': ['append', 'a', 'numpy', 'array', 'str0', 'to', 'a', 'numpy', 'array', 'str1'], 'words': ['append', 'a', 'numpy', 'array', 'str0', 'to', 'a', 'numpy', 'array', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'b', 'str1': 'a'}, 'snippet': 'np.vstack((str1, str0))'}
Generated  translation
np. zeros ( ( str0 ) ) + np. array ( [ str1 ] ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'lists', 'str0', 'such', 'that', 'third', 'row', 'comes', 'first'], 'words': ['sort', 'a', 'list', 'of', 'lists', 'str0', 'such', 'that', 'third', 'row', 'comes', 'first'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'c2'}, 'snippet': 'str0.sort(key=lambda row: row[2])'}
Generated  translation
sorted ( [ str0 ], key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'elements', 'from', 'list', 'var0', ',', 'that', 'have', 'a', 'field', 'var1', 'value', '30'], 'words': ['get', 'elements', 'from', 'list', 'var0', ',', 'that', 'have', 'a', 'field', 'var1', 'value', '30'], 'after': [' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylist', 'var1': 'n'}, 'snippet': '[x for x in var0 if x.var1 == 30]'}
Generated  translation
[ key for item in var0 if var1 = = 30 ] 
--------- B -----------
{'intent': {'gloss': ['execute', 'script', 'str0', 'using', 'str1', 'shell'], 'words': ['execute', 'script', 'str0', 'using', 'str1', 'shell'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'script.ps1', 'str1': 'powershell.exe'}, 'snippet': "os.system('str1', 'str0')"}
Generated  translation
os. system ('str0') 
--------- B -----------
{'intent': {'gloss': ['concatenate', 'items', 'of', 'list', 'var0', 'with', 'a', 'space', 'str0'], 'words': ['concatenate', 'items', 'of', 'list', 'var0', 'with', 'a', 'space', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l', 'str0': ''}, 'snippet': "print(' '.join(map(str, var0)))"}
Generated  translation
[ x for x in var0 if x not in [ str0 ] ] 
--------- B -----------
{'intent': {'gloss': ['set', 'pythonpath', 'in', 'python', 'script', '.'], 'words': ['set', 'pythonpath', 'in', 'python', 'script', '.'], 'after': [' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "sys.path.append('/path/to/whatever')"}
Generated  translation
subprocess. call ( ['test. sh ', str ( domid ) ] ) 
--------- B -----------
{'intent': {'gloss': ['running', 'bash', 'script', 'str0'], 'words': ['running', 'bash', 'script', 'str0'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {'str0': 'sleep.sh'}, 'snippet': "subprocess.call('str0', shell=true)"}
Generated  translation
subprocess. call ('str0 ', shell = true ) 
--------- B -----------
{'intent': {'gloss': ['write', 'the', 'elements', 'of', 'list', 'var0', 'concatenated', 'by', 'special', 'character', 'str0', 'to', 'file', 'var1'], 'words': ['write', 'the', 'elements', 'of', 'list', 'var0', 'concatenated', 'by', 'special', 'character', 'str0', 'to', 'file', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'lines', 'str0': '\n', 'var1': 'myfile'}, 'snippet': "var1.write('str0'.join(var0))"}
Generated  translation
with open ('str0 ','str0') as f : var1. write ('str0') 
--------- B -----------
{'intent': {'gloss': ['merge', 'list', 'str0', 'and', 'list', 'str1', 'and', 'list', 'str2', 'into', 'one', 'list'], 'words': ['merge', 'list', 'str0', 'and', 'list', 'str1', 'and', 'list', 'str2', 'into', 'one', 'list'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "['it']", 'str1': "['was']", 'str2': "['annoying']", '[ str0 ]': "['it']", '[ str1 ]': "['was']", '[ str2 ]': "['annoying']"}, 'snippet': '[ str0 ] + [ str1 ] + [ str2 ]'}
Generated  translation
[ [ str0 ] for a in zip ( [ str1 ], [ str2 ] ) ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'index', 'at', 'level', '0', 'into', 'a', 'column', 'in', 'dataframe', 'var0'], 'words': ['convert', 'index', 'at', 'level', '0', 'into', 'a', 'column', 'in', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': 'var0.reset_index(level=0, inplace=true)'}
Generated  translation
var0. drop ( var0. columns [ 0 ], axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'the', 'first', 'row', 'of', 'numpy', 'matrix', 'var0', 'to', 'a', 'list'], 'words': ['convert', 'the', 'first', 'row', 'of', 'numpy', 'matrix', 'var0', 'to', 'a', 'list'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'numpy.array(var0)[0].tolist()'}
Generated  translation
numpy. loadtxt ( var0, var0 ) 
--------- B -----------
{'intent': {'gloss': ['how', 'do', 'i', 'sum', 'the', 'first', 'value', 'in', 'each', 'tuple', 'in', 'a', 'list', 'of', 'tuples', 'in', 'python', '?'], 'words': ['how', 'do', 'i', 'sum', 'the', 'first', 'value', 'in', 'each', 'tuple', 'in', 'a', 'list', 'of', 'tuples', 'in', 'python', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'sum([pair[0] for pair in list_of_pairs])'}
Generated  translation
[ sum ( x [ 0 ] for x in var0 ) ] 
--------- B -----------
{'intent': {'gloss': ['run', 'r', 'script', 'str0'], 'words': ['run', 'r', 'script', 'str0'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {'str0': '/usr/bin/rscript --vanilla /pathto/myrscript.r'}, 'snippet': "subprocess.call('str0', shell=true)"}
Generated  translation
run ('str0') 
--------- B -----------
{'intent': {'gloss': ['read', 'a', 'file', 'var0', 'without', 'newlines'], 'words': ['read', 'a', 'file', 'var0', 'without', 'newlines'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'file'}, 'snippet': "[line.rstrip('\\n') for line in var0]"}
Generated  translation
with open ( var0 ) as f : var0 = f. readlines ( ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'item', 'at', 'index', '0', 'from', 'the', 'tuple', 'that', 'has', 'maximum', 'value', 'at', 'index', '1', 'in', 'list', 'var0'], 'words': ['get', 'the', 'item', 'at', 'index', '0', 'from', 'the', 'tuple', 'that', 'has', 'maximum', 'value', 'at', 'index', '1', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'lis'}, 'snippet': 'max(var0, key=itemgetter(1))[0]'}
Generated  translation
max ( var0, key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'lis', 'var0', 'in', 'ascending', 'order', 'based', 'on', 'the', 'degrees', 'value', 'of', 'its', 'elements'], 'words': ['sort', 'lis', 'var0', 'in', 'ascending', 'order', 'based', 'on', 'the', 'degrees', 'value', 'of', 'its', 'elements'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list5'}, 'snippet': 'sorted(var0, lambda x: (degree(x), x))'}
Generated  translation
sorted ( list ( var0. items ( ) ), key = operator. itemgetter ( 1 ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'new', 'list', 'var0by', 'removing', 'empty', 'list', 'from', 'a', 'list', 'of', 'lists', 'var1'], 'words': ['get', 'a', 'new', 'list', 'var0by', 'removing', 'empty', 'list', 'from', 'a', 'list', 'of', 'lists', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list2', 'var1': 'list1'}, 'snippet': 'var0 = [x for x in var1 if x != []]'}
Generated  translation
var0 = [ x for x in var1 if x ] 
--------- B -----------
{'intent': {'gloss': ['match', 'regex', 'str0', 'with', 'string', 'str1'], 'words': ['match', 'regex', 'str0', 'with', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '\\((.*?)\\)|(\\w)', 'str1': '(zyx)bc'}, 'snippet': "re.findall('str0', 'str1')"}
Generated  translation
re. match ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['initialize', 'var0', 'in', 'flask', 'config', 'with', 'str0'], 'words': ['initialize', 'var0', 'in', 'flask', 'config', 'with', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'secret_key', 'str0': 'your_secret_string'}, 'snippet': "app.config['var0'] = 'str0'"}
Generated  translation
config = var0 ['str0'] 
--------- B -----------
{'intent': {'gloss': ['write', 'bytes', 'var0', 'to', 'a', 'file', 'var1', 'in', 'python', '3'], 'words': ['write', 'bytes', 'var0', 'to', 'a', 'file', 'var1', 'in', 'python', '3'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'bytes_', 'var1': 'filename'}, 'snippet': "open('var1', 'wb').write(var0)"}
Generated  translation
open ( var1,'r'). write ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['eliminate', 'all', 'strings', 'from', 'list', 'var0'], 'words': ['eliminate', 'all', 'strings', 'from', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'lst'}, 'snippet': '[element for element in var0 if isinstance(element, int)]'}
Generated  translation
var0. replace ('','' ) 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'list', 'of', 'all', 'keys', 'in', 'cassandra', 'database', 'var0', 'with', 'pycassa'], 'words': ['get', 'a', 'list', 'of', 'all', 'keys', 'in', 'cassandra', 'database', 'var0', 'with', 'pycassa'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'cf'}, 'snippet': 'list(var0.get_range().get_keys())'}
Generated  translation
[ dict ( cassandra, x ) for x in var0. keys ( ) ] 
--------- B -----------
{'intent': {'gloss': ['choose', 'a', 'random', 'file', 'from', 'the', 'directory', 'contents', 'of', 'the', 'c', 'drive', ',', 'str0'], 'words': ['choose', 'a', 'random', 'file', 'from', 'the', 'directory', 'contents', 'of', 'the', 'c', 'drive', ',', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '']}, 'slot_map': {'str0': 'c:\\'}, 'snippet': "random.choice(os.listdir('str0'))"}
Generated  translation
print ( random. load ('str0') ) 
--------- B -----------
{'intent': {'gloss': ['send', 'a', 'signal', 'str0', 'to', 'the', 'current', 'process'], 'words': ['send', 'a', 'signal', 'str0', 'to', 'the', 'current', 'process'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'signal.sigusr1'}, 'snippet': 'os.kill(os.getpid(), signal.sigusr1)'}
Generated  translation
sys. path. getmtime ('str0') 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'string', 'var0', 'with', 'dot', 'and', 'comma', 'into', 'a', 'float', 'number', 'var1'], 'words': ['convert', 'a', 'string', 'var0', 'with', 'dot', 'and', 'comma', 'into', 'a', 'float', 'number', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'my_string', 'var1': 'my_float'}, 'snippet': "var1 = float(var0.replace(',', ''))"}
Generated  translation
var1 = [ float ( item ) for item in var0. split ( ',') ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'string', 'str0', 'with', 'dot', 'and', 'comma', 'into', 'a', 'floating', 'number'], 'words': ['convert', 'a', 'string', 'str0', 'with', 'dot', 'and', 'comma', 'into', 'a', 'floating', 'number'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '123,456.908'}, 'snippet': "float('str0'.replace(',', ''))"}
Generated  translation
" " " str0 " " ". join ( [ str0 ] ) 
--------- B -----------
{'intent': {'gloss': ['make', 'a', 'comma', '-', 'separated', 'string', 'from', 'a', 'list', 'var0'], 'words': ['make', 'a', 'comma', '-', 'separated', 'string', 'from', 'a', 'list', 'var0'], 'after': [' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylist'}, 'snippet': "var0 = ','.join(map(str, var0))"}
Generated  translation
[ item. split ( ) for item in var0. split ( ',') ] 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'list', 'of', 'integers', 'by', 'splitting', 'a', 'string', 'var0', 'with', 'comma'], 'words': ['get', 'a', 'list', 'of', 'integers', 'by', 'splitting', 'a', 'string', 'var0', 'with', 'comma'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'user'}, 'snippet': "[int(s) for s in var0.split(',')]"}
Generated  translation
[ int ( x ) for x in var0. split ( ',') ] 
--------- B -----------
{'intent': {'gloss': ['combine', 'lists', 'var0', 'and', 'var1', 'by', 'alternating', 'their', 'elements'], 'words': ['combine', 'lists', 'var0', 'and', 'var1', 'by', 'alternating', 'their', 'elements'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l1', 'var1': 'l2'}, 'snippet': '[val for pair in zip(var0, var1) for val in pair]'}
Generated  translation
zip ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['retrieve', 'each', 'line', 'from', 'a', 'file', 'str0', 'as', 'a', 'list'], 'words': ['retrieve', 'each', 'line', 'from', 'a', 'file', 'str0', 'as', 'a', 'list'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'file.txt'}, 'snippet': "[line.split() for line in open('str0')]"}
Generated  translation
with open ('str0 ','r') as f : f. write ('\ n') 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'dictionary', 'var0', 'by', 'the', 'key', 'var1'], 'words': ['sort', 'a', 'list', 'of', 'dictionary', 'var0', 'by', 'the', 'key', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylist', 'var1': 'title'}, 'snippet': "var0.sort(key=lambda x: x['var1'])"}
Generated  translation
sorted ( var0, key = lambda x : var1 [ x ] ['var0'] ) 
--------- B -----------
{'intent': {'gloss': ['find', 'the', 'first', 'element', 'of', 'the', 'tuple', 'with', 'the', 'maximum', 'second', 'element', 'in', 'a', 'list', 'of', 'tuples', 'var0'], 'words': ['find', 'the', 'first', 'element', 'of', 'the', 'tuple', 'with', 'the', 'maximum', 'second', 'element', 'in', 'a', 'list', 'of', 'tuples', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'lis'}, 'snippet': 'max(var0, key=lambda item: item[1])[0]'}
Generated  translation
max ( var0, key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['add', 'color', 'bar', 'with', 'image', 'var0', 'to', 'plot', 'var1'], 'words': ['add', 'color', 'bar', 'with', 'image', 'var0', 'to', 'plot', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mappable', 'var1': 'plt'}, 'snippet': 'var1.colorbar(var0=var0, cax=ax3)'}
Generated  translation
var1. update ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['generate', 'all', '2', '-', 'element', 'subsets', 'of', 'tuple', 'str0'], 'words': ['generate', 'all', '2', '-', 'element', 'subsets', 'of', 'tuple', 'str0'], 'after': [' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '(1, 2, 3)', '( str0 )': '(1, 2, 3)'}, 'snippet': 'list(itertools.combinations(( str0 ), 2))'}
Generated  translation
print ( [ ( x, y ) for x, y in zip ( str0, str0 [ 1 : : 2 ] ) ] ) 
--------- B -----------
{'intent': {'gloss': ['how', 'do', 'i', 'insert', 'into', 't1', '(', 'select', '*', 'from', 't2', ')', 'in', 'sqlalchemy', '?'], 'words': ['how', 'do', 'i', 'insert', 'into', 't1', '(', 'select', '*', 'from', 't2', ')', 'in', 'sqlalchemy', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', '', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "session.execute('insert into t1 (select * from t2)')"}
Generated  translation
cursor. execute ('insert into t1 select * from table1 values (? ) ', { } ) 
--------- B -----------
{'intent': {'gloss': ['print', 'new', 'line', 'character', 'as', 'str0', 'in', 'a', 'string', 'str1'], 'words': ['print', 'new', 'line', 'character', 'as', 'str0', 'in', 'a', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '\n', 'str1': 'foo\nbar'}, 'snippet': "print('str1'.encode('string_escape'))"}
Generated  translation
print ('str1') 
--------- B -----------
{'intent': {'gloss': ['calculate', 'the', 'mean', 'of', 'each', 'element', 'in', 'array', 'var0', 'with', 'the', 'element', 'previous', 'to', 'it'], 'words': ['calculate', 'the', 'mean', 'of', 'each', 'element', 'in', 'array', 'var0', 'with', 'the', 'element', 'previous', 'to', 'it'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': '(var0[1:] + var0[:-1]) / 2'}
Generated  translation
np. mean ( var0, axis = 1 ). mean ( ) 
--------- B -----------
{'intent': {'gloss': ['count', 'number', 'of', 'times', 'string', 'str0', 'occurred', 'in', 'string', 'str1'], 'words': ['count', 'number', 'of', 'times', 'string', 'str0', 'occurred', 'in', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'brown', 'str1': 'the big brown fox is brown'}, 'snippet': '"""str1""".count(\'str0\')'}
Generated  translation
" " " str1 " " ". count ('str0') 
--------- B -----------
{'intent': {'gloss': ['download', 'the', 'file', 'from', 'url', 'var0', 'and', 'save', 'it', 'under', 'file', 'var1'], 'words': ['download', 'the', 'file', 'from', 'url', 'var0', 'and', 'save', 'it', 'under', 'file', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'url', 'var1': 'file_name'}, 'snippet': 'urllib.request.urlretrieve(var0, var1)'}
Generated  translation
urllib. request. urlretrieve ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'tuples', 'var0', 'by', 'third', 'item', 'in', 'the', 'tuple'], 'words': ['sort', 'a', 'list', 'of', 'tuples', 'var0', 'by', 'third', 'item', 'in', 'the', 'tuple'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'b'}, 'snippet': 'var0.sort(key=lambda x: x[1][2])'}
Generated  translation
var0. sort ( key = lambda x : x [ 2 ] ) 
--------- B -----------
{'intent': {'gloss': ['subtract', '13', 'from', 'every', 'number', 'in', 'a', 'list', 'var0'], 'words': ['subtract', '13', 'from', 'every', 'number', 'in', 'a', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'var0[:] = [(x - 13) for x in var0]'}
Generated  translation
[ ( x + 13 ) for x, y in zip ( var0, var0 [ 1 : ] ) ] 
--------- B -----------
{'intent': {'gloss': ['capture', 'final', 'output', 'of', 'a', 'chain', 'of', 'system', 'commands', 'str0'], 'words': ['capture', 'final', 'output', 'of', 'a', 'chain', 'of', 'system', 'commands', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'ps -ef | grep something | wc -l'}, 'snippet': "subprocess.check_output('str0', shell=true)"}
Generated  translation
print ( os. environ. get ('str0') ) 
--------- B -----------
{'intent': {'gloss': ['sending', 'http', 'headers', 'to', 'var0'], 'words': ['sending', 'http', 'headers', 'to', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'client'}, 'snippet': "var0.send('http/1.0 200 ok\\r\\n')"}
Generated  translation
r = requests. get ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['subscript', 'text', 'str0', 'with', 'str1', 'as', 'subscripted', 'in', 'matplotlib', 'labels', 'for', 'arrays', 'str2', 'and', 'str3', '.'], 'words': ['subscript', 'text', 'str0', 'with', 'str1', 'as', 'subscripted', 'in', 'matplotlib', 'labels', 'for', 'arrays', 'str2', 'and', 'str3', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'h20', 'str1': '2', 'str2': 'x', 'str3': 'y'}, 'snippet': "plt.plot(str2, str3, label='h₂o')"}
Generated  translation
ax. set _ yticklabels ( ['str2 ','str3'] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'largest', 'key', 'whose', 'not', 'associated', 'with', 'value', 'of', '0', 'in', 'dictionary', 'var0'], 'words': ['get', 'the', 'largest', 'key', 'whose', 'not', 'associated', 'with', 'value', 'of', '0', 'in', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': '(k for k, v in var0.items() if v != 0)'}
Generated  translation
max ( var0, key = lambda x : abs ( x [ 1 ] ) if x [ 0 ] else x [ 0 ] ) 
--------- B -----------
{'intent': {'gloss': ['decode', 'string', 'str0', 'into', 'a', 'normal', 'string'], 'words': ['decode', 'string', 'str0', 'into', 'a', 'normal', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '\\x89\\n'}, 'snippet': '"""str0""".decode(\'string_escape\')'}
Generated  translation
str0. decode ('str0') 
--------- B -----------
{'intent': {'gloss': ['find', 'last', 'occurrence', 'of', 'character', 'str0', 'in', 'string', 'str1'], 'words': ['find', 'last', 'occurrence', 'of', 'character', 'str0', 'in', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '}', 'str1': 'abcd}def}'}, 'snippet': '"""str1""".rfind(\'str0\')'}
Generated  translation
re. findall ('str1 ','str0') 
--------- B -----------
{'intent': {'gloss': ['reverse', 'list', 'var0', 'based', 'on', 'the', 'var1', 'attribute', 'of', 'each', 'object'], 'words': ['reverse', 'list', 'var0', 'based', 'on', 'the', 'var1', 'attribute', 'of', 'each', 'object'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'ut', 'var1': 'count'}, 'snippet': 'var0.sort(key=lambda x: x.var1, reverse=true)'}
Generated  translation
var0. get ( key = lambda x : x. var1 ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'objects', 'var0', 'in', 'reverse', 'order', 'by', 'their', 'var1', 'property'], 'words': ['sort', 'a', 'list', 'of', 'objects', 'var0', 'in', 'reverse', 'order', 'by', 'their', 'var1', 'property'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'ut', 'var1': 'count'}, 'snippet': 'var0.sort(key=lambda x: x.var1, reverse=true)'}
Generated  translation
var0. sort ( key = lambda x : x. var1 ) 
--------- B -----------
{'intent': {'gloss': ['return', 'var0', 'if', 'string', 'var1', 'contains', 'regex', 'str0'], 'words': ['return', 'var0', 'if', 'string', 'var1', 'contains', 'regex', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'true', 'var1': 'foobarrrr', 'str0': 'ba[rzd]'}, 'snippet': "bool(re.search('str0', 'var1'))"}
Generated  translation
var0 = re. sub ('str0 ','', var1 ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'any', 'key', 'in', 'the', 'dictionary', 'var0', 'starts', 'with', 'the', 'string', 'str0'], 'words': ['check', 'if', 'any', 'key', 'in', 'the', 'dictionary', 'var0', 'starts', 'with', 'the', 'string', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'dict1', 'str0': 'emp$$'}, 'snippet': "any(key.startswith('str0') for key in var0)"}
Generated  translation
any ('str0'in list ( var0. items ( ) ) ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'var0', 'of', 'dicts', 'by', 'dict', 'value', 'str0'], 'words': ['sort', 'a', 'list', 'var0', 'of', 'dicts', 'by', 'dict', 'value', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l', 'str0': 'title'}, 'snippet': "var0.sort(key=lambda x: x['str0'])"}
Generated  translation
sorted ( var0, key = lambda x : x ['str0'] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'position', 'of', 'item', 'var0', 'in', 'list', 'var1'], 'words': ['get', 'the', 'position', 'of', 'item', 'var0', 'in', 'list', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'element', 'var1': 'testlist'}, 'snippet': 'try:\n    print(var1.index(var0))\nexcept valueerror:\n    pass'}
Generated  translation
print ( var1. get ( var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['how', 'do', 'i', 'perform', 'secondary', 'sorting', 'in', 'python', '?'], 'words': ['how', 'do', 'i', 'perform', 'secondary', 'sorting', 'in', 'python', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'sorted(list5, key=lambda vertex: (degree(vertex), vertex))'}
Generated  translation
sorted ( enumerate ( a ), key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['append', 'each', 'line', 'in', 'file', 'var0', 'into', 'a', 'list'], 'words': ['append', 'each', 'line', 'in', 'file', 'var0', 'into', 'a', 'list'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'myfile'}, 'snippet': "[x for x in var0.splitlines() if x != '']"}
Generated  translation
with open ( var0 ) as f : f. write ('\ n '. join ( var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'symbols', 'from', 'a', 'string', 'var0'], 'words': ['remove', 'symbols', 'from', 'a', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': "re.sub('[^\\\\w]', ' ', var0)"}
Generated  translation
re. sub ('< [ ^ > ] * > ','', var0 ) 
--------- B -----------
{'intent': {'gloss': ['count', 'the', 'number', 'of', 'keys', 'in', 'dictionary', 'var0'], 'words': ['count', 'the', 'number', 'of', 'keys', 'in', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'yourdictfile'}, 'snippet': 'len(set(open(var0).read().split()))'}
Generated  translation
sum ( len ( x ) for x in var0. split ( ) ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'escape', 'character', 'from', 'string', 'str0'], 'words': ['remove', 'escape', 'character', 'from', 'string', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '\\a'}, 'snippet': '"""str0""".decode(\'string_escape\')'}
Generated  translation
" " " " " ". join ( filter ( str. isdigit,'str0') ) 
--------- B -----------
{'intent': {'gloss': ['numpy', 'concatenate', 'two', 'arrays', 'var0', 'and', 'var1', 'along', 'the', 'first', 'axis'], 'words': ['numpy', 'concatenate', 'two', 'arrays', 'var0', 'and', 'var1', 'along', 'the', 'first', 'axis'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'b'}, 'snippet': 'print(concatenate((var0, var1), axis=0))'}
Generated  translation
numpy. concatenate ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['numpy', 'concatenate', 'two', 'arrays', 'var0', 'and', 'var1', 'along', 'the', 'second', 'axis'], 'words': ['numpy', 'concatenate', 'two', 'arrays', 'var0', 'and', 'var1', 'along', 'the', 'second', 'axis'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'b'}, 'snippet': 'print(concatenate((var0, var1), axis=1))'}
Generated  translation
numpy. concatenate ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['fetch', 'address', 'information', 'for', 'host', 'str0', 'ion', 'port', '80'], 'words': ['fetch', 'address', 'information', 'for', 'host', 'str0', 'ion', 'port', '80'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'google.com'}, 'snippet': "print(socket.getaddrinfo('str0', 80))"}
Generated  translation
sys. path. insert ( 0,'str0') 
--------- B -----------
{'intent': {'gloss': ['flask', 'set', 'folder', 'str0', 'as', 'the', 'default', 'template', 'folder'], 'words': ['flask', 'set', 'folder', 'str0', 'as', 'the', 'default', 'template', 'folder'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'wherever'}, 'snippet': "flask(__name__, template_folder='str0')"}
Generated  translation
webbrowser. open ('str0') 
--------- B -----------
{'intent': {'gloss': ['delete', 'all', 'instances', 'of', 'a', 'character', 'str0', 'in', 'a', 'string', 'str1'], 'words': ['delete', 'all', 'instances', 'of', 'a', 'character', 'str0', 'in', 'a', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'i', 'str1': 'it is icy'}, 'snippet': "re.sub('str0', '', 'str1')"}
Generated  translation
re. sub ('[ ^ a - za - z ] ','','str1') 
--------- B -----------
{'intent': {'gloss': ['django', 'filter', 'by', 'hour'], 'words': ['django', 'filter', 'by', 'hour'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "entry.objects.filter(pub_date__contains='08:00')"}
Generated  translation
driver. find _ element _ by _ xpath ( " / / * [ @ id ='one'] " ). click ( ) 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'multi', '-', 'line', 'string', 'str0', 'by', 'new', 'line', 'character', 'str1'], 'words': ['split', 'a', 'multi', '-', 'line', 'string', 'str0', 'by', 'new', 'line', 'character', 'str1'], 'after': [' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'a \n b \r\n c', 'str1': '\n'}, 'snippet': "' a \\n b \\r\\n c '.split('str1')"}
Generated  translation
re. split ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['remove', 'substring', 'str0', 'from', 'a', 'string', 'str1'], 'words': ['remove', 'substring', 'str0', 'from', 'a', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'bag,', 'str1': 'lamp, bag, mirror'}, 'snippet': "print('str1'.replace('str0', ''))"}
Generated  translation
" " " str1 " " ". replace ('str0 ','' ) 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'string', 'var0', 'by', 'last', 'occurrence', 'of', 'character', 'str0'], 'words': ['split', 'a', 'string', 'var0', 'by', 'last', 'occurrence', 'of', 'character', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x', 'str0': '-'}, 'snippet': "print(var0.rpartition('str0')[0])"}
Generated  translation
re. split ('str0 ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'last', 'part', 'of', 'a', 'string', 'before', 'the', 'character', 'str0'], 'words': ['get', 'the', 'last', 'part', 'of', 'a', 'string', 'before', 'the', 'character', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '-'}, 'snippet': "print(x.rsplit('str0', 1)[0])"}
Generated  translation
re. findall ('\ \. [ ^. ] + ','str0') 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'random', 'list', 'of', 'integers'], 'words': ['create', 'a', 'random', 'list', 'of', 'integers'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': '[int(1000 * random.random()) for i in range(10000)]'}
Generated  translation
[ int ( x ) for x in range ( 100 ) ] 
--------- B -----------
{'intent': {'gloss': ['google', 'app', 'engine', 'execute', 'gql', 'query', 'str0', 'with', 'parameter', 'str1'], 'words': ['google', 'app', 'engine', 'execute', 'gql', 'query', 'str0', 'with', 'parameter', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'select * from schedule where station = $1', 'str1': 'foo.key()'}, 'snippet': "db.gqlquery('str0', foo.key())"}
Generated  translation
urllib. request. urlretrieve ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'string', 'into', 'datetime', 'using', 'the', 'format', 'str0'], 'words': ['convert', 'a', 'string', 'into', 'datetime', 'using', 'the', 'format', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '%y-%m-%d %h:%m:%s.%f'}, 'snippet': "datetime.datetime.strptime(string_date, 'str0')"}
Generated  translation
datetime. strptime ('str0 ','str0') 
--------- B -----------
{'intent': {'gloss': ['find', 'the', 'key', 'associated', 'with', 'the', 'largest', 'value', 'in', 'dictionary', 'var0', 'whilst', 'key', 'is', 'non', '-', 'zero', 'value'], 'words': ['find', 'the', 'key', 'associated', 'with', 'the', 'largest', 'value', 'in', 'dictionary', 'var0', 'whilst', 'key', 'is', 'non', '-', 'zero', 'value'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'max(k for k, v in var0.items() if v != 0)'}
Generated  translation
max ( var0, key = lambda x : ( abs ( x [ 1 ] ), x [ 0 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'largest', 'key', 'in', 'a', 'dictionary', 'var0', 'with', 'non', '-', 'zero', 'value'], 'words': ['get', 'the', 'largest', 'key', 'in', 'a', 'dictionary', 'var0', 'with', 'non', '-', 'zero', 'value'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'max(k for k, v in var0.items() if v != 0)'}
Generated  translation
max ( abs ( x - y ) for x, y in var0. items ( ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'index', 'of', 'rows', 'in', 'dataframe', 'var0', 'which', 'column', 'str0', 'matches', 'value', 'true'], 'words': ['get', 'index', 'of', 'rows', 'in', 'dataframe', 'var0', 'which', 'column', 'str0', 'matches', 'value', 'true'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'boolcol'}, 'snippet': "var0[var0['str0']].index.tolist()"}
Generated  translation
var0. loc [ var0 ['str0']. isin ( var0 ) ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'pandas', 'index', 'in', 'a', 'dataframe', 'to', 'columns'], 'words': ['convert', 'pandas', 'index', 'in', 'a', 'dataframe', 'to', 'columns'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "df.reset_index(level=['tick', 'obs'])"}
Generated  translation
df. apply ( lambda x : x. columns, axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'html', 'from', 'the', 'current', 'web', 'page', 'of', 'a', 'selenium', 'driver'], 'words': ['get', 'the', 'html', 'from', 'the', 'current', 'web', 'page', 'of', 'a', 'selenium', 'driver'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "driver.execute_script('return document.documentelement.outerhtml;')"}
Generated  translation
driver. get ( ) 
--------- B -----------
{'intent': {'gloss': ['replacing', 'nan', 'in', 'the', 'dataframe', 'var0', 'with', 'row', 'average'], 'words': ['replacing', 'nan', 'in', 'the', 'dataframe', 'var0', 'with', 'row', 'average'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': 'var0.fillna(var0.mean(axis=1), axis=1)'}
Generated  translation
var0. fillna ( method ='ffill ', inplace = true ) 
--------- B -----------
{'intent': {'gloss': ['print', 'elements', 'of', 'list', 'var0', 'seperated', 'by', 'tabs', 'str0'], 'words': ['print', 'elements', 'of', 'list', 'var0', 'seperated', 'by', 'tabs', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list', 'str0': '\t'}, 'snippet': "print('str0'.join(map(str, var0)))"}
Generated  translation
print ('str0 '. join ( [ str0 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['print', 'unicode', 'string', 'str0', 'with', 'utf', '-', '8'], 'words': ['print', 'unicode', 'string', 'str0', 'with', 'utf', '-', '8'], 'after': [' ', ' ', ' ', ' ', ' ', '', '', '']}, 'slot_map': {'str0': 'Ð¿Ñ\x80Ð¸'}, 'snippet': "print('str0'.encode('raw_unicode_escape'))"}
Generated  translation
print ('str0 '. decode ('utf - 8') ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'words': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'testlist'}, 'snippet': '[i for i, x in enumerate(var0) if x == 1]'}
Generated  translation
print ( var0. shape [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'words': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'testlist'}, 'snippet': '[i for i, x in enumerate(var0) if x == 1]'}
Generated  translation
print ( var0. shape [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['django', 'response', 'with', 'json', 'var0'], 'words': ['django', 'response', 'with', 'json', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'data'}, 'snippet': "return httpresponse(var0, mimetype='application/json')"}
Generated  translation
content. objects. extra ( select = {'var0':'length ( name )'} ). order _ by ('~') 
--------- B -----------
{'intent': {'gloss': ['formate', 'each', 'string', 'cin', 'list', 'var0', 'into', 'pattern', 'str0'], 'words': ['formate', 'each', 'string', 'cin', 'list', 'var0', 'into', 'pattern', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'elements', 'str0': '%{0}%'}, 'snippet': "var0 = ['str0'.format(element) for element in var0]"}
Generated  translation
" " " str0 " " ". format ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['converting', 'two', 'lists', 'str0', 'and', 'str1', 'into', 'a', 'matrix'], 'words': ['converting', 'two', 'lists', 'str0', 'and', 'str1', 'into', 'a', 'matrix'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '[1, 2, 3]', 'str1': '[4, 5, 6]', '[ str0 ]': '[1, 2, 3]', '[ str1 ]': '[4, 5, 6]'}, 'snippet': 'np.column_stack(([ str0 ], [ str1 ]))'}
Generated  translation
numpy. merge ( [ str0, str1 ], [ str0 ] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'all', 'the', 'elements', 'except', 'strings', 'from', 'the', 'list', 'str0', '.'], 'words': ['get', 'all', 'the', 'elements', 'except', 'strings', 'from', 'the', 'list', 'str0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'lst'}, 'snippet': '[element for element in str0 if not isinstance(element, str)]'}
Generated  translation
[ i for i in str0 if i not in [ str0 ] ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'datetime', 'object', 'str0', 'to', 'seconds'], 'words': ['convert', 'datetime', 'object', 'str0', 'to', 'seconds'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '(1970, 1, 1)', '( str0 )': '(1970, 1, 1)'}, 'snippet': '(t - datetime.datetime( str0 )).total_seconds()'}
Generated  translation
datetime. datetime. strptime ('str0 ','% b % d, % y'). strftime ('% a') 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'highest', 'element', 'in', 'absolute', 'value', 'in', 'a', 'numpy', 'matrix', 'var0'], 'words': ['get', 'the', 'highest', 'element', 'in', 'absolute', 'value', 'in', 'a', 'numpy', 'matrix', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'max(var0.min(), var0.max(), key=abs)'}
Generated  translation
print ( max ( var0, key = operator. itemgetter ( 1 ) ) ) 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'string', 'var0', 'considering', 'the', 'spaces', 'str0'], 'words': ['split', 'a', 'string', 'var0', 'considering', 'the', 'spaces', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mystring', 'str0': ''}, 'snippet': "var0.replace(' ', '! !').split('!')"}
Generated  translation
re. split ('\ \ s + ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['how', 'to', 'convert', 'a', 'string', 'from', 'cp', '-', '1251', 'to', 'utf', '-', '8', '?'], 'words': ['how', 'to', 'convert', 'a', 'string', 'from', 'cp', '-', '1251', 'to', 'utf', '-', '8', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', '', '', '', '']}, 'slot_map': {}, 'snippet': "d.decode('cp1251').encode('utf8')"}
Generated  translation
" " " [UNK] " " ". encode ('utf - 8'). decode ('utf - 8') 
--------- B -----------
{'intent': {'gloss': ['python', 'save', 'list', 'var0', 'to', 'file', 'object', 'str0'], 'words': ['python', 'save', 'list', 'var0', 'to', 'file', 'object', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylist', 'str0': 'save.txt'}, 'snippet': "pickle.dump(var0, open('str0', 'wb'))"}
Generated  translation
var0. savefig ('str0') 
--------- B -----------
{'intent': {'gloss': ['search', 'for', 'occurrences', 'of', 'regex', 'pattern', 'str0', 'in', 'xml', 'string', 'var0'], 'words': ['search', 'for', 'occurrences', 'of', 'regex', 'pattern', 'str0', 'in', 'xml', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '>.*<', 'var0': 'line'}, 'snippet': "print(re.search('str0', var0).group(0))"}
Generated  translation
print ( var0. search ('str0'). group ( 1 ) ) 
--------- B -----------
{'intent': {'gloss': ['count', 'the', 'occurrences', 'of', 'items', 'in', 'list', 'var0'], 'words': ['count', 'the', 'occurrences', 'of', 'items', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': '[[x, var0.count(x)] for x in set(var0)]'}
Generated  translation
sum ( isinstance ( x, int ) for x in var0 ) 
--------- B -----------
{'intent': {'gloss': ['copy', 'all', 'values', 'in', 'a', 'column', 'str0', 'to', 'a', 'new', 'column', 'str1', 'in', 'a', 'pandas', 'data', 'frame', 'str2'], 'words': ['copy', 'all', 'values', 'in', 'a', 'column', 'str0', 'to', 'a', 'new', 'column', 'str1', 'in', 'a', 'pandas', 'data', 'frame', 'str2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'b', 'str1': 'd', 'str2': 'df'}, 'snippet': "str2['str1'] = str2['str0']"}
Generated  translation
str2 ['str0'] = df ['str1']. str ['str0'] 
--------- B -----------
{'intent': {'gloss': ['convert', 'string', 'var0', 'into', 'a', 'list', 'of', 'integers', 'var1'], 'words': ['convert', 'string', 'var0', 'into', 'a', 'list', 'of', 'integers', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'user_input', 'var1': 'user_list'}, 'snippet': "var1 = [int(number) for number in var0.split(',')]"}
Generated  translation
var1 = map ( int, var0. split ( ) ) 
--------- B -----------
{'intent': {'gloss': ['sorting', 'data', 'in', 'dataframe', 'pandas'], 'words': ['sorting', 'data', 'in', 'dataframe', 'pandas'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "df.sort_values(['system_num', 'dis'])"}
Generated  translation
df. sorting ( df. columns, axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'all', 'matches', 'with', 'regex', 'pattern', 'str0', 'in', 'list', 'of', 'string', 'var0'], 'words': ['get', 'all', 'matches', 'with', 'regex', 'pattern', 'str0', 'in', 'list', 'of', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '\\d+[xx]', 'var0': 'teststr'}, 'snippet': "[i for i in var0 if re.search('str0', i)]"}
Generated  translation
[ m. start ( ) for m in re. findall ('str0 ', var0 ) ] 
--------- B -----------
{'intent': {'gloss': ['resized', 'image', 'var0', 'to', 'width', ',', 'height', 'of', 'str0', 'with', 'filter', 'of', 'var1'], 'words': ['resized', 'image', 'var0', 'to', 'width', ',', 'height', 'of', 'str0', 'with', 'filter', 'of', 'var1'], 'after': [' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'image', 'str0': '(x, y)', 'var1': 'antialias', '( str0 )': '(x, y)'}, 'snippet': 'var0 = var0.resize(( str0 ), var0.var1)'}
Generated  translation
var0. reshape ( var0, - 1 ). size ( ) 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'list', 'of', 'integers', 'var0', 'from', 'a', 'file', 'str0'], 'words': ['get', 'a', 'list', 'of', 'integers', 'var0', 'from', 'a', 'file', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'lst', 'str0': 'filename.txt'}, 'snippet': "var0 = map(int, open('str0').readlines())"}
Generated  translation
var0 = open ('str0'). read ( ). split ( ) 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'at', 'every', 'space', 'followed', 'by', 'an', 'upper', '-', 'case', 'letter'], 'words': ['split', 'string', 'var0', 'at', 'every', 'space', 'followed', 'by', 'an', 'upper', '-', 'case', 'letter'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', '']}, 'slot_map': {'var0': 'input'}, 'snippet': "re.split('[ ](?=[a-z])', var0)"}
Generated  translation
re. findall ('\ \ [ (. *? ) \ \ ] ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['sorting', 'a', 'list', 'of', 'lists', 'in', 'python'], 'words': ['sorting', 'a', 'list', 'of', 'lists', 'in', 'python'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'c2.sort(key=lambda row: (row[2], row[1]))'}
Generated  translation
[ sorted ( item ) for item in var0 ] 
--------- B -----------
{'intent': {'gloss': ['delete', 'all', 'characters', 'str0', 'in', 'string', 'str1'], 'words': ['delete', 'all', 'characters', 'str0', 'in', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'i', 'str1': 'it is icy'}, 'snippet': '"""str1""".replace(\'str0\', \'\')'}
Generated  translation
" " " " " ". join ( filter ( str1,'str0') ) 
--------- B -----------
{'intent': {'gloss': ['sum', 'the', 'corresponding', 'decimal', 'values', 'for', 'binary', 'values', 'of', 'each', 'boolean', 'element', 'in', 'list', 'var0'], 'words': ['sum', 'the', 'corresponding', 'decimal', 'values', 'for', 'binary', 'values', 'of', 'each', 'boolean', 'element', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'sum(1 << i for i, b in enumerate(var0) if b)'}
Generated  translation
sum ( [ ( int ( x ) ) for x in bin ( var0 ) ] ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'dictionaries', 'var0', 'by', 'the', 'value', 'of', 'the', 'dictionary', 'key', 'var1'], 'words': ['sort', 'a', 'list', 'of', 'dictionaries', 'var0', 'by', 'the', 'value', 'of', 'the', 'dictionary', 'key', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list_to_be_sorted', 'var1': 'name'}, 'snippet': "newlist = sorted(var0, key=lambda k: k['var1'])"}
Generated  translation
sorted ( var0, key = lambda x : var1 [ x ] ['var0'] ) 
--------- B -----------
{'intent': {'gloss': ['write', 'var0', 'to', 'a', 'binary', 'file', 'var1'], 'words': ['write', 'var0', 'to', 'a', 'binary', 'file', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'newfilebytes', 'var1': 'newfile'}, 'snippet': "var1.write(struct.pack('5b', *var0))"}
Generated  translation
open ( var1,'r'). write ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['find', 'intersection', 'data', 'between', 'series', 'var0', 'and', 'series', 'var1'], 'words': ['find', 'intersection', 'data', 'between', 'series', 'var0', 'and', 'series', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's1', 'var1': 's2'}, 'snippet': 'pd.series(list(set(var0).intersection(set(var1))))'}
Generated  translation
var0. groupby ( np. arange ( len ( var1 ) ). size ( ) ) 
--------- B -----------
{'intent': {'gloss': ['format', 'string', 'str0', 'with', 'variables', 'var0', 'and', 'var1'], 'words': ['format', 'string', 'str0', 'with', 'variables', 'var0', 'and', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '({} goals, ${})', 'var0': 'goals', 'var1': 'penalties', '( str0 )': '({} goals, ${})'}, 'snippet': '"""str0""".format(self.var0, self.var1)'}
Generated  translation
" " " str0 " " ". format ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['combine', 'elements', 'of', 'each', 'list', 'in', 'list', 'var0', 'into', 'digits', 'of', 'a', 'single', 'integer'], 'words': ['combine', 'elements', 'of', 'each', 'list', 'in', 'list', 'var0', 'into', 'digits', 'of', 'a', 'single', 'integer'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': "[''.join(str(d) for d in x) for x in var0]"}
Generated  translation
map ( int,''. join ( [ str ( i ) for i in var0 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['substitute', 'ascii', 'letters', 'in', 'string', 'str0', 'with', 'empty', 'string', 'str1'], 'words': ['substitute', 'ascii', 'letters', 'in', 'string', 'str0', 'with', 'empty', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'aas30dsa20', 'str1': ''}, 'snippet': "re.sub('\\\\d', 'str1', 'str0')"}
Generated  translation
" " " str0 " " ". replace ( "'",'str1') 
--------- B -----------
{'intent': {'gloss': ['increment', 'a', 'value', 'with', 'leading', 'zeroes', 'in', 'a', 'number', 'var0'], 'words': ['increment', 'a', 'value', 'with', 'leading', 'zeroes', 'in', 'a', 'number', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'str(int(var0) + 1).zfill(len(var0))'}
Generated  translation
min ( var0, key = lambda x : abs ( x - 1 ) ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'a', 'pandas', 'dataframe', 'var0', "'", 's', 'index', 'is', 'sorted'], 'words': ['check', 'if', 'a', 'pandas', 'dataframe', 'var0', "'", 's', 'index', 'is', 'sorted'], 'after': [' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': 'all(var0.index[:-1] <= var0.index[1:])'}
Generated  translation
var0. groupby ('index'). size ( ). reset _ index ( drop = true ) 
--------- B -----------
{'intent': {'gloss': ['create', 'multidimensional', 'array', 'var0', 'with', '3', 'rows', 'and', '2', 'columns', 'in', 'python'], 'words': ['create', 'multidimensional', 'array', 'var0', 'with', '3', 'rows', 'and', '2', 'columns', 'in', 'python'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'matrix'}, 'snippet': 'var0 = [[a, b], [c, d], [e, f]]'}
Generated  translation
var0. groupby ( np. arange ( len ( var0. columns ) ), 2 ) 
--------- B -----------
{'intent': {'gloss': ['sorting', 'a', 'python', 'list', 'by', 'two', 'criteria'], 'words': ['sorting', 'a', 'python', 'list', 'by', 'two', 'criteria'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'sorted(list, key=lambda x: (x[0], -x[1]))'}
Generated  translation
sorted ( list ( data. items ( ) ), key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['click', 'a', 'href', 'button', 'having', 'text', 'str0', 'with', 'selenium'], 'words': ['click', 'a', 'href', 'button', 'having', 'text', 'str0', 'with', 'selenium'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'send inmail'}, 'snippet': "driver.findelement(by.linktext('str0')).click()"}
Generated  translation
driver. find _ element _ by _ css _ selector ('str0'). click ( ) 
--------- B -----------
{'intent': {'gloss': ['click', 'a', 'href', 'button', 'with', 'text', 'str0', 'with', 'selenium'], 'words': ['click', 'a', 'href', 'button', 'with', 'text', 'str0', 'with', 'selenium'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'send inmail'}, 'snippet': "driver.find_element_by_link_text('str0').click()"}
Generated  translation
driver. find _ element _ by _ css _ selector ('str0'). click ( ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'var0', 'by', 'length', 'of', 'value', 'in', 'tuple'], 'words': ['sort', 'a', 'list', 'var0', 'by', 'length', 'of', 'value', 'in', 'tuple'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': 'var0.sort(key=lambda t: len(t[1]), reverse=true)'}
Generated  translation
print ( sorted ( var0, key = lambda x : len ( x ), len ( x ) ) ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'array', 'var0', 'into', 'a', 'list'], 'words': ['convert', 'array', 'var0', 'into', 'a', 'list'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'numpy.array(var0).reshape(-1).tolist()'}
Generated  translation
list ( map ( int, var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['swap', 'keys', 'with', 'values', 'in', 'a', 'dictionary', 'var0'], 'words': ['swap', 'keys', 'with', 'values', 'in', 'a', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'res = dict((v, k) for k, v in var0.items())'}
Generated  translation
dict ( ( v, k ) for k, v in var0. items ( ) ) 
--------- B -----------
{'intent': {'gloss': ['open', 'a', 'background', 'process', 'str0', 'with', 'arguments', 'str1'], 'words': ['open', 'a', 'background', 'process', 'str0', 'with', 'arguments', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'background-process', 'str1': 'arguments'}, 'snippet': "subprocess.popen(['str0', 'str1'])"}
Generated  translation
os. system ('str0') 
--------- B -----------
{'intent': {'gloss': ['find', 'duplicate', 'names', 'in', 'column', 'str0', 'of', 'the', 'dataframe', 'var0'], 'words': ['find', 'duplicate', 'names', 'in', 'column', 'str0', 'of', 'the', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'name', 'var0': 'x'}, 'snippet': "var0.set_index('str0').index.get_duplicates()"}
Generated  translation
var0. groupby ('str0'). agg ( lambda x : x. duplicated ( ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', '5th', 'item', 'of', 'a', 'generator'], 'words': ['get', 'the', '5th', 'item', 'of', 'a', 'generator'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'next(itertools.islice(range(10), 5, 5 + 1))'}
Generated  translation
print ( max ( enumerate ( a ), key = lambda x : x [ 1 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'list', 'of', 'string', 'numbers', 'into', 'list', 'of', 'integers'], 'words': ['convert', 'list', 'of', 'string', 'numbers', 'into', 'list', 'of', 'integers'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "map(int, eval(input('enter the unfriendly numbers: ')))"}
Generated  translation
[ int ( i ) for i in range ( 10 ) ] 
--------- B -----------
{'intent': {'gloss': ['how', 'do', 'i', 'sort', 'a', 'list', 'of', 'dictionaries', 'by', 'values', 'of', 'the', 'dictionary', 'in', 'python', '?'], 'words': ['how', 'do', 'i', 'sort', 'a', 'list', 'of', 'dictionaries', 'by', 'values', 'of', 'the', 'dictionary', 'in', 'python', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "list_of_dicts.sort(key=operator.itemgetter('name'))"}
Generated  translation
sorted ( list ( data. items ( ) ), key = lambda x : x [ 1 ] ['name'] ) 
--------- B -----------
{'intent': {'gloss': ['how', 'do', 'i', 'sort', 'a', 'list', 'of', 'dictionaries', 'by', 'values', 'of', 'the', 'dictionary', 'in', 'python', '?'], 'words': ['how', 'do', 'i', 'sort', 'a', 'list', 'of', 'dictionaries', 'by', 'values', 'of', 'the', 'dictionary', 'in', 'python', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "list_of_dicts.sort(key=operator.itemgetter('age'))"}
Generated  translation
sorted ( list ( data. items ( ) ), key = lambda x : x [ 1 ] ['name'] ) 
--------- B -----------
{'intent': {'gloss': ['join', 'together', 'with', 'str0', 'elements', 'inside', 'a', 'list', 'indexed', 'with', 'str1', 'within', 'a', 'dictionary', 'var0'], 'words': ['join', 'together', 'with', 'str0', 'elements', 'inside', 'a', 'list', 'indexed', 'with', 'str1', 'within', 'a', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': ',', 'str1': 'category', 'var0': 'trans'}, 'snippet': '"""str0""".join(var0[\'str1\'])'}
Generated  translation
[ k for k, v in zip ( var0. items ( ) ) if k! ='str1'] 
--------- B -----------
{'intent': {'gloss': ['get', 'json', 'data', 'from', 'restful', 'service', 'str0'], 'words': ['get', 'json', 'data', 'from', 'restful', 'service', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'url'}, 'snippet': "json.load(urllib.request.urlopen('str0'))"}
Generated  translation
json. loads ( request. post. get ('str0') ) 
--------- B -----------
{'intent': {'gloss': ['decode', 'a', 'hex', 'string', 'str0', 'to', 'utf', '-', '8', '.'], 'words': ['decode', 'a', 'hex', 'string', 'str0', 'to', 'utf', '-', '8', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', '', '', '']}, 'slot_map': {'str0': '4a4b4c'}, 'snippet': "bytes.fromhex('str0').decode('utf-8')"}
Generated  translation
str0. decode ('hex') 
--------- B -----------
{'intent': {'gloss': ['concatenate', 'elements', 'of', 'list', 'var0', 'by', 'a', 'colon', 'str0'], 'words': ['concatenate', 'elements', 'of', 'list', 'var0', 'by', 'a', 'colon', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'b', 'str0': ':'}, 'snippet': '"""str0""".join(str(x) for x in var0)'}
Generated  translation
np. concatenate ( ( var0 [ str0 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'key', 'str0', 'from', 'dictionary', 'var0'], 'words': ['remove', 'key', 'str0', 'from', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'c', 'var0': 'd'}, 'snippet': "{i: var0[i] for i in var0 if i != 'str0'}"}
Generated  translation
var0. pop ('str0 ', none ) 
--------- B -----------
{'intent': {'gloss': ['cut', 'off', 'the', 'last', 'word', 'of', 'a', 'sentence', 'var0'], 'words': ['cut', 'off', 'the', 'last', 'word', 'of', 'a', 'sentence', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'content'}, 'snippet': '""" """.join(var0.split(\' \')[:-1])'}
Generated  translation
var0. split ( ) [ - 1 ] 
--------- B -----------
{'intent': {'gloss': ['sum', 'all', 'elements', 'of', 'nested', 'list', 'var0'], 'words': ['sum', 'all', 'elements', 'of', 'nested', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': 'sum(sum(i) if isinstance(i, list) else i for i in var0)'}
Generated  translation
sum ( sum ( x ) for x in var0 ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'directory', 'str0', 'exists', 'and', 'create', 'it', 'if', 'necessary'], 'words': ['check', 'if', 'directory', 'str0', 'exists', 'and', 'create', 'it', 'if', 'necessary'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'directory'}, 'snippet': 'if not os.path.exists(str0):\n    os.makedirs(str0)'}
Generated  translation
os. path. dirname ( os. path. exists ('str0') ) 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'dictionary', 'var0', 'of', 'key', '-', 'value', 'pairs', 'in', 'pymongo', 'cursor', 'var1'], 'words': ['get', 'a', 'dictionary', 'var0', 'of', 'key', '-', 'value', 'pairs', 'in', 'pymongo', 'cursor', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'records', 'var1': 'cursor'}, 'snippet': "var0 = dict((record['_id'], record) for record in var1)"}
Generated  translation
var1 [ 0 ]. dict ( var0 [ k ] ) 
--------- B -----------
{'intent': {'gloss': ['count', 'the', 'occurrences', 'of', 'items', 'in', 'list', 'var0'], 'words': ['count', 'the', 'occurrences', 'of', 'items', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': 'dict((x, var0.count(x)) for x in set(var0))'}
Generated  translation
sum ( isinstance ( x, int ) for x in var0 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'list', 'of', 'indexes', 'of', 'rows', 'where', 'column', 'str0', 'values', 'match', 'true'], 'words': ['get', 'list', 'of', 'indexes', 'of', 'rows', 'where', 'column', 'str0', 'values', 'match', 'true'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'boolcol'}, 'snippet': "df[df['str0'] == true].index.tolist()"}
Generated  translation
[ i for i in range ( len ( var0 ) ) if v! ='str0'] 
--------- B -----------
{'intent': {'gloss': ['remove', 'a', 'div', 'with', 'a', 'id', 'str0', 'using', 'beautifulsoup'], 'words': ['remove', 'a', 'div', 'with', 'a', 'id', 'str0', 'using', 'beautifulsoup'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'main-content'}, 'snippet': "soup.find('div', id='str0').decompose()"}
Generated  translation
sys. path. insert ( 0,'str0') 
--------- B -----------
{'intent': {'gloss': ['filter', 'rows', 'containing', 'key', 'word', 'var0', 'in', 'column', 'var1'], 'words': ['filter', 'rows', 'containing', 'key', 'word', 'var0', 'in', 'column', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'ball', 'var1': 'ids'}, 'snippet': "df[df['var1'].str.contains('var0')]"}
Generated  translation
[ rows ['var1']. filter ( var0. var1 ) ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'list', 'var0', 'into', 'a', 'comma', 'separated', 'string'], 'words': ['convert', 'list', 'var0', 'into', 'a', 'comma', 'separated', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list_of_ints'}, 'snippet': '""",""".join([str(i) for i in var0])'}
Generated  translation
" " ", " " ". join ( str ( i ) for i in var0. split ( ) ) 
--------- B -----------
{'intent': {'gloss': ['unzip', 'list', 'var0'], 'words': ['unzip', 'list', 'var0'], 'after': [' ', ' ', '']}, 'slot_map': {'var0': 'original'}, 'snippet': 'result = [a for a, b in var0], [b for a, b in var0]'}
Generated  translation
var0 = [ ] 
--------- B -----------
{'intent': {'gloss': ['unzip', 'list', 'var0', 'and', 'return', 'a', 'generator'], 'words': ['unzip', 'list', 'var0', 'and', 'return', 'a', 'generator'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'original'}, 'snippet': 'result = (a for a, b in var0), (b for a, b in var0)'}
Generated  translation
generator. unzip ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['reverse', 'the', 'keys', 'and', 'values', 'in', 'a', 'dictionary', 'var0'], 'words': ['reverse', 'the', 'keys', 'and', 'values', 'in', 'a', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mydictionary'}, 'snippet': '{i[1]: i[0] for i in list(var0.items())}'}
Generated  translation
dict ( ( v, k ) for k, v in var0. items ( ) ) 
--------- B -----------
{'intent': {'gloss': ['call', 'multiple', 'bash', 'function', '‘vasp', '’', 'and', '‘tee', 'tee', '_', 'output', '’', 'using', '‘|', '’'], 'words': ['call', 'multiple', 'bash', 'function', '‘vasp', '’', 'and', '‘tee', 'tee', '_', 'output', '’', 'using', '‘|', '’'], 'after': [' ', ' ', ' ', ' ', '', ' ', ' ', ' ', '', '', '', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "subprocess.check_call('vasp | tee tee_output', shell=true)"}
Generated  translation
call ( multiple bash ‘, ‘ tee _ tee _ output ) 
--------- B -----------
{'intent': {'gloss': ['download', 'a', 'file', 'str0', 'over', 'http', 'and', 'save', 'to', 'str1'], 'words': ['download', 'a', 'file', 'str0', 'over', 'http', 'and', 'save', 'to', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'http://www.example.com/songs/mp3.mp3', 'str1': 'mp3.mp3'}, 'snippet': "urllib.request.urlretrieve('str0', 'str1')"}
Generated  translation
testfile = urllib. request. urlopener ( ) testfile. retrieve ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['encode', 'binary', 'string', 'str0', 'to', 'base64', 'code'], 'words': ['encode', 'binary', 'string', 'str0', 'to', 'base64', 'code'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'your string'}, 'snippet': "base64.b64encode(bytes('str0', 'utf-8'))"}
Generated  translation
binascii. encode ('str0') 
--------- B -----------
{'intent': {'gloss': ['identify', 'duplicate', 'values', 'in', 'list', 'var0'], 'words': ['identify', 'duplicate', 'values', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylist'}, 'snippet': '[k for k, v in list(counter(var0).items()) if v > 1]'}
Generated  translation
woduplicates = list ( set ( var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['subscript', 'text', 'str0', 'with', 'str1', 'as', 'subscripted', 'in', 'matplotlib', 'labels', 'for', 'arrays', 'str2', 'and', 'str3', '.'], 'words': ['subscript', 'text', 'str0', 'with', 'str1', 'as', 'subscripted', 'in', 'matplotlib', 'labels', 'for', 'arrays', 'str2', 'and', 'str3', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'h20', 'str1': '2', 'str2': 'x', 'str3': 'y'}, 'snippet': "plt.plot(str2, str3, label='$h_2o$')"}
Generated  translation
ax. set _ yticklabels ( ['str2 ','str3'] ) 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'list', 'containing', 'the', 'indexes', 'of', 'rows', 'where', 'the', 'value', 'of', 'column', 'str0', 'in', 'dataframe', 'var0', 'are', 'equal', 'to', 'true'], 'words': ['create', 'a', 'list', 'containing', 'the', 'indexes', 'of', 'rows', 'where', 'the', 'value', 'of', 'column', 'str0', 'in', 'dataframe', 'var0', 'are', 'equal', 'to', 'true'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'boolcol', 'var0': 'df'}, 'snippet': "var0.iloc[np.flatnonzero(var0['str0'])]"}
Generated  translation
[ var0 ['str0'] for var0 in range ( len ( var0 ) ) ] 
--------- B -----------
{'intent': {'gloss': ['replace', 'all', 'occurences', 'of', 'newlines', 'str0', 'with', 'str1', 'in', 'dataframe', 'var0'], 'words': ['replace', 'all', 'occurences', 'of', 'newlines', 'str0', 'with', 'str1', 'in', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '\n', 'str1': '<br>', 'var0': 'df'}, 'snippet': "var0.replace({'str0': 'str1'}, regex=true)"}
Generated  translation
var0. replace ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['replace', 'all', 'occurrences', 'of', 'a', 'string', 'str0', 'by', 'string', 'str1', 'in', 'a', 'pandas', 'data', 'frame', 'var0'], 'words': ['replace', 'all', 'occurrences', 'of', 'a', 'string', 'str0', 'by', 'string', 'str1', 'in', 'a', 'pandas', 'data', 'frame', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '\n', 'str1': '<br>', 'var0': 'df'}, 'snippet': "var0.replace({'str0': 'str1'}, regex=true)"}
Generated  translation
var0. replace ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'list', 'containing', 'each', 'two', 'adjacent', 'letters', 'in', 'string', 'var0', 'as', 'its', 'elements'], 'words': ['create', 'a', 'list', 'containing', 'each', 'two', 'adjacent', 'letters', 'in', 'string', 'var0', 'as', 'its', 'elements'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'word'}, 'snippet': '[(x + y) for x, y in zip(var0, var0[1:])]'}
Generated  translation
print (''. join ( [ str ( i ) for i in zip ( a2, a1 ) ] ) ) 
--------- B -----------
{'intent': {'gloss': ['click', 'a', 'href', 'button', 'str0', 'with', 'selenium'], 'words': ['click', 'a', 'href', 'button', 'str0', 'with', 'selenium'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'send'}, 'snippet': "driver.find_element_by_partial_link_text('str0').click()"}
Generated  translation
driver. find _ element _ by _ css _ selector ('str0'). click ( ) 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'by', 'words', 'that', 'ends', 'with', 'str0'], 'words': ['split', 'string', 'var0', 'by', 'words', 'that', 'ends', 'with', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's', 'str0': 'd'}, 'snippet': "re.findall('\\\\b(\\\\w+)d\\\\b', var0)"}
Generated  translation
re. split ('\ \ s + ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['find', 'all', 'words', 'in', 'a', 'string', 'var0', 'that', 'start', 'with', 'the', 'str0', 'sign'], 'words': ['find', 'all', 'words', 'in', 'a', 'string', 'var0', 'that', 'start', 'with', 'the', 'str0', 'sign'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mystring', 'str0': '$'}, 'snippet': "[word for word in var0.split() if word.startswith('str0')]"}
Generated  translation
re. findall ('\ \ w + ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'unix', 'timestamp', 'str0', 'to', 'formatted', 'string', 'str1'], 'words': ['convert', 'unix', 'timestamp', 'str0', 'to', 'formatted', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '1347517370', 'str1': '%y-%m-%d %h:%m:%s'}, 'snippet': "time.strftime('str1', time.localtime(1347517370))"}
Generated  translation
datetime. datetime. strptime ('str1 ','% h : % m'). strftime ('str0') 
--------- B -----------
{'intent': {'gloss': ['display', 'the', 'float', 'str0', 'as', 'a', 'percentage'], 'words': ['display', 'the', 'float', 'str0', 'as', 'a', 'percentage'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '1/3*100'}, 'snippet': "print('{0:.0f}%'.format(1.0 / 3 * 100))"}
Generated  translation
float ('str0') 
--------- B -----------
{'intent': {'gloss': ['write', 'records', 'in', 'dataframe', 'var0', 'to', 'table', 'str0', 'in', 'schema', 'str1'], 'words': ['write', 'records', 'in', 'dataframe', 'var0', 'to', 'table', 'str0', 'in', 'schema', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'test', 'str1': 'a_schema'}, 'snippet': "var0.to_sql('str0', engine, schema='str1')"}
Generated  translation
var0. to _ csv ('str1 ', cols = ['str0'] ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'elements', 'from', 'list', 'var0', 'that', 'have', 'an', 'index', 'number', 'mentioned', 'in', 'list', 'var1'], 'words': ['remove', 'elements', 'from', 'list', 'var0', 'that', 'have', 'an', 'index', 'number', 'mentioned', 'in', 'list', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'oldlist', 'var1': 'removelist'}, 'snippet': 'newlist = [v for i, v in enumerate(var0) if i not in var1]'}
Generated  translation
[ x for x in var0 if x not in var1 ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'tuple', 'of', 'tuples', 'str0', 'to', 'tuple'], 'words': ['convert', 'tuple', 'of', 'tuples', 'str0', 'to', 'tuple'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "(('aa',), ('bb',), ('cc',))", '( str0 )': "(('aa',), ('bb',), ('cc',))"}, 'snippet': 'from functools import reduce\nreduce(lambda a, b: a + b, ( str0 ))'}
Generated  translation
tuple ( zip ( * [ ( str0 ), ( str0 ) ] ) ) 
--------- B -----------
{'intent': {'gloss': ['python', 'pandas', ':', 'how', 'to', 'replace', 'a', 'characters', 'in', 'a', 'column', 'of', 'a', 'dataframe', '?'], 'words': ['python', 'pandas', ':', 'how', 'to', 'replace', 'a', 'characters', 'in', 'a', 'column', 'of', 'a', 'dataframe', '?'], 'after': [' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "df['range'].replace(',', '-', inplace=true)"}
Generated  translation
df. apply ( lambda x : x. replace ('[ ^ a - za - z ] ','' ) ) 
--------- B -----------
{'intent': {'gloss': ['filter', 'dataframe', 'var0', 'by', 'values', 'in', 'column', 'var1', 'that', 'appear', 'more', 'than', 'once'], 'words': ['filter', 'dataframe', 'var0', 'by', 'values', 'in', 'column', 'var1', 'that', 'appear', 'more', 'than', 'once'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'var1': 'a'}, 'snippet': "var0.groupby('var1').filter(lambda x: len(x) > 1)"}
Generated  translation
var0. groupby ('var1'). size ( ). sum ( ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'datetime', 'column', 'str0', 'of', 'pandas', 'dataframe', 'str1', 'to', 'ordinal'], 'words': ['convert', 'datetime', 'column', 'str0', 'of', 'pandas', 'dataframe', 'str1', 'to', 'ordinal'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'date', 'str1': 'df'}, 'snippet': "str1['str0'].apply(lambda x: x.toordinal())"}
Generated  translation
str1. str ['str0'] = df ['str0']. astype ( int ) 
--------- B -----------
{'intent': {'gloss': ['reverse', 'sort', 'list', 'of', 'dicts', 'var0', 'by', 'value', 'for', 'key', 'var1'], 'words': ['reverse', 'sort', 'list', 'of', 'dicts', 'var0', 'by', 'value', 'for', 'key', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l', 'var1': 'time'}, 'snippet': "var0 = sorted(var0, key=itemgetter('var1'), reverse=true)"}
Generated  translation
sorted ( var0, key = lambda i : var1 [ i ] ['var0'] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'rows', 'of', 'dataframe', 'var0', 'that', 'match', 'regex', 'str0'], 'words': ['get', 'rows', 'of', 'dataframe', 'var0', 'that', 'match', 'regex', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': '(hel|just)', '( str0 )': '(hel|just)'}, 'snippet': "var0.loc[var0[0].str.contains('str0')]"}
Generated  translation
var0. loc [ var0 ['str0']. isin ( var0 ) ] 
--------- B -----------
{'intent': {'gloss': ['sort', 'list', 'var0', 'based', 'on', 'second', 'index', 'of', 'each', 'string', 'var1'], 'words': ['sort', 'list', 'var0', 'based', 'on', 'second', 'index', 'of', 'each', 'string', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list_of_strings', 'var1': 's'}, 'snippet': "sorted(var0, key=lambda var1: var1.split(',')[1])"}
Generated  translation
var0. sort ( key = lambda x : x [ 2 ] ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'dictionaries', 'var0', 'by', 'values', 'in', 'key', 'var1', 'in', 'descending', 'order'], 'words': ['sort', 'a', 'list', 'of', 'dictionaries', 'var0', 'by', 'values', 'in', 'key', 'var1', 'in', 'descending', 'order'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l', 'var1': 'name'}, 'snippet': "newlist = sorted(var0, key=itemgetter('var1'), reverse=true)"}
Generated  translation
sorted ( var0, key = lambda i : var1. index ( list ( i. values ( ) ) [ 0 ], reverse = true ) ) 
--------- B -----------
{'intent': {'gloss': ['django', 'get', 'maximum', 'value', 'associated', 'with', 'field', 'str0', 'in', 'model', 'var0'], 'words': ['django', 'get', 'maximum', 'value', 'associated', 'with', 'field', 'str0', 'in', 'model', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'added', 'var0': 'authorizedemail'}, 'snippet': "var0.objects.filter(group=group).order_by('-added')[0]"}
Generated  translation
var0. objects. order _ by ('str0') ['str0'] 
--------- B -----------
{'intent': {'gloss': ['download', 'a', 'file', 'str0', 'over', 'http'], 'words': ['download', 'a', 'file', 'str0', 'over', 'http'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'http://www.example.com/'}, 'snippet': "response = urllib.request.urlopen('str0')\nhtml = response.read()"}
Generated  translation
urllib. request. urlretrieve ('str0 ','str0') 
--------- B -----------
{'intent': {'gloss': ['convert', 'epoch', 'time', 'represented', 'as', 'milliseconds', 'var0', 'to', 'string', 'using', 'format', 'str0'], 'words': ['convert', 'epoch', 'time', 'represented', 'as', 'milliseconds', 'var0', 'to', 'string', 'using', 'format', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's', 'str0': '%y-%m-%d %h:%m:%s.%f'}, 'snippet': "datetime.datetime.fromtimestamp(var0).strftime('str0')"}
Generated  translation
datetime. datetime. now ( ). strftime ('str0') 
--------- B -----------
{'intent': {'gloss': ['upload', 'file', 'using', 'ftp'], 'words': ['upload', 'file', 'using', 'ftp'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "ftp.storlines('stor ' + filename, open(filename, 'r'))"}
Generated  translation
ftp. retrbinary ( upload filename ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'list', 'of', 'lists', 'var0', 'to', 'list', 'of', 'integers'], 'words': ['convert', 'list', 'of', 'lists', 'var0', 'to', 'list', 'of', 'integers'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': "[int(''.join(str(d) for d in x)) for x in var0]"}
Generated  translation
[ map ( int, sublist ) for sublist in var0 ] 
--------- B -----------
{'intent': {'gloss': ['replace', 'a', 'separate', 'word', 'str0', 'by', 'str1', 'in', 'a', 'string', 'str2'], 'words': ['replace', 'a', 'separate', 'word', 'str0', 'by', 'str1', 'in', 'a', 'string', 'str2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'h3', 'str1': 'h1', 'str2': 'text'}, 'snippet': "re.sub('\\\\bh3\\\\b', 'str1', str2)"}
Generated  translation
re. sub ('(. * ) ','str2 ','str0') 
--------- B -----------
{'intent': {'gloss': ['insert', 'data', 'from', 'a', 'string', 'var0', 'to', 'sqlite', 'db', 'var1'], 'words': ['insert', 'data', 'from', 'a', 'string', 'var0', 'to', 'sqlite', 'db', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'testfield', 'var1': 'c'}, 'snippet': 'var1.execute("insert into test values (?, \'bar\')", (var0,))'}
Generated  translation
var1. execute ('insert or replace into table values ( % s ) ', ( var0, ) ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'all', 'special', 'characters', ',', 'punctuation', 'and', 'spaces', 'from', 'a', 'string', 'var0', 'using', 'regex'], 'words': ['remove', 'all', 'special', 'characters', ',', 'punctuation', 'and', 'spaces', 'from', 'a', 'string', 'var0', 'using', 'regex'], 'after': [' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mystring'}, 'snippet': "re.sub('[^a-za-z0-9]+', '', var0)"}
Generated  translation
re. sub ('[ ^ \ \ w + ] ','', var0 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'list', 'containing', 'the', 'sum', 'of', 'each', 'element', 'var0', 'in', 'list', 'var1', 'plus', 'the', 'previous', 'elements'], 'words': ['get', 'a', 'list', 'containing', 'the', 'sum', 'of', 'each', 'element', 'var0', 'in', 'list', 'var1', 'plus', 'the', 'previous', 'elements'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'i', 'var1': 'l'}, 'snippet': '[sum(var1[:var0]) for var0, _ in enumerate(var1)]'}
Generated  translation
[ sum ( x ) for x in var1 for y in var0 ] 
--------- B -----------
{'intent': {'gloss': ['beautifulsoup', 'find', 'all', 'str0', 'elements', 'in', 'html', 'string', 'var0', 'with', 'class', 'of', 'str1'], 'words': ['beautifulsoup', 'find', 'all', 'str0', 'elements', 'in', 'html', 'string', 'var0', 'with', 'class', 'of', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'span', 'var0': 'soup', 'str1': 'stargryb sp'}, 'snippet': "var0.find_all('str0', {'class': 'str1'})"}
Generated  translation
soup. findall ('str0 ', attrs = {'str1':'str1'} ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'duplicate', 'elements', 'from', 'list', 'str0'], 'words': ['remove', 'duplicate', 'elements', 'from', 'list', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'l'}, 'snippet': 'list(dict((x[0], x) for x in str0).values())'}
Generated  translation
[ k for k, g in itertools. groupby ( [ str0 ] ) ] 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'words': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'testlist'}, 'snippet': 'for i in [i for i, x in enumerate(var0) if x == 1]:\n    pass'}
Generated  translation
print ( var0. shape [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'words': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'testlist'}, 'snippet': 'for i in (i for i, x in enumerate(var0) if x == 1):\n    pass'}
Generated  translation
print ( var0. shape [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['python', 'split', 'a', 'string', 'using', 'regex'], 'words': ['python', 'split', 'a', 'string', 'using', 'regex'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "re.findall('(.+?):(.+?)\\\\b ?', text)"}
Generated  translation
re. findall ('\ \ w + ','str0') 
--------- B -----------
{'intent': {'gloss': ['get', 'all', 'text', 'that', 'is', 'not', 'enclosed', 'within', 'square', 'brackets', 'in', 'string', 'var0'], 'words': ['get', 'all', 'text', 'that', 'is', 'not', 'enclosed', 'within', 'square', 'brackets', 'in', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'example_str'}, 'snippet': "re.findall('(.*?)\\\\[.*?\\\\]', var0)"}
Generated  translation
re. sub ('\ \ [ ( [ ^ \ \ ] ] * ) \ \ ] ','', var0 ) 
--------- B -----------
{'intent': {'gloss': ['read', 'a', 'file', 'str0', 'into', 'a', 'list', 'var0'], 'words': ['read', 'a', 'file', 'str0', 'into', 'a', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'c:/name/mydocuments/numbers', 'var0': 'data'}, 'snippet': "var0 = [line.strip() for line in open('str0', 'r')]"}
Generated  translation
var0 = [ line. split ( ',') for line in open ('str0') ] 
--------- B -----------
{'intent': {'gloss': ['loop', 'through', 'the', 'ip', 'address', 'range', 'str0'], 'words': ['loop', 'through', 'the', 'ip', 'address', 'range', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '192.168.x.x'}, 'snippet': 'for i, j in product(list(range(256)), list(range(256))):\n    pass'}
Generated  translation
globals ( ) ['str0']. apply ( lambda x : x. split ('str0') ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'last', 'comma', 'character', 'str0', 'in', 'string', 'var0'], 'words': ['remove', 'last', 'comma', 'character', 'str0', 'in', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': ',', 'var0': 's'}, 'snippet': '"""""".join(var0.rsplit(\'str0\', 1))'}
Generated  translation
var0. replace ('str0 ','' ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'dictionary', 'var0', 'based', 'on', 'key', 'var1', 'in', 'descending', 'order'], 'words': ['sort', 'a', 'list', 'of', 'dictionary', 'var0', 'based', 'on', 'key', 'var1', 'in', 'descending', 'order'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l', 'var1': 'time'}, 'snippet': "var0 = sorted(var0, key=lambda a: a['var1'], reverse=true)"}
Generated  translation
sorted ( var0, key = itemgetter ( 1 ), reverse = true ) 
--------- B -----------
{'intent': {'gloss': ['find', 'the', 'string', 'in', 'var0', 'between', 'two', 'special', 'characters', 'str0', 'and', 'str1'], 'words': ['find', 'the', 'string', 'in', 'var0', 'between', 'two', 'special', 'characters', 'str0', 'and', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'your_string', 'str0': '[', 'str1': ']'}, 'snippet': "re.search('\\\\[(.*)\\\\]', var0).group(1)"}
Generated  translation
re. findall ('\ \ s + ','str0 ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'integer', 'var0', 'into', 'an', 'unassigned', 'integer'], 'words': ['convert', 'integer', 'var0', 'into', 'an', 'unassigned', 'integer'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'number'}, 'snippet': "struct.unpack('h', struct.pack('h', var0))"}
Generated  translation
struct. unpack ('> q ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['sum', 'elements', 'at', 'the', 'same', 'index', 'in', 'list', 'var0'], 'words': ['sum', 'elements', 'at', 'the', 'same', 'index', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'data'}, 'snippet': '[[sum(item) for item in zip(*items)] for items in zip(*var0)]'}
Generated  translation
map ( sum, zip ( * var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'rid', 'of', 'none', 'values', 'in', 'dictionary', 'var0'], 'words': ['get', 'rid', 'of', 'none', 'values', 'in', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'kwargs'}, 'snippet': 'res = {k: v for k, v in list(var0.items()) if v is not none}'}
Generated  translation
{ key : val for key, val in list ( var0. items ( ) ) if val! = 42 } 
--------- B -----------
{'intent': {'gloss': ['merge', 'a', 'nested', 'dictionary', 'var0', 'into', 'a', 'flat', 'dictionary', 'by', 'concatenating', 'nested', 'values', 'with', 'the', 'same', 'key', 'var1'], 'words': ['merge', 'a', 'nested', 'dictionary', 'var0', 'into', 'a', 'flat', 'dictionary', 'by', 'concatenating', 'nested', 'values', 'with', 'the', 'same', 'key', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'dicts', 'var1': 'k'}, 'snippet': '{var1: [d[var1] for d in var0] for var1 in var0[0]}'}
Generated  translation
dict ( ( k, v ) for k, v in var1. items ( ) if k! = var0 [ k ] ) 
--------- B -----------
{'intent': {'gloss': ['loop', 'over', 'files', 'in', 'directory', 'var0'], 'words': ['loop', 'over', 'files', 'in', 'directory', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'source'}, 'snippet': 'for root, dirs, filenames in os.walk(var0):\n    for f in filenames:\n        pass'}
Generated  translation
for dirname, dirnames, filenames in os. walk ( var0 ) : pass 
--------- B -----------
{'intent': {'gloss': ['join', 'each', 'element', 'in', 'array', 'var0', 'with', 'element', 'at', 'the', 'same', 'index', 'in', 'array', 'var1', 'as', 'a', 'tuple'], 'words': ['join', 'each', 'element', 'in', 'array', 'var0', 'with', 'element', 'at', 'the', 'same', 'index', 'in', 'array', 'var1', 'as', 'a', 'tuple'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'b'}, 'snippet': 'np.array([zip(x, y) for x, y in zip(var0, var1)])'}
Generated  translation
np. zeros ( ( var0, var1 ) ) 
--------- B -----------
{'intent': {'gloss': ['extract', 'brackets', 'from', 'string', 'var0'], 'words': ['extract', 'brackets', 'from', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': "brackets = re.sub('[^(){}[\\\\]]', '', var0)"}
Generated  translation
re. findall ('\ \ [ (. *? ) \ \ ] ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['append', 'a', 'tuple', 'of', 'elements', 'from', 'list', 'var0', 'with', 'indexes', 'str0', 'to', 'list', 'var1'], 'words': ['append', 'a', 'tuple', 'of', 'elements', 'from', 'list', 'var0', 'with', 'indexes', 'str0', 'to', 'list', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'str0': '[0][0] [0][2]', 'var1': 'b', '[ str0 ]': '[0][0] [0][2]'}, 'snippet': 'var1.append((var0[0][0], var0[0][2]))'}
Generated  translation
[ ( x, var0 ) for x in var1 ] 
--------- B -----------
{'intent': {'gloss': ['reverse', 'sort', 'counter', 'var0', 'by', 'value'], 'words': ['reverse', 'sort', 'counter', 'var0', 'by', 'value'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'sorted(list(var0.items()), key=lambda pair: pair[1], reverse=true)'}
Generated  translation
sorted ( var0, key = var0. get ) 
--------- B -----------
{'intent': {'gloss': ['add', 'a', 'column', 'str0', 'with', 'value', 'str1', 'to', 'dataframe', 'var0'], 'words': ['add', 'a', 'column', 'str0', 'with', 'value', 'str1', 'to', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'day', 'str1': 'sat', 'var0': 'df'}, 'snippet': "var0.xs('str1', level='str0', drop_level=false)"}
Generated  translation
var0 ['str0'] = var0 ['str1']. apply ( lambda x : str0 ['str0'] ) 
--------- B -----------
{'intent': {'gloss': ['sorting', 'a', 'list', 'of', 'lists', 'in', 'python'], 'words': ['sorting', 'a', 'list', 'of', 'lists', 'in', 'python'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'c2.sort(key=lambda row: (row[2], row[1], row[0]))'}
Generated  translation
[ sorted ( item ) for item in var0 ] 
--------- B -----------
{'intent': {'gloss': ['get', 'an', 'array', 'of', 'the', 'mean', 'of', 'each', 'two', 'consecutive', 'values', 'in', 'numpy', 'array', 'var0'], 'words': ['get', 'an', 'array', 'of', 'the', 'mean', 'of', 'each', 'two', 'consecutive', 'values', 'in', 'numpy', 'array', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'var0[:-1] + (var0[1:] - var0[:-1]) / 2'}
Generated  translation
var0 [ np. arange ( len ( var0. shape [ 0 ] ) / 2 ) ] 
--------- B -----------
{'intent': {'gloss': ['how', 'to', 'sort', 'a', 'dataframe', 'by', 'the', 'ocurrences', 'in', 'a', 'column', 'in', 'python', '(', 'pandas', ')'], 'words': ['how', 'to', 'sort', 'a', 'dataframe', 'by', 'the', 'ocurrences', 'in', 'a', 'column', 'in', 'python', '(', 'pandas', ')'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '']}, 'slot_map': {}, 'snippet': "df.groupby('prots').sum().sort('scores', ascending=false)"}
Generated  translation
df. sort ( df. columns, axis = 1, ascending = [ true, false ] ) 
--------- B -----------
{'intent': {'gloss': ['python', 'regex', 'to', 'find', 'all', 'numbers', 'and', 'dots', 'from', 'str0'], 'words': ['python', 'regex', 'to', 'find', 'all', 'numbers', 'and', 'dots', 'from', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'text'}, 'snippet': "re.findall('test([\\\\d.]*\\\\d+)', str0)"}
Generated  translation
re. findall ('[ \ \ w + ] ','str0') 
--------- B -----------
{'intent': {'gloss': ['get', 'rid', 'of', 'none', 'values', 'in', 'dictionary', 'var0'], 'words': ['get', 'rid', 'of', 'none', 'values', 'in', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'kwargs'}, 'snippet': 'res = dict((k, v) for k, v in var0.items() if v is not none)'}
Generated  translation
{ key : val for key, val in list ( var0. items ( ) ) if val! = 42 } 
--------- B -----------
{'intent': {'gloss': ['argparse', 'add', 'argument', 'with', 'flag', 'str0', 'and', 'version', 'action', 'of', 'str1', 'to', 'parser', 'var0'], 'words': ['argparse', 'add', 'argument', 'with', 'flag', 'str0', 'and', 'version', 'action', 'of', 'str1', 'to', 'parser', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '--version', 'str1': '%(prog)s 2.0', 'var0': 'parser'}, 'snippet': "var0.add_argument('str0', action='version', version='str1')"}
Generated  translation
var0. update ( {'str0':'str1'} ) 
--------- B -----------
{'intent': {'gloss': ['multiple', 'each', 'value', 'by', 'str0', 'for', 'all', 'keys', 'in', 'a', 'dictionary', 'var0'], 'words': ['multiple', 'each', 'value', 'by', 'str0', 'for', 'all', 'keys', 'in', 'a', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '2', 'var0': 'my_dict'}, 'snippet': 'var0.update((x, y * 2) for x, y in list(var0.items()))'}
Generated  translation
dict ( ( k, v ) for k, v in var0. items ( ) if v > 1 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'date', '7', 'days', 'before', 'the', 'current', 'date'], 'words': ['get', 'the', 'date', '7', 'days', 'before', 'the', 'current', 'date'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': '(datetime.datetime.now() - datetime.timedelta(days=7)).date()'}
Generated  translation
print ( ( datetime. date. today ( ) + datetime. timedelta ( 6 * 365 / 12 ) ). isoformat ( ) ) 
--------- B -----------
{'intent': {'gloss': ['combine', 'list', 'of', 'dictionaries', 'var0', 'with', 'the', 'same', 'keys', 'in', 'each', 'list', 'to', 'a', 'single', 'dictionary'], 'words': ['combine', 'list', 'of', 'dictionaries', 'var0', 'with', 'the', 'same', 'keys', 'in', 'each', 'list', 'to', 'a', 'single', 'dictionary'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'dicts'}, 'snippet': 'dict((k, [d[k] for d in var0]) for k in var0[0])'}
Generated  translation
dict ( ( k, v ) for k, v in var0. items ( ) if v ) 
--------- B -----------
{'intent': {'gloss': ['find', 'the', 'index', 'of', 'a', 'list', 'with', 'the', 'first', 'element', 'equal', 'to', 'str0', 'within', 'the', 'list', 'of', 'lists', 'var0'], 'words': ['find', 'the', 'index', 'of', 'a', 'list', 'with', 'the', 'first', 'element', 'equal', 'to', 'str0', 'within', 'the', 'list', 'of', 'lists', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '332', 'var0': 'thelist'}, 'snippet': "[index for index, item in enumerate(var0) if item[0] == 'str0']"}
Generated  translation
[ item for item in var0 if item [ 0 ] = ='str0'] 
--------- B -----------
{'intent': {'gloss': ['use', 'str0', 'operator', 'to', 'print', 'variable', 'values', 'var0', 'inside', 'a', 'string'], 'words': ['use', 'str0', 'operator', 'to', 'print', 'variable', 'values', 'var0', 'inside', 'a', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '%s', 'var0': 'str1'}, 'snippet': "'first string is: %s, second one is: %s' % (var0, 'geo.tif')"}
Generated  translation
print ('str0 '. replace ( ', ','' ) ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'pandas', 'series', 'var0', 'into', 'a', 'pandas', 'dataframe', 'var1', 'with', 'columns', 'var2', 'and', 'var3'], 'words': ['convert', 'a', 'pandas', 'series', 'var0', 'into', 'a', 'pandas', 'dataframe', 'var1', 'with', 'columns', 'var2', 'and', 'var3'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'sf', 'var1': 'df', 'var2': 'email', 'var3': 'list'}, 'snippet': "pd.dataframe({'var2': var0.index, 'var3': var0.values})"}
Generated  translation
var1. set _ index ( ['var2 ','var0 ','var3'] ) 
--------- B -----------
{'intent': {'gloss': ['django', 'set', 'default', 'value', 'of', 'field', 'var0', 'equal', 'to', 'str0'], 'words': ['django', 'set', 'default', 'value', 'of', 'field', 'var0', 'equal', 'to', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'b', 'str0': '0000000'}, 'snippet': "var0 = models.charfield(max_length=7, default='str0', editable=false)"}
Generated  translation
user. objects. filter ( userprofile ='str0') 
--------- B -----------
{'intent': {'gloss': ['get', 'whatever', 'is', 'between', 'parentheses', 'as', 'a', 'single', 'match', ',', 'and', 'any', 'char', 'outside', 'as', 'an', 'individual', 'match', 'in', 'string', 'str0'], 'words': ['get', 'whatever', 'is', 'between', 'parentheses', 'as', 'a', 'single', 'match', ',', 'and', 'any', 'char', 'outside', 'as', 'an', 'individual', 'match', 'in', 'string', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '(zyx)bc'}, 'snippet': "re.findall('\\\\(.+?\\\\)|\\\\w', 'str0')"}
Generated  translation
re. findall ('\ \ ( [ ^ $ ] * \ \ ) ','str0') 
--------- B -----------
{'intent': {'gloss': ['match', 'multiple', 'regex', 'patterns', 'with', 'the', 'alternation', 'operator', 'str0', 'in', 'a', 'string', 'str1'], 'words': ['match', 'multiple', 'regex', 'patterns', 'with', 'the', 'alternation', 'operator', 'str0', 'in', 'a', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '|', 'str1': '(zyx)bc'}, 'snippet': "re.findall('\\\\(.*?\\\\)|\\\\w', 'str1')"}
Generated  translation
re. findall ('^ (. *? cat. *? ) ','str1') 
--------- B -----------
{'intent': {'gloss': ['find', 'the', 'index', 'of', 'an', 'element', 'str0', 'in', 'a', 'list', 'var0'], 'words': ['find', 'the', 'index', 'of', 'an', 'element', 'str0', 'in', 'a', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'msft', 'var0': 'stocks_list'}, 'snippet': "[x for x in range(len(var0)) if var0[x] == 'str0']"}
Generated  translation
input ('str0') 
--------- B -----------
{'intent': {'gloss': ['send', 'multipart', 'encoded', 'file', 'var0', 'to', 'url', 'var1', 'with', 'headers', 'var2', 'and', 'metadata', 'var3'], 'words': ['send', 'multipart', 'encoded', 'file', 'var0', 'to', 'url', 'var1', 'with', 'headers', 'var2', 'and', 'metadata', 'var3'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'files', 'var1': 'url', 'var2': 'headers', 'var3': 'data'}, 'snippet': 'r = requests.post(var1, var0=var0, var2=var2, var3=var3)'}
Generated  translation
urllib. parse. unquote ( var1, var2 ='var0') 
--------- B -----------
{'intent': {'gloss': ['numpy', 'concatenate', 'two', 'arrays', 'var0', 'and', 'var1', 'along', 'the', 'first', 'axis'], 'words': ['numpy', 'concatenate', 'two', 'arrays', 'var0', 'and', 'var1', 'along', 'the', 'first', 'axis'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'b'}, 'snippet': 'c = np.r_[var0[(none), :], var1[(none), :]]'}
Generated  translation
numpy. concatenate ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'list', 'of', 'lists', 'var0', 'into', 'a', 'flat', 'list'], 'words': ['convert', 'list', 'of', 'lists', 'var0', 'into', 'a', 'flat', 'list'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'data'}, 'snippet': '[y for x in var0 for y in (x if isinstance(x, list) else [x])]'}
Generated  translation
y = map ( operator. itemgetter ( 0 ), var0 ) 
--------- B -----------
{'intent': {'gloss': ['find', 'all', 'numbers', 'and', 'dots', 'from', 'a', 'string', 'var0', 'using', 'regex'], 'words': ['find', 'all', 'numbers', 'and', 'dots', 'from', 'a', 'string', 'var0', 'using', 'regex'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'text'}, 'snippet': "re.findall('test([0-9.]*[0-9]+)', var0)"}
Generated  translation
re. findall ('(? = ( \ \ w + ) ) ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['run', 'script', 'str0', 'with', 'argument', 'str1', 'on', 'terminal', 'using', 'python', 'executable'], 'words': ['run', 'script', 'str0', 'with', 'argument', 'str1', 'on', 'terminal', 'using', 'python', 'executable'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'hello.py', 'str1': 'htmlfilename.htm'}, 'snippet': "subprocess.call(['python.exe', 'str0', 'str1'])"}
Generated  translation
os. system ('script2. py1') 
--------- B -----------
{'intent': {'gloss': ['sum', 'columns', 'of', 'a', 'list', 'var0'], 'words': ['sum', 'columns', 'of', 'a', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'array'}, 'snippet': '[sum(row[i] for row in var0) for i in range(len(var0[0]))]'}
Generated  translation
sum ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['insert', 'a', 'str0', 'value', 'into', 'a', 'sqlite3', 'table', '.'], 'words': ['insert', 'a', 'str0', 'value', 'into', 'a', 'sqlite3', 'table', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'none'}, 'snippet': 'db.execute("insert into present values(\'test2\', ?, 10)", (str0,))'}
Generated  translation
sqlite3. insert ( 0,'str0') 
--------- B -----------
{'intent': {'gloss': ['using', '%', 'f', 'with', 'strftime', '(', ')', 'in', 'python', 'to', 'get', 'microseconds'], 'words': ['using', '%', 'f', 'with', 'strftime', '(', ')', 'in', 'python', 'to', 'get', 'microseconds'], 'after': [' ', '', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "datetime.datetime.now().strftime('%h:%m:%s.%f')"}
Generated  translation
datetime. datetime. strptime ('str0 ','% a, % d / % b % y'). strftime ('% f') 
--------- B -----------
{'intent': {'gloss': ['get', 'digits', 'only', 'from', 'a', 'string', 'var0', 'using', 'lambda', 'function'], 'words': ['get', 'digits', 'only', 'from', 'a', 'string', 'var0', 'using', 'lambda', 'function'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'aas30dsa20'}, 'snippet': '"""""".join([x for x in \'var0\' if x.isdigit()])'}
Generated  translation
" " " " " ". join ( c for c in var0 if c. isdigit ( ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'filename', 'without', 'the', 'extension', 'from', 'file', 'str0'], 'words': ['get', 'the', 'filename', 'without', 'the', 'extension', 'from', 'file', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'hemanth.txt'}, 'snippet': "print(os.path.splitext(os.path.basename('str0'))[0])"}
Generated  translation
os. path. dirname ( os. path. abspath ( _ _ file _ _ ) ) 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'dictionary', 'by', 'adding', 'each', 'two', 'adjacent', 'elements', 'in', 'tuple', 'var0', 'as', 'key', '/', 'value', 'pair', 'to', 'it'], 'words': ['create', 'a', 'dictionary', 'by', 'adding', 'each', 'two', 'adjacent', 'elements', 'in', 'tuple', 'var0', 'as', 'key', '/', 'value', 'pair', 'to', 'it'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'dict(var0[i:i + 2] for i in range(0, len(var0), 2))'}
Generated  translation
dict ( zip ( var0 [ : : 2 ], var0 [ 1 : : 2 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['extract', 'a', 'url', 'from', 'a', 'string', 'var0'], 'words': ['extract', 'a', 'url', 'from', 'a', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mystring'}, 'snippet': "print(re.findall('(https?://[^\\\\s]+)', var0))"}
Generated  translation
" " " " " ". join ( var0. split ( ) ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'elements', 'of', 'each', 'tuple', 'in', 'list', 'var0', 'into', 'a', 'string', 'separated', 'by', 'character', 'str0'], 'words': ['convert', 'elements', 'of', 'each', 'tuple', 'in', 'list', 'var0', 'into', 'a', 'string', 'separated', 'by', 'character', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l', 'str0': '@'}, 'snippet': '""" """.join([(\'%d@%d\' % t) for t in var0])'}
Generated  translation
" " " str0 " " ". join ( map ( lambda x : x. split ('str0') ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'words': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'testlist'}, 'snippet': 'gen = (i for i, x in enumerate(var0) if x == 1)\nfor i in gen:\n    pass'}
Generated  translation
print ( var0. shape [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['double', 'backslash', 'escape', 'all', 'double', 'quotes', 'in', 'string', 'var0'], 'words': ['double', 'backslash', 'escape', 'all', 'double', 'quotes', 'in', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': 'print(var0.encode(\'unicode-escape\').replace(\'"\', \'\\\\"\'))'}
Generated  translation
re. sub ('\ \ b \ \ d + \ \ b ','', var0 ) 
--------- B -----------
{'intent': {'gloss': ['how', 'to', 'delete', 'all', 'instances', 'of', 'a', 'character', 'in', 'a', 'string', 'in', 'python', '?'], 'words': ['how', 'to', 'delete', 'all', 'instances', 'of', 'a', 'character', 'in', 'a', 'string', 'in', 'python', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': '"""""".join([char for char in \'it is icy\' if char != \'i\'])'}
Generated  translation
newstr = oldstr. replace ('m ','' ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'dictionary', 'var0', 'first', 'by', 'key', 'var1', 'and', 'then', 'by', 'var2'], 'words': ['sort', 'a', 'list', 'of', 'dictionary', 'var0', 'first', 'by', 'key', 'var1', 'and', 'then', 'by', 'var2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list', 'var1': 'points', 'var2': 'time'}, 'snippet': "var0.sort(key=lambda item: (item['var1'], item['var2']))"}
Generated  translation
sorted ( var0, key = lambda x : ( x [ 1 ], x [ 2 ] ), reverse = true ) 
--------- B -----------
{'intent': {'gloss': ['format', 'number', 'of', 'spaces', 'between', 'strings', 'var0', ',', 'str0', 'and', 'str1', 'to', 'be', 'str2'], 'words': ['format', 'number', 'of', 'spaces', 'between', 'strings', 'var0', ',', 'str0', 'and', 'str1', 'to', 'be', 'str2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'python', 'str0': ':', 'str1': 'very good', 'str2': '20'}, 'snippet': "print('%*s : %*s' % (20, 'var0', 20, 'str1'))"}
Generated  translation
" " " str2 " " ". format ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['multiply', 'a', 'matrix', 'var0', 'with', 'a', '3d', 'tensor', 'var1', 'in', 'scipy'], 'words': ['multiply', 'a', 'matrix', 'var0', 'with', 'a', '3d', 'tensor', 'var1', 'in', 'scipy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'p', 'var1': 't'}, 'snippet': 'scipy.tensordot(var0, var1, axes=[1, 1]).swapaxes(0, 1)'}
Generated  translation
np. einsum ('ji, i - > j ', var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'scalar', 'var0', 'to', 'array'], 'words': ['convert', 'scalar', 'var0', 'to', 'array'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'var0 = np.asarray(var0).reshape(1, -1)[(0), :]'}
Generated  translation
var0. strip ( ) 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'list', 'of', 'pairs', 'from', 'a', 'string', 'var0', 'using', 'lambda', 'function'], 'words': ['get', 'a', 'list', 'of', 'pairs', 'from', 'a', 'string', 'var0', 'using', 'lambda', 'function'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'word'}, 'snippet': 'list(map(lambda x, y: x + y, var0[:-1], var0[1:]))'}
Generated  translation
map ( list, set ( var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'datetimeindex', 'containing', '13', 'periods', 'of', 'the', 'second', 'friday', 'of', 'each', 'month', 'starting', 'from', 'date', 'str0'], 'words': ['create', 'a', 'datetimeindex', 'containing', '13', 'periods', 'of', 'the', 'second', 'friday', 'of', 'each', 'month', 'starting', 'from', 'date', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '2016-01-01'}, 'snippet': "pd.date_range('str0', freq='wom-2fri', periods=13)"}
Generated  translation
datetime. datetime. strptime ('str0 ','% b % d, % y'). date ( ) 
--------- B -----------
{'intent': {'gloss': ['create', 'list', 'of', 'values', 'from', 'dictionary', 'var0', 'that', 'have', 'a', 'key', 'that', 'starts', 'with', 'str0'], 'words': ['create', 'list', 'of', 'values', 'from', 'dictionary', 'var0', 'that', 'have', 'a', 'key', 'that', 'starts', 'with', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'dict1', 'str0': 'emp$$'}, 'snippet': "[value for key, value in list(var0.items()) if key.startswith('str0')]"}
Generated  translation
[ value for key, value in list ( var0. items ( ) ) if'str0'in key. lower ( ) ] 
--------- B -----------
{'intent': {'gloss': ['count', 'most', 'frequent', '100', 'words', 'in', 'column', 'str0', 'of', 'dataframe', 'var0'], 'words': ['count', 'most', 'frequent', '100', 'words', 'in', 'column', 'str0', 'of', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'text', 'var0': 'df'}, 'snippet': "counter(' '.join(var0['str0']).split()).most_common(100)"}
Generated  translation
var0. groupby ('str0'). size ( ). reset _ index ( 100 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'current', 'directory', 'of', 'a', 'script'], 'words': ['get', 'the', 'current', 'directory', 'of', 'a', 'script'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'os.path.basename(os.path.dirname(os.path.realpath(__file__)))'}
Generated  translation
os. path. dirname ( os. path. abspath ( _ _ file _ _ ) ) 
--------- B -----------
{'intent': {'gloss': ['sum', 'integers', 'contained', 'in', 'strings', 'in', 'list', 'str0'], 'words': ['sum', 'integers', 'contained', 'in', 'strings', 'in', 'list', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "['', '3.4', '', '', '1.0']", '[ str0 ]': "['', '3.4', '', '', '1.0']"}, 'snippet': 'sum(int(float(item)) for item in [_f for _f in [ str0 ] if\n    _f])'}
Generated  translation
sum ( map ( int, [ str0 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['write', 'line', 'str0', 'to', 'file', 'var0'], 'words': ['write', 'line', 'str0', 'to', 'file', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'hi there', 'var0': 'myfile'}, 'snippet': "f = open('var0', 'w')\nf.write('hi there\\n')\nf.close()"}
Generated  translation
var0. write ('str0') 
--------- B -----------
{'intent': {'gloss': ['get', 'all', 'urls', 'within', 'text', 'var0'], 'words': ['get', 'all', 'urls', 'within', 'text', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': 're.findall(\'"(http.*?)"\', var0, re.multiline | re.dotall)'}
Generated  translation
urllib. parse. quote _ plus ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['match', 'urls', 'whose', 'domain', 'doesn', "'", 't', 'start', 'with', 'var0', 'from', 'string', 'var1', 'using', 'regex'], 'words': ['match', 'urls', 'whose', 'domain', 'doesn', "'", 't', 'start', 'with', 'var0', 'from', 'string', 'var1', 'using', 'regex'], 'after': [' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 't', 'var1': 'document'}, 'snippet': 're.findall(\'http://[^t][^s"]+\\\\.html\', var1)'}
Generated  translation
urllib. request. urlretrieve ('var1 ','var0') 
--------- B -----------
{'intent': {'gloss': ['format', 'a', 'datetime', 'string', 'var0', 'to', 'extract', 'date', 'only'], 'words': ['format', 'a', 'datetime', 'string', 'var0', 'to', 'extract', 'date', 'only'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'when'}, 'snippet': "then = datetime.datetime.strptime(var0, '%y-%m-%d').date()"}
Generated  translation
datetime. datetime. combine ( var0, datetime. time. min ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'hex', 'string', 'str0', 'to', 'a', 'float', 'number'], 'words': ['convert', 'hex', 'string', 'str0', 'to', 'a', 'float', 'number'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '470fc614'}, 'snippet': "struct.unpack('!f', 'str0'.decode('hex'))[0]"}
Generated  translation
float ( int ('str0 ', 0 ) ) 
--------- B -----------
{'intent': {'gloss': ['reverse', 'the', 'order', 'of', 'words', ',', 'delimited', 'by', 'str0', ',', 'in', 'string', 'var0'], 'words': ['reverse', 'the', 'order', 'of', 'words', ',', 'delimited', 'by', 'str0', ',', 'in', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', '', ' ', ' ', ' ', '', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '.', 'var0': 's'}, 'snippet': '"""str0""".join(var0.split(\'str0\')[::-1])'}
Generated  translation
re. findall ('\ \ d + ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['parse', 'milliseconds', 'epoch', 'time', 'str0', 'to', 'format', 'str1'], 'words': ['parse', 'milliseconds', 'epoch', 'time', 'str0', 'to', 'format', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '1236472051807', 'str1': '%y-%m-%d %h:%m:%s'}, 'snippet': "time.strftime('str1', time.gmtime(1236472051807 / 1000.0))"}
Generated  translation
datetime. datetime. strptime ('str0 ','str1'). time ( ) 
--------- B -----------
{'intent': {'gloss': ['add', 'one', 'to', 'the', 'hidden', 'web', 'element', 'with', 'id', 'str0', 'with', 'selenium', 'python', 'script'], 'words': ['add', 'one', 'to', 'the', 'hidden', 'web', 'element', 'with', 'id', 'str0', 'with', 'selenium', 'python', 'script'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'xyz'}, 'snippet': 'browser.execute_script("document.getelementbyid(\'xyz\').value+=\'1\'")'}
Generated  translation
driver. execute _ script ('str0') 
--------- B -----------
{'intent': {'gloss': ['format', 'the', 'variables', 'str0', 'and', 'str1', 'using', 'string', 'formatting'], 'words': ['format', 'the', 'variables', 'str0', 'and', 'str1', 'using', 'string', 'formatting'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'self.goals', 'str1': 'self.penalties'}, 'snippet': '"""({:d} goals, ${:d})""".format(self.goals, self.penalties)'}
Generated  translation
" " " str0 " " ". format ('str1 ','str0') 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'list', 'of', 'lists', 'var0', 'to', 'list', 'of', 'integers'], 'words': ['convert', 'a', 'list', 'of', 'lists', 'var0', 'to', 'list', 'of', 'integers'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': "var0 = [int(''.join([str(y) for y in x])) for x in var0]"}
Generated  translation
[ map ( int, sublist ) for sublist in var0 ] 
--------- B -----------
{'intent': {'gloss': ['update', 'datetime', 'field', 'in', 'var0', 'to', 'be', 'the', 'existing', 'var1', 'plus', '100', 'years'], 'words': ['update', 'datetime', 'field', 'in', 'var0', 'to', 'be', 'the', 'existing', 'var1', 'plus', '100', 'years'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mymodel', 'var1': 'timestamp'}, 'snippet': "var0.objects.update(var1=f('var1') + timedelta(days=36524.25))"}
Generated  translation
print ( var0. cert _ datetime ( var1, datetime. timedelta ( hours = 100 ) ). isoformat ( ) ) 
--------- B -----------
{'intent': {'gloss': ['determine', 'number', 'of', 'files', 'on', 'a', 'drive', 'with', 'python'], 'words': ['determine', 'number', 'of', 'files', 'on', 'a', 'drive', 'with', 'python'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "os.statvfs('/').f_files - os.statvfs('/').f_ffree"}
Generated  translation
os. path. dirname ( os. path. abspath ( _ _ file _ _ ) ) 
--------- B -----------
{'intent': {'gloss': ['encode', 'a', 'latin', 'character', 'in', 'string', 'str0', 'properly'], 'words': ['encode', 'a', 'latin', 'character', 'in', 'string', 'str0', 'properly'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'sopetÃ³n'}, 'snippet': '"""str0""".encode(\'latin-1\').decode(\'utf-8\')'}
Generated  translation
" " " str0 " " ". encode ('latin - 1') 
--------- B -----------
{'intent': {'gloss': ['find', 'octal', 'characters', 'matches', 'from', 'a', 'string', 'var0', 'using', 'regex'], 'words': ['find', 'octal', 'characters', 'matches', 'from', 'a', 'string', 'var0', 'using', 'regex'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'str'}, 'snippet': 'print(re.findall("\'\\\\\\\\[0-7]{1,3}\'", var0))'}
Generated  translation
re. findall ('(? = ( \ \ w \ \ w ) ) ','var0') 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'list', 'in', 'first', 'column', 'into', 'multiple', 'columns', 'keeping', 'other', 'columns', 'as', 'well', 'in', 'pandas', 'data', 'frame'], 'words': ['split', 'a', 'list', 'in', 'first', 'column', 'into', 'multiple', 'columns', 'keeping', 'other', 'columns', 'as', 'well', 'in', 'pandas', 'data', 'frame'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'pd.concat([df[0].apply(pd.series), df[1]], axis=1)'}
Generated  translation
pd. concat ( [ df ['var'], axis = 1 ) ], axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'new', 'column', 'var0', 'in', 'pandas', 'data', 'frame', 'var1', 'based', 'on', 'the', 'values', 'in', 'column', 'var2'], 'words': ['create', 'a', 'new', 'column', 'var0', 'in', 'pandas', 'data', 'frame', 'var1', 'based', 'on', 'the', 'values', 'in', 'column', 'var2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'weekday', 'var1': 'data', 'var2': 'my_dt'}, 'snippet': "var1['var0'] = var1['var2'].apply(lambda x: x.var0())"}
Generated  translation
var1 ['var0'] = var1 ['var2'] 
--------- B -----------
{'intent': {'gloss': ['delete', 'all', 'occurrences', 'of', 'character', 'str0', 'in', 'string', 'str1'], 'words': ['delete', 'all', 'occurrences', 'of', 'character', 'str0', 'in', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'i', 'str1': 'it is icy'}, 'snippet': '"""""".join([char for char in \'str1\' if char != \'str0\'])'}
Generated  translation
re. sub ('(? < =. ) ','str1 ','str0') 
--------- B -----------
{'intent': {'gloss': ['find', 'all', 'files', 'in', 'directory', 'str0', 'with', 'extension', 'str1'], 'words': ['find', 'all', 'files', 'in', 'directory', 'str0', 'with', 'extension', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '/mydir', 'str1': '.txt'}, 'snippet': "for file in os.listdir('str0'):\n    if file.endswith('str1'):\n        pass"}
Generated  translation
results + = [ each for each in os. listdir ('str0') if each. endswith ('str1') ] 
--------- B -----------
{'intent': {'gloss': ['write', 'line', 'str0', 'to', 'file', 'str1'], 'words': ['write', 'line', 'str0', 'to', 'file', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'hello', 'str1': 'somefile.txt'}, 'snippet': "with open('str1', 'a') as the_file:\n    the_file.write('hello\\n')"}
Generated  translation
with open ('str1 ','r') as myfile : myfile. write ('str0') 
--------- B -----------
{'intent': {'gloss': ['loop', 'over', 'files', 'in', 'directory', 'str0'], 'words': ['loop', 'over', 'files', 'in', 'directory', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '.'}, 'snippet': "for fn in os.listdir('str0'):\n    if os.path.isfile(fn):\n        pass"}
Generated  translation
for dirname, dirnames, filenames in os. walk ('str0') : pass 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'string', 'var0', 'with', 'into', 'all', 'strings', 'of', 'repeated', 'characters'], 'words': ['split', 'a', 'string', 'var0', 'with', 'into', 'all', 'strings', 'of', 'repeated', 'characters'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': "[m.group(0) for m in re.finditer('(\\\\d)\\\\1*', var0)]"}
Generated  translation
re. findall ('\ \ [ ( [ ^ \ \ ] ) \ \ ] ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['in', 'var0', ',', 'get', 'the', 'content', 'of', 'the', 'sibling', 'of', 'the', 'var1', 'tag', 'with', 'text', 'content', 'str0'], 'words': ['in', 'var0', ',', 'get', 'the', 'content', 'of', 'the', 'sibling', 'of', 'the', 'var1', 'tag', 'with', 'text', 'content', 'str0'], 'after': [' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'soup', 'var1': 'td', 'str0': 'address:'}, 'snippet': "print(var0.find(text='str0').findnext('var1').contents[0])"}
Generated  translation
print ( var0. xpath ( '. / / a [ contains ( text ( ), " text a " ) ]') ) 
--------- B -----------
{'intent': {'gloss': ['use', 'a', 'regex', 'to', 'get', 'all', 'text', 'in', 'a', 'string', 'var0', 'that', 'is', 'not', 'surrounded', 'by', 'square', 'brackets'], 'words': ['use', 'a', 'regex', 'to', 'get', 'all', 'text', 'in', 'a', 'string', 'var0', 'that', 'is', 'not', 'surrounded', 'by', 'square', 'brackets'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'example_str'}, 'snippet': "re.findall('(.*?)(?:\\\\[.*?\\\\]|$)', var0)"}
Generated  translation
re. sub ('\ \ [ (. *? ) \ \ ] ','', var0 ) 
--------- B -----------
{'intent': {'gloss': ['open', 'a', 'str0', 'terminal', 'from', 'python', 'script', 'and', 'run', 'str1', 'command', '.'], 'words': ['open', 'a', 'str0', 'terminal', 'from', 'python', 'script', 'and', 'run', 'str1', 'command', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'gnome', 'str1': 'sudo apt-get update'}, 'snippet': 'os.system(\'gnome-terminal -e \\\'bash -c "sudo apt-get update; exec bash"\\\'\')'}
Generated  translation
os. system ('str0') 
--------- B -----------
{'intent': {'gloss': ['write', 'multiple', 'strings', 'var0', ',', 'var1', 'and', 'var2', 'in', 'one', 'line', 'in', 'a', 'file', 'var3'], 'words': ['write', 'multiple', 'strings', 'var0', ',', 'var1', 'and', 'var2', 'in', 'one', 'line', 'in', 'a', 'file', 'var3'], 'after': [' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'line1', 'var1': 'line2', 'var2': 'line3', 'var3': 'target'}, 'snippet': "var3.write('%r\\n%r\\n%r\\n' % (var0, var1, var2))"}
Generated  translation
with open ('var0 ','var1 ','var2') as f : var3. write ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['pandas', ':', 'delete', 'rows', 'in', 'dataframe', 'var0', 'based', 'on', 'multiple', 'columns', 'values'], 'words': ['pandas', ':', 'delete', 'rows', 'in', 'dataframe', 'var0', 'based', 'on', 'multiple', 'columns', 'values'], 'after': ['', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': "var0.set_index(list('bc')).drop(tuples, errors='ignore').reset_index()"}
Generated  translation
var0. apply ( lambda x : x. fillna ( x. columns ), axis = 0 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'content', 'of', 'child', 'tag', 'withvar0', 'attribute', 'whose', 'parent', 'has', 'css', 'var1'], 'words': ['get', 'the', 'content', 'of', 'child', 'tag', 'withvar0', 'attribute', 'whose', 'parent', 'has', 'css', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'href', 'var1': 'someclass'}, 'snippet': "self.driver.find_element_by_css_selector('.someclass a').get_attribute('var0')"}
Generated  translation
print ( driver. find _ element _ by _ css _ selector ('var1') ) 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'string', 'by', 'a', 'delimiter', 'in', 'python'], 'words': ['split', 'a', 'string', 'by', 'a', 'delimiter', 'in', 'python'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "[x.strip() for x in '2.matches $$text$$ string'.split('$$text$$')]"}
Generated  translation
s. rstrip ( ). split ('\ t') 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'a', 'directory', 'var0', 'exists', 'and', 'create', 'it', 'if', 'necessary'], 'words': ['check', 'if', 'a', 'directory', 'var0', 'exists', 'and', 'create', 'it', 'if', 'necessary'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'path'}, 'snippet': 'try:\n    os.makedirs(var0)\nexcept oserror:\n    if not os.var0.isdir(var0):\n        raise'}
Generated  translation
os. path. commonprefix ( ['var0 ', os. path. realpath ( var0 ) ] ) 
--------- B -----------
{'intent': {'gloss': ['extract', 'all', 'the', 'values', 'with', 'keys', 'str0', 'and', 'str1', 'from', 'a', 'list', 'of', 'dictionaries', 'var0', 'to', 'list', 'of', 'tuples'], 'words': ['extract', 'all', 'the', 'values', 'with', 'keys', 'str0', 'and', 'str1', 'from', 'a', 'list', 'of', 'dictionaries', 'var0', 'to', 'list', 'of', 'tuples'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'x', 'str1': 'y', 'var0': 'd'}, 'snippet': "[(str0['str0'], str0['str1']) for str0 in var0]"}
Generated  translation
[ key for item in var0 if item ['str0'] = ='str1'] 
--------- B -----------
{'intent': {'gloss': ['running', 'r', 'script', 'str0', 'from', 'python'], 'words': ['running', 'r', 'script', 'str0', 'from', 'python'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '/pathto/myrscript.r'}, 'snippet': "subprocess.call(['/usr/bin/rscript', '--vanilla', 'str0'])"}
Generated  translation
os. system ('str0') 
--------- B -----------
{'intent': {'gloss': ['convert', 'list', 'of', 'tuples', 'var0', 'to', 'a', 'string'], 'words': ['convert', 'list', 'of', 'tuples', 'var0', 'to', 'a', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': '""", """.join(\'(\' + \', \'.join(i) + \')\' for i in var0)'}
Generated  translation
emaillist ='\ n '. join ( [ str ( i ) for i in var0 ] ) 
--------- B -----------
{'intent': {'gloss': ['find', 'all', 'files', 'in', 'directory', 'str0', 'with', 'extension', 'str1'], 'words': ['find', 'all', 'files', 'in', 'directory', 'str0', 'with', 'extension', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '/mydir', 'str1': '.txt'}, 'snippet': "os.chdir('str0')\nfor file in glob.glob('*.txt'):\n    pass"}
Generated  translation
results + = [ each for each in os. listdir ('str0') if each. endswith ('str1') ] 
--------- B -----------
{'intent': {'gloss': ['python', 'regex', '-', 'check', 'for', 'a', 'capital', 'letter', 'with', 'a', 'following', 'lowercase', 'in', 'string', 'var0'], 'words': ['python', 'regex', '-', 'check', 'for', 'a', 'capital', 'letter', 'with', 'a', 'following', 'lowercase', 'in', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'string'}, 'snippet': "re.sub('^[a-z0-9]*(?![a-z])', '', var0)"}
Generated  translation
re. search ('[ ^ a - z ] ', var0 ). group ( 1 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'index', 'of', 'an', 'integer', 'str0', 'from', 'a', 'list', 'var0', 'if', 'the', 'list', 'also', 'contains', 'boolean', 'items'], 'words': ['get', 'the', 'index', 'of', 'an', 'integer', 'str0', 'from', 'a', 'list', 'var0', 'if', 'the', 'list', 'also', 'contains', 'boolean', 'items'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '1', 'var0': 'lst'}, 'snippet': 'next(i for i, x in enumerate(var0) if not isinstance(x, bool) and x == 1)'}
Generated  translation
map ( int, [ str0 ] ) 
--------- B -----------
{'intent': {'gloss': ['insert', 'directory', 'str0', 'into', 'directory', 'var0'], 'words': ['insert', 'directory', 'str0', 'into', 'directory', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'apps', 'var0': '__file__'}, 'snippet': "sys.path.insert(1, os.path.join(os.path.dirname(var0), 'str0'))"}
Generated  translation
sys. path. insert ( 0,'str0') 
--------- B -----------
{'intent': {'gloss': ['write', 'the', 'data', 'of', 'dataframe', 'var0', 'into', 'text', 'file', 'str0'], 'words': ['write', 'the', 'data', 'of', 'dataframe', 'var0', 'into', 'text', 'file', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'np.txt'}, 'snippet': "np.savetxt('c:\\\\data\\\\np.txt', var0.values, fmt='%d')"}
Generated  translation
var0. write ('str0') 
--------- B -----------
{'intent': {'gloss': ['write', 'content', 'of', 'dataframe', 'var0', 'into', 'text', 'file', 'str0'], 'words': ['write', 'content', 'of', 'dataframe', 'var0', 'into', 'text', 'file', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'c:\\data\\pandas.txt'}, 'snippet': "var0.to_csv('str0', header=none, index=none, sep=' ', mode='a')"}
Generated  translation
var0. write. texttype ('str0') 
--------- B -----------
{'intent': {'gloss': ['print', 'a', '2', 'dimensional', 'list', 'var0', 'as', 'a', 'table', 'with', 'delimiters'], 'words': ['print', 'a', '2', 'dimensional', 'list', 'var0', 'as', 'a', 'table', 'with', 'delimiters'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'tab'}, 'snippet': "print('\\n'.join('\\t'.join(str(col) for col in row) for row in var0))"}
Generated  translation
print ('total cost is : $ { :,. 2f } '. format ( var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'a', 'directory', 'var0', 'exists', 'and', 'create', 'it', 'if', 'necessary'], 'words': ['check', 'if', 'a', 'directory', 'var0', 'exists', 'and', 'create', 'it', 'if', 'necessary'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'path'}, 'snippet': 'try:\n    os.makedirs(var0)\nexcept oserror as exception:\n    if exception.errno != errno.eexist:\n        raise'}
Generated  translation
os. path. commonprefix ( ['var0 ', os. path. realpath ( var0 ) ] ) 
--------- B -----------
{'intent': {'gloss': ['send', 'a', 'post', 'request', 'with', 'raw', 'data', 'var0', 'and', 'basic', 'authentication', 'with', 'var1', 'and', 'var2'], 'words': ['send', 'a', 'post', 'request', 'with', 'raw', 'data', 'var0', 'and', 'basic', 'authentication', 'with', 'var1', 'and', 'var2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'data', 'var1': 'username', 'var2': 'password'}, 'snippet': 'requests.post(url, var0=var0, headers=headers_dict, auth=(var1, var2))'}
Generated  translation
post _ response = requests. post ( url ='var0 ', params = ['var1 ','var2'] ) 
--------- B -----------
{'intent': {'gloss': ['parse', 'tab', '-', 'delimited', 'csv', 'file', 'str0', 'into', 'a', 'list'], 'words': ['parse', 'tab', '-', 'delimited', 'csv', 'file', 'str0', 'into', 'a', 'list'], 'after': [' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'text.txt'}, 'snippet': "lol = list(csv.reader(open('str0', 'rb'), delimiter='\\t'))"}
Generated  translation
pd. read _ csv ('str0 ', sep ='\ t') 
--------- B -----------
{'intent': {'gloss': ['loop', 'through', 'the', 'ip', 'address', 'range', 'str0'], 'words': ['loop', 'through', 'the', 'ip', 'address', 'range', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '192.168.x.x'}, 'snippet': "generator = iter_iprange('192.168.1.1', '192.168.255.255', step=1)"}
Generated  translation
globals ( ) ['str0']. apply ( lambda x : x. split ('str0') ) 
--------- B -----------
{'intent': {'gloss': ['modify', 'sys', '.', 'path', 'for', 'python', 'module', 'var0'], 'words': ['modify', 'sys', '.', 'path', 'for', 'python', 'module', 'var0'], 'after': [' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'subdir'}, 'snippet': "sys.path.append(os.path.join(os.path.dirname(__file__), 'var0'))"}
Generated  translation
var0. write ('\ n '. join ( var0. path ) ) 
--------- B -----------
{'intent': {'gloss': ['lower', 'a', 'string', 'var0', 'and', 'remove', 'non', '-', 'alphanumeric', 'characters', 'aside', 'from', 'space'], 'words': ['lower', 'a', 'string', 'var0', 'and', 'remove', 'non', '-', 'alphanumeric', 'characters', 'aside', 'from', 'space'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'text'}, 'snippet': "re.sub('[^\\\\sa-za-z0-9]', '', var0).lower().strip()"}
Generated  translation
re. sub ('[ ^ 0 - 9 ] + ','', var0 ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'all', 'non', '-', 'alphanumeric', 'characters', 'except', 'space', 'from', 'a', 'string', 'var0', 'and', 'lower', 'it'], 'words': ['remove', 'all', 'non', '-', 'alphanumeric', 'characters', 'except', 'space', 'from', 'a', 'string', 'var0', 'and', 'lower', 'it'], 'after': [' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'text'}, 'snippet': "re.sub('(?!\\\\s)[\\\\w_]', '', var0).lower().strip()"}
Generated  translation
re. sub ('[ ^ 0 - 9 ] + ','', var0 ) 
--------- B -----------
{'intent': {'gloss': ['scatter', 'a', 'plot', 'with', 'x', ',', 'y', 'position', 'of', 'str0', 'and', 'face', 'color', 'equal', 'to', 'none'], 'words': ['scatter', 'a', 'plot', 'with', 'x', ',', 'y', 'position', 'of', 'str0', 'and', 'face', 'color', 'equal', 'to', 'none'], 'after': [' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'np.random.randn(100)'}, 'snippet': "plt.scatter(np.random.randn(100), np.random.randn(100), facecolors='none')"}
Generated  translation
plt. scatter ( x, y, color ='str0 ', color ='none ) 
--------- B -----------
{'intent': {'gloss': ['prepend', 'the', 'line', 'str0', 'to', 'the', 'contents', 'of', 'file', 'str1', 'and', 'save', 'as', 'the', 'file', 'str2'], 'words': ['prepend', 'the', 'line', 'str0', 'to', 'the', 'contents', 'of', 'file', 'str1', 'and', 'save', 'as', 'the', 'file', 'str2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '#test firstline\n', 'str1': 'infile', 'str2': 'outfile'}, 'snippet': "open('str2', 'w').write('str0' + open('str1').read())"}
Generated  translation
with open ('str1 ','str0') as f : f. write ('str2') 
--------- B -----------
{'intent': {'gloss': ['extract', 'ip', 'address', 'from', 'an', 'html', 'string'], 'words': ['extract', 'ip', 'address', 'from', 'an', 'html', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "ip = re.findall('[0-9]+(?:\\\\.[0-9]+){3}', s)"}
Generated  translation
" " " \ \ u003cp \ \ u003e " " ". encode ('unicode _ escape') 
--------- B -----------
{'intent': {'gloss': ['unpack', 'a', 'series', 'of', 'tuples', 'in', 'pandas', 'into', 'a', 'dataframe', 'with', 'column', 'names', 'str0', 'and', 'str1'], 'words': ['unpack', 'a', 'series', 'of', 'tuples', 'in', 'pandas', 'into', 'a', 'dataframe', 'with', 'column', 'names', 'str0', 'and', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'out-1', 'str1': 'out-2'}, 'snippet': "pd.dataframe(out.tolist(), columns=['str0', 'str1'], index=out.index)"}
Generated  translation
pd. concat ( [ df, pd. dataframe ( ['str0 ','str1'] ], axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'first', 'value', 'from', 'dataframe', 'var0', 'where', 'column', 'str0', 'is', 'equal', 'to', 'str1'], 'words': ['get', 'the', 'first', 'value', 'from', 'dataframe', 'var0', 'where', 'column', 'str0', 'is', 'equal', 'to', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'letters', 'str1': 'c'}, 'snippet': "var0.loc[var0['str0'] == 'str1', 'str0'].values[0]"}
Generated  translation
var0. loc [ var0 ['str0'] = ='str1'] 
--------- B -----------
{'intent': {'gloss': ['remove', 'all', 'strings', 'from', 'a', 'list', 'a', 'strings', 'var0', 'where', 'the', 'values', 'starts', 'with', 'str0', 'or', 'str1'], 'words': ['remove', 'all', 'strings', 'from', 'a', 'list', 'a', 'strings', 'var0', 'where', 'the', 'values', 'starts', 'with', 'str0', 'or', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'sents', 'str0': '@$\t', 'str1': '#'}, 'snippet': "[x for x in var0 if not x.startswith('str0') and not x.startswith('str1')]"}
Generated  translation
[ x for x in var0 if x! ='str0'] 
--------- B -----------
{'intent': {'gloss': ['create', 'new', 'dataframe', 'object', 'by', 'merging', 'columns', 'str0', 'of', 'dataframes', 'var0', 'and', 'var1', 'and', 'rename', 'the', 'columns', 'from', 'dataframes', 'var0', 'and', 'var1', 'with', 'suffix', 'var4', 'and', 'var5', 'respectively'], 'words': ['create', 'new', 'dataframe', 'object', 'by', 'merging', 'columns', 'str0', 'of', 'dataframes', 'var0', 'and', 'var1', 'and', 'rename', 'the', 'columns', 'from', 'dataframes', 'var0', 'and', 'var1', 'with', 'suffix', 'var4', 'and', 'var5', 'respectively'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'key', 'var0': 'split_df', 'var1': 'csv_df', 'var2': 'split_df', 'var3': 'csv_df', 'var4': '_left', 'var5': '_right'}, 'snippet': "pd.merge(var2, var3, on=['str0'], suffixes=('var4', 'var5'))"}
Generated  translation
pd. merge ( var2, var0, var1, left _ index = true, how ='outer') 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'string', 'str0', 'by', 'str1', 'keeping', 'str1', 'in', 'the', 'result'], 'words': ['split', 'a', 'string', 'str0', 'by', 'str1', 'keeping', 'str1', 'in', 'the', 'result'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'docs/src/scripts/temp', 'str1': '/', 'str2': '/'}, 'snippet': '"""str0""".replace(\'str2\', \'/\\x00/\').split(\'\\x00\')'}
Generated  translation
re. split ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['group', 'a', 'list', 'of', 'dicts', 'var0', 'into', 'one', 'dict', 'by', 'key'], 'words': ['group', 'a', 'list', 'of', 'dicts', 'var0', 'into', 'one', 'dict', 'by', 'key'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'ld'}, 'snippet': 'print(dict(zip(var0[0], zip(*[list(d.values()) for d in var0]))))'}
Generated  translation
new _ list = { k : v for d in var0 } 
--------- B -----------
{'intent': {'gloss': ['replace', 'all', 'elements', 'in', 'array', 'var0', 'that', 'are', 'not', 'present', 'in', 'array', 'str0', 'with', 'zeros'], 'words': ['replace', 'all', 'elements', 'in', 'array', 'var0', 'that', 'are', 'not', 'present', 'in', 'array', 'str0', 'with', 'zeros'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'str0': '[1, 3, 4]', '[ str0 ]': '[1, 3, 4]'}, 'snippet': 'np.where(np.in1d(var0, [ str0 ]).reshape(var0.shape), var0, 0)'}
Generated  translation
np. any ( np. in1d ( var0, 0, 1 ) ) 
--------- B -----------
{'intent': {'gloss': ['how', 'to', 'count', 'distinct', 'values', 'in', 'a', 'column', 'of', 'a', 'pandas', 'group', 'by', 'object', '?'], 'words': ['how', 'to', 'count', 'distinct', 'values', 'in', 'a', 'column', 'of', 'a', 'pandas', 'group', 'by', 'object', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "df.groupby(['col1', 'col2'])['col3'].nunique().reset_index()"}
Generated  translation
sorted ( list ( range ( len ( var0 ) ) ), key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['average', 'each', 'two', 'columns', 'of', 'array', 'var0'], 'words': ['average', 'each', 'two', 'columns', 'of', 'array', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'data'}, 'snippet': 'var0.reshape(-1, j).mean(axis=1).reshape(var0.shape[0], -1)'}
Generated  translation
var0. groupby ( np. arange ( len ( var0. shape [ 0 ] ), 2 ) ) 
--------- B -----------
{'intent': {'gloss': ['do', 'a', 'scatter', 'plot', 'with', 'empty', 'circles'], 'words': ['do', 'a', 'scatter', 'plot', 'with', 'empty', 'circles'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "plt.plot(np.random.randn(100), np.random.randn(100), 'o', mfc='none')"}
Generated  translation
plt. scatter ( ) 
--------- B -----------
{'intent': {'gloss': ['select', 'rows', 'in', 'a', 'dataframe', 'var0', 'column', 'str0', 'between', 'two', 'values', '99', 'and', '101'], 'words': ['select', 'rows', 'in', 'a', 'dataframe', 'var0', 'column', 'str0', 'between', 'two', 'values', '99', 'and', '101'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'closing_price'}, 'snippet': "var0 = var0[(var0['str0'] >= 99) & (var0['str0'] <= 101)]"}
Generated  translation
var0 ['str0']. apply ( lambda x : x [ len ( x ) / 101 ] ) 
--------- B -----------
{'intent': {'gloss': ['regex', ',', 'find', 'str0s', 'only', 'in', 'the', 'middle', 'of', 'string', 'var0'], 'words': ['regex', ',', 'find', 'str0s', 'only', 'in', 'the', 'middle', 'of', 'string', 'var0'], 'after': ['', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'n', 'var0': 's'}, 'snippet': "re.findall('n(?<=[^n]n)n+(?=[^n])(?i)', var0)"}
Generated  translation
" " " str0 " " ". replace ('str0 ','' ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'duplicate', 'words', 'from', 'a', 'string', 'var0', 'using', 'regex'], 'words': ['remove', 'duplicate', 'words', 'from', 'a', 'string', 'var0', 'using', 'regex'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'text'}, 'snippet': "var0 = re.sub('\\\\b(\\\\w+)( \\\\1\\\\b)+', '\\\\1', var0)"}
Generated  translation
re. sub ('(? < = [ a - z ] ) \ \ ) ','\ \ 1 ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['replace', 'dot', 'characters', 'str0', 'associated', 'with', 'ascii', 'letters', 'in', 'list', 'var0', 'with', 'space', 'str1'], 'words': ['replace', 'dot', 'characters', 'str0', 'associated', 'with', 'ascii', 'letters', 'in', 'list', 'var0', 'with', 'space', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '.', 'var0': 's', 'str1': ''}, 'snippet': "[re.sub('(?<!\\\\d)\\\\.(?!\\\\d)', ' ', i) for i in var0]"}
Generated  translation
[ m. replace ('[ \ x00 - \ x7f ] ','str0') for x in var0 ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'each', 'tuple', 'in', 'list', 'var0', 'to', 'a', 'string', 'with', 'str0', 'separating', 'the', 'tuples', "'", 'elements'], 'words': ['convert', 'each', 'tuple', 'in', 'list', 'var0', 'to', 'a', 'string', 'with', 'str0', 'separating', 'the', 'tuples', "'", 'elements'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '']}, 'slot_map': {'var0': 'l', 'str0': '@'}, 'snippet': '""" """.join([(\'%d@%d\' % (t[0], t[1])) for t in var0])'}
Generated  translation
" " " " " ". join ( chr ( i ) for i in var0 ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'dictionaries', 'by', 'the', 'value', 'of', 'keys', 'str0', ',', 'str1', ',', 'str2', 'in', 'ascending', 'order', '.'], 'words': ['sort', 'a', 'list', 'of', 'dictionaries', 'by', 'the', 'value', 'of', 'keys', 'str0', ',', 'str1', ',', 'str2', 'in', 'ascending', 'order', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'title', 'str1': 'title_url', 'str2': 'id'}, 'snippet': "l.sort(key=lambda x: (x['str0'], x['str1'], x['str2']))"}
Generated  translation
sorted ( str0, key = operator. itemgetter ('str1 ','str2') ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'list', 'var0', 'in', 'descending', 'order', 'based', 'on', 'the', 'date', 'value', 'in', 'second', 'element', 'of', 'each', 'list', 'in', 'list', 'var0'], 'words': ['sort', 'list', 'var0', 'in', 'descending', 'order', 'based', 'on', 'the', 'date', 'value', 'in', 'second', 'element', 'of', 'each', 'list', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'li', 'var1': 'li'}, 'snippet': "sorted(var1, key=lambda x: datetime.strptime(x[1], '%d/%m/%y'), reverse=true)"}
Generated  translation
var1. sort ( key = lambda x : x [ 2 ], reverse = true ) 
--------- B -----------
{'intent': {'gloss': ['set', 'font', 'var0', 'to', 'display', 'non', '-', 'ascii', 'characters', 'in', 'matplotlib'], 'words': ['set', 'font', 'var0', 'to', 'display', 'non', '-', 'ascii', 'characters', 'in', 'matplotlib'], 'after': [' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'arial'}, 'snippet': "matplotlib.rc('font', **{'sans-serif': 'var0', 'family': 'sans-serif'})"}
Generated  translation
re. sub ('[ ^ \ \ x00 - \ \ x7f ] + ','', var0 ) 
--------- B -----------
{'intent': {'gloss': ['find', 'all', 'files', 'in', 'directory', 'str0', 'with', 'extension', 'str1'], 'words': ['find', 'all', 'files', 'in', 'directory', 'str0', 'with', 'extension', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '/mydir', 'str1': '.txt'}, 'snippet': "for root, dirs, files in os.walk('str0'):\n    for file in files:\n        if file.endswith('str1'):\n            pass"}
Generated  translation
results + = [ each for each in os. listdir ('str0') if each. endswith ('str1') ] 
--------- B -----------
{'intent': {'gloss': ['load', 'data', 'containing', 'str0', 'from', 'file', 'str1', 'into', 'numpy', 'array', 'var0'], 'words': ['load', 'data', 'containing', 'str0', 'from', 'file', 'str1', 'into', 'numpy', 'array', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'utf-8', 'str1': 'new.txt', 'var0': 'arr'}, 'snippet': "var0 = numpy.fromiter(codecs.open('str1', encoding='str0'), dtype='<u2')"}
Generated  translation
var0 = numpy. loadtxt ( open ('str1 ','str0'), delimiter = ',') 
--------- B -----------
{'intent': {'gloss': ['select', 'values', 'from', 'column', 'str0', 'for', 'which', 'corresponding', 'values', 'in', 'column', 'str1', 'will', 'be', 'greater', 'than', '50', ',', 'and', 'in', 'column', 'str2', '-', 'equal', '900', 'in', 'dataframe', 'var0'], 'words': ['select', 'values', 'from', 'column', 'str0', 'for', 'which', 'corresponding', 'values', 'in', 'column', 'str1', 'will', 'be', 'greater', 'than', '50', ',', 'and', 'in', 'column', 'str2', '-', 'equal', '900', 'in', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'a', 'str1': 'b', 'str2': 'c', 'var0': 'df'}, 'snippet': "var0['str0'][(var0['str1'] > 50) & (var0['str2'] == 900)]"}
Generated  translation
var0 [ ( var0 ['str1'] > 50, axis = 1 ) | ( var0 ['str2'] < 50 ) ] 
--------- B -----------
{'intent': {'gloss': ['find', '10', 'largest', 'differences', 'between', 'each', 'respective', 'elements', 'of', 'list', 'var0', 'and', 'list', 'var1'], 'words': ['find', '10', 'largest', 'differences', 'between', 'each', 'respective', 'elements', 'of', 'list', 'var0', 'and', 'list', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l1', 'var1': 'l2'}, 'snippet': 'heapq.nlargest(10, range(len(var0)), key=lambda i: abs(var0[i] - var1[i]))'}
Generated  translation
max ( abs ( x - y ) for x, y in zip ( var0, var1 ) ) 
--------- B -----------
{'intent': {'gloss': ['loop', 'through', 'the', 'ip', 'address', 'range', 'str0'], 'words': ['loop', 'through', 'the', 'ip', 'address', 'range', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '192.168.x.x'}, 'snippet': "for i in range(256):\n    for j in range(256):\n        ip = '192.168.%d.%d' % (i, j)\n        print(ip)"}
Generated  translation
globals ( ) ['str0']. apply ( lambda x : x. split ('str0') ) 
--------- B -----------
{'intent': {'gloss': ['find', 'a', 'value', 'within', 'nested', 'json', 'str0', 'where', 'the', 'key', 'inside', 'another', 'key', 'str1', 'is', 'unknown', '.'], 'words': ['find', 'a', 'value', 'within', 'nested', 'json', 'str0', 'where', 'the', 'key', 'inside', 'another', 'key', 'str1', 'is', 'unknown', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'data', 'str1': 'b'}, 'snippet': "list(str0['a']['str1'].values())[0]['maindata'][0]['info']"}
Generated  translation
max ( enumerate ('str0'), key = lambda x : x ['str1'] ) 
--------- B -----------
{'intent': {'gloss': ['finding', 'the', 'index', 'of', 'elements', 'containing', 'substring', 'str0', 'and', 'str1', 'in', 'a', 'list', 'of', 'strings', 'str2', '.'], 'words': ['finding', 'the', 'index', 'of', 'elements', 'containing', 'substring', 'str0', 'and', 'str1', 'in', 'a', 'list', 'of', 'strings', 'str2', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'how', 'str1': 'what', 'str2': 'mylist'}, 'snippet': "[i for i, j in enumerate(str2) if 'str0' in j.lower() or 'str1' in j.lower()]"}
Generated  translation
[ i for i in ( str2 if'str0 ','str1') ] 
--------- B -----------
{'intent': {'gloss': ['extract', 'a', 'url', 'from', 'a', 'string', 'var0'], 'words': ['extract', 'a', 'url', 'from', 'a', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mystring'}, 'snippet': "print(re.search('(?p<url>https?://[^\\\\s]+)', var0).group('url'))"}
Generated  translation
" " " " " ". join ( var0. split ( ) ) 
--------- B -----------
{'intent': {'gloss': ['selecting', 'rows', 'in', 'numpy', 'ndarray', 'str0', ',', 'where', 'the', 'value', 'in', 'the', 'first', 'column', 'is', '0', 'and', 'value', 'in', 'the', 'second', 'column', 'is', '1'], 'words': ['selecting', 'rows', 'in', 'numpy', 'ndarray', 'str0', ',', 'where', 'the', 'value', 'in', 'the', 'first', 'column', 'is', '0', 'and', 'value', 'in', 'the', 'second', 'column', 'is', '1'], 'after': [' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'a'}, 'snippet': 'str0[np.where((str0[:, (0)] == 0) * (str0[:, (1)] == 1))]'}
Generated  translation
np. where ( ( str0 [ :, ( 1 ) ] > 0 ). all ( axis = 1 ) ) 
--------- B -----------
{'intent': {'gloss': ['how', 'to', 'create', 'a', 'list', 'of', 'date', 'string', 'in', 'str0', 'format', 'with', 'python', 'pandas', '?'], 'words': ['how', 'to', 'create', 'a', 'list', 'of', 'date', 'string', 'in', 'str0', 'format', 'with', 'python', 'pandas', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'yyyymmdd'}, 'snippet': "[d.strftime('%y%m%d') for d in pandas.date_range('20130226', '20130302')]"}
Generated  translation
datetime. datetime. strptime ('str0 ','% b % d, % y'). strftime ('% a') 
--------- B -----------
{'intent': {'gloss': ['how', 'can', 'i', 'parse', 'a', 'time', 'string', 'containing', 'milliseconds', 'in', 'it', 'with', 'python', '?'], 'words': ['how', 'can', 'i', 'parse', 'a', 'time', 'string', 'containing', 'milliseconds', 'in', 'it', 'with', 'python', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "time.strptime('30/03/09 16:31:32.123', '%d/%m/%y %h:%m:%s.%f')"}
Generated  translation
time. mktime ( datetime. datetime. now ( ). timetuple ( ) ) 
--------- B -----------
{'intent': {'gloss': ['insert', 'var0', 'before', 'the', 'file', 'extension', 'in', 'str0', 'or', 'replace', 'var1', 'with', 'var2', 'if', 'it', 'precedes', 'the', 'extension', '.'], 'words': ['insert', 'var0', 'before', 'the', 'file', 'extension', 'in', 'str0', 'or', 'replace', 'var1', 'with', 'var2', 'if', 'it', 'precedes', 'the', 'extension', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'var0': '_suff', 'str0': 'long.file.name.jpg', 'var1': '_a', 'var2': 'suff'}, 'snippet': "re.sub('(\\\\_a)?\\\\.([^\\\\.]*)$', '_suff.\\\\2', 'str0')"}
Generated  translation
os. system ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['zip', 'two', '2', '-', 'd', 'arrays', 'var0', 'and', 'var1'], 'words': ['zip', 'two', '2', '-', 'd', 'arrays', 'var0', 'and', 'var1'], 'after': [' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'b'}, 'snippet': "np.array(zip(var0.ravel(), var1.ravel()), dtype='i4,i4').reshape(var0.shape)"}
Generated  translation
zip ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'any', 'url', 'within', 'string', 'var0'], 'words': ['remove', 'any', 'url', 'within', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'text'}, 'snippet': "var0 = re.sub('^https?:\\\\/\\\\/.*[\\\\r\\\\n]*', '', var0, flags=re.multiline)"}
Generated  translation
var0. replace ('','' ) 
--------- B -----------
{'intent': {'gloss': ['unzip', 'list', 'str0'], 'words': ['unzip', 'list', 'str0'], 'after': [' ', ' ', '']}, 'slot_map': {'str0': "[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]", '[ str0 ]': "[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]"}, 'snippet': "zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e',)])"}
Generated  translation
[ str0 ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'hex', '-', 'string', 'representation', 'to', 'actual', 'bytes'], 'words': ['convert', 'a', 'hex', '-', 'string', 'representation', 'to', 'actual', 'bytes'], 'after': [' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': '"""\\\\xf3\\\\xbe\\\\x80\\\\x80""".replace(\'\\\\x\', \'\').decode(\'hex\')'}
Generated  translation
" " " [UNK] " " ". encode ('hex'). decode ('hex') 
--------- B -----------
{'intent': {'gloss': ['unzip', 'list', 'str0', 'and', 'fill', 'empty', 'results', 'with', 'none'], 'words': ['unzip', 'list', 'str0', 'and', 'fill', 'empty', 'results', 'with', 'none'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]", '[ str0 ]': "[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]"}, 'snippet': "map(none, *[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e',)])"}
Generated  translation
[ open ('str0 ','ab') for _ in range ( 1, len ( str0 ) ) ] 
--------- B -----------
{'intent': {'gloss': ['combine', 'values', 'from', 'column', 'str0', 'and', 'column', 'str1', 'of', 'dataframe', 'var0', 'into', 'column', 'str2', 'of', 'datafram', 'var0'], 'words': ['combine', 'values', 'from', 'column', 'str0', 'and', 'column', 'str1', 'of', 'dataframe', 'var0', 'into', 'column', 'str2', 'of', 'datafram', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'b', 'str1': 'a', 'var0': 'df', 'str2': 'c', 'var1': 'df'}, 'snippet': "var1['str2'] = np.where(var1['str1'].isnull, var1['str0'], var1['str1'])"}
Generated  translation
var0 [ ['str0 ','str1'] ]. merge ( var0, on ='str2') 
--------- B -----------
{'intent': {'gloss': ['make', 'a', 'barplot', 'of', 'data', 'in', 'column', 'var0', 'of', 'dataframe', 'var1', 'colour', '-', 'coded', 'according', 'to', 'list', 'var2'], 'words': ['make', 'a', 'barplot', 'of', 'data', 'in', 'column', 'var0', 'of', 'dataframe', 'var1', 'colour', '-', 'coded', 'according', 'to', 'list', 'var2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'group', 'var1': 'df', 'var2': 'color'}, 'snippet': "var1['var0'].plot(kind='bar', var2=['r', 'g', 'b', 'r', 'g', 'b', 'r'])"}
Generated  translation
var1. set _ index ( ['var0 ','var2'] ). unstack ( level = 0 ) 
--------- B -----------
{'intent': {'gloss': ['download', 'a', 'file', 'var0', 'over', 'http', 'and', 'save', 'to', 'str0'], 'words': ['download', 'a', 'file', 'var0', 'over', 'http', 'and', 'save', 'to', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'url', 'str0': '10mb'}, 'snippet': "response = requests.get(var0, stream=true)\nwith open('str0', 'wb') as handle:\n    for data in tqdm(response.iter_content()):\n        handle.write(data)"}
Generated  translation
testfile = urllib. request. urlopener ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['removing', 'an', 'element', 'from', 'a', 'list', 'based', 'on', 'a', 'predicate', 'str0', 'or', 'str1'], 'words': ['removing', 'an', 'element', 'from', 'a', 'list', 'based', 'on', 'a', 'predicate', 'str0', 'or', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'x', 'str1': 'n'}, 'snippet': "[str0 for str0 in ['aat', 'xac', 'ant', 'tta'] if 'str0' not in str0 and \n    'str1' not in str0]"}
Generated  translation
[ x for x in var0 if x! = [ str0 ] ] 
--------- B -----------
{'intent': {'gloss': ['replace', 'each', 'str0', 'with', 'str1', 'and', 'each', 'str1', 'with', 'str0', 'in', 'the', 'string', 'str4', 'in', 'a', 'single', 'pass', '.'], 'words': ['replace', 'each', 'str0', 'with', 'str1', 'and', 'each', 'str1', 'with', 'str0', 'in', 'the', 'string', 'str4', 'in', 'a', 'single', 'pass', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'a', 'str1': 'b', 'str2': 'b', 'str3': 'a', 'str4': 'obama'}, 'snippet': '"""str4""".replace(\'str3\', \'%temp%\').replace(\'str2\', \'str3\').replace(\'%temp%\',\n    \'str2\')'}
Generated  translation
" " " str4 " " ". replace ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['download', 'a', 'file', 'var0', 'over', 'http', 'and', 'save', 'to', 'var1'], 'words': ['download', 'a', 'file', 'var0', 'over', 'http', 'and', 'save', 'to', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'url', 'var1': 'file_name'}, 'snippet': "u = urllib.request.urlopen(var0)\nf = open(var1, 'wb')\nmeta = u.info()\nfile_size = int(meta.getheaders('content-length')[0])\nprint('downloading: %s bytes: %s' % (var1, file_size))\nfile_size_dl = 0\nblock_sz = 8192\nwhile true:\n    buffer = u.read(block_sz)\n    if not buffer:\n        break\n    file_size_dl += len(buffer)\n    f.write(buffer)\n    status = '%10d  [%3.2f%%]' % (file_size_dl, file_size_dl * 100.0 /\n        file_size)\n    status = status + chr(8) * (len(status) + 1)\n    print(status, end=' ')\nf.close()"}
Generated  translation
testfile = urllib. request. urlopener ( var0, var1 ) 
test beam accuracy 0.044
test beam oracle accuracy 0.08
test beam bleu score 0.3276523540806059
test beam exececution accuracy 0.0
