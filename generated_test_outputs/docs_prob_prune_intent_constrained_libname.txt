Namespace(EMA=True, add_noise=False, auxilary_lm=False, batch_size=16, beam_num=10, beam_search_alpha=0.9, beam_search_base=3, beta=1.0, bleu_threshold=0, combine_copy_with_real=False, combined_eval=False, combined_training=False, copy_bt=True, create_mapping=False, dataset_name='conala', decoder_layers=4, decoder_lr=7.5e-05, device='cuda', dummy_question=False, dummy_source=False, early_stopping=False, early_stopping_epochs=20, ema_param=0.999, encoder_lr=1e-05, epochs=80, eval_interval=1, extra_copy_attention_linear=True, extra_encoder=False, extra_encoder_layers=1, extra_linear=True, fix_linear_layer=False, fixed_copy=False, gating=False, generate_back_translation=False, just_analysis=False, just_evaluate=True, just_initialize=False, label_smoothing=0.1, lambd=1, language_model=False, lr_decay=1, mono_min_prob=0.1, monolingual_ratio=0.5, n=256, no_encoder=False, no_encoder_update_for_bt=True, no_linear_opt=False, no_schema=False, num_workers=4, percentage=10, pointer_network=False, python=True, random_encoder=False, save_dir='CHECKPOINT_DIR', seed=1, small_dataset=False, sql_augmentation=False, sql_where_augmentation=False, temp=1.0, test_batch_size=32, translate_backward=False, use_authentic_data=False, use_back_translation=False, use_codebert=False, use_column_type=False, use_copy_attention=True, use_gelu=True, use_real_source=False, use_tagged_back=False, valid_batch_size=50, warmup_steps=0)
BertConfig {
  "architectures": [
    "BertForMaskedLM"
  ],
  "attention_probs_dropout_prob": 0.1,
  "gradient_checkpointing": false,
  "hidden_act": "gelu",
  "hidden_dropout_prob": 0.1,
  "hidden_size": 768,
  "initializer_range": 0.02,
  "intermediate_size": 3072,
  "layer_norm_eps": 1e-12,
  "max_position_embeddings": 512,
  "model_type": "bert",
  "num_attention_heads": 12,
  "num_hidden_layers": 12,
  "pad_token_id": 0,
  "type_vocab_size": 2,
  "vocab_size": 30522
}

min 3
max 96
std 14.398834246694237
mean 23.479951397326854
Effective batch size 10
model name conala_model_combined_training=False_seed=1_trns_back=False_use_backtr=False_lmd=1_cp_bt=True_add_no=False_no_en_upd=True_ratio=0.5_ext_li=True_ext_cp_li=True_cp_att=True_EMA=T_rnd_enc=F_de_lr=7.5e-05_mmp=0.1_saug=F_dums=F_dumQ=F_rsr=F_fc=F_ccr=F.pth
copy dataset size 105983
train set size: 21398
dev set size 200
test set size 500
example of parallel data
[CLS] concatenate elements of a list str0 of multiple integers to a single integer [SEP]
[CLS] sum ( d * 10 * * i for i, d in enumerate ( str0 [ : : - 1 ] ) ) [SEP]
105983
example of monolingual data
[CLS] sort a nested list by two elements [SEP]
[CLS] sorted ( l, key = lambda x : ( - int ( x [ 1 ] ), x [ 0 ] ) ) [SEP]
--------- B -----------
{'intent': {'gloss': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'words': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'int()'}
Generated  translation
int ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'words': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'int()'}
Generated  translation
int ( ) 
--------- B -----------
{'intent': {'gloss': ['rather', 'than', 'being', 'a', 'function', ',', 'list', 'is', 'actually', 'a', 'mutable', 'sequence', 'type', ',', 'as', 'documented', 'in', 'lists', 'and', 'sequence', 'types', '—', 'list', ',', 'tuple', ',', 'range', '.'], 'words': ['rather', 'than', 'being', 'a', 'function', ',', 'list', 'is', 'actually', 'a', 'mutable', 'sequence', 'type', ',', 'as', 'documented', 'in', 'lists', 'and', 'sequence', 'types', '—', 'list', ',', 'tuple', ',', 'range', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'list()'}
Generated  translation
list ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'true', 'if', 'd', 'has', 'a', 'key', 'key', ',', 'else', 'false', '.'], 'words': ['return', 'true', 'if', 'd', 'has', 'a', 'key', 'key', ',', 'else', 'false', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'key in d'}
Generated  translation
key in d 
--------- B -----------
{'intent': {'gloss': ['objects', 'that', 'when', 'printed', ',', 'print', 'a', 'message', 'like', '“', 'use', 'quit', '(', ')', 'or', 'ctrl', '-', 'd', '(', 'i', '.', 'e', '.'], 'words': ['objects', 'that', 'when', 'printed', ',', 'print', 'a', 'message', 'like', '“', 'use', 'quit', '(', ')', 'or', 'ctrl', '-', 'd', '(', 'i', '.', 'e', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', '', '', ' ', '']}, 'slot_map': {}, 'snippet': 'exit()'}
Generated  translation
exit ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'new', 'set', 'object', ',', 'optionally', 'with', 'elements', 'taken', 'from', 'var0', '.'], 'words': ['return', 'a', 'new', 'set', 'object', ',', 'optionally', 'with', 'elements', 'taken', 'from', 'var0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'iterable'}, 'snippet': 'set()'}
Generated  translation
set ( ) 
--------- B -----------
{'intent': {'gloss': ['objects', 'that', 'when', 'printed', ',', 'print', 'a', 'message', 'like', '“', 'use', 'quit', '(', ')', 'or', 'ctrl', '-', 'd', '(', 'i', '.', 'e', '.'], 'words': ['objects', 'that', 'when', 'printed', ',', 'print', 'a', 'message', 'like', '“', 'use', 'quit', '(', ')', 'or', 'ctrl', '-', 'd', '(', 'i', '.', 'e', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', '', '', ' ', '']}, 'slot_map': {}, 'snippet': 'exit()'}
Generated  translation
exit ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'words': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'int()'}
Generated  translation
int ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'true', 'if', 'd', 'has', 'a', 'key', 'key', ',', 'else', 'false', '.'], 'words': ['return', 'true', 'if', 'd', 'has', 'a', 'key', 'key', ',', 'else', 'false', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'key in d'}
Generated  translation
key in d 
--------- B -----------
{'intent': {'gloss': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'words': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'int()'}
Generated  translation
int ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'words': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'int()'}
Generated  translation
int ( ) 
--------- B -----------
{'intent': {'gloss': ['test', 'x', 'for', 'membership', 'in', 's', '.'], 'words': ['test', 'x', 'for', 'membership', 'in', 's', '.'], 'after': [' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'x in s'}
Generated  translation
x in s 
--------- B -----------
{'intent': {'gloss': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'words': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'int()'}
Generated  translation
int ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'true', 'if', 'd', 'has', 'a', 'key', 'key', ',', 'else', 'false', '.'], 'words': ['return', 'true', 'if', 'd', 'has', 'a', 'key', 'key', ',', 'else', 'false', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'key in d'}
Generated  translation
key in d 
--------- B -----------
{'intent': {'gloss': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'words': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'int()'}
Generated  translation
int ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'words': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'int()'}
Generated  translation
int ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'words': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'int()'}
Generated  translation
int ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'words': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'int()'}
Generated  translation
int ( ) 
--------- B -----------
{'intent': {'gloss': ['lists', 'may', 'be', 'constructed', 'in', 'several', 'ways', ':'], 'words': ['lists', 'may', 'be', 'constructed', 'in', 'several', 'ways', ':'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'list()'}
Generated  translation
list ( ) 
--------- B -----------
{'intent': {'gloss': ['rather', 'than', 'being', 'a', 'function', ',', 'list', 'is', 'actually', 'a', 'mutable', 'sequence', 'type', ',', 'as', 'documented', 'in', 'lists', 'and', 'sequence', 'types', '—', 'list', ',', 'tuple', ',', 'range', '.'], 'words': ['rather', 'than', 'being', 'a', 'function', ',', 'list', 'is', 'actually', 'a', 'mutable', 'sequence', 'type', ',', 'as', 'documented', 'in', 'lists', 'and', 'sequence', 'types', '—', 'list', ',', 'tuple', ',', 'range', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'list()'}
Generated  translation
list ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'words': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'int()'}
Generated  translation
int ( ) 
--------- B -----------
{'intent': {'gloss': ['lists', 'may', 'be', 'constructed', 'in', 'several', 'ways', ':'], 'words': ['lists', 'may', 'be', 'constructed', 'in', 'several', 'ways', ':'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'list()'}
Generated  translation
list ( ) 
--------- B -----------
{'intent': {'gloss': ['test', 'x', 'for', 'membership', 'in', 's', '.'], 'words': ['test', 'x', 'for', 'membership', 'in', 's', '.'], 'after': [' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'x in s'}
Generated  translation
x in s 
--------- B -----------
{'intent': {'gloss': ['return', 'true', 'if', 'd', 'has', 'a', 'key', 'key', ',', 'else', 'false', '.'], 'words': ['return', 'true', 'if', 'd', 'has', 'a', 'key', 'key', ',', 'else', 'false', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'key in d'}
Generated  translation
key in d 
--------- B -----------
{'intent': {'gloss': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'words': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'int()'}
Generated  translation
int ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'true', 'if', 'd', 'has', 'a', 'key', 'key', ',', 'else', 'false', '.'], 'words': ['return', 'true', 'if', 'd', 'has', 'a', 'key', 'key', ',', 'else', 'false', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'key in d'}
Generated  translation
key in d 
--------- B -----------
{'intent': {'gloss': ['objects', 'that', 'when', 'printed', ',', 'print', 'a', 'message', 'like', '“', 'use', 'quit', '(', ')', 'or', 'ctrl', '-', 'd', '(', 'i', '.', 'e', '.'], 'words': ['objects', 'that', 'when', 'printed', ',', 'print', 'a', 'message', 'like', '“', 'use', 'quit', '(', ')', 'or', 'ctrl', '-', 'd', '(', 'i', '.', 'e', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', '', '', ' ', '']}, 'slot_map': {}, 'snippet': 'exit()'}
Generated  translation
exit ( ) 
--------- B -----------
{'intent': {'gloss': ['rather', 'than', 'being', 'a', 'function', ',', 'list', 'is', 'actually', 'a', 'mutable', 'sequence', 'type', ',', 'as', 'documented', 'in', 'lists', 'and', 'sequence', 'types', '—', 'list', ',', 'tuple', ',', 'range', '.'], 'words': ['rather', 'than', 'being', 'a', 'function', ',', 'list', 'is', 'actually', 'a', 'mutable', 'sequence', 'type', ',', 'as', 'documented', 'in', 'lists', 'and', 'sequence', 'types', '—', 'list', ',', 'tuple', ',', 'range', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'list()'}
Generated  translation
list ( ) 
--------- B -----------
{'intent': {'gloss': ['test', 'x', 'for', 'membership', 'in', 's', '.'], 'words': ['test', 'x', 'for', 'membership', 'in', 's', '.'], 'after': [' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'x in s'}
Generated  translation
x in s 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'new', 'set', 'or', 'frozenset', 'object', 'whose', 'elements', 'are', 'taken', 'from', 'var0', '.'], 'words': ['return', 'a', 'new', 'set', 'or', 'frozenset', 'object', 'whose', 'elements', 'are', 'taken', 'from', 'var0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'iterable'}, 'snippet': 'set()'}
Generated  translation
set ( ) 
--------- B -----------
{'intent': {'gloss': ['rather', 'than', 'being', 'a', 'function', ',', 'list', 'is', 'actually', 'a', 'mutable', 'sequence', 'type', ',', 'as', 'documented', 'in', 'lists', 'and', 'sequence', 'types', '—', 'list', ',', 'tuple', ',', 'range', '.'], 'words': ['rather', 'than', 'being', 'a', 'function', ',', 'list', 'is', 'actually', 'a', 'mutable', 'sequence', 'type', ',', 'as', 'documented', 'in', 'lists', 'and', 'sequence', 'types', '—', 'list', ',', 'tuple', ',', 'range', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'list()'}
Generated  translation
list ( ) 
--------- B -----------
{'intent': {'gloss': ['objects', 'that', 'when', 'printed', ',', 'print', 'a', 'message', 'like', '“', 'use', 'quit', '(', ')', 'or', 'ctrl', '-', 'd', '(', 'i', '.', 'e', '.'], 'words': ['objects', 'that', 'when', 'printed', ',', 'print', 'a', 'message', 'like', '“', 'use', 'quit', '(', ')', 'or', 'ctrl', '-', 'd', '(', 'i', '.', 'e', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', '', '', ' ', '']}, 'slot_map': {}, 'snippet': 'exit()'}
Generated  translation
exit ( ) 
--------- B -----------
{'intent': {'gloss': ['lists', 'may', 'be', 'constructed', 'in', 'several', 'ways', ':'], 'words': ['lists', 'may', 'be', 'constructed', 'in', 'several', 'ways', ':'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'list()'}
Generated  translation
list ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'words': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'int()'}
Generated  translation
int ( ) 
--------- B -----------
{'intent': {'gloss': ['test', 'x', 'for', 'membership', 'in', 's', '.'], 'words': ['test', 'x', 'for', 'membership', 'in', 's', '.'], 'after': [' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'x in s'}
Generated  translation
x in s 
--------- B -----------
{'intent': {'gloss': ['return', 'true', 'if', 'd', 'has', 'a', 'key', 'key', ',', 'else', 'false', '.'], 'words': ['return', 'true', 'if', 'd', 'has', 'a', 'key', 'key', ',', 'else', 'false', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'key in d'}
Generated  translation
key in d 
--------- B -----------
{'intent': {'gloss': ['return', 'true', 'if', 'd', 'has', 'a', 'key', 'key', ',', 'else', 'false', '.'], 'words': ['return', 'true', 'if', 'd', 'has', 'a', 'key', 'key', ',', 'else', 'false', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'key in d'}
Generated  translation
key in d 
--------- B -----------
{'intent': {'gloss': ['lists', 'may', 'be', 'constructed', 'in', 'several', 'ways', ':'], 'words': ['lists', 'may', 'be', 'constructed', 'in', 'several', 'ways', ':'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'list()'}
Generated  translation
list ( ) 
--------- B -----------
{'intent': {'gloss': ['test', 'x', 'for', 'membership', 'in', 's', '.'], 'words': ['test', 'x', 'for', 'membership', 'in', 's', '.'], 'after': [' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'x in s'}
Generated  translation
x in s 
--------- B -----------
{'intent': {'gloss': ['return', 'true', 'if', 'd', 'has', 'a', 'key', 'key', ',', 'else', 'false', '.'], 'words': ['return', 'true', 'if', 'd', 'has', 'a', 'key', 'key', ',', 'else', 'false', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'key in d'}
Generated  translation
key in d 
--------- B -----------
{'intent': {'gloss': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'words': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'int()'}
Generated  translation
int ( ) 
--------- B -----------
{'intent': {'gloss': ['rather', 'than', 'being', 'a', 'function', ',', 'list', 'is', 'actually', 'a', 'mutable', 'sequence', 'type', ',', 'as', 'documented', 'in', 'lists', 'and', 'sequence', 'types', '—', 'list', ',', 'tuple', ',', 'range', '.'], 'words': ['rather', 'than', 'being', 'a', 'function', ',', 'list', 'is', 'actually', 'a', 'mutable', 'sequence', 'type', ',', 'as', 'documented', 'in', 'lists', 'and', 'sequence', 'types', '—', 'list', ',', 'tuple', ',', 'range', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'list()'}
Generated  translation
list ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'words': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'object'}, 'snippet': 'str()'}
Generated  translation
str ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'words': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'object'}, 'snippet': 'str()'}
Generated  translation
str ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'words': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'object'}, 'snippet': 'str()'}
Generated  translation
str ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'words': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'object'}, 'snippet': 'str()'}
Generated  translation
str ( ) 
--------- B -----------
{'intent': {'gloss': ['test', 'x', 'for', 'non', '-', 'membership', 'in', 's', '.'], 'words': ['test', 'x', 'for', 'non', '-', 'membership', 'in', 's', '.'], 'after': [' ', ' ', ' ', '', '', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'x not in s'}
Generated  translation
x not in s 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'words': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'object'}, 'snippet': 'str()'}
Generated  translation
str ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'words': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'object'}, 'snippet': 'str()'}
Generated  translation
str ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'words': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'object'}, 'snippet': 'str()'}
Generated  translation
str ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'words': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'object'}, 'snippet': 'str()'}
Generated  translation
str ( ) 
--------- B -----------
{'intent': {'gloss': ['test', 'x', 'for', 'non', '-', 'membership', 'in', 's', '.'], 'words': ['test', 'x', 'for', 'non', '-', 'membership', 'in', 's', '.'], 'after': [' ', ' ', ' ', '', '', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'x not in s'}
Generated  translation
x not in s 
--------- B -----------
{'intent': {'gloss': ['test', 'x', 'for', 'non', '-', 'membership', 'in', 's', '.'], 'words': ['test', 'x', 'for', 'non', '-', 'membership', 'in', 's', '.'], 'after': [' ', ' ', ' ', '', '', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'x not in s'}
Generated  translation
x not in s 
--------- B -----------
{'intent': {'gloss': ['test', 'x', 'for', 'non', '-', 'membership', 'in', 's', '.'], 'words': ['test', 'x', 'for', 'non', '-', 'membership', 'in', 's', '.'], 'after': [' ', ' ', ' ', '', '', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'x not in s'}
Generated  translation
x not in s 
--------- B -----------
{'intent': {'gloss': ['equivalent', 'to', 'not', 'key', 'in', 'd', '.'], 'words': ['equivalent', 'to', 'not', 'key', 'in', 'd', '.'], 'after': [' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'key not in d'}
Generated  translation
key not in d 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'words': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'object'}, 'snippet': 'str()'}
Generated  translation
str ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'words': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'object'}, 'snippet': 'str()'}
Generated  translation
str ( ) 
--------- B -----------
{'intent': {'gloss': ['test', 'x', 'for', 'non', '-', 'membership', 'in', 's', '.'], 'words': ['test', 'x', 'for', 'non', '-', 'membership', 'in', 's', '.'], 'after': [' ', ' ', ' ', '', '', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'x not in s'}
Generated  translation
x not in s 
--------- B -----------
{'intent': {'gloss': ['equivalent', 'to', 'not', 'key', 'in', 'd', '.'], 'words': ['equivalent', 'to', 'not', 'key', 'in', 'd', '.'], 'after': [' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'key not in d'}
Generated  translation
key not in d 
--------- B -----------
{'intent': {'gloss': ['test', 'x', 'for', 'non', '-', 'membership', 'in', 's', '.'], 'words': ['test', 'x', 'for', 'non', '-', 'membership', 'in', 's', '.'], 'after': [' ', ' ', ' ', '', '', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'x not in s'}
Generated  translation
x not in s 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'words': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'object'}, 'snippet': 'str()'}
Generated  translation
str ( ) 
--------- B -----------
{'intent': {'gloss': ['test', 'x', 'for', 'non', '-', 'membership', 'in', 's', '.'], 'words': ['test', 'x', 'for', 'non', '-', 'membership', 'in', 's', '.'], 'after': [' ', ' ', ' ', '', '', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'x not in s'}
Generated  translation
x not in s 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'words': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'object'}, 'snippet': 'str()'}
Generated  translation
str ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'words': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'object'}, 'snippet': 'str()'}
Generated  translation
str ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'words': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'object'}, 'snippet': 'str()'}
Generated  translation
str ( ) 
--------- B -----------
{'intent': {'gloss': ['equivalent', 'to', 'not', 'key', 'in', 'd', '.'], 'words': ['equivalent', 'to', 'not', 'key', 'in', 'd', '.'], 'after': [' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'key not in d'}
Generated  translation
key not in d 
--------- B -----------
{'intent': {'gloss': ['equivalent', 'to', 'not', 'key', 'in', 'd', '.'], 'words': ['equivalent', 'to', 'not', 'key', 'in', 'd', '.'], 'after': [' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'key not in d'}
Generated  translation
key not in d 
--------- B -----------
{'intent': {'gloss': ['test', 'x', 'for', 'non', '-', 'membership', 'in', 's', '.'], 'words': ['test', 'x', 'for', 'non', '-', 'membership', 'in', 's', '.'], 'after': [' ', ' ', ' ', '', '', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'x not in s'}
Generated  translation
x not in s 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'words': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'object'}, 'snippet': 'str()'}
Generated  translation
str ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'words': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'object'}, 'snippet': 'str()'}
Generated  translation
str ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'words': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'object'}, 'snippet': 'str()'}
Generated  translation
str ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'words': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'object'}, 'snippet': 'str()'}
Generated  translation
str ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'words': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'object'}, 'snippet': 'str()'}
Generated  translation
str ( ) 
--------- B -----------
{'intent': {'gloss': ['test', 'x', 'for', 'non', '-', 'membership', 'in', 's', '.'], 'words': ['test', 'x', 'for', 'non', '-', 'membership', 'in', 's', '.'], 'after': [' ', ' ', ' ', '', '', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'x not in s'}
Generated  translation
x not in s 
--------- B -----------
{'intent': {'gloss': ['test', 'x', 'for', 'non', '-', 'membership', 'in', 's', '.'], 'words': ['test', 'x', 'for', 'non', '-', 'membership', 'in', 's', '.'], 'after': [' ', ' ', ' ', '', '', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'x not in s'}
Generated  translation
x not in s 
--------- B -----------
{'intent': {'gloss': ['print', 'objects', 'to', 'the', 'text', 'stream', 'var0', ',', 'separated', 'by', 'var1', 'and', 'followed', 'by', 'var2', '.', 'with', 'arguments', 'str0', '.'], 'words': ['print', 'objects', 'to', 'the', 'text', 'stream', 'var0', ',', 'separated', 'by', 'var1', 'and', 'followed', 'by', 'var2', '.', 'with', 'arguments', 'str0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'var0': 'file', 'var1': 'sep', 'var2': 'end', 'str0': '*objects'}, 'snippet': 'print(*objects)'}
Generated  translation
print ( * objects ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'list', 'of', 'all', 'the', 'keys', 'used', 'in', 'the', 'dictionary', 'var0', '.'], 'words': ['return', 'a', 'list', 'of', 'all', 'the', 'keys', 'used', 'in', 'the', 'dictionary', 'var0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'd'}, 'snippet': 'list(var0)'}
Generated  translation
list ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['squeeze', '1', 'dimensional', 'var0', 'objects', 'into', 'scalars', '.', 'pandas', 'pandas'], 'words': ['squeeze', '1', 'dimensional', 'var0', 'objects', 'into', 'scalars', '.', 'pandas', 'pandas'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'axis'}, 'snippet': 'series.squeeze()'}
Generated  translation
series. squeeze ( ) 
--------- B -----------
{'intent': {'gloss': ['squeeze', '1', 'dimensional', 'var0', 'objects', 'into', 'scalars', '.', 'pandas', 'pandas'], 'words': ['squeeze', '1', 'dimensional', 'var0', 'objects', 'into', 'scalars', '.', 'pandas', 'pandas'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'axis'}, 'snippet': 'series.squeeze()'}
Generated  translation
series. squeeze ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'words': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'int(var0)'}
Generated  translation
int ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'words': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'int(var0)'}
Generated  translation
int ( ) 
--------- B -----------
{'intent': {'gloss': ['print', 'objects', 'to', 'the', 'text', 'stream', 'var0', ',', 'separated', 'by', 'var1', 'and', 'followed', 'by', 'var2', '.', 'with', 'arguments', 'str0', '.'], 'words': ['print', 'objects', 'to', 'the', 'text', 'stream', 'var0', ',', 'separated', 'by', 'var1', 'and', 'followed', 'by', 'var2', '.', 'with', 'arguments', 'str0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'var0': 'file', 'var1': 'sep', 'var2': 'end', 'str0': '*objects'}, 'snippet': 'print(*objects)'}
Generated  translation
print ( * objects ) 
--------- B -----------
{'intent': {'gloss': ['print', 'objects', 'to', 'the', 'text', 'stream', 'var0', ',', 'separated', 'by', 'var1', 'and', 'followed', 'by', 'var2', '.', 'with', 'arguments', 'str0', '.'], 'words': ['print', 'objects', 'to', 'the', 'text', 'stream', 'var0', ',', 'separated', 'by', 'var1', 'and', 'followed', 'by', 'var2', '.', 'with', 'arguments', 'str0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'var0': 'file', 'var1': 'sep', 'var2': 'end', 'str0': '*objects'}, 'snippet': 'print(*objects)'}
Generated  translation
print ( * objects ) 
--------- B -----------
{'intent': {'gloss': ['print', 'objects', 'to', 'the', 'text', 'stream', 'var0', ',', 'separated', 'by', 'var1', 'and', 'followed', 'by', 'var2', '.', 'with', 'arguments', 'str0', '.'], 'words': ['print', 'objects', 'to', 'the', 'text', 'stream', 'var0', ',', 'separated', 'by', 'var1', 'and', 'followed', 'by', 'var2', '.', 'with', 'arguments', 'str0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'var0': 'file', 'var1': 'sep', 'var2': 'end', 'str0': '*objects'}, 'snippet': 'print(*objects)'}
Generated  translation
print ( * objects ) 
--------- B -----------
{'intent': {'gloss': ['print', 'objects', 'to', 'the', 'text', 'stream', 'var0', ',', 'separated', 'by', 'var1', 'and', 'followed', 'by', 'var2', '.', 'with', 'arguments', 'str0', '.'], 'words': ['print', 'objects', 'to', 'the', 'text', 'stream', 'var0', ',', 'separated', 'by', 'var1', 'and', 'followed', 'by', 'var2', '.', 'with', 'arguments', 'str0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'var0': 'file', 'var1': 'sep', 'var2': 'end', 'str0': '*objects'}, 'snippet': 'print(*objects)'}
Generated  translation
print ( * objects ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'new', 'sorted', 'list', 'from', 'the', 'items', 'in', 'var0', '.'], 'words': ['return', 'a', 'new', 'sorted', 'list', 'from', 'the', 'items', 'in', 'var0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'iterable'}, 'snippet': 'sorted(var0)'}
Generated  translation
sorted ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['squeeze', '1', 'dimensional', 'var0', 'objects', 'into', 'scalars', '.', 'pandas', 'pandas'], 'words': ['squeeze', '1', 'dimensional', 'var0', 'objects', 'into', 'scalars', '.', 'pandas', 'pandas'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'axis'}, 'snippet': 'series.squeeze()'}
Generated  translation
series. squeeze ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'words': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'int(var0)'}
Generated  translation
int ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'words': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'int(var0)'}
Generated  translation
int ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'words': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'int(var0)'}
Generated  translation
int ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'list', 'of', 'all', 'the', 'keys', 'used', 'in', 'the', 'dictionary', 'var0', '.'], 'words': ['return', 'a', 'list', 'of', 'all', 'the', 'keys', 'used', 'in', 'the', 'dictionary', 'var0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'd'}, 'snippet': 'list(var0)'}
Generated  translation
list ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'words': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'int(var0)'}
Generated  translation
int ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'words': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'int(var0)'}
Generated  translation
int ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'words': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'int(var0)'}
Generated  translation
int ( ) 
--------- B -----------
{'intent': {'gloss': ['squeeze', '1', 'dimensional', 'var0', 'objects', 'into', 'scalars', '.', 'pandas', 'pandas'], 'words': ['squeeze', '1', 'dimensional', 'var0', 'objects', 'into', 'scalars', '.', 'pandas', 'pandas'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'axis'}, 'snippet': 'series.squeeze()'}
Generated  translation
series. squeeze ( ) 
--------- B -----------
{'intent': {'gloss': ['squeeze', '1', 'dimensional', 'var0', 'objects', 'into', 'scalars', '.', 'pandas', 'pandas'], 'words': ['squeeze', '1', 'dimensional', 'var0', 'objects', 'into', 'scalars', '.', 'pandas', 'pandas'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'axis'}, 'snippet': 'dataframe.squeeze()'}
Generated  translation
series. squeeze ( ) 
--------- B -----------
{'intent': {'gloss': ['sequence', 'of', 'frame', 'instances', 'sorted', 'from', 'the', 'oldest', 'frame', 'to', 'the', 'most', 'recent', 'frame', '.'], 'words': ['sequence', 'of', 'frame', 'instances', 'sorted', 'from', 'the', 'oldest', 'frame', 'to', 'the', 'most', 'recent', 'frame', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'tracemalloc.traceback'}
Generated  translation
tracemalloc. traceback 
--------- B -----------
{'intent': {'gloss': ['sequence', 'of', 'frame', 'instances', 'sorted', 'from', 'the', 'oldest', 'frame', 'to', 'the', 'most', 'recent', 'frame', '.'], 'words': ['sequence', 'of', 'frame', 'instances', 'sorted', 'from', 'the', 'oldest', 'frame', 'to', 'the', 'most', 'recent', 'frame', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'tracemalloc.traceback'}
Generated  translation
tracemalloc. traceback 
--------- B -----------
{'intent': {'gloss': ['sequence', 'of', 'frame', 'instances', 'sorted', 'from', 'the', 'oldest', 'frame', 'to', 'the', 'most', 'recent', 'frame', '.'], 'words': ['sequence', 'of', 'frame', 'instances', 'sorted', 'from', 'the', 'oldest', 'frame', 'to', 'the', 'most', 'recent', 'frame', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'tracemalloc.traceback'}
Generated  translation
tracemalloc. traceback 
--------- B -----------
{'intent': {'gloss': ['sequence', 'of', 'frame', 'instances', 'sorted', 'from', 'the', 'oldest', 'frame', 'to', 'the', 'most', 'recent', 'frame', '.'], 'words': ['sequence', 'of', 'frame', 'instances', 'sorted', 'from', 'the', 'oldest', 'frame', 'to', 'the', 'most', 'recent', 'frame', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'tracemalloc.traceback'}
Generated  translation
tracemalloc. traceback 
--------- B -----------
{'intent': {'gloss': ['try', 'to', 'switch', 'to', 'utf', '-', '8', 'mode', '.'], 'words': ['try', 'to', 'switch', 'to', 'utf', '-', '8', 'mode', '.'], 'after': [' ', ' ', ' ', ' ', '', '', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'pop3.utf8()'}
Generated  translation
pop3. utf8 ( ) 
--------- B -----------
{'intent': {'gloss': ['exit', 'the', 'process', 'with', 'status', 'var0', ',', 'without', 'calling', 'cleanup', 'handlers', ',', 'flushing', 'stdio', 'buffers', ',', 'etc', '.'], 'words': ['exit', 'the', 'process', 'with', 'status', 'var0', ',', 'without', 'calling', 'cleanup', 'handlers', ',', 'flushing', 'stdio', 'buffers', ',', 'etc', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'n'}, 'snippet': 'os._exit(var0)'}
Generated  translation
os. _ exit ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['exit', 'the', 'process', 'with', 'status', 'var0', ',', 'without', 'calling', 'cleanup', 'handlers', ',', 'flushing', 'stdio', 'buffers', ',', 'etc', '.'], 'words': ['exit', 'the', 'process', 'with', 'status', 'var0', ',', 'without', 'calling', 'cleanup', 'handlers', ',', 'flushing', 'stdio', 'buffers', ',', 'etc', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'n'}, 'snippet': 'os._exit(var0)'}
Generated  translation
os. _ exit ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['exit', 'the', 'process', 'with', 'status', 'var0', ',', 'without', 'calling', 'cleanup', 'handlers', ',', 'flushing', 'stdio', 'buffers', ',', 'etc', '.'], 'words': ['exit', 'the', 'process', 'with', 'status', 'var0', ',', 'without', 'calling', 'cleanup', 'handlers', ',', 'flushing', 'stdio', 'buffers', ',', 'etc', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'n'}, 'snippet': 'os._exit(var0)'}
Generated  translation
os. _ exit ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['exit', 'the', 'process', 'with', 'status', 'var0', ',', 'without', 'calling', 'cleanup', 'handlers', ',', 'flushing', 'stdio', 'buffers', ',', 'etc', '.'], 'words': ['exit', 'the', 'process', 'with', 'status', 'var0', ',', 'without', 'calling', 'cleanup', 'handlers', ',', 'flushing', 'stdio', 'buffers', ',', 'etc', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'n'}, 'snippet': 'os._exit(var0)'}
Generated  translation
os. _ exit ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['exit', 'the', 'process', 'with', 'status', 'var0', ',', 'without', 'calling', 'cleanup', 'handlers', ',', 'flushing', 'stdio', 'buffers', ',', 'etc', '.'], 'words': ['exit', 'the', 'process', 'with', 'status', 'var0', ',', 'without', 'calling', 'cleanup', 'handlers', ',', 'flushing', 'stdio', 'buffers', ',', 'etc', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'n'}, 'snippet': 'os._exit(var0)'}
Generated  translation
os. _ exit ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['exit', 'the', 'process', 'with', 'status', 'var0', ',', 'without', 'calling', 'cleanup', 'handlers', ',', 'flushing', 'stdio', 'buffers', ',', 'etc', '.'], 'words': ['exit', 'the', 'process', 'with', 'status', 'var0', ',', 'without', 'calling', 'cleanup', 'handlers', ',', 'flushing', 'stdio', 'buffers', ',', 'etc', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'n'}, 'snippet': 'os._exit(var0)'}
Generated  translation
os. _ exit ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['exit', 'the', 'process', 'with', 'status', 'var0', ',', 'without', 'calling', 'cleanup', 'handlers', ',', 'flushing', 'stdio', 'buffers', ',', 'etc', '.'], 'words': ['exit', 'the', 'process', 'with', 'status', 'var0', ',', 'without', 'calling', 'cleanup', 'handlers', ',', 'flushing', 'stdio', 'buffers', ',', 'etc', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'n'}, 'snippet': 'os._exit(var0)'}
Generated  translation
os. _ exit ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['split', 'the', 'string', 'var0', 'using', 'shell', '-', 'like', 'syntax', '.'], 'words': ['split', 'the', 'string', 'var0', 'using', 'shell', '-', 'like', 'syntax', '.'], 'after': [' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': 'shlex.split(var0)'}
Generated  translation
shlex. split ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['draw', 'samples', 'from', 'a', 'standard', 'student', '’', 's', 't', 'distribution', 'with', 'var0', 'degrees', 'of', 'freedom', '.', 'numpy'], 'words': ['draw', 'samples', 'from', 'a', 'standard', 'student', '’', 's', 't', 'distribution', 'with', 'var0', 'degrees', 'of', 'freedom', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': 'random.standard_t(var0)'}
Generated  translation
random. standard _ t ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['create', 'new', 'var0', 'named', 'mailbox', '.'], 'words': ['create', 'new', 'var0', 'named', 'mailbox', '.'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mailbox'}, 'snippet': 'imap4.create(var0)'}
Generated  translation
imap4. create ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['draw', 'samples', 'from', 'a', 'standard', 'student', '’', 's', 't', 'distribution', 'with', 'var0', 'degrees', 'of', 'freedom', '.', 'numpy'], 'words': ['draw', 'samples', 'from', 'a', 'standard', 'student', '’', 's', 't', 'distribution', 'with', 'var0', 'degrees', 'of', 'freedom', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': 'random.standard_t(var0)'}
Generated  translation
random. standard _ t ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['split', 'the', 'string', 'var0', 'using', 'shell', '-', 'like', 'syntax', '.'], 'words': ['split', 'the', 'string', 'var0', 'using', 'shell', '-', 'like', 'syntax', '.'], 'after': [' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': 'shlex.split(var0)'}
Generated  translation
shlex. split ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['draw', 'samples', 'from', 'a', 'standard', 'student', '’', 's', 't', 'distribution', 'with', 'var0', 'degrees', 'of', 'freedom', '.', 'numpy'], 'words': ['draw', 'samples', 'from', 'a', 'standard', 'student', '’', 's', 't', 'distribution', 'with', 'var0', 'degrees', 'of', 'freedom', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': 'random.standard_t(var0)'}
Generated  translation
random. standard _ t ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['split', 'the', 'string', 'var0', 'using', 'shell', '-', 'like', 'syntax', '.'], 'words': ['split', 'the', 'string', 'var0', 'using', 'shell', '-', 'like', 'syntax', '.'], 'after': [' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': 'shlex.split(var0)'}
Generated  translation
shlex. split ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['reduces', 'var0', '’', 's', 'dimension', 'by', 'one', ',', 'by', 'applying', 'ufunc', 'along', 'one', 'var1', '.', 'numpy'], 'words': ['reduces', 'var0', '’', 's', 'dimension', 'by', 'one', ',', 'by', 'applying', 'ufunc', 'along', 'one', 'var1', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'array', 'var1': 'axis'}, 'snippet': 'ufunc.reduce(var0)'}
Generated  translation
ufunc. reduce ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['split', 'the', 'string', 'var0', 'using', 'shell', '-', 'like', 'syntax', '.'], 'words': ['split', 'the', 'string', 'var0', 'using', 'shell', '-', 'like', 'syntax', '.'], 'after': [' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': 'shlex.split(var0)'}
Generated  translation
shlex. split ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['create', 'new', 'var0', 'named', 'mailbox', '.'], 'words': ['create', 'new', 'var0', 'named', 'mailbox', '.'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mailbox'}, 'snippet': 'imap4.create(var0)'}
Generated  translation
imap4. create ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['draw', 'samples', 'from', 'a', 'standard', 'student', '’', 's', 't', 'distribution', 'with', 'var0', 'degrees', 'of', 'freedom', '.', 'numpy'], 'words': ['draw', 'samples', 'from', 'a', 'standard', 'student', '’', 's', 't', 'distribution', 'with', 'var0', 'degrees', 'of', 'freedom', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': 'random.standard_t(var0)'}
Generated  translation
random. standard _ t ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['draw', 'samples', 'from', 'a', 'standard', 'student', '’', 's', 't', 'distribution', 'with', 'var0', 'degrees', 'of', 'freedom', '.', 'numpy'], 'words': ['draw', 'samples', 'from', 'a', 'standard', 'student', '’', 's', 't', 'distribution', 'with', 'var0', 'degrees', 'of', 'freedom', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': 'random.standard_t(var0)'}
Generated  translation
random. standard _ t ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'new', 'sorted', 'list', 'from', 'the', 'items', 'in', 'var0', '.', 'var1', 'specifies', 'a', 'function', 'of', 'one', 'argument', 'that', 'is', 'used', 'to', 'extract', 'a', 'comparison', 'key', 'from', 'each', 'element', 'in', 'iterable', '(', 'for', 'example', ',', 'key', '=', 'str', '.', 'lower', ')', '.'], 'words': ['return', 'a', 'new', 'sorted', 'list', 'from', 'the', 'items', 'in', 'var0', '.', 'var1', 'specifies', 'a', 'function', 'of', 'one', 'argument', 'that', 'is', 'used', 'to', 'extract', 'a', 'comparison', 'key', 'from', 'each', 'element', 'in', 'iterable', '(', 'for', 'example', ',', 'key', '=', 'str', '.', 'lower', ')', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '', '', ' ', ' ', '']}, 'slot_map': {'var0': 'iterable', 'var1': 'key'}, 'snippet': 'sorted(var0, var1=none)'}
Generated  translation
sorted ( var0, var1 = none ) 
--------- B -----------
{'intent': {'gloss': ['wraps', 'the', 'single', 'paragraph', 'in', 'var0', ',', 'and', 'returns', 'a', 'single', 'string', 'containing', 'the', 'wrapped', 'paragraph', '.'], 'words': ['wraps', 'the', 'single', 'paragraph', 'in', 'var0', ',', 'and', 'returns', 'a', 'single', 'string', 'containing', 'the', 'wrapped', 'paragraph', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'text'}, 'snippet': 'text_wrapper.fill(var0)'}
Generated  translation
text _ wrapper. fill ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'new', 'sorted', 'list', 'from', 'the', 'items', 'in', 'var0', '.', 'var1', 'specifies', 'a', 'function', 'of', 'one', 'argument', 'that', 'is', 'used', 'to', 'extract', 'a', 'comparison', 'key', 'from', 'each', 'element', 'in', 'iterable', '(', 'for', 'example', ',', 'key', '=', 'str', '.', 'lower', ')', '.'], 'words': ['return', 'a', 'new', 'sorted', 'list', 'from', 'the', 'items', 'in', 'var0', '.', 'var1', 'specifies', 'a', 'function', 'of', 'one', 'argument', 'that', 'is', 'used', 'to', 'extract', 'a', 'comparison', 'key', 'from', 'each', 'element', 'in', 'iterable', '(', 'for', 'example', ',', 'key', '=', 'str', '.', 'lower', ')', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '', '', ' ', ' ', '']}, 'slot_map': {'var0': 'iterable', 'var1': 'key'}, 'snippet': 'sorted(var0, var1=none)'}
Generated  translation
sorted ( var0, var1 = none ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'new', 'sorted', 'list', 'from', 'the', 'items', 'in', 'var0', '.', 'var1', 'specifies', 'a', 'function', 'of', 'one', 'argument', 'that', 'is', 'used', 'to', 'extract', 'a', 'comparison', 'key', 'from', 'each', 'element', 'in', 'iterable', '(', 'for', 'example', ',', 'key', '=', 'str', '.', 'lower', ')', '.'], 'words': ['return', 'a', 'new', 'sorted', 'list', 'from', 'the', 'items', 'in', 'var0', '.', 'var1', 'specifies', 'a', 'function', 'of', 'one', 'argument', 'that', 'is', 'used', 'to', 'extract', 'a', 'comparison', 'key', 'from', 'each', 'element', 'in', 'iterable', '(', 'for', 'example', ',', 'key', '=', 'str', '.', 'lower', ')', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '', '', ' ', ' ', '']}, 'slot_map': {'var0': 'iterable', 'var1': 'key'}, 'snippet': 'sorted(var0, var1=none)'}
Generated  translation
sorted ( var0, var1 = none ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'new', 'sorted', 'list', 'from', 'the', 'items', 'in', 'var0', '.', 'var1', 'specifies', 'a', 'function', 'of', 'one', 'argument', 'that', 'is', 'used', 'to', 'extract', 'a', 'comparison', 'key', 'from', 'each', 'element', 'in', 'iterable', '(', 'for', 'example', ',', 'key', '=', 'str', '.', 'lower', ')', '.'], 'words': ['return', 'a', 'new', 'sorted', 'list', 'from', 'the', 'items', 'in', 'var0', '.', 'var1', 'specifies', 'a', 'function', 'of', 'one', 'argument', 'that', 'is', 'used', 'to', 'extract', 'a', 'comparison', 'key', 'from', 'each', 'element', 'in', 'iterable', '(', 'for', 'example', ',', 'key', '=', 'str', '.', 'lower', ')', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '', '', ' ', ' ', '']}, 'slot_map': {'var0': 'iterable', 'var1': 'key'}, 'snippet': 'sorted(var0, var1=none)'}
Generated  translation
sorted ( var0, var1 = none ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'new', 'sorted', 'list', 'from', 'the', 'items', 'in', 'var0', '.', 'var1', 'specifies', 'a', 'function', 'of', 'one', 'argument', 'that', 'is', 'used', 'to', 'extract', 'a', 'comparison', 'key', 'from', 'each', 'element', 'in', 'iterable', '(', 'for', 'example', ',', 'key', '=', 'str', '.', 'lower', ')', '.'], 'words': ['return', 'a', 'new', 'sorted', 'list', 'from', 'the', 'items', 'in', 'var0', '.', 'var1', 'specifies', 'a', 'function', 'of', 'one', 'argument', 'that', 'is', 'used', 'to', 'extract', 'a', 'comparison', 'key', 'from', 'each', 'element', 'in', 'iterable', '(', 'for', 'example', ',', 'key', '=', 'str', '.', 'lower', ')', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '', '', ' ', ' ', '']}, 'slot_map': {'var0': 'iterable', 'var1': 'key'}, 'snippet': 'sorted(var0, var1=none)'}
Generated  translation
sorted ( var0, var1 = none ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'new', 'sorted', 'list', 'from', 'the', 'items', 'in', 'var0', '.', 'var1', 'specifies', 'a', 'function', 'of', 'one', 'argument', 'that', 'is', 'used', 'to', 'extract', 'a', 'comparison', 'key', 'from', 'each', 'element', 'in', 'iterable', '(', 'for', 'example', ',', 'key', '=', 'str', '.', 'lower', ')', '.'], 'words': ['return', 'a', 'new', 'sorted', 'list', 'from', 'the', 'items', 'in', 'var0', '.', 'var1', 'specifies', 'a', 'function', 'of', 'one', 'argument', 'that', 'is', 'used', 'to', 'extract', 'a', 'comparison', 'key', 'from', 'each', 'element', 'in', 'iterable', '(', 'for', 'example', ',', 'key', '=', 'str', '.', 'lower', ')', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '', '', ' ', ' ', '']}, 'slot_map': {'var0': 'iterable', 'var1': 'key'}, 'snippet': 'sorted(var0, var1=none)'}
Generated  translation
sorted ( var0, var1 = none ) 
--------- B -----------
{'intent': {'gloss': ['if', 'var0', 'is', 'specified', ',', 'sets', 'the', 'focus', 'item', 'to', 'item', '.'], 'words': ['if', 'var0', 'is', 'specified', ',', 'sets', 'the', 'focus', 'item', 'to', 'item', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'item'}, 'snippet': 'widget.focus(var0=none)'}
Generated  translation
widget. focus ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'new', 'sorted', 'list', 'from', 'the', 'items', 'in', 'var0', '.', 'var1', 'specifies', 'a', 'function', 'of', 'one', 'argument', 'that', 'is', 'used', 'to', 'extract', 'a', 'comparison', 'key', 'from', 'each', 'element', 'in', 'iterable', '(', 'for', 'example', ',', 'key', '=', 'str', '.', 'lower', ')', '.'], 'words': ['return', 'a', 'new', 'sorted', 'list', 'from', 'the', 'items', 'in', 'var0', '.', 'var1', 'specifies', 'a', 'function', 'of', 'one', 'argument', 'that', 'is', 'used', 'to', 'extract', 'a', 'comparison', 'key', 'from', 'each', 'element', 'in', 'iterable', '(', 'for', 'example', ',', 'key', '=', 'str', '.', 'lower', ')', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '', '', ' ', ' ', '']}, 'slot_map': {'var0': 'iterable', 'var1': 'key'}, 'snippet': 'sorted(var0, var1=none)'}
Generated  translation
sorted ( var0, var1 = none ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'new', 'sorted', 'list', 'from', 'the', 'items', 'in', 'var0', '.', 'var1', 'specifies', 'a', 'function', 'of', 'one', 'argument', 'that', 'is', 'used', 'to', 'extract', 'a', 'comparison', 'key', 'from', 'each', 'element', 'in', 'iterable', '(', 'for', 'example', ',', 'key', '=', 'str', '.', 'lower', ')', '.'], 'words': ['return', 'a', 'new', 'sorted', 'list', 'from', 'the', 'items', 'in', 'var0', '.', 'var1', 'specifies', 'a', 'function', 'of', 'one', 'argument', 'that', 'is', 'used', 'to', 'extract', 'a', 'comparison', 'key', 'from', 'each', 'element', 'in', 'iterable', '(', 'for', 'example', ',', 'key', '=', 'str', '.', 'lower', ')', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '', '', ' ', ' ', '']}, 'slot_map': {'var0': 'iterable', 'var1': 'key'}, 'snippet': 'sorted(var0, var1=none)'}
Generated  translation
sorted ( var0, var1 = none ) 
--------- B -----------
{'intent': {'gloss': ['if', 'var0', 'is', 'specified', ',', 'sets', 'the', 'focus', 'item', 'to', 'item', '.'], 'words': ['if', 'var0', 'is', 'specified', ',', 'sets', 'the', 'focus', 'item', 'to', 'item', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'item'}, 'snippet': 'widget.focus(var0=none)'}
Generated  translation
widget. focus ( ) 
--------- B -----------
{'intent': {'gloss': ['show', 'my', 'acls', 'for', 'a', 'var0', '(', 'i', '.', 'e', '.'], 'words': ['show', 'my', 'acls', 'for', 'a', 'var0', '(', 'i', '.', 'e', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', '']}, 'slot_map': {'var0': 'mailbox'}, 'snippet': 'imap4.myrights(var0)'}
Generated  translation
imap4. myrights ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['print', 'objects', 'to', 'the', 'text', 'stream', 'var0', ',', 'separated', 'by', 'var1', 'and', 'followed', 'by', 'var2', '.', 'with', 'arguments', 'str0', '.'], 'words': ['print', 'objects', 'to', 'the', 'text', 'stream', 'var0', ',', 'separated', 'by', 'var1', 'and', 'followed', 'by', 'var2', '.', 'with', 'arguments', 'str0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'var0': 'file', 'var1': 'sep', 'var2': 'end', 'str0': '*objects'}, 'snippet': "print(*objects, var1=' ')"}
Generated  translation
print ( * objects ) 
--------- B -----------
{'intent': {'gloss': ['print', 'objects', 'to', 'the', 'text', 'stream', 'var0', ',', 'separated', 'by', 'var1', 'and', 'followed', 'by', 'var2', '.', 'with', 'arguments', 'str0', '.'], 'words': ['print', 'objects', 'to', 'the', 'text', 'stream', 'var0', ',', 'separated', 'by', 'var1', 'and', 'followed', 'by', 'var2', '.', 'with', 'arguments', 'str0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'var0': 'file', 'var1': 'sep', 'var2': 'end', 'str0': '*objects'}, 'snippet': "print(*objects, var1=' ')"}
Generated  translation
print ( * objects ) 
--------- B -----------
{'intent': {'gloss': ['a', 'wrapper', 'around', 'python', '’', 's', 'assert', 'which', 'is', 'symbolically', 'traceable', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'torch'], 'words': ['a', 'wrapper', 'around', 'python', '’', 's', 'assert', 'which', 'is', 'symbolically', 'traceable', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'torch'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', '']}, 'slot_map': {'var0': 'condition', 'var1': 'message'}, 'snippet': 'torch._assert(var0, var1)'}
Generated  translation
torch. _ assert ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['shuffle', 'the', 'sequence', 'var0', 'in', 'place', '.', 'the', 'optional', 'argument', 'var1', 'is', 'a', '0', '-', 'argument', 'function', 'returning', 'a', 'random', 'float', 'in', '[', '0', '.', '0', ',', '1', '.', '0', ')', ';', 'by', 'default', ',', 'this', 'is', 'the', 'function', 'random', '(', ')', '.'], 'words': ['shuffle', 'the', 'sequence', 'var0', 'in', 'place', '.', 'the', 'optional', 'argument', 'var1', 'is', 'a', '0', '-', 'argument', 'function', 'returning', 'a', 'random', 'float', 'in', '[', '0', '.', '0', ',', '1', '.', '0', ')', ';', 'by', 'default', ',', 'this', 'is', 'the', 'function', 'random', '(', ')', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x', 'var1': 'random'}, 'snippet': 'var1.shuffle(var0, var1)'}
Generated  translation
var1. shuffle ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['shuffle', 'the', 'sequence', 'var0', 'in', 'place', '.', 'the', 'optional', 'argument', 'var1', 'is', 'a', '0', '-', 'argument', 'function', 'returning', 'a', 'random', 'float', 'in', '[', '0', '.', '0', ',', '1', '.', '0', ')', ';', 'by', 'default', ',', 'this', 'is', 'the', 'function', 'random', '(', ')', '.'], 'words': ['shuffle', 'the', 'sequence', 'var0', 'in', 'place', '.', 'the', 'optional', 'argument', 'var1', 'is', 'a', '0', '-', 'argument', 'function', 'returning', 'a', 'random', 'float', 'in', '[', '0', '.', '0', ',', '1', '.', '0', ')', ';', 'by', 'default', ',', 'this', 'is', 'the', 'function', 'random', '(', ')', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x', 'var1': 'random'}, 'snippet': 'var1.shuffle(var0, var1)'}
Generated  translation
var1. shuffle ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['print', 'objects', 'to', 'the', 'text', 'stream', 'var0', ',', 'separated', 'by', 'var1', 'and', 'followed', 'by', 'var2', '.', 'with', 'arguments', 'str0', '.'], 'words': ['print', 'objects', 'to', 'the', 'text', 'stream', 'var0', ',', 'separated', 'by', 'var1', 'and', 'followed', 'by', 'var2', '.', 'with', 'arguments', 'str0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'var0': 'file', 'var1': 'sep', 'var2': 'end', 'str0': '*objects'}, 'snippet': "print(*objects, var1=' ')"}
Generated  translation
print ( * objects ) 
--------- B -----------
{'intent': {'gloss': ['for', 'a', 'datetime', 'instance', 'd', ',', 'str', '(', 'd', ')', 'is', 'equivalent', 'to', 'd', '.', 'isoformat', '(', 'str0', ')', '.'], 'words': ['for', 'a', 'datetime', 'instance', 'd', ',', 'str', '(', 'd', ')', 'is', 'equivalent', 'to', 'd', '.', 'isoformat', '(', 'str0', ')', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': ''}, 'snippet': 'datetime.__str__()'}
Generated  translation
datetime. _ _ str _ _ ( ) 
--------- B -----------
{'intent': {'gloss': ['for', 'a', 'datetime', 'instance', 'd', ',', 'str', '(', 'd', ')', 'is', 'equivalent', 'to', 'd', '.', 'isoformat', '(', 'str0', ')', '.'], 'words': ['for', 'a', 'datetime', 'instance', 'd', ',', 'str', '(', 'd', ')', 'is', 'equivalent', 'to', 'd', '.', 'isoformat', '(', 'str0', ')', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': ''}, 'snippet': 'datetime.__str__()'}
Generated  translation
datetime. _ _ str _ _ ( ) 
--------- B -----------
{'intent': {'gloss': ['shuffle', 'the', 'sequence', 'var0', 'in', 'place', '.', 'the', 'optional', 'argument', 'var1', 'is', 'a', '0', '-', 'argument', 'function', 'returning', 'a', 'random', 'float', 'in', '[', '0', '.', '0', ',', '1', '.', '0', ')', ';', 'by', 'default', ',', 'this', 'is', 'the', 'function', 'random', '(', ')', '.'], 'words': ['shuffle', 'the', 'sequence', 'var0', 'in', 'place', '.', 'the', 'optional', 'argument', 'var1', 'is', 'a', '0', '-', 'argument', 'function', 'returning', 'a', 'random', 'float', 'in', '[', '0', '.', '0', ',', '1', '.', '0', ')', ';', 'by', 'default', ',', 'this', 'is', 'the', 'function', 'random', '(', ')', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x', 'var1': 'random'}, 'snippet': 'var1.shuffle(var0, var1)'}
Generated  translation
var1. shuffle ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['shuffle', 'the', 'sequence', 'var0', 'in', 'place', '.', 'the', 'optional', 'argument', 'var1', 'is', 'a', '0', '-', 'argument', 'function', 'returning', 'a', 'random', 'float', 'in', '[', '0', '.', '0', ',', '1', '.', '0', ')', ';', 'by', 'default', ',', 'this', 'is', 'the', 'function', 'random', '(', ')', '.'], 'words': ['shuffle', 'the', 'sequence', 'var0', 'in', 'place', '.', 'the', 'optional', 'argument', 'var1', 'is', 'a', '0', '-', 'argument', 'function', 'returning', 'a', 'random', 'float', 'in', '[', '0', '.', '0', ',', '1', '.', '0', ')', ';', 'by', 'default', ',', 'this', 'is', 'the', 'function', 'random', '(', ')', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x', 'var1': 'random'}, 'snippet': 'var1.shuffle(var0, var1)'}
Generated  translation
var1. shuffle ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['print', 'objects', 'to', 'the', 'text', 'stream', 'var0', ',', 'separated', 'by', 'var1', 'and', 'followed', 'by', 'var2', '.', 'with', 'arguments', 'str0', '.'], 'words': ['print', 'objects', 'to', 'the', 'text', 'stream', 'var0', ',', 'separated', 'by', 'var1', 'and', 'followed', 'by', 'var2', '.', 'with', 'arguments', 'str0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'var0': 'file', 'var1': 'sep', 'var2': 'end', 'str0': '*objects'}, 'snippet': "print(*objects, var1=' ')"}
Generated  translation
print ( * objects ) 
--------- B -----------
{'intent': {'gloss': ['show', 'my', 'acls', 'for', 'a', 'var0', '(', 'i', '.', 'e', '.'], 'words': ['show', 'my', 'acls', 'for', 'a', 'var0', '(', 'i', '.', 'e', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', '']}, 'slot_map': {'var0': 'mailbox'}, 'snippet': 'imap4.myrights(var0)'}
Generated  translation
imap4. myrights ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['print', 'objects', 'to', 'the', 'text', 'stream', 'var0', ',', 'separated', 'by', 'var1', 'and', 'followed', 'by', 'var2', '.', 'with', 'arguments', 'str0', '.'], 'words': ['print', 'objects', 'to', 'the', 'text', 'stream', 'var0', ',', 'separated', 'by', 'var1', 'and', 'followed', 'by', 'var2', '.', 'with', 'arguments', 'str0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'var0': 'file', 'var1': 'sep', 'var2': 'end', 'str0': '*objects'}, 'snippet': "print(*objects, var1=' ')"}
Generated  translation
print ( * objects ) 
--------- B -----------
{'intent': {'gloss': ['for', 'a', 'datetime', 'instance', 'd', ',', 'str', '(', 'd', ')', 'is', 'equivalent', 'to', 'd', '.', 'isoformat', '(', 'str0', ')', '.'], 'words': ['for', 'a', 'datetime', 'instance', 'd', ',', 'str', '(', 'd', ')', 'is', 'equivalent', 'to', 'd', '.', 'isoformat', '(', 'str0', ')', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': ''}, 'snippet': 'datetime.__str__()'}
Generated  translation
datetime. _ _ str _ _ ( ) 
--------- B -----------
{'intent': {'gloss': ['for', 'a', 'datetime', 'instance', 'd', ',', 'str', '(', 'd', ')', 'is', 'equivalent', 'to', 'd', '.', 'isoformat', '(', 'str0', ')', '.'], 'words': ['for', 'a', 'datetime', 'instance', 'd', ',', 'str', '(', 'd', ')', 'is', 'equivalent', 'to', 'd', '.', 'isoformat', '(', 'str0', ')', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': ''}, 'snippet': 'datetime.__str__()'}
Generated  translation
datetime. _ _ str _ _ ( ) 
--------- B -----------
{'intent': {'gloss': ['print', 'objects', 'to', 'the', 'text', 'stream', 'var0', ',', 'separated', 'by', 'var1', 'and', 'followed', 'by', 'var2', '.', 'with', 'arguments', 'str0', '.'], 'words': ['print', 'objects', 'to', 'the', 'text', 'stream', 'var0', ',', 'separated', 'by', 'var1', 'and', 'followed', 'by', 'var2', '.', 'with', 'arguments', 'str0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'var0': 'file', 'var1': 'sep', 'var2': 'end', 'str0': '*objects'}, 'snippet': "print(*objects, var1=' ')"}
Generated  translation
print ( * objects ) 
--------- B -----------
{'intent': {'gloss': ['show', 'my', 'acls', 'for', 'a', 'var0', '(', 'i', '.', 'e', '.'], 'words': ['show', 'my', 'acls', 'for', 'a', 'var0', '(', 'i', '.', 'e', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', '']}, 'slot_map': {'var0': 'mailbox'}, 'snippet': 'imap4.myrights(var0)'}
Generated  translation
imap4. myrights ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['for', 'a', 'datetime', 'instance', 'd', ',', 'str', '(', 'd', ')', 'is', 'equivalent', 'to', 'd', '.', 'isoformat', '(', 'str0', ')', '.'], 'words': ['for', 'a', 'datetime', 'instance', 'd', ',', 'str', '(', 'd', ')', 'is', 'equivalent', 'to', 'd', '.', 'isoformat', '(', 'str0', ')', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': ''}, 'snippet': 'datetime.__str__()'}
Generated  translation
datetime. _ _ str _ _ ( ) 
--------- B -----------
{'intent': {'gloss': ['shuffle', 'the', 'sequence', 'var0', 'in', 'place', '.', 'the', 'optional', 'argument', 'var1', 'is', 'a', '0', '-', 'argument', 'function', 'returning', 'a', 'random', 'float', 'in', '[', '0', '.', '0', ',', '1', '.', '0', ')', ';', 'by', 'default', ',', 'this', 'is', 'the', 'function', 'random', '(', ')', '.'], 'words': ['shuffle', 'the', 'sequence', 'var0', 'in', 'place', '.', 'the', 'optional', 'argument', 'var1', 'is', 'a', '0', '-', 'argument', 'function', 'returning', 'a', 'random', 'float', 'in', '[', '0', '.', '0', ',', '1', '.', '0', ')', ';', 'by', 'default', ',', 'this', 'is', 'the', 'function', 'random', '(', ')', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x', 'var1': 'random'}, 'snippet': 'var1.shuffle(var0, var1)'}
Generated  translation
var1. shuffle ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['shuffle', 'the', 'sequence', 'var0', 'in', 'place', '.', 'the', 'optional', 'argument', 'var1', 'is', 'a', '0', '-', 'argument', 'function', 'returning', 'a', 'random', 'float', 'in', '[', '0', '.', '0', ',', '1', '.', '0', ')', ';', 'by', 'default', ',', 'this', 'is', 'the', 'function', 'random', '(', ')', '.'], 'words': ['shuffle', 'the', 'sequence', 'var0', 'in', 'place', '.', 'the', 'optional', 'argument', 'var1', 'is', 'a', '0', '-', 'argument', 'function', 'returning', 'a', 'random', 'float', 'in', '[', '0', '.', '0', ',', '1', '.', '0', ')', ';', 'by', 'default', ',', 'this', 'is', 'the', 'function', 'random', '(', ')', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x', 'var1': 'random'}, 'snippet': 'var1.shuffle(var0, var1)'}
Generated  translation
var1. shuffle ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['print', 'objects', 'to', 'the', 'text', 'stream', 'var0', ',', 'separated', 'by', 'var1', 'and', 'followed', 'by', 'var2', '.', 'with', 'arguments', 'str0', '.'], 'words': ['print', 'objects', 'to', 'the', 'text', 'stream', 'var0', ',', 'separated', 'by', 'var1', 'and', 'followed', 'by', 'var2', '.', 'with', 'arguments', 'str0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'var0': 'file', 'var1': 'sep', 'var2': 'end', 'str0': '*objects'}, 'snippet': "print(*objects, var1=' ')"}
Generated  translation
print ( * objects ) 
--------- B -----------
{'intent': {'gloss': ['print', 'objects', 'to', 'the', 'text', 'stream', 'var0', ',', 'separated', 'by', 'var1', 'and', 'followed', 'by', 'var2', '.', 'with', 'arguments', 'str0', '.'], 'words': ['print', 'objects', 'to', 'the', 'text', 'stream', 'var0', ',', 'separated', 'by', 'var1', 'and', 'followed', 'by', 'var2', '.', 'with', 'arguments', 'str0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'var0': 'file', 'var1': 'sep', 'var2': 'end', 'str0': '*objects'}, 'snippet': "print(*objects, var1=' ')"}
Generated  translation
print ( * objects ) 
--------- B -----------
{'intent': {'gloss': ['split', 'strings', 'around', 'given', 'separator', '/', 'delimiter', '.', 'the', 'var0', 'parameter', 'can', 'be', 'used', 'to', 'split', 'by', 'other', 'characters', '.', 'pandas', 'pandas'], 'words': ['split', 'strings', 'around', 'given', 'separator', '/', 'delimiter', '.', 'the', 'var0', 'parameter', 'can', 'be', 'used', 'to', 'split', 'by', 'other', 'characters', '.', 'pandas', 'pandas'], 'after': [' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'pat'}, 'snippet': 'series.str.split(var0=none)'}
Generated  translation
series. str. split ( var0 = none ) 
--------- B -----------
{'intent': {'gloss': ['equivalent', 'to', 'as', '_', 'string', '(', 'policy', '=', 'self', '.', 'policy', '.', 'clone', '(', 'utf8', '=', 'true', ')', ')', '.'], 'words': ['equivalent', 'to', 'as', '_', 'string', '(', 'policy', '=', 'self', '.', 'policy', '.', 'clone', '(', 'utf8', '=', 'true', ')', ')', '.'], 'after': [' ', ' ', '', '', ' ', ' ', '', '', '', '', '', '', ' ', ' ', '', '', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'email_message.__str__()'}
Generated  translation
email _ message. _ _ str _ _ ( ) 
--------- B -----------
{'intent': {'gloss': ['split', 'strings', 'around', 'given', 'separator', '/', 'delimiter', '.', 'the', 'var0', 'parameter', 'can', 'be', 'used', 'to', 'split', 'by', 'other', 'characters', '.', 'pandas', 'pandas'], 'words': ['split', 'strings', 'around', 'given', 'separator', '/', 'delimiter', '.', 'the', 'var0', 'parameter', 'can', 'be', 'used', 'to', 'split', 'by', 'other', 'characters', '.', 'pandas', 'pandas'], 'after': [' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'pat'}, 'snippet': 'series.str.split(var0=none)'}
Generated  translation
series. str. split ( var0 = none ) 
--------- B -----------
{'intent': {'gloss': ['extract', 'a', 'diagonal', 'or', 'construct', 'a', 'diagonal', 'array', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'numpy'], 'words': ['extract', 'a', 'diagonal', 'or', 'construct', 'a', 'diagonal', 'array', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', '']}, 'slot_map': {'var0': 'v', 'var1': 'k'}, 'snippet': 'ma.diag(var0, var1=0)'}
Generated  translation
numpy. diag ( var0, var1 = 0 ) 
--------- B -----------
{'intent': {'gloss': ['extract', 'a', 'diagonal', 'or', 'construct', 'a', 'diagonal', 'array', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'numpy'], 'words': ['extract', 'a', 'diagonal', 'or', 'construct', 'a', 'diagonal', 'array', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', '']}, 'slot_map': {'var0': 'v', 'var1': 'k'}, 'snippet': 'ma.diag(var0, var1=0)'}
Generated  translation
numpy. diag ( var0, var1 = 0 ) 
--------- B -----------
{'intent': {'gloss': ['“', 'byteswap', '”', 'all', 'samples', 'in', 'a', 'var0', 'and', 'returns', 'the', 'modified', 'fragment', '.', 'with', 'arguments', 'var1', '.'], 'words': ['“', 'byteswap', '”', 'all', 'samples', 'in', 'a', 'var0', 'and', 'returns', 'the', 'modified', 'fragment', '.', 'with', 'arguments', 'var1', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'var0': 'fragment', 'var1': 'width'}, 'snippet': 'audioop.byteswap(var0, var1)'}
Generated  translation
audioop. byteswap ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['extract', 'a', 'diagonal', 'or', 'construct', 'a', 'diagonal', 'array', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'numpy'], 'words': ['extract', 'a', 'diagonal', 'or', 'construct', 'a', 'diagonal', 'array', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', '']}, 'slot_map': {'var0': 'v', 'var1': 'k'}, 'snippet': 'ma.diag(var0, var1=0)'}
Generated  translation
numpy. diag ( var0, var1 = 0 ) 
--------- B -----------
{'intent': {'gloss': ['applies', 'the', 'sigmoid', 'linear', 'unit', '(', 'silu', ')', 'function', ',', 'element', '-', 'wise', '.', 'with', 'arguments', 'var0', '.', 'torch'], 'words': ['applies', 'the', 'sigmoid', 'linear', 'unit', '(', 'silu', ')', 'function', ',', 'element', '-', 'wise', '.', 'with', 'arguments', 'var0', '.', 'torch'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', '', ' ', '']}, 'slot_map': {'var0': 'input'}, 'snippet': 'torch.nn.functional.silu(var0)'}
Generated  translation
torch. nn. functional. silu ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['extract', 'a', 'diagonal', 'or', 'construct', 'a', 'diagonal', 'array', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'numpy'], 'words': ['extract', 'a', 'diagonal', 'or', 'construct', 'a', 'diagonal', 'array', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', '']}, 'slot_map': {'var0': 'v', 'var1': 'k'}, 'snippet': 'ma.diag(var0, var1=0)'}
Generated  translation
numpy. diag ( var0, var1 = 0 ) 
--------- B -----------
{'intent': {'gloss': ['extract', 'a', 'diagonal', 'or', 'construct', 'a', 'diagonal', 'array', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'numpy'], 'words': ['extract', 'a', 'diagonal', 'or', 'construct', 'a', 'diagonal', 'array', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', '']}, 'slot_map': {'var0': 'v', 'var1': 'k'}, 'snippet': 'ma.diag(var0, var1=0)'}
Generated  translation
numpy. diag ( var0, var1 = 0 ) 
--------- B -----------
{'intent': {'gloss': ['extract', 'a', 'diagonal', 'or', 'construct', 'a', 'diagonal', 'array', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'numpy'], 'words': ['extract', 'a', 'diagonal', 'or', 'construct', 'a', 'diagonal', 'array', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', '']}, 'slot_map': {'var0': 'v', 'var1': 'k'}, 'snippet': 'ma.diag(var0, var1=0)'}
Generated  translation
numpy. diag ( var0, var1 = 0 ) 
--------- B -----------
{'intent': {'gloss': ['reduces', 'var0', '’', 's', 'dimension', 'by', 'one', ',', 'by', 'applying', 'ufunc', 'along', 'one', 'var1', '.', 'numpy'], 'words': ['reduces', 'var0', '’', 's', 'dimension', 'by', 'one', ',', 'by', 'applying', 'ufunc', 'along', 'one', 'var1', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'array', 'var1': 'axis'}, 'snippet': 'ufunc.reduce(var0, var1=0)'}
Generated  translation
ufunc. reduce ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['reduces', 'var0', '’', 's', 'dimension', 'by', 'one', ',', 'by', 'applying', 'ufunc', 'along', 'one', 'var1', '.', 'numpy'], 'words': ['reduces', 'var0', '’', 's', 'dimension', 'by', 'one', ',', 'by', 'applying', 'ufunc', 'along', 'one', 'var1', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'array', 'var1': 'axis'}, 'snippet': 'ufunc.reduce(var0, var1=0)'}
Generated  translation
ufunc. reduce ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['reduces', 'var0', '’', 's', 'dimension', 'by', 'one', ',', 'by', 'applying', 'ufunc', 'along', 'one', 'var1', '.', 'numpy'], 'words': ['reduces', 'var0', '’', 's', 'dimension', 'by', 'one', ',', 'by', 'applying', 'ufunc', 'along', 'one', 'var1', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'array', 'var1': 'axis'}, 'snippet': 'ufunc.reduce(var0, var1=0)'}
Generated  translation
ufunc. reduce ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['reduces', 'var0', '’', 's', 'dimension', 'by', 'one', ',', 'by', 'applying', 'ufunc', 'along', 'one', 'var1', '.', 'numpy'], 'words': ['reduces', 'var0', '’', 's', 'dimension', 'by', 'one', ',', 'by', 'applying', 'ufunc', 'along', 'one', 'var1', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'array', 'var1': 'axis'}, 'snippet': 'ufunc.reduce(var0, var1=0)'}
Generated  translation
ufunc. reduce ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['reduces', 'var0', '’', 's', 'dimension', 'by', 'one', ',', 'by', 'applying', 'ufunc', 'along', 'one', 'var1', '.', 'numpy'], 'words': ['reduces', 'var0', '’', 's', 'dimension', 'by', 'one', ',', 'by', 'applying', 'ufunc', 'along', 'one', 'var1', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'array', 'var1': 'axis'}, 'snippet': 'ufunc.reduce(var0, var1=0)'}
Generated  translation
ufunc. reduce ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['extract', 'a', 'diagonal', 'or', 'construct', 'a', 'diagonal', 'array', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'numpy'], 'words': ['extract', 'a', 'diagonal', 'or', 'construct', 'a', 'diagonal', 'array', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', '']}, 'slot_map': {'var0': 'v', 'var1': 'k'}, 'snippet': 'numpy.diag(var0, var1=0)'}
Generated  translation
numpy. diag ( var0, var1 = 0 ) 
--------- B -----------
{'intent': {'gloss': ['extract', 'a', 'diagonal', 'or', 'construct', 'a', 'diagonal', 'array', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'numpy'], 'words': ['extract', 'a', 'diagonal', 'or', 'construct', 'a', 'diagonal', 'array', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', '']}, 'slot_map': {'var0': 'v', 'var1': 'k'}, 'snippet': 'numpy.diag(var0, var1=0)'}
Generated  translation
numpy. diag ( var0, var1 = 0 ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'new', 'sorted', 'list', 'from', 'the', 'items', 'in', 'var0', '.', 'var1', 'specifies', 'a', 'function', 'of', 'one', 'argument', 'that', 'is', 'used', 'to', 'extract', 'a', 'comparison', 'key', 'from', 'each', 'element', 'in', 'iterable', '(', 'for', 'example', ',', 'key', '=', 'str', '.', 'lower', ')', '.', 'var2', 'is', 'a', 'boolean', 'value', '.'], 'words': ['return', 'a', 'new', 'sorted', 'list', 'from', 'the', 'items', 'in', 'var0', '.', 'var1', 'specifies', 'a', 'function', 'of', 'one', 'argument', 'that', 'is', 'used', 'to', 'extract', 'a', 'comparison', 'key', 'from', 'each', 'element', 'in', 'iterable', '(', 'for', 'example', ',', 'key', '=', 'str', '.', 'lower', ')', '.', 'var2', 'is', 'a', 'boolean', 'value', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'iterable', 'var1': 'key', 'var2': 'reverse'}, 'snippet': 'sorted(var0, var1=none, var2=false)'}
Generated  translation
sorted ( var0, var1 = none, var2 = false ) 
--------- B -----------
{'intent': {'gloss': ['var0', '=', 'iconcat', '(', 'a', ',', 'var1', ')', 'is', 'equivalent', 'to', 'a', '+', '=', 'b', 'for', 'a', 'and', 'b', 'sequences', '.'], 'words': ['var0', '=', 'iconcat', '(', 'a', ',', 'var1', ')', 'is', 'equivalent', 'to', 'a', '+', '=', 'b', 'for', 'a', 'and', 'b', 'sequences', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'b'}, 'snippet': 'operator.__iconcat__(var0, var1)'}
Generated  translation
operator. _ _ iconcat _ _ ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['extract', 'a', 'diagonal', 'or', 'construct', 'a', 'diagonal', 'array', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'numpy'], 'words': ['extract', 'a', 'diagonal', 'or', 'construct', 'a', 'diagonal', 'array', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', '']}, 'slot_map': {'var0': 'v', 'var1': 'k'}, 'snippet': 'numpy.diag(var0, var1=0)'}
Generated  translation
numpy. diag ( var0, var1 = 0 ) 
--------- B -----------
{'intent': {'gloss': ['extract', 'a', 'diagonal', 'or', 'construct', 'a', 'diagonal', 'array', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'numpy'], 'words': ['extract', 'a', 'diagonal', 'or', 'construct', 'a', 'diagonal', 'array', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', '']}, 'slot_map': {'var0': 'v', 'var1': 'k'}, 'snippet': 'numpy.diag(var0, var1=0)'}
Generated  translation
numpy. diag ( var0, var1 = 0 ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'new', 'sorted', 'list', 'from', 'the', 'items', 'in', 'var0', '.', 'var1', 'specifies', 'a', 'function', 'of', 'one', 'argument', 'that', 'is', 'used', 'to', 'extract', 'a', 'comparison', 'key', 'from', 'each', 'element', 'in', 'iterable', '(', 'for', 'example', ',', 'key', '=', 'str', '.', 'lower', ')', '.', 'var2', 'is', 'a', 'boolean', 'value', '.'], 'words': ['return', 'a', 'new', 'sorted', 'list', 'from', 'the', 'items', 'in', 'var0', '.', 'var1', 'specifies', 'a', 'function', 'of', 'one', 'argument', 'that', 'is', 'used', 'to', 'extract', 'a', 'comparison', 'key', 'from', 'each', 'element', 'in', 'iterable', '(', 'for', 'example', ',', 'key', '=', 'str', '.', 'lower', ')', '.', 'var2', 'is', 'a', 'boolean', 'value', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'iterable', 'var1': 'key', 'var2': 'reverse'}, 'snippet': 'sorted(var0, var1=none, var2=false)'}
Generated  translation
sorted ( var0, var1 = none, var2 = false ) 
--------- B -----------
{'intent': {'gloss': ['extract', 'a', 'diagonal', 'or', 'construct', 'a', 'diagonal', 'array', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'numpy'], 'words': ['extract', 'a', 'diagonal', 'or', 'construct', 'a', 'diagonal', 'array', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', '']}, 'slot_map': {'var0': 'v', 'var1': 'k'}, 'snippet': 'numpy.diag(var0, var1=0)'}
Generated  translation
numpy. diag ( var0, var1 = 0 ) 
--------- B -----------
{'intent': {'gloss': ['extract', 'a', 'diagonal', 'or', 'construct', 'a', 'diagonal', 'array', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'numpy'], 'words': ['extract', 'a', 'diagonal', 'or', 'construct', 'a', 'diagonal', 'array', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', '']}, 'slot_map': {'var0': 'v', 'var1': 'k'}, 'snippet': 'numpy.diag(var0, var1=0)'}
Generated  translation
numpy. diag ( var0, var1 = 0 ) 
--------- B -----------
{'intent': {'gloss': ['strip', 'the', 'var0', 'of', 'a', 'python', 'process', 'from', 'potential', 'debug', 'output', 'emitted', 'by', 'the', 'interpreter', '.'], 'words': ['strip', 'the', 'var0', 'of', 'a', 'python', 'process', 'from', 'potential', 'debug', 'output', 'emitted', 'by', 'the', 'interpreter', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'stderr'}, 'snippet': 'test.support.strip_python_strerr(var0)'}
Generated  translation
test. support. strip _ python _ strerr ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['strip', 'the', 'var0', 'of', 'a', 'python', 'process', 'from', 'potential', 'debug', 'output', 'emitted', 'by', 'the', 'interpreter', '.'], 'words': ['strip', 'the', 'var0', 'of', 'a', 'python', 'process', 'from', 'potential', 'debug', 'output', 'emitted', 'by', 'the', 'interpreter', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'stderr'}, 'snippet': 'test.support.strip_python_strerr(var0)'}
Generated  translation
test. support. strip _ python _ strerr ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'samples', 'between', '1', '-', ',', '2', '-', ',', '3', '-', 'and', '4', '-', 'byte', 'formats', '.', 'with', 'arguments', 'var0', ',', 'var1', ',', 'var2', '.'], 'words': ['convert', 'samples', 'between', '1', '-', ',', '2', '-', ',', '3', '-', 'and', '4', '-', 'byte', 'formats', '.', 'with', 'arguments', 'var0', ',', 'var1', ',', 'var2', '.'], 'after': [' ', ' ', ' ', '', ' ', ' ', '', ' ', ' ', '', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', '', '']}, 'slot_map': {'var0': 'fragment', 'var1': 'width', 'var2': 'newwidth'}, 'snippet': 'audioop.lin2lin(var0, var1, var2)'}
Generated  translation
audioop. lin2lin ( var0, var1, var2 ) 
--------- B -----------
{'intent': {'gloss': ['make', 'a', 'multiindex', 'from', 'a', 'dataframe', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'pandas', 'pandas'], 'words': ['make', 'a', 'multiindex', 'from', 'a', 'dataframe', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'pandas', 'pandas'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'var1': 'sortorder'}, 'snippet': 'multiindex.from_frame(var0, var1=none)'}
Generated  translation
multiindex. from _ frame ( var0, var1 = none ) 
--------- B -----------
{'intent': {'gloss': ['make', 'a', 'multiindex', 'from', 'a', 'dataframe', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'pandas', 'pandas'], 'words': ['make', 'a', 'multiindex', 'from', 'a', 'dataframe', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'pandas', 'pandas'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'var1': 'sortorder'}, 'snippet': 'multiindex.from_frame(var0, var1=none)'}
Generated  translation
multiindex. from _ frame ( var0, var1 = none ) 
--------- B -----------
{'intent': {'gloss': ['make', 'a', 'multiindex', 'from', 'a', 'dataframe', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'pandas', 'pandas'], 'words': ['make', 'a', 'multiindex', 'from', 'a', 'dataframe', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'pandas', 'pandas'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'var1': 'sortorder'}, 'snippet': 'multiindex.from_frame(var0, var1=none)'}
Generated  translation
multiindex. from _ frame ( var0, var1 = none ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'samples', 'between', '1', '-', ',', '2', '-', ',', '3', '-', 'and', '4', '-', 'byte', 'formats', '.', 'with', 'arguments', 'var0', ',', 'var1', ',', 'var2', '.'], 'words': ['convert', 'samples', 'between', '1', '-', ',', '2', '-', ',', '3', '-', 'and', '4', '-', 'byte', 'formats', '.', 'with', 'arguments', 'var0', ',', 'var1', ',', 'var2', '.'], 'after': [' ', ' ', ' ', '', ' ', ' ', '', ' ', ' ', '', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', '', '']}, 'slot_map': {'var0': 'fragment', 'var1': 'width', 'var2': 'newwidth'}, 'snippet': 'audioop.lin2lin(var0, var1, var2)'}
Generated  translation
audioop. lin2lin ( var0, var1, var2 ) 
--------- B -----------
{'intent': {'gloss': ['make', 'a', 'multiindex', 'from', 'a', 'dataframe', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'pandas', 'pandas'], 'words': ['make', 'a', 'multiindex', 'from', 'a', 'dataframe', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'pandas', 'pandas'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'var1': 'sortorder'}, 'snippet': 'multiindex.from_frame(var0, var1=none)'}
Generated  translation
multiindex. from _ frame ( var0, var1 = none ) 
--------- B -----------
{'intent': {'gloss': ['make', 'a', 'multiindex', 'from', 'a', 'dataframe', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'pandas', 'pandas'], 'words': ['make', 'a', 'multiindex', 'from', 'a', 'dataframe', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'pandas', 'pandas'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'var1': 'sortorder'}, 'snippet': 'multiindex.from_frame(var0, var1=none)'}
Generated  translation
multiindex. from _ frame ( var0, var1 = none ) 
--------- B -----------
{'intent': {'gloss': ['make', 'a', 'multiindex', 'from', 'a', 'dataframe', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'pandas', 'pandas'], 'words': ['make', 'a', 'multiindex', 'from', 'a', 'dataframe', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'pandas', 'pandas'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'var1': 'sortorder'}, 'snippet': 'multiindex.from_frame(var0, var1=none)'}
Generated  translation
multiindex. from _ frame ( var0, var1 = none ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'samples', 'between', '1', '-', ',', '2', '-', ',', '3', '-', 'and', '4', '-', 'byte', 'formats', '.', 'with', 'arguments', 'var0', ',', 'var1', ',', 'var2', '.'], 'words': ['convert', 'samples', 'between', '1', '-', ',', '2', '-', ',', '3', '-', 'and', '4', '-', 'byte', 'formats', '.', 'with', 'arguments', 'var0', ',', 'var1', ',', 'var2', '.'], 'after': [' ', ' ', ' ', '', ' ', ' ', '', ' ', ' ', '', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', '', '']}, 'slot_map': {'var0': 'fragment', 'var1': 'width', 'var2': 'newwidth'}, 'snippet': 'audioop.lin2lin(var0, var1, var2)'}
Generated  translation
audioop. lin2lin ( var0, var1, var2 ) 
--------- B -----------
{'intent': {'gloss': ['make', 'a', 'multiindex', 'from', 'a', 'dataframe', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'pandas', 'pandas'], 'words': ['make', 'a', 'multiindex', 'from', 'a', 'dataframe', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'pandas', 'pandas'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'var1': 'sortorder'}, 'snippet': 'multiindex.from_frame(var0, var1=none)'}
Generated  translation
multiindex. from _ frame ( var0, var1 = none ) 
--------- B -----------
{'intent': {'gloss': ['make', 'a', 'multiindex', 'from', 'a', 'dataframe', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'pandas', 'pandas'], 'words': ['make', 'a', 'multiindex', 'from', 'a', 'dataframe', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'pandas', 'pandas'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'var1': 'sortorder'}, 'snippet': 'multiindex.from_frame(var0, var1=none)'}
Generated  translation
multiindex. from _ frame ( var0, var1 = none ) 
--------- B -----------
{'intent': {'gloss': ['x', '.', '_', '_', 'getitem', '_', '_', '(', 'y', ')', '<', '=', '=', '>', 'x', '[', 'y', ']', 'with', 'arguments', 'var0', '.', 'numpy'], 'words': ['x', '.', '_', '_', 'getitem', '_', '_', '(', 'y', ')', '<', '=', '=', '>', 'x', '[', 'y', ']', 'with', 'arguments', 'var0', '.', 'numpy'], 'after': ['', '', '', '', '', '', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '']}, 'slot_map': {'var0': 'indx'}, 'snippet': 'ma.maskedarray.__getitem__(var0)'}
Generated  translation
ma. maskedarray. _ _ getitem _ _ ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['applies', 'element', '-', 'wise', ',', 'elu', '(', 'x', ')', '=', 'max\u2061', '(', '0', ',', 'x', ')', '+', 'min\u2061', '(', '0', ',', 'α∗', '(', 'exp\u2061', '(', 'x', ')', '−1', ')', ')', '\\', 'text', '{', 'elu', '}', '(', 'x', ')', '=', '\\', 'max', '(', '0', ',', 'x', ')', '+', '\\', 'min', '(', '0', ',', '\\', 'alpha', '*', '(', '\\', 'exp', '(', 'x', ')', '-', '1', ')', ')', 'elu', '(', 'x', ')', '=', 'max', '(', '0', ',', 'x', ')', '+', 'min', '(', '0', ',', 'α∗', '(', 'exp', '(', 'x', ')', '−1', ')', ')', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'torch'], 'words': ['applies', 'element', '-', 'wise', ',', 'elu', '(', 'x', ')', '=', 'max\u2061', '(', '0', ',', 'x', ')', '+', 'min\u2061', '(', '0', ',', 'α∗', '(', 'exp\u2061', '(', 'x', ')', '−1', ')', ')', '\\', 'text', '{', 'elu', '}', '(', 'x', ')', '=', '\\', 'max', '(', '0', ',', 'x', ')', '+', '\\', 'min', '(', '0', ',', '\\', 'alpha', '*', '(', '\\', 'exp', '(', 'x', ')', '-', '1', ')', ')', 'elu', '(', 'x', ')', '=', 'max', '(', '0', ',', 'x', ')', '+', 'min', '(', '0', ',', 'α∗', '(', 'exp', '(', 'x', ')', '−1', ')', ')', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'torch'], 'after': [' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', '']}, 'slot_map': {'var0': 'input', 'var1': 'inplace'}, 'snippet': 'torch.nn.functional.elu(var0, var1=false)'}
Generated  translation
torch. nn. functional. elu ( ) 
--------- B -----------
{'intent': {'gloss': ['draw', 'samples', 'from', 'a', 'standard', 'student', '’', 's', 't', 'distribution', 'with', 'var0', 'degrees', 'of', 'freedom', '.', 'with', 'arguments', 'var1', '.', 'numpy'], 'words': ['draw', 'samples', 'from', 'a', 'standard', 'student', '’', 's', 't', 'distribution', 'with', 'var0', 'degrees', 'of', 'freedom', '.', 'with', 'arguments', 'var1', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '']}, 'slot_map': {'var0': 'df', 'var1': 'size'}, 'snippet': 'random.randomstate.standard_t(var0, var1=none)'}
Generated  translation
random. randomstate. standard _ t ( var0, var1 = none ) 
--------- B -----------
{'intent': {'gloss': ['draw', 'samples', 'from', 'a', 'standard', 'student', '’', 's', 't', 'distribution', 'with', 'var0', 'degrees', 'of', 'freedom', '.', 'with', 'arguments', 'var1', '.', 'numpy'], 'words': ['draw', 'samples', 'from', 'a', 'standard', 'student', '’', 's', 't', 'distribution', 'with', 'var0', 'degrees', 'of', 'freedom', '.', 'with', 'arguments', 'var1', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '']}, 'slot_map': {'var0': 'df', 'var1': 'size'}, 'snippet': 'random.randomstate.standard_t(var0, var1=none)'}
Generated  translation
random. randomstate. standard _ t ( var0, var1 = none ) 
--------- B -----------
{'intent': {'gloss': ['draw', 'samples', 'from', 'a', 'standard', 'student', '’', 's', 't', 'distribution', 'with', 'var0', 'degrees', 'of', 'freedom', '.', 'with', 'arguments', 'var1', '.', 'numpy'], 'words': ['draw', 'samples', 'from', 'a', 'standard', 'student', '’', 's', 't', 'distribution', 'with', 'var0', 'degrees', 'of', 'freedom', '.', 'with', 'arguments', 'var1', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '']}, 'slot_map': {'var0': 'df', 'var1': 'size'}, 'snippet': 'random.randomstate.standard_t(var0, var1=none)'}
Generated  translation
random. randomstate. standard _ t ( var0, var1 = none ) 
--------- B -----------
{'intent': {'gloss': ['draw', 'samples', 'from', 'a', 'standard', 'student', '’', 's', 't', 'distribution', 'with', 'var0', 'degrees', 'of', 'freedom', '.', 'with', 'arguments', 'var1', '.', 'numpy'], 'words': ['draw', 'samples', 'from', 'a', 'standard', 'student', '’', 's', 't', 'distribution', 'with', 'var0', 'degrees', 'of', 'freedom', '.', 'with', 'arguments', 'var1', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '']}, 'slot_map': {'var0': 'df', 'var1': 'size'}, 'snippet': 'random.randomstate.standard_t(var0, var1=none)'}
Generated  translation
random. randomstate. standard _ t ( var0, var1 = none ) 
--------- B -----------
{'intent': {'gloss': ['draw', 'samples', 'from', 'a', 'standard', 'student', '’', 's', 't', 'distribution', 'with', 'var0', 'degrees', 'of', 'freedom', '.', 'with', 'arguments', 'var1', '.', 'numpy'], 'words': ['draw', 'samples', 'from', 'a', 'standard', 'student', '’', 's', 't', 'distribution', 'with', 'var0', 'degrees', 'of', 'freedom', '.', 'with', 'arguments', 'var1', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '']}, 'slot_map': {'var0': 'df', 'var1': 'size'}, 'snippet': 'random.randomstate.standard_t(var0, var1=none)'}
Generated  translation
random. randomstate. standard _ t ( var0, var1 = none ) 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'timer', 'instance', 'with', 'the', 'given', 'statement', ',', 'var0', 'code', 'and', 'var1', 'function', 'and', 'run', 'its', 'timeit', '(', ')', 'method', 'with', 'var2', 'executions', '.', 'with', 'arguments', 'var3', '.'], 'words': ['create', 'a', 'timer', 'instance', 'with', 'the', 'given', 'statement', ',', 'var0', 'code', 'and', 'var1', 'function', 'and', 'run', 'its', 'timeit', '(', ')', 'method', 'with', 'var2', 'executions', '.', 'with', 'arguments', 'var3', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'var0': 'setup', 'var1': 'timer', 'var2': 'number', 'var3': 'stmt'}, 'snippet': "timeit.timeit(var3='pass', var0='pass')"}
Generated  translation
timeit. timeit ( var3 ='pass ', var0 ='pass') 
dev greedy accuracy 0.845
dev greedy bleu score 0.9020401288550101
dev greedy exececution accuracy 0.0
--------- B -----------
{'intent': {'gloss': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'words': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'int()'}
Generated  translation
int ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'words': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'int()'}
Generated  translation
int ( ) 
--------- B -----------
{'intent': {'gloss': ['rather', 'than', 'being', 'a', 'function', ',', 'list', 'is', 'actually', 'a', 'mutable', 'sequence', 'type', ',', 'as', 'documented', 'in', 'lists', 'and', 'sequence', 'types', '—', 'list', ',', 'tuple', ',', 'range', '.'], 'words': ['rather', 'than', 'being', 'a', 'function', ',', 'list', 'is', 'actually', 'a', 'mutable', 'sequence', 'type', ',', 'as', 'documented', 'in', 'lists', 'and', 'sequence', 'types', '—', 'list', ',', 'tuple', ',', 'range', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'list()'}
Generated  translation
list ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'true', 'if', 'd', 'has', 'a', 'key', 'key', ',', 'else', 'false', '.'], 'words': ['return', 'true', 'if', 'd', 'has', 'a', 'key', 'key', ',', 'else', 'false', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'key in d'}
Generated  translation
key in d 
--------- B -----------
{'intent': {'gloss': ['objects', 'that', 'when', 'printed', ',', 'print', 'a', 'message', 'like', '“', 'use', 'quit', '(', ')', 'or', 'ctrl', '-', 'd', '(', 'i', '.', 'e', '.'], 'words': ['objects', 'that', 'when', 'printed', ',', 'print', 'a', 'message', 'like', '“', 'use', 'quit', '(', ')', 'or', 'ctrl', '-', 'd', '(', 'i', '.', 'e', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', '', '', ' ', '']}, 'slot_map': {}, 'snippet': 'exit()'}
Generated  translation
exit ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'new', 'set', 'object', ',', 'optionally', 'with', 'elements', 'taken', 'from', 'var0', '.'], 'words': ['return', 'a', 'new', 'set', 'object', ',', 'optionally', 'with', 'elements', 'taken', 'from', 'var0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'iterable'}, 'snippet': 'set()'}
Generated  translation
set ( ) 
--------- B -----------
{'intent': {'gloss': ['objects', 'that', 'when', 'printed', ',', 'print', 'a', 'message', 'like', '“', 'use', 'quit', '(', ')', 'or', 'ctrl', '-', 'd', '(', 'i', '.', 'e', '.'], 'words': ['objects', 'that', 'when', 'printed', ',', 'print', 'a', 'message', 'like', '“', 'use', 'quit', '(', ')', 'or', 'ctrl', '-', 'd', '(', 'i', '.', 'e', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', '', '', ' ', '']}, 'slot_map': {}, 'snippet': 'exit()'}
Generated  translation
exit ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'words': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'int()'}
Generated  translation
int ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'true', 'if', 'd', 'has', 'a', 'key', 'key', ',', 'else', 'false', '.'], 'words': ['return', 'true', 'if', 'd', 'has', 'a', 'key', 'key', ',', 'else', 'false', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'key in d'}
Generated  translation
key in d 
--------- B -----------
{'intent': {'gloss': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'words': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'int()'}
Generated  translation
int ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'words': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'int()'}
Generated  translation
int ( ) 
--------- B -----------
{'intent': {'gloss': ['test', 'x', 'for', 'membership', 'in', 's', '.'], 'words': ['test', 'x', 'for', 'membership', 'in', 's', '.'], 'after': [' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'x in s'}
Generated  translation
x in s 
--------- B -----------
{'intent': {'gloss': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'words': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'int()'}
Generated  translation
int ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'true', 'if', 'd', 'has', 'a', 'key', 'key', ',', 'else', 'false', '.'], 'words': ['return', 'true', 'if', 'd', 'has', 'a', 'key', 'key', ',', 'else', 'false', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'key in d'}
Generated  translation
key in d 
--------- B -----------
{'intent': {'gloss': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'words': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'int()'}
Generated  translation
int ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'words': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'int()'}
Generated  translation
int ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'words': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'int()'}
Generated  translation
int ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'words': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'int()'}
Generated  translation
int ( ) 
--------- B -----------
{'intent': {'gloss': ['lists', 'may', 'be', 'constructed', 'in', 'several', 'ways', ':'], 'words': ['lists', 'may', 'be', 'constructed', 'in', 'several', 'ways', ':'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'list()'}
Generated  translation
list ( ) 
--------- B -----------
{'intent': {'gloss': ['rather', 'than', 'being', 'a', 'function', ',', 'list', 'is', 'actually', 'a', 'mutable', 'sequence', 'type', ',', 'as', 'documented', 'in', 'lists', 'and', 'sequence', 'types', '—', 'list', ',', 'tuple', ',', 'range', '.'], 'words': ['rather', 'than', 'being', 'a', 'function', ',', 'list', 'is', 'actually', 'a', 'mutable', 'sequence', 'type', ',', 'as', 'documented', 'in', 'lists', 'and', 'sequence', 'types', '—', 'list', ',', 'tuple', ',', 'range', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'list()'}
Generated  translation
list ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'words': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'int()'}
Generated  translation
int ( ) 
--------- B -----------
{'intent': {'gloss': ['lists', 'may', 'be', 'constructed', 'in', 'several', 'ways', ':'], 'words': ['lists', 'may', 'be', 'constructed', 'in', 'several', 'ways', ':'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'list()'}
Generated  translation
list ( ) 
--------- B -----------
{'intent': {'gloss': ['test', 'x', 'for', 'membership', 'in', 's', '.'], 'words': ['test', 'x', 'for', 'membership', 'in', 's', '.'], 'after': [' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'x in s'}
Generated  translation
x in s 
--------- B -----------
{'intent': {'gloss': ['return', 'true', 'if', 'd', 'has', 'a', 'key', 'key', ',', 'else', 'false', '.'], 'words': ['return', 'true', 'if', 'd', 'has', 'a', 'key', 'key', ',', 'else', 'false', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'key in d'}
Generated  translation
key in d 
--------- B -----------
{'intent': {'gloss': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'words': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'int()'}
Generated  translation
int ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'true', 'if', 'd', 'has', 'a', 'key', 'key', ',', 'else', 'false', '.'], 'words': ['return', 'true', 'if', 'd', 'has', 'a', 'key', 'key', ',', 'else', 'false', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'key in d'}
Generated  translation
key in d 
--------- B -----------
{'intent': {'gloss': ['objects', 'that', 'when', 'printed', ',', 'print', 'a', 'message', 'like', '“', 'use', 'quit', '(', ')', 'or', 'ctrl', '-', 'd', '(', 'i', '.', 'e', '.'], 'words': ['objects', 'that', 'when', 'printed', ',', 'print', 'a', 'message', 'like', '“', 'use', 'quit', '(', ')', 'or', 'ctrl', '-', 'd', '(', 'i', '.', 'e', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', '', '', ' ', '']}, 'slot_map': {}, 'snippet': 'exit()'}
Generated  translation
exit ( ) 
--------- B -----------
{'intent': {'gloss': ['rather', 'than', 'being', 'a', 'function', ',', 'list', 'is', 'actually', 'a', 'mutable', 'sequence', 'type', ',', 'as', 'documented', 'in', 'lists', 'and', 'sequence', 'types', '—', 'list', ',', 'tuple', ',', 'range', '.'], 'words': ['rather', 'than', 'being', 'a', 'function', ',', 'list', 'is', 'actually', 'a', 'mutable', 'sequence', 'type', ',', 'as', 'documented', 'in', 'lists', 'and', 'sequence', 'types', '—', 'list', ',', 'tuple', ',', 'range', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'list()'}
Generated  translation
list ( ) 
--------- B -----------
{'intent': {'gloss': ['test', 'x', 'for', 'membership', 'in', 's', '.'], 'words': ['test', 'x', 'for', 'membership', 'in', 's', '.'], 'after': [' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'x in s'}
Generated  translation
x in s 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'new', 'set', 'or', 'frozenset', 'object', 'whose', 'elements', 'are', 'taken', 'from', 'var0', '.'], 'words': ['return', 'a', 'new', 'set', 'or', 'frozenset', 'object', 'whose', 'elements', 'are', 'taken', 'from', 'var0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'iterable'}, 'snippet': 'set()'}
Generated  translation
set ( ) 
--------- B -----------
{'intent': {'gloss': ['rather', 'than', 'being', 'a', 'function', ',', 'list', 'is', 'actually', 'a', 'mutable', 'sequence', 'type', ',', 'as', 'documented', 'in', 'lists', 'and', 'sequence', 'types', '—', 'list', ',', 'tuple', ',', 'range', '.'], 'words': ['rather', 'than', 'being', 'a', 'function', ',', 'list', 'is', 'actually', 'a', 'mutable', 'sequence', 'type', ',', 'as', 'documented', 'in', 'lists', 'and', 'sequence', 'types', '—', 'list', ',', 'tuple', ',', 'range', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'list()'}
Generated  translation
list ( ) 
--------- B -----------
{'intent': {'gloss': ['objects', 'that', 'when', 'printed', ',', 'print', 'a', 'message', 'like', '“', 'use', 'quit', '(', ')', 'or', 'ctrl', '-', 'd', '(', 'i', '.', 'e', '.'], 'words': ['objects', 'that', 'when', 'printed', ',', 'print', 'a', 'message', 'like', '“', 'use', 'quit', '(', ')', 'or', 'ctrl', '-', 'd', '(', 'i', '.', 'e', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', '', '', ' ', '']}, 'slot_map': {}, 'snippet': 'exit()'}
Generated  translation
exit ( ) 
--------- B -----------
{'intent': {'gloss': ['lists', 'may', 'be', 'constructed', 'in', 'several', 'ways', ':'], 'words': ['lists', 'may', 'be', 'constructed', 'in', 'several', 'ways', ':'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'list()'}
Generated  translation
list ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'words': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'int()'}
Generated  translation
int ( ) 
--------- B -----------
{'intent': {'gloss': ['test', 'x', 'for', 'membership', 'in', 's', '.'], 'words': ['test', 'x', 'for', 'membership', 'in', 's', '.'], 'after': [' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'x in s'}
Generated  translation
x in s 
--------- B -----------
{'intent': {'gloss': ['return', 'true', 'if', 'd', 'has', 'a', 'key', 'key', ',', 'else', 'false', '.'], 'words': ['return', 'true', 'if', 'd', 'has', 'a', 'key', 'key', ',', 'else', 'false', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'key in d'}
Generated  translation
key in d 
--------- B -----------
{'intent': {'gloss': ['return', 'true', 'if', 'd', 'has', 'a', 'key', 'key', ',', 'else', 'false', '.'], 'words': ['return', 'true', 'if', 'd', 'has', 'a', 'key', 'key', ',', 'else', 'false', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'key in d'}
Generated  translation
key in d 
--------- B -----------
{'intent': {'gloss': ['lists', 'may', 'be', 'constructed', 'in', 'several', 'ways', ':'], 'words': ['lists', 'may', 'be', 'constructed', 'in', 'several', 'ways', ':'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'list()'}
Generated  translation
list ( ) 
--------- B -----------
{'intent': {'gloss': ['test', 'x', 'for', 'membership', 'in', 's', '.'], 'words': ['test', 'x', 'for', 'membership', 'in', 's', '.'], 'after': [' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'x in s'}
Generated  translation
x in s 
--------- B -----------
{'intent': {'gloss': ['return', 'true', 'if', 'd', 'has', 'a', 'key', 'key', ',', 'else', 'false', '.'], 'words': ['return', 'true', 'if', 'd', 'has', 'a', 'key', 'key', ',', 'else', 'false', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'key in d'}
Generated  translation
key in d 
--------- B -----------
{'intent': {'gloss': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'words': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'int()'}
Generated  translation
int ( ) 
--------- B -----------
{'intent': {'gloss': ['rather', 'than', 'being', 'a', 'function', ',', 'list', 'is', 'actually', 'a', 'mutable', 'sequence', 'type', ',', 'as', 'documented', 'in', 'lists', 'and', 'sequence', 'types', '—', 'list', ',', 'tuple', ',', 'range', '.'], 'words': ['rather', 'than', 'being', 'a', 'function', ',', 'list', 'is', 'actually', 'a', 'mutable', 'sequence', 'type', ',', 'as', 'documented', 'in', 'lists', 'and', 'sequence', 'types', '—', 'list', ',', 'tuple', ',', 'range', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'list()'}
Generated  translation
list ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'words': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'object'}, 'snippet': 'str()'}
Generated  translation
str ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'words': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'object'}, 'snippet': 'str()'}
Generated  translation
str ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'words': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'object'}, 'snippet': 'str()'}
Generated  translation
str ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'words': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'object'}, 'snippet': 'str()'}
Generated  translation
str ( ) 
--------- B -----------
{'intent': {'gloss': ['test', 'x', 'for', 'non', '-', 'membership', 'in', 's', '.'], 'words': ['test', 'x', 'for', 'non', '-', 'membership', 'in', 's', '.'], 'after': [' ', ' ', ' ', '', '', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'x not in s'}
Generated  translation
x not in s 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'words': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'object'}, 'snippet': 'str()'}
Generated  translation
str ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'words': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'object'}, 'snippet': 'str()'}
Generated  translation
str ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'words': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'object'}, 'snippet': 'str()'}
Generated  translation
str ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'words': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'object'}, 'snippet': 'str()'}
Generated  translation
str ( ) 
--------- B -----------
{'intent': {'gloss': ['test', 'x', 'for', 'non', '-', 'membership', 'in', 's', '.'], 'words': ['test', 'x', 'for', 'non', '-', 'membership', 'in', 's', '.'], 'after': [' ', ' ', ' ', '', '', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'x not in s'}
Generated  translation
x not in s 
--------- B -----------
{'intent': {'gloss': ['test', 'x', 'for', 'non', '-', 'membership', 'in', 's', '.'], 'words': ['test', 'x', 'for', 'non', '-', 'membership', 'in', 's', '.'], 'after': [' ', ' ', ' ', '', '', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'x not in s'}
Generated  translation
x not in s 
--------- B -----------
{'intent': {'gloss': ['test', 'x', 'for', 'non', '-', 'membership', 'in', 's', '.'], 'words': ['test', 'x', 'for', 'non', '-', 'membership', 'in', 's', '.'], 'after': [' ', ' ', ' ', '', '', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'x not in s'}
Generated  translation
x not in s 
--------- B -----------
{'intent': {'gloss': ['equivalent', 'to', 'not', 'key', 'in', 'd', '.'], 'words': ['equivalent', 'to', 'not', 'key', 'in', 'd', '.'], 'after': [' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'key not in d'}
Generated  translation
key not in d 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'words': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'object'}, 'snippet': 'str()'}
Generated  translation
str ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'words': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'object'}, 'snippet': 'str()'}
Generated  translation
str ( ) 
--------- B -----------
{'intent': {'gloss': ['test', 'x', 'for', 'non', '-', 'membership', 'in', 's', '.'], 'words': ['test', 'x', 'for', 'non', '-', 'membership', 'in', 's', '.'], 'after': [' ', ' ', ' ', '', '', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'x not in s'}
Generated  translation
x not in s 
--------- B -----------
{'intent': {'gloss': ['equivalent', 'to', 'not', 'key', 'in', 'd', '.'], 'words': ['equivalent', 'to', 'not', 'key', 'in', 'd', '.'], 'after': [' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'key not in d'}
Generated  translation
key not in d 
--------- B -----------
{'intent': {'gloss': ['test', 'x', 'for', 'non', '-', 'membership', 'in', 's', '.'], 'words': ['test', 'x', 'for', 'non', '-', 'membership', 'in', 's', '.'], 'after': [' ', ' ', ' ', '', '', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'x not in s'}
Generated  translation
x not in s 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'words': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'object'}, 'snippet': 'str()'}
Generated  translation
str ( ) 
--------- B -----------
{'intent': {'gloss': ['test', 'x', 'for', 'non', '-', 'membership', 'in', 's', '.'], 'words': ['test', 'x', 'for', 'non', '-', 'membership', 'in', 's', '.'], 'after': [' ', ' ', ' ', '', '', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'x not in s'}
Generated  translation
x not in s 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'words': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'object'}, 'snippet': 'str()'}
Generated  translation
str ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'words': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'object'}, 'snippet': 'str()'}
Generated  translation
str ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'words': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'object'}, 'snippet': 'str()'}
Generated  translation
str ( ) 
--------- B -----------
{'intent': {'gloss': ['equivalent', 'to', 'not', 'key', 'in', 'd', '.'], 'words': ['equivalent', 'to', 'not', 'key', 'in', 'd', '.'], 'after': [' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'key not in d'}
Generated  translation
key not in d 
--------- B -----------
{'intent': {'gloss': ['equivalent', 'to', 'not', 'key', 'in', 'd', '.'], 'words': ['equivalent', 'to', 'not', 'key', 'in', 'd', '.'], 'after': [' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'key not in d'}
Generated  translation
key not in d 
--------- B -----------
{'intent': {'gloss': ['test', 'x', 'for', 'non', '-', 'membership', 'in', 's', '.'], 'words': ['test', 'x', 'for', 'non', '-', 'membership', 'in', 's', '.'], 'after': [' ', ' ', ' ', '', '', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'x not in s'}
Generated  translation
x not in s 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'words': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'object'}, 'snippet': 'str()'}
Generated  translation
str ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'words': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'object'}, 'snippet': 'str()'}
Generated  translation
str ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'words': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'object'}, 'snippet': 'str()'}
Generated  translation
str ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'words': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'object'}, 'snippet': 'str()'}
Generated  translation
str ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'words': ['return', 'a', 'string', 'version', 'of', 'var0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'object'}, 'snippet': 'str()'}
Generated  translation
str ( ) 
--------- B -----------
{'intent': {'gloss': ['test', 'x', 'for', 'non', '-', 'membership', 'in', 's', '.'], 'words': ['test', 'x', 'for', 'non', '-', 'membership', 'in', 's', '.'], 'after': [' ', ' ', ' ', '', '', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'x not in s'}
Generated  translation
x not in s 
--------- B -----------
{'intent': {'gloss': ['test', 'x', 'for', 'non', '-', 'membership', 'in', 's', '.'], 'words': ['test', 'x', 'for', 'non', '-', 'membership', 'in', 's', '.'], 'after': [' ', ' ', ' ', '', '', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'x not in s'}
Generated  translation
x not in s 
--------- B -----------
{'intent': {'gloss': ['print', 'objects', 'to', 'the', 'text', 'stream', 'var0', ',', 'separated', 'by', 'var1', 'and', 'followed', 'by', 'var2', '.', 'with', 'arguments', 'str0', '.'], 'words': ['print', 'objects', 'to', 'the', 'text', 'stream', 'var0', ',', 'separated', 'by', 'var1', 'and', 'followed', 'by', 'var2', '.', 'with', 'arguments', 'str0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'var0': 'file', 'var1': 'sep', 'var2': 'end', 'str0': '*objects'}, 'snippet': 'print(*objects)'}
Generated  translation
print ( * objects ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'list', 'of', 'all', 'the', 'keys', 'used', 'in', 'the', 'dictionary', 'var0', '.'], 'words': ['return', 'a', 'list', 'of', 'all', 'the', 'keys', 'used', 'in', 'the', 'dictionary', 'var0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'd'}, 'snippet': 'list(var0)'}
Generated  translation
list ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['squeeze', '1', 'dimensional', 'var0', 'objects', 'into', 'scalars', '.', 'pandas', 'pandas'], 'words': ['squeeze', '1', 'dimensional', 'var0', 'objects', 'into', 'scalars', '.', 'pandas', 'pandas'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'axis'}, 'snippet': 'series.squeeze()'}
Generated  translation
series. squeeze ( ) 
--------- B -----------
{'intent': {'gloss': ['squeeze', '1', 'dimensional', 'var0', 'objects', 'into', 'scalars', '.', 'pandas', 'pandas'], 'words': ['squeeze', '1', 'dimensional', 'var0', 'objects', 'into', 'scalars', '.', 'pandas', 'pandas'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'axis'}, 'snippet': 'series.squeeze()'}
Generated  translation
series. squeeze ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'words': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'int(var0)'}
Generated  translation
int ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'words': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'int(var0)'}
Generated  translation
int ( ) 
--------- B -----------
{'intent': {'gloss': ['print', 'objects', 'to', 'the', 'text', 'stream', 'var0', ',', 'separated', 'by', 'var1', 'and', 'followed', 'by', 'var2', '.', 'with', 'arguments', 'str0', '.'], 'words': ['print', 'objects', 'to', 'the', 'text', 'stream', 'var0', ',', 'separated', 'by', 'var1', 'and', 'followed', 'by', 'var2', '.', 'with', 'arguments', 'str0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'var0': 'file', 'var1': 'sep', 'var2': 'end', 'str0': '*objects'}, 'snippet': 'print(*objects)'}
Generated  translation
print ( * objects ) 
--------- B -----------
{'intent': {'gloss': ['print', 'objects', 'to', 'the', 'text', 'stream', 'var0', ',', 'separated', 'by', 'var1', 'and', 'followed', 'by', 'var2', '.', 'with', 'arguments', 'str0', '.'], 'words': ['print', 'objects', 'to', 'the', 'text', 'stream', 'var0', ',', 'separated', 'by', 'var1', 'and', 'followed', 'by', 'var2', '.', 'with', 'arguments', 'str0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'var0': 'file', 'var1': 'sep', 'var2': 'end', 'str0': '*objects'}, 'snippet': 'print(*objects)'}
Generated  translation
print ( * objects ) 
--------- B -----------
{'intent': {'gloss': ['print', 'objects', 'to', 'the', 'text', 'stream', 'var0', ',', 'separated', 'by', 'var1', 'and', 'followed', 'by', 'var2', '.', 'with', 'arguments', 'str0', '.'], 'words': ['print', 'objects', 'to', 'the', 'text', 'stream', 'var0', ',', 'separated', 'by', 'var1', 'and', 'followed', 'by', 'var2', '.', 'with', 'arguments', 'str0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'var0': 'file', 'var1': 'sep', 'var2': 'end', 'str0': '*objects'}, 'snippet': 'print(*objects)'}
Generated  translation
print ( * objects ) 
--------- B -----------
{'intent': {'gloss': ['print', 'objects', 'to', 'the', 'text', 'stream', 'var0', ',', 'separated', 'by', 'var1', 'and', 'followed', 'by', 'var2', '.', 'with', 'arguments', 'str0', '.'], 'words': ['print', 'objects', 'to', 'the', 'text', 'stream', 'var0', ',', 'separated', 'by', 'var1', 'and', 'followed', 'by', 'var2', '.', 'with', 'arguments', 'str0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'var0': 'file', 'var1': 'sep', 'var2': 'end', 'str0': '*objects'}, 'snippet': 'print(*objects)'}
Generated  translation
print ( * objects ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'new', 'sorted', 'list', 'from', 'the', 'items', 'in', 'var0', '.'], 'words': ['return', 'a', 'new', 'sorted', 'list', 'from', 'the', 'items', 'in', 'var0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'iterable'}, 'snippet': 'sorted(var0)'}
Generated  translation
sorted ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['squeeze', '1', 'dimensional', 'var0', 'objects', 'into', 'scalars', '.', 'pandas', 'pandas'], 'words': ['squeeze', '1', 'dimensional', 'var0', 'objects', 'into', 'scalars', '.', 'pandas', 'pandas'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'axis'}, 'snippet': 'series.squeeze()'}
Generated  translation
series. squeeze ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'words': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'int(var0)'}
Generated  translation
int ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'words': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'int(var0)'}
Generated  translation
int ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'words': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'int(var0)'}
Generated  translation
int ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'list', 'of', 'all', 'the', 'keys', 'used', 'in', 'the', 'dictionary', 'var0', '.'], 'words': ['return', 'a', 'list', 'of', 'all', 'the', 'keys', 'used', 'in', 'the', 'dictionary', 'var0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'd'}, 'snippet': 'list(var0)'}
Generated  translation
list ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'words': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'int(var0)'}
Generated  translation
int ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'words': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'int(var0)'}
Generated  translation
int ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'words': ['return', 'an', 'integer', 'object', 'constructed', 'from', 'a', 'number', 'or', 'string', 'var0', ',', 'or', 'return', '0', 'if', 'no', 'arguments', 'are', 'given', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'int(var0)'}
Generated  translation
int ( ) 
--------- B -----------
{'intent': {'gloss': ['squeeze', '1', 'dimensional', 'var0', 'objects', 'into', 'scalars', '.', 'pandas', 'pandas'], 'words': ['squeeze', '1', 'dimensional', 'var0', 'objects', 'into', 'scalars', '.', 'pandas', 'pandas'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'axis'}, 'snippet': 'series.squeeze()'}
Generated  translation
series. squeeze ( ) 
--------- B -----------
{'intent': {'gloss': ['squeeze', '1', 'dimensional', 'var0', 'objects', 'into', 'scalars', '.', 'pandas', 'pandas'], 'words': ['squeeze', '1', 'dimensional', 'var0', 'objects', 'into', 'scalars', '.', 'pandas', 'pandas'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'axis'}, 'snippet': 'dataframe.squeeze()'}
Generated  translation
series. squeeze ( ) 
--------- B -----------
{'intent': {'gloss': ['sequence', 'of', 'frame', 'instances', 'sorted', 'from', 'the', 'oldest', 'frame', 'to', 'the', 'most', 'recent', 'frame', '.'], 'words': ['sequence', 'of', 'frame', 'instances', 'sorted', 'from', 'the', 'oldest', 'frame', 'to', 'the', 'most', 'recent', 'frame', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'tracemalloc.traceback'}
Generated  translation
tracemalloc. traceback 
--------- B -----------
{'intent': {'gloss': ['sequence', 'of', 'frame', 'instances', 'sorted', 'from', 'the', 'oldest', 'frame', 'to', 'the', 'most', 'recent', 'frame', '.'], 'words': ['sequence', 'of', 'frame', 'instances', 'sorted', 'from', 'the', 'oldest', 'frame', 'to', 'the', 'most', 'recent', 'frame', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'tracemalloc.traceback'}
Generated  translation
tracemalloc. traceback 
--------- B -----------
{'intent': {'gloss': ['sequence', 'of', 'frame', 'instances', 'sorted', 'from', 'the', 'oldest', 'frame', 'to', 'the', 'most', 'recent', 'frame', '.'], 'words': ['sequence', 'of', 'frame', 'instances', 'sorted', 'from', 'the', 'oldest', 'frame', 'to', 'the', 'most', 'recent', 'frame', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'tracemalloc.traceback'}
Generated  translation
tracemalloc. traceback 
--------- B -----------
{'intent': {'gloss': ['sequence', 'of', 'frame', 'instances', 'sorted', 'from', 'the', 'oldest', 'frame', 'to', 'the', 'most', 'recent', 'frame', '.'], 'words': ['sequence', 'of', 'frame', 'instances', 'sorted', 'from', 'the', 'oldest', 'frame', 'to', 'the', 'most', 'recent', 'frame', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'tracemalloc.traceback'}
Generated  translation
tracemalloc. traceback 
--------- B -----------
{'intent': {'gloss': ['try', 'to', 'switch', 'to', 'utf', '-', '8', 'mode', '.'], 'words': ['try', 'to', 'switch', 'to', 'utf', '-', '8', 'mode', '.'], 'after': [' ', ' ', ' ', ' ', '', '', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'pop3.utf8()'}
Generated  translation
pop3. utf8 ( ) 
--------- B -----------
{'intent': {'gloss': ['exit', 'the', 'process', 'with', 'status', 'var0', ',', 'without', 'calling', 'cleanup', 'handlers', ',', 'flushing', 'stdio', 'buffers', ',', 'etc', '.'], 'words': ['exit', 'the', 'process', 'with', 'status', 'var0', ',', 'without', 'calling', 'cleanup', 'handlers', ',', 'flushing', 'stdio', 'buffers', ',', 'etc', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'n'}, 'snippet': 'os._exit(var0)'}
Generated  translation
os. _ exit ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['exit', 'the', 'process', 'with', 'status', 'var0', ',', 'without', 'calling', 'cleanup', 'handlers', ',', 'flushing', 'stdio', 'buffers', ',', 'etc', '.'], 'words': ['exit', 'the', 'process', 'with', 'status', 'var0', ',', 'without', 'calling', 'cleanup', 'handlers', ',', 'flushing', 'stdio', 'buffers', ',', 'etc', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'n'}, 'snippet': 'os._exit(var0)'}
Generated  translation
os. _ exit ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['exit', 'the', 'process', 'with', 'status', 'var0', ',', 'without', 'calling', 'cleanup', 'handlers', ',', 'flushing', 'stdio', 'buffers', ',', 'etc', '.'], 'words': ['exit', 'the', 'process', 'with', 'status', 'var0', ',', 'without', 'calling', 'cleanup', 'handlers', ',', 'flushing', 'stdio', 'buffers', ',', 'etc', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'n'}, 'snippet': 'os._exit(var0)'}
Generated  translation
os. _ exit ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['exit', 'the', 'process', 'with', 'status', 'var0', ',', 'without', 'calling', 'cleanup', 'handlers', ',', 'flushing', 'stdio', 'buffers', ',', 'etc', '.'], 'words': ['exit', 'the', 'process', 'with', 'status', 'var0', ',', 'without', 'calling', 'cleanup', 'handlers', ',', 'flushing', 'stdio', 'buffers', ',', 'etc', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'n'}, 'snippet': 'os._exit(var0)'}
Generated  translation
os. _ exit ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['exit', 'the', 'process', 'with', 'status', 'var0', ',', 'without', 'calling', 'cleanup', 'handlers', ',', 'flushing', 'stdio', 'buffers', ',', 'etc', '.'], 'words': ['exit', 'the', 'process', 'with', 'status', 'var0', ',', 'without', 'calling', 'cleanup', 'handlers', ',', 'flushing', 'stdio', 'buffers', ',', 'etc', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'n'}, 'snippet': 'os._exit(var0)'}
Generated  translation
os. _ exit ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['exit', 'the', 'process', 'with', 'status', 'var0', ',', 'without', 'calling', 'cleanup', 'handlers', ',', 'flushing', 'stdio', 'buffers', ',', 'etc', '.'], 'words': ['exit', 'the', 'process', 'with', 'status', 'var0', ',', 'without', 'calling', 'cleanup', 'handlers', ',', 'flushing', 'stdio', 'buffers', ',', 'etc', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'n'}, 'snippet': 'os._exit(var0)'}
Generated  translation
os. _ exit ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['exit', 'the', 'process', 'with', 'status', 'var0', ',', 'without', 'calling', 'cleanup', 'handlers', ',', 'flushing', 'stdio', 'buffers', ',', 'etc', '.'], 'words': ['exit', 'the', 'process', 'with', 'status', 'var0', ',', 'without', 'calling', 'cleanup', 'handlers', ',', 'flushing', 'stdio', 'buffers', ',', 'etc', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'n'}, 'snippet': 'os._exit(var0)'}
Generated  translation
os. _ exit ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['split', 'the', 'string', 'var0', 'using', 'shell', '-', 'like', 'syntax', '.'], 'words': ['split', 'the', 'string', 'var0', 'using', 'shell', '-', 'like', 'syntax', '.'], 'after': [' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': 'shlex.split(var0)'}
Generated  translation
shlex. split ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['draw', 'samples', 'from', 'a', 'standard', 'student', '’', 's', 't', 'distribution', 'with', 'var0', 'degrees', 'of', 'freedom', '.', 'numpy'], 'words': ['draw', 'samples', 'from', 'a', 'standard', 'student', '’', 's', 't', 'distribution', 'with', 'var0', 'degrees', 'of', 'freedom', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': 'random.standard_t(var0)'}
Generated  translation
random. standard _ t ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['create', 'new', 'var0', 'named', 'mailbox', '.'], 'words': ['create', 'new', 'var0', 'named', 'mailbox', '.'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mailbox'}, 'snippet': 'imap4.create(var0)'}
Generated  translation
imap4. create ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['draw', 'samples', 'from', 'a', 'standard', 'student', '’', 's', 't', 'distribution', 'with', 'var0', 'degrees', 'of', 'freedom', '.', 'numpy'], 'words': ['draw', 'samples', 'from', 'a', 'standard', 'student', '’', 's', 't', 'distribution', 'with', 'var0', 'degrees', 'of', 'freedom', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': 'random.standard_t(var0)'}
Generated  translation
random. standard _ t ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['split', 'the', 'string', 'var0', 'using', 'shell', '-', 'like', 'syntax', '.'], 'words': ['split', 'the', 'string', 'var0', 'using', 'shell', '-', 'like', 'syntax', '.'], 'after': [' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': 'shlex.split(var0)'}
Generated  translation
shlex. split ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['draw', 'samples', 'from', 'a', 'standard', 'student', '’', 's', 't', 'distribution', 'with', 'var0', 'degrees', 'of', 'freedom', '.', 'numpy'], 'words': ['draw', 'samples', 'from', 'a', 'standard', 'student', '’', 's', 't', 'distribution', 'with', 'var0', 'degrees', 'of', 'freedom', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': 'random.standard_t(var0)'}
Generated  translation
random. standard _ t ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['split', 'the', 'string', 'var0', 'using', 'shell', '-', 'like', 'syntax', '.'], 'words': ['split', 'the', 'string', 'var0', 'using', 'shell', '-', 'like', 'syntax', '.'], 'after': [' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': 'shlex.split(var0)'}
Generated  translation
shlex. split ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['reduces', 'var0', '’', 's', 'dimension', 'by', 'one', ',', 'by', 'applying', 'ufunc', 'along', 'one', 'var1', '.', 'numpy'], 'words': ['reduces', 'var0', '’', 's', 'dimension', 'by', 'one', ',', 'by', 'applying', 'ufunc', 'along', 'one', 'var1', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'array', 'var1': 'axis'}, 'snippet': 'ufunc.reduce(var0)'}
Generated  translation
ufunc. reduce ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['split', 'the', 'string', 'var0', 'using', 'shell', '-', 'like', 'syntax', '.'], 'words': ['split', 'the', 'string', 'var0', 'using', 'shell', '-', 'like', 'syntax', '.'], 'after': [' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': 'shlex.split(var0)'}
Generated  translation
shlex. split ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['create', 'new', 'var0', 'named', 'mailbox', '.'], 'words': ['create', 'new', 'var0', 'named', 'mailbox', '.'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mailbox'}, 'snippet': 'imap4.create(var0)'}
Generated  translation
imap4. create ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['draw', 'samples', 'from', 'a', 'standard', 'student', '’', 's', 't', 'distribution', 'with', 'var0', 'degrees', 'of', 'freedom', '.', 'numpy'], 'words': ['draw', 'samples', 'from', 'a', 'standard', 'student', '’', 's', 't', 'distribution', 'with', 'var0', 'degrees', 'of', 'freedom', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': 'random.standard_t(var0)'}
Generated  translation
random. standard _ t ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['draw', 'samples', 'from', 'a', 'standard', 'student', '’', 's', 't', 'distribution', 'with', 'var0', 'degrees', 'of', 'freedom', '.', 'numpy'], 'words': ['draw', 'samples', 'from', 'a', 'standard', 'student', '’', 's', 't', 'distribution', 'with', 'var0', 'degrees', 'of', 'freedom', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': 'random.standard_t(var0)'}
Generated  translation
random. standard _ t ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'new', 'sorted', 'list', 'from', 'the', 'items', 'in', 'var0', '.', 'var1', 'specifies', 'a', 'function', 'of', 'one', 'argument', 'that', 'is', 'used', 'to', 'extract', 'a', 'comparison', 'key', 'from', 'each', 'element', 'in', 'iterable', '(', 'for', 'example', ',', 'key', '=', 'str', '.', 'lower', ')', '.'], 'words': ['return', 'a', 'new', 'sorted', 'list', 'from', 'the', 'items', 'in', 'var0', '.', 'var1', 'specifies', 'a', 'function', 'of', 'one', 'argument', 'that', 'is', 'used', 'to', 'extract', 'a', 'comparison', 'key', 'from', 'each', 'element', 'in', 'iterable', '(', 'for', 'example', ',', 'key', '=', 'str', '.', 'lower', ')', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '', '', ' ', ' ', '']}, 'slot_map': {'var0': 'iterable', 'var1': 'key'}, 'snippet': 'sorted(var0, var1=none)'}
Generated  translation
sorted ( var0, var1 = none ) 
--------- B -----------
{'intent': {'gloss': ['wraps', 'the', 'single', 'paragraph', 'in', 'var0', ',', 'and', 'returns', 'a', 'single', 'string', 'containing', 'the', 'wrapped', 'paragraph', '.'], 'words': ['wraps', 'the', 'single', 'paragraph', 'in', 'var0', ',', 'and', 'returns', 'a', 'single', 'string', 'containing', 'the', 'wrapped', 'paragraph', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'text'}, 'snippet': 'text_wrapper.fill(var0)'}
Generated  translation
text _ wrapper. fill ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'new', 'sorted', 'list', 'from', 'the', 'items', 'in', 'var0', '.', 'var1', 'specifies', 'a', 'function', 'of', 'one', 'argument', 'that', 'is', 'used', 'to', 'extract', 'a', 'comparison', 'key', 'from', 'each', 'element', 'in', 'iterable', '(', 'for', 'example', ',', 'key', '=', 'str', '.', 'lower', ')', '.'], 'words': ['return', 'a', 'new', 'sorted', 'list', 'from', 'the', 'items', 'in', 'var0', '.', 'var1', 'specifies', 'a', 'function', 'of', 'one', 'argument', 'that', 'is', 'used', 'to', 'extract', 'a', 'comparison', 'key', 'from', 'each', 'element', 'in', 'iterable', '(', 'for', 'example', ',', 'key', '=', 'str', '.', 'lower', ')', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '', '', ' ', ' ', '']}, 'slot_map': {'var0': 'iterable', 'var1': 'key'}, 'snippet': 'sorted(var0, var1=none)'}
Generated  translation
sorted ( var0, var1 = none ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'new', 'sorted', 'list', 'from', 'the', 'items', 'in', 'var0', '.', 'var1', 'specifies', 'a', 'function', 'of', 'one', 'argument', 'that', 'is', 'used', 'to', 'extract', 'a', 'comparison', 'key', 'from', 'each', 'element', 'in', 'iterable', '(', 'for', 'example', ',', 'key', '=', 'str', '.', 'lower', ')', '.'], 'words': ['return', 'a', 'new', 'sorted', 'list', 'from', 'the', 'items', 'in', 'var0', '.', 'var1', 'specifies', 'a', 'function', 'of', 'one', 'argument', 'that', 'is', 'used', 'to', 'extract', 'a', 'comparison', 'key', 'from', 'each', 'element', 'in', 'iterable', '(', 'for', 'example', ',', 'key', '=', 'str', '.', 'lower', ')', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '', '', ' ', ' ', '']}, 'slot_map': {'var0': 'iterable', 'var1': 'key'}, 'snippet': 'sorted(var0, var1=none)'}
Generated  translation
sorted ( var0, var1 = none ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'new', 'sorted', 'list', 'from', 'the', 'items', 'in', 'var0', '.', 'var1', 'specifies', 'a', 'function', 'of', 'one', 'argument', 'that', 'is', 'used', 'to', 'extract', 'a', 'comparison', 'key', 'from', 'each', 'element', 'in', 'iterable', '(', 'for', 'example', ',', 'key', '=', 'str', '.', 'lower', ')', '.'], 'words': ['return', 'a', 'new', 'sorted', 'list', 'from', 'the', 'items', 'in', 'var0', '.', 'var1', 'specifies', 'a', 'function', 'of', 'one', 'argument', 'that', 'is', 'used', 'to', 'extract', 'a', 'comparison', 'key', 'from', 'each', 'element', 'in', 'iterable', '(', 'for', 'example', ',', 'key', '=', 'str', '.', 'lower', ')', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '', '', ' ', ' ', '']}, 'slot_map': {'var0': 'iterable', 'var1': 'key'}, 'snippet': 'sorted(var0, var1=none)'}
Generated  translation
sorted ( var0, var1 = none ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'new', 'sorted', 'list', 'from', 'the', 'items', 'in', 'var0', '.', 'var1', 'specifies', 'a', 'function', 'of', 'one', 'argument', 'that', 'is', 'used', 'to', 'extract', 'a', 'comparison', 'key', 'from', 'each', 'element', 'in', 'iterable', '(', 'for', 'example', ',', 'key', '=', 'str', '.', 'lower', ')', '.'], 'words': ['return', 'a', 'new', 'sorted', 'list', 'from', 'the', 'items', 'in', 'var0', '.', 'var1', 'specifies', 'a', 'function', 'of', 'one', 'argument', 'that', 'is', 'used', 'to', 'extract', 'a', 'comparison', 'key', 'from', 'each', 'element', 'in', 'iterable', '(', 'for', 'example', ',', 'key', '=', 'str', '.', 'lower', ')', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '', '', ' ', ' ', '']}, 'slot_map': {'var0': 'iterable', 'var1': 'key'}, 'snippet': 'sorted(var0, var1=none)'}
Generated  translation
sorted ( var0, var1 = none ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'new', 'sorted', 'list', 'from', 'the', 'items', 'in', 'var0', '.', 'var1', 'specifies', 'a', 'function', 'of', 'one', 'argument', 'that', 'is', 'used', 'to', 'extract', 'a', 'comparison', 'key', 'from', 'each', 'element', 'in', 'iterable', '(', 'for', 'example', ',', 'key', '=', 'str', '.', 'lower', ')', '.'], 'words': ['return', 'a', 'new', 'sorted', 'list', 'from', 'the', 'items', 'in', 'var0', '.', 'var1', 'specifies', 'a', 'function', 'of', 'one', 'argument', 'that', 'is', 'used', 'to', 'extract', 'a', 'comparison', 'key', 'from', 'each', 'element', 'in', 'iterable', '(', 'for', 'example', ',', 'key', '=', 'str', '.', 'lower', ')', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '', '', ' ', ' ', '']}, 'slot_map': {'var0': 'iterable', 'var1': 'key'}, 'snippet': 'sorted(var0, var1=none)'}
Generated  translation
sorted ( var0, var1 = none ) 
--------- B -----------
{'intent': {'gloss': ['if', 'var0', 'is', 'specified', ',', 'sets', 'the', 'focus', 'item', 'to', 'item', '.'], 'words': ['if', 'var0', 'is', 'specified', ',', 'sets', 'the', 'focus', 'item', 'to', 'item', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'item'}, 'snippet': 'widget.focus(var0=none)'}
Generated  translation
widget. focus ( ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'new', 'sorted', 'list', 'from', 'the', 'items', 'in', 'var0', '.', 'var1', 'specifies', 'a', 'function', 'of', 'one', 'argument', 'that', 'is', 'used', 'to', 'extract', 'a', 'comparison', 'key', 'from', 'each', 'element', 'in', 'iterable', '(', 'for', 'example', ',', 'key', '=', 'str', '.', 'lower', ')', '.'], 'words': ['return', 'a', 'new', 'sorted', 'list', 'from', 'the', 'items', 'in', 'var0', '.', 'var1', 'specifies', 'a', 'function', 'of', 'one', 'argument', 'that', 'is', 'used', 'to', 'extract', 'a', 'comparison', 'key', 'from', 'each', 'element', 'in', 'iterable', '(', 'for', 'example', ',', 'key', '=', 'str', '.', 'lower', ')', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '', '', ' ', ' ', '']}, 'slot_map': {'var0': 'iterable', 'var1': 'key'}, 'snippet': 'sorted(var0, var1=none)'}
Generated  translation
sorted ( var0, var1 = none ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'new', 'sorted', 'list', 'from', 'the', 'items', 'in', 'var0', '.', 'var1', 'specifies', 'a', 'function', 'of', 'one', 'argument', 'that', 'is', 'used', 'to', 'extract', 'a', 'comparison', 'key', 'from', 'each', 'element', 'in', 'iterable', '(', 'for', 'example', ',', 'key', '=', 'str', '.', 'lower', ')', '.'], 'words': ['return', 'a', 'new', 'sorted', 'list', 'from', 'the', 'items', 'in', 'var0', '.', 'var1', 'specifies', 'a', 'function', 'of', 'one', 'argument', 'that', 'is', 'used', 'to', 'extract', 'a', 'comparison', 'key', 'from', 'each', 'element', 'in', 'iterable', '(', 'for', 'example', ',', 'key', '=', 'str', '.', 'lower', ')', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '', '', ' ', ' ', '']}, 'slot_map': {'var0': 'iterable', 'var1': 'key'}, 'snippet': 'sorted(var0, var1=none)'}
Generated  translation
sorted ( var0, var1 = none ) 
--------- B -----------
{'intent': {'gloss': ['if', 'var0', 'is', 'specified', ',', 'sets', 'the', 'focus', 'item', 'to', 'item', '.'], 'words': ['if', 'var0', 'is', 'specified', ',', 'sets', 'the', 'focus', 'item', 'to', 'item', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'item'}, 'snippet': 'widget.focus(var0=none)'}
Generated  translation
widget. focus ( ) 
--------- B -----------
{'intent': {'gloss': ['show', 'my', 'acls', 'for', 'a', 'var0', '(', 'i', '.', 'e', '.'], 'words': ['show', 'my', 'acls', 'for', 'a', 'var0', '(', 'i', '.', 'e', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', '']}, 'slot_map': {'var0': 'mailbox'}, 'snippet': 'imap4.myrights(var0)'}
Generated  translation
imap4. myrights ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['print', 'objects', 'to', 'the', 'text', 'stream', 'var0', ',', 'separated', 'by', 'var1', 'and', 'followed', 'by', 'var2', '.', 'with', 'arguments', 'str0', '.'], 'words': ['print', 'objects', 'to', 'the', 'text', 'stream', 'var0', ',', 'separated', 'by', 'var1', 'and', 'followed', 'by', 'var2', '.', 'with', 'arguments', 'str0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'var0': 'file', 'var1': 'sep', 'var2': 'end', 'str0': '*objects'}, 'snippet': "print(*objects, var1=' ')"}
Generated  translation
print ( * objects ) 
--------- B -----------
{'intent': {'gloss': ['print', 'objects', 'to', 'the', 'text', 'stream', 'var0', ',', 'separated', 'by', 'var1', 'and', 'followed', 'by', 'var2', '.', 'with', 'arguments', 'str0', '.'], 'words': ['print', 'objects', 'to', 'the', 'text', 'stream', 'var0', ',', 'separated', 'by', 'var1', 'and', 'followed', 'by', 'var2', '.', 'with', 'arguments', 'str0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'var0': 'file', 'var1': 'sep', 'var2': 'end', 'str0': '*objects'}, 'snippet': "print(*objects, var1=' ')"}
Generated  translation
print ( * objects ) 
--------- B -----------
{'intent': {'gloss': ['a', 'wrapper', 'around', 'python', '’', 's', 'assert', 'which', 'is', 'symbolically', 'traceable', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'torch'], 'words': ['a', 'wrapper', 'around', 'python', '’', 's', 'assert', 'which', 'is', 'symbolically', 'traceable', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'torch'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', '']}, 'slot_map': {'var0': 'condition', 'var1': 'message'}, 'snippet': 'torch._assert(var0, var1)'}
Generated  translation
torch. _ assert ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['shuffle', 'the', 'sequence', 'var0', 'in', 'place', '.', 'the', 'optional', 'argument', 'var1', 'is', 'a', '0', '-', 'argument', 'function', 'returning', 'a', 'random', 'float', 'in', '[', '0', '.', '0', ',', '1', '.', '0', ')', ';', 'by', 'default', ',', 'this', 'is', 'the', 'function', 'random', '(', ')', '.'], 'words': ['shuffle', 'the', 'sequence', 'var0', 'in', 'place', '.', 'the', 'optional', 'argument', 'var1', 'is', 'a', '0', '-', 'argument', 'function', 'returning', 'a', 'random', 'float', 'in', '[', '0', '.', '0', ',', '1', '.', '0', ')', ';', 'by', 'default', ',', 'this', 'is', 'the', 'function', 'random', '(', ')', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x', 'var1': 'random'}, 'snippet': 'var1.shuffle(var0, var1)'}
Generated  translation
var1. shuffle ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['shuffle', 'the', 'sequence', 'var0', 'in', 'place', '.', 'the', 'optional', 'argument', 'var1', 'is', 'a', '0', '-', 'argument', 'function', 'returning', 'a', 'random', 'float', 'in', '[', '0', '.', '0', ',', '1', '.', '0', ')', ';', 'by', 'default', ',', 'this', 'is', 'the', 'function', 'random', '(', ')', '.'], 'words': ['shuffle', 'the', 'sequence', 'var0', 'in', 'place', '.', 'the', 'optional', 'argument', 'var1', 'is', 'a', '0', '-', 'argument', 'function', 'returning', 'a', 'random', 'float', 'in', '[', '0', '.', '0', ',', '1', '.', '0', ')', ';', 'by', 'default', ',', 'this', 'is', 'the', 'function', 'random', '(', ')', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x', 'var1': 'random'}, 'snippet': 'var1.shuffle(var0, var1)'}
Generated  translation
var1. shuffle ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['print', 'objects', 'to', 'the', 'text', 'stream', 'var0', ',', 'separated', 'by', 'var1', 'and', 'followed', 'by', 'var2', '.', 'with', 'arguments', 'str0', '.'], 'words': ['print', 'objects', 'to', 'the', 'text', 'stream', 'var0', ',', 'separated', 'by', 'var1', 'and', 'followed', 'by', 'var2', '.', 'with', 'arguments', 'str0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'var0': 'file', 'var1': 'sep', 'var2': 'end', 'str0': '*objects'}, 'snippet': "print(*objects, var1=' ')"}
Generated  translation
print ( * objects ) 
--------- B -----------
{'intent': {'gloss': ['for', 'a', 'datetime', 'instance', 'd', ',', 'str', '(', 'd', ')', 'is', 'equivalent', 'to', 'd', '.', 'isoformat', '(', 'str0', ')', '.'], 'words': ['for', 'a', 'datetime', 'instance', 'd', ',', 'str', '(', 'd', ')', 'is', 'equivalent', 'to', 'd', '.', 'isoformat', '(', 'str0', ')', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': ''}, 'snippet': 'datetime.__str__()'}
Generated  translation
datetime. _ _ str _ _ ( ) 
--------- B -----------
{'intent': {'gloss': ['for', 'a', 'datetime', 'instance', 'd', ',', 'str', '(', 'd', ')', 'is', 'equivalent', 'to', 'd', '.', 'isoformat', '(', 'str0', ')', '.'], 'words': ['for', 'a', 'datetime', 'instance', 'd', ',', 'str', '(', 'd', ')', 'is', 'equivalent', 'to', 'd', '.', 'isoformat', '(', 'str0', ')', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': ''}, 'snippet': 'datetime.__str__()'}
Generated  translation
datetime. _ _ str _ _ ( ) 
--------- B -----------
{'intent': {'gloss': ['shuffle', 'the', 'sequence', 'var0', 'in', 'place', '.', 'the', 'optional', 'argument', 'var1', 'is', 'a', '0', '-', 'argument', 'function', 'returning', 'a', 'random', 'float', 'in', '[', '0', '.', '0', ',', '1', '.', '0', ')', ';', 'by', 'default', ',', 'this', 'is', 'the', 'function', 'random', '(', ')', '.'], 'words': ['shuffle', 'the', 'sequence', 'var0', 'in', 'place', '.', 'the', 'optional', 'argument', 'var1', 'is', 'a', '0', '-', 'argument', 'function', 'returning', 'a', 'random', 'float', 'in', '[', '0', '.', '0', ',', '1', '.', '0', ')', ';', 'by', 'default', ',', 'this', 'is', 'the', 'function', 'random', '(', ')', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x', 'var1': 'random'}, 'snippet': 'var1.shuffle(var0, var1)'}
Generated  translation
var1. shuffle ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['shuffle', 'the', 'sequence', 'var0', 'in', 'place', '.', 'the', 'optional', 'argument', 'var1', 'is', 'a', '0', '-', 'argument', 'function', 'returning', 'a', 'random', 'float', 'in', '[', '0', '.', '0', ',', '1', '.', '0', ')', ';', 'by', 'default', ',', 'this', 'is', 'the', 'function', 'random', '(', ')', '.'], 'words': ['shuffle', 'the', 'sequence', 'var0', 'in', 'place', '.', 'the', 'optional', 'argument', 'var1', 'is', 'a', '0', '-', 'argument', 'function', 'returning', 'a', 'random', 'float', 'in', '[', '0', '.', '0', ',', '1', '.', '0', ')', ';', 'by', 'default', ',', 'this', 'is', 'the', 'function', 'random', '(', ')', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x', 'var1': 'random'}, 'snippet': 'var1.shuffle(var0, var1)'}
Generated  translation
var1. shuffle ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['print', 'objects', 'to', 'the', 'text', 'stream', 'var0', ',', 'separated', 'by', 'var1', 'and', 'followed', 'by', 'var2', '.', 'with', 'arguments', 'str0', '.'], 'words': ['print', 'objects', 'to', 'the', 'text', 'stream', 'var0', ',', 'separated', 'by', 'var1', 'and', 'followed', 'by', 'var2', '.', 'with', 'arguments', 'str0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'var0': 'file', 'var1': 'sep', 'var2': 'end', 'str0': '*objects'}, 'snippet': "print(*objects, var1=' ')"}
Generated  translation
print ( * objects ) 
--------- B -----------
{'intent': {'gloss': ['show', 'my', 'acls', 'for', 'a', 'var0', '(', 'i', '.', 'e', '.'], 'words': ['show', 'my', 'acls', 'for', 'a', 'var0', '(', 'i', '.', 'e', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', '']}, 'slot_map': {'var0': 'mailbox'}, 'snippet': 'imap4.myrights(var0)'}
Generated  translation
imap4. myrights ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['print', 'objects', 'to', 'the', 'text', 'stream', 'var0', ',', 'separated', 'by', 'var1', 'and', 'followed', 'by', 'var2', '.', 'with', 'arguments', 'str0', '.'], 'words': ['print', 'objects', 'to', 'the', 'text', 'stream', 'var0', ',', 'separated', 'by', 'var1', 'and', 'followed', 'by', 'var2', '.', 'with', 'arguments', 'str0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'var0': 'file', 'var1': 'sep', 'var2': 'end', 'str0': '*objects'}, 'snippet': "print(*objects, var1=' ')"}
Generated  translation
print ( * objects ) 
--------- B -----------
{'intent': {'gloss': ['for', 'a', 'datetime', 'instance', 'd', ',', 'str', '(', 'd', ')', 'is', 'equivalent', 'to', 'd', '.', 'isoformat', '(', 'str0', ')', '.'], 'words': ['for', 'a', 'datetime', 'instance', 'd', ',', 'str', '(', 'd', ')', 'is', 'equivalent', 'to', 'd', '.', 'isoformat', '(', 'str0', ')', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': ''}, 'snippet': 'datetime.__str__()'}
Generated  translation
datetime. _ _ str _ _ ( ) 
--------- B -----------
{'intent': {'gloss': ['for', 'a', 'datetime', 'instance', 'd', ',', 'str', '(', 'd', ')', 'is', 'equivalent', 'to', 'd', '.', 'isoformat', '(', 'str0', ')', '.'], 'words': ['for', 'a', 'datetime', 'instance', 'd', ',', 'str', '(', 'd', ')', 'is', 'equivalent', 'to', 'd', '.', 'isoformat', '(', 'str0', ')', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': ''}, 'snippet': 'datetime.__str__()'}
Generated  translation
datetime. _ _ str _ _ ( ) 
--------- B -----------
{'intent': {'gloss': ['print', 'objects', 'to', 'the', 'text', 'stream', 'var0', ',', 'separated', 'by', 'var1', 'and', 'followed', 'by', 'var2', '.', 'with', 'arguments', 'str0', '.'], 'words': ['print', 'objects', 'to', 'the', 'text', 'stream', 'var0', ',', 'separated', 'by', 'var1', 'and', 'followed', 'by', 'var2', '.', 'with', 'arguments', 'str0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'var0': 'file', 'var1': 'sep', 'var2': 'end', 'str0': '*objects'}, 'snippet': "print(*objects, var1=' ')"}
Generated  translation
print ( * objects ) 
--------- B -----------
{'intent': {'gloss': ['show', 'my', 'acls', 'for', 'a', 'var0', '(', 'i', '.', 'e', '.'], 'words': ['show', 'my', 'acls', 'for', 'a', 'var0', '(', 'i', '.', 'e', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', '']}, 'slot_map': {'var0': 'mailbox'}, 'snippet': 'imap4.myrights(var0)'}
Generated  translation
imap4. myrights ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['for', 'a', 'datetime', 'instance', 'd', ',', 'str', '(', 'd', ')', 'is', 'equivalent', 'to', 'd', '.', 'isoformat', '(', 'str0', ')', '.'], 'words': ['for', 'a', 'datetime', 'instance', 'd', ',', 'str', '(', 'd', ')', 'is', 'equivalent', 'to', 'd', '.', 'isoformat', '(', 'str0', ')', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': ''}, 'snippet': 'datetime.__str__()'}
Generated  translation
datetime. _ _ str _ _ ( ) 
--------- B -----------
{'intent': {'gloss': ['shuffle', 'the', 'sequence', 'var0', 'in', 'place', '.', 'the', 'optional', 'argument', 'var1', 'is', 'a', '0', '-', 'argument', 'function', 'returning', 'a', 'random', 'float', 'in', '[', '0', '.', '0', ',', '1', '.', '0', ')', ';', 'by', 'default', ',', 'this', 'is', 'the', 'function', 'random', '(', ')', '.'], 'words': ['shuffle', 'the', 'sequence', 'var0', 'in', 'place', '.', 'the', 'optional', 'argument', 'var1', 'is', 'a', '0', '-', 'argument', 'function', 'returning', 'a', 'random', 'float', 'in', '[', '0', '.', '0', ',', '1', '.', '0', ')', ';', 'by', 'default', ',', 'this', 'is', 'the', 'function', 'random', '(', ')', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x', 'var1': 'random'}, 'snippet': 'var1.shuffle(var0, var1)'}
Generated  translation
var1. shuffle ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['shuffle', 'the', 'sequence', 'var0', 'in', 'place', '.', 'the', 'optional', 'argument', 'var1', 'is', 'a', '0', '-', 'argument', 'function', 'returning', 'a', 'random', 'float', 'in', '[', '0', '.', '0', ',', '1', '.', '0', ')', ';', 'by', 'default', ',', 'this', 'is', 'the', 'function', 'random', '(', ')', '.'], 'words': ['shuffle', 'the', 'sequence', 'var0', 'in', 'place', '.', 'the', 'optional', 'argument', 'var1', 'is', 'a', '0', '-', 'argument', 'function', 'returning', 'a', 'random', 'float', 'in', '[', '0', '.', '0', ',', '1', '.', '0', ')', ';', 'by', 'default', ',', 'this', 'is', 'the', 'function', 'random', '(', ')', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x', 'var1': 'random'}, 'snippet': 'var1.shuffle(var0, var1)'}
Generated  translation
var1. shuffle ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['print', 'objects', 'to', 'the', 'text', 'stream', 'var0', ',', 'separated', 'by', 'var1', 'and', 'followed', 'by', 'var2', '.', 'with', 'arguments', 'str0', '.'], 'words': ['print', 'objects', 'to', 'the', 'text', 'stream', 'var0', ',', 'separated', 'by', 'var1', 'and', 'followed', 'by', 'var2', '.', 'with', 'arguments', 'str0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'var0': 'file', 'var1': 'sep', 'var2': 'end', 'str0': '*objects'}, 'snippet': "print(*objects, var1=' ')"}
Generated  translation
print ( * objects ) 
--------- B -----------
{'intent': {'gloss': ['print', 'objects', 'to', 'the', 'text', 'stream', 'var0', ',', 'separated', 'by', 'var1', 'and', 'followed', 'by', 'var2', '.', 'with', 'arguments', 'str0', '.'], 'words': ['print', 'objects', 'to', 'the', 'text', 'stream', 'var0', ',', 'separated', 'by', 'var1', 'and', 'followed', 'by', 'var2', '.', 'with', 'arguments', 'str0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'var0': 'file', 'var1': 'sep', 'var2': 'end', 'str0': '*objects'}, 'snippet': "print(*objects, var1=' ')"}
Generated  translation
print ( * objects ) 
--------- B -----------
{'intent': {'gloss': ['split', 'strings', 'around', 'given', 'separator', '/', 'delimiter', '.', 'the', 'var0', 'parameter', 'can', 'be', 'used', 'to', 'split', 'by', 'other', 'characters', '.', 'pandas', 'pandas'], 'words': ['split', 'strings', 'around', 'given', 'separator', '/', 'delimiter', '.', 'the', 'var0', 'parameter', 'can', 'be', 'used', 'to', 'split', 'by', 'other', 'characters', '.', 'pandas', 'pandas'], 'after': [' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'pat'}, 'snippet': 'series.str.split(var0=none)'}
Generated  translation
series. str. split ( var0 = none ) 
--------- B -----------
{'intent': {'gloss': ['equivalent', 'to', 'as', '_', 'string', '(', 'policy', '=', 'self', '.', 'policy', '.', 'clone', '(', 'utf8', '=', 'true', ')', ')', '.'], 'words': ['equivalent', 'to', 'as', '_', 'string', '(', 'policy', '=', 'self', '.', 'policy', '.', 'clone', '(', 'utf8', '=', 'true', ')', ')', '.'], 'after': [' ', ' ', '', '', ' ', ' ', '', '', '', '', '', '', ' ', ' ', '', '', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'email_message.__str__()'}
Generated  translation
email _ message. _ _ str _ _ ( ) 
--------- B -----------
{'intent': {'gloss': ['split', 'strings', 'around', 'given', 'separator', '/', 'delimiter', '.', 'the', 'var0', 'parameter', 'can', 'be', 'used', 'to', 'split', 'by', 'other', 'characters', '.', 'pandas', 'pandas'], 'words': ['split', 'strings', 'around', 'given', 'separator', '/', 'delimiter', '.', 'the', 'var0', 'parameter', 'can', 'be', 'used', 'to', 'split', 'by', 'other', 'characters', '.', 'pandas', 'pandas'], 'after': [' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'pat'}, 'snippet': 'series.str.split(var0=none)'}
Generated  translation
series. str. split ( var0 = none ) 
--------- B -----------
{'intent': {'gloss': ['extract', 'a', 'diagonal', 'or', 'construct', 'a', 'diagonal', 'array', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'numpy'], 'words': ['extract', 'a', 'diagonal', 'or', 'construct', 'a', 'diagonal', 'array', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', '']}, 'slot_map': {'var0': 'v', 'var1': 'k'}, 'snippet': 'ma.diag(var0, var1=0)'}
Generated  translation
numpy. diag ( var0, var1 = 0 ) 
--------- B -----------
{'intent': {'gloss': ['extract', 'a', 'diagonal', 'or', 'construct', 'a', 'diagonal', 'array', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'numpy'], 'words': ['extract', 'a', 'diagonal', 'or', 'construct', 'a', 'diagonal', 'array', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', '']}, 'slot_map': {'var0': 'v', 'var1': 'k'}, 'snippet': 'ma.diag(var0, var1=0)'}
Generated  translation
numpy. diag ( var0, var1 = 0 ) 
--------- B -----------
{'intent': {'gloss': ['“', 'byteswap', '”', 'all', 'samples', 'in', 'a', 'var0', 'and', 'returns', 'the', 'modified', 'fragment', '.', 'with', 'arguments', 'var1', '.'], 'words': ['“', 'byteswap', '”', 'all', 'samples', 'in', 'a', 'var0', 'and', 'returns', 'the', 'modified', 'fragment', '.', 'with', 'arguments', 'var1', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'var0': 'fragment', 'var1': 'width'}, 'snippet': 'audioop.byteswap(var0, var1)'}
Generated  translation
audioop. byteswap ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['extract', 'a', 'diagonal', 'or', 'construct', 'a', 'diagonal', 'array', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'numpy'], 'words': ['extract', 'a', 'diagonal', 'or', 'construct', 'a', 'diagonal', 'array', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', '']}, 'slot_map': {'var0': 'v', 'var1': 'k'}, 'snippet': 'ma.diag(var0, var1=0)'}
Generated  translation
numpy. diag ( var0, var1 = 0 ) 
--------- B -----------
{'intent': {'gloss': ['applies', 'the', 'sigmoid', 'linear', 'unit', '(', 'silu', ')', 'function', ',', 'element', '-', 'wise', '.', 'with', 'arguments', 'var0', '.', 'torch'], 'words': ['applies', 'the', 'sigmoid', 'linear', 'unit', '(', 'silu', ')', 'function', ',', 'element', '-', 'wise', '.', 'with', 'arguments', 'var0', '.', 'torch'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', '', ' ', '']}, 'slot_map': {'var0': 'input'}, 'snippet': 'torch.nn.functional.silu(var0)'}
Generated  translation
torch. nn. functional. silu ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['extract', 'a', 'diagonal', 'or', 'construct', 'a', 'diagonal', 'array', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'numpy'], 'words': ['extract', 'a', 'diagonal', 'or', 'construct', 'a', 'diagonal', 'array', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', '']}, 'slot_map': {'var0': 'v', 'var1': 'k'}, 'snippet': 'ma.diag(var0, var1=0)'}
Generated  translation
numpy. diag ( var0, var1 = 0 ) 
--------- B -----------
{'intent': {'gloss': ['extract', 'a', 'diagonal', 'or', 'construct', 'a', 'diagonal', 'array', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'numpy'], 'words': ['extract', 'a', 'diagonal', 'or', 'construct', 'a', 'diagonal', 'array', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', '']}, 'slot_map': {'var0': 'v', 'var1': 'k'}, 'snippet': 'ma.diag(var0, var1=0)'}
Generated  translation
numpy. diag ( var0, var1 = 0 ) 
--------- B -----------
{'intent': {'gloss': ['extract', 'a', 'diagonal', 'or', 'construct', 'a', 'diagonal', 'array', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'numpy'], 'words': ['extract', 'a', 'diagonal', 'or', 'construct', 'a', 'diagonal', 'array', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', '']}, 'slot_map': {'var0': 'v', 'var1': 'k'}, 'snippet': 'ma.diag(var0, var1=0)'}
Generated  translation
numpy. diag ( var0, var1 = 0 ) 
--------- B -----------
{'intent': {'gloss': ['reduces', 'var0', '’', 's', 'dimension', 'by', 'one', ',', 'by', 'applying', 'ufunc', 'along', 'one', 'var1', '.', 'numpy'], 'words': ['reduces', 'var0', '’', 's', 'dimension', 'by', 'one', ',', 'by', 'applying', 'ufunc', 'along', 'one', 'var1', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'array', 'var1': 'axis'}, 'snippet': 'ufunc.reduce(var0, var1=0)'}
Generated  translation
ufunc. reduce ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['reduces', 'var0', '’', 's', 'dimension', 'by', 'one', ',', 'by', 'applying', 'ufunc', 'along', 'one', 'var1', '.', 'numpy'], 'words': ['reduces', 'var0', '’', 's', 'dimension', 'by', 'one', ',', 'by', 'applying', 'ufunc', 'along', 'one', 'var1', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'array', 'var1': 'axis'}, 'snippet': 'ufunc.reduce(var0, var1=0)'}
Generated  translation
ufunc. reduce ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['reduces', 'var0', '’', 's', 'dimension', 'by', 'one', ',', 'by', 'applying', 'ufunc', 'along', 'one', 'var1', '.', 'numpy'], 'words': ['reduces', 'var0', '’', 's', 'dimension', 'by', 'one', ',', 'by', 'applying', 'ufunc', 'along', 'one', 'var1', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'array', 'var1': 'axis'}, 'snippet': 'ufunc.reduce(var0, var1=0)'}
Generated  translation
ufunc. reduce ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['reduces', 'var0', '’', 's', 'dimension', 'by', 'one', ',', 'by', 'applying', 'ufunc', 'along', 'one', 'var1', '.', 'numpy'], 'words': ['reduces', 'var0', '’', 's', 'dimension', 'by', 'one', ',', 'by', 'applying', 'ufunc', 'along', 'one', 'var1', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'array', 'var1': 'axis'}, 'snippet': 'ufunc.reduce(var0, var1=0)'}
Generated  translation
ufunc. reduce ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['reduces', 'var0', '’', 's', 'dimension', 'by', 'one', ',', 'by', 'applying', 'ufunc', 'along', 'one', 'var1', '.', 'numpy'], 'words': ['reduces', 'var0', '’', 's', 'dimension', 'by', 'one', ',', 'by', 'applying', 'ufunc', 'along', 'one', 'var1', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'array', 'var1': 'axis'}, 'snippet': 'ufunc.reduce(var0, var1=0)'}
Generated  translation
ufunc. reduce ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['extract', 'a', 'diagonal', 'or', 'construct', 'a', 'diagonal', 'array', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'numpy'], 'words': ['extract', 'a', 'diagonal', 'or', 'construct', 'a', 'diagonal', 'array', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', '']}, 'slot_map': {'var0': 'v', 'var1': 'k'}, 'snippet': 'numpy.diag(var0, var1=0)'}
Generated  translation
numpy. diag ( var0, var1 = 0 ) 
--------- B -----------
{'intent': {'gloss': ['extract', 'a', 'diagonal', 'or', 'construct', 'a', 'diagonal', 'array', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'numpy'], 'words': ['extract', 'a', 'diagonal', 'or', 'construct', 'a', 'diagonal', 'array', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', '']}, 'slot_map': {'var0': 'v', 'var1': 'k'}, 'snippet': 'numpy.diag(var0, var1=0)'}
Generated  translation
numpy. diag ( var0, var1 = 0 ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'new', 'sorted', 'list', 'from', 'the', 'items', 'in', 'var0', '.', 'var1', 'specifies', 'a', 'function', 'of', 'one', 'argument', 'that', 'is', 'used', 'to', 'extract', 'a', 'comparison', 'key', 'from', 'each', 'element', 'in', 'iterable', '(', 'for', 'example', ',', 'key', '=', 'str', '.', 'lower', ')', '.', 'var2', 'is', 'a', 'boolean', 'value', '.'], 'words': ['return', 'a', 'new', 'sorted', 'list', 'from', 'the', 'items', 'in', 'var0', '.', 'var1', 'specifies', 'a', 'function', 'of', 'one', 'argument', 'that', 'is', 'used', 'to', 'extract', 'a', 'comparison', 'key', 'from', 'each', 'element', 'in', 'iterable', '(', 'for', 'example', ',', 'key', '=', 'str', '.', 'lower', ')', '.', 'var2', 'is', 'a', 'boolean', 'value', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'iterable', 'var1': 'key', 'var2': 'reverse'}, 'snippet': 'sorted(var0, var1=none, var2=false)'}
Generated  translation
sorted ( var0, var1 = none, var2 = false ) 
--------- B -----------
{'intent': {'gloss': ['var0', '=', 'iconcat', '(', 'a', ',', 'var1', ')', 'is', 'equivalent', 'to', 'a', '+', '=', 'b', 'for', 'a', 'and', 'b', 'sequences', '.'], 'words': ['var0', '=', 'iconcat', '(', 'a', ',', 'var1', ')', 'is', 'equivalent', 'to', 'a', '+', '=', 'b', 'for', 'a', 'and', 'b', 'sequences', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'b'}, 'snippet': 'operator.__iconcat__(var0, var1)'}
Generated  translation
operator. _ _ iconcat _ _ ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['extract', 'a', 'diagonal', 'or', 'construct', 'a', 'diagonal', 'array', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'numpy'], 'words': ['extract', 'a', 'diagonal', 'or', 'construct', 'a', 'diagonal', 'array', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', '']}, 'slot_map': {'var0': 'v', 'var1': 'k'}, 'snippet': 'numpy.diag(var0, var1=0)'}
Generated  translation
numpy. diag ( var0, var1 = 0 ) 
--------- B -----------
{'intent': {'gloss': ['extract', 'a', 'diagonal', 'or', 'construct', 'a', 'diagonal', 'array', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'numpy'], 'words': ['extract', 'a', 'diagonal', 'or', 'construct', 'a', 'diagonal', 'array', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', '']}, 'slot_map': {'var0': 'v', 'var1': 'k'}, 'snippet': 'numpy.diag(var0, var1=0)'}
Generated  translation
numpy. diag ( var0, var1 = 0 ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', 'new', 'sorted', 'list', 'from', 'the', 'items', 'in', 'var0', '.', 'var1', 'specifies', 'a', 'function', 'of', 'one', 'argument', 'that', 'is', 'used', 'to', 'extract', 'a', 'comparison', 'key', 'from', 'each', 'element', 'in', 'iterable', '(', 'for', 'example', ',', 'key', '=', 'str', '.', 'lower', ')', '.', 'var2', 'is', 'a', 'boolean', 'value', '.'], 'words': ['return', 'a', 'new', 'sorted', 'list', 'from', 'the', 'items', 'in', 'var0', '.', 'var1', 'specifies', 'a', 'function', 'of', 'one', 'argument', 'that', 'is', 'used', 'to', 'extract', 'a', 'comparison', 'key', 'from', 'each', 'element', 'in', 'iterable', '(', 'for', 'example', ',', 'key', '=', 'str', '.', 'lower', ')', '.', 'var2', 'is', 'a', 'boolean', 'value', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'iterable', 'var1': 'key', 'var2': 'reverse'}, 'snippet': 'sorted(var0, var1=none, var2=false)'}
Generated  translation
sorted ( var0, var1 = none, var2 = false ) 
--------- B -----------
{'intent': {'gloss': ['extract', 'a', 'diagonal', 'or', 'construct', 'a', 'diagonal', 'array', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'numpy'], 'words': ['extract', 'a', 'diagonal', 'or', 'construct', 'a', 'diagonal', 'array', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', '']}, 'slot_map': {'var0': 'v', 'var1': 'k'}, 'snippet': 'numpy.diag(var0, var1=0)'}
Generated  translation
numpy. diag ( var0, var1 = 0 ) 
--------- B -----------
{'intent': {'gloss': ['extract', 'a', 'diagonal', 'or', 'construct', 'a', 'diagonal', 'array', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'numpy'], 'words': ['extract', 'a', 'diagonal', 'or', 'construct', 'a', 'diagonal', 'array', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', '']}, 'slot_map': {'var0': 'v', 'var1': 'k'}, 'snippet': 'numpy.diag(var0, var1=0)'}
Generated  translation
numpy. diag ( var0, var1 = 0 ) 
--------- B -----------
{'intent': {'gloss': ['strip', 'the', 'var0', 'of', 'a', 'python', 'process', 'from', 'potential', 'debug', 'output', 'emitted', 'by', 'the', 'interpreter', '.'], 'words': ['strip', 'the', 'var0', 'of', 'a', 'python', 'process', 'from', 'potential', 'debug', 'output', 'emitted', 'by', 'the', 'interpreter', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'stderr'}, 'snippet': 'test.support.strip_python_strerr(var0)'}
Generated  translation
test. support. strip _ python _ strerr ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['strip', 'the', 'var0', 'of', 'a', 'python', 'process', 'from', 'potential', 'debug', 'output', 'emitted', 'by', 'the', 'interpreter', '.'], 'words': ['strip', 'the', 'var0', 'of', 'a', 'python', 'process', 'from', 'potential', 'debug', 'output', 'emitted', 'by', 'the', 'interpreter', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'stderr'}, 'snippet': 'test.support.strip_python_strerr(var0)'}
Generated  translation
test. support. strip _ python _ strerr ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'samples', 'between', '1', '-', ',', '2', '-', ',', '3', '-', 'and', '4', '-', 'byte', 'formats', '.', 'with', 'arguments', 'var0', ',', 'var1', ',', 'var2', '.'], 'words': ['convert', 'samples', 'between', '1', '-', ',', '2', '-', ',', '3', '-', 'and', '4', '-', 'byte', 'formats', '.', 'with', 'arguments', 'var0', ',', 'var1', ',', 'var2', '.'], 'after': [' ', ' ', ' ', '', ' ', ' ', '', ' ', ' ', '', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', '', '']}, 'slot_map': {'var0': 'fragment', 'var1': 'width', 'var2': 'newwidth'}, 'snippet': 'audioop.lin2lin(var0, var1, var2)'}
Generated  translation
audioop. lin2lin ( var0, var1, var2 ) 
--------- B -----------
{'intent': {'gloss': ['make', 'a', 'multiindex', 'from', 'a', 'dataframe', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'pandas', 'pandas'], 'words': ['make', 'a', 'multiindex', 'from', 'a', 'dataframe', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'pandas', 'pandas'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'var1': 'sortorder'}, 'snippet': 'multiindex.from_frame(var0, var1=none)'}
Generated  translation
multiindex. from _ frame ( var0, var1 = none ) 
--------- B -----------
{'intent': {'gloss': ['make', 'a', 'multiindex', 'from', 'a', 'dataframe', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'pandas', 'pandas'], 'words': ['make', 'a', 'multiindex', 'from', 'a', 'dataframe', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'pandas', 'pandas'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'var1': 'sortorder'}, 'snippet': 'multiindex.from_frame(var0, var1=none)'}
Generated  translation
multiindex. from _ frame ( var0, var1 = none ) 
--------- B -----------
{'intent': {'gloss': ['make', 'a', 'multiindex', 'from', 'a', 'dataframe', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'pandas', 'pandas'], 'words': ['make', 'a', 'multiindex', 'from', 'a', 'dataframe', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'pandas', 'pandas'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'var1': 'sortorder'}, 'snippet': 'multiindex.from_frame(var0, var1=none)'}
Generated  translation
multiindex. from _ frame ( var0, var1 = none ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'samples', 'between', '1', '-', ',', '2', '-', ',', '3', '-', 'and', '4', '-', 'byte', 'formats', '.', 'with', 'arguments', 'var0', ',', 'var1', ',', 'var2', '.'], 'words': ['convert', 'samples', 'between', '1', '-', ',', '2', '-', ',', '3', '-', 'and', '4', '-', 'byte', 'formats', '.', 'with', 'arguments', 'var0', ',', 'var1', ',', 'var2', '.'], 'after': [' ', ' ', ' ', '', ' ', ' ', '', ' ', ' ', '', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', '', '']}, 'slot_map': {'var0': 'fragment', 'var1': 'width', 'var2': 'newwidth'}, 'snippet': 'audioop.lin2lin(var0, var1, var2)'}
Generated  translation
audioop. lin2lin ( var0, var1, var2 ) 
--------- B -----------
{'intent': {'gloss': ['make', 'a', 'multiindex', 'from', 'a', 'dataframe', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'pandas', 'pandas'], 'words': ['make', 'a', 'multiindex', 'from', 'a', 'dataframe', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'pandas', 'pandas'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'var1': 'sortorder'}, 'snippet': 'multiindex.from_frame(var0, var1=none)'}
Generated  translation
multiindex. from _ frame ( var0, var1 = none ) 
--------- B -----------
{'intent': {'gloss': ['make', 'a', 'multiindex', 'from', 'a', 'dataframe', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'pandas', 'pandas'], 'words': ['make', 'a', 'multiindex', 'from', 'a', 'dataframe', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'pandas', 'pandas'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'var1': 'sortorder'}, 'snippet': 'multiindex.from_frame(var0, var1=none)'}
Generated  translation
multiindex. from _ frame ( var0, var1 = none ) 
--------- B -----------
{'intent': {'gloss': ['make', 'a', 'multiindex', 'from', 'a', 'dataframe', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'pandas', 'pandas'], 'words': ['make', 'a', 'multiindex', 'from', 'a', 'dataframe', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'pandas', 'pandas'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'var1': 'sortorder'}, 'snippet': 'multiindex.from_frame(var0, var1=none)'}
Generated  translation
multiindex. from _ frame ( var0, var1 = none ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'samples', 'between', '1', '-', ',', '2', '-', ',', '3', '-', 'and', '4', '-', 'byte', 'formats', '.', 'with', 'arguments', 'var0', ',', 'var1', ',', 'var2', '.'], 'words': ['convert', 'samples', 'between', '1', '-', ',', '2', '-', ',', '3', '-', 'and', '4', '-', 'byte', 'formats', '.', 'with', 'arguments', 'var0', ',', 'var1', ',', 'var2', '.'], 'after': [' ', ' ', ' ', '', ' ', ' ', '', ' ', ' ', '', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', '', '']}, 'slot_map': {'var0': 'fragment', 'var1': 'width', 'var2': 'newwidth'}, 'snippet': 'audioop.lin2lin(var0, var1, var2)'}
Generated  translation
audioop. lin2lin ( var0, var1, var2 ) 
--------- B -----------
{'intent': {'gloss': ['make', 'a', 'multiindex', 'from', 'a', 'dataframe', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'pandas', 'pandas'], 'words': ['make', 'a', 'multiindex', 'from', 'a', 'dataframe', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'pandas', 'pandas'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'var1': 'sortorder'}, 'snippet': 'multiindex.from_frame(var0, var1=none)'}
Generated  translation
multiindex. from _ frame ( var0, var1 = none ) 
--------- B -----------
{'intent': {'gloss': ['make', 'a', 'multiindex', 'from', 'a', 'dataframe', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'pandas', 'pandas'], 'words': ['make', 'a', 'multiindex', 'from', 'a', 'dataframe', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'pandas', 'pandas'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'var1': 'sortorder'}, 'snippet': 'multiindex.from_frame(var0, var1=none)'}
Generated  translation
multiindex. from _ frame ( var0, var1 = none ) 
--------- B -----------
{'intent': {'gloss': ['x', '.', '_', '_', 'getitem', '_', '_', '(', 'y', ')', '<', '=', '=', '>', 'x', '[', 'y', ']', 'with', 'arguments', 'var0', '.', 'numpy'], 'words': ['x', '.', '_', '_', 'getitem', '_', '_', '(', 'y', ')', '<', '=', '=', '>', 'x', '[', 'y', ']', 'with', 'arguments', 'var0', '.', 'numpy'], 'after': ['', '', '', '', '', '', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '']}, 'slot_map': {'var0': 'indx'}, 'snippet': 'ma.maskedarray.__getitem__(var0)'}
Generated  translation
ma. maskedarray. _ _ getitem _ _ ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['applies', 'element', '-', 'wise', ',', 'elu', '(', 'x', ')', '=', 'max\u2061', '(', '0', ',', 'x', ')', '+', 'min\u2061', '(', '0', ',', 'α∗', '(', 'exp\u2061', '(', 'x', ')', '−1', ')', ')', '\\', 'text', '{', 'elu', '}', '(', 'x', ')', '=', '\\', 'max', '(', '0', ',', 'x', ')', '+', '\\', 'min', '(', '0', ',', '\\', 'alpha', '*', '(', '\\', 'exp', '(', 'x', ')', '-', '1', ')', ')', 'elu', '(', 'x', ')', '=', 'max', '(', '0', ',', 'x', ')', '+', 'min', '(', '0', ',', 'α∗', '(', 'exp', '(', 'x', ')', '−1', ')', ')', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'torch'], 'words': ['applies', 'element', '-', 'wise', ',', 'elu', '(', 'x', ')', '=', 'max\u2061', '(', '0', ',', 'x', ')', '+', 'min\u2061', '(', '0', ',', 'α∗', '(', 'exp\u2061', '(', 'x', ')', '−1', ')', ')', '\\', 'text', '{', 'elu', '}', '(', 'x', ')', '=', '\\', 'max', '(', '0', ',', 'x', ')', '+', '\\', 'min', '(', '0', ',', '\\', 'alpha', '*', '(', '\\', 'exp', '(', 'x', ')', '-', '1', ')', ')', 'elu', '(', 'x', ')', '=', 'max', '(', '0', ',', 'x', ')', '+', 'min', '(', '0', ',', 'α∗', '(', 'exp', '(', 'x', ')', '−1', ')', ')', '.', 'with', 'arguments', 'var0', ',', 'var1', '.', 'torch'], 'after': [' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', '']}, 'slot_map': {'var0': 'input', 'var1': 'inplace'}, 'snippet': 'torch.nn.functional.elu(var0, var1=false)'}
Generated  translation
torch. nn. functional. elu ( ) 
--------- B -----------
{'intent': {'gloss': ['draw', 'samples', 'from', 'a', 'standard', 'student', '’', 's', 't', 'distribution', 'with', 'var0', 'degrees', 'of', 'freedom', '.', 'with', 'arguments', 'var1', '.', 'numpy'], 'words': ['draw', 'samples', 'from', 'a', 'standard', 'student', '’', 's', 't', 'distribution', 'with', 'var0', 'degrees', 'of', 'freedom', '.', 'with', 'arguments', 'var1', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '']}, 'slot_map': {'var0': 'df', 'var1': 'size'}, 'snippet': 'random.randomstate.standard_t(var0, var1=none)'}
Generated  translation
random. randomstate. standard _ t ( var0, var1 = none ) 
--------- B -----------
{'intent': {'gloss': ['draw', 'samples', 'from', 'a', 'standard', 'student', '’', 's', 't', 'distribution', 'with', 'var0', 'degrees', 'of', 'freedom', '.', 'with', 'arguments', 'var1', '.', 'numpy'], 'words': ['draw', 'samples', 'from', 'a', 'standard', 'student', '’', 's', 't', 'distribution', 'with', 'var0', 'degrees', 'of', 'freedom', '.', 'with', 'arguments', 'var1', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '']}, 'slot_map': {'var0': 'df', 'var1': 'size'}, 'snippet': 'random.randomstate.standard_t(var0, var1=none)'}
Generated  translation
random. randomstate. standard _ t ( var0, var1 = none ) 
--------- B -----------
{'intent': {'gloss': ['draw', 'samples', 'from', 'a', 'standard', 'student', '’', 's', 't', 'distribution', 'with', 'var0', 'degrees', 'of', 'freedom', '.', 'with', 'arguments', 'var1', '.', 'numpy'], 'words': ['draw', 'samples', 'from', 'a', 'standard', 'student', '’', 's', 't', 'distribution', 'with', 'var0', 'degrees', 'of', 'freedom', '.', 'with', 'arguments', 'var1', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '']}, 'slot_map': {'var0': 'df', 'var1': 'size'}, 'snippet': 'random.randomstate.standard_t(var0, var1=none)'}
Generated  translation
random. randomstate. standard _ t ( var0, var1 = none ) 
--------- B -----------
{'intent': {'gloss': ['draw', 'samples', 'from', 'a', 'standard', 'student', '’', 's', 't', 'distribution', 'with', 'var0', 'degrees', 'of', 'freedom', '.', 'with', 'arguments', 'var1', '.', 'numpy'], 'words': ['draw', 'samples', 'from', 'a', 'standard', 'student', '’', 's', 't', 'distribution', 'with', 'var0', 'degrees', 'of', 'freedom', '.', 'with', 'arguments', 'var1', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '']}, 'slot_map': {'var0': 'df', 'var1': 'size'}, 'snippet': 'random.randomstate.standard_t(var0, var1=none)'}
Generated  translation
random. randomstate. standard _ t ( var0, var1 = none ) 
--------- B -----------
{'intent': {'gloss': ['draw', 'samples', 'from', 'a', 'standard', 'student', '’', 's', 't', 'distribution', 'with', 'var0', 'degrees', 'of', 'freedom', '.', 'with', 'arguments', 'var1', '.', 'numpy'], 'words': ['draw', 'samples', 'from', 'a', 'standard', 'student', '’', 's', 't', 'distribution', 'with', 'var0', 'degrees', 'of', 'freedom', '.', 'with', 'arguments', 'var1', '.', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '']}, 'slot_map': {'var0': 'df', 'var1': 'size'}, 'snippet': 'random.randomstate.standard_t(var0, var1=none)'}
Generated  translation
random. randomstate. standard _ t ( var0, var1 = none ) 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'timer', 'instance', 'with', 'the', 'given', 'statement', ',', 'var0', 'code', 'and', 'var1', 'function', 'and', 'run', 'its', 'timeit', '(', ')', 'method', 'with', 'var2', 'executions', '.', 'with', 'arguments', 'var3', '.'], 'words': ['create', 'a', 'timer', 'instance', 'with', 'the', 'given', 'statement', ',', 'var0', 'code', 'and', 'var1', 'function', 'and', 'run', 'its', 'timeit', '(', ')', 'method', 'with', 'var2', 'executions', '.', 'with', 'arguments', 'var3', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'var0': 'setup', 'var1': 'timer', 'var2': 'number', 'var3': 'stmt'}, 'snippet': "timeit.timeit(var3='pass', var0='pass')"}
Generated  translation
timeit. timeit ( var3 ='pass ', var0 ='pass') 
dev beam accuracy 0.845
dev beam oracle accuracy 0.995
dev beam bleu score 0.9020401288550101
dev beam exececution accuracy 0.0
--------- B -----------
{'intent': {'gloss': ['function', 'to', 'convert', 'strings', 'into', 'integers'], 'words': ['function', 'to', 'convert', 'strings', 'into', 'integers'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'int()'}
Generated  translation
map ( int, var ) 
--------- B -----------
{'intent': {'gloss': ['count', 'the', 'occurrences', 'of', 'items', 'in', 'list', 'var0'], 'words': ['count', 'the', 'occurrences', 'of', 'items', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': 'counter(var0)'}
Generated  translation
sum ( isinstance ( x, int ) for x in var0 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'tuple', 'var0', 'to', 'list'], 'words': ['convert', 'tuple', 'var0', 'to', 'list'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 't'}, 'snippet': 'list(var0)'}
Generated  translation
[ ( i, int ( j ) ) for i in var0 ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'list', 'var0', 'to', 'tuple'], 'words': ['convert', 'list', 'var0', 'to', 'tuple'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 't'}, 'snippet': 'tuple(l)'}
Generated  translation
map ( int, var0 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'sorted', 'list', 'of', 'keys', 'of', 'dict', 'var0'], 'words': ['get', 'sorted', 'list', 'of', 'keys', 'of', 'dict', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'd'}, 'snippet': 'sorted(var0)'}
Generated  translation
sorted ( var0, key = lambda k : d [ k ] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'length', 'of', 'list', 'var0'], 'words': ['get', 'the', 'length', 'of', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'my_list'}, 'snippet': 'len(var0)'}
Generated  translation
len ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['getting', 'the', 'length', 'of', 'array', 'var0'], 'words': ['getting', 'the', 'length', 'of', 'array', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': 'len(var0)'}
Generated  translation
len ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['getting', 'the', 'length', 'of', 'array', 'var0'], 'words': ['getting', 'the', 'length', 'of', 'array', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': 'len(var0)'}
Generated  translation
len ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['getting', 'the', 'length', 'of', 'var0'], 'words': ['getting', 'the', 'length', 'of', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'my_tuple'}, 'snippet': 'len(var0)'}
Generated  translation
len ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['getting', 'the', 'length', 'of', 'var0'], 'words': ['getting', 'the', 'length', 'of', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'my_string'}, 'snippet': 'len(var0)'}
Generated  translation
len ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'type', 'of', 'var0'], 'words': ['get', 'the', 'type', 'of', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'i'}, 'snippet': 'type(var0)'}
Generated  translation
type ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['determine', 'the', 'type', 'of', 'variable', 'var0'], 'words': ['determine', 'the', 'type', 'of', 'variable', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'v'}, 'snippet': 'type(var0)'}
Generated  translation
isinstance ( var0, str ) 
--------- B -----------
{'intent': {'gloss': ['determine', 'the', 'type', 'of', 'variable', 'var0'], 'words': ['determine', 'the', 'type', 'of', 'variable', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'v'}, 'snippet': 'type(var0)'}
Generated  translation
isinstance ( var0, str ) 
--------- B -----------
{'intent': {'gloss': ['determine', 'the', 'type', 'of', 'variable', 'var0'], 'words': ['determine', 'the', 'type', 'of', 'variable', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'v'}, 'snippet': 'type(var0)'}
Generated  translation
isinstance ( var0, str ) 
--------- B -----------
{'intent': {'gloss': ['determine', 'the', 'type', 'of', 'variable', 'var0'], 'words': ['determine', 'the', 'type', 'of', 'variable', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'v'}, 'snippet': 'type(var0)'}
Generated  translation
isinstance ( var0, str ) 
--------- B -----------
{'intent': {'gloss': ['put', 'the', 'curser', 'at', 'beginning', 'of', 'the', 'file'], 'words': ['put', 'the', 'curser', 'at', 'beginning', 'of', 'the', 'file'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'file.seek(0)'}
Generated  translation
ctypes. windll. file ('\ n ', 1 ) 
--------- B -----------
{'intent': {'gloss': ['make', 'a', 'delay', 'of', '1', 'second'], 'words': ['make', 'a', 'delay', 'of', '1', 'second'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'time.sleep(1)'}
Generated  translation
time. sleep ( 1 ) 
--------- B -----------
{'intent': {'gloss': ['declare', 'an', 'array'], 'words': ['declare', 'an', 'array'], 'after': [' ', ' ', '']}, 'slot_map': {}, 'snippet': 'my_list = []'}
Generated  translation
[ ] 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'by', 'space'], 'words': ['split', 'string', 'var0', 'by', 'space'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'text'}, 'snippet': 'var0.split()'}
Generated  translation
re. split ('\ \ [ (. * ) \ \ ] ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'into', 'a', 'list', 'by', 'whitespace'], 'words': ['split', 'string', 'var0', 'into', 'a', 'list', 'by', 'whitespace'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'line'}, 'snippet': 'var0.split()'}
Generated  translation
[ item. strip ( ) for item in var0. split ( ',') ] 
--------- B -----------
{'intent': {'gloss': ['add', 'a', 'header', 'to', 'a', 'csv', 'file'], 'words': ['add', 'a', 'header', 'to', 'a', 'csv', 'file'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'writer.writeheader()'}
Generated  translation
open ('a ','r'). close ( ) 
--------- B -----------
{'intent': {'gloss': ['calculate', 'sum', 'over', 'all', 'rows', 'of', '2d', 'numpy', 'array'], 'words': ['calculate', 'sum', 'over', 'all', 'rows', 'of', '2d', 'numpy', 'array'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'a.sum(axis=1)'}
Generated  translation
sum ( np. where ( np. arange ( len ( var0 ) ), axis = 1 ) ) 
--------- B -----------
{'intent': {'gloss': ['append', 'elements', 'of', 'a', 'set', 'var0', 'to', 'a', 'list', 'var1'], 'words': ['append', 'elements', 'of', 'a', 'set', 'var0', 'to', 'a', 'list', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'b', 'var1': 'a'}, 'snippet': 'var1.extend(var0)'}
Generated  translation
[ x for x in var0 if x in var1 ] 
--------- B -----------
{'intent': {'gloss': ['removing', 'duplicates', 'in', 'list', 'var0'], 'words': ['removing', 'duplicates', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 't'}, 'snippet': 'list(set(var0))'}
Generated  translation
mynewlist = list ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['removing', 'duplicates', 'in', 'list', 'var0'], 'words': ['removing', 'duplicates', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'source_list'}, 'snippet': 'list(set(var0))'}
Generated  translation
mynewlist = list ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['how', 'to', 'sort', 'dictionaries', 'by', 'keys', 'in', 'python'], 'words': ['how', 'to', 'sort', 'dictionaries', 'by', 'keys', 'in', 'python'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'sorted(d.items())'}
Generated  translation
sorted ( list ( data. items ( ) ), key = lambda t : d [ 1 ] [ 0 ] ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'string', 'str0', 'into', 'integer'], 'words': ['convert', 'string', 'str0', 'into', 'integer'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '1'}, 'snippet': "int('str0')"}
Generated  translation
int ('str0 ', 2 ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'object', 'var0', 'is', 'a', 'string'], 'words': ['check', 'if', 'object', 'var0', 'is', 'a', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'o'}, 'snippet': 'type(var0) is str'}
Generated  translation
isinstance ( var0, str ) 
--------- B -----------
{'intent': {'gloss': ['append', 'list', 'var0', 'to', 'var1'], 'words': ['append', 'list', 'var0', 'to', 'var1'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list1', 'var1': 'list2'}, 'snippet': 'var1.extend(var0)'}
Generated  translation
var1. append ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['append', 'list', 'var0', 'to', 'var1'], 'words': ['append', 'list', 'var0', 'to', 'var1'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylog', 'var1': 'list1'}, 'snippet': 'var1.extend(var0)'}
Generated  translation
var1. append ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['append', 'list', 'var0', 'to', 'var1'], 'words': ['append', 'list', 'var0', 'to', 'var1'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'c'}, 'snippet': 'var1.extend(var0)'}
Generated  translation
var1. append ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['insert', 'item', 'str0', 'to', 'a', 'list', 'var0'], 'words': ['insert', 'item', 'str0', 'to', 'a', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '12', 'var0': 'my_list'}, 'snippet': 'var0.append(12)'}
Generated  translation
var0. insert ( 0,'str0') 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'type', 'of', 'variable', 'var0'], 'words': ['get', 'the', 'type', 'of', 'variable', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'variable_name'}, 'snippet': 'print(type(var0))'}
Generated  translation
getattr ( var0,'var0 ) 
--------- B -----------
{'intent': {'gloss': ['download', 'a', 'file', 'var0', 'over', 'http'], 'words': ['download', 'a', 'file', 'var0', 'over', 'http'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'url'}, 'snippet': 'r = requests.get(var0)'}
Generated  translation
with open ( var0 ) as f : return var0 = f. write ('http : / / www. google. com') 
--------- B -----------
{'intent': {'gloss': ['read', 'keyboard', '-', 'input'], 'words': ['read', 'keyboard', '-', 'input'], 'after': [' ', '', '', '']}, 'slot_map': {}, 'snippet': "input('enter your input:')"}
Generated  translation
read int ( input ('window - input'). split ( ',') ) 
--------- B -----------
{'intent': {'gloss': ['append', 'elements', 'of', 'a', 'set', 'to', 'a', 'list', 'in', 'python'], 'words': ['append', 'elements', 'of', 'a', 'set', 'to', 'a', 'list', 'in', 'python'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'a.extend(list(b))'}
Generated  translation
['hello'for x in set ( ['a ','b'] ) ] 
--------- B -----------
{'intent': {'gloss': ['change', 'working', 'directory', 'to', 'the', 'directory', 'var0'], 'words': ['change', 'working', 'directory', 'to', 'the', 'directory', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'owd'}, 'snippet': 'os.chdir(var0)'}
Generated  translation
os. chdir ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'dictionary', 'var0', 'in', 'ascending', 'order', 'based', 'on', 'its', 'keys', 'and', 'items'], 'words': ['sort', 'dictionary', 'var0', 'in', 'ascending', 'order', 'based', 'on', 'its', 'keys', 'and', 'items'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'o'}, 'snippet': 'sorted(var0.items())'}
Generated  translation
sorted ( list ( var0. items ( ) ), key = lambda k _ v : k. lower ( ) ) 
--------- B -----------
{'intent': {'gloss': ['unzip', 'the', 'list', 'str0'], 'words': ['unzip', 'the', 'list', 'str0'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {'str0': "[('a', 1), ('b', 2), ('c', 3), ('d', 4)]", '[ str0 ]': "[('a', 1), ('b', 2), ('c', 3), ('d', 4)]"}, 'snippet': 'zip(*[ str0 ])'}
Generated  translation
[ str0 ] 
--------- B -----------
{'intent': {'gloss': ['unzip', 'the', 'list', 'str0'], 'words': ['unzip', 'the', 'list', 'str0'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {'str0': "[('a', 1), ('b', 2), ('c', 3), ('d', 4)]", '[ str0 ]': "[('a', 1), ('b', 2), ('c', 3), ('d', 4)]"}, 'snippet': 'zip(*[ str0 ])'}
Generated  translation
[ str0 ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'list', 'str0', 'into', 'a', 'dictionary'], 'words': ['convert', 'list', 'str0', 'into', 'a', 'dictionary'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "[('name', 'joe'), ('age', 22)]", '[ str0 ]': "[('name', 'joe'), ('age', 22)]"}, 'snippet': 'dict([ str0 ])'}
Generated  translation
dict ( map ( lambda s : s. split (':'), [ str0 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['plot', 'dataframe', 'var0', 'without', 'a', 'legend'], 'words': ['plot', 'dataframe', 'var0', 'without', 'a', 'legend'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': 'var0.plot(legend=false)'}
Generated  translation
var0. plot ( x ='fft ', y ='r') 
--------- B -----------
{'intent': {'gloss': ['decode', 'json', 'string', 'str0', 'to', 'python', 'dict'], 'words': ['decode', 'json', 'string', 'str0', 'to', 'python', 'dict'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'request.body'}, 'snippet': 'json.loads(request.body)'}
Generated  translation
json. load ( open ('str0') ) 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'datetime', 'with', 'the', 'current', 'date', '&', 'time'], 'words': ['create', 'a', 'datetime', 'with', 'the', 'current', 'date', '&', 'time'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'datetime.datetime.now()'}
Generated  translation
datetime. datetime. now ( ). date ( ) 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'multi', '-', 'line', 'string', 'var0', 'into', 'separate', 'strings'], 'words': ['split', 'a', 'multi', '-', 'line', 'string', 'var0', 'into', 'separate', 'strings'], 'after': [' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'inputstring'}, 'snippet': "var0.split('\\n')"}
Generated  translation
re. findall ('\ \ w + ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'string', 'var0', 'by', 'space', 'with', 'str0', 'splits'], 'words': ['split', 'a', 'string', 'var0', 'by', 'space', 'with', 'str0', 'splits'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's', 'str0': '4'}, 'snippet': "var0.split(' ', 4)"}
Generated  translation
re. split ('\ \ [. *? \ \ ] ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'key', 'str0', 'from', 'dictionary', 'var0'], 'words': ['remove', 'key', 'str0', 'from', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'ele', 'var0': 'd'}, 'snippet': "del var0['str0']"}
Generated  translation
var0. pop ('str0 ', none ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'tuple', 'var0', 'to', 'list'], 'words': ['convert', 'tuple', 'var0', 'to', 'list'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'level1'}, 'snippet': 'var0 = map(list, var0)'}
Generated  translation
[ ( i, int ( j ) ) for i in var0 ] 
--------- B -----------
{'intent': {'gloss': ['get', 'attribute', 'var0', 'of', 'object', 'var1'], 'words': ['get', 'attribute', 'var0', 'of', 'object', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'my_str', 'var1': 'my_object'}, 'snippet': 'getattr(var1, var0)'}
Generated  translation
getattr ( var1, var0 ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'object', 'var0', 'is', 'a', 'string'], 'words': ['check', 'if', 'object', 'var0', 'is', 'a', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'obj'}, 'snippet': 'isinstance(var0, str)'}
Generated  translation
isinstance ( var0, str ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'object', 'var0', 'is', 'a', 'string'], 'words': ['check', 'if', 'object', 'var0', 'is', 'a', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'o'}, 'snippet': 'isinstance(var0, str)'}
Generated  translation
isinstance ( var0, str ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'object', 'var0', 'is', 'a', 'string'], 'words': ['check', 'if', 'object', 'var0', 'is', 'a', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'o'}, 'snippet': 'isinstance(var0, str)'}
Generated  translation
isinstance ( var0, str ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'var0', 'is', 'a', 'string'], 'words': ['check', 'if', 'var0', 'is', 'a', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'obj_to_test'}, 'snippet': 'isinstance(var0, str)'}
Generated  translation
isinstance ( var0, str ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'path', 'var0', 'is', 'an', 'absolute', 'path'], 'words': ['check', 'if', 'path', 'var0', 'is', 'an', 'absolute', 'path'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'my_path'}, 'snippet': 'os.path.isabs(var0)'}
Generated  translation
os. path. isfile ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['reload', 'a', 'module', 'var0'], 'words': ['reload', 'a', 'module', 'var0'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {'var0': 'module'}, 'snippet': 'import imp\nimp.reload(var0)'}
Generated  translation
exec ( compile ( var0 ). read ( ) ) 
--------- B -----------
{'intent': {'gloss': ['enable', 'debug', 'mode', 'on', 'flask', 'application', 'var0'], 'words': ['enable', 'debug', 'mode', 'on', 'flask', 'application', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'app'}, 'snippet': 'var0.run(debug=true)'}
Generated  translation
var0. debug ('debug') 
--------- B -----------
{'intent': {'gloss': ['how', 'do', 'i', 'get', 'the', 'url', 'parameter', 'in', 'a', 'flask', 'view'], 'words': ['how', 'do', 'i', 'get', 'the', 'url', 'parameter', 'in', 'a', 'flask', 'view'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "request.args['myparam']"}
Generated  translation
od = requests. get ('http : / / www. config') 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'characters', 'count', 'in', 'a', 'file', 'var0'], 'words': ['get', 'the', 'characters', 'count', 'in', 'a', 'file', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'filepath'}, 'snippet': 'os.stat(var0).st_size'}
Generated  translation
with open ( var0 ) as f : f = readline ( ) lines = count ('\ n') while buf : lines + = count ('\ n 
--------- B -----------
{'intent': {'gloss': ['count', 'the', 'occurrences', 'of', 'item', 'str0', 'in', 'list', 'var0'], 'words': ['count', 'the', 'occurrences', 'of', 'item', 'str0', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'a', 'var0': 'l'}, 'snippet': "var0.count('str0')"}
Generated  translation
sum ( item ['str0'] for word in var0 ) 
--------- B -----------
{'intent': {'gloss': ['count', 'the', 'occurrences', 'of', 'item', 'str0', 'in', 'list', 'var0'], 'words': ['count', 'the', 'occurrences', 'of', 'item', 'str0', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'b', 'var0': 'l'}, 'snippet': "var0.count('str0')"}
Generated  translation
sum ( item ['str0'] for word in var0 ) 
--------- B -----------
{'intent': {'gloss': ['copy', 'file', 'var0', 'to', 'directory', 'var1'], 'words': ['copy', 'file', 'var0', 'to', 'directory', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'srcfile', 'var1': 'dstdir'}, 'snippet': 'shutil.copy(var0, var1)'}
Generated  translation
shutil. copy2 ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['how', 'to', 'get', 'a', 'single', 'result', 'from', 'a', 'sqlite', 'query', 'in', 'python', '?'], 'words': ['how', 'to', 'get', 'a', 'single', 'result', 'from', 'a', 'sqlite', 'query', 'in', 'python', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'cursor.fetchone()[0]'}
Generated  translation
some _ result = models. popen ( ['a ','b'] ) 
--------- B -----------
{'intent': {'gloss': ['calculate', 'mean', 'across', 'dimension', 'in', 'a', '2d', 'array', 'var0'], 'words': ['calculate', 'mean', 'across', 'dimension', 'in', 'a', '2d', 'array', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'np.mean(var0, axis=1)'}
Generated  translation
np. sqrt ( ( var0. sum ( axis = 1 ) ). mean ( ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'position', 'of', 'item', 'var0', 'in', 'list', 'var1'], 'words': ['get', 'the', 'position', 'of', 'item', 'var0', 'in', 'list', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'element', 'var1': 'testlist'}, 'snippet': 'print(var1.index(var0))'}
Generated  translation
print ( var1. get ( var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['add', 'key', 'str0', 'to', 'dictionary', 'var0', 'with', 'value', '1'], 'words': ['add', 'key', 'str0', 'to', 'dictionary', 'var0', 'with', 'value', '1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'a', 'var0': 'data'}, 'snippet': 'var0.update(str0=1)'}
Generated  translation
var0 ['str0'] = 1 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'value', 'of', 'datetime', '.', 'today', '(', ')', 'in', 'the', 'utc', 'time', 'zone'], 'words': ['get', 'a', 'value', 'of', 'datetime', '.', 'today', '(', ')', 'in', 'the', 'utc', 'time', 'zone'], 'after': [' ', ' ', ' ', ' ', '', '', '', '', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'datetime.now(pytz.utc)'}
Generated  translation
time. today ( ) + datetime. timedelta ( days = 1 ) 
--------- B -----------
{'intent': {'gloss': ['round', 'off', 'the', 'float', 'that', 'is', 'the', 'product', 'of', 'str0', 'and', 'convert', 'it', 'to', 'an', 'int'], 'words': ['round', 'off', 'the', 'float', 'that', 'is', 'the', 'product', 'of', 'str0', 'and', 'convert', 'it', 'to', 'an', 'int'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '2.52 * 100'}, 'snippet': 'int(round(2.51 * 100))'}
Generated  translation
print ( round ( float ( var0. _ _ dict _ _ ) ) ) 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'by', 'str0'], 'words': ['split', 'string', 'var0', 'by', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'text', 'str0': ','}, 'snippet': "var0.split('str0')"}
Generated  translation
var0. split ('str0') 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'urllib', 'unquoted', 'string', 'var0', 'to', 'a', 'json', 'data', 'var1'], 'words': ['convert', 'a', 'urllib', 'unquoted', 'string', 'var0', 'to', 'a', 'json', 'data', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'unescaped', 'var1': 'json_data'}, 'snippet': 'var1 = json.loads(var0)'}
Generated  translation
var1 = json. dumps ( var0, ensure _ ascii = false ) 
--------- B -----------
{'intent': {'gloss': ['open', 'file', 'var0', 'with', 'mode', 'str0'], 'words': ['open', 'file', 'var0', 'with', 'mode', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'path', 'str0': 'r'}, 'snippet': "open(var0, 'str0')"}
Generated  translation
os. open ( var0,'str0') 
--------- B -----------
{'intent': {'gloss': ['enable', 'warnings', 'using', 'action', 'str0'], 'words': ['enable', 'warnings', 'using', 'action', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'always'}, 'snippet': "warnings.simplefilter('str0')"}
Generated  translation
sys. path. insert ( 0,'str0') 
--------- B -----------
{'intent': {'gloss': ['create', 'new', 'matrix', 'object', 'by', 'concatenating', 'data', 'from', 'matrix', 'a', 'and', 'matrix', 'b'], 'words': ['create', 'new', 'matrix', 'object', 'by', 'concatenating', 'data', 'from', 'matrix', 'a', 'and', 'matrix', 'b'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'np.concatenate((a, b))'}
Generated  translation
numpy. concate matrix ( [ 1, 2, 3 ], axis = 0 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'raw', 'string', 'var0', 'into', 'a', 'normal', 'string'], 'words': ['convert', 'a', 'raw', 'string', 'var0', 'into', 'a', 'normal', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'raw_string'}, 'snippet': "var0.decode('string_escape')"}
Generated  translation
var0 = str ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'raw', 'string', 'var0', 'into', 'a', 'normal', 'string'], 'words': ['convert', 'a', 'raw', 'string', 'var0', 'into', 'a', 'normal', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'raw_byte_string'}, 'snippet': "var0.decode('unicode_escape')"}
Generated  translation
var0 = str ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['cast', 'an', 'int', 'var0', 'to', 'a', 'string', 'and', 'concat', 'to', 'string', 'str0'], 'words': ['cast', 'an', 'int', 'var0', 'to', 'a', 'string', 'and', 'concat', 'to', 'string', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'i', 'str0': 'me'}, 'snippet': "'str0' + str(var0)"}
Generated  translation
" " " str0 " " ". join ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['length', 'of', 'longest', 'element', 'in', 'list', 'var0'], 'words': ['length', 'of', 'longest', 'element', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'words'}, 'snippet': 'len(max(var0, key=len))'}
Generated  translation
length = len ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'value', 'associated', 'with', 'unicode', 'key', 'str0', 'of', 'first', 'dictionary', 'in', 'list', 'var0'], 'words': ['get', 'the', 'value', 'associated', 'with', 'unicode', 'key', 'str0', 'of', 'first', 'dictionary', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'from_user', 'var0': 'result'}, 'snippet': "var0[0]['str0']"}
Generated  translation
[ x ['str0'] for x in var0 ] 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'list', 'from', 'a', 'list', 'var0', 'with', 'values', 'mapped', 'into', 'a', 'dictionary', 'var1'], 'words': ['get', 'a', 'list', 'from', 'a', 'list', 'var0', 'with', 'values', 'mapped', 'into', 'a', 'dictionary', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'lst', 'var1': 'dct'}, 'snippet': '[var1[k] for k in var0]'}
Generated  translation
[ key for item in var0 for key, value in list ( var1. items ( ) ) ] 
--------- B -----------
{'intent': {'gloss': ['get', 'number', 'of', 'keys', 'in', 'dictionary', 'var0'], 'words': ['get', 'number', 'of', 'keys', 'in', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'yourdict'}, 'snippet': 'len(list(var0.keys()))'}
Generated  translation
sum ( len ( x ) for x in list ( var0. items ( ) ) ) 
--------- B -----------
{'intent': {'gloss': ['reverse', 'a', 'priority', 'queue', 'var0', 'in', 'python', 'without', 'using', 'classes'], 'words': ['reverse', 'a', 'priority', 'queue', 'var0', 'in', 'python', 'without', 'using', 'classes'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'q'}, 'snippet': 'var0.put((-n, n))'}
Generated  translation
var0. set _ index ('var0') 
--------- B -----------
{'intent': {'gloss': ['remove', 'directory', 'tree', 'str0'], 'words': ['remove', 'directory', 'tree', 'str0'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {'str0': '/folder_name'}, 'snippet': "shutil.rmtree('str0')"}
Generated  translation
os. system ('str0') 
--------- B -----------
{'intent': {'gloss': ['numpy', 'concatenate', 'two', 'arrays', 'var0', 'and', 'var1', 'along', 'the', 'first', 'axis'], 'words': ['numpy', 'concatenate', 'two', 'arrays', 'var0', 'and', 'var1', 'along', 'the', 'first', 'axis'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'b'}, 'snippet': 'np.array((var0, var1))'}
Generated  translation
numpy. concatenate ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['select', 'the', 'last', 'column', 'of', 'dataframe', 'var0'], 'words': ['select', 'the', 'last', 'column', 'of', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': 'var0[var0.columns[-1]]'}
Generated  translation
var0. ix [ :, ( var0. tail ) ] 
--------- B -----------
{'intent': {'gloss': ['join', 'a', 'list', 'of', 'strings', 'var0', 'using', 'a', 'space', 'str0'], 'words': ['join', 'a', 'list', 'of', 'strings', 'var0', 'using', 'a', 'space', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list', 'str0': ''}, 'snippet': '""" """.join(var0)'}
Generated  translation
var0. join ( ['str0'] ) 
--------- B -----------
{'intent': {'gloss': ['drop', 'rows', 'of', 'pandas', 'dataframe', 'var0', 'having', 'nan', 'in', 'column', 'at', 'index', 'str0'], 'words': ['drop', 'rows', 'of', 'pandas', 'dataframe', 'var0', 'having', 'nan', 'in', 'column', 'at', 'index', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': '1'}, 'snippet': 'var0.dropna(subset=[1])'}
Generated  translation
var0. fillna ( method ='str0 ', inplace = true ) 
--------- B -----------
{'intent': {'gloss': ['reverse', 'the', 'list', 'that', 'contains', '1', 'to', '10'], 'words': ['reverse', 'the', 'list', 'that', 'contains', '1', 'to', '10'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'list(reversed(list(range(10))))'}
Generated  translation
[ i for i in range ( 1, 10 ) if i! = 10 ] 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'str0', 'into', 'a', 'list', 'on', 'white', 'spaces'], 'words': ['split', 'string', 'str0', 'into', 'a', 'list', 'on', 'white', 'spaces'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'qh qd jc kd js'}, 'snippet': '"""str0""".split()'}
Generated  translation
" " " str0 " " ". split ( ',') 
--------- B -----------
{'intent': {'gloss': ['erase', 'all', 'the', 'contents', 'of', 'a', 'file', 'var0'], 'words': ['erase', 'all', 'the', 'contents', 'of', 'a', 'file', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'filename'}, 'snippet': "open(var0, 'w').close()"}
Generated  translation
open ('var0 ','w'). close ( ) 
--------- B -----------
{'intent': {'gloss': ['add', 'indexes', 'in', 'a', 'data', 'frame', 'var0', 'to', 'a', 'column', 'var1'], 'words': ['add', 'indexes', 'in', 'a', 'data', 'frame', 'var0', 'to', 'a', 'column', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'var1': 'index1'}, 'snippet': "var0['var1'] = var0.index"}
Generated  translation
var0 ['var1'] = var0 ['var1']. append ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'list', 'containing', 'flattened', 'list', 'str0'], 'words': ['create', 'a', 'list', 'containing', 'flattened', 'list', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "[['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]", '[ str0 ]': "[['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]"}, 'snippet': 'values = sum([ str0 ], [])'}
Generated  translation
[ str0 ] 
--------- B -----------
{'intent': {'gloss': ['replace', 'spaces', 'with', 'underscore'], 'words': ['replace', 'spaces', 'with', 'underscore'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "mystring.replace(' ', '_')"}
Generated  translation
re. sub ('(? < = [ a - z ] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'an', 'absolute', 'file', 'path', 'of', 'file', 'str0'], 'words': ['get', 'an', 'absolute', 'file', 'path', 'of', 'file', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'mydir/myfile.txt'}, 'snippet': "os.path.abspath('str0')"}
Generated  translation
os. path. abspath ( str0 ) 
--------- B -----------
{'intent': {'gloss': ['check', 'characters', 'of', 'string', 'var0', 'are', 'true', 'predication', 'of', 'function', 'var1'], 'words': ['check', 'characters', 'of', 'string', 'var0', 'are', 'true', 'predication', 'of', 'function', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'string', 'var1': 'predicate'}, 'snippet': 'all(var1(x) for x in var0)'}
Generated  translation
' var1'in list ( var0. items ( ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'attribute', 'str0', 'from', 'object', 'var0'], 'words': ['get', 'attribute', 'str0', 'from', 'object', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'attr', 'var0': 'obj'}, 'snippet': "getattr(var0, 'str0')"}
Generated  translation
getattr ( var0,'str0') 
--------- B -----------
{'intent': {'gloss': ['create', 'var0', 'to', 'contain', 'the', 'lists', 'from', 'list', 'var1', 'excluding', 'the', 'empty', 'lists', 'from', 'var1'], 'words': ['create', 'var0', 'to', 'contain', 'the', 'lists', 'from', 'list', 'var1', 'excluding', 'the', 'empty', 'lists', 'from', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list2', 'var1': 'list1', 'var2': 'list1'}, 'snippet': 'var0 = [x for x in var2 if x]'}
Generated  translation
[ var0 for var2 in range ( len ( var1 ) ) if var0 ] 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'based', 'on', 'occurrences', 'of', 'regex', 'pattern', 'str0'], 'words': ['split', 'string', 'var0', 'based', 'on', 'occurrences', 'of', 'regex', 'pattern', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'input', 'str0': '[ ](?=[a-z]+\\b)', '[ str0 )': '[ ](?=[a-z]+\\b)'}, 'snippet': "re.split('str0', var0)"}
Generated  translation
re. split ('str0 ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['place', 'the', 'radial', 'ticks', 'in', 'plot', 'var0', 'at', '135', 'degrees'], 'words': ['place', 'the', 'radial', 'ticks', 'in', 'plot', 'var0', 'at', '135', 'degrees'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'ax'}, 'snippet': 'var0.set_rlabel_position(135)'}
Generated  translation
var0. objects. annotate ( like _ count = 200 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'html', 'source', 'of', 'selenium', 'webelement', 'var0'], 'words': ['get', 'html', 'source', 'of', 'selenium', 'webelement', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'element'}, 'snippet': "var0.get_attribute('innerhtml')"}
Generated  translation
driver. find _ element _ by _ xpath ( " / / option [ @ id ='click'] / / a [ @ class ='click'] " ) 
--------- B -----------
{'intent': {'gloss': ['add', 'an', 'entry', 'str0', 'at', 'the', 'beginning', 'of', 'list', 'var0'], 'words': ['add', 'an', 'entry', 'str0', 'at', 'the', 'beginning', 'of', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'wuggah', 'var0': 'mylist'}, 'snippet': "var0.insert(0, 'str0')"}
Generated  translation
var0 ='str0'+ var0 [ 1 : ] 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'last', 'key', 'of', 'dictionary', 'var0'], 'words': ['get', 'the', 'last', 'key', 'of', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'dict'}, 'snippet': 'list(var0.keys())[-1]'}
Generated  translation
var0 [ - 1 ] 
--------- B -----------
{'intent': {'gloss': ['write', 'line', 'str0', 'to', 'file', 'var0'], 'words': ['write', 'line', 'str0', 'to', 'file', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'hi there', 'var0': 'f'}, 'snippet': "print('str0', file=var0)"}
Generated  translation
var0. write ('str0') 
--------- B -----------
{'intent': {'gloss': ['add', 'a', 'new', 'axis', 'to', 'array', 'var0'], 'words': ['add', 'a', 'new', 'axis', 'to', 'array', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'var0[:, (np.newaxis)]'}
Generated  translation
var0 = np. concatenate ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['open', 'a', 'file', 'str0', 'in', 'append', 'mode'], 'words': ['open', 'a', 'file', 'str0', 'in', 'append', 'mode'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'output.txt'}, 'snippet': "file = open('str0', 'a')"}
Generated  translation
f = open ('str0 ','wb') 
--------- B -----------
{'intent': {'gloss': ['format', 'string', 'str0'], 'words': ['format', 'string', 'str0'], 'after': [' ', ' ', '']}, 'slot_map': {'str0': '({0.goals} goals, ${0.penalties})', '( str0 )': '({0.goals} goals, ${0.penalties})'}, 'snippet': '"""str0""".format(self)'}
Generated  translation
" " " str0 " " ". format ('str0') 
--------- B -----------
{'intent': {'gloss': ['concat', 'two', 'matrices', 'var0', 'and', 'var1', 'in', 'numpy'], 'words': ['concat', 'two', 'matrices', 'var0', 'and', 'var1', 'in', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'b'}, 'snippet': 'np.vstack((var0, var1))'}
Generated  translation
numpy. concat ( [ ( x, var1 ), ( 0, 2 ) ] ) 
--------- B -----------
{'intent': {'gloss': ['send', 'the', 'output', 'of', 'pprint', 'object', 'var0', 'to', 'file', 'var1'], 'words': ['send', 'the', 'output', 'of', 'pprint', 'object', 'var0', 'to', 'file', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'dataobject', 'var1': 'logfile'}, 'snippet': 'pprint.pprint(var0, var1)'}
Generated  translation
var1 = subprocess. check _ output ( var0, var1 = p. var0 ) 
--------- B -----------
{'intent': {'gloss': ['iterate', 'ove', 'list', 'str0', 'using', 'list', 'comprehension'], 'words': ['iterate', 'ove', 'list', 'str0', 'using', 'list', 'comprehension'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '[1, 2, 3]', '[ str0 ]': '[1, 2, 3]'}, 'snippet': 'print([item for item in [ str0 ]])'}
Generated  translation
[ dict ( x ) for x in str0. split ( ',') ] 
--------- B -----------
{'intent': {'gloss': ['get', 'filename', 'without', 'extension', 'from', 'file', 'var0'], 'words': ['get', 'filename', 'without', 'extension', 'from', 'file', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'filename'}, 'snippet': 'os.path.splitext(var0)[0]'}
Generated  translation
os. path. split ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'objects', 'var0', ',', 'based', 'on', 'a', 'function', 'var1', 'in', 'descending', 'order'], 'words': ['sort', 'a', 'list', 'of', 'objects', 'var0', ',', 'based', 'on', 'a', 'function', 'var1', 'in', 'descending', 'order'], 'after': [' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'ut', 'var1': 'cmpfun'}, 'snippet': 'var0.sort(key=var1, reverse=true)'}
Generated  translation
var0. sort ( key = lambda x : var1. index ( x ['var0'] ), reverse = true ) 
--------- B -----------
{'intent': {'gloss': ['call', 'a', 'shell', 'script', 'var0', 'using', 'subprocess'], 'words': ['call', 'a', 'shell', 'script', 'var0', 'using', 'subprocess'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'notepad'}, 'snippet': "subprocess.call(['var0'])"}
Generated  translation
subprocess. call ('test. sh otherfunc') 
--------- B -----------
{'intent': {'gloss': ['call', 'a', 'base', 'class', "'", 's', 'class', 'method', 'var0', 'from', 'derived', 'class', 'var1'], 'words': ['call', 'a', 'base', 'class', "'", 's', 'class', 'method', 'var0', 'from', 'derived', 'class', 'var1'], 'after': [' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'do', 'var1': 'derived'}, 'snippet': 'super(var1, cls).var0(a)'}
Generated  translation
super ( var0, self ). _ _ init _ _ ( * args, * * kwargs ) 
--------- B -----------
{'intent': {'gloss': ['open', 'a', 'file', 'str0', 'in', 'write', 'mode'], 'words': ['open', 'a', 'file', 'str0', 'in', 'write', 'mode'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'yourfile.txt'}, 'snippet': "f = open('str0', 'w')"}
Generated  translation
output = open ('str0 ','wb') 
--------- B -----------
{'intent': {'gloss': ['find', 'maximal', 'value', 'in', 'matrix', 'var0'], 'words': ['find', 'maximal', 'value', 'in', 'matrix', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'matrix'}, 'snippet': 'max([max(i) for i in var0])'}
Generated  translation
numpy. flatgetter ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['round', 'number', 'var0', 'to', '2', 'precision', 'after', 'the', 'decimal', 'point'], 'words': ['round', 'number', 'var0', 'to', '2', 'precision', 'after', 'the', 'decimal', 'point'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'answer'}, 'snippet': 'var0 = str(round(var0, 2))'}
Generated  translation
round ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'list', 'of', 'values', 'from', 'dictionary', 'str0', 'w', '.', 'r', '.', 't', '.', 'list', 'of', 'keys', 'str1'], 'words': ['get', 'list', 'of', 'values', 'from', 'dictionary', 'str0', 'w', '.', 'r', '.', 't', '.', 'list', 'of', 'keys', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'mydict', 'str1': 'mykeys'}, 'snippet': '[str0[x] for x in str1]'}
Generated  translation
[ value for item in str1 if x ['str0'] = ='str1'] 
--------- B -----------
{'intent': {'gloss': ['append', 'items', 'in', 'list', 'var0', 'to', 'var1'], 'words': ['append', 'items', 'in', 'list', 'var0', 'to', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylog', 'var1': 'list1'}, 'snippet': 'for line in var0:\n    var1.append(line)'}
Generated  translation
var1. append ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['truncate', 'float', '1', '.', '923328437452', 'to', '3', 'decimal', 'places'], 'words': ['truncate', 'float', '1', '.', '923328437452', 'to', '3', 'decimal', 'places'], 'after': [' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'round(1.923328437452, 3)'}
Generated  translation
' %. 2f'% 3. 923328432 
--------- B -----------
{'intent': {'gloss': ['extract', 'attributes', 'str0', 'from', 'string', 'var0'], 'words': ['extract', 'attributes', 'str0', 'from', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'src="js/([^"]*\\bjquery\\b[^"]*)"', 'var0': 'data'}, 'snippet': "re.findall('str0', var0)"}
Generated  translation
print ( ['str0 '. join ( c ) for c in var0 ] ) 
--------- B -----------
{'intent': {'gloss': ['find', 'all', 'matches', 'of', 'regex', 'pattern', 'str0', 'in', 'string', 'var0'], 'words': ['find', 'all', 'matches', 'of', 'regex', 'pattern', 'str0', 'in', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '([a-fa-f\\d]{32})', 'var0': 'data', '( str0 )': '([a-fa-f\\d]{32})'}, 'snippet': "re.findall('str0', var0)"}
Generated  translation
re. findall ('str0 ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', '401', 'unauthorized', 'in', 'django'], 'words': ['return', 'a', '401', 'unauthorized', 'in', 'django'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "return httpresponse('unauthorized', status=401)"}
Generated  translation
401 
--------- B -----------
{'intent': {'gloss': ['create', 'list', 'var0', 'containing', 'two', 'empty', 'lists'], 'words': ['create', 'list', 'var0', 'containing', 'two', 'empty', 'lists'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'y'}, 'snippet': 'var0 = [[] for n in range(2)]'}
Generated  translation
var0 = [ [ ] for i in range ( len ( var0 ) ) ] 
--------- B -----------
{'intent': {'gloss': ['converting', 'list', 'of', 'strings', 'var0', 'to', 'list', 'of', 'integer', 'var1'], 'words': ['converting', 'list', 'of', 'strings', 'var0', 'to', 'list', 'of', 'integer', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'intstringlist', 'var1': 'nums'}, 'snippet': 'var1 = [int(x) for x in var0]'}
Generated  translation
[ int ( x ) for x in var1 ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'int', 'values', 'in', 'list', 'var0', 'to', 'float'], 'words': ['convert', 'int', 'values', 'in', 'list', 'var0', 'to', 'float'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'numlist'}, 'snippet': 'var0 = [float(x) for x in var0]'}
Generated  translation
[ float ( x ) for x in var0 ] 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'list', 'containing', 'all', 'ascii', 'characters', 'as', 'its', 'elements'], 'words': ['create', 'a', 'list', 'containing', 'all', 'ascii', 'characters', 'as', 'its', 'elements'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': '[chr(i) for i in range(127)]'}
Generated  translation
list ('str0') 
--------- B -----------
{'intent': {'gloss': ['concatenate', 'a', 'list', 'of', 'strings', 'str0'], 'words': ['concatenate', 'a', 'list', 'of', 'strings', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "['a', 'b', 'c']", '[ str0 ]': "['a', 'b', 'c']"}, 'snippet': '"""""".join([ str0 ])'}
Generated  translation
" " " " " ". join ( str0 ) 
--------- B -----------
{'intent': {'gloss': ['create', '3d', 'array', 'of', 'zeroes', 'of', 'size', 'str0'], 'words': ['create', '3d', 'array', 'of', 'zeroes', 'of', 'size', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '(3,3,3)', '( str0 )': '(3,3,3)'}, 'snippet': 'numpy.zeros((3, 3, 3))'}
Generated  translation
np. einsum ('ijk, ikl - > ijl') 
--------- B -----------
{'intent': {'gloss': ['join', 'elements', 'of', 'list', 'var0', 'with', 'a', 'comma', 'str0'], 'words': ['join', 'elements', 'of', 'list', 'var0', 'with', 'a', 'comma', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l', 'str0': ','}, 'snippet': '"""str0""".join(var0)'}
Generated  translation
[ ( x, y ) for x, y in zip ( var0, var0 ) ] 
--------- B -----------
{'intent': {'gloss': ['filter', 'rows', 'in', 'pandas', 'starting', 'with', 'alphabet', 'str0', 'using', 'regular', 'expression', '.'], 'words': ['filter', 'rows', 'in', 'pandas', 'starting', 'with', 'alphabet', 'str0', 'using', 'regular', 'expression', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'f'}, 'snippet': "df.b.str.contains('^f')"}
Generated  translation
df. groupby ('str0'). filter ( lambda x : x. groupby ('str0') ) 
--------- B -----------
{'intent': {'gloss': ['initialize', 'a', 'list', 'var0', 'of', '100', 'objects', 'object', '(', ')'], 'words': ['initialize', 'a', 'list', 'var0', 'of', '100', 'objects', 'object', '(', ')'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '']}, 'slot_map': {'var0': 'lst'}, 'snippet': 'var0 = [object() for _ in range(100)]'}
Generated  translation
var0 = [ [ ] for i in range ( 100 ) ] 
--------- B -----------
{'intent': {'gloss': ['get', 'reverse', 'of', 'list', 'items', 'from', 'list', 'str0', 'using', 'extended', 'slicing'], 'words': ['get', 'reverse', 'of', 'list', 'items', 'from', 'list', 'str0', 'using', 'extended', 'slicing'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'b'}, 'snippet': '[x[::-1] for x in str0]'}
Generated  translation
[ row [ 1 : ] for item in range ( len ( str0 ) ) ] 
--------- B -----------
{'intent': {'gloss': ['removing', 'duplicates', 'in', 'list', 'var0'], 'words': ['removing', 'duplicates', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'abracadabra'}, 'snippet': "list(ordereddict.fromkeys('var0'))"}
Generated  translation
mynewlist = list ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['call', 'a', 'shell', 'script', 'str0', 'using', 'subprocess'], 'words': ['call', 'a', 'shell', 'script', 'str0', 'using', 'subprocess'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': './test.sh'}, 'snippet': "subprocess.call(['str0'])"}
Generated  translation
subprocess. call ('str0 ', shell = true ) 
--------- B -----------
{'intent': {'gloss': ['separate', 'words', 'delimited', 'by', 'one', 'or', 'more', 'spaces', 'into', 'a', 'list'], 'words': ['separate', 'words', 'delimited', 'by', 'one', 'or', 'more', 'spaces', 'into', 'a', 'list'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "re.split(' +', 'hello world sample text')"}
Generated  translation
re. findall ('\ \ w + ', string ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'list', 'into', 'a', 'generator', 'object'], 'words': ['convert', 'a', 'list', 'into', 'a', 'generator', 'object'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': '(n for n in [1, 2, 3, 5])'}
Generated  translation
return list ( range ( 1 ) ) 
--------- B -----------
{'intent': {'gloss': ['encode', 'str0', 'to', 'a', 'json', 'string'], 'words': ['encode', 'str0', 'to', 'a', 'json', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "decimal('3.9')"}, 'snippet': "json.dumps(decimal('3.9'))"}
Generated  translation
json. encode ('utf - 8') 
--------- B -----------
{'intent': {'gloss': ['add', 'key', 'str0', 'to', 'dictionary', 'var0', 'with', 'value', 'str1'], 'words': ['add', 'key', 'str0', 'to', 'dictionary', 'var0', 'with', 'value', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'mynewkey', 'var0': 'd', 'str1': 'mynewvalue'}, 'snippet': "var0['str0'] = 'str1'"}
Generated  translation
var0 ['str0'] = 3 
--------- B -----------
{'intent': {'gloss': ['add', 'key', 'str0', 'to', 'dictionary', 'var0', 'with', 'value', '1'], 'words': ['add', 'key', 'str0', 'to', 'dictionary', 'var0', 'with', 'value', '1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'a', 'var0': 'data'}, 'snippet': "var0.update({'str0': 1})"}
Generated  translation
var0 ['str0'] = 1 
--------- B -----------
{'intent': {'gloss': ['add', 'key', 'str0', 'to', 'dictionary', 'var0', 'with', 'value', '1'], 'words': ['add', 'key', 'str0', 'to', 'dictionary', 'var0', 'with', 'value', '1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'a', 'var0': 'data'}, 'snippet': 'var0.update(dict(str0=1))'}
Generated  translation
var0 ['str0'] = 1 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'string', 'into', 'a', 'list', 'of', 'words', 'and', 'whitespace'], 'words': ['split', 'a', 'string', 'into', 'a', 'list', 'of', 'words', 'and', 'whitespace'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "re.split('(\\\\w+)', s)"}
Generated  translation
[ s. strip ( ) for s in re. findall ('\ \ s ','hello \ \ s') ] 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'integer', 'location', 'of', 'a', 'key', 'var0', 'in', 'a', 'pandas', 'data', 'frame'], 'words': ['get', 'the', 'integer', 'location', 'of', 'a', 'key', 'var0', 'in', 'a', 'pandas', 'data', 'frame'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'bob'}, 'snippet': "df.index.get_loc('var0')"}
Generated  translation
df ['var0']. str. get ('var0') 
--------- B -----------
{'intent': {'gloss': ['add', 'an', 'item', 'with', 'key', 'str0', 'and', 'value', '1', 'to', 'an', 'dictionary', 'var0'], 'words': ['add', 'an', 'item', 'with', 'key', 'str0', 'and', 'value', '1', 'to', 'an', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'third_key', 'var0': 'my_dict'}, 'snippet': "var0.update({'str0': 1})"}
Generated  translation
var0 ['str0'] = 1 
--------- B -----------
{'intent': {'gloss': ['print', 'a', 'string', 'var0', 'with', 'string', 'format'], 'words': ['print', 'a', 'string', 'var0', 'with', 'string', 'format'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'word'}, 'snippet': 'print(\'"{}"\'.format(var0))'}
Generated  translation
print ('value is " { } " '. format ( var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['print', 'str0', 'without', 'newline'], 'words': ['print', 'str0', 'without', 'newline'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {'str0': '.'}, 'snippet': "sys.stdout.write('str0')"}
Generated  translation
print ('\ n '. join ('% s'% ( 1, 2 ) ) 
--------- B -----------
{'intent': {'gloss': ['concatenate', 'array', 'of', 'strings', 'str0', 'into', 'a', 'string'], 'words': ['concatenate', 'array', 'of', 'strings', 'str0', 'into', 'a', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "['a', 'b', 'c', 'd']", '[ str0 ]': "['a', 'b', 'c', 'd']"}, 'snippet': '"""""".join([ str0 ])'}
Generated  translation
" " " " " ". join ( [ str0 ] ) 
--------- B -----------
{'intent': {'gloss': ['write', 'dataframe', 'var0', ',', 'excluding', 'index', ',', 'to', 'a', 'csv', 'file'], 'words': ['write', 'dataframe', 'var0', ',', 'excluding', 'index', ',', 'to', 'a', 'csv', 'file'], 'after': [' ', ' ', '', ' ', ' ', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': 'var0.to_csv(filename, index=false)'}
Generated  translation
var0. to _ csv ('csv ', index = false ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'unicode', 'string', 'var0', 'to', 'ascii'], 'words': ['convert', 'unicode', 'string', 'var0', 'to', 'ascii'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': "var0.encode('iso-8859-15')"}
Generated  translation
var0. encode ('ascii ','ignore') 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'all', 'elements', 'in', 'list', 'var0', 'are', 'identical'], 'words': ['check', 'if', 'all', 'elements', 'in', 'list', 'var0', 'are', 'identical'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylist'}, 'snippet': 'all(x == var0[0] for x in var0)'}
Generated  translation
len ( set ( var0 ) ) = = 1 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'first', 'object', 'from', 'a', 'queryset', 'in', 'django', 'model', 'var0'], 'words': ['get', 'the', 'first', 'object', 'from', 'a', 'queryset', 'in', 'django', 'model', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'entry'}, 'snippet': 'var0.objects.filter()[:1].get()'}
Generated  translation
var0. objects. order _ by ('- pet _ _ age') [ 0 ] 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'str0', 'using', 'a', 'regex', 'str1'], 'words': ['split', 'string', 'str0', 'using', 'a', 'regex', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'words, words, words.', 'str1': '(\\w+)', '( str1 )': '(\\w+)'}, 'snippet': "re.split('str1', 'str0')"}
Generated  translation
re. split ('str1 ','str0') 
--------- B -----------
{'intent': {'gloss': ['sum', 'elements', 'at', 'index', 'var0', 'of', 'each', 'list', 'in', 'list', 'var1'], 'words': ['sum', 'elements', 'at', 'index', 'var0', 'of', 'each', 'list', 'in', 'list', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'column', 'var1': 'data'}, 'snippet': 'print(sum(row[var0] for row in var1))'}
Generated  translation
sum ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['flatten', 'list', 'var0'], 'words': ['flatten', 'list', 'var0'], 'after': [' ', ' ', '']}, 'slot_map': {'var0': 'list_of_menuitems'}, 'snippet': '[image for menuitem in var0 for image in menuitem]'}
Generated  translation
var0 = [ i [ 0 ] for i in var0 ] 
--------- B -----------
{'intent': {'gloss': ['create', 'array', 'containing', 'the', 'maximum', 'value', 'of', 'respective', 'elements', 'of', 'array', 'str0', 'and', 'array', 'str1'], 'words': ['create', 'array', 'containing', 'the', 'maximum', 'value', 'of', 'respective', 'elements', 'of', 'array', 'str0', 'and', 'array', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '[2, 3, 4]', 'str1': '[1, 5, 2]', '[ str0 ]': '[2, 3, 4]', '[ str1 ]': '[1, 5, 2]'}, 'snippet': 'np.maximum([ str0 ], [ str1 ])'}
Generated  translation
np. zeros ( ( 6, 9, 10 ) ) + np. array ( [ str0 ] ) [ ( none ), :, ( none ) ] 
--------- B -----------
{'intent': {'gloss': ['print', 'a', 'list', 'var0', 'and', 'move', 'first', '3', 'elements', 'to', 'the', 'end', 'of', 'the', 'list'], 'words': ['print', 'a', 'list', 'var0', 'and', 'move', 'first', '3', 'elements', 'to', 'the', 'end', 'of', 'the', 'list'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': 'print(var0[3:] + var0[:3])'}
Generated  translation
print ( var0 [ - 3 : ] ) 
--------- B -----------
{'intent': {'gloss': ['count', 'non', 'zero', 'values', 'in', 'each', 'column', 'in', 'pandas', 'data', 'frame'], 'words': ['count', 'non', 'zero', 'values', 'in', 'each', 'column', 'in', 'pandas', 'data', 'frame'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'df.astype(bool).sum(axis=1)'}
Generated  translation
df. apply ( lambda x : x. isnan, axis = 0 ) 
--------- B -----------
{'intent': {'gloss': ['search', 'for', 'string', 'that', 'matches', 'regular', 'expression', 'pattern', 'str0', 'in', 'string', 'str1'], 'words': ['search', 'for', 'string', 'that', 'matches', 'regular', 'expression', 'pattern', 'str0', 'in', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '(?<!distillr)\\\\acrotray\\.exe', 'str1': 'c:\\somedir\\acrotray.exe'}, 'snippet': "re.search('str0', 'str1')"}
Generated  translation
re. search ('str0 ', str1 ). group ( 1 ) 
--------- B -----------
{'intent': {'gloss': ['loop', 'over', 'a', 'list', 'var0', 'if', 'sublists', 'length', 'equals', '3'], 'words': ['loop', 'over', 'a', 'list', 'var0', 'if', 'sublists', 'length', 'equals', '3'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylist'}, 'snippet': '[x for x in var0 if len(x) == 3]'}
Generated  translation
[ item for item in var0 if item. split ( ',') ] 
--------- B -----------
{'intent': {'gloss': ['create', 'list', 'var0', 'containing', '100', 'instances', 'of', 'object', 'var1'], 'words': ['create', 'list', 'var0', 'containing', '100', 'instances', 'of', 'object', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'lst', 'var1': 'object'}, 'snippet': 'var0 = [var1() for i in range(100)]'}
Generated  translation
var0 = [ x for x in var1 if x. isdigit ( ) ] 
--------- B -----------
{'intent': {'gloss': ['joining', 'data', 'from', 'dataframe', 'var0', 'with', 'data', 'from', 'dataframe', 'var1', 'based', 'on', 'matching', 'values', 'of', 'column', 'str0', 'in', 'both', 'dataframes'], 'words': ['joining', 'data', 'from', 'dataframe', 'var0', 'with', 'data', 'from', 'dataframe', 'var1', 'based', 'on', 'matching', 'values', 'of', 'column', 'str0', 'in', 'both', 'dataframes'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df1', 'var1': 'df2', 'str0': 'date_time'}, 'snippet': "var0.merge(var1, on='str0')"}
Generated  translation
s1 = pd. merge ( var0, var1, how ='inner ', on = ['str0'] ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'a', 'directory', 'var0', 'exists', 'and', 'create', 'it', 'if', 'necessary'], 'words': ['check', 'if', 'a', 'directory', 'var0', 'exists', 'and', 'create', 'it', 'if', 'necessary'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'path'}, 'snippet': 'distutils.dir_util.mkpath(var0)'}
Generated  translation
os. path. commonprefix ( ['var0 ','some _ f'] ) 
--------- B -----------
{'intent': {'gloss': ['access', 'a', 'tag', 'called', 'str0', 'in', 'beautifulsoup', 'var0'], 'words': ['access', 'a', 'tag', 'called', 'str0', 'in', 'beautifulsoup', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'name', 'var0': 'soup'}, 'snippet': "print(var0.find('str0').string)"}
Generated  translation
var0. find _ all ('str0') 
--------- B -----------
{'intent': {'gloss': ['get', 'index', 'of', 'rows', 'in', 'column', 'str0'], 'words': ['get', 'index', 'of', 'rows', 'in', 'column', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'boolcol'}, 'snippet': "df.loc[df['str0']]"}
Generated  translation
df ['str0']. index ('str0') 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'on', 'white', 'spaces'], 'words': ['split', 'string', 'var0', 'on', 'white', 'spaces'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'my_string'}, 'snippet': '""" """.join(var0.split())'}
Generated  translation
re. findall ('\ \ s + ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['shuffle', 'columns', 'of', 'an', 'numpy', 'array', 'str0'], 'words': ['shuffle', 'columns', 'of', 'an', 'numpy', 'array', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'r'}, 'snippet': 'np.random.shuffle(np.transpose(str0))'}
Generated  translation
np. mean ( np. trace ( [ str0 ] ), axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'items', 'in', 'var0', 'to', 'integers'], 'words': ['convert', 'items', 'in', 'var0', 'to', 'integers'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 't1'}, 'snippet': 't2 = [map(int, x) for x in var0]'}
Generated  translation
int ( str ( i ) for i in var0 ) 
--------- B -----------
{'intent': {'gloss': ['encode', 'string', 'str0'], 'words': ['encode', 'string', 'str0'], 'after': [' ', ' ', '']}, 'slot_map': {'str0': 'data to be encoded'}, 'snippet': "encoded = base64.b64encode('str0')"}
Generated  translation
" " " str0 " " ". encode ('latin - 1') 
--------- B -----------
{'intent': {'gloss': ['encode', 'a', 'string', 'str0', 'to', 'var0', 'encoding'], 'words': ['encode', 'a', 'string', 'str0', 'to', 'var0', 'encoding'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'data to be encoded', 'var0': 'ascii'}, 'snippet': "encoded = 'str0'.encode('var0')"}
Generated  translation
var0. encode ('str0') 
--------- B -----------
{'intent': {'gloss': ['convert', 'unicode', 'string', 'ustr0', 'into', 'dictionary'], 'words': ['convert', 'unicode', 'string', 'ustr0', 'into', 'dictionary'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "{'code1':1,'code2':1}", '{ str0 }': "{'code1':1,'code2':1}"}, 'snippet': "d = ast.literal_eval('str0')"}
Generated  translation
dict ( map ( int, x. split (':') ) for x in s. split ( ',') ) 
--------- B -----------
{'intent': {'gloss': ['open', 'a', 'file', 'str0', 'in', 'write', 'mode'], 'words': ['open', 'a', 'file', 'str0', 'in', 'write', 'mode'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'path/to/file_name.ext'}, 'snippet': "new_file = open('str0', 'w')"}
Generated  translation
output = open ('str0 ','wb') 
--------- B -----------
{'intent': {'gloss': ['convert', 'tuple', 'of', 'tuples', 'str0', 'to', 'list', 'in', 'one', 'line'], 'words': ['convert', 'tuple', 'of', 'tuples', 'str0', 'to', 'list', 'in', 'one', 'line'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "(('aa',), ('bb',), ('cc',))", '( str0 )': "(('aa',), ('bb',), ('cc',))"}, 'snippet': 'map(lambda a: a[0], ( str0 ))'}
Generated  translation
[ list ( t ) for t in str0 ] 
--------- B -----------
{'intent': {'gloss': ['plotting', 'stacked', 'barplots', 'on', 'a', 'panda', 'data', 'frame'], 'words': ['plotting', 'stacked', 'barplots', 'on', 'a', 'panda', 'data', 'frame'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "df.plot(kind='barh', stacked=true)"}
Generated  translation
df. groupby ('colour'). agg ( ['v ','> 1 ','avg'] ) 
--------- B -----------
{'intent': {'gloss': ['rotate', 'the', 'xtick', 'labels', 'of', 'matplotlib', 'plot', 'var0', 'by', 'str0', 'degrees', 'to', 'make', 'long', 'labels', 'readable'], 'words': ['rotate', 'the', 'xtick', 'labels', 'of', 'matplotlib', 'plot', 'var0', 'by', 'str0', 'degrees', 'to', 'make', 'long', 'labels', 'readable'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'ax', 'str0': '45'}, 'snippet': 'var0.set_xticklabels(labels, rotation=45)'}
Generated  translation
var0. groupby ('colour'). size ( ). strftime ('% y - % m - % d') 
--------- B -----------
{'intent': {'gloss': ['pandas', 'dataframe', 'get', 'first', 'row', 'of', 'each', 'group', 'by', 'str0'], 'words': ['pandas', 'dataframe', 'get', 'first', 'row', 'of', 'each', 'group', 'by', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'id'}, 'snippet': "df.groupby('str0').first()"}
Generated  translation
pd. concat ( [ df ['str0']. t ) ] 
--------- B -----------
{'intent': {'gloss': ['call', 'a', 'subprocess', 'with', 'arguments', 'str0', 'that', 'may', 'contain', 'spaces'], 'words': ['call', 'a', 'subprocess', 'with', 'arguments', 'str0', 'that', 'may', 'contain', 'spaces'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'c:\\program files\\vmware\\vmware server\\vmware-cmd.bat'}, 'snippet': "subprocess.popen(['str0'])"}
Generated  translation
test. support. script _ helper. spawn _ subprocess ('str0 ', shell = true ) 
--------- B -----------
{'intent': {'gloss': ['reverse', 'sort', 'counter', 'var0', 'by', 'values'], 'words': ['reverse', 'sort', 'counter', 'var0', 'by', 'values'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'sorted(var0, key=var0.get, reverse=true)'}
Generated  translation
sorted ( var0, key = var0. get ) 
--------- B -----------
{'intent': {'gloss': ['append', 'a', 'numpy', 'array', 'str0', 'to', 'a', 'numpy', 'array', 'str1'], 'words': ['append', 'a', 'numpy', 'array', 'str0', 'to', 'a', 'numpy', 'array', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'b', 'str1': 'a'}, 'snippet': 'np.vstack((str1, str0))'}
Generated  translation
np. zeros ( ( str0 ) ) + np. array ( [ str1 ] ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'lists', 'str0', 'such', 'that', 'third', 'row', 'comes', 'first'], 'words': ['sort', 'a', 'list', 'of', 'lists', 'str0', 'such', 'that', 'third', 'row', 'comes', 'first'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'c2'}, 'snippet': 'str0.sort(key=lambda row: row[2])'}
Generated  translation
sorted ( [ str0 ], key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'elements', 'from', 'list', 'var0', ',', 'that', 'have', 'a', 'field', 'var1', 'value', '30'], 'words': ['get', 'elements', 'from', 'list', 'var0', ',', 'that', 'have', 'a', 'field', 'var1', 'value', '30'], 'after': [' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylist', 'var1': 'n'}, 'snippet': '[x for x in var0 if x.var1 == 30]'}
Generated  translation
[ item for item in var0 if var1 = = 30 ] 
--------- B -----------
{'intent': {'gloss': ['execute', 'script', 'str0', 'using', 'str1', 'shell'], 'words': ['execute', 'script', 'str0', 'using', 'str1', 'shell'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'script.ps1', 'str1': 'powershell.exe'}, 'snippet': "os.system('str1', 'str0')"}
Generated  translation
os. system ('str0') 
--------- B -----------
{'intent': {'gloss': ['concatenate', 'items', 'of', 'list', 'var0', 'with', 'a', 'space', 'str0'], 'words': ['concatenate', 'items', 'of', 'list', 'var0', 'with', 'a', 'space', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l', 'str0': ''}, 'snippet': "print(' '.join(map(str, var0)))"}
Generated  translation
[''. join ( x ) for x in var0 ] 
--------- B -----------
{'intent': {'gloss': ['set', 'pythonpath', 'in', 'python', 'script', '.'], 'words': ['set', 'pythonpath', 'in', 'python', 'script', '.'], 'after': [' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "sys.path.append('/path/to/whatever')"}
Generated  translation
os. system ('pythonpath. py') 
--------- B -----------
{'intent': {'gloss': ['running', 'bash', 'script', 'str0'], 'words': ['running', 'bash', 'script', 'str0'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {'str0': 'sleep.sh'}, 'snippet': "subprocess.call('str0', shell=true)"}
Generated  translation
subprocess. call ('str0 ', shell = true ) 
--------- B -----------
{'intent': {'gloss': ['write', 'the', 'elements', 'of', 'list', 'var0', 'concatenated', 'by', 'special', 'character', 'str0', 'to', 'file', 'var1'], 'words': ['write', 'the', 'elements', 'of', 'list', 'var0', 'concatenated', 'by', 'special', 'character', 'str0', 'to', 'file', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'lines', 'str0': '\n', 'var1': 'myfile'}, 'snippet': "var1.write('str0'.join(var0))"}
Generated  translation
with open ('str0 ','str0') as f : var1. write ('str0') 
--------- B -----------
{'intent': {'gloss': ['merge', 'list', 'str0', 'and', 'list', 'str1', 'and', 'list', 'str2', 'into', 'one', 'list'], 'words': ['merge', 'list', 'str0', 'and', 'list', 'str1', 'and', 'list', 'str2', 'into', 'one', 'list'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "['it']", 'str1': "['was']", 'str2': "['annoying']", '[ str0 ]': "['it']", '[ str1 ]': "['was']", '[ str2 ]': "['annoying']"}, 'snippet': '[ str0 ] + [ str1 ] + [ str2 ]'}
Generated  translation
[ [ str0 ] for a in zip ( [ str1 ], [ str2 ] ) ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'index', 'at', 'level', '0', 'into', 'a', 'column', 'in', 'dataframe', 'var0'], 'words': ['convert', 'index', 'at', 'level', '0', 'into', 'a', 'column', 'in', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': 'var0.reset_index(level=0, inplace=true)'}
Generated  translation
var0. apply ( lambda x : x. to _ level _ values ( 0 ), axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'the', 'first', 'row', 'of', 'numpy', 'matrix', 'var0', 'to', 'a', 'list'], 'words': ['convert', 'the', 'first', 'row', 'of', 'numpy', 'matrix', 'var0', 'to', 'a', 'list'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'numpy.array(var0)[0].tolist()'}
Generated  translation
numpy. array ( [ var0, [ 0, 1 ], [ 1, 2 ] ) 
--------- B -----------
{'intent': {'gloss': ['how', 'do', 'i', 'sum', 'the', 'first', 'value', 'in', 'each', 'tuple', 'in', 'a', 'list', 'of', 'tuples', 'in', 'python', '?'], 'words': ['how', 'do', 'i', 'sum', 'the', 'first', 'value', 'in', 'each', 'tuple', 'in', 'a', 'list', 'of', 'tuples', 'in', 'python', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'sum([pair[0] for pair in list_of_pairs])'}
Generated  translation
[ sum ( x [ 0 ] for x in var0 ) ] 
--------- B -----------
{'intent': {'gloss': ['run', 'r', 'script', 'str0'], 'words': ['run', 'r', 'script', 'str0'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {'str0': '/usr/bin/rscript --vanilla /pathto/myrscript.r'}, 'snippet': "subprocess.call('str0', shell=true)"}
Generated  translation
run ('str0') 
--------- B -----------
{'intent': {'gloss': ['read', 'a', 'file', 'var0', 'without', 'newlines'], 'words': ['read', 'a', 'file', 'var0', 'without', 'newlines'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'file'}, 'snippet': "[line.rstrip('\\n') for line in var0]"}
Generated  translation
with open ( var0 ) as f : var0 = f. readlines ( ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'item', 'at', 'index', '0', 'from', 'the', 'tuple', 'that', 'has', 'maximum', 'value', 'at', 'index', '1', 'in', 'list', 'var0'], 'words': ['get', 'the', 'item', 'at', 'index', '0', 'from', 'the', 'tuple', 'that', 'has', 'maximum', 'value', 'at', 'index', '1', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'lis'}, 'snippet': 'max(var0, key=itemgetter(1))[0]'}
Generated  translation
max ( var0, key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'lis', 'var0', 'in', 'ascending', 'order', 'based', 'on', 'the', 'degrees', 'value', 'of', 'its', 'elements'], 'words': ['sort', 'lis', 'var0', 'in', 'ascending', 'order', 'based', 'on', 'the', 'degrees', 'value', 'of', 'its', 'elements'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list5'}, 'snippet': 'sorted(var0, lambda x: (degree(x), x))'}
Generated  translation
sorted ( list ( var0. items ( ) ), key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'new', 'list', 'var0by', 'removing', 'empty', 'list', 'from', 'a', 'list', 'of', 'lists', 'var1'], 'words': ['get', 'a', 'new', 'list', 'var0by', 'removing', 'empty', 'list', 'from', 'a', 'list', 'of', 'lists', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list2', 'var1': 'list1'}, 'snippet': 'var0 = [x for x in var1 if x != []]'}
Generated  translation
var0 = [ x for x in var1 if x ] 
--------- B -----------
{'intent': {'gloss': ['match', 'regex', 'str0', 'with', 'string', 'str1'], 'words': ['match', 'regex', 'str0', 'with', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '\\((.*?)\\)|(\\w)', 'str1': '(zyx)bc'}, 'snippet': "re.findall('str0', 'str1')"}
Generated  translation
re. match ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['initialize', 'var0', 'in', 'flask', 'config', 'with', 'str0'], 'words': ['initialize', 'var0', 'in', 'flask', 'config', 'with', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'secret_key', 'str0': 'your_secret_string'}, 'snippet': "app.config['var0'] = 'str0'"}
Generated  translation
config = var0. engine. make _ all ('str0') 
--------- B -----------
{'intent': {'gloss': ['write', 'bytes', 'var0', 'to', 'a', 'file', 'var1', 'in', 'python', '3'], 'words': ['write', 'bytes', 'var0', 'to', 'a', 'file', 'var1', 'in', 'python', '3'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'bytes_', 'var1': 'filename'}, 'snippet': "open('var1', 'wb').write(var0)"}
Generated  translation
open ( var1,'r'). write ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['eliminate', 'all', 'strings', 'from', 'list', 'var0'], 'words': ['eliminate', 'all', 'strings', 'from', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'lst'}, 'snippet': '[element for element in var0 if isinstance(element, int)]'}
Generated  translation
var0 = [ [ ] for sublist in var0 if'' in s ] 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'list', 'of', 'all', 'keys', 'in', 'cassandra', 'database', 'var0', 'with', 'pycassa'], 'words': ['get', 'a', 'list', 'of', 'all', 'keys', 'in', 'cassandra', 'database', 'var0', 'with', 'pycassa'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'cf'}, 'snippet': 'list(var0.get_range().get_keys())'}
Generated  translation
[ k for k, v in var0. items ( ) if v. startswith ('c') ] 
--------- B -----------
{'intent': {'gloss': ['choose', 'a', 'random', 'file', 'from', 'the', 'directory', 'contents', 'of', 'the', 'c', 'drive', ',', 'str0'], 'words': ['choose', 'a', 'random', 'file', 'from', 'the', 'directory', 'contents', 'of', 'the', 'c', 'drive', ',', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '']}, 'slot_map': {'str0': 'c:\\'}, 'snippet': "random.choice(os.listdir('str0'))"}
Generated  translation
print ( random. load ('str0') ) 
--------- B -----------
{'intent': {'gloss': ['send', 'a', 'signal', 'str0', 'to', 'the', 'current', 'process'], 'words': ['send', 'a', 'signal', 'str0', 'to', 'the', 'current', 'process'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'signal.sigusr1'}, 'snippet': 'os.kill(os.getpid(), signal.sigusr1)'}
Generated  translation
sys. path. getmtime ('str0') 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'string', 'var0', 'with', 'dot', 'and', 'comma', 'into', 'a', 'float', 'number', 'var1'], 'words': ['convert', 'a', 'string', 'var0', 'with', 'dot', 'and', 'comma', 'into', 'a', 'float', 'number', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'my_string', 'var1': 'my_float'}, 'snippet': "var1 = float(var0.replace(',', ''))"}
Generated  translation
var1 = [ float ( item ) for item in var0. split ( ',') ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'string', 'str0', 'with', 'dot', 'and', 'comma', 'into', 'a', 'floating', 'number'], 'words': ['convert', 'a', 'string', 'str0', 'with', 'dot', 'and', 'comma', 'into', 'a', 'floating', 'number'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '123,456.908'}, 'snippet': "float('str0'.replace(',', ''))"}
Generated  translation
" " " str0 " " ". join ( [ str0 ] ) 
--------- B -----------
{'intent': {'gloss': ['make', 'a', 'comma', '-', 'separated', 'string', 'from', 'a', 'list', 'var0'], 'words': ['make', 'a', 'comma', '-', 'separated', 'string', 'from', 'a', 'list', 'var0'], 'after': [' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylist'}, 'snippet': "var0 = ','.join(map(str, var0))"}
Generated  translation
[ item. split ( ) for item in var0. split ( ',') ] 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'list', 'of', 'integers', 'by', 'splitting', 'a', 'string', 'var0', 'with', 'comma'], 'words': ['get', 'a', 'list', 'of', 'integers', 'by', 'splitting', 'a', 'string', 'var0', 'with', 'comma'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'user'}, 'snippet': "[int(s) for s in var0.split(',')]"}
Generated  translation
[ int ( x ) for x in var0. split ( ',') ] 
--------- B -----------
{'intent': {'gloss': ['combine', 'lists', 'var0', 'and', 'var1', 'by', 'alternating', 'their', 'elements'], 'words': ['combine', 'lists', 'var0', 'and', 'var1', 'by', 'alternating', 'their', 'elements'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l1', 'var1': 'l2'}, 'snippet': '[val for pair in zip(var0, var1) for val in pair]'}
Generated  translation
zip ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['retrieve', 'each', 'line', 'from', 'a', 'file', 'str0', 'as', 'a', 'list'], 'words': ['retrieve', 'each', 'line', 'from', 'a', 'file', 'str0', 'as', 'a', 'list'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'file.txt'}, 'snippet': "[line.split() for line in open('str0')]"}
Generated  translation
with open ('str0 ','r') as f : f. write ('\ n') 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'dictionary', 'var0', 'by', 'the', 'key', 'var1'], 'words': ['sort', 'a', 'list', 'of', 'dictionary', 'var0', 'by', 'the', 'key', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylist', 'var1': 'title'}, 'snippet': "var0.sort(key=lambda x: x['var1'])"}
Generated  translation
sorted ( var0, key = lambda x : var1 [ x ] ['var0'] ) 
--------- B -----------
{'intent': {'gloss': ['find', 'the', 'first', 'element', 'of', 'the', 'tuple', 'with', 'the', 'maximum', 'second', 'element', 'in', 'a', 'list', 'of', 'tuples', 'var0'], 'words': ['find', 'the', 'first', 'element', 'of', 'the', 'tuple', 'with', 'the', 'maximum', 'second', 'element', 'in', 'a', 'list', 'of', 'tuples', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'lis'}, 'snippet': 'max(var0, key=lambda item: item[1])[0]'}
Generated  translation
max ( var0, key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['add', 'color', 'bar', 'with', 'image', 'var0', 'to', 'plot', 'var1'], 'words': ['add', 'color', 'bar', 'with', 'image', 'var0', 'to', 'plot', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mappable', 'var1': 'plt'}, 'snippet': 'var1.colorbar(var0=var0, cax=ax3)'}
Generated  translation
var1. var0. seek ( 0 ) 
--------- B -----------
{'intent': {'gloss': ['generate', 'all', '2', '-', 'element', 'subsets', 'of', 'tuple', 'str0'], 'words': ['generate', 'all', '2', '-', 'element', 'subsets', 'of', 'tuple', 'str0'], 'after': [' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '(1, 2, 3)', '( str0 )': '(1, 2, 3)'}, 'snippet': 'list(itertools.combinations(( str0 ), 2))'}
Generated  translation
print ( [ ( x, y ) for x, y in zip ( str0, str0 ) ] ) 
--------- B -----------
{'intent': {'gloss': ['how', 'do', 'i', 'insert', 'into', 't1', '(', 'select', '*', 'from', 't2', ')', 'in', 'sqlalchemy', '?'], 'words': ['how', 'do', 'i', 'insert', 'into', 't1', '(', 'select', '*', 'from', 't2', ')', 'in', 'sqlalchemy', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', '', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "session.execute('insert into t1 (select * from t2)')"}
Generated  translation
session. execute ('insert into t1 select * from table2 and i1 select * from t1 ; select * from t1 values (? )') 
--------- B -----------
{'intent': {'gloss': ['print', 'new', 'line', 'character', 'as', 'str0', 'in', 'a', 'string', 'str1'], 'words': ['print', 'new', 'line', 'character', 'as', 'str0', 'in', 'a', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '\n', 'str1': 'foo\nbar'}, 'snippet': "print('str1'.encode('string_escape'))"}
Generated  translation
print ('str1 '. replace ('str0 ','' ) ) 
--------- B -----------
{'intent': {'gloss': ['calculate', 'the', 'mean', 'of', 'each', 'element', 'in', 'array', 'var0', 'with', 'the', 'element', 'previous', 'to', 'it'], 'words': ['calculate', 'the', 'mean', 'of', 'each', 'element', 'in', 'array', 'var0', 'with', 'the', 'element', 'previous', 'to', 'it'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': '(var0[1:] + var0[:-1]) / 2'}
Generated  translation
np. argwhere ( var0. shape [ 0 ], var0. index ) 
--------- B -----------
{'intent': {'gloss': ['count', 'number', 'of', 'times', 'string', 'str0', 'occurred', 'in', 'string', 'str1'], 'words': ['count', 'number', 'of', 'times', 'string', 'str0', 'occurred', 'in', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'brown', 'str1': 'the big brown fox is brown'}, 'snippet': '"""str1""".count(\'str0\')'}
Generated  translation
" " " str1 " " ". count ('str0') 
--------- B -----------
{'intent': {'gloss': ['download', 'the', 'file', 'from', 'url', 'var0', 'and', 'save', 'it', 'under', 'file', 'var1'], 'words': ['download', 'the', 'file', 'from', 'url', 'var0', 'and', 'save', 'it', 'under', 'file', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'url', 'var1': 'file_name'}, 'snippet': 'urllib.request.urlretrieve(var0, var1)'}
Generated  translation
urllib. request. urlretrieve ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'tuples', 'var0', 'by', 'third', 'item', 'in', 'the', 'tuple'], 'words': ['sort', 'a', 'list', 'of', 'tuples', 'var0', 'by', 'third', 'item', 'in', 'the', 'tuple'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'b'}, 'snippet': 'var0.sort(key=lambda x: x[1][2])'}
Generated  translation
var0. sort ( key = lambda x : x [ 2 ] ) 
--------- B -----------
{'intent': {'gloss': ['subtract', '13', 'from', 'every', 'number', 'in', 'a', 'list', 'var0'], 'words': ['subtract', '13', 'from', 'every', 'number', 'in', 'a', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'var0[:] = [(x - 13) for x in var0]'}
Generated  translation
[ ( x + 13 ) for x, y in zip ( var0, var0 [ 1 : ] ) ] 
--------- B -----------
{'intent': {'gloss': ['capture', 'final', 'output', 'of', 'a', 'chain', 'of', 'system', 'commands', 'str0'], 'words': ['capture', 'final', 'output', 'of', 'a', 'chain', 'of', 'system', 'commands', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'ps -ef | grep something | wc -l'}, 'snippet': "subprocess.check_output('str0', shell=true)"}
Generated  translation
print ( os. popen ('str0'). reshape ( 2, - 1 ) ) 
--------- B -----------
{'intent': {'gloss': ['sending', 'http', 'headers', 'to', 'var0'], 'words': ['sending', 'http', 'headers', 'to', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'client'}, 'snippet': "var0.send('http/1.0 200 ok\\r\\n')"}
Generated  translation
r = requests. get ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['subscript', 'text', 'str0', 'with', 'str1', 'as', 'subscripted', 'in', 'matplotlib', 'labels', 'for', 'arrays', 'str2', 'and', 'str3', '.'], 'words': ['subscript', 'text', 'str0', 'with', 'str1', 'as', 'subscripted', 'in', 'matplotlib', 'labels', 'for', 'arrays', 'str2', 'and', 'str3', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'h20', 'str1': '2', 'str2': 'x', 'str3': 'y'}, 'snippet': "plt.plot(str2, str3, label='h₂o')"}
Generated  translation
ax. set _ yticklabels ( ['str2 ','str3'] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'largest', 'key', 'whose', 'not', 'associated', 'with', 'value', 'of', '0', 'in', 'dictionary', 'var0'], 'words': ['get', 'the', 'largest', 'key', 'whose', 'not', 'associated', 'with', 'value', 'of', '0', 'in', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': '(k for k, v in var0.items() if v != 0)'}
Generated  translation
max ( var0, key = lambda x : abs ( x [ 1 ] ) if x [ 0 ] else x [ 0 ] ) 
--------- B -----------
{'intent': {'gloss': ['decode', 'string', 'str0', 'into', 'a', 'normal', 'string'], 'words': ['decode', 'string', 'str0', 'into', 'a', 'normal', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '\\x89\\n'}, 'snippet': '"""str0""".decode(\'string_escape\')'}
Generated  translation
str0. decode ('str0') 
--------- B -----------
{'intent': {'gloss': ['find', 'last', 'occurrence', 'of', 'character', 'str0', 'in', 'string', 'str1'], 'words': ['find', 'last', 'occurrence', 'of', 'character', 'str0', 'in', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '}', 'str1': 'abcd}def}'}, 'snippet': '"""str1""".rfind(\'str0\')'}
Generated  translation
re. findall ('str1 ','str0') 
--------- B -----------
{'intent': {'gloss': ['reverse', 'list', 'var0', 'based', 'on', 'the', 'var1', 'attribute', 'of', 'each', 'object'], 'words': ['reverse', 'list', 'var0', 'based', 'on', 'the', 'var1', 'attribute', 'of', 'each', 'object'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'ut', 'var1': 'count'}, 'snippet': 'var0.sort(key=lambda x: x.var1, reverse=true)'}
Generated  translation
var0. get ( var1, key = lambda x : x. var0. reverse ( ) ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'objects', 'var0', 'in', 'reverse', 'order', 'by', 'their', 'var1', 'property'], 'words': ['sort', 'a', 'list', 'of', 'objects', 'var0', 'in', 'reverse', 'order', 'by', 'their', 'var1', 'property'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'ut', 'var1': 'count'}, 'snippet': 'var0.sort(key=lambda x: x.var1, reverse=true)'}
Generated  translation
var0. sort ( key = lambda x : x. var1 ) 
--------- B -----------
{'intent': {'gloss': ['return', 'var0', 'if', 'string', 'var1', 'contains', 'regex', 'str0'], 'words': ['return', 'var0', 'if', 'string', 'var1', 'contains', 'regex', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'true', 'var1': 'foobarrrr', 'str0': 'ba[rzd]'}, 'snippet': "bool(re.search('str0', 'var1'))"}
Generated  translation
if var0. find ('str0') = = - 1 : print ( " no'is'here! " ) else : print ( var1 ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'any', 'key', 'in', 'the', 'dictionary', 'var0', 'starts', 'with', 'the', 'string', 'str0'], 'words': ['check', 'if', 'any', 'key', 'in', 'the', 'dictionary', 'var0', 'starts', 'with', 'the', 'string', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'dict1', 'str0': 'emp$$'}, 'snippet': "any(key.startswith('str0') for key in var0)"}
Generated  translation
any ( item in var0. keys ( ) ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'var0', 'of', 'dicts', 'by', 'dict', 'value', 'str0'], 'words': ['sort', 'a', 'list', 'var0', 'of', 'dicts', 'by', 'dict', 'value', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l', 'str0': 'title'}, 'snippet': "var0.sort(key=lambda x: x['str0'])"}
Generated  translation
sorted ( var0, key = lambda x : x ['str0'] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'position', 'of', 'item', 'var0', 'in', 'list', 'var1'], 'words': ['get', 'the', 'position', 'of', 'item', 'var0', 'in', 'list', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'element', 'var1': 'testlist'}, 'snippet': 'try:\n    print(var1.index(var0))\nexcept valueerror:\n    pass'}
Generated  translation
print ( var1. get ( var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['how', 'do', 'i', 'perform', 'secondary', 'sorting', 'in', 'python', '?'], 'words': ['how', 'do', 'i', 'perform', 'secondary', 'sorting', 'in', 'python', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'sorted(list5, key=lambda vertex: (degree(vertex), vertex))'}
Generated  translation
np. where ( a = = 1 ) 
--------- B -----------
{'intent': {'gloss': ['append', 'each', 'line', 'in', 'file', 'var0', 'into', 'a', 'list'], 'words': ['append', 'each', 'line', 'in', 'file', 'var0', 'into', 'a', 'list'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'myfile'}, 'snippet': "[x for x in var0.splitlines() if x != '']"}
Generated  translation
[ open ( var0 ) for f in open ('text / plain ','rb') ] 
--------- B -----------
{'intent': {'gloss': ['remove', 'symbols', 'from', 'a', 'string', 'var0'], 'words': ['remove', 'symbols', 'from', 'a', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': "re.sub('[^\\\\w]', ' ', var0)"}
Generated  translation
re. sub ('< [ ^ > ] * > ','', var0 ) 
--------- B -----------
{'intent': {'gloss': ['count', 'the', 'number', 'of', 'keys', 'in', 'dictionary', 'var0'], 'words': ['count', 'the', 'number', 'of', 'keys', 'in', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'yourdictfile'}, 'snippet': 'len(set(open(var0).read().split()))'}
Generated  translation
len ( dict ( ( x, sum ( x ) for x in var0. split ( ) ) ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'escape', 'character', 'from', 'string', 'str0'], 'words': ['remove', 'escape', 'character', 'from', 'string', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '\\a'}, 'snippet': '"""str0""".decode(\'string_escape\')'}
Generated  translation
" " " " " ". join ( filter ( str. escape,'\ \ 1') ) 
--------- B -----------
{'intent': {'gloss': ['numpy', 'concatenate', 'two', 'arrays', 'var0', 'and', 'var1', 'along', 'the', 'first', 'axis'], 'words': ['numpy', 'concatenate', 'two', 'arrays', 'var0', 'and', 'var1', 'along', 'the', 'first', 'axis'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'b'}, 'snippet': 'print(concatenate((var0, var1), axis=0))'}
Generated  translation
numpy. concatenate ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['numpy', 'concatenate', 'two', 'arrays', 'var0', 'and', 'var1', 'along', 'the', 'second', 'axis'], 'words': ['numpy', 'concatenate', 'two', 'arrays', 'var0', 'and', 'var1', 'along', 'the', 'second', 'axis'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'b'}, 'snippet': 'print(concatenate((var0, var1), axis=1))'}
Generated  translation
numpy. concatenate ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['fetch', 'address', 'information', 'for', 'host', 'str0', 'ion', 'port', '80'], 'words': ['fetch', 'address', 'information', 'for', 'host', 'str0', 'ion', 'port', '80'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'google.com'}, 'snippet': "print(socket.getaddrinfo('str0', 80))"}
Generated  translation
sys. path. insert ( 0,'str0') 
--------- B -----------
{'intent': {'gloss': ['flask', 'set', 'folder', 'str0', 'as', 'the', 'default', 'template', 'folder'], 'words': ['flask', 'set', 'folder', 'str0', 'as', 'the', 'default', 'template', 'folder'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'wherever'}, 'snippet': "flask(__name__, template_folder='str0')"}
Generated  translation
webbrowser. set _ yticklabels ('str0') 
--------- B -----------
{'intent': {'gloss': ['delete', 'all', 'instances', 'of', 'a', 'character', 'str0', 'in', 'a', 'string', 'str1'], 'words': ['delete', 'all', 'instances', 'of', 'a', 'character', 'str0', 'in', 'a', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'i', 'str1': 'it is icy'}, 'snippet': "re.sub('str0', '', 'str1')"}
Generated  translation
re. sub ('[ ^ a - za - z ] ','','str1') 
--------- B -----------
{'intent': {'gloss': ['django', 'filter', 'by', 'hour'], 'words': ['django', 'filter', 'by', 'hour'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "entry.objects.filter(pub_date__contains='08:00')"}
Generated  translation
django. searchset by hour 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'multi', '-', 'line', 'string', 'str0', 'by', 'new', 'line', 'character', 'str1'], 'words': ['split', 'a', 'multi', '-', 'line', 'string', 'str0', 'by', 'new', 'line', 'character', 'str1'], 'after': [' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'a \n b \r\n c', 'str1': '\n'}, 'snippet': "' a \\n b \\r\\n c '.split('str1')"}
Generated  translation
re. split ('\ \ t + ','str1') 
--------- B -----------
{'intent': {'gloss': ['remove', 'substring', 'str0', 'from', 'a', 'string', 'str1'], 'words': ['remove', 'substring', 'str0', 'from', 'a', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'bag,', 'str1': 'lamp, bag, mirror'}, 'snippet': "print('str1'.replace('str0', ''))"}
Generated  translation
" " " str1 " " ". replace ('str0 ','' ) 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'string', 'var0', 'by', 'last', 'occurrence', 'of', 'character', 'str0'], 'words': ['split', 'a', 'string', 'var0', 'by', 'last', 'occurrence', 'of', 'character', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x', 'str0': '-'}, 'snippet': "print(var0.rpartition('str0')[0])"}
Generated  translation
re. split ('str0 ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'last', 'part', 'of', 'a', 'string', 'before', 'the', 'character', 'str0'], 'words': ['get', 'the', 'last', 'part', 'of', 'a', 'string', 'before', 'the', 'character', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '-'}, 'snippet': "print(x.rsplit('str0', 1)[0])"}
Generated  translation
os. var0. split ('str0') [ - 1 ] 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'random', 'list', 'of', 'integers'], 'words': ['create', 'a', 'random', 'list', 'of', 'integers'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': '[int(1000 * random.random()) for i in range(10000)]'}
Generated  translation
list ( random. randint ( 0, 9 ) ) 
--------- B -----------
{'intent': {'gloss': ['google', 'app', 'engine', 'execute', 'gql', 'query', 'str0', 'with', 'parameter', 'str1'], 'words': ['google', 'app', 'engine', 'execute', 'gql', 'query', 'str0', 'with', 'parameter', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'select * from schedule where station = $1', 'str1': 'foo.key()'}, 'snippet': "db.gqlquery('str0', foo.key())"}
Generated  translation
cur. execute ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'string', 'into', 'datetime', 'using', 'the', 'format', 'str0'], 'words': ['convert', 'a', 'string', 'into', 'datetime', 'using', 'the', 'format', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '%y-%m-%d %h:%m:%s.%f'}, 'snippet': "datetime.datetime.strptime(string_date, 'str0')"}
Generated  translation
datetime. strptime ('str0 ','str0') 
--------- B -----------
{'intent': {'gloss': ['find', 'the', 'key', 'associated', 'with', 'the', 'largest', 'value', 'in', 'dictionary', 'var0', 'whilst', 'key', 'is', 'non', '-', 'zero', 'value'], 'words': ['find', 'the', 'key', 'associated', 'with', 'the', 'largest', 'value', 'in', 'dictionary', 'var0', 'whilst', 'key', 'is', 'non', '-', 'zero', 'value'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'max(k for k, v in var0.items() if v != 0)'}
Generated  translation
max ( var0, key = lambda x : abs ( x [ 1 ] ), reverse = true ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'largest', 'key', 'in', 'a', 'dictionary', 'var0', 'with', 'non', '-', 'zero', 'value'], 'words': ['get', 'the', 'largest', 'key', 'in', 'a', 'dictionary', 'var0', 'with', 'non', '-', 'zero', 'value'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'max(k for k, v in var0.items() if v != 0)'}
Generated  translation
max ( var0, key = lambda x : ( len ( x ), - 1 ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'index', 'of', 'rows', 'in', 'dataframe', 'var0', 'which', 'column', 'str0', 'matches', 'value', 'true'], 'words': ['get', 'index', 'of', 'rows', 'in', 'dataframe', 'var0', 'which', 'column', 'str0', 'matches', 'value', 'true'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'boolcol'}, 'snippet': "var0[var0['str0']].index.tolist()"}
Generated  translation
var0. groupby ('str0') ['str0']. transform ( sum ) = = 0 
--------- B -----------
{'intent': {'gloss': ['convert', 'pandas', 'index', 'in', 'a', 'dataframe', 'to', 'columns'], 'words': ['convert', 'pandas', 'index', 'in', 'a', 'dataframe', 'to', 'columns'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "df.reset_index(level=['tick', 'obs'])"}
Generated  translation
df. apply ( lambda x : x. columns ['r'], axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'html', 'from', 'the', 'current', 'web', 'page', 'of', 'a', 'selenium', 'driver'], 'words': ['get', 'the', 'html', 'from', 'the', 'current', 'web', 'page', 'of', 'a', 'selenium', 'driver'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "driver.execute_script('return document.documentelement.outerhtml;')"}
Generated  translation
driver. get _ html ( ) 
--------- B -----------
{'intent': {'gloss': ['replacing', 'nan', 'in', 'the', 'dataframe', 'var0', 'with', 'row', 'average'], 'words': ['replacing', 'nan', 'in', 'the', 'dataframe', 'var0', 'with', 'row', 'average'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': 'var0.fillna(var0.mean(axis=1), axis=1)'}
Generated  translation
var0. fillna ( method ='ffill ', inplace = true ) 
--------- B -----------
{'intent': {'gloss': ['print', 'elements', 'of', 'list', 'var0', 'seperated', 'by', 'tabs', 'str0'], 'words': ['print', 'elements', 'of', 'list', 'var0', 'seperated', 'by', 'tabs', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list', 'str0': '\t'}, 'snippet': "print('str0'.join(map(str, var0)))"}
Generated  translation
print ('str0 '. join ( [ str0 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['print', 'unicode', 'string', 'str0', 'with', 'utf', '-', '8'], 'words': ['print', 'unicode', 'string', 'str0', 'with', 'utf', '-', '8'], 'after': [' ', ' ', ' ', ' ', ' ', '', '', '']}, 'slot_map': {'str0': 'Ð¿Ñ\x80Ð¸'}, 'snippet': "print('str0'.encode('raw_unicode_escape'))"}
Generated  translation
print ('str0 '. decode ('utf - 8') ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'words': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'testlist'}, 'snippet': '[i for i, x in enumerate(var0) if x == 1]'}
Generated  translation
print ( var0. position ( 1 ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'words': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'testlist'}, 'snippet': '[i for i, x in enumerate(var0) if x == 1]'}
Generated  translation
print ( var0. position ( 1 ) ) 
--------- B -----------
{'intent': {'gloss': ['django', 'response', 'with', 'json', 'var0'], 'words': ['django', 'response', 'with', 'json', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'data'}, 'snippet': "return httpresponse(var0, mimetype='application/json')"}
Generated  translation
content. objects. create ( json ( var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['formate', 'each', 'string', 'cin', 'list', 'var0', 'into', 'pattern', 'str0'], 'words': ['formate', 'each', 'string', 'cin', 'list', 'var0', 'into', 'pattern', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'elements', 'str0': '%{0}%'}, 'snippet': "var0 = ['str0'.format(element) for element in var0]"}
Generated  translation
" " " str0 " " ". format ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['converting', 'two', 'lists', 'str0', 'and', 'str1', 'into', 'a', 'matrix'], 'words': ['converting', 'two', 'lists', 'str0', 'and', 'str1', 'into', 'a', 'matrix'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '[1, 2, 3]', 'str1': '[4, 5, 6]', '[ str0 ]': '[1, 2, 3]', '[ str1 ]': '[4, 5, 6]'}, 'snippet': 'np.column_stack(([ str0 ], [ str1 ]))'}
Generated  translation
numpy. merge ( [ str0, str1 ], [ str0 ] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'all', 'the', 'elements', 'except', 'strings', 'from', 'the', 'list', 'str0', '.'], 'words': ['get', 'all', 'the', 'elements', 'except', 'strings', 'from', 'the', 'list', 'str0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'lst'}, 'snippet': '[element for element in str0 if not isinstance(element, str)]'}
Generated  translation
[ word for word in str0 if i not in [ str0 ] ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'datetime', 'object', 'str0', 'to', 'seconds'], 'words': ['convert', 'datetime', 'object', 'str0', 'to', 'seconds'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '(1970, 1, 1)', '( str0 )': '(1970, 1, 1)'}, 'snippet': '(t - datetime.datetime( str0 )).total_seconds()'}
Generated  translation
datetime. datetime. strptime ('str0 ','% b % d, % y'). strftime ('% a') 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'highest', 'element', 'in', 'absolute', 'value', 'in', 'a', 'numpy', 'matrix', 'var0'], 'words': ['get', 'the', 'highest', 'element', 'in', 'absolute', 'value', 'in', 'a', 'numpy', 'matrix', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'max(var0.min(), var0.max(), key=abs)'}
Generated  translation
max ( var0, key = lambda x : abs ( x [ 1 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'string', 'var0', 'considering', 'the', 'spaces', 'str0'], 'words': ['split', 'a', 'string', 'var0', 'considering', 'the', 'spaces', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mystring', 'str0': ''}, 'snippet': "var0.replace(' ', '! !').split('!')"}
Generated  translation
re. split ('\ \ s + ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['how', 'to', 'convert', 'a', 'string', 'from', 'cp', '-', '1251', 'to', 'utf', '-', '8', '?'], 'words': ['how', 'to', 'convert', 'a', 'string', 'from', 'cp', '-', '1251', 'to', 'utf', '-', '8', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', '', '', '', '']}, 'slot_map': {}, 'snippet': "d.decode('cp1251').encode('utf8')"}
Generated  translation
" " " [UNK] " " ". encode ('utf - 8'). decode ('utf - 8') 
--------- B -----------
{'intent': {'gloss': ['python', 'save', 'list', 'var0', 'to', 'file', 'object', 'str0'], 'words': ['python', 'save', 'list', 'var0', 'to', 'file', 'object', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylist', 'str0': 'save.txt'}, 'snippet': "pickle.dump(var0, open('str0', 'wb'))"}
Generated  translation
[ var0. savefig ('str0') for var0 in s ] 
--------- B -----------
{'intent': {'gloss': ['search', 'for', 'occurrences', 'of', 'regex', 'pattern', 'str0', 'in', 'xml', 'string', 'var0'], 'words': ['search', 'for', 'occurrences', 'of', 'regex', 'pattern', 'str0', 'in', 'xml', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '>.*<', 'var0': 'line'}, 'snippet': "print(re.search('str0', var0).group(0))"}
Generated  translation
print ( var0. search ('str0'). group ( 1 ) ) 
--------- B -----------
{'intent': {'gloss': ['count', 'the', 'occurrences', 'of', 'items', 'in', 'list', 'var0'], 'words': ['count', 'the', 'occurrences', 'of', 'items', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': '[[x, var0.count(x)] for x in set(var0)]'}
Generated  translation
sum ( isinstance ( x, int ) for x in var0 ) 
--------- B -----------
{'intent': {'gloss': ['copy', 'all', 'values', 'in', 'a', 'column', 'str0', 'to', 'a', 'new', 'column', 'str1', 'in', 'a', 'pandas', 'data', 'frame', 'str2'], 'words': ['copy', 'all', 'values', 'in', 'a', 'column', 'str0', 'to', 'a', 'new', 'column', 'str1', 'in', 'a', 'pandas', 'data', 'frame', 'str2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'b', 'str1': 'd', 'str2': 'df'}, 'snippet': "str2['str1'] = str2['str0']"}
Generated  translation
str2 ['str0'] = df ['str1']. str ['str0'] 
--------- B -----------
{'intent': {'gloss': ['convert', 'string', 'var0', 'into', 'a', 'list', 'of', 'integers', 'var1'], 'words': ['convert', 'string', 'var0', 'into', 'a', 'list', 'of', 'integers', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'user_input', 'var1': 'user_list'}, 'snippet': "var1 = [int(number) for number in var0.split(',')]"}
Generated  translation
var1 = map ( int, var0. split ( ) ) 
--------- B -----------
{'intent': {'gloss': ['sorting', 'data', 'in', 'dataframe', 'pandas'], 'words': ['sorting', 'data', 'in', 'dataframe', 'pandas'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "df.sort_values(['system_num', 'dis'])"}
Generated  translation
df. sorting ( df. columns, axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'all', 'matches', 'with', 'regex', 'pattern', 'str0', 'in', 'list', 'of', 'string', 'var0'], 'words': ['get', 'all', 'matches', 'with', 'regex', 'pattern', 'str0', 'in', 'list', 'of', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '\\d+[xx]', 'var0': 'teststr'}, 'snippet': "[i for i in var0 if re.search('str0', i)]"}
Generated  translation
[ m. start ( ) for m in re. findall ('str0 ', var0 ) ] 
--------- B -----------
{'intent': {'gloss': ['resized', 'image', 'var0', 'to', 'width', ',', 'height', 'of', 'str0', 'with', 'filter', 'of', 'var1'], 'words': ['resized', 'image', 'var0', 'to', 'width', ',', 'height', 'of', 'str0', 'with', 'filter', 'of', 'var1'], 'after': [' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'image', 'str0': '(x, y)', 'var1': 'antialias', '( str0 )': '(x, y)'}, 'snippet': 'var0 = var0.resize(( str0 ), var0.var1)'}
Generated  translation
var0. reshape ( var0, - 1 ). size ( ) 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'list', 'of', 'integers', 'var0', 'from', 'a', 'file', 'str0'], 'words': ['get', 'a', 'list', 'of', 'integers', 'var0', 'from', 'a', 'file', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'lst', 'str0': 'filename.txt'}, 'snippet': "var0 = map(int, open('str0').readlines())"}
Generated  translation
var0 = ['str0']. isfile ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'at', 'every', 'space', 'followed', 'by', 'an', 'upper', '-', 'case', 'letter'], 'words': ['split', 'string', 'var0', 'at', 'every', 'space', 'followed', 'by', 'an', 'upper', '-', 'case', 'letter'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', '']}, 'slot_map': {'var0': 'input'}, 'snippet': "re.split('[ ](?=[a-z])', var0)"}
Generated  translation
re. findall ('\ \ w + (? : - \ \ w + ) ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['sorting', 'a', 'list', 'of', 'lists', 'in', 'python'], 'words': ['sorting', 'a', 'list', 'of', 'lists', 'in', 'python'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'c2.sort(key=lambda row: (row[2], row[1]))'}
Generated  translation
[ sorted ( item ) for item in sorted ( l, key = lambda t : t [ 0 ] ) ] 
--------- B -----------
{'intent': {'gloss': ['delete', 'all', 'characters', 'str0', 'in', 'string', 'str1'], 'words': ['delete', 'all', 'characters', 'str0', 'in', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'i', 'str1': 'it is icy'}, 'snippet': '"""str1""".replace(\'str0\', \'\')'}
Generated  translation
re. sub ('" ( [ a - z ] ) ','\ \ 1 ','str1') 
--------- B -----------
{'intent': {'gloss': ['sum', 'the', 'corresponding', 'decimal', 'values', 'for', 'binary', 'values', 'of', 'each', 'boolean', 'element', 'in', 'list', 'var0'], 'words': ['sum', 'the', 'corresponding', 'decimal', 'values', 'for', 'binary', 'values', 'of', 'each', 'boolean', 'element', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'sum(1 << i for i, b in enumerate(var0) if b)'}
Generated  translation
sum ( map ( int, var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'dictionaries', 'var0', 'by', 'the', 'value', 'of', 'the', 'dictionary', 'key', 'var1'], 'words': ['sort', 'a', 'list', 'of', 'dictionaries', 'var0', 'by', 'the', 'value', 'of', 'the', 'dictionary', 'key', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list_to_be_sorted', 'var1': 'name'}, 'snippet': "newlist = sorted(var0, key=lambda k: k['var1'])"}
Generated  translation
sorted ( var0, key = lambda x : var1 [ x ] ['var0'] ) 
--------- B -----------
{'intent': {'gloss': ['write', 'var0', 'to', 'a', 'binary', 'file', 'var1'], 'words': ['write', 'var0', 'to', 'a', 'binary', 'file', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'newfilebytes', 'var1': 'newfile'}, 'snippet': "var1.write(struct.pack('5b', *var0))"}
Generated  translation
b = open ( var1,'r') 
--------- B -----------
{'intent': {'gloss': ['find', 'intersection', 'data', 'between', 'series', 'var0', 'and', 'series', 'var1'], 'words': ['find', 'intersection', 'data', 'between', 'series', 'var0', 'and', 'series', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's1', 'var1': 's2'}, 'snippet': 'pd.series(list(set(var0).intersection(set(var1))))'}
Generated  translation
print ( var0. groupby ('var1'). size ( ) ) 
--------- B -----------
{'intent': {'gloss': ['format', 'string', 'str0', 'with', 'variables', 'var0', 'and', 'var1'], 'words': ['format', 'string', 'str0', 'with', 'variables', 'var0', 'and', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '({} goals, ${})', 'var0': 'goals', 'var1': 'penalties', '( str0 )': '({} goals, ${})'}, 'snippet': '"""str0""".format(self.var0, self.var1)'}
Generated  translation
' str0'+ var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['combine', 'elements', 'of', 'each', 'list', 'in', 'list', 'var0', 'into', 'digits', 'of', 'a', 'single', 'integer'], 'words': ['combine', 'elements', 'of', 'each', 'list', 'in', 'list', 'var0', 'into', 'digits', 'of', 'a', 'single', 'integer'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': "[''.join(str(d) for d in x) for x in var0]"}
Generated  translation
map ( int, re. findall ('\ \ d + ', var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['substitute', 'ascii', 'letters', 'in', 'string', 'str0', 'with', 'empty', 'string', 'str1'], 'words': ['substitute', 'ascii', 'letters', 'in', 'string', 'str0', 'with', 'empty', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'aas30dsa20', 'str1': ''}, 'snippet': "re.sub('\\\\d', 'str1', 'str0')"}
Generated  translation
" " " str0 " " ". replace ( "'",'str1') 
--------- B -----------
{'intent': {'gloss': ['increment', 'a', 'value', 'with', 'leading', 'zeroes', 'in', 'a', 'number', 'var0'], 'words': ['increment', 'a', 'value', 'with', 'leading', 'zeroes', 'in', 'a', 'number', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'str(int(var0) + 1).zfill(len(var0))'}
Generated  translation
min ( var0, key = lambda x : abs ( x - 1 ) ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'a', 'pandas', 'dataframe', 'var0', "'", 's', 'index', 'is', 'sorted'], 'words': ['check', 'if', 'a', 'pandas', 'dataframe', 'var0', "'", 's', 'index', 'is', 'sorted'], 'after': [' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': 'all(var0.index[:-1] <= var0.index[1:])'}
Generated  translation
var0. groupby ('index'). size ( ). reset _ index ( drop = true ) 
--------- B -----------
{'intent': {'gloss': ['create', 'multidimensional', 'array', 'var0', 'with', '3', 'rows', 'and', '2', 'columns', 'in', 'python'], 'words': ['create', 'multidimensional', 'array', 'var0', 'with', '3', 'rows', 'and', '2', 'columns', 'in', 'python'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'matrix'}, 'snippet': 'var0 = [[a, b], [c, d], [e, f]]'}
Generated  translation
var0. groupby ( ['var0 ','2'] ). size ( ) 
--------- B -----------
{'intent': {'gloss': ['sorting', 'a', 'python', 'list', 'by', 'two', 'criteria'], 'words': ['sorting', 'a', 'python', 'list', 'by', 'two', 'criteria'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'sorted(list, key=lambda x: (x[0], -x[1]))'}
Generated  translation
sorted ( list ( range ( len ( s ) ) ), key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['click', 'a', 'href', 'button', 'having', 'text', 'str0', 'with', 'selenium'], 'words': ['click', 'a', 'href', 'button', 'having', 'text', 'str0', 'with', 'selenium'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'send inmail'}, 'snippet': "driver.findelement(by.linktext('str0')).click()"}
Generated  translation
driver. find _ element _ by _ css _ selector ('str0'). click ( ) 
--------- B -----------
{'intent': {'gloss': ['click', 'a', 'href', 'button', 'with', 'text', 'str0', 'with', 'selenium'], 'words': ['click', 'a', 'href', 'button', 'with', 'text', 'str0', 'with', 'selenium'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'send inmail'}, 'snippet': "driver.find_element_by_link_text('str0').click()"}
Generated  translation
driver. find _ element _ by _ css _ selector ('str0'). click ( ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'var0', 'by', 'length', 'of', 'value', 'in', 'tuple'], 'words': ['sort', 'a', 'list', 'var0', 'by', 'length', 'of', 'value', 'in', 'tuple'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': 'var0.sort(key=lambda t: len(t[1]), reverse=true)'}
Generated  translation
print ( sorted ( var0, key = lambda x : len ( x ), len ( x ) ) ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'array', 'var0', 'into', 'a', 'list'], 'words': ['convert', 'array', 'var0', 'into', 'a', 'list'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'numpy.array(var0).reshape(-1).tolist()'}
Generated  translation
list ( map ( int, var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['swap', 'keys', 'with', 'values', 'in', 'a', 'dictionary', 'var0'], 'words': ['swap', 'keys', 'with', 'values', 'in', 'a', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'res = dict((v, k) for k, v in var0.items())'}
Generated  translation
dict ( ( v, k ) for k, v in var0. items ( ) ) 
--------- B -----------
{'intent': {'gloss': ['open', 'a', 'background', 'process', 'str0', 'with', 'arguments', 'str1'], 'words': ['open', 'a', 'background', 'process', 'str0', 'with', 'arguments', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'background-process', 'str1': 'arguments'}, 'snippet': "subprocess.popen(['str0', 'str1'])"}
Generated  translation
os. system ('str0') 
--------- B -----------
{'intent': {'gloss': ['find', 'duplicate', 'names', 'in', 'column', 'str0', 'of', 'the', 'dataframe', 'var0'], 'words': ['find', 'duplicate', 'names', 'in', 'column', 'str0', 'of', 'the', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'name', 'var0': 'x'}, 'snippet': "var0.set_index('str0').index.get_duplicates()"}
Generated  translation
var0. groupby ('str0'). agg ( lambda x : x. duplicated ( ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', '5th', 'item', 'of', 'a', 'generator'], 'words': ['get', 'the', '5th', 'item', 'of', 'a', 'generator'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'next(itertools.islice(range(10), 5, 5 + 1))'}
Generated  translation
print ( 2 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'list', 'of', 'string', 'numbers', 'into', 'list', 'of', 'integers'], 'words': ['convert', 'list', 'of', 'string', 'numbers', 'into', 'list', 'of', 'integers'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "map(int, eval(input('enter the unfriendly numbers: ')))"}
Generated  translation
[ int ( i ) for i in range ( 10 ) ] 
--------- B -----------
{'intent': {'gloss': ['how', 'do', 'i', 'sort', 'a', 'list', 'of', 'dictionaries', 'by', 'values', 'of', 'the', 'dictionary', 'in', 'python', '?'], 'words': ['how', 'do', 'i', 'sort', 'a', 'list', 'of', 'dictionaries', 'by', 'values', 'of', 'the', 'dictionary', 'in', 'python', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "list_of_dicts.sort(key=operator.itemgetter('name'))"}
Generated  translation
sorted ( list ( data. values ( ) ), key = lambda x : x [ 1 ] ['a'] ) 
--------- B -----------
{'intent': {'gloss': ['how', 'do', 'i', 'sort', 'a', 'list', 'of', 'dictionaries', 'by', 'values', 'of', 'the', 'dictionary', 'in', 'python', '?'], 'words': ['how', 'do', 'i', 'sort', 'a', 'list', 'of', 'dictionaries', 'by', 'values', 'of', 'the', 'dictionary', 'in', 'python', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "list_of_dicts.sort(key=operator.itemgetter('age'))"}
Generated  translation
sorted ( list ( data. values ( ) ), key = lambda x : x [ 1 ] ['a'] ) 
--------- B -----------
{'intent': {'gloss': ['join', 'together', 'with', 'str0', 'elements', 'inside', 'a', 'list', 'indexed', 'with', 'str1', 'within', 'a', 'dictionary', 'var0'], 'words': ['join', 'together', 'with', 'str0', 'elements', 'inside', 'a', 'list', 'indexed', 'with', 'str1', 'within', 'a', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': ',', 'str1': 'category', 'var0': 'trans'}, 'snippet': '"""str0""".join(var0[\'str1\'])'}
Generated  translation
[ k for k, v in zip ( var0. items ( ) ) if k! ='str1'] 
--------- B -----------
{'intent': {'gloss': ['get', 'json', 'data', 'from', 'restful', 'service', 'str0'], 'words': ['get', 'json', 'data', 'from', 'restful', 'service', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'url'}, 'snippet': "json.load(urllib.request.urlopen('str0'))"}
Generated  translation
json. loads ( request. post. get ('str0') ) 
--------- B -----------
{'intent': {'gloss': ['decode', 'a', 'hex', 'string', 'str0', 'to', 'utf', '-', '8', '.'], 'words': ['decode', 'a', 'hex', 'string', 'str0', 'to', 'utf', '-', '8', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', '', '', '']}, 'slot_map': {'str0': '4a4b4c'}, 'snippet': "bytes.fromhex('str0').decode('utf-8')"}
Generated  translation
str0. decode ('utf - 8 ','ignore') 
--------- B -----------
{'intent': {'gloss': ['concatenate', 'elements', 'of', 'list', 'var0', 'by', 'a', 'colon', 'str0'], 'words': ['concatenate', 'elements', 'of', 'list', 'var0', 'by', 'a', 'colon', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'b', 'str0': ':'}, 'snippet': '"""str0""".join(str(x) for x in var0)'}
Generated  translation
np. concatenate ( ( var0 [ str0 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'key', 'str0', 'from', 'dictionary', 'var0'], 'words': ['remove', 'key', 'str0', 'from', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'c', 'var0': 'd'}, 'snippet': "{i: var0[i] for i in var0 if i != 'str0'}"}
Generated  translation
var0. pop ('str0 ', none ) 
--------- B -----------
{'intent': {'gloss': ['cut', 'off', 'the', 'last', 'word', 'of', 'a', 'sentence', 'var0'], 'words': ['cut', 'off', 'the', 'last', 'word', 'of', 'a', 'sentence', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'content'}, 'snippet': '""" """.join(var0.split(\' \')[:-1])'}
Generated  translation
var0. split ('\ \ 1') [ : - 1 ] 
--------- B -----------
{'intent': {'gloss': ['sum', 'all', 'elements', 'of', 'nested', 'list', 'var0'], 'words': ['sum', 'all', 'elements', 'of', 'nested', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': 'sum(sum(i) if isinstance(i, list) else i for i in var0)'}
Generated  translation
sum ( sum ( x ) for x in var0 ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'directory', 'str0', 'exists', 'and', 'create', 'it', 'if', 'necessary'], 'words': ['check', 'if', 'directory', 'str0', 'exists', 'and', 'create', 'it', 'if', 'necessary'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'directory'}, 'snippet': 'if not os.path.exists(str0):\n    os.makedirs(str0)'}
Generated  translation
os. path. dirname ( os. path. exists ('str0') ) 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'dictionary', 'var0', 'of', 'key', '-', 'value', 'pairs', 'in', 'pymongo', 'cursor', 'var1'], 'words': ['get', 'a', 'dictionary', 'var0', 'of', 'key', '-', 'value', 'pairs', 'in', 'pymongo', 'cursor', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'records', 'var1': 'cursor'}, 'snippet': "var0 = dict((record['_id'], record) for record in var1)"}
Generated  translation
var1 [ 0 ]. dict ( var0 [ k ] ) 
--------- B -----------
{'intent': {'gloss': ['count', 'the', 'occurrences', 'of', 'items', 'in', 'list', 'var0'], 'words': ['count', 'the', 'occurrences', 'of', 'items', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': 'dict((x, var0.count(x)) for x in set(var0))'}
Generated  translation
sum ( isinstance ( x, int ) for x in var0 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'list', 'of', 'indexes', 'of', 'rows', 'where', 'column', 'str0', 'values', 'match', 'true'], 'words': ['get', 'list', 'of', 'indexes', 'of', 'rows', 'where', 'column', 'str0', 'values', 'match', 'true'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'boolcol'}, 'snippet': "df[df['str0'] == true].index.tolist()"}
Generated  translation
[ i for i, j in enumerate ( str0 ) if v ] 
--------- B -----------
{'intent': {'gloss': ['remove', 'a', 'div', 'with', 'a', 'id', 'str0', 'using', 'beautifulsoup'], 'words': ['remove', 'a', 'div', 'with', 'a', 'id', 'str0', 'using', 'beautifulsoup'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'main-content'}, 'snippet': "soup.find('div', id='str0').decompose()"}
Generated  translation
sys. path. insert ( 0,'str0') 
--------- B -----------
{'intent': {'gloss': ['filter', 'rows', 'containing', 'key', 'word', 'var0', 'in', 'column', 'var1'], 'words': ['filter', 'rows', 'containing', 'key', 'word', 'var0', 'in', 'column', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'ball', 'var1': 'ids'}, 'snippet': "df[df['var1'].str.contains('var0')]"}
Generated  translation
[ var1 ['var0']. filter ( var0. var1 ) ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'list', 'var0', 'into', 'a', 'comma', 'separated', 'string'], 'words': ['convert', 'list', 'var0', 'into', 'a', 'comma', 'separated', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list_of_ints'}, 'snippet': '""",""".join([str(i) for i in var0])'}
Generated  translation
" " " " " ". join ( str ( i ) for i in var0 ) 
--------- B -----------
{'intent': {'gloss': ['unzip', 'list', 'var0'], 'words': ['unzip', 'list', 'var0'], 'after': [' ', ' ', '']}, 'slot_map': {'var0': 'original'}, 'snippet': 'result = [a for a, b in var0], [b for a, b in var0]'}
Generated  translation
var0 = [ ] 
--------- B -----------
{'intent': {'gloss': ['unzip', 'list', 'var0', 'and', 'return', 'a', 'generator'], 'words': ['unzip', 'list', 'var0', 'and', 'return', 'a', 'generator'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'original'}, 'snippet': 'result = (a for a, b in var0), (b for a, b in var0)'}
Generated  translation
return list ( unzip. unzip ( var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['reverse', 'the', 'keys', 'and', 'values', 'in', 'a', 'dictionary', 'var0'], 'words': ['reverse', 'the', 'keys', 'and', 'values', 'in', 'a', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mydictionary'}, 'snippet': '{i[1]: i[0] for i in list(var0.items())}'}
Generated  translation
dict ( ( v, k ) for k, v in var0. items ( ) ) 
--------- B -----------
{'intent': {'gloss': ['call', 'multiple', 'bash', 'function', '‘vasp', '’', 'and', '‘tee', 'tee', '_', 'output', '’', 'using', '‘|', '’'], 'words': ['call', 'multiple', 'bash', 'function', '‘vasp', '’', 'and', '‘tee', 'tee', '_', 'output', '’', 'using', '‘|', '’'], 'after': [' ', ' ', ' ', ' ', '', ' ', ' ', ' ', '', '', '', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "subprocess.check_call('vasp | tee tee_output', shell=true)"}
Generated  translation
call ( ‘ tee _ output, ‘ tee _ tee tee tee ) 
--------- B -----------
{'intent': {'gloss': ['download', 'a', 'file', 'str0', 'over', 'http', 'and', 'save', 'to', 'str1'], 'words': ['download', 'a', 'file', 'str0', 'over', 'http', 'and', 'save', 'to', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'http://www.example.com/songs/mp3.mp3', 'str1': 'mp3.mp3'}, 'snippet': "urllib.request.urlretrieve('str0', 'str1')"}
Generated  translation
testfile = urllib. request. urlopener ( ) testfile. retrieve ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['encode', 'binary', 'string', 'str0', 'to', 'base64', 'code'], 'words': ['encode', 'binary', 'string', 'str0', 'to', 'base64', 'code'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'your string'}, 'snippet': "base64.b64encode(bytes('str0', 'utf-8'))"}
Generated  translation
binascii. encode ('str0') 
--------- B -----------
{'intent': {'gloss': ['identify', 'duplicate', 'values', 'in', 'list', 'var0'], 'words': ['identify', 'duplicate', 'values', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylist'}, 'snippet': '[k for k, v in list(counter(var0).items()) if v > 1]'}
Generated  translation
new _ list = [ ( i ) for i in var0 ] 
--------- B -----------
{'intent': {'gloss': ['subscript', 'text', 'str0', 'with', 'str1', 'as', 'subscripted', 'in', 'matplotlib', 'labels', 'for', 'arrays', 'str2', 'and', 'str3', '.'], 'words': ['subscript', 'text', 'str0', 'with', 'str1', 'as', 'subscripted', 'in', 'matplotlib', 'labels', 'for', 'arrays', 'str2', 'and', 'str3', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'h20', 'str1': '2', 'str2': 'x', 'str3': 'y'}, 'snippet': "plt.plot(str2, str3, label='$h_2o$')"}
Generated  translation
ax. set _ yticklabels ( ['str2 ','str3'] ) 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'list', 'containing', 'the', 'indexes', 'of', 'rows', 'where', 'the', 'value', 'of', 'column', 'str0', 'in', 'dataframe', 'var0', 'are', 'equal', 'to', 'true'], 'words': ['create', 'a', 'list', 'containing', 'the', 'indexes', 'of', 'rows', 'where', 'the', 'value', 'of', 'column', 'str0', 'in', 'dataframe', 'var0', 'are', 'equal', 'to', 'true'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'boolcol', 'var0': 'df'}, 'snippet': "var0.iloc[np.flatnonzero(var0['str0'])]"}
Generated  translation
[ var0 ['str0'] for var0 in range ( len ( var0 ) ) ] 
--------- B -----------
{'intent': {'gloss': ['replace', 'all', 'occurences', 'of', 'newlines', 'str0', 'with', 'str1', 'in', 'dataframe', 'var0'], 'words': ['replace', 'all', 'occurences', 'of', 'newlines', 'str0', 'with', 'str1', 'in', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '\n', 'str1': '<br>', 'var0': 'df'}, 'snippet': "var0.replace({'str0': 'str1'}, regex=true)"}
Generated  translation
var0. replace ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['replace', 'all', 'occurrences', 'of', 'a', 'string', 'str0', 'by', 'string', 'str1', 'in', 'a', 'pandas', 'data', 'frame', 'var0'], 'words': ['replace', 'all', 'occurrences', 'of', 'a', 'string', 'str0', 'by', 'string', 'str1', 'in', 'a', 'pandas', 'data', 'frame', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '\n', 'str1': '<br>', 'var0': 'df'}, 'snippet': "var0.replace({'str0': 'str1'}, regex=true)"}
Generated  translation
var0. replace ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'list', 'containing', 'each', 'two', 'adjacent', 'letters', 'in', 'string', 'var0', 'as', 'its', 'elements'], 'words': ['create', 'a', 'list', 'containing', 'each', 'two', 'adjacent', 'letters', 'in', 'string', 'var0', 'as', 'its', 'elements'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'word'}, 'snippet': '[(x + y) for x, y in zip(var0, var0[1:])]'}
Generated  translation
print (''. join ( [ str ( i ) for i in zip ( var0 [ 1 : ], var0 [ - 1 ] ) ) ] ) 
--------- B -----------
{'intent': {'gloss': ['click', 'a', 'href', 'button', 'str0', 'with', 'selenium'], 'words': ['click', 'a', 'href', 'button', 'str0', 'with', 'selenium'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'send'}, 'snippet': "driver.find_element_by_partial_link_text('str0').click()"}
Generated  translation
driver. find _ element _ by _ css _ selector ('str0'). click ( ) 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'by', 'words', 'that', 'ends', 'with', 'str0'], 'words': ['split', 'string', 'var0', 'by', 'words', 'that', 'ends', 'with', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's', 'str0': 'd'}, 'snippet': "re.findall('\\\\b(\\\\w+)d\\\\b', var0)"}
Generated  translation
re. split ('\ \ s + ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['find', 'all', 'words', 'in', 'a', 'string', 'var0', 'that', 'start', 'with', 'the', 'str0', 'sign'], 'words': ['find', 'all', 'words', 'in', 'a', 'string', 'var0', 'that', 'start', 'with', 'the', 'str0', 'sign'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mystring', 'str0': '$'}, 'snippet': "[word for word in var0.split() if word.startswith('str0')]"}
Generated  translation
re. findall ('\ \ w + ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'unix', 'timestamp', 'str0', 'to', 'formatted', 'string', 'str1'], 'words': ['convert', 'unix', 'timestamp', 'str0', 'to', 'formatted', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '1347517370', 'str1': '%y-%m-%d %h:%m:%s'}, 'snippet': "time.strftime('str1', time.localtime(1347517370))"}
Generated  translation
formatter ='str1 '.'
--------- B -----------
{'intent': {'gloss': ['display', 'the', 'float', 'str0', 'as', 'a', 'percentage'], 'words': ['display', 'the', 'float', 'str0', 'as', 'a', 'percentage'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '1/3*100'}, 'snippet': "print('{0:.0f}%'.format(1.0 / 3 * 100))"}
Generated  translation
float ('str0') 
--------- B -----------
{'intent': {'gloss': ['write', 'records', 'in', 'dataframe', 'var0', 'to', 'table', 'str0', 'in', 'schema', 'str1'], 'words': ['write', 'records', 'in', 'dataframe', 'var0', 'to', 'table', 'str0', 'in', 'schema', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'test', 'str1': 'a_schema'}, 'snippet': "var0.to_sql('str0', engine, schema='str1')"}
Generated  translation
var0. to _ csv ('str1 ', cols = ['str0'] ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'elements', 'from', 'list', 'var0', 'that', 'have', 'an', 'index', 'number', 'mentioned', 'in', 'list', 'var1'], 'words': ['remove', 'elements', 'from', 'list', 'var0', 'that', 'have', 'an', 'index', 'number', 'mentioned', 'in', 'list', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'oldlist', 'var1': 'removelist'}, 'snippet': 'newlist = [v for i, v in enumerate(var0) if i not in var1]'}
Generated  translation
[ x for x in var0 if x not in var1 ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'tuple', 'of', 'tuples', 'str0', 'to', 'tuple'], 'words': ['convert', 'tuple', 'of', 'tuples', 'str0', 'to', 'tuple'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "(('aa',), ('bb',), ('cc',))", '( str0 )': "(('aa',), ('bb',), ('cc',))"}, 'snippet': 'from functools import reduce\nreduce(lambda a, b: a + b, ( str0 ))'}
Generated  translation
tuple ( zip ( * [ ( str0 ), ( str0 ) ] ) ) 
--------- B -----------
{'intent': {'gloss': ['python', 'pandas', ':', 'how', 'to', 'replace', 'a', 'characters', 'in', 'a', 'column', 'of', 'a', 'dataframe', '?'], 'words': ['python', 'pandas', ':', 'how', 'to', 'replace', 'a', 'characters', 'in', 'a', 'column', 'of', 'a', 'dataframe', '?'], 'after': [' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "df['range'].replace(',', '-', inplace=true)"}
Generated  translation
df. apply ( lambda x : x. replace ('[ ^ a - za - z ] ','' ) ) 
--------- B -----------
{'intent': {'gloss': ['filter', 'dataframe', 'var0', 'by', 'values', 'in', 'column', 'var1', 'that', 'appear', 'more', 'than', 'once'], 'words': ['filter', 'dataframe', 'var0', 'by', 'values', 'in', 'column', 'var1', 'that', 'appear', 'more', 'than', 'once'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'var1': 'a'}, 'snippet': "var0.groupby('var1').filter(lambda x: len(x) > 1)"}
Generated  translation
var0. groupby ( var1'). size ( ). groupby ( lambda x : x. var0 ['var1']. fillna ( 0 ) ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'datetime', 'column', 'str0', 'of', 'pandas', 'dataframe', 'str1', 'to', 'ordinal'], 'words': ['convert', 'datetime', 'column', 'str0', 'of', 'pandas', 'dataframe', 'str1', 'to', 'ordinal'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'date', 'str1': 'df'}, 'snippet': "str1['str0'].apply(lambda x: x.toordinal())"}
Generated  translation
str1. str ['str0'] = df ['str0']. astype ( int ) 
--------- B -----------
{'intent': {'gloss': ['reverse', 'sort', 'list', 'of', 'dicts', 'var0', 'by', 'value', 'for', 'key', 'var1'], 'words': ['reverse', 'sort', 'list', 'of', 'dicts', 'var0', 'by', 'value', 'for', 'key', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l', 'var1': 'time'}, 'snippet': "var0 = sorted(var0, key=itemgetter('var1'), reverse=true)"}
Generated  translation
sorted ( var0, key = lambda i : var1 [ i ] ['var0'] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'rows', 'of', 'dataframe', 'var0', 'that', 'match', 'regex', 'str0'], 'words': ['get', 'rows', 'of', 'dataframe', 'var0', 'that', 'match', 'regex', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': '(hel|just)', '( str0 )': '(hel|just)'}, 'snippet': "var0.loc[var0[0].str.contains('str0')]"}
Generated  translation
var0. loc [ var0 ['str0']. isin ( var0 ) ] 
--------- B -----------
{'intent': {'gloss': ['sort', 'list', 'var0', 'based', 'on', 'second', 'index', 'of', 'each', 'string', 'var1'], 'words': ['sort', 'list', 'var0', 'based', 'on', 'second', 'index', 'of', 'each', 'string', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list_of_strings', 'var1': 's'}, 'snippet': "sorted(var0, key=lambda var1: var1.split(',')[1])"}
Generated  translation
var0. sort ( key = lambda x : x [ 2 ] ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'dictionaries', 'var0', 'by', 'values', 'in', 'key', 'var1', 'in', 'descending', 'order'], 'words': ['sort', 'a', 'list', 'of', 'dictionaries', 'var0', 'by', 'values', 'in', 'key', 'var1', 'in', 'descending', 'order'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l', 'var1': 'name'}, 'snippet': "newlist = sorted(var0, key=itemgetter('var1'), reverse=true)"}
Generated  translation
sorted ( var0, key = lambda i : var1. index ( list ( i. values ( ) ) [ 0 ], reverse = true ) ) 
--------- B -----------
{'intent': {'gloss': ['django', 'get', 'maximum', 'value', 'associated', 'with', 'field', 'str0', 'in', 'model', 'var0'], 'words': ['django', 'get', 'maximum', 'value', 'associated', 'with', 'field', 'str0', 'in', 'model', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'added', 'var0': 'authorizedemail'}, 'snippet': "var0.objects.filter(group=group).order_by('-added')[0]"}
Generated  translation
var0. objects. filter ( id = 1 ). get ('str0') 
--------- B -----------
{'intent': {'gloss': ['download', 'a', 'file', 'str0', 'over', 'http'], 'words': ['download', 'a', 'file', 'str0', 'over', 'http'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'http://www.example.com/'}, 'snippet': "response = urllib.request.urlopen('str0')\nhtml = response.read()"}
Generated  translation
open ('str0 ','r'). write ('str0') 
--------- B -----------
{'intent': {'gloss': ['convert', 'epoch', 'time', 'represented', 'as', 'milliseconds', 'var0', 'to', 'string', 'using', 'format', 'str0'], 'words': ['convert', 'epoch', 'time', 'represented', 'as', 'milliseconds', 'var0', 'to', 'string', 'using', 'format', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's', 'str0': '%y-%m-%d %h:%m:%s.%f'}, 'snippet': "datetime.datetime.fromtimestamp(var0).strftime('str0')"}
Generated  translation
datetime. datetime. fromtimestamp ( var0 / 1000. 0 ) 
--------- B -----------
{'intent': {'gloss': ['upload', 'file', 'using', 'ftp'], 'words': ['upload', 'file', 'using', 'ftp'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "ftp.storlines('stor ' + filename, open(filename, 'r'))"}
Generated  translation
ftp. retrbinary ('date filename ', file ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'list', 'of', 'lists', 'var0', 'to', 'list', 'of', 'integers'], 'words': ['convert', 'list', 'of', 'lists', 'var0', 'to', 'list', 'of', 'integers'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': "[int(''.join(str(d) for d in x)) for x in var0]"}
Generated  translation
[ map ( int, sublist ) for sublist in var0 ] 
--------- B -----------
{'intent': {'gloss': ['replace', 'a', 'separate', 'word', 'str0', 'by', 'str1', 'in', 'a', 'string', 'str2'], 'words': ['replace', 'a', 'separate', 'word', 'str0', 'by', 'str1', 'in', 'a', 'string', 'str2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'h3', 'str1': 'h1', 'str2': 'text'}, 'snippet': "re.sub('\\\\bh3\\\\b', 'str1', str2)"}
Generated  translation
re. sub ('(. * ) ','str2 ','str0') 
--------- B -----------
{'intent': {'gloss': ['insert', 'data', 'from', 'a', 'string', 'var0', 'to', 'sqlite', 'db', 'var1'], 'words': ['insert', 'data', 'from', 'a', 'string', 'var0', 'to', 'sqlite', 'db', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'testfield', 'var1': 'c'}, 'snippet': 'var1.execute("insert into test values (?, \'bar\')", (var0,))'}
Generated  translation
var1. execute ('insert or replace into table values ( % s )'% ( var0, ) ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'all', 'special', 'characters', ',', 'punctuation', 'and', 'spaces', 'from', 'a', 'string', 'var0', 'using', 'regex'], 'words': ['remove', 'all', 'special', 'characters', ',', 'punctuation', 'and', 'spaces', 'from', 'a', 'string', 'var0', 'using', 'regex'], 'after': [' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mystring'}, 'snippet': "re.sub('[^a-za-z0-9]+', '', var0)"}
Generated  translation
re. sub ('[ ^ \ \ w + ] ','', var0 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'list', 'containing', 'the', 'sum', 'of', 'each', 'element', 'var0', 'in', 'list', 'var1', 'plus', 'the', 'previous', 'elements'], 'words': ['get', 'a', 'list', 'containing', 'the', 'sum', 'of', 'each', 'element', 'var0', 'in', 'list', 'var1', 'plus', 'the', 'previous', 'elements'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'i', 'var1': 'l'}, 'snippet': '[sum(var1[:var0]) for var0, _ in enumerate(var1)]'}
Generated  translation
[ sum ( x ) for x in var1 if x. split ( ) ] 
--------- B -----------
{'intent': {'gloss': ['beautifulsoup', 'find', 'all', 'str0', 'elements', 'in', 'html', 'string', 'var0', 'with', 'class', 'of', 'str1'], 'words': ['beautifulsoup', 'find', 'all', 'str0', 'elements', 'in', 'html', 'string', 'var0', 'with', 'class', 'of', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'span', 'var0': 'soup', 'str1': 'stargryb sp'}, 'snippet': "var0.find_all('str0', {'class': 'str1'})"}
Generated  translation
soup. findall ('str0 ', attrs = {'str1':'str1'} ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'duplicate', 'elements', 'from', 'list', 'str0'], 'words': ['remove', 'duplicate', 'elements', 'from', 'list', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'l'}, 'snippet': 'list(dict((x[0], x) for x in str0).values())'}
Generated  translation
[ k for k, g in itertools. groupby ( [ str0 ] ) ] 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'words': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'testlist'}, 'snippet': 'for i in [i for i, x in enumerate(var0) if x == 1]:\n    pass'}
Generated  translation
print ( var0. position ( 1 ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'words': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'testlist'}, 'snippet': 'for i in (i for i, x in enumerate(var0) if x == 1):\n    pass'}
Generated  translation
print ( var0. position ( 1 ) ) 
--------- B -----------
{'intent': {'gloss': ['python', 'split', 'a', 'string', 'using', 'regex'], 'words': ['python', 'split', 'a', 'string', 'using', 'regex'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "re.findall('(.+?):(.+?)\\\\b ?', text)"}
Generated  translation
re. findall ('\ \ w + ','str0') 
--------- B -----------
{'intent': {'gloss': ['get', 'all', 'text', 'that', 'is', 'not', 'enclosed', 'within', 'square', 'brackets', 'in', 'string', 'var0'], 'words': ['get', 'all', 'text', 'that', 'is', 'not', 'enclosed', 'within', 'square', 'brackets', 'in', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'example_str'}, 'snippet': "re.findall('(.*?)\\\\[.*?\\\\]', var0)"}
Generated  translation
re. sub ('\ \ [ ( [ ^ \ \ ] ] * ) \ \ ] ','', var0 ) 
--------- B -----------
{'intent': {'gloss': ['read', 'a', 'file', 'str0', 'into', 'a', 'list', 'var0'], 'words': ['read', 'a', 'file', 'str0', 'into', 'a', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'c:/name/mydocuments/numbers', 'var0': 'data'}, 'snippet': "var0 = [line.strip() for line in open('str0', 'r')]"}
Generated  translation
var0 = [ open ('str0'). read ( ) ] 
--------- B -----------
{'intent': {'gloss': ['loop', 'through', 'the', 'ip', 'address', 'range', 'str0'], 'words': ['loop', 'through', 'the', 'ip', 'address', 'range', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '192.168.x.x'}, 'snippet': 'for i, j in product(list(range(256)), list(range(256))):\n    pass'}
Generated  translation
globals ( ) ['str0']. format ( * args ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'last', 'comma', 'character', 'str0', 'in', 'string', 'var0'], 'words': ['remove', 'last', 'comma', 'character', 'str0', 'in', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': ',', 'var0': 's'}, 'snippet': '"""""".join(var0.rsplit(\'str0\', 1))'}
Generated  translation
var0. replace ('str0 ','' ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'dictionary', 'var0', 'based', 'on', 'key', 'var1', 'in', 'descending', 'order'], 'words': ['sort', 'a', 'list', 'of', 'dictionary', 'var0', 'based', 'on', 'key', 'var1', 'in', 'descending', 'order'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l', 'var1': 'time'}, 'snippet': "var0 = sorted(var0, key=lambda a: a['var1'], reverse=true)"}
Generated  translation
sorted ( var0, key = lambda tup : var1 [ : : - 1 ], reverse = true ) 
--------- B -----------
{'intent': {'gloss': ['find', 'the', 'string', 'in', 'var0', 'between', 'two', 'special', 'characters', 'str0', 'and', 'str1'], 'words': ['find', 'the', 'string', 'in', 'var0', 'between', 'two', 'special', 'characters', 'str0', 'and', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'your_string', 'str0': '[', 'str1': ']'}, 'snippet': "re.search('\\\\[(.*)\\\\]', var0).group(1)"}
Generated  translation
re. findall ('\ \ s + ','str0 ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'integer', 'var0', 'into', 'an', 'unassigned', 'integer'], 'words': ['convert', 'integer', 'var0', 'into', 'an', 'unassigned', 'integer'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'number'}, 'snippet': "struct.unpack('h', struct.pack('h', var0))"}
Generated  translation
struct. unpack ('> q ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['sum', 'elements', 'at', 'the', 'same', 'index', 'in', 'list', 'var0'], 'words': ['sum', 'elements', 'at', 'the', 'same', 'index', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'data'}, 'snippet': '[[sum(item) for item in zip(*items)] for items in zip(*var0)]'}
Generated  translation
map ( sum, zip ( * var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'rid', 'of', 'none', 'values', 'in', 'dictionary', 'var0'], 'words': ['get', 'rid', 'of', 'none', 'values', 'in', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'kwargs'}, 'snippet': 'res = {k: v for k, v in list(var0.items()) if v is not none}'}
Generated  translation
{ key : val for key, val in list ( var0. items ( ) ) if v! ='y3'} 
--------- B -----------
{'intent': {'gloss': ['merge', 'a', 'nested', 'dictionary', 'var0', 'into', 'a', 'flat', 'dictionary', 'by', 'concatenating', 'nested', 'values', 'with', 'the', 'same', 'key', 'var1'], 'words': ['merge', 'a', 'nested', 'dictionary', 'var0', 'into', 'a', 'flat', 'dictionary', 'by', 'concatenating', 'nested', 'values', 'with', 'the', 'same', 'key', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'dicts', 'var1': 'k'}, 'snippet': '{var1: [d[var1] for d in var0] for var1 in var0[0]}'}
Generated  translation
dict ( ( k, v ) for k, v in var1. items ( ) if k! = var0 [ k ] ) 
--------- B -----------
{'intent': {'gloss': ['loop', 'over', 'files', 'in', 'directory', 'var0'], 'words': ['loop', 'over', 'files', 'in', 'directory', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'source'}, 'snippet': 'for root, dirs, filenames in os.walk(var0):\n    for f in filenames:\n        pass'}
Generated  translation
os. path. join ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['join', 'each', 'element', 'in', 'array', 'var0', 'with', 'element', 'at', 'the', 'same', 'index', 'in', 'array', 'var1', 'as', 'a', 'tuple'], 'words': ['join', 'each', 'element', 'in', 'array', 'var0', 'with', 'element', 'at', 'the', 'same', 'index', 'in', 'array', 'var1', 'as', 'a', 'tuple'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'b'}, 'snippet': 'np.array([zip(x, y) for x, y in zip(var0, var1)])'}
Generated  translation
np. zeros ( ( var0, var1 ) ) 
--------- B -----------
{'intent': {'gloss': ['extract', 'brackets', 'from', 'string', 'var0'], 'words': ['extract', 'brackets', 'from', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': "brackets = re.sub('[^(){}[\\\\]]', '', var0)"}
Generated  translation
re. findall ('\ \ [ (. *? ) \ \ ] ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['append', 'a', 'tuple', 'of', 'elements', 'from', 'list', 'var0', 'with', 'indexes', 'str0', 'to', 'list', 'var1'], 'words': ['append', 'a', 'tuple', 'of', 'elements', 'from', 'list', 'var0', 'with', 'indexes', 'str0', 'to', 'list', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'str0': '[0][0] [0][2]', 'var1': 'b', '[ str0 ]': '[0][0] [0][2]'}, 'snippet': 'var1.append((var0[0][0], var0[0][2]))'}
Generated  translation
[ ( x, var0 ) for x in var1 ] 
--------- B -----------
{'intent': {'gloss': ['reverse', 'sort', 'counter', 'var0', 'by', 'value'], 'words': ['reverse', 'sort', 'counter', 'var0', 'by', 'value'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'sorted(list(var0.items()), key=lambda pair: pair[1], reverse=true)'}
Generated  translation
sorted ( var0, key = var0. get ) 
--------- B -----------
{'intent': {'gloss': ['add', 'a', 'column', 'str0', 'with', 'value', 'str1', 'to', 'dataframe', 'var0'], 'words': ['add', 'a', 'column', 'str0', 'with', 'value', 'str1', 'to', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'day', 'str1': 'sat', 'var0': 'df'}, 'snippet': "var0.xs('str1', level='str0', drop_level=false)"}
Generated  translation
var0 ['str0'] = var0 ['str1']. apply ( lambda x : str0 ['str0'] ) 
--------- B -----------
{'intent': {'gloss': ['sorting', 'a', 'list', 'of', 'lists', 'in', 'python'], 'words': ['sorting', 'a', 'list', 'of', 'lists', 'in', 'python'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'c2.sort(key=lambda row: (row[2], row[1], row[0]))'}
Generated  translation
[ sorted ( item ) for item in sorted ( l, key = lambda t : t [ 0 ] ) ] 
--------- B -----------
{'intent': {'gloss': ['get', 'an', 'array', 'of', 'the', 'mean', 'of', 'each', 'two', 'consecutive', 'values', 'in', 'numpy', 'array', 'var0'], 'words': ['get', 'an', 'array', 'of', 'the', 'mean', 'of', 'each', 'two', 'consecutive', 'values', 'in', 'numpy', 'array', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'var0[:-1] + (var0[1:] - var0[:-1]) / 2'}
Generated  translation
np. zeros ( ( var0 - 1, axis = 2 ) ). ravel ( ) 
--------- B -----------
{'intent': {'gloss': ['how', 'to', 'sort', 'a', 'dataframe', 'by', 'the', 'ocurrences', 'in', 'a', 'column', 'in', 'python', '(', 'pandas', ')'], 'words': ['how', 'to', 'sort', 'a', 'dataframe', 'by', 'the', 'ocurrences', 'in', 'a', 'column', 'in', 'python', '(', 'pandas', ')'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '']}, 'slot_map': {}, 'snippet': "df.groupby('prots').sum().sort('scores', ascending=false)"}
Generated  translation
df. sort ('ocurrence of { } '. format ( df. columns ), axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['python', 'regex', 'to', 'find', 'all', 'numbers', 'and', 'dots', 'from', 'str0'], 'words': ['python', 'regex', 'to', 'find', 'all', 'numbers', 'and', 'dots', 'from', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'text'}, 'snippet': "re.findall('test([\\\\d.]*\\\\d+)', str0)"}
Generated  translation
re. findall ('[ \ \ w ] + ','str0') 
--------- B -----------
{'intent': {'gloss': ['get', 'rid', 'of', 'none', 'values', 'in', 'dictionary', 'var0'], 'words': ['get', 'rid', 'of', 'none', 'values', 'in', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'kwargs'}, 'snippet': 'res = dict((k, v) for k, v in var0.items() if v is not none)'}
Generated  translation
{ key : val for key, val in list ( var0. items ( ) ) if v! ='y3'} 
--------- B -----------
{'intent': {'gloss': ['argparse', 'add', 'argument', 'with', 'flag', 'str0', 'and', 'version', 'action', 'of', 'str1', 'to', 'parser', 'var0'], 'words': ['argparse', 'add', 'argument', 'with', 'flag', 'str0', 'and', 'version', 'action', 'of', 'str1', 'to', 'parser', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '--version', 'str1': '%(prog)s 2.0', 'var0': 'parser'}, 'snippet': "var0.add_argument('str0', action='version', version='str1')"}
Generated  translation
var0. update ( {'str0':'str1'} ) 
--------- B -----------
{'intent': {'gloss': ['multiple', 'each', 'value', 'by', 'str0', 'for', 'all', 'keys', 'in', 'a', 'dictionary', 'var0'], 'words': ['multiple', 'each', 'value', 'by', 'str0', 'for', 'all', 'keys', 'in', 'a', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '2', 'var0': 'my_dict'}, 'snippet': 'var0.update((x, y * 2) for x, y in list(var0.items()))'}
Generated  translation
dict ( ( k, v ) for k, v in var0. items ( ) if v > 1 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'date', '7', 'days', 'before', 'the', 'current', 'date'], 'words': ['get', 'the', 'date', '7', 'days', 'before', 'the', 'current', 'date'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': '(datetime.datetime.now() - datetime.timedelta(days=7)).date()'}
Generated  translation
print ( ( datetime. date. today ( ) + datetime. timedelta ( 6 * 365 / 12 ) ). isoformat ( ) ) 
--------- B -----------
{'intent': {'gloss': ['combine', 'list', 'of', 'dictionaries', 'var0', 'with', 'the', 'same', 'keys', 'in', 'each', 'list', 'to', 'a', 'single', 'dictionary'], 'words': ['combine', 'list', 'of', 'dictionaries', 'var0', 'with', 'the', 'same', 'keys', 'in', 'each', 'list', 'to', 'a', 'single', 'dictionary'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'dicts'}, 'snippet': 'dict((k, [d[k] for d in var0]) for k in var0[0])'}
Generated  translation
dict ( ( k, v ) for k, v in var0. items ( ) if v ) 
--------- B -----------
{'intent': {'gloss': ['find', 'the', 'index', 'of', 'a', 'list', 'with', 'the', 'first', 'element', 'equal', 'to', 'str0', 'within', 'the', 'list', 'of', 'lists', 'var0'], 'words': ['find', 'the', 'index', 'of', 'a', 'list', 'with', 'the', 'first', 'element', 'equal', 'to', 'str0', 'within', 'the', 'list', 'of', 'lists', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '332', 'var0': 'thelist'}, 'snippet': "[index for index, item in enumerate(var0) if item[0] == 'str0']"}
Generated  translation
[ item for item in var0 if item [ 0 ] = ='str0'] 
--------- B -----------
{'intent': {'gloss': ['use', 'str0', 'operator', 'to', 'print', 'variable', 'values', 'var0', 'inside', 'a', 'string'], 'words': ['use', 'str0', 'operator', 'to', 'print', 'variable', 'values', 'var0', 'inside', 'a', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '%s', 'var0': 'str1'}, 'snippet': "'first string is: %s, second one is: %s' % (var0, 'geo.tif')"}
Generated  translation
print ('str0 '. replace ( ', ','' ) ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'pandas', 'series', 'var0', 'into', 'a', 'pandas', 'dataframe', 'var1', 'with', 'columns', 'var2', 'and', 'var3'], 'words': ['convert', 'a', 'pandas', 'series', 'var0', 'into', 'a', 'pandas', 'dataframe', 'var1', 'with', 'columns', 'var2', 'and', 'var3'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'sf', 'var1': 'df', 'var2': 'email', 'var3': 'list'}, 'snippet': "pd.dataframe({'var2': var0.index, 'var3': var0.values})"}
Generated  translation
var1. merge ( var0, var2, how ='inner ', columns = ['var3'] ) 
--------- B -----------
{'intent': {'gloss': ['django', 'set', 'default', 'value', 'of', 'field', 'var0', 'equal', 'to', 'str0'], 'words': ['django', 'set', 'default', 'value', 'of', 'field', 'var0', 'equal', 'to', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'b', 'str0': '0000000'}, 'snippet': "var0 = models.charfield(max_length=7, default='str0', editable=false)"}
Generated  translation
sys. setdefaultencoding ('str0') 
--------- B -----------
{'intent': {'gloss': ['get', 'whatever', 'is', 'between', 'parentheses', 'as', 'a', 'single', 'match', ',', 'and', 'any', 'char', 'outside', 'as', 'an', 'individual', 'match', 'in', 'string', 'str0'], 'words': ['get', 'whatever', 'is', 'between', 'parentheses', 'as', 'a', 'single', 'match', ',', 'and', 'any', 'char', 'outside', 'as', 'an', 'individual', 'match', 'in', 'string', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '(zyx)bc'}, 'snippet': "re.findall('\\\\(.+?\\\\)|\\\\w', 'str0')"}
Generated  translation
re. findall ('\ \ ( [ ^ $ ] * \ \ ) ','str0') 
--------- B -----------
{'intent': {'gloss': ['match', 'multiple', 'regex', 'patterns', 'with', 'the', 'alternation', 'operator', 'str0', 'in', 'a', 'string', 'str1'], 'words': ['match', 'multiple', 'regex', 'patterns', 'with', 'the', 'alternation', 'operator', 'str0', 'in', 'a', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '|', 'str1': '(zyx)bc'}, 'snippet': "re.findall('\\\\(.*?\\\\)|\\\\w', 'str1')"}
Generated  translation
re. findall ('^ (. *? cat. *? ) ','str1') 
--------- B -----------
{'intent': {'gloss': ['find', 'the', 'index', 'of', 'an', 'element', 'str0', 'in', 'a', 'list', 'var0'], 'words': ['find', 'the', 'index', 'of', 'an', 'element', 'str0', 'in', 'a', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'msft', 'var0': 'stocks_list'}, 'snippet': "[x for x in range(len(var0)) if var0[x] == 'str0']"}
Generated  translation
i = [ str0 ] 
--------- B -----------
{'intent': {'gloss': ['send', 'multipart', 'encoded', 'file', 'var0', 'to', 'url', 'var1', 'with', 'headers', 'var2', 'and', 'metadata', 'var3'], 'words': ['send', 'multipart', 'encoded', 'file', 'var0', 'to', 'url', 'var1', 'with', 'headers', 'var2', 'and', 'metadata', 'var3'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'files', 'var1': 'url', 'var2': 'headers', 'var3': 'data'}, 'snippet': 'r = requests.post(var1, var0=var0, var2=var2, var3=var3)'}
Generated  translation
urllib. parse. unquote ( var1, var2 ='var0') 
--------- B -----------
{'intent': {'gloss': ['numpy', 'concatenate', 'two', 'arrays', 'var0', 'and', 'var1', 'along', 'the', 'first', 'axis'], 'words': ['numpy', 'concatenate', 'two', 'arrays', 'var0', 'and', 'var1', 'along', 'the', 'first', 'axis'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'b'}, 'snippet': 'c = np.r_[var0[(none), :], var1[(none), :]]'}
Generated  translation
numpy. concatenate ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'list', 'of', 'lists', 'var0', 'into', 'a', 'flat', 'list'], 'words': ['convert', 'list', 'of', 'lists', 'var0', 'into', 'a', 'flat', 'list'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'data'}, 'snippet': '[y for x in var0 for y in (x if isinstance(x, list) else [x])]'}
Generated  translation
y = map ( operator. itemgetter ( 0 ), var0 ) 
--------- B -----------
{'intent': {'gloss': ['find', 'all', 'numbers', 'and', 'dots', 'from', 'a', 'string', 'var0', 'using', 'regex'], 'words': ['find', 'all', 'numbers', 'and', 'dots', 'from', 'a', 'string', 'var0', 'using', 'regex'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'text'}, 'snippet': "re.findall('test([0-9.]*[0-9]+)', var0)"}
Generated  translation
re. findall ('(? < = [ \ \ w \ \ d. ] + ) ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['run', 'script', 'str0', 'with', 'argument', 'str1', 'on', 'terminal', 'using', 'python', 'executable'], 'words': ['run', 'script', 'str0', 'with', 'argument', 'str1', 'on', 'terminal', 'using', 'python', 'executable'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'hello.py', 'str1': 'htmlfilename.htm'}, 'snippet': "subprocess.call(['python.exe', 'str0', 'str1'])"}
Generated  translation
os. system ('script2. py1') 
--------- B -----------
{'intent': {'gloss': ['sum', 'columns', 'of', 'a', 'list', 'var0'], 'words': ['sum', 'columns', 'of', 'a', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'array'}, 'snippet': '[sum(row[i] for row in var0) for i in range(len(var0[0]))]'}
Generated  translation
sum ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['insert', 'a', 'str0', 'value', 'into', 'a', 'sqlite3', 'table', '.'], 'words': ['insert', 'a', 'str0', 'value', 'into', 'a', 'sqlite3', 'table', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'none'}, 'snippet': 'db.execute("insert into present values(\'test2\', ?, 10)", (str0,))'}
Generated  translation
sqlite3. insert ( 0,'str0') 
--------- B -----------
{'intent': {'gloss': ['using', '%', 'f', 'with', 'strftime', '(', ')', 'in', 'python', 'to', 'get', 'microseconds'], 'words': ['using', '%', 'f', 'with', 'strftime', '(', ')', 'in', 'python', 'to', 'get', 'microseconds'], 'after': [' ', '', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "datetime.datetime.now().strftime('%h:%m:%s.%f')"}
Generated  translation
datetime. datetime. strptime ('str0 ','% a, % d / % b % y'). strftime ('% f') 
--------- B -----------
{'intent': {'gloss': ['get', 'digits', 'only', 'from', 'a', 'string', 'var0', 'using', 'lambda', 'function'], 'words': ['get', 'digits', 'only', 'from', 'a', 'string', 'var0', 'using', 'lambda', 'function'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'aas30dsa20'}, 'snippet': '"""""".join([x for x in \'var0\' if x.isdigit()])'}
Generated  translation
" " " " " ". join ( c for c in var0 if c. isdigit ( ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'filename', 'without', 'the', 'extension', 'from', 'file', 'str0'], 'words': ['get', 'the', 'filename', 'without', 'the', 'extension', 'from', 'file', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'hemanth.txt'}, 'snippet': "print(os.path.splitext(os.path.basename('str0'))[0])"}
Generated  translation
os. path. split ( os. path. abspath ( str0 ) ) 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'dictionary', 'by', 'adding', 'each', 'two', 'adjacent', 'elements', 'in', 'tuple', 'var0', 'as', 'key', '/', 'value', 'pair', 'to', 'it'], 'words': ['create', 'a', 'dictionary', 'by', 'adding', 'each', 'two', 'adjacent', 'elements', 'in', 'tuple', 'var0', 'as', 'key', '/', 'value', 'pair', 'to', 'it'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'dict(var0[i:i + 2] for i in range(0, len(var0), 2))'}
Generated  translation
dict ( ( k, v ) for k, v in zip ( var0, var0 [ 1 : ] ) ) 
--------- B -----------
{'intent': {'gloss': ['extract', 'a', 'url', 'from', 'a', 'string', 'var0'], 'words': ['extract', 'a', 'url', 'from', 'a', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mystring'}, 'snippet': "print(re.findall('(https?://[^\\\\s]+)', var0))"}
Generated  translation
" " " " " ". join ( urllib. parse. split ( ) ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'elements', 'of', 'each', 'tuple', 'in', 'list', 'var0', 'into', 'a', 'string', 'separated', 'by', 'character', 'str0'], 'words': ['convert', 'elements', 'of', 'each', 'tuple', 'in', 'list', 'var0', 'into', 'a', 'string', 'separated', 'by', 'character', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l', 'str0': '@'}, 'snippet': '""" """.join([(\'%d@%d\' % t) for t in var0])'}
Generated  translation
[ ('str0') for s in var0 ] 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'words': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'testlist'}, 'snippet': 'gen = (i for i, x in enumerate(var0) if x == 1)\nfor i in gen:\n    pass'}
Generated  translation
print ( var0. position ( 1 ) ) 
--------- B -----------
{'intent': {'gloss': ['double', 'backslash', 'escape', 'all', 'double', 'quotes', 'in', 'string', 'var0'], 'words': ['double', 'backslash', 'escape', 'all', 'double', 'quotes', 'in', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': 'print(var0.encode(\'unicode-escape\').replace(\'"\', \'\\\\"\'))'}
Generated  translation
re. sub ('\ \ b \ \ d + \ \ b ','', var0 ) 
--------- B -----------
{'intent': {'gloss': ['how', 'to', 'delete', 'all', 'instances', 'of', 'a', 'character', 'in', 'a', 'string', 'in', 'python', '?'], 'words': ['how', 'to', 'delete', 'all', 'instances', 'of', 'a', 'character', 'in', 'a', 'string', 'in', 'python', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': '"""""".join([char for char in \'it is icy\' if char != \'i\'])'}
Generated  translation
newstr = oldstr. replace ('m ','' ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'dictionary', 'var0', 'first', 'by', 'key', 'var1', 'and', 'then', 'by', 'var2'], 'words': ['sort', 'a', 'list', 'of', 'dictionary', 'var0', 'first', 'by', 'key', 'var1', 'and', 'then', 'by', 'var2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list', 'var1': 'points', 'var2': 'time'}, 'snippet': "var0.sort(key=lambda item: (item['var1'], item['var2']))"}
Generated  translation
sorted ( var0, key = lambda x : ( x [ 1 ], x [ 2 ] ), reverse = true ) 
--------- B -----------
{'intent': {'gloss': ['format', 'number', 'of', 'spaces', 'between', 'strings', 'var0', ',', 'str0', 'and', 'str1', 'to', 'be', 'str2'], 'words': ['format', 'number', 'of', 'spaces', 'between', 'strings', 'var0', ',', 'str0', 'and', 'str1', 'to', 'be', 'str2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'python', 'str0': ':', 'str1': 'very good', 'str2': '20'}, 'snippet': "print('%*s : %*s' % (20, 'var0', 20, 'str1'))"}
Generated  translation
" " " var0 " " ". format ('str1 ','str2') 
--------- B -----------
{'intent': {'gloss': ['multiply', 'a', 'matrix', 'var0', 'with', 'a', '3d', 'tensor', 'var1', 'in', 'scipy'], 'words': ['multiply', 'a', 'matrix', 'var0', 'with', 'a', '3d', 'tensor', 'var1', 'in', 'scipy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'p', 'var1': 't'}, 'snippet': 'scipy.tensordot(var0, var1, axes=[1, 1]).swapaxes(0, 1)'}
Generated  translation
np. einsum ('ji, ij - > j ', var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'scalar', 'var0', 'to', 'array'], 'words': ['convert', 'scalar', 'var0', 'to', 'array'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'var0 = np.asarray(var0).reshape(1, -1)[(0), :]'}
Generated  translation
var0. strip ( ) 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'list', 'of', 'pairs', 'from', 'a', 'string', 'var0', 'using', 'lambda', 'function'], 'words': ['get', 'a', 'list', 'of', 'pairs', 'from', 'a', 'string', 'var0', 'using', 'lambda', 'function'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'word'}, 'snippet': 'list(map(lambda x, y: x + y, var0[:-1], var0[1:]))'}
Generated  translation
map ( list, set ( var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'datetimeindex', 'containing', '13', 'periods', 'of', 'the', 'second', 'friday', 'of', 'each', 'month', 'starting', 'from', 'date', 'str0'], 'words': ['create', 'a', 'datetimeindex', 'containing', '13', 'periods', 'of', 'the', 'second', 'friday', 'of', 'each', 'month', 'starting', 'from', 'date', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '2016-01-01'}, 'snippet': "pd.date_range('str0', freq='wom-2fri', periods=13)"}
Generated  translation
datetime. datetime. strptime ('str0 ','% b % d, % y'). date ( ) 
--------- B -----------
{'intent': {'gloss': ['create', 'list', 'of', 'values', 'from', 'dictionary', 'var0', 'that', 'have', 'a', 'key', 'that', 'starts', 'with', 'str0'], 'words': ['create', 'list', 'of', 'values', 'from', 'dictionary', 'var0', 'that', 'have', 'a', 'key', 'that', 'starts', 'with', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'dict1', 'str0': 'emp$$'}, 'snippet': "[value for key, value in list(var0.items()) if key.startswith('str0')]"}
Generated  translation
[ value for item in var0 if'str0'in key. split ( ',') ] 
--------- B -----------
{'intent': {'gloss': ['count', 'most', 'frequent', '100', 'words', 'in', 'column', 'str0', 'of', 'dataframe', 'var0'], 'words': ['count', 'most', 'frequent', '100', 'words', 'in', 'column', 'str0', 'of', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'text', 'var0': 'df'}, 'snippet': "counter(' '.join(var0['str0']).split()).most_common(100)"}
Generated  translation
var0. groupby ('str0'). agg ( lambda x : x. replace ('str0 ','' ). cumsum ( ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'current', 'directory', 'of', 'a', 'script'], 'words': ['get', 'the', 'current', 'directory', 'of', 'a', 'script'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'os.path.basename(os.path.dirname(os.path.realpath(__file__)))'}
Generated  translation
os. path. dirname ( os. path. abspath ( _ _ file _ _ ) ) 
--------- B -----------
{'intent': {'gloss': ['sum', 'integers', 'contained', 'in', 'strings', 'in', 'list', 'str0'], 'words': ['sum', 'integers', 'contained', 'in', 'strings', 'in', 'list', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "['', '3.4', '', '', '1.0']", '[ str0 ]': "['', '3.4', '', '', '1.0']"}, 'snippet': 'sum(int(float(item)) for item in [_f for _f in [ str0 ] if\n    _f])'}
Generated  translation
sum ( map ( int, [ str0 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['write', 'line', 'str0', 'to', 'file', 'var0'], 'words': ['write', 'line', 'str0', 'to', 'file', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'hi there', 'var0': 'myfile'}, 'snippet': "f = open('var0', 'w')\nf.write('hi there\\n')\nf.close()"}
Generated  translation
var0. write ('str0') 
--------- B -----------
{'intent': {'gloss': ['get', 'all', 'urls', 'within', 'text', 'var0'], 'words': ['get', 'all', 'urls', 'within', 'text', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': 're.findall(\'"(http.*?)"\', var0, re.multiline | re.dotall)'}
Generated  translation
urllib. parse. quote _ plus ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['match', 'urls', 'whose', 'domain', 'doesn', "'", 't', 'start', 'with', 'var0', 'from', 'string', 'var1', 'using', 'regex'], 'words': ['match', 'urls', 'whose', 'domain', 'doesn', "'", 't', 'start', 'with', 'var0', 'from', 'string', 'var1', 'using', 'regex'], 'after': [' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 't', 'var1': 'document'}, 'snippet': 're.findall(\'http://[^t][^s"]+\\\\.html\', var1)'}
Generated  translation
urllib. parse. quote ( var1, var0 ) 
--------- B -----------
{'intent': {'gloss': ['format', 'a', 'datetime', 'string', 'var0', 'to', 'extract', 'date', 'only'], 'words': ['format', 'a', 'datetime', 'string', 'var0', 'to', 'extract', 'date', 'only'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'when'}, 'snippet': "then = datetime.datetime.strptime(var0, '%y-%m-%d').date()"}
Generated  translation
datetime. datetime. combine ( var0, datetime. time. min ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'hex', 'string', 'str0', 'to', 'a', 'float', 'number'], 'words': ['convert', 'hex', 'string', 'str0', 'to', 'a', 'float', 'number'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '470fc614'}, 'snippet': "struct.unpack('!f', 'str0'.decode('hex'))[0]"}
Generated  translation
float ( int ('str0 ', 0 ) ) 
--------- B -----------
{'intent': {'gloss': ['reverse', 'the', 'order', 'of', 'words', ',', 'delimited', 'by', 'str0', ',', 'in', 'string', 'var0'], 'words': ['reverse', 'the', 'order', 'of', 'words', ',', 'delimited', 'by', 'str0', ',', 'in', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', '', ' ', ' ', ' ', '', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '.', 'var0': 's'}, 'snippet': '"""str0""".join(var0.split(\'str0\')[::-1])'}
Generated  translation
re. findall ('\ \ d + ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['parse', 'milliseconds', 'epoch', 'time', 'str0', 'to', 'format', 'str1'], 'words': ['parse', 'milliseconds', 'epoch', 'time', 'str0', 'to', 'format', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '1236472051807', 'str1': '%y-%m-%d %h:%m:%s'}, 'snippet': "time.strftime('str1', time.gmtime(1236472051807 / 1000.0))"}
Generated  translation
datetime. datetime. strptime ('str0 ','str1'). time ( ) 
--------- B -----------
{'intent': {'gloss': ['add', 'one', 'to', 'the', 'hidden', 'web', 'element', 'with', 'id', 'str0', 'with', 'selenium', 'python', 'script'], 'words': ['add', 'one', 'to', 'the', 'hidden', 'web', 'element', 'with', 'id', 'str0', 'with', 'selenium', 'python', 'script'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'xyz'}, 'snippet': 'browser.execute_script("document.getelementbyid(\'xyz\').value+=\'1\'")'}
Generated  translation
driver. add _ script ('str0 ','/ home / adam / python myscript ) 
--------- B -----------
{'intent': {'gloss': ['format', 'the', 'variables', 'str0', 'and', 'str1', 'using', 'string', 'formatting'], 'words': ['format', 'the', 'variables', 'str0', 'and', 'str1', 'using', 'string', 'formatting'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'self.goals', 'str1': 'self.penalties'}, 'snippet': '"""({:d} goals, ${:d})""".format(self.goals, self.penalties)'}
Generated  translation
" " " str0 " " ". format ('str1 ','str0') 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'list', 'of', 'lists', 'var0', 'to', 'list', 'of', 'integers'], 'words': ['convert', 'a', 'list', 'of', 'lists', 'var0', 'to', 'list', 'of', 'integers'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': "var0 = [int(''.join([str(y) for y in x])) for x in var0]"}
Generated  translation
[ map ( int, sublist ) for sublist in var0 ] 
--------- B -----------
{'intent': {'gloss': ['update', 'datetime', 'field', 'in', 'var0', 'to', 'be', 'the', 'existing', 'var1', 'plus', '100', 'years'], 'words': ['update', 'datetime', 'field', 'in', 'var0', 'to', 'be', 'the', 'existing', 'var1', 'plus', '100', 'years'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mymodel', 'var1': 'timestamp'}, 'snippet': "var0.objects.update(var1=f('var1') + timedelta(days=36524.25))"}
Generated  translation
print ( var1. cert _ datetime ( var0, datetime. timedelta ( hours = 100 ) ) ) 
--------- B -----------
{'intent': {'gloss': ['determine', 'number', 'of', 'files', 'on', 'a', 'drive', 'with', 'python'], 'words': ['determine', 'number', 'of', 'files', 'on', 'a', 'drive', 'with', 'python'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "os.statvfs('/').f_files - os.statvfs('/').f_ffree"}
Generated  translation
os. path. expanduser ('~ \ n') 
--------- B -----------
{'intent': {'gloss': ['encode', 'a', 'latin', 'character', 'in', 'string', 'str0', 'properly'], 'words': ['encode', 'a', 'latin', 'character', 'in', 'string', 'str0', 'properly'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'sopetÃ³n'}, 'snippet': '"""str0""".encode(\'latin-1\').decode(\'utf-8\')'}
Generated  translation
" " " str0 " " ". encode ('latin - 1') 
--------- B -----------
{'intent': {'gloss': ['find', 'octal', 'characters', 'matches', 'from', 'a', 'string', 'var0', 'using', 'regex'], 'words': ['find', 'octal', 'characters', 'matches', 'from', 'a', 'string', 'var0', 'using', 'regex'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'str'}, 'snippet': 'print(re.findall("\'\\\\\\\\[0-7]{1,3}\'", var0))'}
Generated  translation
re. findall ('(? = ( \ \ w \ \ w ) ) ','var0') 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'list', 'in', 'first', 'column', 'into', 'multiple', 'columns', 'keeping', 'other', 'columns', 'as', 'well', 'in', 'pandas', 'data', 'frame'], 'words': ['split', 'a', 'list', 'in', 'first', 'column', 'into', 'multiple', 'columns', 'keeping', 'other', 'columns', 'as', 'well', 'in', 'pandas', 'data', 'frame'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'pd.concat([df[0].apply(pd.series), df[1]], axis=1)'}
Generated  translation
pd. concat ( [ df ['var'], axis = 1 ), axis = 1 ) ] 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'new', 'column', 'var0', 'in', 'pandas', 'data', 'frame', 'var1', 'based', 'on', 'the', 'values', 'in', 'column', 'var2'], 'words': ['create', 'a', 'new', 'column', 'var0', 'in', 'pandas', 'data', 'frame', 'var1', 'based', 'on', 'the', 'values', 'in', 'column', 'var2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'weekday', 'var1': 'data', 'var2': 'my_dt'}, 'snippet': "var1['var0'] = var1['var2'].apply(lambda x: x.var0())"}
Generated  translation
var1 ['var0'] = var1 ['var2'] 
--------- B -----------
{'intent': {'gloss': ['delete', 'all', 'occurrences', 'of', 'character', 'str0', 'in', 'string', 'str1'], 'words': ['delete', 'all', 'occurrences', 'of', 'character', 'str0', 'in', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'i', 'str1': 'it is icy'}, 'snippet': '"""""".join([char for char in \'str1\' if char != \'str0\'])'}
Generated  translation
re. sub ('(. * ) ','str1 ','str0') 
--------- B -----------
{'intent': {'gloss': ['find', 'all', 'files', 'in', 'directory', 'str0', 'with', 'extension', 'str1'], 'words': ['find', 'all', 'files', 'in', 'directory', 'str0', 'with', 'extension', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '/mydir', 'str1': '.txt'}, 'snippet': "for file in os.listdir('str0'):\n    if file.endswith('str1'):\n        pass"}
Generated  translation
results + = [ each for each in os. listdir ('str0') if each. endswith ('str1') ] 
--------- B -----------
{'intent': {'gloss': ['write', 'line', 'str0', 'to', 'file', 'str1'], 'words': ['write', 'line', 'str0', 'to', 'file', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'hello', 'str1': 'somefile.txt'}, 'snippet': "with open('str1', 'a') as the_file:\n    the_file.write('hello\\n')"}
Generated  translation
with open ('str1 ','r') as f : pass 
--------- B -----------
{'intent': {'gloss': ['loop', 'over', 'files', 'in', 'directory', 'str0'], 'words': ['loop', 'over', 'files', 'in', 'directory', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '.'}, 'snippet': "for fn in os.listdir('str0'):\n    if os.path.isfile(fn):\n        pass"}
Generated  translation
for dirname, dirnames, filenames in os. walk ('str0') : for subdirname in dirnames : print ( os. path. join ( dirname, subdirname ) ) for filename in filenames : pas
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'string', 'var0', 'with', 'into', 'all', 'strings', 'of', 'repeated', 'characters'], 'words': ['split', 'a', 'string', 'var0', 'with', 'into', 'all', 'strings', 'of', 'repeated', 'characters'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': "[m.group(0) for m in re.finditer('(\\\\d)\\\\1*', var0)]"}
Generated  translation
[ m. split ( ) for m in re. findall ('\ \ [ ( [ ^ \ \ ] ] + ) \ \ 2 + ', var0 ) ] 
--------- B -----------
{'intent': {'gloss': ['in', 'var0', ',', 'get', 'the', 'content', 'of', 'the', 'sibling', 'of', 'the', 'var1', 'tag', 'with', 'text', 'content', 'str0'], 'words': ['in', 'var0', ',', 'get', 'the', 'content', 'of', 'the', 'sibling', 'of', 'the', 'var1', 'tag', 'with', 'text', 'content', 'str0'], 'after': [' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'soup', 'var1': 'td', 'str0': 'address:'}, 'snippet': "print(var0.find(text='str0').findnext('var1').contents[0])"}
Generated  translation
print ( var0. xpath ( '. / / a [ @ id = " text a " ]') ) 
--------- B -----------
{'intent': {'gloss': ['use', 'a', 'regex', 'to', 'get', 'all', 'text', 'in', 'a', 'string', 'var0', 'that', 'is', 'not', 'surrounded', 'by', 'square', 'brackets'], 'words': ['use', 'a', 'regex', 'to', 'get', 'all', 'text', 'in', 'a', 'string', 'var0', 'that', 'is', 'not', 'surrounded', 'by', 'square', 'brackets'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'example_str'}, 'snippet': "re.findall('(.*?)(?:\\\\[.*?\\\\]|$)', var0)"}
Generated  translation
re. sub ('\ \ [ (. *? ) \ \ ] ','', var0 ) 
--------- B -----------
{'intent': {'gloss': ['open', 'a', 'str0', 'terminal', 'from', 'python', 'script', 'and', 'run', 'str1', 'command', '.'], 'words': ['open', 'a', 'str0', 'terminal', 'from', 'python', 'script', 'and', 'run', 'str1', 'command', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'gnome', 'str1': 'sudo apt-get update'}, 'snippet': 'os.system(\'gnome-terminal -e \\\'bash -c "sudo apt-get update; exec bash"\\\'\')'}
Generated  translation
os. system ('str0') 
--------- B -----------
{'intent': {'gloss': ['write', 'multiple', 'strings', 'var0', ',', 'var1', 'and', 'var2', 'in', 'one', 'line', 'in', 'a', 'file', 'var3'], 'words': ['write', 'multiple', 'strings', 'var0', ',', 'var1', 'and', 'var2', 'in', 'one', 'line', 'in', 'a', 'file', 'var3'], 'after': [' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'line1', 'var1': 'line2', 'var2': 'line3', 'var3': 'target'}, 'snippet': "var3.write('%r\\n%r\\n%r\\n' % (var0, var1, var2))"}
Generated  translation
with open ('var0 ','var1') as f : var2. write ('\ n '. join ( var3 ) ) 
--------- B -----------
{'intent': {'gloss': ['pandas', ':', 'delete', 'rows', 'in', 'dataframe', 'var0', 'based', 'on', 'multiple', 'columns', 'values'], 'words': ['pandas', ':', 'delete', 'rows', 'in', 'dataframe', 'var0', 'based', 'on', 'multiple', 'columns', 'values'], 'after': ['', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': "var0.set_index(list('bc')).drop(tuples, errors='ignore').reset_index()"}
Generated  translation
var0. apply ( lambda x : x. fillna ( x. columns ), axis = 0 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'content', 'of', 'child', 'tag', 'withvar0', 'attribute', 'whose', 'parent', 'has', 'css', 'var1'], 'words': ['get', 'the', 'content', 'of', 'child', 'tag', 'withvar0', 'attribute', 'whose', 'parent', 'has', 'css', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'href', 'var1': 'someclass'}, 'snippet': "self.driver.find_element_by_css_selector('.someclass a').get_attribute('var0')"}
Generated  translation
print ( soup. get _ majorticklabels ( var0 ). content _ type ('var1') ) 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'string', 'by', 'a', 'delimiter', 'in', 'python'], 'words': ['split', 'a', 'string', 'by', 'a', 'delimiter', 'in', 'python'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "[x.strip() for x in '2.matches $$text$$ string'.split('$$text$$')]"}
Generated  translation
s. rfind ('\ \ s ','str1') 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'a', 'directory', 'var0', 'exists', 'and', 'create', 'it', 'if', 'necessary'], 'words': ['check', 'if', 'a', 'directory', 'var0', 'exists', 'and', 'create', 'it', 'if', 'necessary'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'path'}, 'snippet': 'try:\n    os.makedirs(var0)\nexcept oserror:\n    if not os.var0.isdir(var0):\n        raise'}
Generated  translation
os. path. commonprefix ( ['var0 ','some _ f'] ) 
--------- B -----------
{'intent': {'gloss': ['extract', 'all', 'the', 'values', 'with', 'keys', 'str0', 'and', 'str1', 'from', 'a', 'list', 'of', 'dictionaries', 'var0', 'to', 'list', 'of', 'tuples'], 'words': ['extract', 'all', 'the', 'values', 'with', 'keys', 'str0', 'and', 'str1', 'from', 'a', 'list', 'of', 'dictionaries', 'var0', 'to', 'list', 'of', 'tuples'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'x', 'str1': 'y', 'var0': 'd'}, 'snippet': "[(str0['str0'], str0['str1']) for str0 in var0]"}
Generated  translation
[ key for item in var0 if item ['str0'] = ='str1'] 
--------- B -----------
{'intent': {'gloss': ['running', 'r', 'script', 'str0', 'from', 'python'], 'words': ['running', 'r', 'script', 'str0', 'from', 'python'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '/pathto/myrscript.r'}, 'snippet': "subprocess.call(['/usr/bin/rscript', '--vanilla', 'str0'])"}
Generated  translation
os. system ('str0') 
--------- B -----------
{'intent': {'gloss': ['convert', 'list', 'of', 'tuples', 'var0', 'to', 'a', 'string'], 'words': ['convert', 'list', 'of', 'tuples', 'var0', 'to', 'a', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': '""", """.join(\'(\' + \', \'.join(i) + \')\' for i in var0)'}
Generated  translation
emaillist ='\ n '. join ( [ str ( i ) for i in var0 ] ) 
--------- B -----------
{'intent': {'gloss': ['find', 'all', 'files', 'in', 'directory', 'str0', 'with', 'extension', 'str1'], 'words': ['find', 'all', 'files', 'in', 'directory', 'str0', 'with', 'extension', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '/mydir', 'str1': '.txt'}, 'snippet': "os.chdir('str0')\nfor file in glob.glob('*.txt'):\n    pass"}
Generated  translation
results + = [ each for each in os. listdir ('str0') if each. endswith ('str1') ] 
--------- B -----------
{'intent': {'gloss': ['python', 'regex', '-', 'check', 'for', 'a', 'capital', 'letter', 'with', 'a', 'following', 'lowercase', 'in', 'string', 'var0'], 'words': ['python', 'regex', '-', 'check', 'for', 'a', 'capital', 'letter', 'with', 'a', 'following', 'lowercase', 'in', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'string'}, 'snippet': "re.sub('^[a-z0-9]*(?![a-z])', '', var0)"}
Generated  translation
re. search ('[ ^ a - z ] ', var0 ). group ( 1 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'index', 'of', 'an', 'integer', 'str0', 'from', 'a', 'list', 'var0', 'if', 'the', 'list', 'also', 'contains', 'boolean', 'items'], 'words': ['get', 'the', 'index', 'of', 'an', 'integer', 'str0', 'from', 'a', 'list', 'var0', 'if', 'the', 'list', 'also', 'contains', 'boolean', 'items'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '1', 'var0': 'lst'}, 'snippet': 'next(i for i, x in enumerate(var0) if not isinstance(x, bool) and x == 1)'}
Generated  translation
map ( int, var0. items ( ) ) 
--------- B -----------
{'intent': {'gloss': ['insert', 'directory', 'str0', 'into', 'directory', 'var0'], 'words': ['insert', 'directory', 'str0', 'into', 'directory', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'apps', 'var0': '__file__'}, 'snippet': "sys.path.insert(1, os.path.join(os.path.dirname(var0), 'str0'))"}
Generated  translation
sys. path. insert ( 0,'str0') 
--------- B -----------
{'intent': {'gloss': ['write', 'the', 'data', 'of', 'dataframe', 'var0', 'into', 'text', 'file', 'str0'], 'words': ['write', 'the', 'data', 'of', 'dataframe', 'var0', 'into', 'text', 'file', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'np.txt'}, 'snippet': "np.savetxt('c:\\\\data\\\\np.txt', var0.values, fmt='%d')"}
Generated  translation
pd. read _ text ('str0 ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['write', 'content', 'of', 'dataframe', 'var0', 'into', 'text', 'file', 'str0'], 'words': ['write', 'content', 'of', 'dataframe', 'var0', 'into', 'text', 'file', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'c:\\data\\pandas.txt'}, 'snippet': "var0.to_csv('str0', header=none, index=none, sep=' ', mode='a')"}
Generated  translation
var0. write. texttype ('str0') 
--------- B -----------
{'intent': {'gloss': ['print', 'a', '2', 'dimensional', 'list', 'var0', 'as', 'a', 'table', 'with', 'delimiters'], 'words': ['print', 'a', '2', 'dimensional', 'list', 'var0', 'as', 'a', 'table', 'with', 'delimiters'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'tab'}, 'snippet': "print('\\n'.join('\\t'.join(str(col) for col in row) for row in var0))"}
Generated  translation
print ('total cost is : $ { :,. 2f } '. format ( var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'a', 'directory', 'var0', 'exists', 'and', 'create', 'it', 'if', 'necessary'], 'words': ['check', 'if', 'a', 'directory', 'var0', 'exists', 'and', 'create', 'it', 'if', 'necessary'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'path'}, 'snippet': 'try:\n    os.makedirs(var0)\nexcept oserror as exception:\n    if exception.errno != errno.eexist:\n        raise'}
Generated  translation
os. path. commonprefix ( ['var0 ','some _ f'] ) 
--------- B -----------
{'intent': {'gloss': ['send', 'a', 'post', 'request', 'with', 'raw', 'data', 'var0', 'and', 'basic', 'authentication', 'with', 'var1', 'and', 'var2'], 'words': ['send', 'a', 'post', 'request', 'with', 'raw', 'data', 'var0', 'and', 'basic', 'authentication', 'with', 'var1', 'and', 'var2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'data', 'var1': 'username', 'var2': 'password'}, 'snippet': 'requests.post(url, var0=var0, headers=headers_dict, auth=(var1, var2))'}
Generated  translation
post _ response = requests. post ( url ='var0 ', params = ['var1 ','var2'] ) 
--------- B -----------
{'intent': {'gloss': ['parse', 'tab', '-', 'delimited', 'csv', 'file', 'str0', 'into', 'a', 'list'], 'words': ['parse', 'tab', '-', 'delimited', 'csv', 'file', 'str0', 'into', 'a', 'list'], 'after': [' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'text.txt'}, 'snippet': "lol = list(csv.reader(open('str0', 'rb'), delimiter='\\t'))"}
Generated  translation
pd. read _ csv ('str0 ', sep ='\ t') 
--------- B -----------
{'intent': {'gloss': ['loop', 'through', 'the', 'ip', 'address', 'range', 'str0'], 'words': ['loop', 'through', 'the', 'ip', 'address', 'range', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '192.168.x.x'}, 'snippet': "generator = iter_iprange('192.168.1.1', '192.168.255.255', step=1)"}
Generated  translation
globals ( ) ['str0']. format ( * args ) 
--------- B -----------
{'intent': {'gloss': ['modify', 'sys', '.', 'path', 'for', 'python', 'module', 'var0'], 'words': ['modify', 'sys', '.', 'path', 'for', 'python', 'module', 'var0'], 'after': [' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'subdir'}, 'snippet': "sys.path.append(os.path.join(os.path.dirname(__file__), 'var0'))"}
Generated  translation
os. path. join ( var0. split ('_') ) 
--------- B -----------
{'intent': {'gloss': ['lower', 'a', 'string', 'var0', 'and', 'remove', 'non', '-', 'alphanumeric', 'characters', 'aside', 'from', 'space'], 'words': ['lower', 'a', 'string', 'var0', 'and', 'remove', 'non', '-', 'alphanumeric', 'characters', 'aside', 'from', 'space'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'text'}, 'snippet': "re.sub('[^\\\\sa-za-z0-9]', '', var0).lower().strip()"}
Generated  translation
re. sub ('[ ^ 0 - 9 ] + ','', var0 ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'all', 'non', '-', 'alphanumeric', 'characters', 'except', 'space', 'from', 'a', 'string', 'var0', 'and', 'lower', 'it'], 'words': ['remove', 'all', 'non', '-', 'alphanumeric', 'characters', 'except', 'space', 'from', 'a', 'string', 'var0', 'and', 'lower', 'it'], 'after': [' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'text'}, 'snippet': "re.sub('(?!\\\\s)[\\\\w_]', '', var0).lower().strip()"}
Generated  translation
re. sub ('[ ^ 0 - 9 ] + ','', var0 ) 
--------- B -----------
{'intent': {'gloss': ['scatter', 'a', 'plot', 'with', 'x', ',', 'y', 'position', 'of', 'str0', 'and', 'face', 'color', 'equal', 'to', 'none'], 'words': ['scatter', 'a', 'plot', 'with', 'x', ',', 'y', 'position', 'of', 'str0', 'and', 'face', 'color', 'equal', 'to', 'none'], 'after': [' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'np.random.randn(100)'}, 'snippet': "plt.scatter(np.random.randn(100), np.random.randn(100), facecolors='none')"}
Generated  translation
plt. scatter ( x, y, color ='str0 ', color ='none ) 
--------- B -----------
{'intent': {'gloss': ['prepend', 'the', 'line', 'str0', 'to', 'the', 'contents', 'of', 'file', 'str1', 'and', 'save', 'as', 'the', 'file', 'str2'], 'words': ['prepend', 'the', 'line', 'str0', 'to', 'the', 'contents', 'of', 'file', 'str1', 'and', 'save', 'as', 'the', 'file', 'str2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '#test firstline\n', 'str1': 'infile', 'str2': 'outfile'}, 'snippet': "open('str2', 'w').write('str0' + open('str1').read())"}
Generated  translation
with open ('str1 ','str0') as f : f. write ('str2') 
--------- B -----------
{'intent': {'gloss': ['extract', 'ip', 'address', 'from', 'an', 'html', 'string'], 'words': ['extract', 'ip', 'address', 'from', 'an', 'html', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "ip = re.findall('[0-9]+(?:\\\\.[0-9]+){3}', s)"}
Generated  translation
" " " i have : \ \ u003dft { 0 } \ \ b \ \ d { 1 } " " ". format ( my _ html ) 
--------- B -----------
{'intent': {'gloss': ['unpack', 'a', 'series', 'of', 'tuples', 'in', 'pandas', 'into', 'a', 'dataframe', 'with', 'column', 'names', 'str0', 'and', 'str1'], 'words': ['unpack', 'a', 'series', 'of', 'tuples', 'in', 'pandas', 'into', 'a', 'dataframe', 'with', 'column', 'names', 'str0', 'and', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'out-1', 'str1': 'out-2'}, 'snippet': "pd.dataframe(out.tolist(), columns=['str0', 'str1'], index=out.index)"}
Generated  translation
pd. concat ( [ df, pd. dataframe ( ['str0 ','str1'] ], axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'first', 'value', 'from', 'dataframe', 'var0', 'where', 'column', 'str0', 'is', 'equal', 'to', 'str1'], 'words': ['get', 'the', 'first', 'value', 'from', 'dataframe', 'var0', 'where', 'column', 'str0', 'is', 'equal', 'to', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'letters', 'str1': 'c'}, 'snippet': "var0.loc[var0['str0'] == 'str1', 'str0'].values[0]"}
Generated  translation
var0. loc [ var0 ['str0'] = ='str1'] 
--------- B -----------
{'intent': {'gloss': ['remove', 'all', 'strings', 'from', 'a', 'list', 'a', 'strings', 'var0', 'where', 'the', 'values', 'starts', 'with', 'str0', 'or', 'str1'], 'words': ['remove', 'all', 'strings', 'from', 'a', 'list', 'a', 'strings', 'var0', 'where', 'the', 'values', 'starts', 'with', 'str0', 'or', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'sents', 'str0': '@$\t', 'str1': '#'}, 'snippet': "[x for x in var0 if not x.startswith('str0') and not x.startswith('str1')]"}
Generated  translation
[ x for x in var0 if'str0'in x [ : - 1 ] ] 
--------- B -----------
{'intent': {'gloss': ['create', 'new', 'dataframe', 'object', 'by', 'merging', 'columns', 'str0', 'of', 'dataframes', 'var0', 'and', 'var1', 'and', 'rename', 'the', 'columns', 'from', 'dataframes', 'var0', 'and', 'var1', 'with', 'suffix', 'var4', 'and', 'var5', 'respectively'], 'words': ['create', 'new', 'dataframe', 'object', 'by', 'merging', 'columns', 'str0', 'of', 'dataframes', 'var0', 'and', 'var1', 'and', 'rename', 'the', 'columns', 'from', 'dataframes', 'var0', 'and', 'var1', 'with', 'suffix', 'var4', 'and', 'var5', 'respectively'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'key', 'var0': 'split_df', 'var1': 'csv_df', 'var2': 'split_df', 'var3': 'csv_df', 'var4': '_left', 'var5': '_right'}, 'snippet': "pd.merge(var2, var3, on=['str0'], suffixes=('var4', 'var5'))"}
Generated  translation
pd. concat ( [ var2, var1. var2 ], axis = 1 ). rename ( columns = {'var2':'str0'}, how ='inner'} ) 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'string', 'str0', 'by', 'str1', 'keeping', 'str1', 'in', 'the', 'result'], 'words': ['split', 'a', 'string', 'str0', 'by', 'str1', 'keeping', 'str1', 'in', 'the', 'result'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'docs/src/scripts/temp', 'str1': '/', 'str2': '/'}, 'snippet': '"""str0""".replace(\'str2\', \'/\\x00/\').split(\'\\x00\')'}
Generated  translation
re. split ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['group', 'a', 'list', 'of', 'dicts', 'var0', 'into', 'one', 'dict', 'by', 'key'], 'words': ['group', 'a', 'list', 'of', 'dicts', 'var0', 'into', 'one', 'dict', 'by', 'key'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'ld'}, 'snippet': 'print(dict(zip(var0[0], zip(*[list(d.values()) for d in var0]))))'}
Generated  translation
new _ list = { k : v for d in var0 } 
--------- B -----------
{'intent': {'gloss': ['replace', 'all', 'elements', 'in', 'array', 'var0', 'that', 'are', 'not', 'present', 'in', 'array', 'str0', 'with', 'zeros'], 'words': ['replace', 'all', 'elements', 'in', 'array', 'var0', 'that', 'are', 'not', 'present', 'in', 'array', 'str0', 'with', 'zeros'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'str0': '[1, 3, 4]', '[ str0 ]': '[1, 3, 4]'}, 'snippet': 'np.where(np.in1d(var0, [ str0 ]).reshape(var0.shape), var0, 0)'}
Generated  translation
np. any ( np. in1d ( var0, 0, 1 ) ) 
--------- B -----------
{'intent': {'gloss': ['how', 'to', 'count', 'distinct', 'values', 'in', 'a', 'column', 'of', 'a', 'pandas', 'group', 'by', 'object', '?'], 'words': ['how', 'to', 'count', 'distinct', 'values', 'in', 'a', 'column', 'of', 'a', 'pandas', 'group', 'by', 'object', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "df.groupby(['col1', 'col2'])['col3'].nunique().reset_index()"}
Generated  translation
sum ( d. groupby ('id'). size ( ) ) 
--------- B -----------
{'intent': {'gloss': ['average', 'each', 'two', 'columns', 'of', 'array', 'var0'], 'words': ['average', 'each', 'two', 'columns', 'of', 'array', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'data'}, 'snippet': 'var0.reshape(-1, j).mean(axis=1).reshape(var0.shape[0], -1)'}
Generated  translation
var0 [ np. arange ( len ( var0. shape [ 0 ] ), : ] ) 
--------- B -----------
{'intent': {'gloss': ['do', 'a', 'scatter', 'plot', 'with', 'empty', 'circles'], 'words': ['do', 'a', 'scatter', 'plot', 'with', 'empty', 'circles'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "plt.plot(np.random.randn(100), np.random.randn(100), 'o', mfc='none')"}
Generated  translation
plt. scatter ( ) 
--------- B -----------
{'intent': {'gloss': ['select', 'rows', 'in', 'a', 'dataframe', 'var0', 'column', 'str0', 'between', 'two', 'values', '99', 'and', '101'], 'words': ['select', 'rows', 'in', 'a', 'dataframe', 'var0', 'column', 'str0', 'between', 'two', 'values', '99', 'and', '101'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'closing_price'}, 'snippet': "var0 = var0[(var0['str0'] >= 99) & (var0['str0'] <= 101)]"}
Generated  translation
var0 ['str0']. apply ( lambda x : x [ len ( x ) / 101 ] ) 
--------- B -----------
{'intent': {'gloss': ['regex', ',', 'find', 'str0s', 'only', 'in', 'the', 'middle', 'of', 'string', 'var0'], 'words': ['regex', ',', 'find', 'str0s', 'only', 'in', 'the', 'middle', 'of', 'string', 'var0'], 'after': ['', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'n', 'var0': 's'}, 'snippet': "re.findall('n(?<=[^n]n)n+(?=[^n])(?i)', var0)"}
Generated  translation
re. findall ('\ \. (? : \ \ r + ) ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'duplicate', 'words', 'from', 'a', 'string', 'var0', 'using', 'regex'], 'words': ['remove', 'duplicate', 'words', 'from', 'a', 'string', 'var0', 'using', 'regex'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'text'}, 'snippet': "var0 = re.sub('\\\\b(\\\\w+)( \\\\1\\\\b)+', '\\\\1', var0)"}
Generated  translation
re. sub ('(? < = [ a - z ] ) \ \ ) ','\ \ 1 ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['replace', 'dot', 'characters', 'str0', 'associated', 'with', 'ascii', 'letters', 'in', 'list', 'var0', 'with', 'space', 'str1'], 'words': ['replace', 'dot', 'characters', 'str0', 'associated', 'with', 'ascii', 'letters', 'in', 'list', 'var0', 'with', 'space', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '.', 'var0': 's', 'str1': ''}, 'snippet': "[re.sub('(?<!\\\\d)\\\\.(?!\\\\d)', ' ', i) for i in var0]"}
Generated  translation
[ m. replace ('[ \ x00 ] ','str0') for x in var0 ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'each', 'tuple', 'in', 'list', 'var0', 'to', 'a', 'string', 'with', 'str0', 'separating', 'the', 'tuples', "'", 'elements'], 'words': ['convert', 'each', 'tuple', 'in', 'list', 'var0', 'to', 'a', 'string', 'with', 'str0', 'separating', 'the', 'tuples', "'", 'elements'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '']}, 'slot_map': {'var0': 'l', 'str0': '@'}, 'snippet': '""" """.join([(\'%d@%d\' % (t[0], t[1])) for t in var0])'}
Generated  translation
" " " str0 " " ". join ( map ( lambda x : x + y ) ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'dictionaries', 'by', 'the', 'value', 'of', 'keys', 'str0', ',', 'str1', ',', 'str2', 'in', 'ascending', 'order', '.'], 'words': ['sort', 'a', 'list', 'of', 'dictionaries', 'by', 'the', 'value', 'of', 'keys', 'str0', ',', 'str1', ',', 'str2', 'in', 'ascending', 'order', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'title', 'str1': 'title_url', 'str2': 'id'}, 'snippet': "l.sort(key=lambda x: (x['str0'], x['str1'], x['str2']))"}
Generated  translation
sorted ( str0, key = operator. itemgetter ('str1 ','str2') ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'list', 'var0', 'in', 'descending', 'order', 'based', 'on', 'the', 'date', 'value', 'in', 'second', 'element', 'of', 'each', 'list', 'in', 'list', 'var0'], 'words': ['sort', 'list', 'var0', 'in', 'descending', 'order', 'based', 'on', 'the', 'date', 'value', 'in', 'second', 'element', 'of', 'each', 'list', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'li', 'var1': 'li'}, 'snippet': "sorted(var1, key=lambda x: datetime.strptime(x[1], '%d/%m/%y'), reverse=true)"}
Generated  translation
var1. sort ( key = lambda x : x [ 2 ], reverse = true ) 
--------- B -----------
{'intent': {'gloss': ['set', 'font', 'var0', 'to', 'display', 'non', '-', 'ascii', 'characters', 'in', 'matplotlib'], 'words': ['set', 'font', 'var0', 'to', 'display', 'non', '-', 'ascii', 'characters', 'in', 'matplotlib'], 'after': [' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'arial'}, 'snippet': "matplotlib.rc('font', **{'sans-serif': 'var0', 'family': 'sans-serif'})"}
Generated  translation
re. sub ('[ ^ \ \ x00 - \ x7f ] + ','', var0 ) 
--------- B -----------
{'intent': {'gloss': ['find', 'all', 'files', 'in', 'directory', 'str0', 'with', 'extension', 'str1'], 'words': ['find', 'all', 'files', 'in', 'directory', 'str0', 'with', 'extension', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '/mydir', 'str1': '.txt'}, 'snippet': "for root, dirs, files in os.walk('str0'):\n    for file in files:\n        if file.endswith('str1'):\n            pass"}
Generated  translation
results + = [ each for each in os. listdir ('str0') if each. endswith ('str1') ] 
--------- B -----------
{'intent': {'gloss': ['load', 'data', 'containing', 'str0', 'from', 'file', 'str1', 'into', 'numpy', 'array', 'var0'], 'words': ['load', 'data', 'containing', 'str0', 'from', 'file', 'str1', 'into', 'numpy', 'array', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'utf-8', 'str1': 'new.txt', 'var0': 'arr'}, 'snippet': "var0 = numpy.fromiter(codecs.open('str1', encoding='str0'), dtype='<u2')"}
Generated  translation
var0 = numpy. loadtxt ( open ('str1 ','str0'), delimiter = ',') 
--------- B -----------
{'intent': {'gloss': ['select', 'values', 'from', 'column', 'str0', 'for', 'which', 'corresponding', 'values', 'in', 'column', 'str1', 'will', 'be', 'greater', 'than', '50', ',', 'and', 'in', 'column', 'str2', '-', 'equal', '900', 'in', 'dataframe', 'var0'], 'words': ['select', 'values', 'from', 'column', 'str0', 'for', 'which', 'corresponding', 'values', 'in', 'column', 'str1', 'will', 'be', 'greater', 'than', '50', ',', 'and', 'in', 'column', 'str2', '-', 'equal', '900', 'in', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'a', 'str1': 'b', 'str2': 'c', 'var0': 'df'}, 'snippet': "var0['str0'][(var0['str1'] > 50) & (var0['str2'] == 900)]"}
Generated  translation
var0 [ ( var0 ['str1'] > 50, axis = 1 ) | ( var0 ['str2'] < 50 ) ] 
--------- B -----------
{'intent': {'gloss': ['find', '10', 'largest', 'differences', 'between', 'each', 'respective', 'elements', 'of', 'list', 'var0', 'and', 'list', 'var1'], 'words': ['find', '10', 'largest', 'differences', 'between', 'each', 'respective', 'elements', 'of', 'list', 'var0', 'and', 'list', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l1', 'var1': 'l2'}, 'snippet': 'heapq.nlargest(10, range(len(var0)), key=lambda i: abs(var0[i] - var1[i]))'}
Generated  translation
max ( abs ( x - y ) for x, y in zip ( var0, var1 ) ) 
--------- B -----------
{'intent': {'gloss': ['loop', 'through', 'the', 'ip', 'address', 'range', 'str0'], 'words': ['loop', 'through', 'the', 'ip', 'address', 'range', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '192.168.x.x'}, 'snippet': "for i in range(256):\n    for j in range(256):\n        ip = '192.168.%d.%d' % (i, j)\n        print(ip)"}
Generated  translation
globals ( ) ['str0']. format ( * args ) 
--------- B -----------
{'intent': {'gloss': ['find', 'a', 'value', 'within', 'nested', 'json', 'str0', 'where', 'the', 'key', 'inside', 'another', 'key', 'str1', 'is', 'unknown', '.'], 'words': ['find', 'a', 'value', 'within', 'nested', 'json', 'str0', 'where', 'the', 'key', 'inside', 'another', 'key', 'str1', 'is', 'unknown', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'data', 'str1': 'b'}, 'snippet': "list(str0['a']['str1'].values())[0]['maindata'][0]['info']"}
Generated  translation
max ( df. keys ( ) ) ['str1'] = ='str0'
--------- B -----------
{'intent': {'gloss': ['finding', 'the', 'index', 'of', 'elements', 'containing', 'substring', 'str0', 'and', 'str1', 'in', 'a', 'list', 'of', 'strings', 'str2', '.'], 'words': ['finding', 'the', 'index', 'of', 'elements', 'containing', 'substring', 'str0', 'and', 'str1', 'in', 'a', 'list', 'of', 'strings', 'str2', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'how', 'str1': 'what', 'str2': 'mylist'}, 'snippet': "[i for i, j in enumerate(str2) if 'str0' in j.lower() or 'str1' in j.lower()]"}
Generated  translation
[ item for item in open ('str2 ','str0') if'str1'in item ] 
--------- B -----------
{'intent': {'gloss': ['extract', 'a', 'url', 'from', 'a', 'string', 'var0'], 'words': ['extract', 'a', 'url', 'from', 'a', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mystring'}, 'snippet': "print(re.search('(?p<url>https?://[^\\\\s]+)', var0).group('url'))"}
Generated  translation
" " " " " ". join ( urllib. parse. split ( ) ) 
--------- B -----------
{'intent': {'gloss': ['selecting', 'rows', 'in', 'numpy', 'ndarray', 'str0', ',', 'where', 'the', 'value', 'in', 'the', 'first', 'column', 'is', '0', 'and', 'value', 'in', 'the', 'second', 'column', 'is', '1'], 'words': ['selecting', 'rows', 'in', 'numpy', 'ndarray', 'str0', ',', 'where', 'the', 'value', 'in', 'the', 'first', 'column', 'is', '0', 'and', 'value', 'in', 'the', 'second', 'column', 'is', '1'], 'after': [' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'a'}, 'snippet': 'str0[np.where((str0[:, (0)] == 0) * (str0[:, (1)] == 1))]'}
Generated  translation
np. where ( ( str0 [ :, ( 1 ) ] > 0 ). all ( axis = 1 ) ) 
--------- B -----------
{'intent': {'gloss': ['how', 'to', 'create', 'a', 'list', 'of', 'date', 'string', 'in', 'str0', 'format', 'with', 'python', 'pandas', '?'], 'words': ['how', 'to', 'create', 'a', 'list', 'of', 'date', 'string', 'in', 'str0', 'format', 'with', 'python', 'pandas', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'yyyymmdd'}, 'snippet': "[d.strftime('%y%m%d') for d in pandas.date_range('20130226', '20130302')]"}
Generated  translation
['str0 ','str0'] ='b'+ df ['str0']. astype ( float ) 
--------- B -----------
{'intent': {'gloss': ['how', 'can', 'i', 'parse', 'a', 'time', 'string', 'containing', 'milliseconds', 'in', 'it', 'with', 'python', '?'], 'words': ['how', 'can', 'i', 'parse', 'a', 'time', 'string', 'containing', 'milliseconds', 'in', 'it', 'with', 'python', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "time.strptime('30/03/09 16:31:32.123', '%d/%m/%y %h:%m:%s.%f')"}
Generated  translation
time. mktime ( datetime. datetime. now ( ). timetuple ( ) ) 
--------- B -----------
{'intent': {'gloss': ['insert', 'var0', 'before', 'the', 'file', 'extension', 'in', 'str0', 'or', 'replace', 'var1', 'with', 'var2', 'if', 'it', 'precedes', 'the', 'extension', '.'], 'words': ['insert', 'var0', 'before', 'the', 'file', 'extension', 'in', 'str0', 'or', 'replace', 'var1', 'with', 'var2', 'if', 'it', 'precedes', 'the', 'extension', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'var0': '_suff', 'str0': 'long.file.name.jpg', 'var1': '_a', 'var2': 'suff'}, 'snippet': "re.sub('(\\\\_a)?\\\\.([^\\\\.]*)$', '_suff.\\\\2', 'str0')"}
Generated  translation
os. system ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['zip', 'two', '2', '-', 'd', 'arrays', 'var0', 'and', 'var1'], 'words': ['zip', 'two', '2', '-', 'd', 'arrays', 'var0', 'and', 'var1'], 'after': [' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'b'}, 'snippet': "np.array(zip(var0.ravel(), var1.ravel()), dtype='i4,i4').reshape(var0.shape)"}
Generated  translation
zip ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'any', 'url', 'within', 'string', 'var0'], 'words': ['remove', 'any', 'url', 'within', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'text'}, 'snippet': "var0 = re.sub('^https?:\\\\/\\\\/.*[\\\\r\\\\n]*', '', var0, flags=re.multiline)"}
Generated  translation
var0. replace ('','' ) 
--------- B -----------
{'intent': {'gloss': ['unzip', 'list', 'str0'], 'words': ['unzip', 'list', 'str0'], 'after': [' ', ' ', '']}, 'slot_map': {'str0': "[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]", '[ str0 ]': "[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]"}, 'snippet': "zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e',)])"}
Generated  translation
[ str0 ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'hex', '-', 'string', 'representation', 'to', 'actual', 'bytes'], 'words': ['convert', 'a', 'hex', '-', 'string', 'representation', 'to', 'actual', 'bytes'], 'after': [' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': '"""\\\\xf3\\\\xbe\\\\x80\\\\x80""".replace(\'\\\\x\', \'\').decode(\'hex\')'}
Generated  translation
struct. unpack ('bbb ', raw _ bytes ) 
--------- B -----------
{'intent': {'gloss': ['unzip', 'list', 'str0', 'and', 'fill', 'empty', 'results', 'with', 'none'], 'words': ['unzip', 'list', 'str0', 'and', 'fill', 'empty', 'results', 'with', 'none'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]", '[ str0 ]': "[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]"}, 'snippet': "map(none, *[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e',)])"}
Generated  translation
[ open ('str0 ','ab') for _ in range ( 1, len ( str0 ) ) ] 
--------- B -----------
{'intent': {'gloss': ['combine', 'values', 'from', 'column', 'str0', 'and', 'column', 'str1', 'of', 'dataframe', 'var0', 'into', 'column', 'str2', 'of', 'datafram', 'var0'], 'words': ['combine', 'values', 'from', 'column', 'str0', 'and', 'column', 'str1', 'of', 'dataframe', 'var0', 'into', 'column', 'str2', 'of', 'datafram', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'b', 'str1': 'a', 'var0': 'df', 'str2': 'c', 'var1': 'df'}, 'snippet': "var1['str2'] = np.where(var1['str1'].isnull, var1['str0'], var1['str1'])"}
Generated  translation
var0 [ ['str0 ','str1'] ]. merge ( var0, on ='str2') 
--------- B -----------
{'intent': {'gloss': ['make', 'a', 'barplot', 'of', 'data', 'in', 'column', 'var0', 'of', 'dataframe', 'var1', 'colour', '-', 'coded', 'according', 'to', 'list', 'var2'], 'words': ['make', 'a', 'barplot', 'of', 'data', 'in', 'column', 'var0', 'of', 'dataframe', 'var1', 'colour', '-', 'coded', 'according', 'to', 'list', 'var2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'group', 'var1': 'df', 'var2': 'color'}, 'snippet': "var1['var0'].plot(kind='bar', var2=['r', 'g', 'b', 'r', 'g', 'b', 'r'])"}
Generated  translation
var1. reset _ index ( ). var0. groupby ('var2') [ 0 ]. astype ( var1 ) 
--------- B -----------
{'intent': {'gloss': ['download', 'a', 'file', 'var0', 'over', 'http', 'and', 'save', 'to', 'str0'], 'words': ['download', 'a', 'file', 'var0', 'over', 'http', 'and', 'save', 'to', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'url', 'str0': '10mb'}, 'snippet': "response = requests.get(var0, stream=true)\nwith open('str0', 'wb') as handle:\n    for data in tqdm(response.iter_content()):\n        handle.write(data)"}
Generated  translation
testfile = urllib. request. urlopener ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['removing', 'an', 'element', 'from', 'a', 'list', 'based', 'on', 'a', 'predicate', 'str0', 'or', 'str1'], 'words': ['removing', 'an', 'element', 'from', 'a', 'list', 'based', 'on', 'a', 'predicate', 'str0', 'or', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'x', 'str1': 'n'}, 'snippet': "[str0 for str0 in ['aat', 'xac', 'ant', 'tta'] if 'str0' not in str0 and \n    'str1' not in str0]"}
Generated  translation
[ x for x in var0 if x is not str0 ] 
--------- B -----------
{'intent': {'gloss': ['replace', 'each', 'str0', 'with', 'str1', 'and', 'each', 'str1', 'with', 'str0', 'in', 'the', 'string', 'str4', 'in', 'a', 'single', 'pass', '.'], 'words': ['replace', 'each', 'str0', 'with', 'str1', 'and', 'each', 'str1', 'with', 'str0', 'in', 'the', 'string', 'str4', 'in', 'a', 'single', 'pass', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'a', 'str1': 'b', 'str2': 'b', 'str3': 'a', 'str4': 'obama'}, 'snippet': '"""str4""".replace(\'str3\', \'%temp%\').replace(\'str2\', \'str3\').replace(\'%temp%\',\n    \'str2\')'}
Generated  translation
" " " str4 " " ". replace ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['download', 'a', 'file', 'var0', 'over', 'http', 'and', 'save', 'to', 'var1'], 'words': ['download', 'a', 'file', 'var0', 'over', 'http', 'and', 'save', 'to', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'url', 'var1': 'file_name'}, 'snippet': "u = urllib.request.urlopen(var0)\nf = open(var1, 'wb')\nmeta = u.info()\nfile_size = int(meta.getheaders('content-length')[0])\nprint('downloading: %s bytes: %s' % (var1, file_size))\nfile_size_dl = 0\nblock_sz = 8192\nwhile true:\n    buffer = u.read(block_sz)\n    if not buffer:\n        break\n    file_size_dl += len(buffer)\n    f.write(buffer)\n    status = '%10d  [%3.2f%%]' % (file_size_dl, file_size_dl * 100.0 /\n        file_size)\n    status = status + chr(8) * (len(status) + 1)\n    print(status, end=' ')\nf.close()"}
Generated  translation
testfile = urllib. request. urlopener ( var0, var1 ) 
test greedy accuracy 0.044
test greedy bleu score 0.3143154670159123
test greedy exececution accuracy 0.0
--------- B -----------
{'intent': {'gloss': ['function', 'to', 'convert', 'strings', 'into', 'integers'], 'words': ['function', 'to', 'convert', 'strings', 'into', 'integers'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'int()'}
Generated  translation
map ( int, var ) 
--------- B -----------
{'intent': {'gloss': ['count', 'the', 'occurrences', 'of', 'items', 'in', 'list', 'var0'], 'words': ['count', 'the', 'occurrences', 'of', 'items', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': 'counter(var0)'}
Generated  translation
sum ( isinstance ( x, int ) for x in var0 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'tuple', 'var0', 'to', 'list'], 'words': ['convert', 'tuple', 'var0', 'to', 'list'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 't'}, 'snippet': 'list(var0)'}
Generated  translation
[ ( v, k ) for k, v in var0. items ( ) ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'list', 'var0', 'to', 'tuple'], 'words': ['convert', 'list', 'var0', 'to', 'tuple'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 't'}, 'snippet': 'tuple(l)'}
Generated  translation
map ( int, var0 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'sorted', 'list', 'of', 'keys', 'of', 'dict', 'var0'], 'words': ['get', 'sorted', 'list', 'of', 'keys', 'of', 'dict', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'd'}, 'snippet': 'sorted(var0)'}
Generated  translation
sorted ( var0, key = lambda k : d [ k ] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'length', 'of', 'list', 'var0'], 'words': ['get', 'the', 'length', 'of', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'my_list'}, 'snippet': 'len(var0)'}
Generated  translation
len ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['getting', 'the', 'length', 'of', 'array', 'var0'], 'words': ['getting', 'the', 'length', 'of', 'array', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': 'len(var0)'}
Generated  translation
len ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['getting', 'the', 'length', 'of', 'array', 'var0'], 'words': ['getting', 'the', 'length', 'of', 'array', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': 'len(var0)'}
Generated  translation
len ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['getting', 'the', 'length', 'of', 'var0'], 'words': ['getting', 'the', 'length', 'of', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'my_tuple'}, 'snippet': 'len(var0)'}
Generated  translation
len ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['getting', 'the', 'length', 'of', 'var0'], 'words': ['getting', 'the', 'length', 'of', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'my_string'}, 'snippet': 'len(var0)'}
Generated  translation
len ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'type', 'of', 'var0'], 'words': ['get', 'the', 'type', 'of', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'i'}, 'snippet': 'type(var0)'}
Generated  translation
type ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['determine', 'the', 'type', 'of', 'variable', 'var0'], 'words': ['determine', 'the', 'type', 'of', 'variable', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'v'}, 'snippet': 'type(var0)'}
Generated  translation
isinstance ( var0, str ) 
--------- B -----------
{'intent': {'gloss': ['determine', 'the', 'type', 'of', 'variable', 'var0'], 'words': ['determine', 'the', 'type', 'of', 'variable', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'v'}, 'snippet': 'type(var0)'}
Generated  translation
isinstance ( var0, str ) 
--------- B -----------
{'intent': {'gloss': ['determine', 'the', 'type', 'of', 'variable', 'var0'], 'words': ['determine', 'the', 'type', 'of', 'variable', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'v'}, 'snippet': 'type(var0)'}
Generated  translation
isinstance ( var0, str ) 
--------- B -----------
{'intent': {'gloss': ['determine', 'the', 'type', 'of', 'variable', 'var0'], 'words': ['determine', 'the', 'type', 'of', 'variable', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'v'}, 'snippet': 'type(var0)'}
Generated  translation
isinstance ( var0, str ) 
--------- B -----------
{'intent': {'gloss': ['put', 'the', 'curser', 'at', 'beginning', 'of', 'the', 'file'], 'words': ['put', 'the', 'curser', 'at', 'beginning', 'of', 'the', 'file'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'file.seek(0)'}
Generated  translation
datetime. datetime. strptime ('count ','% y - % m - % dt % h : % m : % s') 
--------- B -----------
{'intent': {'gloss': ['make', 'a', 'delay', 'of', '1', 'second'], 'words': ['make', 'a', 'delay', 'of', '1', 'second'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'time.sleep(1)'}
Generated  translation
time. sleep ( 1 ) 
--------- B -----------
{'intent': {'gloss': ['declare', 'an', 'array'], 'words': ['declare', 'an', 'array'], 'after': [' ', ' ', '']}, 'slot_map': {}, 'snippet': 'my_list = []'}
Generated  translation
[ ] 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'by', 'space'], 'words': ['split', 'string', 'var0', 'by', 'space'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'text'}, 'snippet': 'var0.split()'}
Generated  translation
re. split ('\ \ t + ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'into', 'a', 'list', 'by', 'whitespace'], 'words': ['split', 'string', 'var0', 'into', 'a', 'list', 'by', 'whitespace'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'line'}, 'snippet': 'var0.split()'}
Generated  translation
[ item. strip ( ) for item in var0. split ( ',') ] 
--------- B -----------
{'intent': {'gloss': ['add', 'a', 'header', 'to', 'a', 'csv', 'file'], 'words': ['add', 'a', 'header', 'to', 'a', 'csv', 'file'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'writer.writeheader()'}
Generated  translation
open ('file. txt ','r') 
--------- B -----------
{'intent': {'gloss': ['calculate', 'sum', 'over', 'all', 'rows', 'of', '2d', 'numpy', 'array'], 'words': ['calculate', 'sum', 'over', 'all', 'rows', 'of', '2d', 'numpy', 'array'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'a.sum(axis=1)'}
Generated  translation
numpy. sum ( axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['append', 'elements', 'of', 'a', 'set', 'var0', 'to', 'a', 'list', 'var1'], 'words': ['append', 'elements', 'of', 'a', 'set', 'var0', 'to', 'a', 'list', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'b', 'var1': 'a'}, 'snippet': 'var1.extend(var0)'}
Generated  translation
var1 = [ x for x in var0 ] 
--------- B -----------
{'intent': {'gloss': ['removing', 'duplicates', 'in', 'list', 'var0'], 'words': ['removing', 'duplicates', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 't'}, 'snippet': 'list(set(var0))'}
Generated  translation
mynewlist = list ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['removing', 'duplicates', 'in', 'list', 'var0'], 'words': ['removing', 'duplicates', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'source_list'}, 'snippet': 'list(set(var0))'}
Generated  translation
mynewlist = list ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['how', 'to', 'sort', 'dictionaries', 'by', 'keys', 'in', 'python'], 'words': ['how', 'to', 'sort', 'dictionaries', 'by', 'keys', 'in', 'python'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'sorted(d.items())'}
Generated  translation
sorted ( list ( data. items ( ) ), key = lambda x : x [ 1 ] [ 0 ] ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'string', 'str0', 'into', 'integer'], 'words': ['convert', 'string', 'str0', 'into', 'integer'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '1'}, 'snippet': "int('str0')"}
Generated  translation
int ('str0 ', 2 ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'object', 'var0', 'is', 'a', 'string'], 'words': ['check', 'if', 'object', 'var0', 'is', 'a', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'o'}, 'snippet': 'type(var0) is str'}
Generated  translation
isinstance ( var0, str ) 
--------- B -----------
{'intent': {'gloss': ['append', 'list', 'var0', 'to', 'var1'], 'words': ['append', 'list', 'var0', 'to', 'var1'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list1', 'var1': 'list2'}, 'snippet': 'var1.extend(var0)'}
Generated  translation
var1. append ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['append', 'list', 'var0', 'to', 'var1'], 'words': ['append', 'list', 'var0', 'to', 'var1'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylog', 'var1': 'list1'}, 'snippet': 'var1.extend(var0)'}
Generated  translation
var1. append ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['append', 'list', 'var0', 'to', 'var1'], 'words': ['append', 'list', 'var0', 'to', 'var1'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'c'}, 'snippet': 'var1.extend(var0)'}
Generated  translation
var1. append ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['insert', 'item', 'str0', 'to', 'a', 'list', 'var0'], 'words': ['insert', 'item', 'str0', 'to', 'a', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '12', 'var0': 'my_list'}, 'snippet': 'var0.append(12)'}
Generated  translation
var0. insert ( 0,'str0') 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'type', 'of', 'variable', 'var0'], 'words': ['get', 'the', 'type', 'of', 'variable', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'variable_name'}, 'snippet': 'print(type(var0))'}
Generated  translation
isinstance ( var0, str ) 
--------- B -----------
{'intent': {'gloss': ['download', 'a', 'file', 'var0', 'over', 'http'], 'words': ['download', 'a', 'file', 'var0', 'over', 'http'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'url'}, 'snippet': 'r = requests.get(var0)'}
Generated  translation
ftp. retrbinary ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['read', 'keyboard', '-', 'input'], 'words': ['read', 'keyboard', '-', 'input'], 'after': [' ', '', '', '']}, 'slot_map': {}, 'snippet': "input('enter your input:')"}
Generated  translation
sys. stdout. read ( input ( ) ) 
--------- B -----------
{'intent': {'gloss': ['append', 'elements', 'of', 'a', 'set', 'to', 'a', 'list', 'in', 'python'], 'words': ['append', 'elements', 'of', 'a', 'set', 'to', 'a', 'list', 'in', 'python'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'a.extend(list(b))'}
Generated  translation
set ( ['a ','b'] ). append ( [ str0 ] ) 
--------- B -----------
{'intent': {'gloss': ['change', 'working', 'directory', 'to', 'the', 'directory', 'var0'], 'words': ['change', 'working', 'directory', 'to', 'the', 'directory', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'owd'}, 'snippet': 'os.chdir(var0)'}
Generated  translation
os. chdir ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'dictionary', 'var0', 'in', 'ascending', 'order', 'based', 'on', 'its', 'keys', 'and', 'items'], 'words': ['sort', 'dictionary', 'var0', 'in', 'ascending', 'order', 'based', 'on', 'its', 'keys', 'and', 'items'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'o'}, 'snippet': 'sorted(var0.items())'}
Generated  translation
sorted ( list ( var0. items ( ) ), key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['unzip', 'the', 'list', 'str0'], 'words': ['unzip', 'the', 'list', 'str0'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {'str0': "[('a', 1), ('b', 2), ('c', 3), ('d', 4)]", '[ str0 ]': "[('a', 1), ('b', 2), ('c', 3), ('d', 4)]"}, 'snippet': 'zip(*[ str0 ])'}
Generated  translation
[ str0 ] 
--------- B -----------
{'intent': {'gloss': ['unzip', 'the', 'list', 'str0'], 'words': ['unzip', 'the', 'list', 'str0'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {'str0': "[('a', 1), ('b', 2), ('c', 3), ('d', 4)]", '[ str0 ]': "[('a', 1), ('b', 2), ('c', 3), ('d', 4)]"}, 'snippet': 'zip(*[ str0 ])'}
Generated  translation
[ str0 ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'list', 'str0', 'into', 'a', 'dictionary'], 'words': ['convert', 'list', 'str0', 'into', 'a', 'dictionary'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "[('name', 'joe'), ('age', 22)]", '[ str0 ]': "[('name', 'joe'), ('age', 22)]"}, 'snippet': 'dict([ str0 ])'}
Generated  translation
dict ( map ( lambda s : s. split (':'), [ str0 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['plot', 'dataframe', 'var0', 'without', 'a', 'legend'], 'words': ['plot', 'dataframe', 'var0', 'without', 'a', 'legend'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': 'var0.plot(legend=false)'}
Generated  translation
var0. groupby ('font'). size ( ) 
--------- B -----------
{'intent': {'gloss': ['decode', 'json', 'string', 'str0', 'to', 'python', 'dict'], 'words': ['decode', 'json', 'string', 'str0', 'to', 'python', 'dict'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'request.body'}, 'snippet': 'json.loads(request.body)'}
Generated  translation
json. load ( open ('str0') ) 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'datetime', 'with', 'the', 'current', 'date', '&', 'time'], 'words': ['create', 'a', 'datetime', 'with', 'the', 'current', 'date', '&', 'time'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'datetime.datetime.now()'}
Generated  translation
datetime. datetime. now ( ). date ( ) 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'multi', '-', 'line', 'string', 'var0', 'into', 'separate', 'strings'], 'words': ['split', 'a', 'multi', '-', 'line', 'string', 'var0', 'into', 'separate', 'strings'], 'after': [' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'inputstring'}, 'snippet': "var0.split('\\n')"}
Generated  translation
re. findall ('\ \ w + ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'string', 'var0', 'by', 'space', 'with', 'str0', 'splits'], 'words': ['split', 'a', 'string', 'var0', 'by', 'space', 'with', 'str0', 'splits'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's', 'str0': '4'}, 'snippet': "var0.split(' ', 4)"}
Generated  translation
re. split ('\ \ [. *? \ \ ] ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'key', 'str0', 'from', 'dictionary', 'var0'], 'words': ['remove', 'key', 'str0', 'from', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'ele', 'var0': 'd'}, 'snippet': "del var0['str0']"}
Generated  translation
var0. pop ('str0 ', none ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'tuple', 'var0', 'to', 'list'], 'words': ['convert', 'tuple', 'var0', 'to', 'list'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'level1'}, 'snippet': 'var0 = map(list, var0)'}
Generated  translation
[ ( v, k ) for k, v in var0. items ( ) ] 
--------- B -----------
{'intent': {'gloss': ['get', 'attribute', 'var0', 'of', 'object', 'var1'], 'words': ['get', 'attribute', 'var0', 'of', 'object', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'my_str', 'var1': 'my_object'}, 'snippet': 'getattr(var1, var0)'}
Generated  translation
getattr ( var1, var0 ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'object', 'var0', 'is', 'a', 'string'], 'words': ['check', 'if', 'object', 'var0', 'is', 'a', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'obj'}, 'snippet': 'isinstance(var0, str)'}
Generated  translation
isinstance ( var0, str ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'object', 'var0', 'is', 'a', 'string'], 'words': ['check', 'if', 'object', 'var0', 'is', 'a', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'o'}, 'snippet': 'isinstance(var0, str)'}
Generated  translation
isinstance ( var0, str ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'object', 'var0', 'is', 'a', 'string'], 'words': ['check', 'if', 'object', 'var0', 'is', 'a', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'o'}, 'snippet': 'isinstance(var0, str)'}
Generated  translation
isinstance ( var0, str ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'var0', 'is', 'a', 'string'], 'words': ['check', 'if', 'var0', 'is', 'a', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'obj_to_test'}, 'snippet': 'isinstance(var0, str)'}
Generated  translation
isinstance ( var0, str ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'path', 'var0', 'is', 'an', 'absolute', 'path'], 'words': ['check', 'if', 'path', 'var0', 'is', 'an', 'absolute', 'path'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'my_path'}, 'snippet': 'os.path.isabs(var0)'}
Generated  translation
os. path. isfile ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['reload', 'a', 'module', 'var0'], 'words': ['reload', 'a', 'module', 'var0'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {'var0': 'module'}, 'snippet': 'import imp\nimp.reload(var0)'}
Generated  translation
exec ( compile ( var0 ). read ( ) ) 
--------- B -----------
{'intent': {'gloss': ['enable', 'debug', 'mode', 'on', 'flask', 'application', 'var0'], 'words': ['enable', 'debug', 'mode', 'on', 'flask', 'application', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'app'}, 'snippet': 'var0.run(debug=true)'}
Generated  translation
var0. debug ('debug') 
--------- B -----------
{'intent': {'gloss': ['how', 'do', 'i', 'get', 'the', 'url', 'parameter', 'in', 'a', 'flask', 'view'], 'words': ['how', 'do', 'i', 'get', 'the', 'url', 'parameter', 'in', 'a', 'flask', 'view'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "request.args['myparam']"}
Generated  translation
request. args. get ('http : / / www. r') 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'characters', 'count', 'in', 'a', 'file', 'var0'], 'words': ['get', 'the', 'characters', 'count', 'in', 'a', 'file', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'filepath'}, 'snippet': 'os.stat(var0).st_size'}
Generated  translation
len ( var0 ). count ('\ n') 
--------- B -----------
{'intent': {'gloss': ['count', 'the', 'occurrences', 'of', 'item', 'str0', 'in', 'list', 'var0'], 'words': ['count', 'the', 'occurrences', 'of', 'item', 'str0', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'a', 'var0': 'l'}, 'snippet': "var0.count('str0')"}
Generated  translation
sum ( item ['str0'] for word in var0 ) 
--------- B -----------
{'intent': {'gloss': ['count', 'the', 'occurrences', 'of', 'item', 'str0', 'in', 'list', 'var0'], 'words': ['count', 'the', 'occurrences', 'of', 'item', 'str0', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'b', 'var0': 'l'}, 'snippet': "var0.count('str0')"}
Generated  translation
sum ( item ['str0'] for word in var0 ) 
--------- B -----------
{'intent': {'gloss': ['copy', 'file', 'var0', 'to', 'directory', 'var1'], 'words': ['copy', 'file', 'var0', 'to', 'directory', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'srcfile', 'var1': 'dstdir'}, 'snippet': 'shutil.copy(var0, var1)'}
Generated  translation
shutil. copy2 ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['how', 'to', 'get', 'a', 'single', 'result', 'from', 'a', 'sqlite', 'query', 'in', 'python', '?'], 'words': ['how', 'to', 'get', 'a', 'single', 'result', 'from', 'a', 'sqlite', 'query', 'in', 'python', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'cursor.fetchone()[0]'}
Generated  translation
tree. objects. filter ( id = 1 ). order _ by ('a') 
--------- B -----------
{'intent': {'gloss': ['calculate', 'mean', 'across', 'dimension', 'in', 'a', '2d', 'array', 'var0'], 'words': ['calculate', 'mean', 'across', 'dimension', 'in', 'a', '2d', 'array', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'np.mean(var0, axis=1)'}
Generated  translation
np. sqrt ( ( var0. sum ( axis = 1 ) ). mean ( ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'position', 'of', 'item', 'var0', 'in', 'list', 'var1'], 'words': ['get', 'the', 'position', 'of', 'item', 'var0', 'in', 'list', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'element', 'var1': 'testlist'}, 'snippet': 'print(var1.index(var0))'}
Generated  translation
print ( var1. get ( var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['add', 'key', 'str0', 'to', 'dictionary', 'var0', 'with', 'value', '1'], 'words': ['add', 'key', 'str0', 'to', 'dictionary', 'var0', 'with', 'value', '1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'a', 'var0': 'data'}, 'snippet': 'var0.update(str0=1)'}
Generated  translation
var0 ['str0'] = 1 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'value', 'of', 'datetime', '.', 'today', '(', ')', 'in', 'the', 'utc', 'time', 'zone'], 'words': ['get', 'a', 'value', 'of', 'datetime', '.', 'today', '(', ')', 'in', 'the', 'utc', 'time', 'zone'], 'after': [' ', ' ', ' ', ' ', '', '', '', '', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'datetime.now(pytz.utc)'}
Generated  translation
datetime. datetime. utcnow ( ). time ( ) 
--------- B -----------
{'intent': {'gloss': ['round', 'off', 'the', 'float', 'that', 'is', 'the', 'product', 'of', 'str0', 'and', 'convert', 'it', 'to', 'an', 'int'], 'words': ['round', 'off', 'the', 'float', 'that', 'is', 'the', 'product', 'of', 'str0', 'and', 'convert', 'it', 'to', 'an', 'int'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '2.52 * 100'}, 'snippet': 'int(round(2.51 * 100))'}
Generated  translation
print ( round ( float ( var0. _ _ dict _ _ ) ) ) 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'by', 'str0'], 'words': ['split', 'string', 'var0', 'by', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'text', 'str0': ','}, 'snippet': "var0.split('str0')"}
Generated  translation
re. split ('str0 ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'urllib', 'unquoted', 'string', 'var0', 'to', 'a', 'json', 'data', 'var1'], 'words': ['convert', 'a', 'urllib', 'unquoted', 'string', 'var0', 'to', 'a', 'json', 'data', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'unescaped', 'var1': 'json_data'}, 'snippet': 'var1 = json.loads(var0)'}
Generated  translation
var1 = json. dumps ( var0, ensure _ ascii = false ) 
--------- B -----------
{'intent': {'gloss': ['open', 'file', 'var0', 'with', 'mode', 'str0'], 'words': ['open', 'file', 'var0', 'with', 'mode', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'path', 'str0': 'r'}, 'snippet': "open(var0, 'str0')"}
Generated  translation
os. open ( var0,'str0') 
--------- B -----------
{'intent': {'gloss': ['enable', 'warnings', 'using', 'action', 'str0'], 'words': ['enable', 'warnings', 'using', 'action', 'str0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'always'}, 'snippet': "warnings.simplefilter('str0')"}
Generated  translation
urllib. request. urlopen ('str0') 
--------- B -----------
{'intent': {'gloss': ['create', 'new', 'matrix', 'object', 'by', 'concatenating', 'data', 'from', 'matrix', 'a', 'and', 'matrix', 'b'], 'words': ['create', 'new', 'matrix', 'object', 'by', 'concatenating', 'data', 'from', 'matrix', 'a', 'and', 'matrix', 'b'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'np.concatenate((a, b))'}
Generated  translation
numpy. concate matrix ( [ 1, 2, 3 ], axis = 0 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'raw', 'string', 'var0', 'into', 'a', 'normal', 'string'], 'words': ['convert', 'a', 'raw', 'string', 'var0', 'into', 'a', 'normal', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'raw_string'}, 'snippet': "var0.decode('string_escape')"}
Generated  translation
print ( var0. encode ('raw _ string') ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'raw', 'string', 'var0', 'into', 'a', 'normal', 'string'], 'words': ['convert', 'a', 'raw', 'string', 'var0', 'into', 'a', 'normal', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'raw_byte_string'}, 'snippet': "var0.decode('unicode_escape')"}
Generated  translation
print ( var0. encode ('raw _ string') ) 
--------- B -----------
{'intent': {'gloss': ['cast', 'an', 'int', 'var0', 'to', 'a', 'string', 'and', 'concat', 'to', 'string', 'str0'], 'words': ['cast', 'an', 'int', 'var0', 'to', 'a', 'string', 'and', 'concat', 'to', 'string', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'i', 'str0': 'me'}, 'snippet': "'str0' + str(var0)"}
Generated  translation
" " " str0 " " ". join ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['length', 'of', 'longest', 'element', 'in', 'list', 'var0'], 'words': ['length', 'of', 'longest', 'element', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'words'}, 'snippet': 'len(max(var0, key=len))'}
Generated  translation
length = len ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'value', 'associated', 'with', 'unicode', 'key', 'str0', 'of', 'first', 'dictionary', 'in', 'list', 'var0'], 'words': ['get', 'the', 'value', 'associated', 'with', 'unicode', 'key', 'str0', 'of', 'first', 'dictionary', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'from_user', 'var0': 'result'}, 'snippet': "var0[0]['str0']"}
Generated  translation
[ x ['str0'] for x in var0 ] 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'list', 'from', 'a', 'list', 'var0', 'with', 'values', 'mapped', 'into', 'a', 'dictionary', 'var1'], 'words': ['get', 'a', 'list', 'from', 'a', 'list', 'var0', 'with', 'values', 'mapped', 'into', 'a', 'dictionary', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'lst', 'var1': 'dct'}, 'snippet': '[var1[k] for k in var0]'}
Generated  translation
[ key for item in var0 for key, value in list ( var1. items ( ) ) ] 
--------- B -----------
{'intent': {'gloss': ['get', 'number', 'of', 'keys', 'in', 'dictionary', 'var0'], 'words': ['get', 'number', 'of', 'keys', 'in', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'yourdict'}, 'snippet': 'len(list(var0.keys()))'}
Generated  translation
sum ( len ( x ) for x in list ( var0. items ( ) ) ) 
--------- B -----------
{'intent': {'gloss': ['reverse', 'a', 'priority', 'queue', 'var0', 'in', 'python', 'without', 'using', 'classes'], 'words': ['reverse', 'a', 'priority', 'queue', 'var0', 'in', 'python', 'without', 'using', 'classes'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'q'}, 'snippet': 'var0.put((-n, n))'}
Generated  translation
random. sample ( list ( var0. items ( ) ), key = operator. itemgetter ( 1 ) ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'directory', 'tree', 'str0'], 'words': ['remove', 'directory', 'tree', 'str0'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {'str0': '/folder_name'}, 'snippet': "shutil.rmtree('str0')"}
Generated  translation
os. system ('str0') 
--------- B -----------
{'intent': {'gloss': ['numpy', 'concatenate', 'two', 'arrays', 'var0', 'and', 'var1', 'along', 'the', 'first', 'axis'], 'words': ['numpy', 'concatenate', 'two', 'arrays', 'var0', 'and', 'var1', 'along', 'the', 'first', 'axis'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'b'}, 'snippet': 'np.array((var0, var1))'}
Generated  translation
numpy. concatenate ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['select', 'the', 'last', 'column', 'of', 'dataframe', 'var0'], 'words': ['select', 'the', 'last', 'column', 'of', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': 'var0[var0.columns[-1]]'}
Generated  translation
var0. loc [ :, ( var0. tail ( 1 ) ] ) ] 
--------- B -----------
{'intent': {'gloss': ['join', 'a', 'list', 'of', 'strings', 'var0', 'using', 'a', 'space', 'str0'], 'words': ['join', 'a', 'list', 'of', 'strings', 'var0', 'using', 'a', 'space', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list', 'str0': ''}, 'snippet': '""" """.join(var0)'}
Generated  translation
var0. join ( ['str0'] ) 
--------- B -----------
{'intent': {'gloss': ['drop', 'rows', 'of', 'pandas', 'dataframe', 'var0', 'having', 'nan', 'in', 'column', 'at', 'index', 'str0'], 'words': ['drop', 'rows', 'of', 'pandas', 'dataframe', 'var0', 'having', 'nan', 'in', 'column', 'at', 'index', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': '1'}, 'snippet': 'var0.dropna(subset=[1])'}
Generated  translation
var0. fillna ( method ='str0 ', inplace = true ) 
--------- B -----------
{'intent': {'gloss': ['reverse', 'the', 'list', 'that', 'contains', '1', 'to', '10'], 'words': ['reverse', 'the', 'list', 'that', 'contains', '1', 'to', '10'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'list(reversed(list(range(10))))'}
Generated  translation
[ i for i in range ( 1, 10 ) if i! = 10 ] 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'str0', 'into', 'a', 'list', 'on', 'white', 'spaces'], 'words': ['split', 'string', 'str0', 'into', 'a', 'list', 'on', 'white', 'spaces'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'qh qd jc kd js'}, 'snippet': '"""str0""".split()'}
Generated  translation
" " " str0 " " ". split ( ) 
--------- B -----------
{'intent': {'gloss': ['erase', 'all', 'the', 'contents', 'of', 'a', 'file', 'var0'], 'words': ['erase', 'all', 'the', 'contents', 'of', 'a', 'file', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'filename'}, 'snippet': "open(var0, 'w').close()"}
Generated  translation
open ('var0 ','w'). close ( ) 
--------- B -----------
{'intent': {'gloss': ['add', 'indexes', 'in', 'a', 'data', 'frame', 'var0', 'to', 'a', 'column', 'var1'], 'words': ['add', 'indexes', 'in', 'a', 'data', 'frame', 'var0', 'to', 'a', 'column', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'var1': 'index1'}, 'snippet': "var0['var1'] = var0.index"}
Generated  translation
var0 ['var1'] = var0 ['var1']. append ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'list', 'containing', 'flattened', 'list', 'str0'], 'words': ['create', 'a', 'list', 'containing', 'flattened', 'list', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "[['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]", '[ str0 ]': "[['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]"}, 'snippet': 'values = sum([ str0 ], [])'}
Generated  translation
[ str0 ] 
--------- B -----------
{'intent': {'gloss': ['replace', 'spaces', 'with', 'underscore'], 'words': ['replace', 'spaces', 'with', 'underscore'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "mystring.replace(' ', '_')"}
Generated  translation
re. sub ('(? < = [ a - z ] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'an', 'absolute', 'file', 'path', 'of', 'file', 'str0'], 'words': ['get', 'an', 'absolute', 'file', 'path', 'of', 'file', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'mydir/myfile.txt'}, 'snippet': "os.path.abspath('str0')"}
Generated  translation
os. path. abspath ( str0 ) 
--------- B -----------
{'intent': {'gloss': ['check', 'characters', 'of', 'string', 'var0', 'are', 'true', 'predication', 'of', 'function', 'var1'], 'words': ['check', 'characters', 'of', 'string', 'var0', 'are', 'true', 'predication', 'of', 'function', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'string', 'var1': 'predicate'}, 'snippet': 'all(var1(x) for x in var0)'}
Generated  translation
' var1'in list ( var0. items ( ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'attribute', 'str0', 'from', 'object', 'var0'], 'words': ['get', 'attribute', 'str0', 'from', 'object', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'attr', 'var0': 'obj'}, 'snippet': "getattr(var0, 'str0')"}
Generated  translation
getattr ( var0,'str0') 
--------- B -----------
{'intent': {'gloss': ['create', 'var0', 'to', 'contain', 'the', 'lists', 'from', 'list', 'var1', 'excluding', 'the', 'empty', 'lists', 'from', 'var1'], 'words': ['create', 'var0', 'to', 'contain', 'the', 'lists', 'from', 'list', 'var1', 'excluding', 'the', 'empty', 'lists', 'from', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list2', 'var1': 'list1', 'var2': 'list1'}, 'snippet': 'var0 = [x for x in var2 if x]'}
Generated  translation
var0 = [ [ x for x in var2 ] for y in range ( len ( var2 ) ) ] 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'based', 'on', 'occurrences', 'of', 'regex', 'pattern', 'str0'], 'words': ['split', 'string', 'var0', 'based', 'on', 'occurrences', 'of', 'regex', 'pattern', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'input', 'str0': '[ ](?=[a-z]+\\b)', '[ str0 )': '[ ](?=[a-z]+\\b)'}, 'snippet': "re.split('str0', var0)"}
Generated  translation
re. split ('str0 ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['place', 'the', 'radial', 'ticks', 'in', 'plot', 'var0', 'at', '135', 'degrees'], 'words': ['place', 'the', 'radial', 'ticks', 'in', 'plot', 'var0', 'at', '135', 'degrees'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'ax'}, 'snippet': 'var0.set_rlabel_position(135)'}
Generated  translation
var0. groupby ( level = 0 ). size ( ). reset _ index ( drop = true ) 
--------- B -----------
{'intent': {'gloss': ['get', 'html', 'source', 'of', 'selenium', 'webelement', 'var0'], 'words': ['get', 'html', 'source', 'of', 'selenium', 'webelement', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'element'}, 'snippet': "var0.get_attribute('innerhtml')"}
Generated  translation
driver. find _ element _ by _ xpath ( " / / div [ @ id ='a'] / / a [ @ class ='click'] " ) 
--------- B -----------
{'intent': {'gloss': ['add', 'an', 'entry', 'str0', 'at', 'the', 'beginning', 'of', 'list', 'var0'], 'words': ['add', 'an', 'entry', 'str0', 'at', 'the', 'beginning', 'of', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'wuggah', 'var0': 'mylist'}, 'snippet': "var0.insert(0, 'str0')"}
Generated  translation
var0 ='str0'+ var0 [ 1 : ] 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'last', 'key', 'of', 'dictionary', 'var0'], 'words': ['get', 'the', 'last', 'key', 'of', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'dict'}, 'snippet': 'list(var0.keys())[-1]'}
Generated  translation
var0 [ - 1 ] 
--------- B -----------
{'intent': {'gloss': ['write', 'line', 'str0', 'to', 'file', 'var0'], 'words': ['write', 'line', 'str0', 'to', 'file', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'hi there', 'var0': 'f'}, 'snippet': "print('str0', file=var0)"}
Generated  translation
var0. write ('str0') 
--------- B -----------
{'intent': {'gloss': ['add', 'a', 'new', 'axis', 'to', 'array', 'var0'], 'words': ['add', 'a', 'new', 'axis', 'to', 'array', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'var0[:, (np.newaxis)]'}
Generated  translation
var0 = var0. shape [ 0 ] 
--------- B -----------
{'intent': {'gloss': ['open', 'a', 'file', 'str0', 'in', 'append', 'mode'], 'words': ['open', 'a', 'file', 'str0', 'in', 'append', 'mode'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'output.txt'}, 'snippet': "file = open('str0', 'a')"}
Generated  translation
f = open ('str0 ','wb') 
--------- B -----------
{'intent': {'gloss': ['format', 'string', 'str0'], 'words': ['format', 'string', 'str0'], 'after': [' ', ' ', '']}, 'slot_map': {'str0': '({0.goals} goals, ${0.penalties})', '( str0 )': '({0.goals} goals, ${0.penalties})'}, 'snippet': '"""str0""".format(self)'}
Generated  translation
" " " str0 " " ". format ('str0') 
--------- B -----------
{'intent': {'gloss': ['concat', 'two', 'matrices', 'var0', 'and', 'var1', 'in', 'numpy'], 'words': ['concat', 'two', 'matrices', 'var0', 'and', 'var1', 'in', 'numpy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'b'}, 'snippet': 'np.vstack((var0, var1))'}
Generated  translation
numpy. concat ( [ ( x, y ) for x, y in zip ( var0, var1 ) ] ) 
--------- B -----------
{'intent': {'gloss': ['send', 'the', 'output', 'of', 'pprint', 'object', 'var0', 'to', 'file', 'var1'], 'words': ['send', 'the', 'output', 'of', 'pprint', 'object', 'var0', 'to', 'file', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'dataobject', 'var1': 'logfile'}, 'snippet': 'pprint.pprint(var0, var1)'}
Generated  translation
output = subprocess. check _ output ( var1, var0 ) 
--------- B -----------
{'intent': {'gloss': ['iterate', 'ove', 'list', 'str0', 'using', 'list', 'comprehension'], 'words': ['iterate', 'ove', 'list', 'str0', 'using', 'list', 'comprehension'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '[1, 2, 3]', '[ str0 ]': '[1, 2, 3]'}, 'snippet': 'print([item for item in [ str0 ]])'}
Generated  translation
dict ( [ x. split ('=') for x in s. split ( ) ] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'filename', 'without', 'extension', 'from', 'file', 'var0'], 'words': ['get', 'filename', 'without', 'extension', 'from', 'file', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'filename'}, 'snippet': 'os.path.splitext(var0)[0]'}
Generated  translation
os. path. split ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'objects', 'var0', ',', 'based', 'on', 'a', 'function', 'var1', 'in', 'descending', 'order'], 'words': ['sort', 'a', 'list', 'of', 'objects', 'var0', ',', 'based', 'on', 'a', 'function', 'var1', 'in', 'descending', 'order'], 'after': [' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'ut', 'var1': 'cmpfun'}, 'snippet': 'var0.sort(key=var1, reverse=true)'}
Generated  translation
var0. sort ( key = lambda x : x. var1 ) 
--------- B -----------
{'intent': {'gloss': ['call', 'a', 'shell', 'script', 'var0', 'using', 'subprocess'], 'words': ['call', 'a', 'shell', 'script', 'var0', 'using', 'subprocess'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'notepad'}, 'snippet': "subprocess.call(['var0'])"}
Generated  translation
subprocess. call ('test. sh otherfunc') 
--------- B -----------
{'intent': {'gloss': ['call', 'a', 'base', 'class', "'", 's', 'class', 'method', 'var0', 'from', 'derived', 'class', 'var1'], 'words': ['call', 'a', 'base', 'class', "'", 's', 'class', 'method', 'var0', 'from', 'derived', 'class', 'var1'], 'after': [' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'do', 'var1': 'derived'}, 'snippet': 'super(var1, cls).var0(a)'}
Generated  translation
super ( var0, self ). _ _ init _ _ ( * args, * * kwargs ) 
--------- B -----------
{'intent': {'gloss': ['open', 'a', 'file', 'str0', 'in', 'write', 'mode'], 'words': ['open', 'a', 'file', 'str0', 'in', 'write', 'mode'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'yourfile.txt'}, 'snippet': "f = open('str0', 'w')"}
Generated  translation
output = open ('str0 ','wb') 
--------- B -----------
{'intent': {'gloss': ['find', 'maximal', 'value', 'in', 'matrix', 'var0'], 'words': ['find', 'maximal', 'value', 'in', 'matrix', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'matrix'}, 'snippet': 'max([max(i) for i in var0])'}
Generated  translation
numpy. reshape ( var0, ( - 1, 1 ) ) 
--------- B -----------
{'intent': {'gloss': ['round', 'number', 'var0', 'to', '2', 'precision', 'after', 'the', 'decimal', 'point'], 'words': ['round', 'number', 'var0', 'to', '2', 'precision', 'after', 'the', 'decimal', 'point'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'answer'}, 'snippet': 'var0 = str(round(var0, 2))'}
Generated  translation
round ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'list', 'of', 'values', 'from', 'dictionary', 'str0', 'w', '.', 'r', '.', 't', '.', 'list', 'of', 'keys', 'str1'], 'words': ['get', 'list', 'of', 'values', 'from', 'dictionary', 'str0', 'w', '.', 'r', '.', 't', '.', 'list', 'of', 'keys', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'mydict', 'str1': 'mykeys'}, 'snippet': '[str0[x] for x in str1]'}
Generated  translation
[ item for item in str1 for item in str0 ] 
--------- B -----------
{'intent': {'gloss': ['append', 'items', 'in', 'list', 'var0', 'to', 'var1'], 'words': ['append', 'items', 'in', 'list', 'var0', 'to', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylog', 'var1': 'list1'}, 'snippet': 'for line in var0:\n    var1.append(line)'}
Generated  translation
var1. append ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['truncate', 'float', '1', '.', '923328437452', 'to', '3', 'decimal', 'places'], 'words': ['truncate', 'float', '1', '.', '923328437452', 'to', '3', 'decimal', 'places'], 'after': [' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'round(1.923328437452, 3)'}
Generated  translation
' %. 2f'% 3. 923328432 
--------- B -----------
{'intent': {'gloss': ['extract', 'attributes', 'str0', 'from', 'string', 'var0'], 'words': ['extract', 'attributes', 'str0', 'from', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'src="js/([^"]*\\bjquery\\b[^"]*)"', 'var0': 'data'}, 'snippet': "re.findall('str0', var0)"}
Generated  translation
print ( ['str0 '. join ( c ) for c in var0 if c. isdigit ( ) ] ) 
--------- B -----------
{'intent': {'gloss': ['find', 'all', 'matches', 'of', 'regex', 'pattern', 'str0', 'in', 'string', 'var0'], 'words': ['find', 'all', 'matches', 'of', 'regex', 'pattern', 'str0', 'in', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '([a-fa-f\\d]{32})', 'var0': 'data', '( str0 )': '([a-fa-f\\d]{32})'}, 'snippet': "re.findall('str0', var0)"}
Generated  translation
re. findall ('str0 ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['return', 'a', '401', 'unauthorized', 'in', 'django'], 'words': ['return', 'a', '401', 'unauthorized', 'in', 'django'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "return httpresponse('unauthorized', status=401)"}
Generated  translation
401ango. objects. filter ( id = 1 ) 
--------- B -----------
{'intent': {'gloss': ['create', 'list', 'var0', 'containing', 'two', 'empty', 'lists'], 'words': ['create', 'list', 'var0', 'containing', 'two', 'empty', 'lists'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'y'}, 'snippet': 'var0 = [[] for n in range(2)]'}
Generated  translation
var0 = [ [ ] for i in range ( len ( var0 ) ) ] 
--------- B -----------
{'intent': {'gloss': ['converting', 'list', 'of', 'strings', 'var0', 'to', 'list', 'of', 'integer', 'var1'], 'words': ['converting', 'list', 'of', 'strings', 'var0', 'to', 'list', 'of', 'integer', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'intstringlist', 'var1': 'nums'}, 'snippet': 'var1 = [int(x) for x in var0]'}
Generated  translation
[ int ( x ) for x in var1 ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'int', 'values', 'in', 'list', 'var0', 'to', 'float'], 'words': ['convert', 'int', 'values', 'in', 'list', 'var0', 'to', 'float'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'numlist'}, 'snippet': 'var0 = [float(x) for x in var0]'}
Generated  translation
[ float ( x ) for x in var0 ] 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'list', 'containing', 'all', 'ascii', 'characters', 'as', 'its', 'elements'], 'words': ['create', 'a', 'list', 'containing', 'all', 'ascii', 'characters', 'as', 'its', 'elements'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': '[chr(i) for i in range(127)]'}
Generated  translation
list ( map ( ord, var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['concatenate', 'a', 'list', 'of', 'strings', 'str0'], 'words': ['concatenate', 'a', 'list', 'of', 'strings', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "['a', 'b', 'c']", '[ str0 ]': "['a', 'b', 'c']"}, 'snippet': '"""""".join([ str0 ])'}
Generated  translation
" " " " " ". join ( str0 ) 
--------- B -----------
{'intent': {'gloss': ['create', '3d', 'array', 'of', 'zeroes', 'of', 'size', 'str0'], 'words': ['create', '3d', 'array', 'of', 'zeroes', 'of', 'size', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '(3,3,3)', '( str0 )': '(3,3,3)'}, 'snippet': 'numpy.zeros((3, 3, 3))'}
Generated  translation
np. einsum ('ijk, ikl - > ijl') 
--------- B -----------
{'intent': {'gloss': ['join', 'elements', 'of', 'list', 'var0', 'with', 'a', 'comma', 'str0'], 'words': ['join', 'elements', 'of', 'list', 'var0', 'with', 'a', 'comma', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l', 'str0': ','}, 'snippet': '"""str0""".join(var0)'}
Generated  translation
[ ( x, y ) for x, y in zip ( var0, var0 ) ] 
--------- B -----------
{'intent': {'gloss': ['filter', 'rows', 'in', 'pandas', 'starting', 'with', 'alphabet', 'str0', 'using', 'regular', 'expression', '.'], 'words': ['filter', 'rows', 'in', 'pandas', 'starting', 'with', 'alphabet', 'str0', 'using', 'regular', 'expression', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'f'}, 'snippet': "df.b.str.contains('^f')"}
Generated  translation
df. groupby ('str0'). filter ( lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['initialize', 'a', 'list', 'var0', 'of', '100', 'objects', 'object', '(', ')'], 'words': ['initialize', 'a', 'list', 'var0', 'of', '100', 'objects', 'object', '(', ')'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '']}, 'slot_map': {'var0': 'lst'}, 'snippet': 'var0 = [object() for _ in range(100)]'}
Generated  translation
var0 = [ [ ] for i in range ( 100 ) ] 
--------- B -----------
{'intent': {'gloss': ['get', 'reverse', 'of', 'list', 'items', 'from', 'list', 'str0', 'using', 'extended', 'slicing'], 'words': ['get', 'reverse', 'of', 'list', 'items', 'from', 'list', 'str0', 'using', 'extended', 'slicing'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'b'}, 'snippet': '[x[::-1] for x in str0]'}
Generated  translation
[ i. split ('str0') [ 1 ] for i in range ( len ( str0 ) ) ] 
--------- B -----------
{'intent': {'gloss': ['removing', 'duplicates', 'in', 'list', 'var0'], 'words': ['removing', 'duplicates', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'abracadabra'}, 'snippet': "list(ordereddict.fromkeys('var0'))"}
Generated  translation
mynewlist = list ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['call', 'a', 'shell', 'script', 'str0', 'using', 'subprocess'], 'words': ['call', 'a', 'shell', 'script', 'str0', 'using', 'subprocess'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': './test.sh'}, 'snippet': "subprocess.call(['str0'])"}
Generated  translation
subprocess. call ('str0 ', shell = true ) 
--------- B -----------
{'intent': {'gloss': ['separate', 'words', 'delimited', 'by', 'one', 'or', 'more', 'spaces', 'into', 'a', 'list'], 'words': ['separate', 'words', 'delimited', 'by', 'one', 'or', 'more', 'spaces', 'into', 'a', 'list'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "re.split(' +', 'hello world sample text')"}
Generated  translation
re. split ( ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'list', 'into', 'a', 'generator', 'object'], 'words': ['convert', 'a', 'list', 'into', 'a', 'generator', 'object'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': '(n for n in [1, 2, 3, 5])'}
Generated  translation
list ( itertools. product ( * 2 ) ) 
--------- B -----------
{'intent': {'gloss': ['encode', 'str0', 'to', 'a', 'json', 'string'], 'words': ['encode', 'str0', 'to', 'a', 'json', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "decimal('3.9')"}, 'snippet': "json.dumps(decimal('3.9'))"}
Generated  translation
json. encode ('utf - 8') 
--------- B -----------
{'intent': {'gloss': ['add', 'key', 'str0', 'to', 'dictionary', 'var0', 'with', 'value', 'str1'], 'words': ['add', 'key', 'str0', 'to', 'dictionary', 'var0', 'with', 'value', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'mynewkey', 'var0': 'd', 'str1': 'mynewvalue'}, 'snippet': "var0['str0'] = 'str1'"}
Generated  translation
var0 ['str0'] = 3 
--------- B -----------
{'intent': {'gloss': ['add', 'key', 'str0', 'to', 'dictionary', 'var0', 'with', 'value', '1'], 'words': ['add', 'key', 'str0', 'to', 'dictionary', 'var0', 'with', 'value', '1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'a', 'var0': 'data'}, 'snippet': "var0.update({'str0': 1})"}
Generated  translation
var0 ['str0'] = 1 
--------- B -----------
{'intent': {'gloss': ['add', 'key', 'str0', 'to', 'dictionary', 'var0', 'with', 'value', '1'], 'words': ['add', 'key', 'str0', 'to', 'dictionary', 'var0', 'with', 'value', '1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'a', 'var0': 'data'}, 'snippet': 'var0.update(dict(str0=1))'}
Generated  translation
var0 ['str0'] = 1 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'string', 'into', 'a', 'list', 'of', 'words', 'and', 'whitespace'], 'words': ['split', 'a', 'string', 'into', 'a', 'list', 'of', 'words', 'and', 'whitespace'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "re.split('(\\\\w+)', s)"}
Generated  translation
[ s. strip ( ) for s in re. findall ('\ \ s ', s ) ] 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'integer', 'location', 'of', 'a', 'key', 'var0', 'in', 'a', 'pandas', 'data', 'frame'], 'words': ['get', 'the', 'integer', 'location', 'of', 'a', 'key', 'var0', 'in', 'a', 'pandas', 'data', 'frame'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'bob'}, 'snippet': "df.index.get_loc('var0')"}
Generated  translation
df ['var0']. str. get ('var0') 
--------- B -----------
{'intent': {'gloss': ['add', 'an', 'item', 'with', 'key', 'str0', 'and', 'value', '1', 'to', 'an', 'dictionary', 'var0'], 'words': ['add', 'an', 'item', 'with', 'key', 'str0', 'and', 'value', '1', 'to', 'an', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'third_key', 'var0': 'my_dict'}, 'snippet': "var0.update({'str0': 1})"}
Generated  translation
var0 ['str0'] = 1 
--------- B -----------
{'intent': {'gloss': ['print', 'a', 'string', 'var0', 'with', 'string', 'format'], 'words': ['print', 'a', 'string', 'var0', 'with', 'string', 'format'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'word'}, 'snippet': 'print(\'"{}"\'.format(var0))'}
Generated  translation
print ('value is " { } " '. format ( var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['print', 'str0', 'without', 'newline'], 'words': ['print', 'str0', 'without', 'newline'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {'str0': '.'}, 'snippet': "sys.stdout.write('str0')"}
Generated  translation
print ('\ n '. join ( str0 ) ) 
--------- B -----------
{'intent': {'gloss': ['concatenate', 'array', 'of', 'strings', 'str0', 'into', 'a', 'string'], 'words': ['concatenate', 'array', 'of', 'strings', 'str0', 'into', 'a', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "['a', 'b', 'c', 'd']", '[ str0 ]': "['a', 'b', 'c', 'd']"}, 'snippet': '"""""".join([ str0 ])'}
Generated  translation
" " " " " ". join ( [ str0 ] ) 
--------- B -----------
{'intent': {'gloss': ['write', 'dataframe', 'var0', ',', 'excluding', 'index', ',', 'to', 'a', 'csv', 'file'], 'words': ['write', 'dataframe', 'var0', ',', 'excluding', 'index', ',', 'to', 'a', 'csv', 'file'], 'after': [' ', ' ', '', ' ', ' ', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': 'var0.to_csv(filename, index=false)'}
Generated  translation
var0. to _ csv ('csv ', index = false ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'unicode', 'string', 'var0', 'to', 'ascii'], 'words': ['convert', 'unicode', 'string', 'var0', 'to', 'ascii'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': "var0.encode('iso-8859-15')"}
Generated  translation
var0. encode ('ascii ','ignore') 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'all', 'elements', 'in', 'list', 'var0', 'are', 'identical'], 'words': ['check', 'if', 'all', 'elements', 'in', 'list', 'var0', 'are', 'identical'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylist'}, 'snippet': 'all(x == var0[0] for x in var0)'}
Generated  translation
len ( set ( var0 ) ) = = 1 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'first', 'object', 'from', 'a', 'queryset', 'in', 'django', 'model', 'var0'], 'words': ['get', 'the', 'first', 'object', 'from', 'a', 'queryset', 'in', 'django', 'model', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'entry'}, 'snippet': 'var0.objects.filter()[:1].get()'}
Generated  translation
var0. objects. all ( ). first ( ) 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'str0', 'using', 'a', 'regex', 'str1'], 'words': ['split', 'string', 'str0', 'using', 'a', 'regex', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'words, words, words.', 'str1': '(\\w+)', '( str1 )': '(\\w+)'}, 'snippet': "re.split('str1', 'str0')"}
Generated  translation
re. split ('str1 ','str0') 
--------- B -----------
{'intent': {'gloss': ['sum', 'elements', 'at', 'index', 'var0', 'of', 'each', 'list', 'in', 'list', 'var1'], 'words': ['sum', 'elements', 'at', 'index', 'var0', 'of', 'each', 'list', 'in', 'list', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'column', 'var1': 'data'}, 'snippet': 'print(sum(row[var0] for row in var1))'}
Generated  translation
[ sum ( x ) for x in var1 ] 
--------- B -----------
{'intent': {'gloss': ['flatten', 'list', 'var0'], 'words': ['flatten', 'list', 'var0'], 'after': [' ', ' ', '']}, 'slot_map': {'var0': 'list_of_menuitems'}, 'snippet': '[image for menuitem in var0 for image in menuitem]'}
Generated  translation
var0 = [ i [ 0 ] for i in var0 ] 
--------- B -----------
{'intent': {'gloss': ['create', 'array', 'containing', 'the', 'maximum', 'value', 'of', 'respective', 'elements', 'of', 'array', 'str0', 'and', 'array', 'str1'], 'words': ['create', 'array', 'containing', 'the', 'maximum', 'value', 'of', 'respective', 'elements', 'of', 'array', 'str0', 'and', 'array', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '[2, 3, 4]', 'str1': '[1, 5, 2]', '[ str0 ]': '[2, 3, 4]', '[ str1 ]': '[1, 5, 2]'}, 'snippet': 'np.maximum([ str0 ], [ str1 ])'}
Generated  translation
np. zeros ( ( 6, 9, 10 ) ) + np. array ( [ str0 ] ) [ ( none ), :, ( none ) ] 
--------- B -----------
{'intent': {'gloss': ['print', 'a', 'list', 'var0', 'and', 'move', 'first', '3', 'elements', 'to', 'the', 'end', 'of', 'the', 'list'], 'words': ['print', 'a', 'list', 'var0', 'and', 'move', 'first', '3', 'elements', 'to', 'the', 'end', 'of', 'the', 'list'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': 'print(var0[3:] + var0[:3])'}
Generated  translation
print ( var0 [ - 3 : ] ) 
--------- B -----------
{'intent': {'gloss': ['count', 'non', 'zero', 'values', 'in', 'each', 'column', 'in', 'pandas', 'data', 'frame'], 'words': ['count', 'non', 'zero', 'values', 'in', 'each', 'column', 'in', 'pandas', 'data', 'frame'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'df.astype(bool).sum(axis=1)'}
Generated  translation
df. apply ( lambda x : x. isnan, axis = 0 ) 
--------- B -----------
{'intent': {'gloss': ['search', 'for', 'string', 'that', 'matches', 'regular', 'expression', 'pattern', 'str0', 'in', 'string', 'str1'], 'words': ['search', 'for', 'string', 'that', 'matches', 'regular', 'expression', 'pattern', 'str0', 'in', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '(?<!distillr)\\\\acrotray\\.exe', 'str1': 'c:\\somedir\\acrotray.exe'}, 'snippet': "re.search('str0', 'str1')"}
Generated  translation
re. search ('str0 ', str1 ). group ( 1 ) 
--------- B -----------
{'intent': {'gloss': ['loop', 'over', 'a', 'list', 'var0', 'if', 'sublists', 'length', 'equals', '3'], 'words': ['loop', 'over', 'a', 'list', 'var0', 'if', 'sublists', 'length', 'equals', '3'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylist'}, 'snippet': '[x for x in var0 if len(x) == 3]'}
Generated  translation
for item in var0 : pass 
--------- B -----------
{'intent': {'gloss': ['create', 'list', 'var0', 'containing', '100', 'instances', 'of', 'object', 'var1'], 'words': ['create', 'list', 'var0', 'containing', '100', 'instances', 'of', 'object', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'lst', 'var1': 'object'}, 'snippet': 'var0 = [var1() for i in range(100)]'}
Generated  translation
var0 = [ var1 for _ in range ( 100 ) ] 
--------- B -----------
{'intent': {'gloss': ['joining', 'data', 'from', 'dataframe', 'var0', 'with', 'data', 'from', 'dataframe', 'var1', 'based', 'on', 'matching', 'values', 'of', 'column', 'str0', 'in', 'both', 'dataframes'], 'words': ['joining', 'data', 'from', 'dataframe', 'var0', 'with', 'data', 'from', 'dataframe', 'var1', 'based', 'on', 'matching', 'values', 'of', 'column', 'str0', 'in', 'both', 'dataframes'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df1', 'var1': 'df2', 'str0': 'date_time'}, 'snippet': "var0.merge(var1, on='str0')"}
Generated  translation
s1 = pd. merge ( var0, var1, how ='inner ', on = ['str0'] ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'a', 'directory', 'var0', 'exists', 'and', 'create', 'it', 'if', 'necessary'], 'words': ['check', 'if', 'a', 'directory', 'var0', 'exists', 'and', 'create', 'it', 'if', 'necessary'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'path'}, 'snippet': 'distutils.dir_util.mkpath(var0)'}
Generated  translation
os. path. commonprefix ( ['var0 ', os. path. realpath ( var0 ) ] ) 
--------- B -----------
{'intent': {'gloss': ['access', 'a', 'tag', 'called', 'str0', 'in', 'beautifulsoup', 'var0'], 'words': ['access', 'a', 'tag', 'called', 'str0', 'in', 'beautifulsoup', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'name', 'var0': 'soup'}, 'snippet': "print(var0.find('str0').string)"}
Generated  translation
var0. find _ all ('str0') 
--------- B -----------
{'intent': {'gloss': ['get', 'index', 'of', 'rows', 'in', 'column', 'str0'], 'words': ['get', 'index', 'of', 'rows', 'in', 'column', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'boolcol'}, 'snippet': "df.loc[df['str0']]"}
Generated  translation
df ['str0']. index ('str0') 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'on', 'white', 'spaces'], 'words': ['split', 'string', 'var0', 'on', 'white', 'spaces'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'my_string'}, 'snippet': '""" """.join(var0.split())'}
Generated  translation
re. findall ('\ \ s + ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['shuffle', 'columns', 'of', 'an', 'numpy', 'array', 'str0'], 'words': ['shuffle', 'columns', 'of', 'an', 'numpy', 'array', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'r'}, 'snippet': 'np.random.shuffle(np.transpose(str0))'}
Generated  translation
np. argwhere ( np. all ( str0 = = [ str0 ], axis = ( 1, 2 ) ) ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'items', 'in', 'var0', 'to', 'integers'], 'words': ['convert', 'items', 'in', 'var0', 'to', 'integers'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 't1'}, 'snippet': 't2 = [map(int, x) for x in var0]'}
Generated  translation
int ( str ( i ) for i in var0 ) 
--------- B -----------
{'intent': {'gloss': ['encode', 'string', 'str0'], 'words': ['encode', 'string', 'str0'], 'after': [' ', ' ', '']}, 'slot_map': {'str0': 'data to be encoded'}, 'snippet': "encoded = base64.b64encode('str0')"}
Generated  translation
" " " str0 " " ". encode ('latin - 1') 
--------- B -----------
{'intent': {'gloss': ['encode', 'a', 'string', 'str0', 'to', 'var0', 'encoding'], 'words': ['encode', 'a', 'string', 'str0', 'to', 'var0', 'encoding'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'data to be encoded', 'var0': 'ascii'}, 'snippet': "encoded = 'str0'.encode('var0')"}
Generated  translation
var0. encode ('str0') 
--------- B -----------
{'intent': {'gloss': ['convert', 'unicode', 'string', 'ustr0', 'into', 'dictionary'], 'words': ['convert', 'unicode', 'string', 'ustr0', 'into', 'dictionary'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "{'code1':1,'code2':1}", '{ str0 }': "{'code1':1,'code2':1}"}, 'snippet': "d = ast.literal_eval('str0')"}
Generated  translation
dict ( map ( int, x. split (':') ) for x in s. split ( ',') ) 
--------- B -----------
{'intent': {'gloss': ['open', 'a', 'file', 'str0', 'in', 'write', 'mode'], 'words': ['open', 'a', 'file', 'str0', 'in', 'write', 'mode'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'path/to/file_name.ext'}, 'snippet': "new_file = open('str0', 'w')"}
Generated  translation
output = open ('str0 ','wb') 
--------- B -----------
{'intent': {'gloss': ['convert', 'tuple', 'of', 'tuples', 'str0', 'to', 'list', 'in', 'one', 'line'], 'words': ['convert', 'tuple', 'of', 'tuples', 'str0', 'to', 'list', 'in', 'one', 'line'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "(('aa',), ('bb',), ('cc',))", '( str0 )': "(('aa',), ('bb',), ('cc',))"}, 'snippet': 'map(lambda a: a[0], ( str0 ))'}
Generated  translation
[ list ( t ) for t in str0 ] 
--------- B -----------
{'intent': {'gloss': ['plotting', 'stacked', 'barplots', 'on', 'a', 'panda', 'data', 'frame'], 'words': ['plotting', 'stacked', 'barplots', 'on', 'a', 'panda', 'data', 'frame'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "df.plot(kind='barh', stacked=true)"}
Generated  translation
df. apply ( lambda x : x. tolist ( ) ) 
--------- B -----------
{'intent': {'gloss': ['rotate', 'the', 'xtick', 'labels', 'of', 'matplotlib', 'plot', 'var0', 'by', 'str0', 'degrees', 'to', 'make', 'long', 'labels', 'readable'], 'words': ['rotate', 'the', 'xtick', 'labels', 'of', 'matplotlib', 'plot', 'var0', 'by', 'str0', 'degrees', 'to', 'make', 'long', 'labels', 'readable'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'ax', 'str0': '45'}, 'snippet': 'var0.set_xticklabels(labels, rotation=45)'}
Generated  translation
var0. groupby ('colour'). size ( ). strftime ('% y - % m - % d') 
--------- B -----------
{'intent': {'gloss': ['pandas', 'dataframe', 'get', 'first', 'row', 'of', 'each', 'group', 'by', 'str0'], 'words': ['pandas', 'dataframe', 'get', 'first', 'row', 'of', 'each', 'group', 'by', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'id'}, 'snippet': "df.groupby('str0').first()"}
Generated  translation
pd. concat ( [ df0. head ( 1 ), axis = 1 ) ], axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['call', 'a', 'subprocess', 'with', 'arguments', 'str0', 'that', 'may', 'contain', 'spaces'], 'words': ['call', 'a', 'subprocess', 'with', 'arguments', 'str0', 'that', 'may', 'contain', 'spaces'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'c:\\program files\\vmware\\vmware server\\vmware-cmd.bat'}, 'snippet': "subprocess.popen(['str0'])"}
Generated  translation
subprocess. call ( [ str0 ] ) 
--------- B -----------
{'intent': {'gloss': ['reverse', 'sort', 'counter', 'var0', 'by', 'values'], 'words': ['reverse', 'sort', 'counter', 'var0', 'by', 'values'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'sorted(var0, key=var0.get, reverse=true)'}
Generated  translation
sorted ( var0, key = var0. get ) 
--------- B -----------
{'intent': {'gloss': ['append', 'a', 'numpy', 'array', 'str0', 'to', 'a', 'numpy', 'array', 'str1'], 'words': ['append', 'a', 'numpy', 'array', 'str0', 'to', 'a', 'numpy', 'array', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'b', 'str1': 'a'}, 'snippet': 'np.vstack((str1, str0))'}
Generated  translation
np. zeros ( ( str0 ) ) + np. array ( [ str1 ] ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'lists', 'str0', 'such', 'that', 'third', 'row', 'comes', 'first'], 'words': ['sort', 'a', 'list', 'of', 'lists', 'str0', 'such', 'that', 'third', 'row', 'comes', 'first'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'c2'}, 'snippet': 'str0.sort(key=lambda row: row[2])'}
Generated  translation
sorted ( [ str0 ], key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'elements', 'from', 'list', 'var0', ',', 'that', 'have', 'a', 'field', 'var1', 'value', '30'], 'words': ['get', 'elements', 'from', 'list', 'var0', ',', 'that', 'have', 'a', 'field', 'var1', 'value', '30'], 'after': [' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylist', 'var1': 'n'}, 'snippet': '[x for x in var0 if x.var1 == 30]'}
Generated  translation
[ key for item in var0 if var1 = = 30 ] 
--------- B -----------
{'intent': {'gloss': ['execute', 'script', 'str0', 'using', 'str1', 'shell'], 'words': ['execute', 'script', 'str0', 'using', 'str1', 'shell'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'script.ps1', 'str1': 'powershell.exe'}, 'snippet': "os.system('str1', 'str0')"}
Generated  translation
os. system ('str0') 
--------- B -----------
{'intent': {'gloss': ['concatenate', 'items', 'of', 'list', 'var0', 'with', 'a', 'space', 'str0'], 'words': ['concatenate', 'items', 'of', 'list', 'var0', 'with', 'a', 'space', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l', 'str0': ''}, 'snippet': "print(' '.join(map(str, var0)))"}
Generated  translation
[ x for x in var0 if x not in [ str0 ] ] 
--------- B -----------
{'intent': {'gloss': ['set', 'pythonpath', 'in', 'python', 'script', '.'], 'words': ['set', 'pythonpath', 'in', 'python', 'script', '.'], 'after': [' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "sys.path.append('/path/to/whatever')"}
Generated  translation
subprocess. call ( ['test. sh ', str ( domid ) ] ) 
--------- B -----------
{'intent': {'gloss': ['running', 'bash', 'script', 'str0'], 'words': ['running', 'bash', 'script', 'str0'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {'str0': 'sleep.sh'}, 'snippet': "subprocess.call('str0', shell=true)"}
Generated  translation
subprocess. call ('str0 ', shell = true ) 
--------- B -----------
{'intent': {'gloss': ['write', 'the', 'elements', 'of', 'list', 'var0', 'concatenated', 'by', 'special', 'character', 'str0', 'to', 'file', 'var1'], 'words': ['write', 'the', 'elements', 'of', 'list', 'var0', 'concatenated', 'by', 'special', 'character', 'str0', 'to', 'file', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'lines', 'str0': '\n', 'var1': 'myfile'}, 'snippet': "var1.write('str0'.join(var0))"}
Generated  translation
with open ('str0 ','str0') as f : var1. write ('str0') 
--------- B -----------
{'intent': {'gloss': ['merge', 'list', 'str0', 'and', 'list', 'str1', 'and', 'list', 'str2', 'into', 'one', 'list'], 'words': ['merge', 'list', 'str0', 'and', 'list', 'str1', 'and', 'list', 'str2', 'into', 'one', 'list'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "['it']", 'str1': "['was']", 'str2': "['annoying']", '[ str0 ]': "['it']", '[ str1 ]': "['was']", '[ str2 ]': "['annoying']"}, 'snippet': '[ str0 ] + [ str1 ] + [ str2 ]'}
Generated  translation
[ [ str0 ] for a in zip ( [ str1 ], [ str2 ] ) ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'index', 'at', 'level', '0', 'into', 'a', 'column', 'in', 'dataframe', 'var0'], 'words': ['convert', 'index', 'at', 'level', '0', 'into', 'a', 'column', 'in', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': 'var0.reset_index(level=0, inplace=true)'}
Generated  translation
var0. drop ( var0. columns [ 0 ], axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'the', 'first', 'row', 'of', 'numpy', 'matrix', 'var0', 'to', 'a', 'list'], 'words': ['convert', 'the', 'first', 'row', 'of', 'numpy', 'matrix', 'var0', 'to', 'a', 'list'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'numpy.array(var0)[0].tolist()'}
Generated  translation
numpy. loadtxt ( var0, var0 ) 
--------- B -----------
{'intent': {'gloss': ['how', 'do', 'i', 'sum', 'the', 'first', 'value', 'in', 'each', 'tuple', 'in', 'a', 'list', 'of', 'tuples', 'in', 'python', '?'], 'words': ['how', 'do', 'i', 'sum', 'the', 'first', 'value', 'in', 'each', 'tuple', 'in', 'a', 'list', 'of', 'tuples', 'in', 'python', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'sum([pair[0] for pair in list_of_pairs])'}
Generated  translation
[ sum ( x [ 0 ] for x in var0 ) ] 
--------- B -----------
{'intent': {'gloss': ['run', 'r', 'script', 'str0'], 'words': ['run', 'r', 'script', 'str0'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {'str0': '/usr/bin/rscript --vanilla /pathto/myrscript.r'}, 'snippet': "subprocess.call('str0', shell=true)"}
Generated  translation
run ('str0') 
--------- B -----------
{'intent': {'gloss': ['read', 'a', 'file', 'var0', 'without', 'newlines'], 'words': ['read', 'a', 'file', 'var0', 'without', 'newlines'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'file'}, 'snippet': "[line.rstrip('\\n') for line in var0]"}
Generated  translation
with open ( var0 ) as f : var0 = f. readlines ( ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'item', 'at', 'index', '0', 'from', 'the', 'tuple', 'that', 'has', 'maximum', 'value', 'at', 'index', '1', 'in', 'list', 'var0'], 'words': ['get', 'the', 'item', 'at', 'index', '0', 'from', 'the', 'tuple', 'that', 'has', 'maximum', 'value', 'at', 'index', '1', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'lis'}, 'snippet': 'max(var0, key=itemgetter(1))[0]'}
Generated  translation
max ( var0, key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'lis', 'var0', 'in', 'ascending', 'order', 'based', 'on', 'the', 'degrees', 'value', 'of', 'its', 'elements'], 'words': ['sort', 'lis', 'var0', 'in', 'ascending', 'order', 'based', 'on', 'the', 'degrees', 'value', 'of', 'its', 'elements'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list5'}, 'snippet': 'sorted(var0, lambda x: (degree(x), x))'}
Generated  translation
sorted ( list ( var0. items ( ) ), key = operator. itemgetter ( 1 ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'new', 'list', 'var0by', 'removing', 'empty', 'list', 'from', 'a', 'list', 'of', 'lists', 'var1'], 'words': ['get', 'a', 'new', 'list', 'var0by', 'removing', 'empty', 'list', 'from', 'a', 'list', 'of', 'lists', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list2', 'var1': 'list1'}, 'snippet': 'var0 = [x for x in var1 if x != []]'}
Generated  translation
var0 = [ x for x in var1 if x ] 
--------- B -----------
{'intent': {'gloss': ['match', 'regex', 'str0', 'with', 'string', 'str1'], 'words': ['match', 'regex', 'str0', 'with', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '\\((.*?)\\)|(\\w)', 'str1': '(zyx)bc'}, 'snippet': "re.findall('str0', 'str1')"}
Generated  translation
re. match ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['initialize', 'var0', 'in', 'flask', 'config', 'with', 'str0'], 'words': ['initialize', 'var0', 'in', 'flask', 'config', 'with', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'secret_key', 'str0': 'your_secret_string'}, 'snippet': "app.config['var0'] = 'str0'"}
Generated  translation
config = var0 ['str0'] 
--------- B -----------
{'intent': {'gloss': ['write', 'bytes', 'var0', 'to', 'a', 'file', 'var1', 'in', 'python', '3'], 'words': ['write', 'bytes', 'var0', 'to', 'a', 'file', 'var1', 'in', 'python', '3'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'bytes_', 'var1': 'filename'}, 'snippet': "open('var1', 'wb').write(var0)"}
Generated  translation
open ( var1,'r'). write ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['eliminate', 'all', 'strings', 'from', 'list', 'var0'], 'words': ['eliminate', 'all', 'strings', 'from', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'lst'}, 'snippet': '[element for element in var0 if isinstance(element, int)]'}
Generated  translation
var0. replace ('','' ) 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'list', 'of', 'all', 'keys', 'in', 'cassandra', 'database', 'var0', 'with', 'pycassa'], 'words': ['get', 'a', 'list', 'of', 'all', 'keys', 'in', 'cassandra', 'database', 'var0', 'with', 'pycassa'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'cf'}, 'snippet': 'list(var0.get_range().get_keys())'}
Generated  translation
[ dict ( cassandra, x ) for x in var0. keys ( ) ] 
--------- B -----------
{'intent': {'gloss': ['choose', 'a', 'random', 'file', 'from', 'the', 'directory', 'contents', 'of', 'the', 'c', 'drive', ',', 'str0'], 'words': ['choose', 'a', 'random', 'file', 'from', 'the', 'directory', 'contents', 'of', 'the', 'c', 'drive', ',', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '']}, 'slot_map': {'str0': 'c:\\'}, 'snippet': "random.choice(os.listdir('str0'))"}
Generated  translation
print ( random. load ('str0') ) 
--------- B -----------
{'intent': {'gloss': ['send', 'a', 'signal', 'str0', 'to', 'the', 'current', 'process'], 'words': ['send', 'a', 'signal', 'str0', 'to', 'the', 'current', 'process'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'signal.sigusr1'}, 'snippet': 'os.kill(os.getpid(), signal.sigusr1)'}
Generated  translation
sys. path. getmtime ('str0') 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'string', 'var0', 'with', 'dot', 'and', 'comma', 'into', 'a', 'float', 'number', 'var1'], 'words': ['convert', 'a', 'string', 'var0', 'with', 'dot', 'and', 'comma', 'into', 'a', 'float', 'number', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'my_string', 'var1': 'my_float'}, 'snippet': "var1 = float(var0.replace(',', ''))"}
Generated  translation
var1 = [ float ( item ) for item in var0. split ( ',') ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'string', 'str0', 'with', 'dot', 'and', 'comma', 'into', 'a', 'floating', 'number'], 'words': ['convert', 'a', 'string', 'str0', 'with', 'dot', 'and', 'comma', 'into', 'a', 'floating', 'number'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '123,456.908'}, 'snippet': "float('str0'.replace(',', ''))"}
Generated  translation
" " " str0 " " ". join ( [ str0 ] ) 
--------- B -----------
{'intent': {'gloss': ['make', 'a', 'comma', '-', 'separated', 'string', 'from', 'a', 'list', 'var0'], 'words': ['make', 'a', 'comma', '-', 'separated', 'string', 'from', 'a', 'list', 'var0'], 'after': [' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylist'}, 'snippet': "var0 = ','.join(map(str, var0))"}
Generated  translation
[ item. split ( ) for item in var0. split ( ',') ] 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'list', 'of', 'integers', 'by', 'splitting', 'a', 'string', 'var0', 'with', 'comma'], 'words': ['get', 'a', 'list', 'of', 'integers', 'by', 'splitting', 'a', 'string', 'var0', 'with', 'comma'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'user'}, 'snippet': "[int(s) for s in var0.split(',')]"}
Generated  translation
[ int ( x ) for x in var0. split ( ',') ] 
--------- B -----------
{'intent': {'gloss': ['combine', 'lists', 'var0', 'and', 'var1', 'by', 'alternating', 'their', 'elements'], 'words': ['combine', 'lists', 'var0', 'and', 'var1', 'by', 'alternating', 'their', 'elements'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l1', 'var1': 'l2'}, 'snippet': '[val for pair in zip(var0, var1) for val in pair]'}
Generated  translation
zip ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['retrieve', 'each', 'line', 'from', 'a', 'file', 'str0', 'as', 'a', 'list'], 'words': ['retrieve', 'each', 'line', 'from', 'a', 'file', 'str0', 'as', 'a', 'list'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'file.txt'}, 'snippet': "[line.split() for line in open('str0')]"}
Generated  translation
with open ('str0 ','r') as f : f. write ('\ n') 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'dictionary', 'var0', 'by', 'the', 'key', 'var1'], 'words': ['sort', 'a', 'list', 'of', 'dictionary', 'var0', 'by', 'the', 'key', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylist', 'var1': 'title'}, 'snippet': "var0.sort(key=lambda x: x['var1'])"}
Generated  translation
sorted ( var0, key = lambda x : var1 [ x ] ['var0'] ) 
--------- B -----------
{'intent': {'gloss': ['find', 'the', 'first', 'element', 'of', 'the', 'tuple', 'with', 'the', 'maximum', 'second', 'element', 'in', 'a', 'list', 'of', 'tuples', 'var0'], 'words': ['find', 'the', 'first', 'element', 'of', 'the', 'tuple', 'with', 'the', 'maximum', 'second', 'element', 'in', 'a', 'list', 'of', 'tuples', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'lis'}, 'snippet': 'max(var0, key=lambda item: item[1])[0]'}
Generated  translation
max ( var0, key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['add', 'color', 'bar', 'with', 'image', 'var0', 'to', 'plot', 'var1'], 'words': ['add', 'color', 'bar', 'with', 'image', 'var0', 'to', 'plot', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mappable', 'var1': 'plt'}, 'snippet': 'var1.colorbar(var0=var0, cax=ax3)'}
Generated  translation
var1. update ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['generate', 'all', '2', '-', 'element', 'subsets', 'of', 'tuple', 'str0'], 'words': ['generate', 'all', '2', '-', 'element', 'subsets', 'of', 'tuple', 'str0'], 'after': [' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '(1, 2, 3)', '( str0 )': '(1, 2, 3)'}, 'snippet': 'list(itertools.combinations(( str0 ), 2))'}
Generated  translation
print ( [ ( x, y ) for x, y in zip ( str0, str0 [ 1 : : 2 ] ) ] ) 
--------- B -----------
{'intent': {'gloss': ['how', 'do', 'i', 'insert', 'into', 't1', '(', 'select', '*', 'from', 't2', ')', 'in', 'sqlalchemy', '?'], 'words': ['how', 'do', 'i', 'insert', 'into', 't1', '(', 'select', '*', 'from', 't2', ')', 'in', 'sqlalchemy', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', '', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "session.execute('insert into t1 (select * from t2)')"}
Generated  translation
cursor. execute ('insert into t1 select * from table1 values (? ) ', { } ) 
--------- B -----------
{'intent': {'gloss': ['print', 'new', 'line', 'character', 'as', 'str0', 'in', 'a', 'string', 'str1'], 'words': ['print', 'new', 'line', 'character', 'as', 'str0', 'in', 'a', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '\n', 'str1': 'foo\nbar'}, 'snippet': "print('str1'.encode('string_escape'))"}
Generated  translation
print ('str1') 
--------- B -----------
{'intent': {'gloss': ['calculate', 'the', 'mean', 'of', 'each', 'element', 'in', 'array', 'var0', 'with', 'the', 'element', 'previous', 'to', 'it'], 'words': ['calculate', 'the', 'mean', 'of', 'each', 'element', 'in', 'array', 'var0', 'with', 'the', 'element', 'previous', 'to', 'it'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': '(var0[1:] + var0[:-1]) / 2'}
Generated  translation
np. mean ( var0, axis = 1 ). mean ( ) 
--------- B -----------
{'intent': {'gloss': ['count', 'number', 'of', 'times', 'string', 'str0', 'occurred', 'in', 'string', 'str1'], 'words': ['count', 'number', 'of', 'times', 'string', 'str0', 'occurred', 'in', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'brown', 'str1': 'the big brown fox is brown'}, 'snippet': '"""str1""".count(\'str0\')'}
Generated  translation
" " " str1 " " ". count ('str0') 
--------- B -----------
{'intent': {'gloss': ['download', 'the', 'file', 'from', 'url', 'var0', 'and', 'save', 'it', 'under', 'file', 'var1'], 'words': ['download', 'the', 'file', 'from', 'url', 'var0', 'and', 'save', 'it', 'under', 'file', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'url', 'var1': 'file_name'}, 'snippet': 'urllib.request.urlretrieve(var0, var1)'}
Generated  translation
urllib. request. urlretrieve ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'tuples', 'var0', 'by', 'third', 'item', 'in', 'the', 'tuple'], 'words': ['sort', 'a', 'list', 'of', 'tuples', 'var0', 'by', 'third', 'item', 'in', 'the', 'tuple'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'b'}, 'snippet': 'var0.sort(key=lambda x: x[1][2])'}
Generated  translation
var0. sort ( key = lambda x : x [ 2 ] ) 
--------- B -----------
{'intent': {'gloss': ['subtract', '13', 'from', 'every', 'number', 'in', 'a', 'list', 'var0'], 'words': ['subtract', '13', 'from', 'every', 'number', 'in', 'a', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'var0[:] = [(x - 13) for x in var0]'}
Generated  translation
[ ( x + 13 ) for x, y in zip ( var0, var0 [ 1 : ] ) ] 
--------- B -----------
{'intent': {'gloss': ['capture', 'final', 'output', 'of', 'a', 'chain', 'of', 'system', 'commands', 'str0'], 'words': ['capture', 'final', 'output', 'of', 'a', 'chain', 'of', 'system', 'commands', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'ps -ef | grep something | wc -l'}, 'snippet': "subprocess.check_output('str0', shell=true)"}
Generated  translation
print ( os. environ. get ('str0') ) 
--------- B -----------
{'intent': {'gloss': ['sending', 'http', 'headers', 'to', 'var0'], 'words': ['sending', 'http', 'headers', 'to', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'client'}, 'snippet': "var0.send('http/1.0 200 ok\\r\\n')"}
Generated  translation
r = requests. get ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['subscript', 'text', 'str0', 'with', 'str1', 'as', 'subscripted', 'in', 'matplotlib', 'labels', 'for', 'arrays', 'str2', 'and', 'str3', '.'], 'words': ['subscript', 'text', 'str0', 'with', 'str1', 'as', 'subscripted', 'in', 'matplotlib', 'labels', 'for', 'arrays', 'str2', 'and', 'str3', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'h20', 'str1': '2', 'str2': 'x', 'str3': 'y'}, 'snippet': "plt.plot(str2, str3, label='h₂o')"}
Generated  translation
ax. set _ yticklabels ( ['str2 ','str3'] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'largest', 'key', 'whose', 'not', 'associated', 'with', 'value', 'of', '0', 'in', 'dictionary', 'var0'], 'words': ['get', 'the', 'largest', 'key', 'whose', 'not', 'associated', 'with', 'value', 'of', '0', 'in', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': '(k for k, v in var0.items() if v != 0)'}
Generated  translation
max ( var0, key = lambda x : abs ( x [ 1 ] ) if x [ 0 ] else x [ 0 ] ) 
--------- B -----------
{'intent': {'gloss': ['decode', 'string', 'str0', 'into', 'a', 'normal', 'string'], 'words': ['decode', 'string', 'str0', 'into', 'a', 'normal', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '\\x89\\n'}, 'snippet': '"""str0""".decode(\'string_escape\')'}
Generated  translation
str0. decode ('str0') 
--------- B -----------
{'intent': {'gloss': ['find', 'last', 'occurrence', 'of', 'character', 'str0', 'in', 'string', 'str1'], 'words': ['find', 'last', 'occurrence', 'of', 'character', 'str0', 'in', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '}', 'str1': 'abcd}def}'}, 'snippet': '"""str1""".rfind(\'str0\')'}
Generated  translation
re. findall ('str1 ','str0') 
--------- B -----------
{'intent': {'gloss': ['reverse', 'list', 'var0', 'based', 'on', 'the', 'var1', 'attribute', 'of', 'each', 'object'], 'words': ['reverse', 'list', 'var0', 'based', 'on', 'the', 'var1', 'attribute', 'of', 'each', 'object'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'ut', 'var1': 'count'}, 'snippet': 'var0.sort(key=lambda x: x.var1, reverse=true)'}
Generated  translation
var0. get ( key = lambda x : x. var1 ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'objects', 'var0', 'in', 'reverse', 'order', 'by', 'their', 'var1', 'property'], 'words': ['sort', 'a', 'list', 'of', 'objects', 'var0', 'in', 'reverse', 'order', 'by', 'their', 'var1', 'property'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'ut', 'var1': 'count'}, 'snippet': 'var0.sort(key=lambda x: x.var1, reverse=true)'}
Generated  translation
var0. sort ( key = lambda x : x. var1 ) 
--------- B -----------
{'intent': {'gloss': ['return', 'var0', 'if', 'string', 'var1', 'contains', 'regex', 'str0'], 'words': ['return', 'var0', 'if', 'string', 'var1', 'contains', 'regex', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'true', 'var1': 'foobarrrr', 'str0': 'ba[rzd]'}, 'snippet': "bool(re.search('str0', 'var1'))"}
Generated  translation
var0 = re. sub ('str0 ','', var1 ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'any', 'key', 'in', 'the', 'dictionary', 'var0', 'starts', 'with', 'the', 'string', 'str0'], 'words': ['check', 'if', 'any', 'key', 'in', 'the', 'dictionary', 'var0', 'starts', 'with', 'the', 'string', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'dict1', 'str0': 'emp$$'}, 'snippet': "any(key.startswith('str0') for key in var0)"}
Generated  translation
any ('str0'in list ( var0. items ( ) ) ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'var0', 'of', 'dicts', 'by', 'dict', 'value', 'str0'], 'words': ['sort', 'a', 'list', 'var0', 'of', 'dicts', 'by', 'dict', 'value', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l', 'str0': 'title'}, 'snippet': "var0.sort(key=lambda x: x['str0'])"}
Generated  translation
sorted ( var0, key = lambda x : x ['str0'] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'position', 'of', 'item', 'var0', 'in', 'list', 'var1'], 'words': ['get', 'the', 'position', 'of', 'item', 'var0', 'in', 'list', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'element', 'var1': 'testlist'}, 'snippet': 'try:\n    print(var1.index(var0))\nexcept valueerror:\n    pass'}
Generated  translation
print ( var1. get ( var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['how', 'do', 'i', 'perform', 'secondary', 'sorting', 'in', 'python', '?'], 'words': ['how', 'do', 'i', 'perform', 'secondary', 'sorting', 'in', 'python', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': 'sorted(list5, key=lambda vertex: (degree(vertex), vertex))'}
Generated  translation
sorted ( enumerate ( a ), key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['append', 'each', 'line', 'in', 'file', 'var0', 'into', 'a', 'list'], 'words': ['append', 'each', 'line', 'in', 'file', 'var0', 'into', 'a', 'list'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'myfile'}, 'snippet': "[x for x in var0.splitlines() if x != '']"}
Generated  translation
with open ( var0 ) as f : f. write ('\ n '. join ( var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'symbols', 'from', 'a', 'string', 'var0'], 'words': ['remove', 'symbols', 'from', 'a', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': "re.sub('[^\\\\w]', ' ', var0)"}
Generated  translation
re. sub ('< [ ^ > ] * > ','', var0 ) 
--------- B -----------
{'intent': {'gloss': ['count', 'the', 'number', 'of', 'keys', 'in', 'dictionary', 'var0'], 'words': ['count', 'the', 'number', 'of', 'keys', 'in', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'yourdictfile'}, 'snippet': 'len(set(open(var0).read().split()))'}
Generated  translation
sum ( len ( x ) for x in var0. split ( ) ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'escape', 'character', 'from', 'string', 'str0'], 'words': ['remove', 'escape', 'character', 'from', 'string', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '\\a'}, 'snippet': '"""str0""".decode(\'string_escape\')'}
Generated  translation
" " " " " ". join ( filter ( str. isdigit,'str0') ) 
--------- B -----------
{'intent': {'gloss': ['numpy', 'concatenate', 'two', 'arrays', 'var0', 'and', 'var1', 'along', 'the', 'first', 'axis'], 'words': ['numpy', 'concatenate', 'two', 'arrays', 'var0', 'and', 'var1', 'along', 'the', 'first', 'axis'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'b'}, 'snippet': 'print(concatenate((var0, var1), axis=0))'}
Generated  translation
numpy. concatenate ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['numpy', 'concatenate', 'two', 'arrays', 'var0', 'and', 'var1', 'along', 'the', 'second', 'axis'], 'words': ['numpy', 'concatenate', 'two', 'arrays', 'var0', 'and', 'var1', 'along', 'the', 'second', 'axis'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'b'}, 'snippet': 'print(concatenate((var0, var1), axis=1))'}
Generated  translation
numpy. concatenate ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['fetch', 'address', 'information', 'for', 'host', 'str0', 'ion', 'port', '80'], 'words': ['fetch', 'address', 'information', 'for', 'host', 'str0', 'ion', 'port', '80'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'google.com'}, 'snippet': "print(socket.getaddrinfo('str0', 80))"}
Generated  translation
sys. path. insert ( 0,'str0') 
--------- B -----------
{'intent': {'gloss': ['flask', 'set', 'folder', 'str0', 'as', 'the', 'default', 'template', 'folder'], 'words': ['flask', 'set', 'folder', 'str0', 'as', 'the', 'default', 'template', 'folder'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'wherever'}, 'snippet': "flask(__name__, template_folder='str0')"}
Generated  translation
webbrowser. open ('str0') 
--------- B -----------
{'intent': {'gloss': ['delete', 'all', 'instances', 'of', 'a', 'character', 'str0', 'in', 'a', 'string', 'str1'], 'words': ['delete', 'all', 'instances', 'of', 'a', 'character', 'str0', 'in', 'a', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'i', 'str1': 'it is icy'}, 'snippet': "re.sub('str0', '', 'str1')"}
Generated  translation
re. sub ('[ ^ a - za - z ] ','','str1') 
--------- B -----------
{'intent': {'gloss': ['django', 'filter', 'by', 'hour'], 'words': ['django', 'filter', 'by', 'hour'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "entry.objects.filter(pub_date__contains='08:00')"}
Generated  translation
driver. find _ element _ by _ xpath ( " / / * [ @ id ='one'] " ). click ( ) 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'multi', '-', 'line', 'string', 'str0', 'by', 'new', 'line', 'character', 'str1'], 'words': ['split', 'a', 'multi', '-', 'line', 'string', 'str0', 'by', 'new', 'line', 'character', 'str1'], 'after': [' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'a \n b \r\n c', 'str1': '\n'}, 'snippet': "' a \\n b \\r\\n c '.split('str1')"}
Generated  translation
re. split ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['remove', 'substring', 'str0', 'from', 'a', 'string', 'str1'], 'words': ['remove', 'substring', 'str0', 'from', 'a', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'bag,', 'str1': 'lamp, bag, mirror'}, 'snippet': "print('str1'.replace('str0', ''))"}
Generated  translation
" " " str1 " " ". replace ('str0 ','' ) 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'string', 'var0', 'by', 'last', 'occurrence', 'of', 'character', 'str0'], 'words': ['split', 'a', 'string', 'var0', 'by', 'last', 'occurrence', 'of', 'character', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x', 'str0': '-'}, 'snippet': "print(var0.rpartition('str0')[0])"}
Generated  translation
re. split ('str0 ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'last', 'part', 'of', 'a', 'string', 'before', 'the', 'character', 'str0'], 'words': ['get', 'the', 'last', 'part', 'of', 'a', 'string', 'before', 'the', 'character', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '-'}, 'snippet': "print(x.rsplit('str0', 1)[0])"}
Generated  translation
re. findall ('\ \. [ ^. ] + ','str0') 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'random', 'list', 'of', 'integers'], 'words': ['create', 'a', 'random', 'list', 'of', 'integers'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': '[int(1000 * random.random()) for i in range(10000)]'}
Generated  translation
[ int ( x ) for x in range ( 100 ) ] 
--------- B -----------
{'intent': {'gloss': ['google', 'app', 'engine', 'execute', 'gql', 'query', 'str0', 'with', 'parameter', 'str1'], 'words': ['google', 'app', 'engine', 'execute', 'gql', 'query', 'str0', 'with', 'parameter', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'select * from schedule where station = $1', 'str1': 'foo.key()'}, 'snippet': "db.gqlquery('str0', foo.key())"}
Generated  translation
urllib. request. urlretrieve ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'string', 'into', 'datetime', 'using', 'the', 'format', 'str0'], 'words': ['convert', 'a', 'string', 'into', 'datetime', 'using', 'the', 'format', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '%y-%m-%d %h:%m:%s.%f'}, 'snippet': "datetime.datetime.strptime(string_date, 'str0')"}
Generated  translation
datetime. strptime ('str0 ','str0') 
--------- B -----------
{'intent': {'gloss': ['find', 'the', 'key', 'associated', 'with', 'the', 'largest', 'value', 'in', 'dictionary', 'var0', 'whilst', 'key', 'is', 'non', '-', 'zero', 'value'], 'words': ['find', 'the', 'key', 'associated', 'with', 'the', 'largest', 'value', 'in', 'dictionary', 'var0', 'whilst', 'key', 'is', 'non', '-', 'zero', 'value'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'max(k for k, v in var0.items() if v != 0)'}
Generated  translation
max ( var0, key = lambda x : ( abs ( x [ 1 ] ), x [ 0 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'largest', 'key', 'in', 'a', 'dictionary', 'var0', 'with', 'non', '-', 'zero', 'value'], 'words': ['get', 'the', 'largest', 'key', 'in', 'a', 'dictionary', 'var0', 'with', 'non', '-', 'zero', 'value'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'max(k for k, v in var0.items() if v != 0)'}
Generated  translation
max ( abs ( x - y ) for x, y in var0. items ( ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'index', 'of', 'rows', 'in', 'dataframe', 'var0', 'which', 'column', 'str0', 'matches', 'value', 'true'], 'words': ['get', 'index', 'of', 'rows', 'in', 'dataframe', 'var0', 'which', 'column', 'str0', 'matches', 'value', 'true'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'boolcol'}, 'snippet': "var0[var0['str0']].index.tolist()"}
Generated  translation
var0. loc [ var0 ['str0']. isin ( var0 ) ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'pandas', 'index', 'in', 'a', 'dataframe', 'to', 'columns'], 'words': ['convert', 'pandas', 'index', 'in', 'a', 'dataframe', 'to', 'columns'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "df.reset_index(level=['tick', 'obs'])"}
Generated  translation
df. apply ( lambda x : x. columns, axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'html', 'from', 'the', 'current', 'web', 'page', 'of', 'a', 'selenium', 'driver'], 'words': ['get', 'the', 'html', 'from', 'the', 'current', 'web', 'page', 'of', 'a', 'selenium', 'driver'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "driver.execute_script('return document.documentelement.outerhtml;')"}
Generated  translation
driver. get ( ) 
--------- B -----------
{'intent': {'gloss': ['replacing', 'nan', 'in', 'the', 'dataframe', 'var0', 'with', 'row', 'average'], 'words': ['replacing', 'nan', 'in', 'the', 'dataframe', 'var0', 'with', 'row', 'average'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': 'var0.fillna(var0.mean(axis=1), axis=1)'}
Generated  translation
var0. fillna ( method ='ffill ', inplace = true ) 
--------- B -----------
{'intent': {'gloss': ['print', 'elements', 'of', 'list', 'var0', 'seperated', 'by', 'tabs', 'str0'], 'words': ['print', 'elements', 'of', 'list', 'var0', 'seperated', 'by', 'tabs', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list', 'str0': '\t'}, 'snippet': "print('str0'.join(map(str, var0)))"}
Generated  translation
print ('str0 '. join ( [ str0 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['print', 'unicode', 'string', 'str0', 'with', 'utf', '-', '8'], 'words': ['print', 'unicode', 'string', 'str0', 'with', 'utf', '-', '8'], 'after': [' ', ' ', ' ', ' ', ' ', '', '', '']}, 'slot_map': {'str0': 'Ð¿Ñ\x80Ð¸'}, 'snippet': "print('str0'.encode('raw_unicode_escape'))"}
Generated  translation
print ('str0 '. decode ('utf - 8') ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'words': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'testlist'}, 'snippet': '[i for i, x in enumerate(var0) if x == 1]'}
Generated  translation
print ( var0. shape [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'words': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'testlist'}, 'snippet': '[i for i, x in enumerate(var0) if x == 1]'}
Generated  translation
print ( var0. shape [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['django', 'response', 'with', 'json', 'var0'], 'words': ['django', 'response', 'with', 'json', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'data'}, 'snippet': "return httpresponse(var0, mimetype='application/json')"}
Generated  translation
content. objects. extra ( select = {'var0':'length ( name )'} ). order _ by ('~') 
--------- B -----------
{'intent': {'gloss': ['formate', 'each', 'string', 'cin', 'list', 'var0', 'into', 'pattern', 'str0'], 'words': ['formate', 'each', 'string', 'cin', 'list', 'var0', 'into', 'pattern', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'elements', 'str0': '%{0}%'}, 'snippet': "var0 = ['str0'.format(element) for element in var0]"}
Generated  translation
" " " str0 " " ". format ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['converting', 'two', 'lists', 'str0', 'and', 'str1', 'into', 'a', 'matrix'], 'words': ['converting', 'two', 'lists', 'str0', 'and', 'str1', 'into', 'a', 'matrix'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '[1, 2, 3]', 'str1': '[4, 5, 6]', '[ str0 ]': '[1, 2, 3]', '[ str1 ]': '[4, 5, 6]'}, 'snippet': 'np.column_stack(([ str0 ], [ str1 ]))'}
Generated  translation
numpy. merge ( [ str0, str1 ], [ str0 ] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'all', 'the', 'elements', 'except', 'strings', 'from', 'the', 'list', 'str0', '.'], 'words': ['get', 'all', 'the', 'elements', 'except', 'strings', 'from', 'the', 'list', 'str0', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'lst'}, 'snippet': '[element for element in str0 if not isinstance(element, str)]'}
Generated  translation
[ i for i in str0 if i not in [ str0 ] ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'datetime', 'object', 'str0', 'to', 'seconds'], 'words': ['convert', 'datetime', 'object', 'str0', 'to', 'seconds'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '(1970, 1, 1)', '( str0 )': '(1970, 1, 1)'}, 'snippet': '(t - datetime.datetime( str0 )).total_seconds()'}
Generated  translation
datetime. datetime. strptime ('str0 ','% b % d, % y'). strftime ('% a') 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'highest', 'element', 'in', 'absolute', 'value', 'in', 'a', 'numpy', 'matrix', 'var0'], 'words': ['get', 'the', 'highest', 'element', 'in', 'absolute', 'value', 'in', 'a', 'numpy', 'matrix', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'max(var0.min(), var0.max(), key=abs)'}
Generated  translation
print ( max ( var0, key = operator. itemgetter ( 1 ) ) ) 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'string', 'var0', 'considering', 'the', 'spaces', 'str0'], 'words': ['split', 'a', 'string', 'var0', 'considering', 'the', 'spaces', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mystring', 'str0': ''}, 'snippet': "var0.replace(' ', '! !').split('!')"}
Generated  translation
re. split ('\ \ s + ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['how', 'to', 'convert', 'a', 'string', 'from', 'cp', '-', '1251', 'to', 'utf', '-', '8', '?'], 'words': ['how', 'to', 'convert', 'a', 'string', 'from', 'cp', '-', '1251', 'to', 'utf', '-', '8', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', '', '', '', '']}, 'slot_map': {}, 'snippet': "d.decode('cp1251').encode('utf8')"}
Generated  translation
" " " [UNK] " " ". encode ('utf - 8'). decode ('utf - 8') 
--------- B -----------
{'intent': {'gloss': ['python', 'save', 'list', 'var0', 'to', 'file', 'object', 'str0'], 'words': ['python', 'save', 'list', 'var0', 'to', 'file', 'object', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylist', 'str0': 'save.txt'}, 'snippet': "pickle.dump(var0, open('str0', 'wb'))"}
Generated  translation
var0. savefig ('str0') 
--------- B -----------
{'intent': {'gloss': ['search', 'for', 'occurrences', 'of', 'regex', 'pattern', 'str0', 'in', 'xml', 'string', 'var0'], 'words': ['search', 'for', 'occurrences', 'of', 'regex', 'pattern', 'str0', 'in', 'xml', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '>.*<', 'var0': 'line'}, 'snippet': "print(re.search('str0', var0).group(0))"}
Generated  translation
print ( var0. search ('str0'). group ( 1 ) ) 
--------- B -----------
{'intent': {'gloss': ['count', 'the', 'occurrences', 'of', 'items', 'in', 'list', 'var0'], 'words': ['count', 'the', 'occurrences', 'of', 'items', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': '[[x, var0.count(x)] for x in set(var0)]'}
Generated  translation
sum ( isinstance ( x, int ) for x in var0 ) 
--------- B -----------
{'intent': {'gloss': ['copy', 'all', 'values', 'in', 'a', 'column', 'str0', 'to', 'a', 'new', 'column', 'str1', 'in', 'a', 'pandas', 'data', 'frame', 'str2'], 'words': ['copy', 'all', 'values', 'in', 'a', 'column', 'str0', 'to', 'a', 'new', 'column', 'str1', 'in', 'a', 'pandas', 'data', 'frame', 'str2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'b', 'str1': 'd', 'str2': 'df'}, 'snippet': "str2['str1'] = str2['str0']"}
Generated  translation
str2 ['str0'] = df ['str1']. str ['str0'] 
--------- B -----------
{'intent': {'gloss': ['convert', 'string', 'var0', 'into', 'a', 'list', 'of', 'integers', 'var1'], 'words': ['convert', 'string', 'var0', 'into', 'a', 'list', 'of', 'integers', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'user_input', 'var1': 'user_list'}, 'snippet': "var1 = [int(number) for number in var0.split(',')]"}
Generated  translation
var1 = map ( int, var0. split ( ) ) 
--------- B -----------
{'intent': {'gloss': ['sorting', 'data', 'in', 'dataframe', 'pandas'], 'words': ['sorting', 'data', 'in', 'dataframe', 'pandas'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "df.sort_values(['system_num', 'dis'])"}
Generated  translation
df. sorting ( df. columns, axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'all', 'matches', 'with', 'regex', 'pattern', 'str0', 'in', 'list', 'of', 'string', 'var0'], 'words': ['get', 'all', 'matches', 'with', 'regex', 'pattern', 'str0', 'in', 'list', 'of', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '\\d+[xx]', 'var0': 'teststr'}, 'snippet': "[i for i in var0 if re.search('str0', i)]"}
Generated  translation
[ m. start ( ) for m in re. findall ('str0 ', var0 ) ] 
--------- B -----------
{'intent': {'gloss': ['resized', 'image', 'var0', 'to', 'width', ',', 'height', 'of', 'str0', 'with', 'filter', 'of', 'var1'], 'words': ['resized', 'image', 'var0', 'to', 'width', ',', 'height', 'of', 'str0', 'with', 'filter', 'of', 'var1'], 'after': [' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'image', 'str0': '(x, y)', 'var1': 'antialias', '( str0 )': '(x, y)'}, 'snippet': 'var0 = var0.resize(( str0 ), var0.var1)'}
Generated  translation
var0. reshape ( var0, - 1 ). size ( ) 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'list', 'of', 'integers', 'var0', 'from', 'a', 'file', 'str0'], 'words': ['get', 'a', 'list', 'of', 'integers', 'var0', 'from', 'a', 'file', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'lst', 'str0': 'filename.txt'}, 'snippet': "var0 = map(int, open('str0').readlines())"}
Generated  translation
var0 = open ('str0'). read ( ). split ( ) 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'at', 'every', 'space', 'followed', 'by', 'an', 'upper', '-', 'case', 'letter'], 'words': ['split', 'string', 'var0', 'at', 'every', 'space', 'followed', 'by', 'an', 'upper', '-', 'case', 'letter'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', '']}, 'slot_map': {'var0': 'input'}, 'snippet': "re.split('[ ](?=[a-z])', var0)"}
Generated  translation
re. findall ('\ \ [ (. *? ) \ \ ] ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['sorting', 'a', 'list', 'of', 'lists', 'in', 'python'], 'words': ['sorting', 'a', 'list', 'of', 'lists', 'in', 'python'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'c2.sort(key=lambda row: (row[2], row[1]))'}
Generated  translation
[ sorted ( item ) for item in var0 ] 
--------- B -----------
{'intent': {'gloss': ['delete', 'all', 'characters', 'str0', 'in', 'string', 'str1'], 'words': ['delete', 'all', 'characters', 'str0', 'in', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'i', 'str1': 'it is icy'}, 'snippet': '"""str1""".replace(\'str0\', \'\')'}
Generated  translation
" " " " " ". join ( filter ( str1,'str0') ) 
--------- B -----------
{'intent': {'gloss': ['sum', 'the', 'corresponding', 'decimal', 'values', 'for', 'binary', 'values', 'of', 'each', 'boolean', 'element', 'in', 'list', 'var0'], 'words': ['sum', 'the', 'corresponding', 'decimal', 'values', 'for', 'binary', 'values', 'of', 'each', 'boolean', 'element', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'sum(1 << i for i, b in enumerate(var0) if b)'}
Generated  translation
sum ( [ ( int ( x ) ) for x in bin ( var0 ) ] ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'dictionaries', 'var0', 'by', 'the', 'value', 'of', 'the', 'dictionary', 'key', 'var1'], 'words': ['sort', 'a', 'list', 'of', 'dictionaries', 'var0', 'by', 'the', 'value', 'of', 'the', 'dictionary', 'key', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list_to_be_sorted', 'var1': 'name'}, 'snippet': "newlist = sorted(var0, key=lambda k: k['var1'])"}
Generated  translation
sorted ( var0, key = lambda x : var1 [ x ] ['var0'] ) 
--------- B -----------
{'intent': {'gloss': ['write', 'var0', 'to', 'a', 'binary', 'file', 'var1'], 'words': ['write', 'var0', 'to', 'a', 'binary', 'file', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'newfilebytes', 'var1': 'newfile'}, 'snippet': "var1.write(struct.pack('5b', *var0))"}
Generated  translation
open ( var1,'r'). write ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['find', 'intersection', 'data', 'between', 'series', 'var0', 'and', 'series', 'var1'], 'words': ['find', 'intersection', 'data', 'between', 'series', 'var0', 'and', 'series', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's1', 'var1': 's2'}, 'snippet': 'pd.series(list(set(var0).intersection(set(var1))))'}
Generated  translation
var0. groupby ( np. arange ( len ( var1 ) ). size ( ) ) 
--------- B -----------
{'intent': {'gloss': ['format', 'string', 'str0', 'with', 'variables', 'var0', 'and', 'var1'], 'words': ['format', 'string', 'str0', 'with', 'variables', 'var0', 'and', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '({} goals, ${})', 'var0': 'goals', 'var1': 'penalties', '( str0 )': '({} goals, ${})'}, 'snippet': '"""str0""".format(self.var0, self.var1)'}
Generated  translation
" " " str0 " " ". format ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['combine', 'elements', 'of', 'each', 'list', 'in', 'list', 'var0', 'into', 'digits', 'of', 'a', 'single', 'integer'], 'words': ['combine', 'elements', 'of', 'each', 'list', 'in', 'list', 'var0', 'into', 'digits', 'of', 'a', 'single', 'integer'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': "[''.join(str(d) for d in x) for x in var0]"}
Generated  translation
map ( int,''. join ( [ str ( i ) for i in var0 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['substitute', 'ascii', 'letters', 'in', 'string', 'str0', 'with', 'empty', 'string', 'str1'], 'words': ['substitute', 'ascii', 'letters', 'in', 'string', 'str0', 'with', 'empty', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'aas30dsa20', 'str1': ''}, 'snippet': "re.sub('\\\\d', 'str1', 'str0')"}
Generated  translation
" " " str0 " " ". replace ( "'",'str1') 
--------- B -----------
{'intent': {'gloss': ['increment', 'a', 'value', 'with', 'leading', 'zeroes', 'in', 'a', 'number', 'var0'], 'words': ['increment', 'a', 'value', 'with', 'leading', 'zeroes', 'in', 'a', 'number', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'str(int(var0) + 1).zfill(len(var0))'}
Generated  translation
min ( var0, key = lambda x : abs ( x - 1 ) ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'a', 'pandas', 'dataframe', 'var0', "'", 's', 'index', 'is', 'sorted'], 'words': ['check', 'if', 'a', 'pandas', 'dataframe', 'var0', "'", 's', 'index', 'is', 'sorted'], 'after': [' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': 'all(var0.index[:-1] <= var0.index[1:])'}
Generated  translation
var0. groupby ('index'). size ( ). reset _ index ( drop = true ) 
--------- B -----------
{'intent': {'gloss': ['create', 'multidimensional', 'array', 'var0', 'with', '3', 'rows', 'and', '2', 'columns', 'in', 'python'], 'words': ['create', 'multidimensional', 'array', 'var0', 'with', '3', 'rows', 'and', '2', 'columns', 'in', 'python'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'matrix'}, 'snippet': 'var0 = [[a, b], [c, d], [e, f]]'}
Generated  translation
var0. groupby ( np. arange ( len ( var0. columns ) ), 2 ) 
--------- B -----------
{'intent': {'gloss': ['sorting', 'a', 'python', 'list', 'by', 'two', 'criteria'], 'words': ['sorting', 'a', 'python', 'list', 'by', 'two', 'criteria'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'sorted(list, key=lambda x: (x[0], -x[1]))'}
Generated  translation
sorted ( list ( data. items ( ) ), key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['click', 'a', 'href', 'button', 'having', 'text', 'str0', 'with', 'selenium'], 'words': ['click', 'a', 'href', 'button', 'having', 'text', 'str0', 'with', 'selenium'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'send inmail'}, 'snippet': "driver.findelement(by.linktext('str0')).click()"}
Generated  translation
driver. find _ element _ by _ css _ selector ('str0'). click ( ) 
--------- B -----------
{'intent': {'gloss': ['click', 'a', 'href', 'button', 'with', 'text', 'str0', 'with', 'selenium'], 'words': ['click', 'a', 'href', 'button', 'with', 'text', 'str0', 'with', 'selenium'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'send inmail'}, 'snippet': "driver.find_element_by_link_text('str0').click()"}
Generated  translation
driver. find _ element _ by _ css _ selector ('str0'). click ( ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'var0', 'by', 'length', 'of', 'value', 'in', 'tuple'], 'words': ['sort', 'a', 'list', 'var0', 'by', 'length', 'of', 'value', 'in', 'tuple'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': 'var0.sort(key=lambda t: len(t[1]), reverse=true)'}
Generated  translation
print ( sorted ( var0, key = lambda x : len ( x ), len ( x ) ) ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'array', 'var0', 'into', 'a', 'list'], 'words': ['convert', 'array', 'var0', 'into', 'a', 'list'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'numpy.array(var0).reshape(-1).tolist()'}
Generated  translation
list ( map ( int, var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['swap', 'keys', 'with', 'values', 'in', 'a', 'dictionary', 'var0'], 'words': ['swap', 'keys', 'with', 'values', 'in', 'a', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a'}, 'snippet': 'res = dict((v, k) for k, v in var0.items())'}
Generated  translation
dict ( ( v, k ) for k, v in var0. items ( ) ) 
--------- B -----------
{'intent': {'gloss': ['open', 'a', 'background', 'process', 'str0', 'with', 'arguments', 'str1'], 'words': ['open', 'a', 'background', 'process', 'str0', 'with', 'arguments', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'background-process', 'str1': 'arguments'}, 'snippet': "subprocess.popen(['str0', 'str1'])"}
Generated  translation
os. system ('str0') 
--------- B -----------
{'intent': {'gloss': ['find', 'duplicate', 'names', 'in', 'column', 'str0', 'of', 'the', 'dataframe', 'var0'], 'words': ['find', 'duplicate', 'names', 'in', 'column', 'str0', 'of', 'the', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'name', 'var0': 'x'}, 'snippet': "var0.set_index('str0').index.get_duplicates()"}
Generated  translation
var0. groupby ('str0'). agg ( lambda x : x. duplicated ( ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', '5th', 'item', 'of', 'a', 'generator'], 'words': ['get', 'the', '5th', 'item', 'of', 'a', 'generator'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'next(itertools.islice(range(10), 5, 5 + 1))'}
Generated  translation
print ( max ( enumerate ( a ), key = lambda x : x [ 1 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'list', 'of', 'string', 'numbers', 'into', 'list', 'of', 'integers'], 'words': ['convert', 'list', 'of', 'string', 'numbers', 'into', 'list', 'of', 'integers'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "map(int, eval(input('enter the unfriendly numbers: ')))"}
Generated  translation
[ int ( i ) for i in range ( 10 ) ] 
--------- B -----------
{'intent': {'gloss': ['how', 'do', 'i', 'sort', 'a', 'list', 'of', 'dictionaries', 'by', 'values', 'of', 'the', 'dictionary', 'in', 'python', '?'], 'words': ['how', 'do', 'i', 'sort', 'a', 'list', 'of', 'dictionaries', 'by', 'values', 'of', 'the', 'dictionary', 'in', 'python', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "list_of_dicts.sort(key=operator.itemgetter('name'))"}
Generated  translation
sorted ( list ( data. items ( ) ), key = lambda x : x [ 1 ] ['name'] ) 
--------- B -----------
{'intent': {'gloss': ['how', 'do', 'i', 'sort', 'a', 'list', 'of', 'dictionaries', 'by', 'values', 'of', 'the', 'dictionary', 'in', 'python', '?'], 'words': ['how', 'do', 'i', 'sort', 'a', 'list', 'of', 'dictionaries', 'by', 'values', 'of', 'the', 'dictionary', 'in', 'python', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "list_of_dicts.sort(key=operator.itemgetter('age'))"}
Generated  translation
sorted ( list ( data. items ( ) ), key = lambda x : x [ 1 ] ['name'] ) 
--------- B -----------
{'intent': {'gloss': ['join', 'together', 'with', 'str0', 'elements', 'inside', 'a', 'list', 'indexed', 'with', 'str1', 'within', 'a', 'dictionary', 'var0'], 'words': ['join', 'together', 'with', 'str0', 'elements', 'inside', 'a', 'list', 'indexed', 'with', 'str1', 'within', 'a', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': ',', 'str1': 'category', 'var0': 'trans'}, 'snippet': '"""str0""".join(var0[\'str1\'])'}
Generated  translation
[ k for k, v in zip ( var0. items ( ) ) if k! ='str1'] 
--------- B -----------
{'intent': {'gloss': ['get', 'json', 'data', 'from', 'restful', 'service', 'str0'], 'words': ['get', 'json', 'data', 'from', 'restful', 'service', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'url'}, 'snippet': "json.load(urllib.request.urlopen('str0'))"}
Generated  translation
json. loads ( request. post. get ('str0') ) 
--------- B -----------
{'intent': {'gloss': ['decode', 'a', 'hex', 'string', 'str0', 'to', 'utf', '-', '8', '.'], 'words': ['decode', 'a', 'hex', 'string', 'str0', 'to', 'utf', '-', '8', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', '', '', '']}, 'slot_map': {'str0': '4a4b4c'}, 'snippet': "bytes.fromhex('str0').decode('utf-8')"}
Generated  translation
str0. decode ('hex') 
--------- B -----------
{'intent': {'gloss': ['concatenate', 'elements', 'of', 'list', 'var0', 'by', 'a', 'colon', 'str0'], 'words': ['concatenate', 'elements', 'of', 'list', 'var0', 'by', 'a', 'colon', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'b', 'str0': ':'}, 'snippet': '"""str0""".join(str(x) for x in var0)'}
Generated  translation
np. concatenate ( ( var0 [ str0 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'key', 'str0', 'from', 'dictionary', 'var0'], 'words': ['remove', 'key', 'str0', 'from', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'c', 'var0': 'd'}, 'snippet': "{i: var0[i] for i in var0 if i != 'str0'}"}
Generated  translation
var0. pop ('str0 ', none ) 
--------- B -----------
{'intent': {'gloss': ['cut', 'off', 'the', 'last', 'word', 'of', 'a', 'sentence', 'var0'], 'words': ['cut', 'off', 'the', 'last', 'word', 'of', 'a', 'sentence', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'content'}, 'snippet': '""" """.join(var0.split(\' \')[:-1])'}
Generated  translation
var0. split ( ) [ - 1 ] 
--------- B -----------
{'intent': {'gloss': ['sum', 'all', 'elements', 'of', 'nested', 'list', 'var0'], 'words': ['sum', 'all', 'elements', 'of', 'nested', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': 'sum(sum(i) if isinstance(i, list) else i for i in var0)'}
Generated  translation
sum ( sum ( x ) for x in var0 ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'directory', 'str0', 'exists', 'and', 'create', 'it', 'if', 'necessary'], 'words': ['check', 'if', 'directory', 'str0', 'exists', 'and', 'create', 'it', 'if', 'necessary'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'directory'}, 'snippet': 'if not os.path.exists(str0):\n    os.makedirs(str0)'}
Generated  translation
os. path. dirname ( os. path. exists ('str0') ) 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'dictionary', 'var0', 'of', 'key', '-', 'value', 'pairs', 'in', 'pymongo', 'cursor', 'var1'], 'words': ['get', 'a', 'dictionary', 'var0', 'of', 'key', '-', 'value', 'pairs', 'in', 'pymongo', 'cursor', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'records', 'var1': 'cursor'}, 'snippet': "var0 = dict((record['_id'], record) for record in var1)"}
Generated  translation
var1 [ 0 ]. dict ( var0 [ k ] ) 
--------- B -----------
{'intent': {'gloss': ['count', 'the', 'occurrences', 'of', 'items', 'in', 'list', 'var0'], 'words': ['count', 'the', 'occurrences', 'of', 'items', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': 'dict((x, var0.count(x)) for x in set(var0))'}
Generated  translation
sum ( isinstance ( x, int ) for x in var0 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'list', 'of', 'indexes', 'of', 'rows', 'where', 'column', 'str0', 'values', 'match', 'true'], 'words': ['get', 'list', 'of', 'indexes', 'of', 'rows', 'where', 'column', 'str0', 'values', 'match', 'true'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'boolcol'}, 'snippet': "df[df['str0'] == true].index.tolist()"}
Generated  translation
[ i for i in range ( len ( var0 ) ) if v! ='str0'] 
--------- B -----------
{'intent': {'gloss': ['remove', 'a', 'div', 'with', 'a', 'id', 'str0', 'using', 'beautifulsoup'], 'words': ['remove', 'a', 'div', 'with', 'a', 'id', 'str0', 'using', 'beautifulsoup'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'main-content'}, 'snippet': "soup.find('div', id='str0').decompose()"}
Generated  translation
sys. path. insert ( 0,'str0') 
--------- B -----------
{'intent': {'gloss': ['filter', 'rows', 'containing', 'key', 'word', 'var0', 'in', 'column', 'var1'], 'words': ['filter', 'rows', 'containing', 'key', 'word', 'var0', 'in', 'column', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'ball', 'var1': 'ids'}, 'snippet': "df[df['var1'].str.contains('var0')]"}
Generated  translation
[ rows ['var1']. filter ( var0. var1 ) ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'list', 'var0', 'into', 'a', 'comma', 'separated', 'string'], 'words': ['convert', 'list', 'var0', 'into', 'a', 'comma', 'separated', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list_of_ints'}, 'snippet': '""",""".join([str(i) for i in var0])'}
Generated  translation
" " ", " " ". join ( str ( i ) for i in var0. split ( ) ) 
--------- B -----------
{'intent': {'gloss': ['unzip', 'list', 'var0'], 'words': ['unzip', 'list', 'var0'], 'after': [' ', ' ', '']}, 'slot_map': {'var0': 'original'}, 'snippet': 'result = [a for a, b in var0], [b for a, b in var0]'}
Generated  translation
var0 = [ ] 
--------- B -----------
{'intent': {'gloss': ['unzip', 'list', 'var0', 'and', 'return', 'a', 'generator'], 'words': ['unzip', 'list', 'var0', 'and', 'return', 'a', 'generator'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'original'}, 'snippet': 'result = (a for a, b in var0), (b for a, b in var0)'}
Generated  translation
generator. unzip ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['reverse', 'the', 'keys', 'and', 'values', 'in', 'a', 'dictionary', 'var0'], 'words': ['reverse', 'the', 'keys', 'and', 'values', 'in', 'a', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mydictionary'}, 'snippet': '{i[1]: i[0] for i in list(var0.items())}'}
Generated  translation
dict ( ( v, k ) for k, v in var0. items ( ) ) 
--------- B -----------
{'intent': {'gloss': ['call', 'multiple', 'bash', 'function', '‘vasp', '’', 'and', '‘tee', 'tee', '_', 'output', '’', 'using', '‘|', '’'], 'words': ['call', 'multiple', 'bash', 'function', '‘vasp', '’', 'and', '‘tee', 'tee', '_', 'output', '’', 'using', '‘|', '’'], 'after': [' ', ' ', ' ', ' ', '', ' ', ' ', ' ', '', '', '', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "subprocess.check_call('vasp | tee tee_output', shell=true)"}
Generated  translation
call ( multiple bash ‘, ‘ tee _ tee _ output ) 
--------- B -----------
{'intent': {'gloss': ['download', 'a', 'file', 'str0', 'over', 'http', 'and', 'save', 'to', 'str1'], 'words': ['download', 'a', 'file', 'str0', 'over', 'http', 'and', 'save', 'to', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'http://www.example.com/songs/mp3.mp3', 'str1': 'mp3.mp3'}, 'snippet': "urllib.request.urlretrieve('str0', 'str1')"}
Generated  translation
testfile = urllib. request. urlopener ( ) testfile. retrieve ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['encode', 'binary', 'string', 'str0', 'to', 'base64', 'code'], 'words': ['encode', 'binary', 'string', 'str0', 'to', 'base64', 'code'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'your string'}, 'snippet': "base64.b64encode(bytes('str0', 'utf-8'))"}
Generated  translation
binascii. encode ('str0') 
--------- B -----------
{'intent': {'gloss': ['identify', 'duplicate', 'values', 'in', 'list', 'var0'], 'words': ['identify', 'duplicate', 'values', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mylist'}, 'snippet': '[k for k, v in list(counter(var0).items()) if v > 1]'}
Generated  translation
woduplicates = list ( set ( var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['subscript', 'text', 'str0', 'with', 'str1', 'as', 'subscripted', 'in', 'matplotlib', 'labels', 'for', 'arrays', 'str2', 'and', 'str3', '.'], 'words': ['subscript', 'text', 'str0', 'with', 'str1', 'as', 'subscripted', 'in', 'matplotlib', 'labels', 'for', 'arrays', 'str2', 'and', 'str3', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'h20', 'str1': '2', 'str2': 'x', 'str3': 'y'}, 'snippet': "plt.plot(str2, str3, label='$h_2o$')"}
Generated  translation
ax. set _ yticklabels ( ['str2 ','str3'] ) 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'list', 'containing', 'the', 'indexes', 'of', 'rows', 'where', 'the', 'value', 'of', 'column', 'str0', 'in', 'dataframe', 'var0', 'are', 'equal', 'to', 'true'], 'words': ['create', 'a', 'list', 'containing', 'the', 'indexes', 'of', 'rows', 'where', 'the', 'value', 'of', 'column', 'str0', 'in', 'dataframe', 'var0', 'are', 'equal', 'to', 'true'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'boolcol', 'var0': 'df'}, 'snippet': "var0.iloc[np.flatnonzero(var0['str0'])]"}
Generated  translation
[ var0 ['str0'] for var0 in range ( len ( var0 ) ) ] 
--------- B -----------
{'intent': {'gloss': ['replace', 'all', 'occurences', 'of', 'newlines', 'str0', 'with', 'str1', 'in', 'dataframe', 'var0'], 'words': ['replace', 'all', 'occurences', 'of', 'newlines', 'str0', 'with', 'str1', 'in', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '\n', 'str1': '<br>', 'var0': 'df'}, 'snippet': "var0.replace({'str0': 'str1'}, regex=true)"}
Generated  translation
var0. replace ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['replace', 'all', 'occurrences', 'of', 'a', 'string', 'str0', 'by', 'string', 'str1', 'in', 'a', 'pandas', 'data', 'frame', 'var0'], 'words': ['replace', 'all', 'occurrences', 'of', 'a', 'string', 'str0', 'by', 'string', 'str1', 'in', 'a', 'pandas', 'data', 'frame', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '\n', 'str1': '<br>', 'var0': 'df'}, 'snippet': "var0.replace({'str0': 'str1'}, regex=true)"}
Generated  translation
var0. replace ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'list', 'containing', 'each', 'two', 'adjacent', 'letters', 'in', 'string', 'var0', 'as', 'its', 'elements'], 'words': ['create', 'a', 'list', 'containing', 'each', 'two', 'adjacent', 'letters', 'in', 'string', 'var0', 'as', 'its', 'elements'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'word'}, 'snippet': '[(x + y) for x, y in zip(var0, var0[1:])]'}
Generated  translation
print (''. join ( [ str ( i ) for i in zip ( a2, a1 ) ] ) ) 
--------- B -----------
{'intent': {'gloss': ['click', 'a', 'href', 'button', 'str0', 'with', 'selenium'], 'words': ['click', 'a', 'href', 'button', 'str0', 'with', 'selenium'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'send'}, 'snippet': "driver.find_element_by_partial_link_text('str0').click()"}
Generated  translation
driver. find _ element _ by _ css _ selector ('str0'). click ( ) 
--------- B -----------
{'intent': {'gloss': ['split', 'string', 'var0', 'by', 'words', 'that', 'ends', 'with', 'str0'], 'words': ['split', 'string', 'var0', 'by', 'words', 'that', 'ends', 'with', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's', 'str0': 'd'}, 'snippet': "re.findall('\\\\b(\\\\w+)d\\\\b', var0)"}
Generated  translation
re. split ('\ \ s + ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['find', 'all', 'words', 'in', 'a', 'string', 'var0', 'that', 'start', 'with', 'the', 'str0', 'sign'], 'words': ['find', 'all', 'words', 'in', 'a', 'string', 'var0', 'that', 'start', 'with', 'the', 'str0', 'sign'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mystring', 'str0': '$'}, 'snippet': "[word for word in var0.split() if word.startswith('str0')]"}
Generated  translation
re. findall ('\ \ w + ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'unix', 'timestamp', 'str0', 'to', 'formatted', 'string', 'str1'], 'words': ['convert', 'unix', 'timestamp', 'str0', 'to', 'formatted', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '1347517370', 'str1': '%y-%m-%d %h:%m:%s'}, 'snippet': "time.strftime('str1', time.localtime(1347517370))"}
Generated  translation
datetime. datetime. strptime ('str1 ','% h : % m'). strftime ('str0') 
--------- B -----------
{'intent': {'gloss': ['display', 'the', 'float', 'str0', 'as', 'a', 'percentage'], 'words': ['display', 'the', 'float', 'str0', 'as', 'a', 'percentage'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '1/3*100'}, 'snippet': "print('{0:.0f}%'.format(1.0 / 3 * 100))"}
Generated  translation
float ('str0') 
--------- B -----------
{'intent': {'gloss': ['write', 'records', 'in', 'dataframe', 'var0', 'to', 'table', 'str0', 'in', 'schema', 'str1'], 'words': ['write', 'records', 'in', 'dataframe', 'var0', 'to', 'table', 'str0', 'in', 'schema', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'test', 'str1': 'a_schema'}, 'snippet': "var0.to_sql('str0', engine, schema='str1')"}
Generated  translation
var0. to _ csv ('str1 ', cols = ['str0'] ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'elements', 'from', 'list', 'var0', 'that', 'have', 'an', 'index', 'number', 'mentioned', 'in', 'list', 'var1'], 'words': ['remove', 'elements', 'from', 'list', 'var0', 'that', 'have', 'an', 'index', 'number', 'mentioned', 'in', 'list', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'oldlist', 'var1': 'removelist'}, 'snippet': 'newlist = [v for i, v in enumerate(var0) if i not in var1]'}
Generated  translation
[ x for x in var0 if x not in var1 ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'tuple', 'of', 'tuples', 'str0', 'to', 'tuple'], 'words': ['convert', 'tuple', 'of', 'tuples', 'str0', 'to', 'tuple'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "(('aa',), ('bb',), ('cc',))", '( str0 )': "(('aa',), ('bb',), ('cc',))"}, 'snippet': 'from functools import reduce\nreduce(lambda a, b: a + b, ( str0 ))'}
Generated  translation
tuple ( zip ( * [ ( str0 ), ( str0 ) ] ) ) 
--------- B -----------
{'intent': {'gloss': ['python', 'pandas', ':', 'how', 'to', 'replace', 'a', 'characters', 'in', 'a', 'column', 'of', 'a', 'dataframe', '?'], 'words': ['python', 'pandas', ':', 'how', 'to', 'replace', 'a', 'characters', 'in', 'a', 'column', 'of', 'a', 'dataframe', '?'], 'after': [' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "df['range'].replace(',', '-', inplace=true)"}
Generated  translation
df. apply ( lambda x : x. replace ('[ ^ a - za - z ] ','' ) ) 
--------- B -----------
{'intent': {'gloss': ['filter', 'dataframe', 'var0', 'by', 'values', 'in', 'column', 'var1', 'that', 'appear', 'more', 'than', 'once'], 'words': ['filter', 'dataframe', 'var0', 'by', 'values', 'in', 'column', 'var1', 'that', 'appear', 'more', 'than', 'once'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'var1': 'a'}, 'snippet': "var0.groupby('var1').filter(lambda x: len(x) > 1)"}
Generated  translation
var0. groupby ('var1'). size ( ). sum ( ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'datetime', 'column', 'str0', 'of', 'pandas', 'dataframe', 'str1', 'to', 'ordinal'], 'words': ['convert', 'datetime', 'column', 'str0', 'of', 'pandas', 'dataframe', 'str1', 'to', 'ordinal'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'date', 'str1': 'df'}, 'snippet': "str1['str0'].apply(lambda x: x.toordinal())"}
Generated  translation
str1. str ['str0'] = df ['str0']. astype ( int ) 
--------- B -----------
{'intent': {'gloss': ['reverse', 'sort', 'list', 'of', 'dicts', 'var0', 'by', 'value', 'for', 'key', 'var1'], 'words': ['reverse', 'sort', 'list', 'of', 'dicts', 'var0', 'by', 'value', 'for', 'key', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l', 'var1': 'time'}, 'snippet': "var0 = sorted(var0, key=itemgetter('var1'), reverse=true)"}
Generated  translation
sorted ( var0, key = lambda i : var1 [ i ] ['var0'] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'rows', 'of', 'dataframe', 'var0', 'that', 'match', 'regex', 'str0'], 'words': ['get', 'rows', 'of', 'dataframe', 'var0', 'that', 'match', 'regex', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': '(hel|just)', '( str0 )': '(hel|just)'}, 'snippet': "var0.loc[var0[0].str.contains('str0')]"}
Generated  translation
var0. loc [ var0 ['str0']. isin ( var0 ) ] 
--------- B -----------
{'intent': {'gloss': ['sort', 'list', 'var0', 'based', 'on', 'second', 'index', 'of', 'each', 'string', 'var1'], 'words': ['sort', 'list', 'var0', 'based', 'on', 'second', 'index', 'of', 'each', 'string', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list_of_strings', 'var1': 's'}, 'snippet': "sorted(var0, key=lambda var1: var1.split(',')[1])"}
Generated  translation
var0. sort ( key = lambda x : x [ 2 ] ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'dictionaries', 'var0', 'by', 'values', 'in', 'key', 'var1', 'in', 'descending', 'order'], 'words': ['sort', 'a', 'list', 'of', 'dictionaries', 'var0', 'by', 'values', 'in', 'key', 'var1', 'in', 'descending', 'order'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l', 'var1': 'name'}, 'snippet': "newlist = sorted(var0, key=itemgetter('var1'), reverse=true)"}
Generated  translation
sorted ( var0, key = lambda i : var1. index ( list ( i. values ( ) ) [ 0 ], reverse = true ) ) 
--------- B -----------
{'intent': {'gloss': ['django', 'get', 'maximum', 'value', 'associated', 'with', 'field', 'str0', 'in', 'model', 'var0'], 'words': ['django', 'get', 'maximum', 'value', 'associated', 'with', 'field', 'str0', 'in', 'model', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'added', 'var0': 'authorizedemail'}, 'snippet': "var0.objects.filter(group=group).order_by('-added')[0]"}
Generated  translation
var0. objects. order _ by ('str0') ['str0'] 
--------- B -----------
{'intent': {'gloss': ['download', 'a', 'file', 'str0', 'over', 'http'], 'words': ['download', 'a', 'file', 'str0', 'over', 'http'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'http://www.example.com/'}, 'snippet': "response = urllib.request.urlopen('str0')\nhtml = response.read()"}
Generated  translation
urllib. request. urlretrieve ('str0 ','str0') 
--------- B -----------
{'intent': {'gloss': ['convert', 'epoch', 'time', 'represented', 'as', 'milliseconds', 'var0', 'to', 'string', 'using', 'format', 'str0'], 'words': ['convert', 'epoch', 'time', 'represented', 'as', 'milliseconds', 'var0', 'to', 'string', 'using', 'format', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's', 'str0': '%y-%m-%d %h:%m:%s.%f'}, 'snippet': "datetime.datetime.fromtimestamp(var0).strftime('str0')"}
Generated  translation
datetime. datetime. now ( ). strftime ('str0') 
--------- B -----------
{'intent': {'gloss': ['upload', 'file', 'using', 'ftp'], 'words': ['upload', 'file', 'using', 'ftp'], 'after': [' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "ftp.storlines('stor ' + filename, open(filename, 'r'))"}
Generated  translation
ftp. retrbinary ( upload filename ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'list', 'of', 'lists', 'var0', 'to', 'list', 'of', 'integers'], 'words': ['convert', 'list', 'of', 'lists', 'var0', 'to', 'list', 'of', 'integers'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': "[int(''.join(str(d) for d in x)) for x in var0]"}
Generated  translation
[ map ( int, sublist ) for sublist in var0 ] 
--------- B -----------
{'intent': {'gloss': ['replace', 'a', 'separate', 'word', 'str0', 'by', 'str1', 'in', 'a', 'string', 'str2'], 'words': ['replace', 'a', 'separate', 'word', 'str0', 'by', 'str1', 'in', 'a', 'string', 'str2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'h3', 'str1': 'h1', 'str2': 'text'}, 'snippet': "re.sub('\\\\bh3\\\\b', 'str1', str2)"}
Generated  translation
re. sub ('(. * ) ','str2 ','str0') 
--------- B -----------
{'intent': {'gloss': ['insert', 'data', 'from', 'a', 'string', 'var0', 'to', 'sqlite', 'db', 'var1'], 'words': ['insert', 'data', 'from', 'a', 'string', 'var0', 'to', 'sqlite', 'db', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'testfield', 'var1': 'c'}, 'snippet': 'var1.execute("insert into test values (?, \'bar\')", (var0,))'}
Generated  translation
var1. execute ('insert or replace into table values ( % s ) ', ( var0, ) ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'all', 'special', 'characters', ',', 'punctuation', 'and', 'spaces', 'from', 'a', 'string', 'var0', 'using', 'regex'], 'words': ['remove', 'all', 'special', 'characters', ',', 'punctuation', 'and', 'spaces', 'from', 'a', 'string', 'var0', 'using', 'regex'], 'after': [' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mystring'}, 'snippet': "re.sub('[^a-za-z0-9]+', '', var0)"}
Generated  translation
re. sub ('[ ^ \ \ w + ] ','', var0 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'list', 'containing', 'the', 'sum', 'of', 'each', 'element', 'var0', 'in', 'list', 'var1', 'plus', 'the', 'previous', 'elements'], 'words': ['get', 'a', 'list', 'containing', 'the', 'sum', 'of', 'each', 'element', 'var0', 'in', 'list', 'var1', 'plus', 'the', 'previous', 'elements'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'i', 'var1': 'l'}, 'snippet': '[sum(var1[:var0]) for var0, _ in enumerate(var1)]'}
Generated  translation
[ sum ( x ) for x in var1 for y in var0 ] 
--------- B -----------
{'intent': {'gloss': ['beautifulsoup', 'find', 'all', 'str0', 'elements', 'in', 'html', 'string', 'var0', 'with', 'class', 'of', 'str1'], 'words': ['beautifulsoup', 'find', 'all', 'str0', 'elements', 'in', 'html', 'string', 'var0', 'with', 'class', 'of', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'span', 'var0': 'soup', 'str1': 'stargryb sp'}, 'snippet': "var0.find_all('str0', {'class': 'str1'})"}
Generated  translation
soup. findall ('str0 ', attrs = {'str1':'str1'} ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'duplicate', 'elements', 'from', 'list', 'str0'], 'words': ['remove', 'duplicate', 'elements', 'from', 'list', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'l'}, 'snippet': 'list(dict((x[0], x) for x in str0).values())'}
Generated  translation
[ k for k, g in itertools. groupby ( [ str0 ] ) ] 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'words': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'testlist'}, 'snippet': 'for i in [i for i, x in enumerate(var0) if x == 1]:\n    pass'}
Generated  translation
print ( var0. shape [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'words': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'testlist'}, 'snippet': 'for i in (i for i, x in enumerate(var0) if x == 1):\n    pass'}
Generated  translation
print ( var0. shape [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['python', 'split', 'a', 'string', 'using', 'regex'], 'words': ['python', 'split', 'a', 'string', 'using', 'regex'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "re.findall('(.+?):(.+?)\\\\b ?', text)"}
Generated  translation
re. findall ('\ \ w + ','str0') 
--------- B -----------
{'intent': {'gloss': ['get', 'all', 'text', 'that', 'is', 'not', 'enclosed', 'within', 'square', 'brackets', 'in', 'string', 'var0'], 'words': ['get', 'all', 'text', 'that', 'is', 'not', 'enclosed', 'within', 'square', 'brackets', 'in', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'example_str'}, 'snippet': "re.findall('(.*?)\\\\[.*?\\\\]', var0)"}
Generated  translation
re. sub ('\ \ [ ( [ ^ \ \ ] ] * ) \ \ ] ','', var0 ) 
--------- B -----------
{'intent': {'gloss': ['read', 'a', 'file', 'str0', 'into', 'a', 'list', 'var0'], 'words': ['read', 'a', 'file', 'str0', 'into', 'a', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'c:/name/mydocuments/numbers', 'var0': 'data'}, 'snippet': "var0 = [line.strip() for line in open('str0', 'r')]"}
Generated  translation
var0 = [ line. split ( ',') for line in open ('str0') ] 
--------- B -----------
{'intent': {'gloss': ['loop', 'through', 'the', 'ip', 'address', 'range', 'str0'], 'words': ['loop', 'through', 'the', 'ip', 'address', 'range', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '192.168.x.x'}, 'snippet': 'for i, j in product(list(range(256)), list(range(256))):\n    pass'}
Generated  translation
globals ( ) ['str0']. apply ( lambda x : x. split ('str0') ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'last', 'comma', 'character', 'str0', 'in', 'string', 'var0'], 'words': ['remove', 'last', 'comma', 'character', 'str0', 'in', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': ',', 'var0': 's'}, 'snippet': '"""""".join(var0.rsplit(\'str0\', 1))'}
Generated  translation
var0. replace ('str0 ','' ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'dictionary', 'var0', 'based', 'on', 'key', 'var1', 'in', 'descending', 'order'], 'words': ['sort', 'a', 'list', 'of', 'dictionary', 'var0', 'based', 'on', 'key', 'var1', 'in', 'descending', 'order'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l', 'var1': 'time'}, 'snippet': "var0 = sorted(var0, key=lambda a: a['var1'], reverse=true)"}
Generated  translation
sorted ( var0, key = itemgetter ( 1 ), reverse = true ) 
--------- B -----------
{'intent': {'gloss': ['find', 'the', 'string', 'in', 'var0', 'between', 'two', 'special', 'characters', 'str0', 'and', 'str1'], 'words': ['find', 'the', 'string', 'in', 'var0', 'between', 'two', 'special', 'characters', 'str0', 'and', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'your_string', 'str0': '[', 'str1': ']'}, 'snippet': "re.search('\\\\[(.*)\\\\]', var0).group(1)"}
Generated  translation
re. findall ('\ \ s + ','str0 ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'integer', 'var0', 'into', 'an', 'unassigned', 'integer'], 'words': ['convert', 'integer', 'var0', 'into', 'an', 'unassigned', 'integer'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'number'}, 'snippet': "struct.unpack('h', struct.pack('h', var0))"}
Generated  translation
struct. unpack ('> q ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['sum', 'elements', 'at', 'the', 'same', 'index', 'in', 'list', 'var0'], 'words': ['sum', 'elements', 'at', 'the', 'same', 'index', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'data'}, 'snippet': '[[sum(item) for item in zip(*items)] for items in zip(*var0)]'}
Generated  translation
map ( sum, zip ( * var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'rid', 'of', 'none', 'values', 'in', 'dictionary', 'var0'], 'words': ['get', 'rid', 'of', 'none', 'values', 'in', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'kwargs'}, 'snippet': 'res = {k: v for k, v in list(var0.items()) if v is not none}'}
Generated  translation
{ key : val for key, val in list ( var0. items ( ) ) if val! = 42 } 
--------- B -----------
{'intent': {'gloss': ['merge', 'a', 'nested', 'dictionary', 'var0', 'into', 'a', 'flat', 'dictionary', 'by', 'concatenating', 'nested', 'values', 'with', 'the', 'same', 'key', 'var1'], 'words': ['merge', 'a', 'nested', 'dictionary', 'var0', 'into', 'a', 'flat', 'dictionary', 'by', 'concatenating', 'nested', 'values', 'with', 'the', 'same', 'key', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'dicts', 'var1': 'k'}, 'snippet': '{var1: [d[var1] for d in var0] for var1 in var0[0]}'}
Generated  translation
dict ( ( k, v ) for k, v in var1. items ( ) if k! = var0 [ k ] ) 
--------- B -----------
{'intent': {'gloss': ['loop', 'over', 'files', 'in', 'directory', 'var0'], 'words': ['loop', 'over', 'files', 'in', 'directory', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'source'}, 'snippet': 'for root, dirs, filenames in os.walk(var0):\n    for f in filenames:\n        pass'}
Generated  translation
for dirname, dirnames, filenames in os. walk ( var0 ) : pass 
--------- B -----------
{'intent': {'gloss': ['join', 'each', 'element', 'in', 'array', 'var0', 'with', 'element', 'at', 'the', 'same', 'index', 'in', 'array', 'var1', 'as', 'a', 'tuple'], 'words': ['join', 'each', 'element', 'in', 'array', 'var0', 'with', 'element', 'at', 'the', 'same', 'index', 'in', 'array', 'var1', 'as', 'a', 'tuple'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'b'}, 'snippet': 'np.array([zip(x, y) for x, y in zip(var0, var1)])'}
Generated  translation
np. zeros ( ( var0, var1 ) ) 
--------- B -----------
{'intent': {'gloss': ['extract', 'brackets', 'from', 'string', 'var0'], 'words': ['extract', 'brackets', 'from', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': "brackets = re.sub('[^(){}[\\\\]]', '', var0)"}
Generated  translation
re. findall ('\ \ [ (. *? ) \ \ ] ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['append', 'a', 'tuple', 'of', 'elements', 'from', 'list', 'var0', 'with', 'indexes', 'str0', 'to', 'list', 'var1'], 'words': ['append', 'a', 'tuple', 'of', 'elements', 'from', 'list', 'var0', 'with', 'indexes', 'str0', 'to', 'list', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'str0': '[0][0] [0][2]', 'var1': 'b', '[ str0 ]': '[0][0] [0][2]'}, 'snippet': 'var1.append((var0[0][0], var0[0][2]))'}
Generated  translation
[ ( x, var0 ) for x in var1 ] 
--------- B -----------
{'intent': {'gloss': ['reverse', 'sort', 'counter', 'var0', 'by', 'value'], 'words': ['reverse', 'sort', 'counter', 'var0', 'by', 'value'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'sorted(list(var0.items()), key=lambda pair: pair[1], reverse=true)'}
Generated  translation
sorted ( var0, key = var0. get ) 
--------- B -----------
{'intent': {'gloss': ['add', 'a', 'column', 'str0', 'with', 'value', 'str1', 'to', 'dataframe', 'var0'], 'words': ['add', 'a', 'column', 'str0', 'with', 'value', 'str1', 'to', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'day', 'str1': 'sat', 'var0': 'df'}, 'snippet': "var0.xs('str1', level='str0', drop_level=false)"}
Generated  translation
var0 ['str0'] = var0 ['str1']. apply ( lambda x : str0 ['str0'] ) 
--------- B -----------
{'intent': {'gloss': ['sorting', 'a', 'list', 'of', 'lists', 'in', 'python'], 'words': ['sorting', 'a', 'list', 'of', 'lists', 'in', 'python'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'c2.sort(key=lambda row: (row[2], row[1], row[0]))'}
Generated  translation
[ sorted ( item ) for item in var0 ] 
--------- B -----------
{'intent': {'gloss': ['get', 'an', 'array', 'of', 'the', 'mean', 'of', 'each', 'two', 'consecutive', 'values', 'in', 'numpy', 'array', 'var0'], 'words': ['get', 'an', 'array', 'of', 'the', 'mean', 'of', 'each', 'two', 'consecutive', 'values', 'in', 'numpy', 'array', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'var0[:-1] + (var0[1:] - var0[:-1]) / 2'}
Generated  translation
var0 [ np. arange ( len ( var0. shape [ 0 ] ) / 2 ) ] 
--------- B -----------
{'intent': {'gloss': ['how', 'to', 'sort', 'a', 'dataframe', 'by', 'the', 'ocurrences', 'in', 'a', 'column', 'in', 'python', '(', 'pandas', ')'], 'words': ['how', 'to', 'sort', 'a', 'dataframe', 'by', 'the', 'ocurrences', 'in', 'a', 'column', 'in', 'python', '(', 'pandas', ')'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', '']}, 'slot_map': {}, 'snippet': "df.groupby('prots').sum().sort('scores', ascending=false)"}
Generated  translation
df. sort ( df. columns, axis = 1, ascending = [ true, false ] ) 
--------- B -----------
{'intent': {'gloss': ['python', 'regex', 'to', 'find', 'all', 'numbers', 'and', 'dots', 'from', 'str0'], 'words': ['python', 'regex', 'to', 'find', 'all', 'numbers', 'and', 'dots', 'from', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'text'}, 'snippet': "re.findall('test([\\\\d.]*\\\\d+)', str0)"}
Generated  translation
re. findall ('[ \ \ w + ] ','str0') 
--------- B -----------
{'intent': {'gloss': ['get', 'rid', 'of', 'none', 'values', 'in', 'dictionary', 'var0'], 'words': ['get', 'rid', 'of', 'none', 'values', 'in', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'kwargs'}, 'snippet': 'res = dict((k, v) for k, v in var0.items() if v is not none)'}
Generated  translation
{ key : val for key, val in list ( var0. items ( ) ) if val! = 42 } 
--------- B -----------
{'intent': {'gloss': ['argparse', 'add', 'argument', 'with', 'flag', 'str0', 'and', 'version', 'action', 'of', 'str1', 'to', 'parser', 'var0'], 'words': ['argparse', 'add', 'argument', 'with', 'flag', 'str0', 'and', 'version', 'action', 'of', 'str1', 'to', 'parser', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '--version', 'str1': '%(prog)s 2.0', 'var0': 'parser'}, 'snippet': "var0.add_argument('str0', action='version', version='str1')"}
Generated  translation
var0. update ( {'str0':'str1'} ) 
--------- B -----------
{'intent': {'gloss': ['multiple', 'each', 'value', 'by', 'str0', 'for', 'all', 'keys', 'in', 'a', 'dictionary', 'var0'], 'words': ['multiple', 'each', 'value', 'by', 'str0', 'for', 'all', 'keys', 'in', 'a', 'dictionary', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '2', 'var0': 'my_dict'}, 'snippet': 'var0.update((x, y * 2) for x, y in list(var0.items()))'}
Generated  translation
dict ( ( k, v ) for k, v in var0. items ( ) if v > 1 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'date', '7', 'days', 'before', 'the', 'current', 'date'], 'words': ['get', 'the', 'date', '7', 'days', 'before', 'the', 'current', 'date'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': '(datetime.datetime.now() - datetime.timedelta(days=7)).date()'}
Generated  translation
print ( ( datetime. date. today ( ) + datetime. timedelta ( 6 * 365 / 12 ) ). isoformat ( ) ) 
--------- B -----------
{'intent': {'gloss': ['combine', 'list', 'of', 'dictionaries', 'var0', 'with', 'the', 'same', 'keys', 'in', 'each', 'list', 'to', 'a', 'single', 'dictionary'], 'words': ['combine', 'list', 'of', 'dictionaries', 'var0', 'with', 'the', 'same', 'keys', 'in', 'each', 'list', 'to', 'a', 'single', 'dictionary'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'dicts'}, 'snippet': 'dict((k, [d[k] for d in var0]) for k in var0[0])'}
Generated  translation
dict ( ( k, v ) for k, v in var0. items ( ) if v ) 
--------- B -----------
{'intent': {'gloss': ['find', 'the', 'index', 'of', 'a', 'list', 'with', 'the', 'first', 'element', 'equal', 'to', 'str0', 'within', 'the', 'list', 'of', 'lists', 'var0'], 'words': ['find', 'the', 'index', 'of', 'a', 'list', 'with', 'the', 'first', 'element', 'equal', 'to', 'str0', 'within', 'the', 'list', 'of', 'lists', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '332', 'var0': 'thelist'}, 'snippet': "[index for index, item in enumerate(var0) if item[0] == 'str0']"}
Generated  translation
[ item for item in var0 if item [ 0 ] = ='str0'] 
--------- B -----------
{'intent': {'gloss': ['use', 'str0', 'operator', 'to', 'print', 'variable', 'values', 'var0', 'inside', 'a', 'string'], 'words': ['use', 'str0', 'operator', 'to', 'print', 'variable', 'values', 'var0', 'inside', 'a', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '%s', 'var0': 'str1'}, 'snippet': "'first string is: %s, second one is: %s' % (var0, 'geo.tif')"}
Generated  translation
print ('str0 '. replace ( ', ','' ) ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'pandas', 'series', 'var0', 'into', 'a', 'pandas', 'dataframe', 'var1', 'with', 'columns', 'var2', 'and', 'var3'], 'words': ['convert', 'a', 'pandas', 'series', 'var0', 'into', 'a', 'pandas', 'dataframe', 'var1', 'with', 'columns', 'var2', 'and', 'var3'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'sf', 'var1': 'df', 'var2': 'email', 'var3': 'list'}, 'snippet': "pd.dataframe({'var2': var0.index, 'var3': var0.values})"}
Generated  translation
var1. set _ index ( ['var2 ','var0 ','var3'] ) 
--------- B -----------
{'intent': {'gloss': ['django', 'set', 'default', 'value', 'of', 'field', 'var0', 'equal', 'to', 'str0'], 'words': ['django', 'set', 'default', 'value', 'of', 'field', 'var0', 'equal', 'to', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'b', 'str0': '0000000'}, 'snippet': "var0 = models.charfield(max_length=7, default='str0', editable=false)"}
Generated  translation
user. objects. filter ( userprofile ='str0') 
--------- B -----------
{'intent': {'gloss': ['get', 'whatever', 'is', 'between', 'parentheses', 'as', 'a', 'single', 'match', ',', 'and', 'any', 'char', 'outside', 'as', 'an', 'individual', 'match', 'in', 'string', 'str0'], 'words': ['get', 'whatever', 'is', 'between', 'parentheses', 'as', 'a', 'single', 'match', ',', 'and', 'any', 'char', 'outside', 'as', 'an', 'individual', 'match', 'in', 'string', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '(zyx)bc'}, 'snippet': "re.findall('\\\\(.+?\\\\)|\\\\w', 'str0')"}
Generated  translation
re. findall ('\ \ ( [ ^ $ ] * \ \ ) ','str0') 
--------- B -----------
{'intent': {'gloss': ['match', 'multiple', 'regex', 'patterns', 'with', 'the', 'alternation', 'operator', 'str0', 'in', 'a', 'string', 'str1'], 'words': ['match', 'multiple', 'regex', 'patterns', 'with', 'the', 'alternation', 'operator', 'str0', 'in', 'a', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '|', 'str1': '(zyx)bc'}, 'snippet': "re.findall('\\\\(.*?\\\\)|\\\\w', 'str1')"}
Generated  translation
re. findall ('^ (. *? cat. *? ) ','str1') 
--------- B -----------
{'intent': {'gloss': ['find', 'the', 'index', 'of', 'an', 'element', 'str0', 'in', 'a', 'list', 'var0'], 'words': ['find', 'the', 'index', 'of', 'an', 'element', 'str0', 'in', 'a', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'msft', 'var0': 'stocks_list'}, 'snippet': "[x for x in range(len(var0)) if var0[x] == 'str0']"}
Generated  translation
input ('str0') 
--------- B -----------
{'intent': {'gloss': ['send', 'multipart', 'encoded', 'file', 'var0', 'to', 'url', 'var1', 'with', 'headers', 'var2', 'and', 'metadata', 'var3'], 'words': ['send', 'multipart', 'encoded', 'file', 'var0', 'to', 'url', 'var1', 'with', 'headers', 'var2', 'and', 'metadata', 'var3'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'files', 'var1': 'url', 'var2': 'headers', 'var3': 'data'}, 'snippet': 'r = requests.post(var1, var0=var0, var2=var2, var3=var3)'}
Generated  translation
urllib. parse. unquote ( var1, var2 ='var0') 
--------- B -----------
{'intent': {'gloss': ['numpy', 'concatenate', 'two', 'arrays', 'var0', 'and', 'var1', 'along', 'the', 'first', 'axis'], 'words': ['numpy', 'concatenate', 'two', 'arrays', 'var0', 'and', 'var1', 'along', 'the', 'first', 'axis'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'b'}, 'snippet': 'c = np.r_[var0[(none), :], var1[(none), :]]'}
Generated  translation
numpy. concatenate ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'list', 'of', 'lists', 'var0', 'into', 'a', 'flat', 'list'], 'words': ['convert', 'list', 'of', 'lists', 'var0', 'into', 'a', 'flat', 'list'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'data'}, 'snippet': '[y for x in var0 for y in (x if isinstance(x, list) else [x])]'}
Generated  translation
y = map ( operator. itemgetter ( 0 ), var0 ) 
--------- B -----------
{'intent': {'gloss': ['find', 'all', 'numbers', 'and', 'dots', 'from', 'a', 'string', 'var0', 'using', 'regex'], 'words': ['find', 'all', 'numbers', 'and', 'dots', 'from', 'a', 'string', 'var0', 'using', 'regex'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'text'}, 'snippet': "re.findall('test([0-9.]*[0-9]+)', var0)"}
Generated  translation
re. findall ('(? = ( \ \ w + ) ) ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['run', 'script', 'str0', 'with', 'argument', 'str1', 'on', 'terminal', 'using', 'python', 'executable'], 'words': ['run', 'script', 'str0', 'with', 'argument', 'str1', 'on', 'terminal', 'using', 'python', 'executable'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'hello.py', 'str1': 'htmlfilename.htm'}, 'snippet': "subprocess.call(['python.exe', 'str0', 'str1'])"}
Generated  translation
os. system ('script2. py1') 
--------- B -----------
{'intent': {'gloss': ['sum', 'columns', 'of', 'a', 'list', 'var0'], 'words': ['sum', 'columns', 'of', 'a', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'array'}, 'snippet': '[sum(row[i] for row in var0) for i in range(len(var0[0]))]'}
Generated  translation
sum ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['insert', 'a', 'str0', 'value', 'into', 'a', 'sqlite3', 'table', '.'], 'words': ['insert', 'a', 'str0', 'value', 'into', 'a', 'sqlite3', 'table', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'none'}, 'snippet': 'db.execute("insert into present values(\'test2\', ?, 10)", (str0,))'}
Generated  translation
sqlite3. insert ( 0,'str0') 
--------- B -----------
{'intent': {'gloss': ['using', '%', 'f', 'with', 'strftime', '(', ')', 'in', 'python', 'to', 'get', 'microseconds'], 'words': ['using', '%', 'f', 'with', 'strftime', '(', ')', 'in', 'python', 'to', 'get', 'microseconds'], 'after': [' ', '', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "datetime.datetime.now().strftime('%h:%m:%s.%f')"}
Generated  translation
datetime. datetime. strptime ('str0 ','% a, % d / % b % y'). strftime ('% f') 
--------- B -----------
{'intent': {'gloss': ['get', 'digits', 'only', 'from', 'a', 'string', 'var0', 'using', 'lambda', 'function'], 'words': ['get', 'digits', 'only', 'from', 'a', 'string', 'var0', 'using', 'lambda', 'function'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'aas30dsa20'}, 'snippet': '"""""".join([x for x in \'var0\' if x.isdigit()])'}
Generated  translation
" " " " " ". join ( c for c in var0 if c. isdigit ( ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'filename', 'without', 'the', 'extension', 'from', 'file', 'str0'], 'words': ['get', 'the', 'filename', 'without', 'the', 'extension', 'from', 'file', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'hemanth.txt'}, 'snippet': "print(os.path.splitext(os.path.basename('str0'))[0])"}
Generated  translation
os. path. dirname ( os. path. abspath ( _ _ file _ _ ) ) 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'dictionary', 'by', 'adding', 'each', 'two', 'adjacent', 'elements', 'in', 'tuple', 'var0', 'as', 'key', '/', 'value', 'pair', 'to', 'it'], 'words': ['create', 'a', 'dictionary', 'by', 'adding', 'each', 'two', 'adjacent', 'elements', 'in', 'tuple', 'var0', 'as', 'key', '/', 'value', 'pair', 'to', 'it'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'dict(var0[i:i + 2] for i in range(0, len(var0), 2))'}
Generated  translation
dict ( zip ( var0 [ : : 2 ], var0 [ 1 : : 2 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['extract', 'a', 'url', 'from', 'a', 'string', 'var0'], 'words': ['extract', 'a', 'url', 'from', 'a', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mystring'}, 'snippet': "print(re.findall('(https?://[^\\\\s]+)', var0))"}
Generated  translation
" " " " " ". join ( var0. split ( ) ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'elements', 'of', 'each', 'tuple', 'in', 'list', 'var0', 'into', 'a', 'string', 'separated', 'by', 'character', 'str0'], 'words': ['convert', 'elements', 'of', 'each', 'tuple', 'in', 'list', 'var0', 'into', 'a', 'string', 'separated', 'by', 'character', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l', 'str0': '@'}, 'snippet': '""" """.join([(\'%d@%d\' % t) for t in var0])'}
Generated  translation
" " " str0 " " ". join ( map ( lambda x : x. split ('str0') ) ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'words': ['get', 'the', 'position', 'of', 'item', '1', 'in', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'testlist'}, 'snippet': 'gen = (i for i, x in enumerate(var0) if x == 1)\nfor i in gen:\n    pass'}
Generated  translation
print ( var0. shape [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['double', 'backslash', 'escape', 'all', 'double', 'quotes', 'in', 'string', 'var0'], 'words': ['double', 'backslash', 'escape', 'all', 'double', 'quotes', 'in', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': 'print(var0.encode(\'unicode-escape\').replace(\'"\', \'\\\\"\'))'}
Generated  translation
re. sub ('\ \ b \ \ d + \ \ b ','', var0 ) 
--------- B -----------
{'intent': {'gloss': ['how', 'to', 'delete', 'all', 'instances', 'of', 'a', 'character', 'in', 'a', 'string', 'in', 'python', '?'], 'words': ['how', 'to', 'delete', 'all', 'instances', 'of', 'a', 'character', 'in', 'a', 'string', 'in', 'python', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': '"""""".join([char for char in \'it is icy\' if char != \'i\'])'}
Generated  translation
newstr = oldstr. replace ('m ','' ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'dictionary', 'var0', 'first', 'by', 'key', 'var1', 'and', 'then', 'by', 'var2'], 'words': ['sort', 'a', 'list', 'of', 'dictionary', 'var0', 'first', 'by', 'key', 'var1', 'and', 'then', 'by', 'var2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'list', 'var1': 'points', 'var2': 'time'}, 'snippet': "var0.sort(key=lambda item: (item['var1'], item['var2']))"}
Generated  translation
sorted ( var0, key = lambda x : ( x [ 1 ], x [ 2 ] ), reverse = true ) 
--------- B -----------
{'intent': {'gloss': ['format', 'number', 'of', 'spaces', 'between', 'strings', 'var0', ',', 'str0', 'and', 'str1', 'to', 'be', 'str2'], 'words': ['format', 'number', 'of', 'spaces', 'between', 'strings', 'var0', ',', 'str0', 'and', 'str1', 'to', 'be', 'str2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'python', 'str0': ':', 'str1': 'very good', 'str2': '20'}, 'snippet': "print('%*s : %*s' % (20, 'var0', 20, 'str1'))"}
Generated  translation
" " " str2 " " ". format ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['multiply', 'a', 'matrix', 'var0', 'with', 'a', '3d', 'tensor', 'var1', 'in', 'scipy'], 'words': ['multiply', 'a', 'matrix', 'var0', 'with', 'a', '3d', 'tensor', 'var1', 'in', 'scipy'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'p', 'var1': 't'}, 'snippet': 'scipy.tensordot(var0, var1, axes=[1, 1]).swapaxes(0, 1)'}
Generated  translation
np. einsum ('ji, i - > j ', var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'scalar', 'var0', 'to', 'array'], 'words': ['convert', 'scalar', 'var0', 'to', 'array'], 'after': [' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'x'}, 'snippet': 'var0 = np.asarray(var0).reshape(1, -1)[(0), :]'}
Generated  translation
var0. strip ( ) 
--------- B -----------
{'intent': {'gloss': ['get', 'a', 'list', 'of', 'pairs', 'from', 'a', 'string', 'var0', 'using', 'lambda', 'function'], 'words': ['get', 'a', 'list', 'of', 'pairs', 'from', 'a', 'string', 'var0', 'using', 'lambda', 'function'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'word'}, 'snippet': 'list(map(lambda x, y: x + y, var0[:-1], var0[1:]))'}
Generated  translation
map ( list, set ( var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'datetimeindex', 'containing', '13', 'periods', 'of', 'the', 'second', 'friday', 'of', 'each', 'month', 'starting', 'from', 'date', 'str0'], 'words': ['create', 'a', 'datetimeindex', 'containing', '13', 'periods', 'of', 'the', 'second', 'friday', 'of', 'each', 'month', 'starting', 'from', 'date', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '2016-01-01'}, 'snippet': "pd.date_range('str0', freq='wom-2fri', periods=13)"}
Generated  translation
datetime. datetime. strptime ('str0 ','% b % d, % y'). date ( ) 
--------- B -----------
{'intent': {'gloss': ['create', 'list', 'of', 'values', 'from', 'dictionary', 'var0', 'that', 'have', 'a', 'key', 'that', 'starts', 'with', 'str0'], 'words': ['create', 'list', 'of', 'values', 'from', 'dictionary', 'var0', 'that', 'have', 'a', 'key', 'that', 'starts', 'with', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'dict1', 'str0': 'emp$$'}, 'snippet': "[value for key, value in list(var0.items()) if key.startswith('str0')]"}
Generated  translation
[ value for key, value in list ( var0. items ( ) ) if'str0'in key. lower ( ) ] 
--------- B -----------
{'intent': {'gloss': ['count', 'most', 'frequent', '100', 'words', 'in', 'column', 'str0', 'of', 'dataframe', 'var0'], 'words': ['count', 'most', 'frequent', '100', 'words', 'in', 'column', 'str0', 'of', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'text', 'var0': 'df'}, 'snippet': "counter(' '.join(var0['str0']).split()).most_common(100)"}
Generated  translation
var0. groupby ('str0'). size ( ). reset _ index ( 100 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'current', 'directory', 'of', 'a', 'script'], 'words': ['get', 'the', 'current', 'directory', 'of', 'a', 'script'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'os.path.basename(os.path.dirname(os.path.realpath(__file__)))'}
Generated  translation
os. path. dirname ( os. path. abspath ( _ _ file _ _ ) ) 
--------- B -----------
{'intent': {'gloss': ['sum', 'integers', 'contained', 'in', 'strings', 'in', 'list', 'str0'], 'words': ['sum', 'integers', 'contained', 'in', 'strings', 'in', 'list', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "['', '3.4', '', '', '1.0']", '[ str0 ]': "['', '3.4', '', '', '1.0']"}, 'snippet': 'sum(int(float(item)) for item in [_f for _f in [ str0 ] if\n    _f])'}
Generated  translation
sum ( map ( int, [ str0 ] ) ) 
--------- B -----------
{'intent': {'gloss': ['write', 'line', 'str0', 'to', 'file', 'var0'], 'words': ['write', 'line', 'str0', 'to', 'file', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'hi there', 'var0': 'myfile'}, 'snippet': "f = open('var0', 'w')\nf.write('hi there\\n')\nf.close()"}
Generated  translation
var0. write ('str0') 
--------- B -----------
{'intent': {'gloss': ['get', 'all', 'urls', 'within', 'text', 'var0'], 'words': ['get', 'all', 'urls', 'within', 'text', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': 're.findall(\'"(http.*?)"\', var0, re.multiline | re.dotall)'}
Generated  translation
urllib. parse. quote _ plus ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['match', 'urls', 'whose', 'domain', 'doesn', "'", 't', 'start', 'with', 'var0', 'from', 'string', 'var1', 'using', 'regex'], 'words': ['match', 'urls', 'whose', 'domain', 'doesn', "'", 't', 'start', 'with', 'var0', 'from', 'string', 'var1', 'using', 'regex'], 'after': [' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 't', 'var1': 'document'}, 'snippet': 're.findall(\'http://[^t][^s"]+\\\\.html\', var1)'}
Generated  translation
urllib. request. urlretrieve ('var1 ','var0') 
--------- B -----------
{'intent': {'gloss': ['format', 'a', 'datetime', 'string', 'var0', 'to', 'extract', 'date', 'only'], 'words': ['format', 'a', 'datetime', 'string', 'var0', 'to', 'extract', 'date', 'only'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'when'}, 'snippet': "then = datetime.datetime.strptime(var0, '%y-%m-%d').date()"}
Generated  translation
datetime. datetime. combine ( var0, datetime. time. min ) 
--------- B -----------
{'intent': {'gloss': ['convert', 'hex', 'string', 'str0', 'to', 'a', 'float', 'number'], 'words': ['convert', 'hex', 'string', 'str0', 'to', 'a', 'float', 'number'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '470fc614'}, 'snippet': "struct.unpack('!f', 'str0'.decode('hex'))[0]"}
Generated  translation
float ( int ('str0 ', 0 ) ) 
--------- B -----------
{'intent': {'gloss': ['reverse', 'the', 'order', 'of', 'words', ',', 'delimited', 'by', 'str0', ',', 'in', 'string', 'var0'], 'words': ['reverse', 'the', 'order', 'of', 'words', ',', 'delimited', 'by', 'str0', ',', 'in', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', '', ' ', ' ', ' ', '', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '.', 'var0': 's'}, 'snippet': '"""str0""".join(var0.split(\'str0\')[::-1])'}
Generated  translation
re. findall ('\ \ d + ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['parse', 'milliseconds', 'epoch', 'time', 'str0', 'to', 'format', 'str1'], 'words': ['parse', 'milliseconds', 'epoch', 'time', 'str0', 'to', 'format', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '1236472051807', 'str1': '%y-%m-%d %h:%m:%s'}, 'snippet': "time.strftime('str1', time.gmtime(1236472051807 / 1000.0))"}
Generated  translation
datetime. datetime. strptime ('str0 ','str1'). time ( ) 
--------- B -----------
{'intent': {'gloss': ['add', 'one', 'to', 'the', 'hidden', 'web', 'element', 'with', 'id', 'str0', 'with', 'selenium', 'python', 'script'], 'words': ['add', 'one', 'to', 'the', 'hidden', 'web', 'element', 'with', 'id', 'str0', 'with', 'selenium', 'python', 'script'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'xyz'}, 'snippet': 'browser.execute_script("document.getelementbyid(\'xyz\').value+=\'1\'")'}
Generated  translation
driver. execute _ script ('str0') 
--------- B -----------
{'intent': {'gloss': ['format', 'the', 'variables', 'str0', 'and', 'str1', 'using', 'string', 'formatting'], 'words': ['format', 'the', 'variables', 'str0', 'and', 'str1', 'using', 'string', 'formatting'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'self.goals', 'str1': 'self.penalties'}, 'snippet': '"""({:d} goals, ${:d})""".format(self.goals, self.penalties)'}
Generated  translation
" " " str0 " " ". format ('str1 ','str0') 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'list', 'of', 'lists', 'var0', 'to', 'list', 'of', 'integers'], 'words': ['convert', 'a', 'list', 'of', 'lists', 'var0', 'to', 'list', 'of', 'integers'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': "var0 = [int(''.join([str(y) for y in x])) for x in var0]"}
Generated  translation
[ map ( int, sublist ) for sublist in var0 ] 
--------- B -----------
{'intent': {'gloss': ['update', 'datetime', 'field', 'in', 'var0', 'to', 'be', 'the', 'existing', 'var1', 'plus', '100', 'years'], 'words': ['update', 'datetime', 'field', 'in', 'var0', 'to', 'be', 'the', 'existing', 'var1', 'plus', '100', 'years'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mymodel', 'var1': 'timestamp'}, 'snippet': "var0.objects.update(var1=f('var1') + timedelta(days=36524.25))"}
Generated  translation
print ( var0. cert _ datetime ( var1, datetime. timedelta ( hours = 100 ) ). isoformat ( ) ) 
--------- B -----------
{'intent': {'gloss': ['determine', 'number', 'of', 'files', 'on', 'a', 'drive', 'with', 'python'], 'words': ['determine', 'number', 'of', 'files', 'on', 'a', 'drive', 'with', 'python'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "os.statvfs('/').f_files - os.statvfs('/').f_ffree"}
Generated  translation
os. path. dirname ( os. path. abspath ( _ _ file _ _ ) ) 
--------- B -----------
{'intent': {'gloss': ['encode', 'a', 'latin', 'character', 'in', 'string', 'str0', 'properly'], 'words': ['encode', 'a', 'latin', 'character', 'in', 'string', 'str0', 'properly'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'sopetÃ³n'}, 'snippet': '"""str0""".encode(\'latin-1\').decode(\'utf-8\')'}
Generated  translation
" " " str0 " " ". encode ('latin - 1') 
--------- B -----------
{'intent': {'gloss': ['find', 'octal', 'characters', 'matches', 'from', 'a', 'string', 'var0', 'using', 'regex'], 'words': ['find', 'octal', 'characters', 'matches', 'from', 'a', 'string', 'var0', 'using', 'regex'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'str'}, 'snippet': 'print(re.findall("\'\\\\\\\\[0-7]{1,3}\'", var0))'}
Generated  translation
re. findall ('(? = ( \ \ w \ \ w ) ) ','var0') 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'list', 'in', 'first', 'column', 'into', 'multiple', 'columns', 'keeping', 'other', 'columns', 'as', 'well', 'in', 'pandas', 'data', 'frame'], 'words': ['split', 'a', 'list', 'in', 'first', 'column', 'into', 'multiple', 'columns', 'keeping', 'other', 'columns', 'as', 'well', 'in', 'pandas', 'data', 'frame'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': 'pd.concat([df[0].apply(pd.series), df[1]], axis=1)'}
Generated  translation
pd. concat ( [ df ['var'], axis = 1 ) ], axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['create', 'a', 'new', 'column', 'var0', 'in', 'pandas', 'data', 'frame', 'var1', 'based', 'on', 'the', 'values', 'in', 'column', 'var2'], 'words': ['create', 'a', 'new', 'column', 'var0', 'in', 'pandas', 'data', 'frame', 'var1', 'based', 'on', 'the', 'values', 'in', 'column', 'var2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'weekday', 'var1': 'data', 'var2': 'my_dt'}, 'snippet': "var1['var0'] = var1['var2'].apply(lambda x: x.var0())"}
Generated  translation
var1 ['var0'] = var1 ['var2'] 
--------- B -----------
{'intent': {'gloss': ['delete', 'all', 'occurrences', 'of', 'character', 'str0', 'in', 'string', 'str1'], 'words': ['delete', 'all', 'occurrences', 'of', 'character', 'str0', 'in', 'string', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'i', 'str1': 'it is icy'}, 'snippet': '"""""".join([char for char in \'str1\' if char != \'str0\'])'}
Generated  translation
re. sub ('(? < =. ) ','str1 ','str0') 
--------- B -----------
{'intent': {'gloss': ['find', 'all', 'files', 'in', 'directory', 'str0', 'with', 'extension', 'str1'], 'words': ['find', 'all', 'files', 'in', 'directory', 'str0', 'with', 'extension', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '/mydir', 'str1': '.txt'}, 'snippet': "for file in os.listdir('str0'):\n    if file.endswith('str1'):\n        pass"}
Generated  translation
results + = [ each for each in os. listdir ('str0') if each. endswith ('str1') ] 
--------- B -----------
{'intent': {'gloss': ['write', 'line', 'str0', 'to', 'file', 'str1'], 'words': ['write', 'line', 'str0', 'to', 'file', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'hello', 'str1': 'somefile.txt'}, 'snippet': "with open('str1', 'a') as the_file:\n    the_file.write('hello\\n')"}
Generated  translation
with open ('str1 ','r') as myfile : myfile. write ('str0') 
--------- B -----------
{'intent': {'gloss': ['loop', 'over', 'files', 'in', 'directory', 'str0'], 'words': ['loop', 'over', 'files', 'in', 'directory', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '.'}, 'snippet': "for fn in os.listdir('str0'):\n    if os.path.isfile(fn):\n        pass"}
Generated  translation
for dirname, dirnames, filenames in os. walk ('str0') : pass 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'string', 'var0', 'with', 'into', 'all', 'strings', 'of', 'repeated', 'characters'], 'words': ['split', 'a', 'string', 'var0', 'with', 'into', 'all', 'strings', 'of', 'repeated', 'characters'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 's'}, 'snippet': "[m.group(0) for m in re.finditer('(\\\\d)\\\\1*', var0)]"}
Generated  translation
re. findall ('\ \ [ ( [ ^ \ \ ] ) \ \ ] ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['in', 'var0', ',', 'get', 'the', 'content', 'of', 'the', 'sibling', 'of', 'the', 'var1', 'tag', 'with', 'text', 'content', 'str0'], 'words': ['in', 'var0', ',', 'get', 'the', 'content', 'of', 'the', 'sibling', 'of', 'the', 'var1', 'tag', 'with', 'text', 'content', 'str0'], 'after': [' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'soup', 'var1': 'td', 'str0': 'address:'}, 'snippet': "print(var0.find(text='str0').findnext('var1').contents[0])"}
Generated  translation
print ( var0. xpath ( '. / / a [ contains ( text ( ), " text a " ) ]') ) 
--------- B -----------
{'intent': {'gloss': ['use', 'a', 'regex', 'to', 'get', 'all', 'text', 'in', 'a', 'string', 'var0', 'that', 'is', 'not', 'surrounded', 'by', 'square', 'brackets'], 'words': ['use', 'a', 'regex', 'to', 'get', 'all', 'text', 'in', 'a', 'string', 'var0', 'that', 'is', 'not', 'surrounded', 'by', 'square', 'brackets'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'example_str'}, 'snippet': "re.findall('(.*?)(?:\\\\[.*?\\\\]|$)', var0)"}
Generated  translation
re. sub ('\ \ [ (. *? ) \ \ ] ','', var0 ) 
--------- B -----------
{'intent': {'gloss': ['open', 'a', 'str0', 'terminal', 'from', 'python', 'script', 'and', 'run', 'str1', 'command', '.'], 'words': ['open', 'a', 'str0', 'terminal', 'from', 'python', 'script', 'and', 'run', 'str1', 'command', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'gnome', 'str1': 'sudo apt-get update'}, 'snippet': 'os.system(\'gnome-terminal -e \\\'bash -c "sudo apt-get update; exec bash"\\\'\')'}
Generated  translation
os. system ('str0') 
--------- B -----------
{'intent': {'gloss': ['write', 'multiple', 'strings', 'var0', ',', 'var1', 'and', 'var2', 'in', 'one', 'line', 'in', 'a', 'file', 'var3'], 'words': ['write', 'multiple', 'strings', 'var0', ',', 'var1', 'and', 'var2', 'in', 'one', 'line', 'in', 'a', 'file', 'var3'], 'after': [' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'line1', 'var1': 'line2', 'var2': 'line3', 'var3': 'target'}, 'snippet': "var3.write('%r\\n%r\\n%r\\n' % (var0, var1, var2))"}
Generated  translation
with open ('var0 ','var1 ','var2') as f : var3. write ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['pandas', ':', 'delete', 'rows', 'in', 'dataframe', 'var0', 'based', 'on', 'multiple', 'columns', 'values'], 'words': ['pandas', ':', 'delete', 'rows', 'in', 'dataframe', 'var0', 'based', 'on', 'multiple', 'columns', 'values'], 'after': ['', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df'}, 'snippet': "var0.set_index(list('bc')).drop(tuples, errors='ignore').reset_index()"}
Generated  translation
var0. apply ( lambda x : x. fillna ( x. columns ), axis = 0 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'content', 'of', 'child', 'tag', 'withvar0', 'attribute', 'whose', 'parent', 'has', 'css', 'var1'], 'words': ['get', 'the', 'content', 'of', 'child', 'tag', 'withvar0', 'attribute', 'whose', 'parent', 'has', 'css', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'href', 'var1': 'someclass'}, 'snippet': "self.driver.find_element_by_css_selector('.someclass a').get_attribute('var0')"}
Generated  translation
print ( driver. find _ element _ by _ css _ selector ('var1') ) 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'string', 'by', 'a', 'delimiter', 'in', 'python'], 'words': ['split', 'a', 'string', 'by', 'a', 'delimiter', 'in', 'python'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "[x.strip() for x in '2.matches $$text$$ string'.split('$$text$$')]"}
Generated  translation
s. rstrip ( ). split ('\ t') 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'a', 'directory', 'var0', 'exists', 'and', 'create', 'it', 'if', 'necessary'], 'words': ['check', 'if', 'a', 'directory', 'var0', 'exists', 'and', 'create', 'it', 'if', 'necessary'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'path'}, 'snippet': 'try:\n    os.makedirs(var0)\nexcept oserror:\n    if not os.var0.isdir(var0):\n        raise'}
Generated  translation
os. path. commonprefix ( ['var0 ', os. path. realpath ( var0 ) ] ) 
--------- B -----------
{'intent': {'gloss': ['extract', 'all', 'the', 'values', 'with', 'keys', 'str0', 'and', 'str1', 'from', 'a', 'list', 'of', 'dictionaries', 'var0', 'to', 'list', 'of', 'tuples'], 'words': ['extract', 'all', 'the', 'values', 'with', 'keys', 'str0', 'and', 'str1', 'from', 'a', 'list', 'of', 'dictionaries', 'var0', 'to', 'list', 'of', 'tuples'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'x', 'str1': 'y', 'var0': 'd'}, 'snippet': "[(str0['str0'], str0['str1']) for str0 in var0]"}
Generated  translation
[ key for item in var0 if item ['str0'] = ='str1'] 
--------- B -----------
{'intent': {'gloss': ['running', 'r', 'script', 'str0', 'from', 'python'], 'words': ['running', 'r', 'script', 'str0', 'from', 'python'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '/pathto/myrscript.r'}, 'snippet': "subprocess.call(['/usr/bin/rscript', '--vanilla', 'str0'])"}
Generated  translation
os. system ('str0') 
--------- B -----------
{'intent': {'gloss': ['convert', 'list', 'of', 'tuples', 'var0', 'to', 'a', 'string'], 'words': ['convert', 'list', 'of', 'tuples', 'var0', 'to', 'a', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l'}, 'snippet': '""", """.join(\'(\' + \', \'.join(i) + \')\' for i in var0)'}
Generated  translation
emaillist ='\ n '. join ( [ str ( i ) for i in var0 ] ) 
--------- B -----------
{'intent': {'gloss': ['find', 'all', 'files', 'in', 'directory', 'str0', 'with', 'extension', 'str1'], 'words': ['find', 'all', 'files', 'in', 'directory', 'str0', 'with', 'extension', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '/mydir', 'str1': '.txt'}, 'snippet': "os.chdir('str0')\nfor file in glob.glob('*.txt'):\n    pass"}
Generated  translation
results + = [ each for each in os. listdir ('str0') if each. endswith ('str1') ] 
--------- B -----------
{'intent': {'gloss': ['python', 'regex', '-', 'check', 'for', 'a', 'capital', 'letter', 'with', 'a', 'following', 'lowercase', 'in', 'string', 'var0'], 'words': ['python', 'regex', '-', 'check', 'for', 'a', 'capital', 'letter', 'with', 'a', 'following', 'lowercase', 'in', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'string'}, 'snippet': "re.sub('^[a-z0-9]*(?![a-z])', '', var0)"}
Generated  translation
re. search ('[ ^ a - z ] ', var0 ). group ( 1 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'index', 'of', 'an', 'integer', 'str0', 'from', 'a', 'list', 'var0', 'if', 'the', 'list', 'also', 'contains', 'boolean', 'items'], 'words': ['get', 'the', 'index', 'of', 'an', 'integer', 'str0', 'from', 'a', 'list', 'var0', 'if', 'the', 'list', 'also', 'contains', 'boolean', 'items'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '1', 'var0': 'lst'}, 'snippet': 'next(i for i, x in enumerate(var0) if not isinstance(x, bool) and x == 1)'}
Generated  translation
map ( int, [ str0 ] ) 
--------- B -----------
{'intent': {'gloss': ['insert', 'directory', 'str0', 'into', 'directory', 'var0'], 'words': ['insert', 'directory', 'str0', 'into', 'directory', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'apps', 'var0': '__file__'}, 'snippet': "sys.path.insert(1, os.path.join(os.path.dirname(var0), 'str0'))"}
Generated  translation
sys. path. insert ( 0,'str0') 
--------- B -----------
{'intent': {'gloss': ['write', 'the', 'data', 'of', 'dataframe', 'var0', 'into', 'text', 'file', 'str0'], 'words': ['write', 'the', 'data', 'of', 'dataframe', 'var0', 'into', 'text', 'file', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'np.txt'}, 'snippet': "np.savetxt('c:\\\\data\\\\np.txt', var0.values, fmt='%d')"}
Generated  translation
var0. write ('str0') 
--------- B -----------
{'intent': {'gloss': ['write', 'content', 'of', 'dataframe', 'var0', 'into', 'text', 'file', 'str0'], 'words': ['write', 'content', 'of', 'dataframe', 'var0', 'into', 'text', 'file', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'c:\\data\\pandas.txt'}, 'snippet': "var0.to_csv('str0', header=none, index=none, sep=' ', mode='a')"}
Generated  translation
var0. write. texttype ('str0') 
--------- B -----------
{'intent': {'gloss': ['print', 'a', '2', 'dimensional', 'list', 'var0', 'as', 'a', 'table', 'with', 'delimiters'], 'words': ['print', 'a', '2', 'dimensional', 'list', 'var0', 'as', 'a', 'table', 'with', 'delimiters'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'tab'}, 'snippet': "print('\\n'.join('\\t'.join(str(col) for col in row) for row in var0))"}
Generated  translation
print ('total cost is : $ { :,. 2f } '. format ( var0 ) ) 
--------- B -----------
{'intent': {'gloss': ['check', 'if', 'a', 'directory', 'var0', 'exists', 'and', 'create', 'it', 'if', 'necessary'], 'words': ['check', 'if', 'a', 'directory', 'var0', 'exists', 'and', 'create', 'it', 'if', 'necessary'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'path'}, 'snippet': 'try:\n    os.makedirs(var0)\nexcept oserror as exception:\n    if exception.errno != errno.eexist:\n        raise'}
Generated  translation
os. path. commonprefix ( ['var0 ', os. path. realpath ( var0 ) ] ) 
--------- B -----------
{'intent': {'gloss': ['send', 'a', 'post', 'request', 'with', 'raw', 'data', 'var0', 'and', 'basic', 'authentication', 'with', 'var1', 'and', 'var2'], 'words': ['send', 'a', 'post', 'request', 'with', 'raw', 'data', 'var0', 'and', 'basic', 'authentication', 'with', 'var1', 'and', 'var2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'data', 'var1': 'username', 'var2': 'password'}, 'snippet': 'requests.post(url, var0=var0, headers=headers_dict, auth=(var1, var2))'}
Generated  translation
post _ response = requests. post ( url ='var0 ', params = ['var1 ','var2'] ) 
--------- B -----------
{'intent': {'gloss': ['parse', 'tab', '-', 'delimited', 'csv', 'file', 'str0', 'into', 'a', 'list'], 'words': ['parse', 'tab', '-', 'delimited', 'csv', 'file', 'str0', 'into', 'a', 'list'], 'after': [' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'text.txt'}, 'snippet': "lol = list(csv.reader(open('str0', 'rb'), delimiter='\\t'))"}
Generated  translation
pd. read _ csv ('str0 ', sep ='\ t') 
--------- B -----------
{'intent': {'gloss': ['loop', 'through', 'the', 'ip', 'address', 'range', 'str0'], 'words': ['loop', 'through', 'the', 'ip', 'address', 'range', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '192.168.x.x'}, 'snippet': "generator = iter_iprange('192.168.1.1', '192.168.255.255', step=1)"}
Generated  translation
globals ( ) ['str0']. apply ( lambda x : x. split ('str0') ) 
--------- B -----------
{'intent': {'gloss': ['modify', 'sys', '.', 'path', 'for', 'python', 'module', 'var0'], 'words': ['modify', 'sys', '.', 'path', 'for', 'python', 'module', 'var0'], 'after': [' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'subdir'}, 'snippet': "sys.path.append(os.path.join(os.path.dirname(__file__), 'var0'))"}
Generated  translation
var0. write ('\ n '. join ( var0. path ) ) 
--------- B -----------
{'intent': {'gloss': ['lower', 'a', 'string', 'var0', 'and', 'remove', 'non', '-', 'alphanumeric', 'characters', 'aside', 'from', 'space'], 'words': ['lower', 'a', 'string', 'var0', 'and', 'remove', 'non', '-', 'alphanumeric', 'characters', 'aside', 'from', 'space'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'text'}, 'snippet': "re.sub('[^\\\\sa-za-z0-9]', '', var0).lower().strip()"}
Generated  translation
re. sub ('[ ^ 0 - 9 ] + ','', var0 ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'all', 'non', '-', 'alphanumeric', 'characters', 'except', 'space', 'from', 'a', 'string', 'var0', 'and', 'lower', 'it'], 'words': ['remove', 'all', 'non', '-', 'alphanumeric', 'characters', 'except', 'space', 'from', 'a', 'string', 'var0', 'and', 'lower', 'it'], 'after': [' ', ' ', '', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'text'}, 'snippet': "re.sub('(?!\\\\s)[\\\\w_]', '', var0).lower().strip()"}
Generated  translation
re. sub ('[ ^ 0 - 9 ] + ','', var0 ) 
--------- B -----------
{'intent': {'gloss': ['scatter', 'a', 'plot', 'with', 'x', ',', 'y', 'position', 'of', 'str0', 'and', 'face', 'color', 'equal', 'to', 'none'], 'words': ['scatter', 'a', 'plot', 'with', 'x', ',', 'y', 'position', 'of', 'str0', 'and', 'face', 'color', 'equal', 'to', 'none'], 'after': [' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'np.random.randn(100)'}, 'snippet': "plt.scatter(np.random.randn(100), np.random.randn(100), facecolors='none')"}
Generated  translation
plt. scatter ( x, y, color ='str0 ', color ='none ) 
--------- B -----------
{'intent': {'gloss': ['prepend', 'the', 'line', 'str0', 'to', 'the', 'contents', 'of', 'file', 'str1', 'and', 'save', 'as', 'the', 'file', 'str2'], 'words': ['prepend', 'the', 'line', 'str0', 'to', 'the', 'contents', 'of', 'file', 'str1', 'and', 'save', 'as', 'the', 'file', 'str2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '#test firstline\n', 'str1': 'infile', 'str2': 'outfile'}, 'snippet': "open('str2', 'w').write('str0' + open('str1').read())"}
Generated  translation
with open ('str1 ','str0') as f : f. write ('str2') 
--------- B -----------
{'intent': {'gloss': ['extract', 'ip', 'address', 'from', 'an', 'html', 'string'], 'words': ['extract', 'ip', 'address', 'from', 'an', 'html', 'string'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "ip = re.findall('[0-9]+(?:\\\\.[0-9]+){3}', s)"}
Generated  translation
" " " \ \ u003cp \ \ u003e " " ". encode ('unicode _ escape') 
--------- B -----------
{'intent': {'gloss': ['unpack', 'a', 'series', 'of', 'tuples', 'in', 'pandas', 'into', 'a', 'dataframe', 'with', 'column', 'names', 'str0', 'and', 'str1'], 'words': ['unpack', 'a', 'series', 'of', 'tuples', 'in', 'pandas', 'into', 'a', 'dataframe', 'with', 'column', 'names', 'str0', 'and', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'out-1', 'str1': 'out-2'}, 'snippet': "pd.dataframe(out.tolist(), columns=['str0', 'str1'], index=out.index)"}
Generated  translation
pd. concat ( [ df, pd. dataframe ( ['str0 ','str1'] ], axis = 1 ) 
--------- B -----------
{'intent': {'gloss': ['get', 'the', 'first', 'value', 'from', 'dataframe', 'var0', 'where', 'column', 'str0', 'is', 'equal', 'to', 'str1'], 'words': ['get', 'the', 'first', 'value', 'from', 'dataframe', 'var0', 'where', 'column', 'str0', 'is', 'equal', 'to', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'letters', 'str1': 'c'}, 'snippet': "var0.loc[var0['str0'] == 'str1', 'str0'].values[0]"}
Generated  translation
var0. loc [ var0 ['str0'] = ='str1'] 
--------- B -----------
{'intent': {'gloss': ['remove', 'all', 'strings', 'from', 'a', 'list', 'a', 'strings', 'var0', 'where', 'the', 'values', 'starts', 'with', 'str0', 'or', 'str1'], 'words': ['remove', 'all', 'strings', 'from', 'a', 'list', 'a', 'strings', 'var0', 'where', 'the', 'values', 'starts', 'with', 'str0', 'or', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'sents', 'str0': '@$\t', 'str1': '#'}, 'snippet': "[x for x in var0 if not x.startswith('str0') and not x.startswith('str1')]"}
Generated  translation
[ x for x in var0 if x! ='str0'] 
--------- B -----------
{'intent': {'gloss': ['create', 'new', 'dataframe', 'object', 'by', 'merging', 'columns', 'str0', 'of', 'dataframes', 'var0', 'and', 'var1', 'and', 'rename', 'the', 'columns', 'from', 'dataframes', 'var0', 'and', 'var1', 'with', 'suffix', 'var4', 'and', 'var5', 'respectively'], 'words': ['create', 'new', 'dataframe', 'object', 'by', 'merging', 'columns', 'str0', 'of', 'dataframes', 'var0', 'and', 'var1', 'and', 'rename', 'the', 'columns', 'from', 'dataframes', 'var0', 'and', 'var1', 'with', 'suffix', 'var4', 'and', 'var5', 'respectively'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'key', 'var0': 'split_df', 'var1': 'csv_df', 'var2': 'split_df', 'var3': 'csv_df', 'var4': '_left', 'var5': '_right'}, 'snippet': "pd.merge(var2, var3, on=['str0'], suffixes=('var4', 'var5'))"}
Generated  translation
pd. merge ( var2, var0, var1, left _ index = true, how ='outer') 
--------- B -----------
{'intent': {'gloss': ['split', 'a', 'string', 'str0', 'by', 'str1', 'keeping', 'str1', 'in', 'the', 'result'], 'words': ['split', 'a', 'string', 'str0', 'by', 'str1', 'keeping', 'str1', 'in', 'the', 'result'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'docs/src/scripts/temp', 'str1': '/', 'str2': '/'}, 'snippet': '"""str0""".replace(\'str2\', \'/\\x00/\').split(\'\\x00\')'}
Generated  translation
re. split ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['group', 'a', 'list', 'of', 'dicts', 'var0', 'into', 'one', 'dict', 'by', 'key'], 'words': ['group', 'a', 'list', 'of', 'dicts', 'var0', 'into', 'one', 'dict', 'by', 'key'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'ld'}, 'snippet': 'print(dict(zip(var0[0], zip(*[list(d.values()) for d in var0]))))'}
Generated  translation
new _ list = { k : v for d in var0 } 
--------- B -----------
{'intent': {'gloss': ['replace', 'all', 'elements', 'in', 'array', 'var0', 'that', 'are', 'not', 'present', 'in', 'array', 'str0', 'with', 'zeros'], 'words': ['replace', 'all', 'elements', 'in', 'array', 'var0', 'that', 'are', 'not', 'present', 'in', 'array', 'str0', 'with', 'zeros'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'str0': '[1, 3, 4]', '[ str0 ]': '[1, 3, 4]'}, 'snippet': 'np.where(np.in1d(var0, [ str0 ]).reshape(var0.shape), var0, 0)'}
Generated  translation
np. any ( np. in1d ( var0, 0, 1 ) ) 
--------- B -----------
{'intent': {'gloss': ['how', 'to', 'count', 'distinct', 'values', 'in', 'a', 'column', 'of', 'a', 'pandas', 'group', 'by', 'object', '?'], 'words': ['how', 'to', 'count', 'distinct', 'values', 'in', 'a', 'column', 'of', 'a', 'pandas', 'group', 'by', 'object', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "df.groupby(['col1', 'col2'])['col3'].nunique().reset_index()"}
Generated  translation
sorted ( list ( range ( len ( var0 ) ) ), key = lambda x : x [ 1 ] ) 
--------- B -----------
{'intent': {'gloss': ['average', 'each', 'two', 'columns', 'of', 'array', 'var0'], 'words': ['average', 'each', 'two', 'columns', 'of', 'array', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'data'}, 'snippet': 'var0.reshape(-1, j).mean(axis=1).reshape(var0.shape[0], -1)'}
Generated  translation
var0. groupby ( np. arange ( len ( var0. shape [ 0 ] ), 2 ) ) 
--------- B -----------
{'intent': {'gloss': ['do', 'a', 'scatter', 'plot', 'with', 'empty', 'circles'], 'words': ['do', 'a', 'scatter', 'plot', 'with', 'empty', 'circles'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': "plt.plot(np.random.randn(100), np.random.randn(100), 'o', mfc='none')"}
Generated  translation
plt. scatter ( ) 
--------- B -----------
{'intent': {'gloss': ['select', 'rows', 'in', 'a', 'dataframe', 'var0', 'column', 'str0', 'between', 'two', 'values', '99', 'and', '101'], 'words': ['select', 'rows', 'in', 'a', 'dataframe', 'var0', 'column', 'str0', 'between', 'two', 'values', '99', 'and', '101'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'df', 'str0': 'closing_price'}, 'snippet': "var0 = var0[(var0['str0'] >= 99) & (var0['str0'] <= 101)]"}
Generated  translation
var0 ['str0']. apply ( lambda x : x [ len ( x ) / 101 ] ) 
--------- B -----------
{'intent': {'gloss': ['regex', ',', 'find', 'str0s', 'only', 'in', 'the', 'middle', 'of', 'string', 'var0'], 'words': ['regex', ',', 'find', 'str0s', 'only', 'in', 'the', 'middle', 'of', 'string', 'var0'], 'after': ['', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'n', 'var0': 's'}, 'snippet': "re.findall('n(?<=[^n]n)n+(?=[^n])(?i)', var0)"}
Generated  translation
" " " str0 " " ". replace ('str0 ','' ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'duplicate', 'words', 'from', 'a', 'string', 'var0', 'using', 'regex'], 'words': ['remove', 'duplicate', 'words', 'from', 'a', 'string', 'var0', 'using', 'regex'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'text'}, 'snippet': "var0 = re.sub('\\\\b(\\\\w+)( \\\\1\\\\b)+', '\\\\1', var0)"}
Generated  translation
re. sub ('(? < = [ a - z ] ) \ \ ) ','\ \ 1 ', var0 ) 
--------- B -----------
{'intent': {'gloss': ['replace', 'dot', 'characters', 'str0', 'associated', 'with', 'ascii', 'letters', 'in', 'list', 'var0', 'with', 'space', 'str1'], 'words': ['replace', 'dot', 'characters', 'str0', 'associated', 'with', 'ascii', 'letters', 'in', 'list', 'var0', 'with', 'space', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '.', 'var0': 's', 'str1': ''}, 'snippet': "[re.sub('(?<!\\\\d)\\\\.(?!\\\\d)', ' ', i) for i in var0]"}
Generated  translation
[ m. replace ('[ \ x00 - \ x7f ] ','str0') for x in var0 ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'each', 'tuple', 'in', 'list', 'var0', 'to', 'a', 'string', 'with', 'str0', 'separating', 'the', 'tuples', "'", 'elements'], 'words': ['convert', 'each', 'tuple', 'in', 'list', 'var0', 'to', 'a', 'string', 'with', 'str0', 'separating', 'the', 'tuples', "'", 'elements'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '']}, 'slot_map': {'var0': 'l', 'str0': '@'}, 'snippet': '""" """.join([(\'%d@%d\' % (t[0], t[1])) for t in var0])'}
Generated  translation
" " " " " ". join ( chr ( i ) for i in var0 ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'a', 'list', 'of', 'dictionaries', 'by', 'the', 'value', 'of', 'keys', 'str0', ',', 'str1', ',', 'str2', 'in', 'ascending', 'order', '.'], 'words': ['sort', 'a', 'list', 'of', 'dictionaries', 'by', 'the', 'value', 'of', 'keys', 'str0', ',', 'str1', ',', 'str2', 'in', 'ascending', 'order', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', '', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'title', 'str1': 'title_url', 'str2': 'id'}, 'snippet': "l.sort(key=lambda x: (x['str0'], x['str1'], x['str2']))"}
Generated  translation
sorted ( str0, key = operator. itemgetter ('str1 ','str2') ) 
--------- B -----------
{'intent': {'gloss': ['sort', 'list', 'var0', 'in', 'descending', 'order', 'based', 'on', 'the', 'date', 'value', 'in', 'second', 'element', 'of', 'each', 'list', 'in', 'list', 'var0'], 'words': ['sort', 'list', 'var0', 'in', 'descending', 'order', 'based', 'on', 'the', 'date', 'value', 'in', 'second', 'element', 'of', 'each', 'list', 'in', 'list', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'li', 'var1': 'li'}, 'snippet': "sorted(var1, key=lambda x: datetime.strptime(x[1], '%d/%m/%y'), reverse=true)"}
Generated  translation
var1. sort ( key = lambda x : x [ 2 ], reverse = true ) 
--------- B -----------
{'intent': {'gloss': ['set', 'font', 'var0', 'to', 'display', 'non', '-', 'ascii', 'characters', 'in', 'matplotlib'], 'words': ['set', 'font', 'var0', 'to', 'display', 'non', '-', 'ascii', 'characters', 'in', 'matplotlib'], 'after': [' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'arial'}, 'snippet': "matplotlib.rc('font', **{'sans-serif': 'var0', 'family': 'sans-serif'})"}
Generated  translation
re. sub ('[ ^ \ \ x00 - \ \ x7f ] + ','', var0 ) 
--------- B -----------
{'intent': {'gloss': ['find', 'all', 'files', 'in', 'directory', 'str0', 'with', 'extension', 'str1'], 'words': ['find', 'all', 'files', 'in', 'directory', 'str0', 'with', 'extension', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '/mydir', 'str1': '.txt'}, 'snippet': "for root, dirs, files in os.walk('str0'):\n    for file in files:\n        if file.endswith('str1'):\n            pass"}
Generated  translation
results + = [ each for each in os. listdir ('str0') if each. endswith ('str1') ] 
--------- B -----------
{'intent': {'gloss': ['load', 'data', 'containing', 'str0', 'from', 'file', 'str1', 'into', 'numpy', 'array', 'var0'], 'words': ['load', 'data', 'containing', 'str0', 'from', 'file', 'str1', 'into', 'numpy', 'array', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'utf-8', 'str1': 'new.txt', 'var0': 'arr'}, 'snippet': "var0 = numpy.fromiter(codecs.open('str1', encoding='str0'), dtype='<u2')"}
Generated  translation
var0 = numpy. loadtxt ( open ('str1 ','str0'), delimiter = ',') 
--------- B -----------
{'intent': {'gloss': ['select', 'values', 'from', 'column', 'str0', 'for', 'which', 'corresponding', 'values', 'in', 'column', 'str1', 'will', 'be', 'greater', 'than', '50', ',', 'and', 'in', 'column', 'str2', '-', 'equal', '900', 'in', 'dataframe', 'var0'], 'words': ['select', 'values', 'from', 'column', 'str0', 'for', 'which', 'corresponding', 'values', 'in', 'column', 'str1', 'will', 'be', 'greater', 'than', '50', ',', 'and', 'in', 'column', 'str2', '-', 'equal', '900', 'in', 'dataframe', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'a', 'str1': 'b', 'str2': 'c', 'var0': 'df'}, 'snippet': "var0['str0'][(var0['str1'] > 50) & (var0['str2'] == 900)]"}
Generated  translation
var0 [ ( var0 ['str1'] > 50, axis = 1 ) | ( var0 ['str2'] < 50 ) ] 
--------- B -----------
{'intent': {'gloss': ['find', '10', 'largest', 'differences', 'between', 'each', 'respective', 'elements', 'of', 'list', 'var0', 'and', 'list', 'var1'], 'words': ['find', '10', 'largest', 'differences', 'between', 'each', 'respective', 'elements', 'of', 'list', 'var0', 'and', 'list', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'l1', 'var1': 'l2'}, 'snippet': 'heapq.nlargest(10, range(len(var0)), key=lambda i: abs(var0[i] - var1[i]))'}
Generated  translation
max ( abs ( x - y ) for x, y in zip ( var0, var1 ) ) 
--------- B -----------
{'intent': {'gloss': ['loop', 'through', 'the', 'ip', 'address', 'range', 'str0'], 'words': ['loop', 'through', 'the', 'ip', 'address', 'range', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': '192.168.x.x'}, 'snippet': "for i in range(256):\n    for j in range(256):\n        ip = '192.168.%d.%d' % (i, j)\n        print(ip)"}
Generated  translation
globals ( ) ['str0']. apply ( lambda x : x. split ('str0') ) 
--------- B -----------
{'intent': {'gloss': ['find', 'a', 'value', 'within', 'nested', 'json', 'str0', 'where', 'the', 'key', 'inside', 'another', 'key', 'str1', 'is', 'unknown', '.'], 'words': ['find', 'a', 'value', 'within', 'nested', 'json', 'str0', 'where', 'the', 'key', 'inside', 'another', 'key', 'str1', 'is', 'unknown', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'data', 'str1': 'b'}, 'snippet': "list(str0['a']['str1'].values())[0]['maindata'][0]['info']"}
Generated  translation
max ( enumerate ('str0'), key = lambda x : x ['str1'] ) 
--------- B -----------
{'intent': {'gloss': ['finding', 'the', 'index', 'of', 'elements', 'containing', 'substring', 'str0', 'and', 'str1', 'in', 'a', 'list', 'of', 'strings', 'str2', '.'], 'words': ['finding', 'the', 'index', 'of', 'elements', 'containing', 'substring', 'str0', 'and', 'str1', 'in', 'a', 'list', 'of', 'strings', 'str2', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'how', 'str1': 'what', 'str2': 'mylist'}, 'snippet': "[i for i, j in enumerate(str2) if 'str0' in j.lower() or 'str1' in j.lower()]"}
Generated  translation
[ i for i in ( str2 if'str0 ','str1') ] 
--------- B -----------
{'intent': {'gloss': ['extract', 'a', 'url', 'from', 'a', 'string', 'var0'], 'words': ['extract', 'a', 'url', 'from', 'a', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'mystring'}, 'snippet': "print(re.search('(?p<url>https?://[^\\\\s]+)', var0).group('url'))"}
Generated  translation
" " " " " ". join ( var0. split ( ) ) 
--------- B -----------
{'intent': {'gloss': ['selecting', 'rows', 'in', 'numpy', 'ndarray', 'str0', ',', 'where', 'the', 'value', 'in', 'the', 'first', 'column', 'is', '0', 'and', 'value', 'in', 'the', 'second', 'column', 'is', '1'], 'words': ['selecting', 'rows', 'in', 'numpy', 'ndarray', 'str0', ',', 'where', 'the', 'value', 'in', 'the', 'first', 'column', 'is', '0', 'and', 'value', 'in', 'the', 'second', 'column', 'is', '1'], 'after': [' ', ' ', ' ', ' ', ' ', '', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'a'}, 'snippet': 'str0[np.where((str0[:, (0)] == 0) * (str0[:, (1)] == 1))]'}
Generated  translation
np. where ( ( str0 [ :, ( 1 ) ] > 0 ). all ( axis = 1 ) ) 
--------- B -----------
{'intent': {'gloss': ['how', 'to', 'create', 'a', 'list', 'of', 'date', 'string', 'in', 'str0', 'format', 'with', 'python', 'pandas', '?'], 'words': ['how', 'to', 'create', 'a', 'list', 'of', 'date', 'string', 'in', 'str0', 'format', 'with', 'python', 'pandas', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'yyyymmdd'}, 'snippet': "[d.strftime('%y%m%d') for d in pandas.date_range('20130226', '20130302')]"}
Generated  translation
datetime. datetime. strptime ('str0 ','% b % d, % y'). strftime ('% a') 
--------- B -----------
{'intent': {'gloss': ['how', 'can', 'i', 'parse', 'a', 'time', 'string', 'containing', 'milliseconds', 'in', 'it', 'with', 'python', '?'], 'words': ['how', 'can', 'i', 'parse', 'a', 'time', 'string', 'containing', 'milliseconds', 'in', 'it', 'with', 'python', '?'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {}, 'snippet': "time.strptime('30/03/09 16:31:32.123', '%d/%m/%y %h:%m:%s.%f')"}
Generated  translation
time. mktime ( datetime. datetime. now ( ). timetuple ( ) ) 
--------- B -----------
{'intent': {'gloss': ['insert', 'var0', 'before', 'the', 'file', 'extension', 'in', 'str0', 'or', 'replace', 'var1', 'with', 'var2', 'if', 'it', 'precedes', 'the', 'extension', '.'], 'words': ['insert', 'var0', 'before', 'the', 'file', 'extension', 'in', 'str0', 'or', 'replace', 'var1', 'with', 'var2', 'if', 'it', 'precedes', 'the', 'extension', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'var0': '_suff', 'str0': 'long.file.name.jpg', 'var1': '_a', 'var2': 'suff'}, 'snippet': "re.sub('(\\\\_a)?\\\\.([^\\\\.]*)$', '_suff.\\\\2', 'str0')"}
Generated  translation
os. system ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['zip', 'two', '2', '-', 'd', 'arrays', 'var0', 'and', 'var1'], 'words': ['zip', 'two', '2', '-', 'd', 'arrays', 'var0', 'and', 'var1'], 'after': [' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'a', 'var1': 'b'}, 'snippet': "np.array(zip(var0.ravel(), var1.ravel()), dtype='i4,i4').reshape(var0.shape)"}
Generated  translation
zip ( var0, var1 ) 
--------- B -----------
{'intent': {'gloss': ['remove', 'any', 'url', 'within', 'string', 'var0'], 'words': ['remove', 'any', 'url', 'within', 'string', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'text'}, 'snippet': "var0 = re.sub('^https?:\\\\/\\\\/.*[\\\\r\\\\n]*', '', var0, flags=re.multiline)"}
Generated  translation
var0. replace ('','' ) 
--------- B -----------
{'intent': {'gloss': ['unzip', 'list', 'str0'], 'words': ['unzip', 'list', 'str0'], 'after': [' ', ' ', '']}, 'slot_map': {'str0': "[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]", '[ str0 ]': "[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]"}, 'snippet': "zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e',)])"}
Generated  translation
[ str0 ] 
--------- B -----------
{'intent': {'gloss': ['convert', 'a', 'hex', '-', 'string', 'representation', 'to', 'actual', 'bytes'], 'words': ['convert', 'a', 'hex', '-', 'string', 'representation', 'to', 'actual', 'bytes'], 'after': [' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {}, 'snippet': '"""\\\\xf3\\\\xbe\\\\x80\\\\x80""".replace(\'\\\\x\', \'\').decode(\'hex\')'}
Generated  translation
" " " [UNK] " " ". encode ('hex'). decode ('hex') 
--------- B -----------
{'intent': {'gloss': ['unzip', 'list', 'str0', 'and', 'fill', 'empty', 'results', 'with', 'none'], 'words': ['unzip', 'list', 'str0', 'and', 'fill', 'empty', 'results', 'with', 'none'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': "[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]", '[ str0 ]': "[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]"}, 'snippet': "map(none, *[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e',)])"}
Generated  translation
[ open ('str0 ','ab') for _ in range ( 1, len ( str0 ) ) ] 
--------- B -----------
{'intent': {'gloss': ['combine', 'values', 'from', 'column', 'str0', 'and', 'column', 'str1', 'of', 'dataframe', 'var0', 'into', 'column', 'str2', 'of', 'datafram', 'var0'], 'words': ['combine', 'values', 'from', 'column', 'str0', 'and', 'column', 'str1', 'of', 'dataframe', 'var0', 'into', 'column', 'str2', 'of', 'datafram', 'var0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'b', 'str1': 'a', 'var0': 'df', 'str2': 'c', 'var1': 'df'}, 'snippet': "var1['str2'] = np.where(var1['str1'].isnull, var1['str0'], var1['str1'])"}
Generated  translation
var0 [ ['str0 ','str1'] ]. merge ( var0, on ='str2') 
--------- B -----------
{'intent': {'gloss': ['make', 'a', 'barplot', 'of', 'data', 'in', 'column', 'var0', 'of', 'dataframe', 'var1', 'colour', '-', 'coded', 'according', 'to', 'list', 'var2'], 'words': ['make', 'a', 'barplot', 'of', 'data', 'in', 'column', 'var0', 'of', 'dataframe', 'var1', 'colour', '-', 'coded', 'according', 'to', 'list', 'var2'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'group', 'var1': 'df', 'var2': 'color'}, 'snippet': "var1['var0'].plot(kind='bar', var2=['r', 'g', 'b', 'r', 'g', 'b', 'r'])"}
Generated  translation
var1. set _ index ( ['var0 ','var2'] ). unstack ( level = 0 ) 
--------- B -----------
{'intent': {'gloss': ['download', 'a', 'file', 'var0', 'over', 'http', 'and', 'save', 'to', 'str0'], 'words': ['download', 'a', 'file', 'var0', 'over', 'http', 'and', 'save', 'to', 'str0'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'url', 'str0': '10mb'}, 'snippet': "response = requests.get(var0, stream=true)\nwith open('str0', 'wb') as handle:\n    for data in tqdm(response.iter_content()):\n        handle.write(data)"}
Generated  translation
testfile = urllib. request. urlopener ( var0 ) 
--------- B -----------
{'intent': {'gloss': ['removing', 'an', 'element', 'from', 'a', 'list', 'based', 'on', 'a', 'predicate', 'str0', 'or', 'str1'], 'words': ['removing', 'an', 'element', 'from', 'a', 'list', 'based', 'on', 'a', 'predicate', 'str0', 'or', 'str1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'str0': 'x', 'str1': 'n'}, 'snippet': "[str0 for str0 in ['aat', 'xac', 'ant', 'tta'] if 'str0' not in str0 and \n    'str1' not in str0]"}
Generated  translation
[ x for x in var0 if x! = [ str0 ] ] 
--------- B -----------
{'intent': {'gloss': ['replace', 'each', 'str0', 'with', 'str1', 'and', 'each', 'str1', 'with', 'str0', 'in', 'the', 'string', 'str4', 'in', 'a', 'single', 'pass', '.'], 'words': ['replace', 'each', 'str0', 'with', 'str1', 'and', 'each', 'str1', 'with', 'str0', 'in', 'the', 'string', 'str4', 'in', 'a', 'single', 'pass', '.'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '']}, 'slot_map': {'str0': 'a', 'str1': 'b', 'str2': 'b', 'str3': 'a', 'str4': 'obama'}, 'snippet': '"""str4""".replace(\'str3\', \'%temp%\').replace(\'str2\', \'str3\').replace(\'%temp%\',\n    \'str2\')'}
Generated  translation
" " " str4 " " ". replace ('str0 ','str1') 
--------- B -----------
{'intent': {'gloss': ['download', 'a', 'file', 'var0', 'over', 'http', 'and', 'save', 'to', 'var1'], 'words': ['download', 'a', 'file', 'var0', 'over', 'http', 'and', 'save', 'to', 'var1'], 'after': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '']}, 'slot_map': {'var0': 'url', 'var1': 'file_name'}, 'snippet': "u = urllib.request.urlopen(var0)\nf = open(var1, 'wb')\nmeta = u.info()\nfile_size = int(meta.getheaders('content-length')[0])\nprint('downloading: %s bytes: %s' % (var1, file_size))\nfile_size_dl = 0\nblock_sz = 8192\nwhile true:\n    buffer = u.read(block_sz)\n    if not buffer:\n        break\n    file_size_dl += len(buffer)\n    f.write(buffer)\n    status = '%10d  [%3.2f%%]' % (file_size_dl, file_size_dl * 100.0 /\n        file_size)\n    status = status + chr(8) * (len(status) + 1)\n    print(status, end=' ')\nf.close()"}
Generated  translation
testfile = urllib. request. urlopener ( var0, var1 ) 
test beam accuracy 0.044
test beam oracle accuracy 0.08
test beam bleu score 0.3276523540806059
test beam exececution accuracy 0.0
