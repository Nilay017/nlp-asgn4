{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "time.fold", "intent": "In [0, 1].", "question_id": 2332},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735},
{"snippet": "formatter.pop_style(n=1)", "intent": "Pop the last `n` style specifications passed to push_style ( ) .", "question_id": 3834},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "test_case.assertRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11441},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "list(iterable)", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4045},
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "pandas.merge_ordered(left, right, '_y'), on=None)", "intent": "Perform merge with optional filling/interpolation . With arguments `left`, `right`, `'_y')`, `on`.", "question_id": 45676},
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "HTTPHandler.http_open(req)", "intent": "Send an HTTP request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11871},
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42128},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "torch.linalg.solve(A, B)", "intent": "Computes the solution of a square system of linear equations with a unique solution . Letting K\\mathbb { K } K be R\\mathbb { R } R or C\\mathbb { C } C , this function computes the solution X\u2208Kn\u00d7kX \\in \\mathbb { K } ^ { n \\times k } X\u2208Kn\u00d7k of the linear system associated to A\u2208Kn\u00d7n , B\u2208Km\u00d7kA \\in \\mathbb { K } ^ { n \\times n } , `B` \\in \\mathbb { K } ^ { m \\times k } A\u2208Kn\u00d7n , B\u2208Km\u00d7k , which is defined as With arguments `A`.", "question_id": 49781},
{"snippet": "bisect.insort_left(a, x, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 866},
{"snippet": "io.StringIO()", "intent": "An in-memory stream for text I/O .", "question_id": 5164},
{"snippet": "readline.get_completer_delims()", "intent": "Set or get the word delimiters for completion .", "question_id": 8047},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "xml.sax.saxutils.escape(data)", "intent": "Escape ' & ' , ' < ' , and ' > ' in a string of `data` .", "question_id": 12652},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "DataFrame.pipe(func, *args, **kwargs)", "intent": "Apply `func` ( self , * args , * * kwargs ) . With arguments `*args`, `**kwargs`.", "question_id": 34037},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "email_message.__str__()", "intent": "Equivalent to as_string ( policy=self.policy.clone ( utf8=True ) ) .", "question_id": 3232},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "json_decoder.raw_decode(s)", "intent": "Decode a JSON document from `s` ( a str beginning with a JSON document ) and return a 2-tuple of the Python representation and the index in s where the document ended .", "question_id": 5321},
{"snippet": "matlib.repmat(a, m, n)", "intent": "Repeat `a` 0-D to 2-D array or matrix MxN times . With arguments `m`, `n`.", "question_id": 18544},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "Series.swaplevel(i=- 2)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 41411},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "Series.swaplevel(i=- 2)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 41411},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "distutils.system_info.get_standard_file(fname)", "intent": "Returns a list of files named \u2018 `fname` \u2019 from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ \u2018 HOME \u2019 ] ) 3 ) Local directory", "question_id": 22646},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296},
{"snippet": "Match.string", "intent": "The string passed to match() or search().", "question_id": 8014},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "DataFrame.merge(right, '_y'), how='inner')", "intent": "Merge DataFrame or named Series objects with a database-style join . Merge DataFrames df1 and df2 with specified left and `right` suffixes appended to any overlapping columns . With arguments `'_y')`, `how`.", "question_id": 33800},
{"snippet": "numpy.diff(a, append=<no value>)", "intent": "Calculate the n-th discrete difference along the given `axis` . The first difference is given by out [ i ] = `a` [ i+1 ] - a [ i ] along the given axis , higher differences are calculated by using diff recursively . With arguments `append`.", "question_id": 24471},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "test.support.TEST_SUPPORT_DIR", "intent": "Set to the top level directory that contains test.support.", "question_id": 10126},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "DataFrame.reset_index(level=None)", "intent": "Reset the index , or a `level` of it .", "question_id": 34634},
{"snippet": "DataFrame.sort_index(ascending=True)", "intent": "Sort object by labels ( along an `axis` ) . By default , it sorts in `ascending` order , to sort in descending order , use ascending=False", "question_id": 35034},
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445},
{"snippet": "ufunc.reduceat(array, indices, axis=0, dtype=None)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) . With arguments `dtype`.", "question_id": 23911},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "Tensor.div_(value)", "intent": "In-place version of div ( ) With arguments `value`.", "question_id": 48681},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "io.StringIO()", "intent": "An in-memory stream for text I/O .", "question_id": 5164},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "re.ASCII", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7925},
{"snippet": "date.resolution", "intent": "The smallest possible difference between non-equal date objects, timedelta(days=1).", "question_id": 2225},
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324},
{"snippet": "os.fwalk(top='.')", "intent": "This behaves exactly like walk ( ) , except that it yields a 4-tuple ( dirpath , dirnames , filenames , dirfd ) , and it supports `dir_fd` . With arguments `top`.", "question_id": 6984},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "email_message.__str__()", "intent": "Equivalent to as_string ( policy=self.policy.clone ( utf8=True ) ) .", "question_id": 3232},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "linalg.tensorsolve(a, b)", "intent": "Solve the tensor equation `a` x = `b` for x .", "question_id": 19418},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "torch.nn.functional.tanh(input)", "intent": "Applies element-wise , Tanh ( x ) =tanh\u2061 ( x ) =exp\u2061 ( x ) \u2212exp\u2061 ( \u2212x ) exp\u2061 ( x ) +exp\u2061 ( \u2212x ) \\text { Tanh } ( x ) = \\tanh ( x ) = \\frac { \\exp ( x ) - \\exp ( -x ) } { \\exp ( x ) + \\exp ( -x ) } Tanh ( x ) =tanh ( x ) =exp ( x ) +exp ( \u2212x ) exp ( x ) \u2212exp ( \u2212x ) \u200b With arguments `input`.", "question_id": 49901},
{"snippet": "importlib.util.source_from_cache(path)", "intent": "Given the `path` to a PEP 3147 file name , return the associated source code file path .", "question_id": 4925},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "numpy.fromstring(string, count=- 1)", "intent": "A new 1-D array initialized from text data in a `string` . With arguments `count`.", "question_id": 21478},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "polynomial.polyutils.trimcoef(c, tol=0)", "intent": "Remove \u201c small \u201d \u201c trailing \u201d coefficients from a polynomial . \u201c Small \u201d means \u201c small in absolute value \u201d and is controlled by the parameter `tol` ; \u201c trailing \u201d means highest order coefficient ( s ) , e.g. , in [ 0 , 1 , 1 , 0 , 0 ] ( which represents 0 + x + x * * 2 + 0 * x * * 3 + 0 * x * * 4 ) both the 3-rd and 4-th order coefficients would be \u201c trimmed . \u201d With arguments `c`.", "question_id": 22535},
{"snippet": "DataFrame.insert(loc, column, value)", "intent": "Insert `column` into DataFrame at specified location . Notice that pandas uses index alignment in case of `value` from type Series : With arguments `loc`.", "question_id": 33403},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "crypt.METHOD_CRYPT", "intent": "The traditional method with a 2 character salt and 13 characters of hash.", "question_id": 1672},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "mapping_proxy_type.get(key)", "intent": "Return the value for `key` if key is in the underlying mapping , else `default` .", "question_id": 11213},
{"snippet": "DataFrame.reset_index(level=None)", "intent": "Reset the index , or a `level` of it .", "question_id": 34634},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200},
{"snippet": "email_message.get_content_subtype()", "intent": "Return the message \u2019 s sub-content type .", "question_id": 3257},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "DataFrame.merge(right, '_y'), how='inner')", "intent": "Merge DataFrame or named Series objects with a database-style join . Merge DataFrames df1 and df2 with specified left and `right` suffixes appended to any overlapping columns . With arguments `'_y')`, `how`.", "question_id": 33800},
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "numpy.log2(x, /, signature, order='K')", "intent": "Base-2 logarithm of `x` . With arguments `/`, `signature`, `order`.", "question_id": 24115},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "DataFrameGroupBy.sample(replace=False)", "intent": "Return a random sample of items from each group . With arguments `replace`.", "question_id": 43699},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473},
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324},
{"snippet": "email.encoders.encode_noop(msg)", "intent": "This does nothing ; it doesn \u2019 t even set the Content-Transfer-Encoding header . With arguments `msg`.", "question_id": 3072},
{"snippet": "formatter.pop_style(n=1)", "intent": "Pop the last `n` style specifications passed to push_style ( ) .", "question_id": 3834},
{"snippet": "ctypes.c_int16", "intent": "Represents the C 16-bit signed int datatype.", "question_id": 1863},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "Series.swaplevel(i=- 2)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 41411},
{"snippet": "ssl.cert_time_to_seconds(cert_time)", "intent": "Return the time in seconds since the Epoch , given the `cert_time` string representing the \u201c notBefore \u201d or \u201c notAfter \u201d date from a certificate in `` % b % d % H : % M : % S % Y % Z '' strptime format ( C locale ) .", "question_id": 8891},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "numpy.sign(x, /, signature)", "intent": "Returns an element-wise indication of the sign of a number . The sign function returns -1 if `x` < 0 , 0 if x==0 , 1 if x > 0. nan is returned for nan inputs . With arguments `/`, `signature`.", "question_id": 18231},
{"snippet": "numpy.histogramdd(sample, range=None)", "intent": "Compute the multidimensional histogram of some data . With arguments `sample`, `range`.", "question_id": 20895},
{"snippet": "email_message.__str__()", "intent": "Equivalent to as_string ( policy=self.policy.clone ( utf8=True ) ) .", "question_id": 3232},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "torch.vander(x)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 .", "question_id": 48635},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "torch.nn.functional.tanh(input)", "intent": "Applies element-wise , Tanh ( x ) =tanh\u2061 ( x ) =exp\u2061 ( x ) \u2212exp\u2061 ( \u2212x ) exp\u2061 ( x ) +exp\u2061 ( \u2212x ) \\text { Tanh } ( x ) = \\tanh ( x ) = \\frac { \\exp ( x ) - \\exp ( -x ) } { \\exp ( x ) + \\exp ( -x ) } Tanh ( x ) =tanh ( x ) =exp ( x ) +exp ( \u2212x ) exp ( x ) \u2212exp ( \u2212x ) \u200b With arguments `input`.", "question_id": 49901},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903},
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "curses.echo()", "intent": "Enter echo mode .", "question_id": 1931},
{"snippet": "random.randint(a, b)", "intent": "Return `a` random integer N such that a < = N < = b. Alias for randrange ( a , b+1 ) . With arguments `b`.", "question_id": 7893},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "char.compare_chararrays(a, b, cmp_op, rstrip)", "intent": "Performs element-wise comparison of two string arrays using the comparison operator specified by `cmp_op` . With arguments `a`, `b`, `rstrip`.", "question_id": 21045},
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238},
{"snippet": "base_server.serve_forever(poll_interval=0.5)", "intent": "Handle requests until an explicit shutdown ( ) request . Poll for shutdown every `poll_interval` seconds .", "question_id": 8763},
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "inspect.getmembers(object)", "intent": "Return all the members of an `object` in a list of ( name , value ) pairs sorted by name .", "question_id": 4946},
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "curses.echo()", "intent": "Enter echo mode .", "question_id": 1931},
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42128},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "operator.__iconcat__(a, b)", "intent": "`a` = iconcat ( a , `b` ) is equivalent to a += b for a and b sequences .", "question_id": 6593},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "email_message.__str__()", "intent": "Equivalent to as_string ( policy=self.policy.clone ( utf8=True ) ) .", "question_id": 3232},
{"snippet": "curses.echo()", "intent": "Enter echo mode .", "question_id": 1931},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "numpy.tril_indices_from(arr, k=0)", "intent": "Return the indices for the lower-triangle of `arr` . With arguments `k`.", "question_id": 21469},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032},
{"snippet": "random.Generator.power(a)", "intent": "Draws samples in [ 0 , 1 ] from `a` power distribution with positive exponent a - 1 .", "question_id": 16090},
{"snippet": "numpy.amin(a)", "intent": "Return the minimum of an array or minimum along an `axis` . Don \u2019 t use amin for element-wise comparison of 2 arrays ; when a.shape [ 0 ] is 2 , minimum ( `a` [ 0 ] , a [ 1 ] ) is faster than amin ( a , axis=0 ) .", "question_id": 16364},
{"snippet": "linalg.tensorsolve(a, b)", "intent": "Solve the tensor equation `a` x = `b` for x .", "question_id": 19418},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141},
{"snippet": "random.RandomState.choice(a, size=None)", "intent": "Generates `a` random sample from a given 1-D array Generate a uniform random sample from np.arange ( 5 ) of `size` 3 :", "question_id": 18903},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474},
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "pandas.read_csv(filepath_or_buffer, delimiter=None)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `delimiter`.", "question_id": 46036},
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "TarInfo.uname", "intent": "User name.", "question_id": 9989},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "torch.baddbmm(input, batch1, batch2, out=None)", "intent": "Performs a batch matrix-matrix product of matrices in `batch1` and `batch2` . `input` is added to the final result . If batch1 is a ( b\u00d7n\u00d7m ) ( b \\times n \\times m ) ( b\u00d7n\u00d7m ) tensor , batch2 is a ( b\u00d7m\u00d7p ) ( b \\times m \\times p ) ( b\u00d7m\u00d7p ) tensor , then input must be broadcastable with a ( b\u00d7n\u00d7p ) ( b \\times n \\times p ) ( b\u00d7n\u00d7p ) tensor and `out` will be a ( b\u00d7n\u00d7p ) ( b \\times n \\times p ) ( b\u00d7n\u00d7p ) tensor .", "question_id": 48134},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "operator.truth(obj)", "intent": "Return True if `obj` is true , and False otherwise .", "question_id": 6527},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "maildir_message.set_info(info)", "intent": "Set \u201c `info` \u201d to info , which should be a string .", "question_id": 5822},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "NNTP.newgroups(date)", "intent": "Send a NEWGROUPS command . The `date` argument should be a datetime.date or datetime.datetime object .", "question_id": 6461},
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130},
{"snippet": "json.JSONEncoder()", "intent": "Extensible JSON encoder for Python data structures .", "question_id": 5322},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901},
{"snippet": "DataFrame.sort_index(ascending=True)", "intent": "Sort object by labels ( along an `axis` ) . By default , it sorts in `ascending` order , to sort in descending order , use ascending=False", "question_id": 35034},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "reversed(seq)", "intent": "Return a reverse iterator . `seq` must be an object which has a __reversed__ ( ) method or supports the sequence protocol ( the __len__ ( ) method and the __getitem__ ( ) method with integer arguments starting at 0 ) .", "question_id": 4099},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "widget.step()", "intent": "Increments the progress bar \u2019 s value by `amount` .", "question_id": 10617},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124},
{"snippet": "torch.optim.LBFGS(params)", "intent": "Implements L-BFGS algorithm , heavily inspired by minFunc . With arguments `params`.", "question_id": 50136},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "HTTPHandler.http_open(req)", "intent": "Send an HTTP request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11871},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "torch.nn.functional.pixel_shuffle(input, upscale_factor)", "intent": "Rearranges elements in a tensor of shape ( \u2217 , C\u00d7r2 , H , W ) ( * , C \\times r^2 , H , W ) ( \u2217 , C\u00d7r2 , H , W ) to a tensor of shape ( \u2217 , C , H\u00d7r , W\u00d7r ) ( * , C , H \\times r , W \\times r ) ( \u2217 , C , H\u00d7r , W\u00d7r ) , where r is the `upscale_factor` . With arguments `input`.", "question_id": 51421},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "polynomial.hermite_e.hermetrim(c, tol=0)", "intent": "Remove \u201c small \u201d \u201c trailing \u201d coefficients from a polynomial . \u201c Small \u201d means \u201c small in absolute value \u201d and is controlled by the parameter `tol` ; \u201c trailing \u201d means highest order coefficient ( s ) , e.g. , in [ 0 , 1 , 1 , 0 , 0 ] ( which represents 0 + x + x * * 2 + 0 * x * * 3 + 0 * x * * 4 ) both the 3-rd and 4-th order coefficients would be \u201c trimmed . \u201d With arguments `c`.", "question_id": 16569},
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "ufunc.reduceat(array, indices)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) .", "question_id": 23907},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "DataFrameGroupBy.sample(replace=False)", "intent": "Return a random sample of items from each group . With arguments `replace`.", "question_id": 43699},
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "torch.nn.functional.tanh(input)", "intent": "Applies element-wise , Tanh ( x ) =tanh\u2061 ( x ) =exp\u2061 ( x ) \u2212exp\u2061 ( \u2212x ) exp\u2061 ( x ) +exp\u2061 ( \u2212x ) \\text { Tanh } ( x ) = \\tanh ( x ) = \\frac { \\exp ( x ) - \\exp ( -x ) } { \\exp ( x ) + \\exp ( -x ) } Tanh ( x ) =tanh ( x ) =exp ( x ) +exp ( \u2212x ) exp ( x ) \u2212exp ( \u2212x ) \u200b With arguments `input`.", "question_id": 49901},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "PurePath.match(pattern)", "intent": "Match this path against the provided glob-style `pattern` .", "question_id": 7258},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "ma.polyfit(x, y, deg)", "intent": "Least squares polynomial fit . Fit a polynomial p ( `x` ) = p [ 0 ] * x * * `deg` + ... + p [ deg ] of degree deg to points ( x , `y` ) .", "question_id": 16605},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "matlib.repmat(a, m, n)", "intent": "Repeat `a` 0-D to 2-D array or matrix MxN times . With arguments `m`, `n`.", "question_id": 18544},
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238},
{"snippet": "MultiIndex.from_frame(df, names=None)", "intent": "Make a MultiIndex from a DataFrame . Using explicit `names` , instead of the column names With arguments `df`.", "question_id": 37554},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "distutils.system_info.get_standard_file(fname)", "intent": "Returns a list of files named \u2018 `fname` \u2019 from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ \u2018 HOME \u2019 ] ) 3 ) Local directory", "question_id": 22646},
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "FTP.storlines(cmd, fp)", "intent": "Store a file in ASCII transfer mode . `cmd` should be an appropriate STOR command ( see storbinary ( ) ) . Lines are read until EOF from the file object `fp` ( opened in binary mode ) using its readline ( ) method to provide the data to be stored .", "question_id": 3941},
{"snippet": "ZipInfo.flag_bits", "intent": "ZIP flag bits.", "question_id": 12872},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "char.chararray.itemset(*args)", "intent": "Insert scalar into an array ( scalar is cast to array \u2019 s dtype , if possible ) With arguments `*args`.", "question_id": 17179},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "curses.echo()", "intent": "Enter echo mode .", "question_id": 1931},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207},
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901},
{"snippet": "typing.Callable", "intent": "Callable type; Callable[[int], str] is a function of (int) -> str.", "question_id": 11336},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445},
{"snippet": "mailbox.NoSuchMailboxError", "intent": "Raised when a mailbox is expected but is not found, such as when instantiating a Mailbox subclass with a path that does not exist (and with the create parameter set to False), or when opening a folder that does not exist.", "question_id": 5857},
{"snippet": "ufunc.reduceat(array, indices, dtype=None)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) . With arguments `dtype`.", "question_id": 23909},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "dict.items()", "intent": "Return a new view of the dictionary \u2019 s items ( ( key , value ) pairs ) .", "question_id": 9484},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "operator.__iconcat__(a, b)", "intent": "`a` = iconcat ( a , `b` ) is equivalent to a += b for a and b sequences .", "question_id": 6593},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "errno.EUSERS", "intent": "Too many users", "question_id": 3592},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735},
{"snippet": "simple_http_request_handler.do_HEAD()", "intent": "This method serves the 'HEAD ' request type : it sends the headers it would send for the equivalent GET request .", "question_id": 4664},
{"snippet": "random.choice(a, replace=True)", "intent": "Generates `a` random sample from a given 1-D array With arguments `replace`.", "question_id": 18794},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "urllib.parse.urljoin(base, url)", "intent": "Construct a full ( \u201c absolute \u201d ) URL by combining a \u201c `base` URL \u201d ( base ) with another URL ( `url` ) .", "question_id": 11695},
{"snippet": "matlib.repmat(a, m, n)", "intent": "Repeat `a` 0-D to 2-D array or matrix MxN times . With arguments `m`, `n`.", "question_id": 18544},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "curses.echo()", "intent": "Enter echo mode .", "question_id": 1931},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "maildir_message.set_info(info)", "intent": "Set \u201c `info` \u201d to info , which should be a string .", "question_id": 5822},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "stat.S_ISGID", "intent": "Set-group-ID bit.", "question_id": 9095},
{"snippet": "pandas.read_csv(filepath_or_buffer, sep=NoDefault.no_default)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `sep`.", "question_id": 46055},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "formatter.AbstractFormatter(writer)", "intent": "The standard formatter . With arguments `writer`.", "question_id": 3840},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134},
{"snippet": "os.EX_OSFILE", "intent": "Exit code that means some system file did not exist, could not be opened, or had some other kind of error.", "question_id": 7027},
{"snippet": "NNTP.newgroups(date)", "intent": "Send a NEWGROUPS command . The `date` argument should be a datetime.date or datetime.datetime object .", "question_id": 6461},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "Series.swaplevel(i=- 2)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 41411},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "FTP.delete(filename)", "intent": "Remove the file named `filename` from the server .", "question_id": 3960},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "Index.sort_values(ascending=True, key=None)", "intent": "Return a sorted copy of the index . Sort values in `ascending` order ( default behavior ) . With arguments `key`.", "question_id": 37058},
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "ufunc.reduceat(array, indices, dtype=None)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) . With arguments `dtype`.", "question_id": 23909},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "email_message.__str__()", "intent": "Equivalent to as_string ( policy=self.policy.clone ( utf8=True ) ) .", "question_id": 3232},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "polynomial.polyutils.as_series(alist)", "intent": "Return argument as a list of 1-d arrays . With arguments `alist`.", "question_id": 21617},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "distutils.system_info.get_standard_file(fname)", "intent": "Returns a list of files named \u2018 `fname` \u2019 from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ \u2018 HOME \u2019 ] ) 3 ) Local directory", "question_id": 22646},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "imp.find_module(name)", "intent": "Try to find the module `name` .", "question_id": 4763},
{"snippet": "wsgi_request_handler.handle()", "intent": "Process the HTTP request .", "question_id": 12234},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "ma.cov(x)", "intent": "Estimate the covariance matrix . If `x` and `y` have the same shape , a common mask is allocated : if x [ i , j ] is masked , then y [ i , j ] will also be masked .", "question_id": 16259},
{"snippet": "wsgi_request_handler.handle()", "intent": "Process the HTTP request .", "question_id": 12234},
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "Series.sort_index(level=None)", "intent": "Sort Series by index labels . Specify index `level` to sort", "question_id": 40693},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "graph", "intent": "Returns a string representation of the internal graph for the forward method.", "question_id": 51288},
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "ssl.cert_time_to_seconds(cert_time)", "intent": "Return the time in seconds since the Epoch , given the `cert_time` string representing the \u201c notBefore \u201d or \u201c notAfter \u201d date from a certificate in `` % b % d % H : % M : % S % Y % Z '' strptime format ( C locale ) .", "question_id": 8891},
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "pandas.read_xml(path_or_buffer, xpath='./*')", "intent": "Read XML document into a DataFrame object . This function will always return a single DataFrame or raise exceptions due to issues with XML document , `xpath` , or other parameters . With arguments `path_or_buffer`.", "question_id": 46473},
{"snippet": "curses.echo()", "intent": "Enter echo mode .", "question_id": 1931},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "date.ctime()", "intent": "Return a string representing the date , for example date ( 2002 , 12 , 4 ) .ctime ( ) == 'Wed Dec 4 00:00:00 2002 ' .", "question_id": 2244},
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214},
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42128},
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "Unpacker.done()", "intent": "Indicates unpack completion .", "question_id": 12289},
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474},
{"snippet": "py_compile.main()", "intent": "Compile several source files .", "question_id": 7835},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "urllib.parse.urljoin(base, url)", "intent": "Construct a full ( \u201c absolute \u201d ) URL by combining a \u201c `base` URL \u201d ( base ) with another URL ( `url` ) .", "question_id": 11695},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "curses.echo()", "intent": "Enter echo mode .", "question_id": 1931},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "ma.mr_", "intent": "Translate slice objects to concatenation along the first axis.", "question_id": 24150},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296},
{"snippet": "Index.searchsorted(value)", "intent": "Find indices where elements should be inserted to maintain order . Find the indices into a sorted Index self such that , if the corresponding elements in `value` were inserted before the indices , the order of self would be preserved .", "question_id": 36955},
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "curses.ascii.isdigit(c)", "intent": "Checks for an ASCII decimal digit , ' 0 ' through ' 9 ' . This is equivalent to `c` in string.digits .", "question_id": 1904},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "DataFrame.insert(loc, column, value)", "intent": "Insert `column` into DataFrame at specified location . Notice that pandas uses index alignment in case of `value` from type Series : With arguments `loc`.", "question_id": 33403},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "ufunc.reduceat(array, indices)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) .", "question_id": 23907},
{"snippet": "curses.echo()", "intent": "Enter echo mode .", "question_id": 1931},
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "ma.cov(x)", "intent": "Estimate the covariance matrix . If `x` and `y` have the same shape , a common mask is allocated : if x [ i , j ] is masked , then y [ i , j ] will also be masked .", "question_id": 16259},
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "typing.Callable", "intent": "Callable type; Callable[[int], str] is a function of (int) -> str.", "question_id": 11336},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "traceback.format_stack(limit=None)", "intent": "A shorthand for format_list ( extract_stack ( `f` , `limit` ) ) .", "question_id": 10789},
{"snippet": "numpy.column_stack(tup)", "intent": "Stack 1-D arrays as columns into a 2-D array . With arguments `tup`.", "question_id": 20745},
{"snippet": "fileinput.hook_compressed(filename, mode)", "intent": "Transparently opens files compressed with gzip and bzip2 ( recognized by the extensions '.gz ' and '.bz2 ' ) using the gzip and bz2 modules . If the `filename` extension is not '.gz ' or '.bz2 ' , the file is opened normally ( ie , using open ( ) without any decompression ) . With arguments `mode`.", "question_id": 3810},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "os.supports_fd", "intent": "A Set object indicating which functions in the os module permit specifying their path parameter as an open file descriptor.", "question_id": 6949},
{"snippet": "ssl.cert_time_to_seconds(cert_time)", "intent": "Return the time in seconds since the Epoch , given the `cert_time` string representing the \u201c notBefore \u201d or \u201c notAfter \u201d date from a certificate in `` % b % d % H : % M : % S % Y % Z '' strptime format ( C locale ) .", "question_id": 8891},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "SimpleXMLRPCRequestHandler.rpc_paths", "intent": "An attribute value that must be a tuple listing valid path portions of the URL for receiving XML-RPC requests.", "question_id": 12739},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "torch.lstsq(input, A)", "intent": "Computes the solution to the least squares and least norm problems for a full rank matrix AAA of size ( m\u00d7n ) ( m \\times n ) ( m\u00d7n ) and a matrix BBB of size ( m\u00d7k ) ( m \\times k ) ( m\u00d7k ) . With arguments `input`, `A`.", "question_id": 51237},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977},
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162},
{"snippet": "IMAP4.fetch(message_set, message_parts)", "intent": "Fetch ( parts of ) messages . `message_parts` should be a string of message part names enclosed within parentheses , eg : `` ( UID BODY [ TEXT ] ) '' . With arguments `message_set`.", "question_id": 4701},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735},
{"snippet": "Index.set_value(arr, key, value)", "intent": "Fast lookup of `value` from 1-dimensional ndarray . With arguments `arr`, `key`.", "question_id": 36973},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "numpy.angle(z)", "intent": "Return the angle of the complex argument . With arguments `z`.", "question_id": 19435},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "ssl.cert_time_to_seconds(cert_time)", "intent": "Return the time in seconds since the Epoch , given the `cert_time` string representing the \u201c notBefore \u201d or \u201c notAfter \u201d date from a certificate in `` % b % d % H : % M : % S % Y % Z '' strptime format ( C locale ) .", "question_id": 8891},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110},
{"snippet": "curses.echo()", "intent": "Enter echo mode .", "question_id": 1931},
{"snippet": "decimal.ROUND_05UP", "intent": "Round away from zero if last digit after rounding towards zero would have been 0 or 5; otherwise round towards zero.", "question_id": 2584},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "DataFrameGroupBy.sample(replace=False)", "intent": "Return a random sample of items from each group . With arguments `replace`.", "question_id": 43699},
{"snippet": "text_calendar.pryear(theyear, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`.", "question_id": 948},
{"snippet": "DataFrame.__iter__()", "intent": "Iterate over info axis .", "question_id": 32135},
{"snippet": "random.Generator.geometric(p)", "intent": "Draw samples from the geometric distribution . where `p` is the probability of success of an individual trial .", "question_id": 16997},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "pandas.read_csv(filepath_or_buffer, delimiter=None)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `delimiter`.", "question_id": 46036},
{"snippet": "Timedelta.nanoseconds", "intent": "Return the number of nanoseconds (n), where 0 <= n < 1 microsecond.", "question_id": 42135},
{"snippet": "io.StringIO()", "intent": "An in-memory stream for text I/O .", "question_id": 5164},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "DataFrame.plot.bar(**kwargs)", "intent": "Vertical bar plot . With arguments `**kwargs`.", "question_id": 34110},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "Popen.returncode", "intent": "The child return code, set by poll() and wait() (and indirectly by communicate()).", "question_id": 9624},
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134},
{"snippet": "email_message.get_content_subtype()", "intent": "Return the message \u2019 s sub-content type .", "question_id": 3257},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "ctypes.c_int16", "intent": "Represents the C 16-bit signed int datatype.", "question_id": 1863},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324},
{"snippet": "torch.nn.MultiMarginLoss(p=1)", "intent": "Creates a criterion that optimizes a multi-class classification hinge loss ( margin-based loss ) between input xxx ( a 2D mini-batch Tensor ) and output yyy ( which is a 1D tensor of target class indices , 0\u2264y\u2264x.size ( 1 ) \u221210 \\leq y \\leq \\text { x.size } ( 1 ) -10\u2264y\u2264x.size ( 1 ) \u22121 ) : With arguments `p`.", "question_id": 48060},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "pandas.read_csv(filepath_or_buffer, delimiter=None)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `delimiter`.", "question_id": 46036},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "ma.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 22287},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "Series.str.cat(join='left')", "intent": "Concatenate strings in the Series/Index with given separator . With arguments `join`.", "question_id": 40862},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "base_server.serve_forever(poll_interval=0.5)", "intent": "Handle requests until an explicit shutdown ( ) request . Poll for shutdown every `poll_interval` seconds .", "question_id": 8763},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "subprocess.check_call(args, shell=False)", "intent": "Run command with arguments . With arguments `args`, `shell`.", "question_id": 9673},
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "Timestamp.combine(date, time)", "intent": "Combine `date` , `time` into datetime with same date and time fields .", "question_id": 42281},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "distutils.system_info.get_standard_file(fname)", "intent": "Returns a list of files named \u2018 `fname` \u2019 from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ \u2018 HOME \u2019 ] ) 3 ) Local directory", "question_id": 22646},
{"snippet": "urllib.parse.unquote(string)", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str .", "question_id": 11723},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "matlib.repmat(a, m, n)", "intent": "Repeat `a` 0-D to 2-D array or matrix MxN times . With arguments `m`, `n`.", "question_id": 18544},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "softplus.prune(t)", "intent": "Computes and returns a pruned version of input tensor `t` according to the pruning rule specified in compute_mask ( ) .", "question_id": 50894},
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110},
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050},
{"snippet": "py_compile.main()", "intent": "Compile several source files .", "question_id": 7835},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "datetime.ctime()", "intent": "Return a string representing the date and time , for example datetime ( 2002 , 12 , 4 , 20 , 30 , 40 ) .ctime ( ) == 'Wed Dec 4 20:30:40 2002 ' .", "question_id": 2311},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "ma.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 22287},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "subprocess.getstatusoutput(cmd)", "intent": "Return ( exitcode , output ) of executing `cmd` in a shell .", "question_id": 9689},
{"snippet": "random.Generator.power(a)", "intent": "Draws samples in [ 0 , 1 ] from `a` power distribution with positive exponent a - 1 .", "question_id": 16090},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "urllib.parse.urljoin(base, url)", "intent": "Construct a full ( \u201c absolute \u201d ) URL by combining a \u201c `base` URL \u201d ( base ) with another URL ( `url` ) .", "question_id": 11695},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "Series.swaplevel(i=- 2)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 41411},
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "list(iterable)", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4045},
{"snippet": "curses.napms(ms)", "intent": "Sleep for `ms` milliseconds .", "question_id": 1956},
{"snippet": "DataFrame.astype(dtype)", "intent": "Cast a pandas object to a specified `dtype` dtype .", "question_id": 32384},
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "base_server.serve_forever(poll_interval=0.5)", "intent": "Handle requests until an explicit shutdown ( ) request . Poll for shutdown every `poll_interval` seconds .", "question_id": 8763},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "ufunc.reduceat(array, indices, axis=0, dtype=None)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) . With arguments `dtype`.", "question_id": 23911},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "random.Generator.power(a)", "intent": "Draws samples in [ 0 , 1 ] from `a` power distribution with positive exponent a - 1 .", "question_id": 16090},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "random.choice(a, replace=True)", "intent": "Generates `a` random sample from a given 1-D array With arguments `replace`.", "question_id": 18794},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "DataFrame.reset_index(level=None)", "intent": "Reset the index , or a `level` of it .", "question_id": 34634},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "tuple()", "intent": "Tuples may be constructed in a number of ways :", "question_id": 9161},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899},
{"snippet": "email_message.__str__()", "intent": "Equivalent to as_string ( policy=self.policy.clone ( utf8=True ) ) .", "question_id": 3232},
{"snippet": "torch.nn.functional.prelu(input, weight)", "intent": "Applies element-wise the function PReLU ( x ) =max\u2061 ( 0 , x ) +weight\u2217min\u2061 ( 0 , x ) \\text { PReLU } ( x ) = \\max ( 0 , x ) + \\text { `weight` } * \\min ( 0 , x ) PReLU ( x ) =max ( 0 , x ) +weight\u2217min ( 0 , x ) where weight is a learnable parameter . With arguments `input`.", "question_id": 51355},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "string.capwords(s)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . With arguments `s`.", "question_id": 9529},
{"snippet": "date.ctime()", "intent": "Return a string representing the date , for example date ( 2002 , 12 , 4 ) .ctime ( ) == 'Wed Dec 4 00:00:00 2002 ' .", "question_id": 2244},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "matlib.repmat(a, m, n)", "intent": "Repeat `a` 0-D to 2-D array or matrix MxN times . With arguments `m`, `n`.", "question_id": 18544},
{"snippet": "random.choice(a, size=None)", "intent": "Generates `a` random sample from a given 1-D array Generate a uniform random sample from np.arange ( 5 ) of `size` 3 :", "question_id": 18793},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062},
{"snippet": "date.ctime()", "intent": "Return a string representing the date , for example date ( 2002 , 12 , 4 ) .ctime ( ) == 'Wed Dec 4 00:00:00 2002 ' .", "question_id": 2244},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "curses.echo()", "intent": "Enter echo mode .", "question_id": 1931},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "os.supports_fd", "intent": "A Set object indicating which functions in the os module permit specifying their path parameter as an open file descriptor.", "question_id": 6949},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "globals()", "intent": "Return a dictionary representing the current global symbol table .", "question_id": 4027},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "NNTP.newgroups(date)", "intent": "Send a NEWGROUPS command . The `date` argument should be a datetime.date or datetime.datetime object .", "question_id": 6461},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "polynomial.chebyshev.chebpts1(npts)", "intent": "Chebyshev points of the first kind . The Chebyshev points of the first kind are the points cos ( x ) , where x = [ pi * ( k + .5 ) /npts for k in range ( `npts` ) ] .", "question_id": 16906},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "numpy.poly1d(c_or_r, variable=None)", "intent": "A one-dimensional polynomial class . The `variable` used in the string representation of p can be modified , using the variable parameter : With arguments `c_or_r`.", "question_id": 21433},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "date.ctime()", "intent": "Return a string representing the date , for example date ( 2002 , 12 , 4 ) .ctime ( ) == 'Wed Dec 4 00:00:00 2002 ' .", "question_id": 2244},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735},
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735},
{"snippet": "ssl.cert_time_to_seconds(cert_time)", "intent": "Return the time in seconds since the Epoch , given the `cert_time` string representing the \u201c notBefore \u201d or \u201c notAfter \u201d date from a certificate in `` % b % d % H : % M : % S % Y % Z '' strptime format ( C locale ) .", "question_id": 8891},
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445},
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "Series.reset_index(name=None)", "intent": "Generate a new DataFrame or Series with the index reset . To specify the `name` of the new column use name .", "question_id": 40316},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "lambda_lr.load_state_dict(state_dict)", "intent": "Loads the schedulers state . With arguments `state_dict`.", "question_id": 50616},
{"snippet": "DataFrame.sort_index(ascending=True)", "intent": "Sort object by labels ( along an `axis` ) . By default , it sorts in `ascending` order , to sort in descending order , use ascending=False", "question_id": 35034},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445},
{"snippet": "IMAP4.fetch(message_set, message_parts)", "intent": "Fetch ( parts of ) messages . `message_parts` should be a string of message part names enclosed within parentheses , eg : `` ( UID BODY [ TEXT ] ) '' . With arguments `message_set`.", "question_id": 4701},
{"snippet": "Series.str.rsplit(pat=None)", "intent": "Split strings around given separator/delimiter . The `pat` parameter can be used to split by other characters .", "question_id": 41203},
{"snippet": "SimpleXMLRPCRequestHandler.rpc_paths", "intent": "An attribute value that must be a tuple listing valid path portions of the URL for receiving XML-RPC requests.", "question_id": 12739},
{"snippet": "widget.focus(item=None)", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10631},
{"snippet": "string.punctuation", "intent": "String of ASCII characters which are considered punctuation characters in the C locale.", "question_id": 9513},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "maildir_message.set_info(info)", "intent": "Set \u201c `info` \u201d to info , which should be a string .", "question_id": 5822},
{"snippet": "email_message.get_content_subtype()", "intent": "Return the message \u2019 s sub-content type .", "question_id": 3257},
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "Template.copy(infile, outfile)", "intent": "Copy `infile` to `outfile` through the pipe .", "question_id": 7434},
{"snippet": "distutils.system_info.get_standard_file(fname)", "intent": "Returns a list of files named \u2018 `fname` \u2019 from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ \u2018 HOME \u2019 ] ) 3 ) Local directory", "question_id": 22646},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "torch.vander(x)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 .", "question_id": 48635},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "base_http_request_handler.MessageClass", "intent": "Specifies an email.message.Message-like class to parse HTTP headers.", "question_id": 4632},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "ma.mr_", "intent": "Translate slice objects to concatenation along the first axis.", "question_id": 24150},
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42129},
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825},
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735},
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223},
{"snippet": "torch.nn.utils.rnn.pad_sequence(sequences, batch_first=False)", "intent": "Pad a list of variable length Tensors with `padding_value` For example , if the input is list of `sequences` with size L x * and if `batch_first` is False , and T x B x * otherwise .", "question_id": 48320},
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982},
{"snippet": "Unpacker.done()", "intent": "Indicates unpack completion .", "question_id": 12289},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "ctypes.c_int16", "intent": "Represents the C 16-bit signed int datatype.", "question_id": 1863},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "operator.add(a, b)", "intent": "Return `a` + `b` , for a and b numbers .", "question_id": 6532},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "DataFrameGroupBy.sample(replace=False)", "intent": "Return a random sample of items from each group . With arguments `replace`.", "question_id": 43699},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "io.StringIO()", "intent": "An in-memory stream for text I/O .", "question_id": 5164},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "string.capwords(s)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . With arguments `s`.", "question_id": 9529},
{"snippet": "polynomial.chebyshev.chebgauss(deg)", "intent": "Gauss-Chebyshev quadrature . These sample points and weights will correctly integrate polynomials of degree \\ ( 2 * `deg` - 1\\ ) or less over the interval \\ ( [ -1 , 1 ] \\ ) with the weight function \\ ( f ( x ) = 1/\\sqrt { 1 - x^2 } \\ ) .", "question_id": 19526},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "pandas.read_csv(filepath_or_buffer, delimiter=None)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `delimiter`.", "question_id": 46036},
{"snippet": "Unpacker.done()", "intent": "Indicates unpack completion .", "question_id": 12289},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "Popen.returncode", "intent": "The child return code, set by poll() and wait() (and indirectly by communicate()).", "question_id": 9624},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474},
{"snippet": "filecmp.dircmp(a, b)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . With arguments `b`.", "question_id": 3760},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200},
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42128},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "date.ctime()", "intent": "Return a string representing the date , for example date ( 2002 , 12 , 4 ) .ctime ( ) == 'Wed Dec 4 00:00:00 2002 ' .", "question_id": 2244},
{"snippet": "random.choice(a, replace=True)", "intent": "Generates `a` random sample from a given 1-D array With arguments `replace`.", "question_id": 18794},
{"snippet": "matlib.repmat(a, m, n)", "intent": "Repeat `a` 0-D to 2-D array or matrix MxN times . With arguments `m`, `n`.", "question_id": 18544},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "sys._debugmallocstats()", "intent": "Print low-level information to stderr about the state of CPython \u2019 s memory allocator .", "question_id": 9777},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "formatter.pop_style(n=1)", "intent": "Pop the last `n` style specifications passed to push_style ( ) .", "question_id": 3834},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "numpy.fromstring(string, count=- 1)", "intent": "A new 1-D array initialized from text data in a `string` . With arguments `count`.", "question_id": 21478},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "formatter.pop_style(n=1)", "intent": "Pop the last `n` style specifications passed to push_style ( ) .", "question_id": 3834},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "ufunc.reduceat(array, indices)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) .", "question_id": 23907},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "os.supports_fd", "intent": "A Set object indicating which functions in the os module permit specifying their path parameter as an open file descriptor.", "question_id": 6949},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "matlib.repmat(a, m, n)", "intent": "Repeat `a` 0-D to 2-D array or matrix MxN times . With arguments `m`, `n`.", "question_id": 18544},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "Match.string", "intent": "The string passed to match() or search().", "question_id": 8014},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "readline.get_completer_delims()", "intent": "Set or get the word delimiters for completion .", "question_id": 8047},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "date.ctime()", "intent": "Return a string representing the date , for example date ( 2002 , 12 , 4 ) .ctime ( ) == 'Wed Dec 4 00:00:00 2002 ' .", "question_id": 2244},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "linalg.tensorsolve(a, b)", "intent": "Solve the tensor equation `a` x = `b` for x .", "question_id": 19418},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "ufunc.reduceat(array, indices)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) .", "question_id": 23907},
{"snippet": "torch.nn.RReLU(lower=0.125)", "intent": "Applies the randomized leaky rectified liner unit function , element-wise , as described in the paper : where aaa is randomly sampled from uniform distribution U ( `lower` , `upper` ) \\mathcal { U } ( \\text { lower } , \\text { upper } ) U ( lower , upper ) .", "question_id": 50703},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "ma.cov(x)", "intent": "Estimate the covariance matrix . If `x` and `y` have the same shape , a common mask is allocated : if x [ i , j ] is masked , then y [ i , j ] will also be masked .", "question_id": 16259},
{"snippet": "errno.EIO", "intent": "I/O error", "question_id": 3510},
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124},
{"snippet": "email_message.get_content_subtype()", "intent": "Return the message \u2019 s sub-content type .", "question_id": 3257},
{"snippet": "numpy.angle(z)", "intent": "Return the angle of the complex argument . With arguments `z`.", "question_id": 19435},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "NNTP.newgroups(date)", "intent": "Send a NEWGROUPS command . The `date` argument should be a datetime.date or datetime.datetime object .", "question_id": 6461},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "linalg.tensorsolve(a, b)", "intent": "Solve the tensor equation `a` x = `b` for x .", "question_id": 19418},
{"snippet": "list(iterable)", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4045},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977},
{"snippet": "email_message.get_content_subtype()", "intent": "Return the message \u2019 s sub-content type .", "question_id": 3257},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "Path.write_text(data)", "intent": "Open the file pointed to in text mode , write `data` to it , and close the file :", "question_id": 7323},
{"snippet": "DataFrameGroupBy.sample(replace=False)", "intent": "Return a random sample of items from each group . With arguments `replace`.", "question_id": 43699},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "curses.ascii.isdigit(c)", "intent": "Checks for an ASCII decimal digit , ' 0 ' through ' 9 ' . This is equivalent to `c` in string.digits .", "question_id": 1904},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "writer.send_flowing_data(data)", "intent": "Output character `data` which may be word-wrapped and re-flowed as needed .", "question_id": 3850},
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "torch.randperm(n)", "intent": "Returns a random permutation of integers from 0 to `n` - 1 .", "question_id": 51967},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "HDFStore.append(key, value, append=True)", "intent": "Append to Table in file . With arguments `key`, `value`, `append`.", "question_id": 36388},
{"snippet": "io.StringIO()", "intent": "An in-memory stream for text I/O .", "question_id": 5164},
{"snippet": "DataFrame.swaplevel(i=- 2)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35254},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "ConfigParser.BOOLEAN_STATES", "intent": "By default when using getboolean(), config parsers consider the following values True: '1', 'yes', 'true', 'on' and the following values False: '0', 'no', 'false', 'off'.", "question_id": 1493},
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "numpy.concatenate((a1, a2, ...), dtype=None)", "intent": "Join a sequence of arrays along an existing `axis` . With arguments `(a1`, `a2`, `...)`, `dtype`.", "question_id": 17881},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "datetime.second", "intent": "In range(60).", "question_id": 2277},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "ftplib.FTP(user='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3880},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42129},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124},
{"snippet": "ftplib.FTP(user='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3880},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "ctypes.c_int16", "intent": "Represents the C 16-bit signed int datatype.", "question_id": 1863},
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471},
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "Styler.format(decimal='.')", "intent": "Format the text display value of cells . With arguments `decimal`.", "question_id": 45064},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "softplus.prune(t)", "intent": "Computes and returns a pruned version of input tensor `t` according to the pruning rule specified in compute_mask ( ) .", "question_id": 50894},
{"snippet": "torch.vander(x)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 .", "question_id": 48635},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "numpy.var(a, where=<no value>)", "intent": "Compute the variance along the specified `axis` . Returns the variance of the array elements , `a` measure of the spread of a distribution . The variance is the average of the squared deviations from the mean , i.e. , var = mean ( x ) , `where` x = abs ( a - a.mean ( ) ) * * 2 .", "question_id": 22023},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "globals()", "intent": "Return a dictionary representing the current global symbol table .", "question_id": 4027},
{"snippet": "urllib.request.FTPHandler", "intent": "Open FTP URLs.", "question_id": 11812},
{"snippet": "time.daylight", "intent": "Nonzero if a DST timezone is defined.", "question_id": 10473},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657},
{"snippet": "Tensor.qr(some=True)", "intent": "See torch.qr ( ) With arguments `some`.", "question_id": 50681},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "random.Generator.power(a)", "intent": "Draws samples in [ 0 , 1 ] from `a` power distribution with positive exponent a - 1 .", "question_id": 16090},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "stringprep.in_table_c5(code)", "intent": "Determine whether `code` is in tableC.5 ( Surrogate codes ) .", "question_id": 9543},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223},
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032},
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "imp.find_module(name)", "intent": "Try to find the module `name` .", "question_id": 4763},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "numpy.fromstring(string, count=- 1)", "intent": "A new 1-D array initialized from text data in a `string` . With arguments `count`.", "question_id": 21478},
{"snippet": "DataFrame.astype(dtype)", "intent": "Cast a pandas object to a specified `dtype` dtype .", "question_id": 32384},
{"snippet": "os.supports_fd", "intent": "A Set object indicating which functions in the os module permit specifying their path parameter as an open file descriptor.", "question_id": 6949},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565},
{"snippet": "base_http_request_handler.handle_expect_100()", "intent": "When a HTTP/1.1 compliant server receives an Expect : 100-continue request header it responds back with a 100 Continue followed by 200 OK headers .", "question_id": 4636},
{"snippet": "DataFrame.sort_index(ascending=True)", "intent": "Sort object by labels ( along an `axis` ) . By default , it sorts in `ascending` order , to sort in descending order , use ascending=False", "question_id": 35034},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "DataFrame.merge(right, '_y'), how='inner')", "intent": "Merge DataFrame or named Series objects with a database-style join . Merge DataFrames df1 and df2 with specified left and `right` suffixes appended to any overlapping columns . With arguments `'_y')`, `how`.", "question_id": 33800},
{"snippet": "Tensor.div_(value)", "intent": "In-place version of div ( ) With arguments `value`.", "question_id": 48681},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "Unpacker.done()", "intent": "Indicates unpack completion .", "question_id": 12289},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "char.multiply(a, i)", "intent": "Return ( `a` * `i` ) , that is string multiple concatenation , element-wise .", "question_id": 17318},
{"snippet": "Series.str.rsplit(pat=None)", "intent": "Split strings around given separator/delimiter . The `pat` parameter can be used to split by other characters .", "question_id": 41203},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473},
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472},
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "operator.delitem(a, b)", "intent": "Remove the value of `a` at index `b` .", "question_id": 6573},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42129},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "future.cancelled()", "intent": "Return True if the call was successfully cancelled .", "question_id": 1469},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "ZipInfo.flag_bits", "intent": "ZIP flag bits.", "question_id": 12872},
{"snippet": "wsgiref.util.application_uri(environ)", "intent": "Similar to request_uri ( ) , except that the PATH_INFO and QUERY_STRING variables are ignored . With arguments `environ`.", "question_id": 12213},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "pandas.api.types.is_dict_like(obj)", "intent": "Check if the object is dict-like . With arguments `obj`.", "question_id": 42975},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "pandas.read_csv(filepath_or_buffer, delimiter=None)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `delimiter`.", "question_id": 46036},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "Tensor.tril_(k=0)", "intent": "In-place version of tril ( ) With arguments `k`.", "question_id": 51997},
{"snippet": "Path.home()", "intent": "Return a new path object representing the user \u2019 s home directory ( as returned by os.path.expanduser ( ) with ~ construct ) :", "question_id": 7266},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "matlib.repmat(a, m, n)", "intent": "Repeat `a` 0-D to 2-D array or matrix MxN times . With arguments `m`, `n`.", "question_id": 18544},
{"snippet": "Match.string", "intent": "The string passed to match() or search().", "question_id": 8014},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "NNTP.newgroups(date)", "intent": "Send a NEWGROUPS command . The `date` argument should be a datetime.date or datetime.datetime object .", "question_id": 6461},
{"snippet": "wsgiref.util.application_uri(environ)", "intent": "Similar to request_uri ( ) , except that the PATH_INFO and QUERY_STRING variables are ignored . With arguments `environ`.", "question_id": 12213},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735},
{"snippet": "operator.__iconcat__(a, b)", "intent": "`a` = iconcat ( a , `b` ) is equivalent to a += b for a and b sequences .", "question_id": 6593},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "imp.source_from_cache(path)", "intent": "Given the `path` to a PEP 3147 file name , return the associated source code file path .", "question_id": 4769},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "testing.dec.setastest(tf=True)", "intent": "Signals to nose that this function is or is not a test . With arguments `tf`.", "question_id": 22790},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "torch.baddbmm(input, batch1, batch2, out=None)", "intent": "Performs a batch matrix-matrix product of matrices in `batch1` and `batch2` . `input` is added to the final result . If batch1 is a ( b\u00d7n\u00d7m ) ( b \\times n \\times m ) ( b\u00d7n\u00d7m ) tensor , batch2 is a ( b\u00d7m\u00d7p ) ( b \\times m \\times p ) ( b\u00d7m\u00d7p ) tensor , then input must be broadcastable with a ( b\u00d7n\u00d7p ) ( b \\times n \\times p ) ( b\u00d7n\u00d7p ) tensor and `out` will be a ( b\u00d7n\u00d7p ) ( b \\times n \\times p ) ( b\u00d7n\u00d7p ) tensor .", "question_id": 48134},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "Option.choices", "intent": "For options of type \"choice\", the list of strings the user may choose from.", "question_id": 6632},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "random.Generator.power(a)", "intent": "Draws samples in [ 0 , 1 ] from `a` power distribution with positive exponent a - 1 .", "question_id": 16090},
{"snippet": "TarInfo.uname", "intent": "User name.", "question_id": 9989},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "dtype.ndim", "intent": "Number of dimensions of the sub-array if this data type describes a sub-array, and 0 otherwise.", "question_id": 21095},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "ma.MaskedArray.__setitem__(indx, value)", "intent": "x.__setitem__ ( i , y ) < == > x [ i ] =y If `value` is masked , masks those locations . With arguments `indx`.", "question_id": 20719},
{"snippet": "MultiIndex.get_locs(seq)", "intent": "Get location for a sequence of labels . With arguments `seq`.", "question_id": 37625},
{"snippet": "char.chararray.itemset(*args)", "intent": "Insert scalar into an array ( scalar is cast to array \u2019 s dtype , if possible ) With arguments `*args`.", "question_id": 17179},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "curses.ascii.isdigit(c)", "intent": "Checks for an ASCII decimal digit , ' 0 ' through ' 9 ' . This is equivalent to `c` in string.digits .", "question_id": 1904},
{"snippet": "NNTP.newgroups(date)", "intent": "Send a NEWGROUPS command . The `date` argument should be a datetime.date or datetime.datetime object .", "question_id": 6461},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "numpy.sign(x, /, signature)", "intent": "Returns an element-wise indication of the sign of a number . The sign function returns -1 if `x` < 0 , 0 if x==0 , 1 if x > 0. nan is returned for nan inputs . With arguments `/`, `signature`.", "question_id": 18231},
{"snippet": "linalg.tensorsolve(a, b)", "intent": "Solve the tensor equation `a` x = `b` for x .", "question_id": 19418},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "curses.echo()", "intent": "Enter echo mode .", "question_id": 1931},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "shutil.get_terminal_size(lines))", "intent": "Get the size of the terminal window . With arguments `lines)`.", "question_id": 8371},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "curses.echo()", "intent": "Enter echo mode .", "question_id": 1931},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42128},
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "base_server.serve_forever(poll_interval=0.5)", "intent": "Handle requests until an explicit shutdown ( ) request . Poll for shutdown every `poll_interval` seconds .", "question_id": 8763},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "softplus.prune(t)", "intent": "Computes and returns a pruned version of input tensor `t` according to the pruning rule specified in compute_mask ( ) .", "question_id": 50894},
{"snippet": "ufunc.reduceat(array, indices)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) .", "question_id": 23907},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "distutils.system_info.get_standard_file(fname)", "intent": "Returns a list of files named \u2018 `fname` \u2019 from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ \u2018 HOME \u2019 ] ) 3 ) Local directory", "question_id": 22646},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117},
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "Unpacker.done()", "intent": "Indicates unpack completion .", "question_id": 12289},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223},
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "DataFrameGroupBy.sample(replace=False)", "intent": "Return a random sample of items from each group . With arguments `replace`.", "question_id": 43699},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977},
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223},
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "ufunc.reduceat(array, indices)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) .", "question_id": 23907},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346},
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162},
{"snippet": "numpy.angle(z)", "intent": "Return the angle of the complex argument . With arguments `z`.", "question_id": 19435},
{"snippet": "char.chararray.itemset(*args)", "intent": "Insert scalar into an array ( scalar is cast to array \u2019 s dtype , if possible ) With arguments `*args`.", "question_id": 17179},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "context.get(var)", "intent": "Return the value for `var` if var has the value in the context object .", "question_id": 1655},
{"snippet": "re.ASCII", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7925},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "random.Generator.power(a)", "intent": "Draws samples in [ 0 , 1 ] from `a` power distribution with positive exponent a - 1 .", "question_id": 16090},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473},
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "ufunc.reduceat(array, indices, axis=0, dtype=None)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) . With arguments `dtype`.", "question_id": 23911},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "Tensor.qr(some=True)", "intent": "See torch.qr ( ) With arguments `some`.", "question_id": 50681},
{"snippet": "re.ASCII", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7925},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "torch.nn.functional.relu6(input)", "intent": "Applies the element-wise function ReLU6 ( x ) =min\u2061 ( max\u2061 ( 0 , x ) ,6 ) \\text { ReLU6 } ( x ) = \\min ( \\max ( 0 , x ) , 6 ) ReLU6 ( x ) =min ( max ( 0 , x ) ,6 ) . With arguments `input`.", "question_id": 48552},
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "random.Generator.power(a)", "intent": "Draws samples in [ 0 , 1 ] from `a` power distribution with positive exponent a - 1 .", "question_id": 16090},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "DataFrame.plot.bar(**kwargs)", "intent": "Vertical bar plot . With arguments `**kwargs`.", "question_id": 34110},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "random.Generator.choice(a, size=None, axis=0)", "intent": "Generates `a` random sample from a given array Generate a uniform random sample from np.arange ( 5 ) of `size` 3 : Generate a uniform random sample from a 2-D array along the first `axis` ( the default ) , without replacement :", "question_id": 23924},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "Series.str.rsplit(pat=None)", "intent": "Split strings around given separator/delimiter . The `pat` parameter can be used to split by other characters .", "question_id": 41203},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "ufunc.reduceat(array, indices)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) .", "question_id": 23907},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "ufunc.reduceat(array, indices)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) .", "question_id": 23907},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472},
{"snippet": "text_wrapper.expand_tabs", "intent": "(default: True) If true, then all tab characters in text will be expanded to spaces using the expandtabs() method of text.", "question_id": 10328},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "DataFrame.sort_index(ascending=True)", "intent": "Sort object by labels ( along an `axis` ) . By default , it sorts in `ascending` order , to sort in descending order , use ascending=False", "question_id": 35034},
{"snippet": "bisect.insort_left(a, x, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 866},
{"snippet": "torch.optim.LBFGS(params)", "intent": "Implements L-BFGS algorithm , heavily inspired by minFunc . With arguments `params`.", "question_id": 50136},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657},
{"snippet": "torch.mm(input, mat2, out=None)", "intent": "Performs a matrix multiplication of the matrices `input` and `mat2` . If input is a ( n\u00d7m ) ( n \\times m ) ( n\u00d7m ) tensor , mat2 is a ( m\u00d7p ) ( m \\times p ) ( m\u00d7p ) tensor , `out` will be a ( n\u00d7p ) ( n \\times p ) ( n\u00d7p ) tensor .", "question_id": 51902},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42129},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "urllib.parse.quote_plus(string)", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL .", "question_id": 11713},
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "Series.str.rsplit(pat=None)", "intent": "Split strings around given separator/delimiter . The `pat` parameter can be used to split by other characters .", "question_id": 41203},
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072},
{"snippet": "numpy.column_stack(tup)", "intent": "Stack 1-D arrays as columns into a 2-D array . With arguments `tup`.", "question_id": 20745},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "resource.getpagesize()", "intent": "Returns the number of bytes in a system page .", "question_id": 8096},
{"snippet": "DataFrame.plot.bar(**kwargs)", "intent": "Vertical bar plot . With arguments `**kwargs`.", "question_id": 34110},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "curses.ascii.isdigit(c)", "intent": "Checks for an ASCII decimal digit , ' 0 ' through ' 9 ' . This is equivalent to `c` in string.digits .", "question_id": 1904},
{"snippet": "operator.__iconcat__(a, b)", "intent": "`a` = iconcat ( a , `b` ) is equivalent to a += b for a and b sequences .", "question_id": 6593},
{"snippet": "mapping_proxy_type.get(key)", "intent": "Return the value for `key` if key is in the underlying mapping , else `default` .", "question_id": 11213},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "softplus.prune(t)", "intent": "Computes and returns a pruned version of input tensor `t` according to the pruning rule specified in compute_mask ( ) .", "question_id": 50894},
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474},
{"snippet": "imp.find_module(name)", "intent": "Try to find the module `name` .", "question_id": 4763},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "ufunc.reduceat(array, indices, dtype=None)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) . With arguments `dtype`.", "question_id": 23909},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "random.randint(a, b)", "intent": "Return `a` random integer N such that a < = N < = b. Alias for randrange ( a , b+1 ) . With arguments `b`.", "question_id": 7893},
{"snippet": "ufunc.reduceat(array, indices, dtype=None)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) . With arguments `dtype`.", "question_id": 23909},
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "abs(x)", "intent": "Return the absolute value of a number . With arguments `x`.", "question_id": 3973},
{"snippet": "ssl.SSLSession", "intent": "Session object used by session.", "question_id": 9060},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "chararray.find(sub)", "intent": "For each element , return the lowest index in the string where substring `sub` is found .", "question_id": 16811},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472},
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825},
{"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "email_message.get_content_subtype()", "intent": "Return the message \u2019 s sub-content type .", "question_id": 3257},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "email_message.get_content_subtype()", "intent": "Return the message \u2019 s sub-content type .", "question_id": 3257},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "Timestamp.combine(date, time)", "intent": "Combine `date` , `time` into datetime with same date and time fields .", "question_id": 42281},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "test.support.findfile(filename)", "intent": "Return the path to the file named `filename` .", "question_id": 10151},
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "SimpleXMLRPCRequestHandler.rpc_paths", "intent": "An attribute value that must be a tuple listing valid path portions of the URL for receiving XML-RPC requests.", "question_id": 12739},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "email_message.get_content_subtype()", "intent": "Return the message \u2019 s sub-content type .", "question_id": 3257},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363},
{"snippet": "reversed(seq)", "intent": "Return a reverse iterator . `seq` must be an object which has a __reversed__ ( ) method or supports the sequence protocol ( the __len__ ( ) method and the __getitem__ ( ) method with integer arguments starting at 0 ) .", "question_id": 4099},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "torch.optim.LBFGS(params)", "intent": "Implements L-BFGS algorithm , heavily inspired by minFunc . With arguments `params`.", "question_id": 50136},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "date.ctime()", "intent": "Return a string representing the date , for example date ( 2002 , 12 , 4 ) .ctime ( ) == 'Wed Dec 4 00:00:00 2002 ' .", "question_id": 2244},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "distutils.system_info.get_standard_file(fname)", "intent": "Returns a list of files named \u2018 `fname` \u2019 from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ \u2018 HOME \u2019 ] ) 3 ) Local directory", "question_id": 22646},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "Series.str.rsplit(pat=None)", "intent": "Split strings around given separator/delimiter . The `pat` parameter can be used to split by other characters .", "question_id": 41203},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110},
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472},
{"snippet": "torch.vander(x)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 .", "question_id": 48635},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "typing.Callable", "intent": "Callable type; Callable[[int], str] is a function of (int) -> str.", "question_id": 11336},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008},
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137},
{"snippet": "test_loader.testNamePatterns", "intent": "List of Unix shell-style wildcard test name patterns that test methods have to match to be included in test suites (see -v option).", "question_id": 11506},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "ConfigParser.BOOLEAN_STATES", "intent": "By default when using getboolean(), config parsers consider the following values True: '1', 'yes', 'true', 'on' and the following values False: '0', 'no', 'false', 'off'.", "question_id": 1493},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "test.support.script_helper.spawn_python(*args, **kw, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`, `stdout`, `stderr`.", "question_id": 10306},
{"snippet": "ufunc.reduceat(array, indices)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) .", "question_id": 23907},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "PurePath.match(pattern)", "intent": "Match this path against the provided glob-style `pattern` .", "question_id": 7258},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "pandas.read_csv(filepath_or_buffer, delimiter=None)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `delimiter`.", "question_id": 46036},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "Series.str.rsplit(pat=None)", "intent": "Split strings around given separator/delimiter . The `pat` parameter can be used to split by other characters .", "question_id": 41203},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735},
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "io.StringIO()", "intent": "An in-memory stream for text I/O .", "question_id": 5164},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "distutils.system_info.get_standard_file(fname)", "intent": "Returns a list of files named \u2018 `fname` \u2019 from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ \u2018 HOME \u2019 ] ) 3 ) Local directory", "question_id": 22646},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445},
{"snippet": "pandas.read_csv(filepath_or_buffer, delimiter=None)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `delimiter`.", "question_id": 46036},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "torch.nn.utils.rnn.pad_sequence(sequences, batch_first=False)", "intent": "Pad a list of variable length Tensors with `padding_value` For example , if the input is list of `sequences` with size L x * and if `batch_first` is False , and T x B x * otherwise .", "question_id": 48320},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "urllib.parse.quote_plus(string)", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL .", "question_id": 11713},
{"snippet": "pandas.wide_to_long(df, stubnames, i, j)", "intent": "Wide panel to long format . With `stubnames` [ \u2018 A \u2019 , \u2018 B \u2019 ] , this function expects to find one or more group of columns with format A-suffix1 , A-suffix2 , \u2026 , B-suffix1 , B-suffix2 , \u2026 You specify what you want to call this `suffix` in the resulting long format with `j` ( for example j= \u2019 year \u2019 ) Each row of these wide variables are assumed to be uniquely identified by `i` ( can be a single column name or a list of column names ) With arguments `df`.", "question_id": 47361},
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363},
{"snippet": "crypt.METHOD_CRYPT", "intent": "The traditional method with a 2 character salt and 13 characters of hash.", "question_id": 1672},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "traceback.format_stack(limit=None)", "intent": "A shorthand for format_list ( extract_stack ( `f` , `limit` ) ) .", "question_id": 10789},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "numpy.sin(x, /, signature, where=True)", "intent": "Trigonometric sine , element-wise . It ranges from -1 for \\ ( x=3\\pi `/` 2\\ ) to +1 for \\ ( \\pi / 2.\\ ) The function has zeroes `where` the angle is a multiple of \\ ( \\pi\\ ) . With arguments `x`, `signature`.", "question_id": 18056},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "matlib.repmat(a, m, n)", "intent": "Repeat `a` 0-D to 2-D array or matrix MxN times . With arguments `m`, `n`.", "question_id": 18544},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473},
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899},
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "bytes.islower()", "intent": "Return true if there is at least one lowercase ASCII character in the sequence and no uppercase ASCII characters , false otherwise .", "question_id": 9389},
{"snippet": "DataFrame.merge(right, '_y'), how='inner')", "intent": "Merge DataFrame or named Series objects with a database-style join . Merge DataFrames df1 and df2 with specified left and `right` suffixes appended to any overlapping columns . With arguments `'_y')`, `how`.", "question_id": 33800},
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473},
{"snippet": "distutils.system_info.get_standard_file(fname)", "intent": "Returns a list of files named \u2018 `fname` \u2019 from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ \u2018 HOME \u2019 ] ) 3 ) Local directory", "question_id": 22646},
{"snippet": "importlib.util.source_from_cache(path)", "intent": "Given the `path` to a PEP 3147 file name , return the associated source code file path .", "question_id": 4925},
{"snippet": "torch.svd_lowrank(A, q=6)", "intent": "Return the singular value decomposition ( U , S , V ) of a matrix , batches of matrices , or a sparse matrix AAA such that A\u2248Udiag ( S ) VTA \\approx U diag ( S ) V^TA\u2248Udiag ( S ) VT . With arguments `A`, `q`.", "question_id": 51147},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "email_message.__str__()", "intent": "Equivalent to as_string ( policy=self.policy.clone ( utf8=True ) ) .", "question_id": 3232},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "list(iterable)", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4045},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640},
{"snippet": "ctypes.c_int16", "intent": "Represents the C 16-bit signed int datatype.", "question_id": 1863},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "reversed(seq)", "intent": "Return a reverse iterator . `seq` must be an object which has a __reversed__ ( ) method or supports the sequence protocol ( the __len__ ( ) method and the __getitem__ ( ) method with integer arguments starting at 0 ) .", "question_id": 4099},
{"snippet": "Tensor.div_(value)", "intent": "In-place version of div ( ) With arguments `value`.", "question_id": 48681},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "DataFrame.plot.bar(**kwargs)", "intent": "Vertical bar plot . With arguments `**kwargs`.", "question_id": 34110},
{"snippet": "string.capwords(s)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . With arguments `s`.", "question_id": 9529},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "torch.linalg.solve(A, B)", "intent": "Computes the solution of a square system of linear equations with a unique solution . Letting K\\mathbb { K } K be R\\mathbb { R } R or C\\mathbb { C } C , this function computes the solution X\u2208Kn\u00d7kX \\in \\mathbb { K } ^ { n \\times k } X\u2208Kn\u00d7k of the linear system associated to A\u2208Kn\u00d7n , B\u2208Km\u00d7kA \\in \\mathbb { K } ^ { n \\times n } , `B` \\in \\mathbb { K } ^ { m \\times k } A\u2208Kn\u00d7n , B\u2208Km\u00d7k , which is defined as With arguments `A`.", "question_id": 49781},
{"snippet": "Timedelta.nanoseconds", "intent": "Return the number of nanoseconds (n), where 0 <= n < 1 microsecond.", "question_id": 42135},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42128},
{"snippet": "errno.EUSERS", "intent": "Too many users", "question_id": 3592},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "Series.reset_index(drop=False)", "intent": "Generate a new DataFrame or Series with the index reset . To generate a new Series with the default set `drop` to True .", "question_id": 40315},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "date.ctime()", "intent": "Return a string representing the date , for example date ( 2002 , 12 , 4 ) .ctime ( ) == 'Wed Dec 4 00:00:00 2002 ' .", "question_id": 2244},
{"snippet": "sys.__stderr__", "intent": "These objects contain the original values of stdin, stderr and stdout at the start of the program.", "question_id": 9849},
{"snippet": "filecmp.dircmp(a, b)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . With arguments `b`.", "question_id": 3760},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "Timedelta.nanoseconds", "intent": "Return the number of nanoseconds (n), where 0 <= n < 1 microsecond.", "question_id": 42135},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "torch.optim.LBFGS(params)", "intent": "Implements L-BFGS algorithm , heavily inspired by minFunc . With arguments `params`.", "question_id": 50136},
{"snippet": "pandas.read_csv(filepath_or_buffer, delimiter=None)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `delimiter`.", "question_id": 46036},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "ufunc.reduceat(array, indices, axis=0, dtype=None)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) . With arguments `dtype`.", "question_id": 23911},
{"snippet": "pandas.read_csv(filepath_or_buffer, delimiter=None)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `delimiter`.", "question_id": 46036},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "ma.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 22287},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "test.support.script_helper.make_script(script_dir, script_basename, source, omit_suffix=False)", "intent": "Create script containing `source` in path `script_dir` and `script_basename` . If `omit_suffix` is False , append .py to the name .", "question_id": 10309},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "ma.masked_array.tofile(fid, format='%s')", "intent": "Save a masked array to a file in binary `format` . With arguments `fid`.", "question_id": 19404},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "numpy.sign(x, /, signature)", "intent": "Returns an element-wise indication of the sign of a number . The sign function returns -1 if `x` < 0 , 0 if x==0 , 1 if x > 0. nan is returned for nan inputs . With arguments `/`, `signature`.", "question_id": 18231},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "ctypes.c_int16", "intent": "Represents the C 16-bit signed int datatype.", "question_id": 1863},
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324},
{"snippet": "DataFrame.swaplevel(j=- 1)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35247},
{"snippet": "email_message.get_content_subtype()", "intent": "Return the message \u2019 s sub-content type .", "question_id": 3257},
{"snippet": "matlib.repmat(a, m, n)", "intent": "Repeat `a` 0-D to 2-D array or matrix MxN times . With arguments `m`, `n`.", "question_id": 18544},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "TarInfo.isreg()", "intent": "Same as isfile ( ) .", "question_id": 9993},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899},
{"snippet": "distutils.system_info.get_standard_file(fname)", "intent": "Returns a list of files named \u2018 `fname` \u2019 from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ \u2018 HOME \u2019 ] ) 3 ) Local directory", "question_id": 22646},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "operator.__iconcat__(a, b)", "intent": "`a` = iconcat ( a , `b` ) is equivalent to a += b for a and b sequences .", "question_id": 6593},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "random.Generator.power(a)", "intent": "Draws samples in [ 0 , 1 ] from `a` power distribution with positive exponent a - 1 .", "question_id": 16090},
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`.", "question_id": 66},
{"snippet": "bound_arguments.kwargs", "intent": "A dict of keyword arguments values.", "question_id": 5005},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "os.supports_fd", "intent": "A Set object indicating which functions in the os module permit specifying their path parameter as an open file descriptor.", "question_id": 6949},
{"snippet": "torch.linalg.solve(A, B)", "intent": "Computes the solution of a square system of linear equations with a unique solution . Letting K\\mathbb { K } K be R\\mathbb { R } R or C\\mathbb { C } C , this function computes the solution X\u2208Kn\u00d7kX \\in \\mathbb { K } ^ { n \\times k } X\u2208Kn\u00d7k of the linear system associated to A\u2208Kn\u00d7n , B\u2208Km\u00d7kA \\in \\mathbb { K } ^ { n \\times n } , `B` \\in \\mathbb { K } ^ { m \\times k } A\u2208Kn\u00d7n , B\u2208Km\u00d7k , which is defined as With arguments `A`.", "question_id": 49781},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "errno.EUSERS", "intent": "Too many users", "question_id": 3592},
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982},
{"snippet": "formatter.pop_style(n=1)", "intent": "Pop the last `n` style specifications passed to push_style ( ) .", "question_id": 3834},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "Unpacker.done()", "intent": "Indicates unpack completion .", "question_id": 12289},
{"snippet": "pandas.read_csv(filepath_or_buffer, delimiter=None)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `delimiter`.", "question_id": 46036},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "torch.nn.utils.rnn.pad_sequence(sequences, batch_first=False)", "intent": "Pad a list of variable length Tensors with `padding_value` For example , if the input is list of `sequences` with size L x * and if `batch_first` is False , and T x B x * otherwise .", "question_id": 48320},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "matrix.choose(choices)", "intent": "Use an index array to construct a new array from a set of `choices` .", "question_id": 20105},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "tree_builder.doctype(name, pubid, system)", "intent": "Handles a doctype declaration . `name` is the doctype name . `pubid` is the public identifier . `system` is the system identifier .", "question_id": 12545},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324},
{"snippet": "urllib.parse.unquote(string, encoding='utf-8', errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11726},
{"snippet": "Tensor.cpu()", "intent": "Returns a copy of this object in CPU memory .", "question_id": 53222},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "matlib.repmat(a, m, n)", "intent": "Repeat `a` 0-D to 2-D array or matrix MxN times . With arguments `m`, `n`.", "question_id": 18544},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "pandas.read_csv(filepath_or_buffer, sep=NoDefault.no_default)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `sep`.", "question_id": 46055},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032},
{"snippet": "re.ASCII", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7925},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363},
{"snippet": "re.ASCII", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7925},
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296},
{"snippet": "NNTP.newgroups(date)", "intent": "Send a NEWGROUPS command . The `date` argument should be a datetime.date or datetime.datetime object .", "question_id": 6461},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "shutil.unregister_unpack_format(name)", "intent": "Unregister an unpack format . `name` is the name of the format .", "question_id": 8369},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "distutils.system_info.get_standard_file(fname)", "intent": "Returns a list of files named \u2018 `fname` \u2019 from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ \u2018 HOME \u2019 ] ) 3 ) Local directory", "question_id": 22646},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "re.ASCII", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7925},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "SimpleXMLRPCRequestHandler.rpc_paths", "intent": "An attribute value that must be a tuple listing valid path portions of the URL for receiving XML-RPC requests.", "question_id": 12739},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124},
{"snippet": "io.StringIO()", "intent": "An in-memory stream for text I/O .", "question_id": 5164},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "operator.__iconcat__(a, b)", "intent": "`a` = iconcat ( a , `b` ) is equivalent to a += b for a and b sequences .", "question_id": 6593},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "random.choice(a, replace=True)", "intent": "Generates `a` random sample from a given 1-D array With arguments `replace`.", "question_id": 18794},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "re.IGNORECASE", "intent": "Perform case-insensitive matching; expressions like [A-Z] will also match lowercase letters.", "question_id": 7928},
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223},
{"snippet": "bound_arguments.kwargs", "intent": "A dict of keyword arguments values.", "question_id": 5005},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`.", "question_id": 66},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "operator.delitem(a, b)", "intent": "Remove the value of `a` at index `b` .", "question_id": 6573},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473},
{"snippet": "MultiIndex.swaplevel(j=- 1)", "intent": "Swap level `i` with level `j` .", "question_id": 37738},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "ConfigParser.BOOLEAN_STATES", "intent": "By default when using getboolean(), config parsers consider the following values True: '1', 'yes', 'true', 'on' and the following values False: '0', 'no', 'false', 'off'.", "question_id": 1493},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "Series.str.rsplit(pat=None)", "intent": "Split strings around given separator/delimiter . The `pat` parameter can be used to split by other characters .", "question_id": 41203},
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982},
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072},
{"snippet": "polynomial.hermite.Hermite.integ(k=)", "intent": "Integrate . With arguments `k`.", "question_id": 16294},
{"snippet": "TarInfo.isreg()", "intent": "Same as isfile ( ) .", "question_id": 9993},
{"snippet": "math.log2(x)", "intent": "Return the base-2 logarithm of `x` .", "question_id": 5910},
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162},
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124},
{"snippet": "time.daylight", "intent": "Nonzero if a DST timezone is defined.", "question_id": 10473},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "ufunc.reduceat(array, indices, dtype=None)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) . With arguments `dtype`.", "question_id": 23909},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735},
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "property()", "intent": "Return a property attribute .", "question_id": 4085},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610},
{"snippet": "numpy.info(toplevel='numpy')", "intent": "Get help information for a function , class , or module . With arguments `toplevel`.", "question_id": 22067},
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "Match.string", "intent": "The string passed to match() or search().", "question_id": 8014},
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "xml.etree.ElementTree.Comment(text=None)", "intent": "Comment element factory . `text` is a string containing the comment string .", "question_id": 12435},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "Tensor.clamp(min=None, max=None)", "intent": "See torch.clamp ( ) With arguments `min`, `max`.", "question_id": 51755},
{"snippet": "datetime.ctime()", "intent": "Return a string representing the date and time , for example datetime ( 2002 , 12 , 4 , 20 , 30 , 40 ) .ctime ( ) == 'Wed Dec 4 20:30:40 2002 ' .", "question_id": 2311},
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "winreg.KEY_ENUMERATE_SUB_KEYS", "intent": "Required to enumerate the subkeys of a registry key.", "question_id": 12169},
{"snippet": "torch.vander(x)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 .", "question_id": 48635},
{"snippet": "polynomial.chebyshev.chebpts1(npts)", "intent": "Chebyshev points of the first kind . The Chebyshev points of the first kind are the points cos ( x ) , where x = [ pi * ( k + .5 ) /npts for k in range ( `npts` ) ] .", "question_id": 16906},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "Tensor.put_(index, source)", "intent": "Copies the elements from `source` into the positions specified by `index` .", "question_id": 53398},
{"snippet": "DataFrame.to_csv()", "intent": "Write object to a comma-separated values ( csv ) file .", "question_id": 35291},
{"snippet": "NNTP.newgroups(date)", "intent": "Send a NEWGROUPS command . The `date` argument should be a datetime.date or datetime.datetime object .", "question_id": 6461},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "email_message.get_content_subtype()", "intent": "Return the message \u2019 s sub-content type .", "question_id": 3257},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "linalg.tensorsolve(a, b)", "intent": "Solve the tensor equation `a` x = `b` for x .", "question_id": 19418},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608},
{"snippet": "Series.str.rsplit(pat=None)", "intent": "Split strings around given separator/delimiter . The `pat` parameter can be used to split by other characters .", "question_id": 41203},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472},
{"snippet": "Series.swaplevel(i=- 2)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 41411},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294},
{"snippet": "formatter.pop_style(n=1)", "intent": "Pop the last `n` style specifications passed to push_style ( ) .", "question_id": 3834},
{"snippet": "Series.dt.hour", "intent": "The hours of the datetime.", "question_id": 38772},
{"snippet": "pandas.read_csv(filepath_or_buffer, sep=NoDefault.no_default)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `sep`.", "question_id": 46055},
{"snippet": "torch.vander(x)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 .", "question_id": 48635},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137},
{"snippet": "urllib.parse.urljoin(base, url)", "intent": "Construct a full ( \u201c absolute \u201d ) URL by combining a \u201c `base` URL \u201d ( base ) with another URL ( `url` ) .", "question_id": 11695},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "Series.sort_values(inplace=False)", "intent": "Sort by the values . Sort values `inplace`", "question_id": 40744},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "calendar.itermonthdates(year, month)", "intent": "Return an iterator for the `month` month ( 1\u201312 ) in the `year` year .", "question_id": 912},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42129},
{"snippet": "pandas.read_csv(filepath_or_buffer, delimiter=None)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `delimiter`.", "question_id": 46036},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "polynomial.polynomial.polygrid3d(x, y, z, c)", "intent": "Evaluate a 3-D polynomial on the Cartesian product of `x` , `y` and `z` . where the points ( a , b , `c` ) consist of all triples formed by taking a from x , b from y , and c from z .", "question_id": 22496},
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "char.compare_chararrays(a, b, cmp_op, rstrip)", "intent": "Performs element-wise comparison of two string arrays using the comparison operator specified by `cmp_op` . With arguments `a`, `b`, `rstrip`.", "question_id": 21045},
{"snippet": "urllib.parse.urljoin(base, url)", "intent": "Construct a full ( \u201c absolute \u201d ) URL by combining a \u201c `base` URL \u201d ( base ) with another URL ( `url` ) .", "question_id": 11695},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472},
{"snippet": "ma.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 22287},
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "numpy.angle(z)", "intent": "Return the angle of the complex argument . With arguments `z`.", "question_id": 19435},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "chararray.find(sub)", "intent": "For each element , return the lowest index in the string where substring `sub` is found .", "question_id": 16811},
{"snippet": "test.support.script_helper.make_script(script_dir, script_basename, source, omit_suffix=False)", "intent": "Create script containing `source` in path `script_dir` and `script_basename` . If `omit_suffix` is False , append .py to the name .", "question_id": 10309},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "email_message.__str__()", "intent": "Equivalent to as_string ( policy=self.policy.clone ( utf8=True ) ) .", "question_id": 3232},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "email_message.__str__()", "intent": "Equivalent to as_string ( policy=self.policy.clone ( utf8=True ) ) .", "question_id": 3232},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "reversed(seq)", "intent": "Return a reverse iterator . `seq` must be an object which has a __reversed__ ( ) method or supports the sequence protocol ( the __len__ ( ) method and the __getitem__ ( ) method with integer arguments starting at 0 ) .", "question_id": 4099},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "context.exp(x)", "intent": "Returns e ** `x` .", "question_id": 2530},
{"snippet": "linalg.tensorsolve(a, b)", "intent": "Solve the tensor equation `a` x = `b` for x .", "question_id": 19418},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "ZipInfo.flag_bits", "intent": "ZIP flag bits.", "question_id": 12872},
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "ctypes.c_int16", "intent": "Represents the C 16-bit signed int datatype.", "question_id": 1863},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "email_message.get_content_subtype()", "intent": "Return the message \u2019 s sub-content type .", "question_id": 3257},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "Unpacker.done()", "intent": "Indicates unpack completion .", "question_id": 12289},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008},
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110},
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200},
{"snippet": "Option.choices", "intent": "For options of type \"choice\", the list of strings the user may choose from.", "question_id": 6632},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445},
{"snippet": "Unpacker.done()", "intent": "Indicates unpack completion .", "question_id": 12289},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "DataFrame.swaplevel(j=- 1)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35247},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "numpy.var(a, where=<no value>)", "intent": "Compute the variance along the specified `axis` . Returns the variance of the array elements , `a` measure of the spread of a distribution . The variance is the average of the squared deviations from the mean , i.e. , var = mean ( x ) , `where` x = abs ( a - a.mean ( ) ) * * 2 .", "question_id": 22023},
{"snippet": "torch.vander(x)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 .", "question_id": 48635},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "Unpacker.done()", "intent": "Indicates unpack completion .", "question_id": 12289},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "wsgi_request_handler.handle()", "intent": "Process the HTTP request .", "question_id": 12234},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "os.supports_fd", "intent": "A Set object indicating which functions in the os module permit specifying their path parameter as an open file descriptor.", "question_id": 6949},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "polynomial.polynomial.polygrid3d(x, y, z, c)", "intent": "Evaluate a 3-D polynomial on the Cartesian product of `x` , `y` and `z` . where the points ( a , b , `c` ) consist of all triples formed by taking a from x , b from y , and c from z .", "question_id": 22496},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "ufunc.reduceat(array, indices)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) .", "question_id": 23907},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "DataFrame.swaplevel(i=- 2)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35254},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "abs(x)", "intent": "Return the absolute value of a number . With arguments `x`.", "question_id": 3973},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "Timedelta.nanoseconds", "intent": "Return the number of nanoseconds (n), where 0 <= n < 1 microsecond.", "question_id": 42135},
{"snippet": "char.compare_chararrays(a, b, cmp_op, rstrip)", "intent": "Performs element-wise comparison of two string arrays using the comparison operator specified by `cmp_op` . With arguments `a`, `b`, `rstrip`.", "question_id": 21045},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "Tensor.div_(value)", "intent": "In-place version of div ( ) With arguments `value`.", "question_id": 48681},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "re.ASCII", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7925},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "pandas.api.types.is_categorical(arr)", "intent": "Check whether an array-like is a Categorical instance . With arguments `arr`.", "question_id": 42952},
{"snippet": "torch.lstsq(input, A)", "intent": "Computes the solution to the least squares and least norm problems for a full rank matrix AAA of size ( m\u00d7n ) ( m \\times n ) ( m\u00d7n ) and a matrix BBB of size ( m\u00d7k ) ( m \\times k ) ( m\u00d7k ) . With arguments `input`, `A`.", "question_id": 51237},
{"snippet": "Series.str.rsplit(pat=None)", "intent": "Split strings around given separator/delimiter . The `pat` parameter can be used to split by other characters .", "question_id": 41203},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "operator.__iconcat__(a, b)", "intent": "`a` = iconcat ( a , `b` ) is equivalent to a += b for a and b sequences .", "question_id": 6593},
{"snippet": "torch.linalg.solve(A, B)", "intent": "Computes the solution of a square system of linear equations with a unique solution . Letting K\\mathbb { K } K be R\\mathbb { R } R or C\\mathbb { C } C , this function computes the solution X\u2208Kn\u00d7kX \\in \\mathbb { K } ^ { n \\times k } X\u2208Kn\u00d7k of the linear system associated to A\u2208Kn\u00d7n , B\u2208Km\u00d7kA \\in \\mathbb { K } ^ { n \\times n } , `B` \\in \\mathbb { K } ^ { m \\times k } A\u2208Kn\u00d7n , B\u2208Km\u00d7k , which is defined as With arguments `A`.", "question_id": 49781},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825},
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362},
{"snippet": "numpy.sign(x, /, signature)", "intent": "Returns an element-wise indication of the sign of a number . The sign function returns -1 if `x` < 0 , 0 if x==0 , 1 if x > 0. nan is returned for nan inputs . With arguments `/`, `signature`.", "question_id": 18231},
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "polynomial.polyutils.as_series(alist)", "intent": "Return argument as a list of 1-d arrays . With arguments `alist`.", "question_id": 21617},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42128},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "context.get(var)", "intent": "Return the value for `var` if var has the value in the context object .", "question_id": 1655},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "Unpacker.done()", "intent": "Indicates unpack completion .", "question_id": 12289},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "tixCommand.tix_cget(option)", "intent": "Returns the current value of the configuration `option` given by option .", "question_id": 10582},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "matrix.choose(choices)", "intent": "Use an index array to construct a new array from a set of `choices` .", "question_id": 20105},
{"snippet": "DataFrame.swaplevel(i=- 2)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35254},
{"snippet": "ufunc.reduceat(array, indices, dtype=None)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) . With arguments `dtype`.", "question_id": 23909},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "torch.lstsq(input, A)", "intent": "Computes the solution to the least squares and least norm problems for a full rank matrix AAA of size ( m\u00d7n ) ( m \\times n ) ( m\u00d7n ) and a matrix BBB of size ( m\u00d7k ) ( m \\times k ) ( m\u00d7k ) . With arguments `input`, `A`.", "question_id": 51237},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42128},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "Pattern.search(string, pos)", "intent": "Scan through `string` looking for the first location where this regular expression produces a match , and return a corresponding match object . The optional second parameter `pos` gives an index in the string where the search is to start ; it defaults to 0 .", "question_id": 7971},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "curses.napms(ms)", "intent": "Sleep for `ms` milliseconds .", "question_id": 1956},
{"snippet": "widget.focus(item=None)", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10631},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "DataFrame.swaplevel(j=- 1)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35247},
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "errno.EUSERS", "intent": "Too many users", "question_id": 3592},
{"snippet": "ContentHandler.characters(content)", "intent": "Receive notification of character data . `content` may be a string or bytes instance ; the expat reader module always produces strings .", "question_id": 12579},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "date.ctime()", "intent": "Return a string representing the date , for example date ( 2002 , 12 , 4 ) .ctime ( ) == 'Wed Dec 4 00:00:00 2002 ' .", "question_id": 2244},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435},
{"snippet": "torch.vander(x)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 .", "question_id": 48635},
{"snippet": "time.daylight", "intent": "Nonzero if a DST timezone is defined.", "question_id": 10473},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "email_message.get_content_subtype()", "intent": "Return the message \u2019 s sub-content type .", "question_id": 3257},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "os.WIFEXITED(status)", "intent": "Return True if the process exited using the exit ( 2 ) system call , otherwise return False . With arguments `status`.", "question_id": 7092},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "subprocess.getstatusoutput(cmd)", "intent": "Return ( exitcode , output ) of executing `cmd` in a shell .", "question_id": 9689},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "date.ctime()", "intent": "Return a string representing the date , for example date ( 2002 , 12 , 4 ) .ctime ( ) == 'Wed Dec 4 00:00:00 2002 ' .", "question_id": 2244},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "datetime.second", "intent": "In range(60).", "question_id": 2277},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "ZipInfo.flag_bits", "intent": "ZIP flag bits.", "question_id": 12872},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "AU_read.getmark(id)", "intent": "Raise an error . With arguments `id`.", "question_id": 9720},
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "email_message.__str__()", "intent": "Equivalent to as_string ( policy=self.policy.clone ( utf8=True ) ) .", "question_id": 3232},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "MultiIndex.from_frame(df, names=None)", "intent": "Make a MultiIndex from a DataFrame . Using explicit `names` , instead of the column names With arguments `df`.", "question_id": 37554},
{"snippet": "webbrowser.open_new(url)", "intent": "Open `url` in a new window of the default browser , if possible , otherwise , open url in the only browser window .", "question_id": 12106},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238},
{"snippet": "math.log2(x)", "intent": "Return the base-2 logarithm of `x` .", "question_id": 5910},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "frame.filename", "intent": "Filename (str).", "question_id": 10868},
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "torch.vander(x)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 .", "question_id": 48635},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "curses.echo()", "intent": "Enter echo mode .", "question_id": 1931},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "bz2.compress(data, compresslevel=9)", "intent": "Compress `data` , a bytes-like object . `compresslevel` , if given , must be an integer between 1 and 9 .", "question_id": 907},
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "dict.items()", "intent": "Return a new view of the dictionary \u2019 s items ( ( key , value ) pairs ) .", "question_id": 9484},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "DataFrame.boxplot(**kwargs, figsize=None)", "intent": "Make a box plot from DataFrame columns . With arguments `**kwargs`, `figsize`.", "question_id": 32522},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "ctypes.c_int16", "intent": "Represents the C 16-bit signed int datatype.", "question_id": 1863},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "DataFrame.swaplevel(i=- 2)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35254},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "pandas.tseries.offsets.FY5253Quarter", "intent": "DateOffset increments between business quarter dates for 52-53 week fiscal year (also known as a 4-4-5 calendar).", "question_id": 47021},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "time.fold", "intent": "In [0, 1].", "question_id": 2332},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "ssl.cert_time_to_seconds(cert_time)", "intent": "Return the time in seconds since the Epoch , given the `cert_time` string representing the \u201c notBefore \u201d or \u201c notAfter \u201d date from a certificate in `` % b % d % H : % M : % S % Y % Z '' strptime format ( C locale ) .", "question_id": 8891},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "HTTPHandler.http_open(req)", "intent": "Send an HTTP request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11871},
{"snippet": "operator.add(a, b)", "intent": "Return `a` + `b` , for a and b numbers .", "question_id": 6532},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "globals()", "intent": "Return a dictionary representing the current global symbol table .", "question_id": 4027},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "TarInfo.isreg()", "intent": "Same as isfile ( ) .", "question_id": 9993},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "curses.putp(str)", "intent": "Equivalent to tputs ( `str` , 1 , putchar ) ; emit the value of a specified terminfo capability for the current terminal .", "question_id": 1968},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "bz2.open(filename)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 876},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "numpy.fliplr(m)", "intent": "Reverse the order of elements along axis 1 ( left/right ) . Equivalent to `m` [ : , : :-1 ] or np.flip ( m , axis=1 ) .", "question_id": 22728},
{"snippet": "ma.polyfit(x, y, deg)", "intent": "Least squares polynomial fit . Fit a polynomial p ( `x` ) = p [ 0 ] * x * * `deg` + ... + p [ deg ] of degree deg to points ( x , `y` ) .", "question_id": 16605},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899},
{"snippet": "email_message.get_content_subtype()", "intent": "Return the message \u2019 s sub-content type .", "question_id": 3257},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "ma.outerproduct(a, b)", "intent": "Compute the outer product of two vectors . Given two vectors , `a` = [ a0 , a1 , ... , aM ] and `b` = [ b0 , b1 , ... , bN ] , the outer product [ 1 ] is :", "question_id": 18756},
{"snippet": "time.max", "intent": "The latest representable time, time(23, 59, 59, 999999).", "question_id": 2325},
{"snippet": "ssl.SSLSession", "intent": "Session object used by session.", "question_id": 9060},
{"snippet": "datetime.fold", "intent": "In [0, 1].", "question_id": 2280},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "bisect.insort_left(a, x, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 866},
{"snippet": "re.IGNORECASE", "intent": "Perform case-insensitive matching; expressions like [A-Z] will also match lowercase letters.", "question_id": 7928},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "winreg.KEY_ENUMERATE_SUB_KEYS", "intent": "Required to enumerate the subkeys of a registry key.", "question_id": 12169},
{"snippet": "ufunc.reduceat(array, indices, axis=0, dtype=None)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) . With arguments `dtype`.", "question_id": 23911},
{"snippet": "Match.string", "intent": "The string passed to match() or search().", "question_id": 8014},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "tarfile.is_tarfile(name)", "intent": "Return True if `name` is a tar archive file , that the tarfile module can read .", "question_id": 9901},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "email_message.get_content_subtype()", "intent": "Return the message \u2019 s sub-content type .", "question_id": 3257},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "compileall.compile_path()", "intent": "Byte-compile all the .py files found along sys.path .", "question_id": 1429},
{"snippet": "base_server.serve_forever(poll_interval=0.5)", "intent": "Handle requests until an explicit shutdown ( ) request . Poll for shutdown every `poll_interval` seconds .", "question_id": 8763},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "Timedelta.nanoseconds", "intent": "Return the number of nanoseconds (n), where 0 <= n < 1 microsecond.", "question_id": 42135},
{"snippet": "numpy.column_stack(tup)", "intent": "Stack 1-D arrays as columns into a 2-D array . With arguments `tup`.", "question_id": 20745},
{"snippet": "ma.outerproduct(a, b)", "intent": "Compute the outer product of two vectors . Given two vectors , `a` = [ a0 , a1 , ... , aM ] and `b` = [ b0 , b1 , ... , bN ] , the outer product [ 1 ] is :", "question_id": 18756},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "random.choice(a, replace=True)", "intent": "Generates `a` random sample from a given 1-D array With arguments `replace`.", "question_id": 18794},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "urllib.parse.urljoin(base, url)", "intent": "Construct a full ( \u201c absolute \u201d ) URL by combining a \u201c `base` URL \u201d ( base ) with another URL ( `url` ) .", "question_id": 11695},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42128},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "ufunc.reduceat(array, indices, axis=0, dtype=None)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) . With arguments `dtype`.", "question_id": 23911},
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735},
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`.", "question_id": 66},
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "numpy.poly1d(c_or_r, variable=None)", "intent": "A one-dimensional polynomial class . The `variable` used in the string representation of p can be modified , using the variable parameter : With arguments `c_or_r`.", "question_id": 21433},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "os.supports_fd", "intent": "A Set object indicating which functions in the os module permit specifying their path parameter as an open file descriptor.", "question_id": 6949},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "numpy.sign(x, /, signature)", "intent": "Returns an element-wise indication of the sign of a number . The sign function returns -1 if `x` < 0 , 0 if x==0 , 1 if x > 0. nan is returned for nan inputs . With arguments `/`, `signature`.", "question_id": 18231},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "distutils.system_info.get_standard_file(fname)", "intent": "Returns a list of files named \u2018 `fname` \u2019 from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ \u2018 HOME \u2019 ] ) 3 ) Local directory", "question_id": 22646},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "ma.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 22287},
{"snippet": "torch.vander(x)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 .", "question_id": 48635},
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "Document.getElementsByTagName(tagName)", "intent": "Search for all descendants ( direct children , children \u2019 s children , etc . ) With arguments `tagName`.", "question_id": 12352},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "collections.abc.Coroutine", "intent": "ABC for coroutine compatible classes.", "question_id": 1331},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "dict(**kwarg)", "intent": "Create a new dictionary . With arguments `**kwarg`.", "question_id": 4004},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "email_message.get_content_subtype()", "intent": "Return the message \u2019 s sub-content type .", "question_id": 3257},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110},
{"snippet": "matlib.repmat(a, m, n)", "intent": "Repeat `a` 0-D to 2-D array or matrix MxN times . With arguments `m`, `n`.", "question_id": 18544},
{"snippet": "Timestamp.combine(date, time)", "intent": "Combine `date` , `time` into datetime with same date and time fields .", "question_id": 42281},
{"snippet": "context.logical_invert(x)", "intent": "Invert all the digits in `x` .", "question_id": 2546},
{"snippet": "turtle.backward(distance)", "intent": "Move the turtle backward by `distance` , opposite to the direction the turtle is headed .", "question_id": 10907},
{"snippet": "Index.set_names(names)", "intent": "Set Index or MultiIndex name . Able to set new `names` partially and by `level` .", "question_id": 36959},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "curses.ascii.isdigit(c)", "intent": "Checks for an ASCII decimal digit , ' 0 ' through ' 9 ' . This is equivalent to `c` in string.digits .", "question_id": 1904},
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "Series.reset_index(drop=False)", "intent": "Generate a new DataFrame or Series with the index reset . To generate a new Series with the default set `drop` to True .", "question_id": 40315},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "errno.EL3HLT", "intent": "Level 3 halted", "question_id": 3551},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137},
{"snippet": "char.chararray.itemset(*args)", "intent": "Insert scalar into an array ( scalar is cast to array \u2019 s dtype , if possible ) With arguments `*args`.", "question_id": 17179},
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "ufunc.reduceat(array, indices)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) .", "question_id": 23907},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "py_compile.main()", "intent": "Compile several source files .", "question_id": 7835},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "polynomial.polyutils.as_series(alist)", "intent": "Return argument as a list of 1-d arrays . With arguments `alist`.", "question_id": 21617},
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "datetime.fold", "intent": "In [0, 1].", "question_id": 2280},
{"snippet": "Timestamp.combine(date, time)", "intent": "Combine `date` , `time` into datetime with same date and time fields .", "question_id": 42281},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "traceback.format_stack(limit=None)", "intent": "A shorthand for format_list ( extract_stack ( `f` , `limit` ) ) .", "question_id": 10789},
{"snippet": "email.contentmanager.set_content(msg, <'str'>, disposition=None)", "intent": "Add `headers` and payload to `msg` : If `disposition` is set , use it as the value of the Content-Disposition header . With arguments `<'str'>`.", "question_id": 3042},
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474},
{"snippet": "base_selector.close()", "intent": "Close the selector .", "question_id": 8222},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445},
{"snippet": "string.capwords(s)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . With arguments `s`.", "question_id": 9529},
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "ZipInfo.flag_bits", "intent": "ZIP flag bits.", "question_id": 12872},
{"snippet": "struct.size", "intent": "The calculated size of the struct (and hence of the bytes object produced by the pack() method) corresponding to format.", "question_id": 9566},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "polynomial.polynomial.polygrid3d(x, y, z, c)", "intent": "Evaluate a 3-D polynomial on the Cartesian product of `x` , `y` and `z` . where the points ( a , b , `c` ) consist of all triples formed by taking a from x , b from y , and c from z .", "question_id": 22496},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "char.multiply(a, i)", "intent": "Return ( `a` * `i` ) , that is string multiple concatenation , element-wise .", "question_id": 17318},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "DataFrameGroupBy.sample(replace=False)", "intent": "Return a random sample of items from each group . With arguments `replace`.", "question_id": 43699},
{"snippet": "ufunc.reduceat(array, indices, dtype=None)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) . With arguments `dtype`.", "question_id": 23909},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "polynomial.hermite_e.hermetrim(c, tol=0)", "intent": "Remove \u201c small \u201d \u201c trailing \u201d coefficients from a polynomial . \u201c Small \u201d means \u201c small in absolute value \u201d and is controlled by the parameter `tol` ; \u201c trailing \u201d means highest order coefficient ( s ) , e.g. , in [ 0 , 1 , 1 , 0 , 0 ] ( which represents 0 + x + x * * 2 + 0 * x * * 3 + 0 * x * * 4 ) both the 3-rd and 4-th order coefficients would be \u201c trimmed . \u201d With arguments `c`.", "question_id": 16569},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "base64.encode(input, output)", "intent": "Encode the contents of the binary `input` file and write the resulting base64 encoded data to the `output` file .", "question_id": 750},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "resource.RLIMIT_NPTS", "intent": "The maximum number of pseudo-terminals created by this user id.", "question_id": 8094},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435},
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "linalg.tensorsolve(a, b)", "intent": "Solve the tensor equation `a` x = `b` for x .", "question_id": 19418},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "ssl.cert_time_to_seconds(cert_time)", "intent": "Return the time in seconds since the Epoch , given the `cert_time` string representing the \u201c notBefore \u201d or \u201c notAfter \u201d date from a certificate in `` % b % d % H : % M : % S % Y % Z '' strptime format ( C locale ) .", "question_id": 8891},
{"snippet": "POP3.quit()", "intent": "Signoff : commit changes , unlock mailbox , drop connection .", "question_id": 7615},
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238},
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982},
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "urllib.request.FTPHandler", "intent": "Open FTP URLs.", "question_id": 11812},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "fileinput.hook_compressed(filename, mode)", "intent": "Transparently opens files compressed with gzip and bzip2 ( recognized by the extensions '.gz ' and '.bz2 ' ) using the gzip and bz2 modules . If the `filename` extension is not '.gz ' or '.bz2 ' , the file is opened normally ( ie , using open ( ) without any decompression ) . With arguments `mode`.", "question_id": 3810},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "SimpleXMLRPCRequestHandler.rpc_paths", "intent": "An attribute value that must be a tuple listing valid path portions of the URL for receiving XML-RPC requests.", "question_id": 12739},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "DataFrame.merge(right, '_y'), how='inner')", "intent": "Merge DataFrame or named Series objects with a database-style join . Merge DataFrames df1 and df2 with specified left and `right` suffixes appended to any overlapping columns . With arguments `'_y')`, `how`.", "question_id": 33800},
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223},
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474},
{"snippet": "Index.hasnans", "intent": "Return if I have any nans; enables various perf speedups.", "question_id": 36718},
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "MultiIndex.get_locs(seq)", "intent": "Get location for a sequence of labels . With arguments `seq`.", "question_id": 37625},
{"snippet": "random.RandomState.power(a)", "intent": "Draws samples in [ 0 , 1 ] from `a` power distribution with positive exponent a - 1 .", "question_id": 18887},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953},
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657},
{"snippet": "formatter.pop_style(n=1)", "intent": "Pop the last `n` style specifications passed to push_style ( ) .", "question_id": 3834},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "fraction.from_float(flt)", "intent": "This class method constructs a Fraction representing the exact value of `flt` , which must be a float .", "question_id": 3869},
{"snippet": "NNTP.newgroups(date)", "intent": "Send a NEWGROUPS command . The `date` argument should be a datetime.date or datetime.datetime object .", "question_id": 6461},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "subprocess.check_call(args, shell=False)", "intent": "Run command with arguments . With arguments `args`, `shell`.", "question_id": 9673},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "importlib.util.source_from_cache(path)", "intent": "Given the `path` to a PEP 3147 file name , return the associated source code file path .", "question_id": 4925},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "ssl.cert_time_to_seconds(cert_time)", "intent": "Return the time in seconds since the Epoch , given the `cert_time` string representing the \u201c notBefore \u201d or \u201c notAfter \u201d date from a certificate in `` % b % d % H : % M : % S % Y % Z '' strptime format ( C locale ) .", "question_id": 8891},
{"snippet": "numpy.fromstring(string, count=- 1)", "intent": "A new 1-D array initialized from text data in a `string` . With arguments `count`.", "question_id": 21478},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "os.supports_fd", "intent": "A Set object indicating which functions in the os module permit specifying their path parameter as an open file descriptor.", "question_id": 6949},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "random.Generator.power(a)", "intent": "Draws samples in [ 0 , 1 ] from `a` power distribution with positive exponent a - 1 .", "question_id": 16090},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "random.Generator.power(a)", "intent": "Draws samples in [ 0 , 1 ] from `a` power distribution with positive exponent a - 1 .", "question_id": 16090},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207},
{"snippet": "email_message.__str__()", "intent": "Equivalent to as_string ( policy=self.policy.clone ( utf8=True ) ) .", "question_id": 3232},
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "widget.selection_toggle(*items)", "intent": "Toggle the selection state of each item in items . With arguments `*items`.", "question_id": 10657},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050},
{"snippet": "Series.str.rsplit(pat=None)", "intent": "Split strings around given separator/delimiter . The `pat` parameter can be used to split by other characters .", "question_id": 41203},
{"snippet": "softplus.prune(t)", "intent": "Computes and returns a pruned version of input tensor `t` according to the pruning rule specified in compute_mask ( ) .", "question_id": 50894},
{"snippet": "DataFrame.merge(right, '_y'), how='inner')", "intent": "Merge DataFrame or named Series objects with a database-style join . Merge DataFrames df1 and df2 with specified left and `right` suffixes appended to any overlapping columns . With arguments `'_y')`, `how`.", "question_id": 33800},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "linalg.tensorsolve(a, b)", "intent": "Solve the tensor equation `a` x = `b` for x .", "question_id": 19418},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "linecache.getline(filename, lineno)", "intent": "Get line `lineno` from file named `filename` .", "question_id": 5343},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "DataFrame.sort_index(ascending=True)", "intent": "Sort object by labels ( along an `axis` ) . By default , it sorts in `ascending` order , to sort in descending order , use ascending=False", "question_id": 35034},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "abs(x)", "intent": "Return the absolute value of a number . With arguments `x`.", "question_id": 3973},
{"snippet": "torch.linalg.vector_norm(A, ord=2)", "intent": "Computes a vector norm . If `A` is complex valued , it computes the norm of A.abs ( ) `ord` defines the vector norm that is computed .", "question_id": 49285},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "matlib.repmat(a, m, n)", "intent": "Repeat `a` 0-D to 2-D array or matrix MxN times . With arguments `m`, `n`.", "question_id": 18544},
{"snippet": "py_compile.main()", "intent": "Compile several source files .", "question_id": 7835},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "DataFrame.merge(right, '_y'), how='inner')", "intent": "Merge DataFrame or named Series objects with a database-style join . Merge DataFrames df1 and df2 with specified left and `right` suffixes appended to any overlapping columns . With arguments `'_y')`, `how`.", "question_id": 33800},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "readline.replace_history_item(pos, line)", "intent": "Replace history item specified by its position with `line` . With arguments `pos`.", "question_id": 8033},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "numpy.angle(z)", "intent": "Return the angle of the complex argument . With arguments `z`.", "question_id": 19435},
{"snippet": "torch.nn.PixelShuffle(upscale_factor)", "intent": "Rearranges elements in a tensor of shape ( \u2217 , C\u00d7r2 , H , W ) ( * , C \\times r^2 , H , W ) ( \u2217 , C\u00d7r2 , H , W ) to a tensor of shape ( \u2217 , C , H\u00d7r , W\u00d7r ) ( * , C , H \\times r , W \\times r ) ( \u2217 , C , H\u00d7r , W\u00d7r ) , where r is an upscale factor . With arguments `upscale_factor`.", "question_id": 53402},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435},
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207},
{"snippet": "Series.to_dict()", "intent": "Convert Series to { label - > value } dict or dict-like object .", "question_id": 41486},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "linalg.tensorsolve(a, b)", "intent": "Solve the tensor equation `a` x = `b` for x .", "question_id": 19418},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474},
{"snippet": "DataFrame.sort_index(ascending=True)", "intent": "Sort object by labels ( along an `axis` ) . By default , it sorts in `ascending` order , to sort in descending order , use ascending=False", "question_id": 35034},
{"snippet": "linalg.tensorsolve(a, b)", "intent": "Solve the tensor equation `a` x = `b` for x .", "question_id": 19418},
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072},
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "ufunc.reduceat(array, indices, dtype=None)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) . With arguments `dtype`.", "question_id": 23909},
{"snippet": "subprocess.check_call(args, shell=False)", "intent": "Run command with arguments . With arguments `args`, `shell`.", "question_id": 9673},
{"snippet": "Timedelta.nanoseconds", "intent": "Return the number of nanoseconds (n), where 0 <= n < 1 microsecond.", "question_id": 42135},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "torch.svd_lowrank(A, q=6)", "intent": "Return the singular value decomposition ( U , S , V ) of a matrix , batches of matrices , or a sparse matrix AAA such that A\u2248Udiag ( S ) VTA \\approx U diag ( S ) V^TA\u2248Udiag ( S ) VT . With arguments `A`, `q`.", "question_id": 51147},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "bz2.compress(data, compresslevel=9)", "intent": "Compress `data` , a bytes-like object . `compresslevel` , if given , must be an integer between 1 and 9 .", "question_id": 907},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "pandas.read_csv(filepath_or_buffer, delimiter=None)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `delimiter`.", "question_id": 46036},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "linalg.tensorsolve(a, b)", "intent": "Solve the tensor equation `a` x = `b` for x .", "question_id": 19418},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "datetime.fold", "intent": "In [0, 1].", "question_id": 2280},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "operator.__iconcat__(a, b)", "intent": "`a` = iconcat ( a , `b` ) is equivalent to a += b for a and b sequences .", "question_id": 6593},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "HTTPHandler.http_open(req)", "intent": "Send an HTTP request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11871},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "py_compile.main()", "intent": "Compile several source files .", "question_id": 7835},
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "re.ASCII", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7925},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "Match.string", "intent": "The string passed to match() or search().", "question_id": 8014},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "bisect.insort_left(a, x, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 866},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "NNTP.newgroups(date)", "intent": "Send a NEWGROUPS command . The `date` argument should be a datetime.date or datetime.datetime object .", "question_id": 6461},
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "recarray.searchsorted(v)", "intent": "Find indices where elements of `v` should be inserted in a to maintain order .", "question_id": 18001},
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "traceback.format_stack(limit=None)", "intent": "A shorthand for format_list ( extract_stack ( `f` , `limit` ) ) .", "question_id": 10789},
{"snippet": "re.ASCII", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7925},
{"snippet": "torch.vander(x)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 .", "question_id": 48635},
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "Series.to_csv(sep=',')", "intent": "Write object to a comma-separated values ( csv ) file . With arguments `sep`.", "question_id": 41458},
{"snippet": "context.exp(x)", "intent": "Returns e ** `x` .", "question_id": 2530},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "os.supports_fd", "intent": "A Set object indicating which functions in the os module permit specifying their path parameter as an open file descriptor.", "question_id": 6949},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "typing.Callable", "intent": "Callable type; Callable[[int], str] is a function of (int) -> str.", "question_id": 11336},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "urllib.parse.urljoin(base, url)", "intent": "Construct a full ( \u201c absolute \u201d ) URL by combining a \u201c `base` URL \u201d ( base ) with another URL ( `url` ) .", "question_id": 11695},
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "os.supports_fd", "intent": "A Set object indicating which functions in the os module permit specifying their path parameter as an open file descriptor.", "question_id": 6949},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "DataFrameGroupBy.sample(replace=False)", "intent": "Return a random sample of items from each group . With arguments `replace`.", "question_id": 43699},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610},
{"snippet": "matrix.choose(choices)", "intent": "Use an index array to construct a new array from a set of `choices` .", "question_id": 20105},
{"snippet": "linalg.tensorsolve(a, b)", "intent": "Solve the tensor equation `a` x = `b` for x .", "question_id": 19418},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "formatter.pop_style(n=1)", "intent": "Pop the last `n` style specifications passed to push_style ( ) .", "question_id": 3834},
{"snippet": "formatter.pop_style(n=1)", "intent": "Pop the last `n` style specifications passed to push_style ( ) .", "question_id": 3834},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "numpy.angle(z)", "intent": "Return the angle of the complex argument . With arguments `z`.", "question_id": 19435},
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "linalg.eigvalsh(a, UPLO='L')", "intent": "Compute the eigenvalues of `a` complex Hermitian or real symmetric matrix . With arguments `UPLO`.", "question_id": 17352},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "ufunc.reduceat(array, indices)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) .", "question_id": 23907},
{"snippet": "Pattern.groupindex", "intent": "A dictionary mapping any symbolic group names defined by (?P<id>) to group numbers.", "question_id": 7993},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124},
{"snippet": "urllib.robotparser.RobotFileParser(url='')", "intent": "This class provides methods to read , parse and answer questions about the robots.txt file at `url` .", "question_id": 11908},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this logger .", "question_id": 5577},
{"snippet": "DataSource.exists(path)", "intent": "Test if `path` exists .", "question_id": 20770},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42129},
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "operator.add(a, b)", "intent": "Return `a` + `b` , for a and b numbers .", "question_id": 6532},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "Series.str.rsplit(pat=None)", "intent": "Split strings around given separator/delimiter . The `pat` parameter can be used to split by other characters .", "question_id": 41203},
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296},
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171},
{"snippet": "ufunc.reduceat(array, indices, dtype=None)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) . With arguments `dtype`.", "question_id": 23909},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "matlib.repmat(a, m, n)", "intent": "Repeat `a` 0-D to 2-D array or matrix MxN times . With arguments `m`, `n`.", "question_id": 18544},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472},
{"snippet": "email_message.get_content_subtype()", "intent": "Return the message \u2019 s sub-content type .", "question_id": 3257},
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "numpy.column_stack(tup)", "intent": "Stack 1-D arrays as columns into a 2-D array . With arguments `tup`.", "question_id": 20745},
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032},
{"snippet": "DataSource.exists(path)", "intent": "Test if `path` exists .", "question_id": 20770},
{"snippet": "matlib.repmat(a, m, n)", "intent": "Repeat `a` 0-D to 2-D array or matrix MxN times . With arguments `m`, `n`.", "question_id": 18544},
{"snippet": "TarInfo.isreg()", "intent": "Same as isfile ( ) .", "question_id": 9993},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "formatter.pop_style(n=1)", "intent": "Pop the last `n` style specifications passed to push_style ( ) .", "question_id": 3834},
{"snippet": "writer.send_flowing_data(data)", "intent": "Output character `data` which may be word-wrapped and re-flowed as needed .", "question_id": 3850},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "numpy.tensordot(a, b, axes=2)", "intent": "Compute tensor dot product along specified `axes` . Given two tensors , `a` and `b` , and an array_like object containing two array_like objects , ( a_axes , b_axes ) , sum the products of a \u2019 s and b \u2019 s elements ( components ) over the axes specified by a_axes and b_axes .", "question_id": 16721},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735},
{"snippet": "stat_result.st_ctime", "intent": "Platform dependent:", "question_id": 6931},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473},
{"snippet": "ssl.SSLSession", "intent": "Session object used by session.", "question_id": 9060},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "frame.filename", "intent": "Filename (str).", "question_id": 10868},
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "random.choice(a, replace=True)", "intent": "Generates `a` random sample from a given 1-D array With arguments `replace`.", "question_id": 18794},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472},
{"snippet": "fraction.from_float(flt)", "intent": "This class method constructs a Fraction representing the exact value of `flt` , which must be a float .", "question_id": 3869},
{"snippet": "torch.vander(x)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 .", "question_id": 48635},
{"snippet": "DataFrame.swaplevel(j=- 1)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35247},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "HDFStore.append(key, value, append=True)", "intent": "Append to Table in file . With arguments `key`, `value`, `append`.", "question_id": 36388},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "bz2.compress(data, compresslevel=9)", "intent": "Compress `data` , a bytes-like object . `compresslevel` , if given , must be an integer between 1 and 9 .", "question_id": 907},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "matlib.repmat(a, m, n)", "intent": "Repeat `a` 0-D to 2-D array or matrix MxN times . With arguments `m`, `n`.", "question_id": 18544},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "os.kill(pid, sig)", "intent": "Send signal `sig` to the process `pid` .", "question_id": 7037},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "random.Generator.power(a)", "intent": "Draws samples in [ 0 , 1 ] from `a` power distribution with positive exponent a - 1 .", "question_id": 16090},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "base_server.serve_forever(poll_interval=0.5)", "intent": "Handle requests until an explicit shutdown ( ) request . Poll for shutdown every `poll_interval` seconds .", "question_id": 8763},
{"snippet": "urllib.parse.urljoin(base, url)", "intent": "Construct a full ( \u201c absolute \u201d ) URL by combining a \u201c `base` URL \u201d ( base ) with another URL ( `url` ) .", "question_id": 11695},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "torch.linalg.solve(A, B)", "intent": "Computes the solution of a square system of linear equations with a unique solution . Letting K\\mathbb { K } K be R\\mathbb { R } R or C\\mathbb { C } C , this function computes the solution X\u2208Kn\u00d7kX \\in \\mathbb { K } ^ { n \\times k } X\u2208Kn\u00d7k of the linear system associated to A\u2208Kn\u00d7n , B\u2208Km\u00d7kA \\in \\mathbb { K } ^ { n \\times n } , `B` \\in \\mathbb { K } ^ { m \\times k } A\u2208Kn\u00d7n , B\u2208Km\u00d7k , which is defined as With arguments `A`.", "question_id": 49781},
{"snippet": "operator.add(a, b)", "intent": "Return `a` + `b` , for a and b numbers .", "question_id": 6532},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "distutils.system_info.get_standard_file(fname)", "intent": "Returns a list of files named \u2018 `fname` \u2019 from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ \u2018 HOME \u2019 ] ) 3 ) Local directory", "question_id": 22646},
{"snippet": "distutils.system_info.get_standard_file(fname)", "intent": "Returns a list of files named \u2018 `fname` \u2019 from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ \u2018 HOME \u2019 ] ) 3 ) Local directory", "question_id": 22646},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "DataFrameGroupBy.sample(replace=False)", "intent": "Return a random sample of items from each group . With arguments `replace`.", "question_id": 43699},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "shlex.escapedquotes", "intent": "Characters in quotes that will interpret escape characters defined in escape.", "question_id": 8299},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "DataFrame.hist(**kwargs, grid=True)", "intent": "Make a histogram of the DataFrame \u2019 s columns . With arguments `**kwargs`, `grid`.", "question_id": 33294},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "traceback.format_stack(limit=None)", "intent": "A shorthand for format_list ( extract_stack ( `f` , `limit` ) ) .", "question_id": 10789},
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008},
{"snippet": "random.Generator.power(a)", "intent": "Draws samples in [ 0 , 1 ] from `a` power distribution with positive exponent a - 1 .", "question_id": 16090},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "Series.swaplevel(i=- 2)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 41411},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "Resampler.count()", "intent": "Compute count of group , excluding missing values .", "question_id": 44097},
{"snippet": "subprocess.STDOUT", "intent": "Special value that can be used as the stderr argument to Popen and indicates that standard error should go into the same handle as standard output.", "question_id": 9585},
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "DataFrame.to_csv()", "intent": "Write object to a comma-separated values ( csv ) file .", "question_id": 35291},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "re.ASCII", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7925},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "chararray.rindex(sub)", "intent": "Like rfind , but raises ValueError when the substring `sub` is not found .", "question_id": 17726},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "date.ctime()", "intent": "Return a string representing the date , for example date ( 2002 , 12 , 4 ) .ctime ( ) == 'Wed Dec 4 00:00:00 2002 ' .", "question_id": 2244},
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445},
{"snippet": "imp.find_module(name)", "intent": "Try to find the module `name` .", "question_id": 4763},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "date.ctime()", "intent": "Return a string representing the date , for example date ( 2002 , 12 , 4 ) .ctime ( ) == 'Wed Dec 4 00:00:00 2002 ' .", "question_id": 2244},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445},
{"snippet": "DataFrame.nsmallest(n, columns)", "intent": "Return the first `n` rows ordered by `columns` in ascending order .", "question_id": 33959},
{"snippet": "CookieJar.clear()", "intent": "Clear some cookies .", "question_id": 4496},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346},
{"snippet": "reversed(seq)", "intent": "Return a reverse iterator . `seq` must be an object which has a __reversed__ ( ) method or supports the sequence protocol ( the __len__ ( ) method and the __getitem__ ( ) method with integer arguments starting at 0 ) .", "question_id": 4099},
{"snippet": "numpy.zeros_like(a, shape=None)", "intent": "Return an array of zeros with the same `shape` and type as `a` given array .", "question_id": 24363},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "distutils.system_info.get_standard_file(fname)", "intent": "Returns a list of files named \u2018 `fname` \u2019 from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ \u2018 HOME \u2019 ] ) 3 ) Local directory", "question_id": 22646},
{"snippet": "formatter.pop_style(n=1)", "intent": "Pop the last `n` style specifications passed to push_style ( ) .", "question_id": 3834},
{"snippet": "numpy.info(toplevel='numpy')", "intent": "Get help information for a function , class , or module . With arguments `toplevel`.", "question_id": 22067},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "SSLSocket.verify_client_post_handshake()", "intent": "Requests post-handshake authentication ( PHA ) from a TLS 1.3 client .", "question_id": 8987},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "ufunc.reduceat(array, indices, dtype=None)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) . With arguments `dtype`.", "question_id": 23909},
{"snippet": "bisect.insort_left(a, x, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 866},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "DataFrame.itertuples(name='Pandas')", "intent": "Iterate over DataFrame rows as namedtuples . With the `name` parameter set we set a custom name for the yielded namedtuples :", "question_id": 33465},
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "matlib.repmat(a, m, n)", "intent": "Repeat `a` 0-D to 2-D array or matrix MxN times . With arguments `m`, `n`.", "question_id": 18544},
{"snippet": "Path.home()", "intent": "Return a new path object representing the user \u2019 s home directory ( as returned by os.path.expanduser ( ) with ~ construct ) :", "question_id": 7266},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "Series.swaplevel(i=- 2)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 41411},
{"snippet": "base_server.serve_forever(poll_interval=0.5)", "intent": "Handle requests until an explicit shutdown ( ) request . Poll for shutdown every `poll_interval` seconds .", "question_id": 8763},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42129},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162},
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032},
{"snippet": "numpy.info(toplevel='numpy')", "intent": "Get help information for a function , class , or module . With arguments `toplevel`.", "question_id": 22067},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "globals()", "intent": "Return a dictionary representing the current global symbol table .", "question_id": 4027},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "random.choice(a, replace=True)", "intent": "Generates `a` random sample from a given 1-D array With arguments `replace`.", "question_id": 18794},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "IMAP4.search(charset)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .", "question_id": 4728},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "GroupBy.prod()", "intent": "Compute prod of group values .", "question_id": 43950},
{"snippet": "Series.str.rsplit(pat=None)", "intent": "Split strings around given separator/delimiter . The `pat` parameter can be used to split by other characters .", "question_id": 41203},
{"snippet": "DataFrameGroupBy.sample(replace=False)", "intent": "Return a random sample of items from each group . With arguments `replace`.", "question_id": 43699},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "datetime.ctime()", "intent": "Return a string representing the date and time , for example datetime ( 2002 , 12 , 4 , 20 , 30 , 40 ) .ctime ( ) == 'Wed Dec 4 20:30:40 2002 ' .", "question_id": 2311},
{"snippet": "NNTP.newgroups(date)", "intent": "Send a NEWGROUPS command . The `date` argument should be a datetime.date or datetime.datetime object .", "question_id": 6461},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200},
{"snippet": "lib.format.open_memmap(filename)", "intent": "Open a .npy file as a memory-mapped array . With arguments `filename`.", "question_id": 16591},
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735},
{"snippet": "curses.ascii.isdigit(c)", "intent": "Checks for an ASCII decimal digit , ' 0 ' through ' 9 ' . This is equivalent to `c` in string.digits .", "question_id": 1904},
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "numpy.sign(x, /, signature)", "intent": "Returns an element-wise indication of the sign of a number . The sign function returns -1 if `x` < 0 , 0 if x==0 , 1 if x > 0. nan is returned for nan inputs . With arguments `/`, `signature`.", "question_id": 18231},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "polynomial.chebyshev.chebpts1(npts)", "intent": "Chebyshev points of the first kind . The Chebyshev points of the first kind are the points cos ( x ) , where x = [ pi * ( k + .5 ) /npts for k in range ( `npts` ) ] .", "question_id": 16906},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072},
{"snippet": "ma.outerproduct(a, b)", "intent": "Compute the outer product of two vectors . Given two vectors , `a` = [ a0 , a1 , ... , aM ] and `b` = [ b0 , b1 , ... , bN ] , the outer product [ 1 ] is :", "question_id": 18756},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "curses.ascii.isdigit(c)", "intent": "Checks for an ASCII decimal digit , ' 0 ' through ' 9 ' . This is equivalent to `c` in string.digits .", "question_id": 1904},
{"snippet": "test.support.findfile(filename)", "intent": "Return the path to the file named `filename` .", "question_id": 10151},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42129},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "ma.cov(x)", "intent": "Estimate the covariance matrix . If `x` and `y` have the same shape , a common mask is allocated : if x [ i , j ] is masked , then y [ i , j ] will also be masked .", "question_id": 16259},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "queue_listener.flush()", "intent": "Ensure all logging output has been flushed .", "question_id": 5604},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "io.StringIO()", "intent": "An in-memory stream for text I/O .", "question_id": 5164},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "ZipInfo.flag_bits", "intent": "ZIP flag bits.", "question_id": 12872},
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124},
{"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "char.multiply(a, i)", "intent": "Return ( `a` * `i` ) , that is string multiple concatenation , element-wise .", "question_id": 17318},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "ssl.cert_time_to_seconds(cert_time)", "intent": "Return the time in seconds since the Epoch , given the `cert_time` string representing the \u201c notBefore \u201d or \u201c notAfter \u201d date from a certificate in `` % b % d % H : % M : % S % Y % Z '' strptime format ( C locale ) .", "question_id": 8891},
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982},
{"snippet": "Index.hasnans", "intent": "Return if I have any nans; enables various perf speedups.", "question_id": 36718},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "os.path.lexists(path)", "intent": "Return True if `path` refers to an existing path .", "question_id": 7148},
{"snippet": "ma.outerproduct(a, b)", "intent": "Compute the outer product of two vectors . Given two vectors , `a` = [ a0 , a1 , ... , aM ] and `b` = [ b0 , b1 , ... , bN ] , the outer product [ 1 ] is :", "question_id": 18756},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "bool()", "intent": "Return a Boolean value , i.e .", "question_id": 3979},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982},
{"snippet": "numpy.sin(x, /, signature, where=True)", "intent": "Trigonometric sine , element-wise . It ranges from -1 for \\ ( x=3\\pi `/` 2\\ ) to +1 for \\ ( \\pi / 2.\\ ) The function has zeroes `where` the angle is a multiple of \\ ( \\pi\\ ) . With arguments `x`, `signature`.", "question_id": 18056},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "math.log2(x)", "intent": "Return the base-2 logarithm of `x` .", "question_id": 5910},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "stat.S_IXUSR", "intent": "Owner has execute permission.", "question_id": 9100},
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "HTTPHandler.http_open(req)", "intent": "Send an HTTP request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11871},
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032},
{"snippet": "Series.str.rsplit(pat=None)", "intent": "Split strings around given separator/delimiter . The `pat` parameter can be used to split by other characters .", "question_id": 41203},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "random.choice(a, replace=True)", "intent": "Generates `a` random sample from a given 1-D array With arguments `replace`.", "question_id": 18794},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "widget.xview(*args)", "intent": "Query or modify horizontal position of the treeview . With arguments `*args`.", "question_id": 10670},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "Series.to_dict()", "intent": "Convert Series to { label - > value } dict or dict-like object .", "question_id": 41486},
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "ufunc.reduceat(array, indices)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) .", "question_id": 23907},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "traceback.format_stack(limit=None)", "intent": "A shorthand for format_list ( extract_stack ( `f` , `limit` ) ) .", "question_id": 10789},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "Series.swaplevel(i=- 2)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 41411},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "date.ctime()", "intent": "Return a string representing the date , for example date ( 2002 , 12 , 4 ) .ctime ( ) == 'Wed Dec 4 00:00:00 2002 ' .", "question_id": 2244},
{"snippet": "distutils.system_info.get_standard_file(fname)", "intent": "Returns a list of files named \u2018 `fname` \u2019 from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ \u2018 HOME \u2019 ] ) 3 ) Local directory", "question_id": 22646},
{"snippet": "curses.ascii.isupper(c)", "intent": "Checks for an ASCII uppercase letter . With arguments `c`.", "question_id": 1910},
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141},
{"snippet": "os.supports_fd", "intent": "A Set object indicating which functions in the os module permit specifying their path parameter as an open file descriptor.", "question_id": 6949},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124},
{"snippet": "date.ctime()", "intent": "Return a string representing the date , for example date ( 2002 , 12 , 4 ) .ctime ( ) == 'Wed Dec 4 00:00:00 2002 ' .", "question_id": 2244},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "ssl.SSLSession", "intent": "Session object used by session.", "question_id": 9060},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "context.exp(x)", "intent": "Returns e ** `x` .", "question_id": 2530},
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "linalg.tensorsolve(a, b)", "intent": "Solve the tensor equation `a` x = `b` for x .", "question_id": 19418},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "polynomial.polynomial.polygrid3d(x, y, z, c)", "intent": "Evaluate a 3-D polynomial on the Cartesian product of `x` , `y` and `z` . where the points ( a , b , `c` ) consist of all triples formed by taking a from x , b from y , and c from z .", "question_id": 22496},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "softplus.prune(t)", "intent": "Computes and returns a pruned version of input tensor `t` according to the pruning rule specified in compute_mask ( ) .", "question_id": 50894},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "os.path.lexists(path)", "intent": "Return True if `path` refers to an existing path .", "question_id": 7148},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "math.log2(x)", "intent": "Return the base-2 logarithm of `x` .", "question_id": 5910},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "operator.add(a, b)", "intent": "Return `a` + `b` , for a and b numbers .", "question_id": 6532},
{"snippet": "distutils.system_info.get_standard_file(fname)", "intent": "Returns a list of files named \u2018 `fname` \u2019 from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ \u2018 HOME \u2019 ] ) 3 ) Local directory", "question_id": 22646},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "Document.getElementsByTagName(tagName)", "intent": "Search for all descendants ( direct children , children \u2019 s children , etc . ) With arguments `tagName`.", "question_id": 12352},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "re.ASCII", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7925},
{"snippet": "Match.string", "intent": "The string passed to match() or search().", "question_id": 8014},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "os.path.lexists(path)", "intent": "Return True if `path` refers to an existing path .", "question_id": 7148},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "polynomial.chebyshev.chebpts1(npts)", "intent": "Chebyshev points of the first kind . The Chebyshev points of the first kind are the points cos ( x ) , where x = [ pi * ( k + .5 ) /npts for k in range ( `npts` ) ] .", "question_id": 16906},
{"snippet": "context.exp(x)", "intent": "Returns e ** `x` .", "question_id": 2530},
{"snippet": "numpy.fromstring(string, count=- 1)", "intent": "A new 1-D array initialized from text data in a `string` . With arguments `count`.", "question_id": 21478},
{"snippet": "DataFrame.swaplevel(i=- 2)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35254},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "urllib.parse.urljoin(base, url)", "intent": "Construct a full ( \u201c absolute \u201d ) URL by combining a \u201c `base` URL \u201d ( base ) with another URL ( `url` ) .", "question_id": 11695},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207},
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "dict.items()", "intent": "Return a new view of the dictionary \u2019 s items ( ( key , value ) pairs ) .", "question_id": 9484},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "chararray.find(sub)", "intent": "For each element , return the lowest index in the string where substring `sub` is found .", "question_id": 16811},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "maildir_message.get_info()", "intent": "Return a string containing the \u201c info \u201d for a message .", "question_id": 5821},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "GroupBy.ngroup()", "intent": "Number each group from 0 to the number of groups - 1 .", "question_id": 43894},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "test.support.script_helper.make_script(script_dir, script_basename, source, omit_suffix=False)", "intent": "Create script containing `source` in path `script_dir` and `script_basename` . If `omit_suffix` is False , append .py to the name .", "question_id": 10309},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "bisect.insort_left(a, x, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 866},
{"snippet": "polynomial.chebyshev.chebpts1(npts)", "intent": "Chebyshev points of the first kind . The Chebyshev points of the first kind are the points cos ( x ) , where x = [ pi * ( k + .5 ) /npts for k in range ( `npts` ) ] .", "question_id": 16906},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "shutil.unregister_unpack_format(name)", "intent": "Unregister an unpack format . `name` is the name of the format .", "question_id": 8369},
{"snippet": "distutils.system_info.get_standard_file(fname)", "intent": "Returns a list of files named \u2018 `fname` \u2019 from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ \u2018 HOME \u2019 ] ) 3 ) Local directory", "question_id": 22646},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "Match.string", "intent": "The string passed to match() or search().", "question_id": 8014},
{"snippet": "os.WIFEXITED(status)", "intent": "Return True if the process exited using the exit ( 2 ) system call , otherwise return False . With arguments `status`.", "question_id": 7092},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "pandas.read_csv(filepath_or_buffer, delimiter=None)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `delimiter`.", "question_id": 46036},
{"snippet": "NNTP.newgroups(date)", "intent": "Send a NEWGROUPS command . The `date` argument should be a datetime.date or datetime.datetime object .", "question_id": 6461},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "DataFrame.swaplevel(i=- 2)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35254},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "chararray.find(sub)", "intent": "For each element , return the lowest index in the string where substring `sub` is found .", "question_id": 16811},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "ma.MaskedArray.__setitem__(indx, value)", "intent": "x.__setitem__ ( i , y ) < == > x [ i ] =y If `value` is masked , masks those locations . With arguments `indx`.", "question_id": 20719},
{"snippet": "string.capwords(s)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . With arguments `s`.", "question_id": 9529},
{"snippet": "site.getuserbase()", "intent": "Return the path of the user base directory , USER_BASE .", "question_id": 8410},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "email_message.__str__()", "intent": "Equivalent to as_string ( policy=self.policy.clone ( utf8=True ) ) .", "question_id": 3232},
{"snippet": "char.multiply(a, i)", "intent": "Return ( `a` * `i` ) , that is string multiple concatenation , element-wise .", "question_id": 17318},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982},
{"snippet": "formatter.AbstractFormatter(writer)", "intent": "The standard formatter . With arguments `writer`.", "question_id": 3840},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "Timestamp.combine(date, time)", "intent": "Combine `date` , `time` into datetime with same date and time fields .", "question_id": 42281},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "numpy.sign(x, /, signature)", "intent": "Returns an element-wise indication of the sign of a number . The sign function returns -1 if `x` < 0 , 0 if x==0 , 1 if x > 0. nan is returned for nan inputs . With arguments `/`, `signature`.", "question_id": 18231},
{"snippet": "bisect.insort_left(a, x, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 866},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "binascii.b2a_base64(data)", "intent": "Convert binary `data` to a line of ASCII characters in base64 coding .", "question_id": 824},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "distutils.system_info.get_standard_file(fname)", "intent": "Returns a list of files named \u2018 `fname` \u2019 from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ \u2018 HOME \u2019 ] ) 3 ) Local directory", "question_id": 22646},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "torch.nn.functional.elu(input, alpha=1.0)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `alpha`.", "question_id": 49466},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "email_message.get_content_subtype()", "intent": "Return the message \u2019 s sub-content type .", "question_id": 3257},
{"snippet": "bound_arguments.kwargs", "intent": "A dict of keyword arguments values.", "question_id": 5005},
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124},
{"snippet": "random.Generator.power(a)", "intent": "Draws samples in [ 0 , 1 ] from `a` power distribution with positive exponent a - 1 .", "question_id": 16090},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "date.isoweekday()", "intent": "Return the day of the week as an integer , where Monday is 1 and Sunday is 7 .", "question_id": 2240},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "ctypes.c_int16", "intent": "Represents the C 16-bit signed int datatype.", "question_id": 1863},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "chararray.find(sub)", "intent": "For each element , return the lowest index in the string where substring `sub` is found .", "question_id": 16811},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "linalg.tensorsolve(a, b)", "intent": "Solve the tensor equation `a` x = `b` for x .", "question_id": 19418},
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223},
{"snippet": "re.ASCII", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7925},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141},
{"snippet": "ufunc.reduceat(array, indices, axis=0, dtype=None)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) . With arguments `dtype`.", "question_id": 23911},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "py_compile.main()", "intent": "Compile several source files .", "question_id": 7835},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "math.log2(x)", "intent": "Return the base-2 logarithm of `x` .", "question_id": 5910},
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "AU_read.getmark(id)", "intent": "Raise an error . With arguments `id`.", "question_id": 9720},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "Series.to_dict()", "intent": "Convert Series to { label - > value } dict or dict-like object .", "question_id": 41486},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "bz2.compress(data, compresslevel=9)", "intent": "Compress `data` , a bytes-like object . `compresslevel` , if given , must be an integer between 1 and 9 .", "question_id": 907},
{"snippet": "DataFrame.insert(loc, column, value)", "intent": "Insert `column` into DataFrame at specified location . Notice that pandas uses index alignment in case of `value` from type Series : With arguments `loc`.", "question_id": 33403},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "torch.linalg.solve(A, B)", "intent": "Computes the solution of a square system of linear equations with a unique solution . Letting K\\mathbb { K } K be R\\mathbb { R } R or C\\mathbb { C } C , this function computes the solution X\u2208Kn\u00d7kX \\in \\mathbb { K } ^ { n \\times k } X\u2208Kn\u00d7k of the linear system associated to A\u2208Kn\u00d7n , B\u2208Km\u00d7kA \\in \\mathbb { K } ^ { n \\times n } , `B` \\in \\mathbb { K } ^ { m \\times k } A\u2208Kn\u00d7n , B\u2208Km\u00d7k , which is defined as With arguments `A`.", "question_id": 49781},
{"snippet": "compileall.compile_path()", "intent": "Byte-compile all the .py files found along sys.path .", "question_id": 1429},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "os.rename(src, dst)", "intent": "Rename the file or directory `src` to `dst` .", "question_id": 6892},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "py_compile.main()", "intent": "Compile several source files .", "question_id": 7835},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "distutils.system_info.get_standard_file(fname)", "intent": "Returns a list of files named \u2018 `fname` \u2019 from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ \u2018 HOME \u2019 ] ) 3 ) Local directory", "question_id": 22646},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223},
{"snippet": "Series.reset_index(name=None)", "intent": "Generate a new DataFrame or Series with the index reset . To specify the `name` of the new column use name .", "question_id": 40316},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "ssl.OP_NO_COMPRESSION", "intent": "Disable compression on the SSL channel.", "question_id": 8942},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "datetime.min", "intent": "The earliest representable datetime, datetime(MINYEAR, 1, 1, tzinfo=None).", "question_id": 2269},
{"snippet": "xml.etree.ElementTree.Element(tag, **extra)", "intent": "Element class . `tag` is the element name . With arguments `**extra`.", "question_id": 12477},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "curses.ascii.isdigit(c)", "intent": "Checks for an ASCII decimal digit , ' 0 ' through ' 9 ' . This is equivalent to `c` in string.digits .", "question_id": 1904},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "numpy.exp2(x, /, signature, extobj, casting='same_kind')", "intent": "Calculate 2 * * p for all p in the input array . With arguments `x`, `/`, `signature`, `extobj`, `casting`.", "question_id": 23367},
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "Series.to_dict()", "intent": "Convert Series to { label - > value } dict or dict-like object .", "question_id": 41486},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "numpy.shape(a)", "intent": "Return the shape of an array . With arguments `a`.", "question_id": 22805},
{"snippet": "matlib.repmat(a, m, n)", "intent": "Repeat `a` 0-D to 2-D array or matrix MxN times . With arguments `m`, `n`.", "question_id": 18544},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "numpy.sign(x, /, signature)", "intent": "Returns an element-wise indication of the sign of a number . The sign function returns -1 if `x` < 0 , 0 if x==0 , 1 if x > 0. nan is returned for nan inputs . With arguments `/`, `signature`.", "question_id": 18231},
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "matlib.repmat(a, m, n)", "intent": "Repeat `a` 0-D to 2-D array or matrix MxN times . With arguments `m`, `n`.", "question_id": 18544},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "chararray.find(sub)", "intent": "For each element , return the lowest index in the string where substring `sub` is found .", "question_id": 16811},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "DataSource.exists(path)", "intent": "Test if `path` exists .", "question_id": 20770},
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296},
{"snippet": "email_message.__str__()", "intent": "Equivalent to as_string ( policy=self.policy.clone ( utf8=True ) ) .", "question_id": 3232},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42128},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "filecmp.dircmp(a, b)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . With arguments `b`.", "question_id": 3760},
{"snippet": "char.compare_chararrays(a, b, cmp_op, rstrip)", "intent": "Performs element-wise comparison of two string arrays using the comparison operator specified by `cmp_op` . With arguments `a`, `b`, `rstrip`.", "question_id": 21045},
{"snippet": "NNTP.newgroups(date)", "intent": "Send a NEWGROUPS command . The `date` argument should be a datetime.date or datetime.datetime object .", "question_id": 6461},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`.", "question_id": 66},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "matlib.repmat(a, m, n)", "intent": "Repeat `a` 0-D to 2-D array or matrix MxN times . With arguments `m`, `n`.", "question_id": 18544},
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110},
{"snippet": "MultiIndex.from_frame(df, names=None)", "intent": "Make a MultiIndex from a DataFrame . Using explicit `names` , instead of the column names With arguments `df`.", "question_id": 37554},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032},
{"snippet": "pandas.api.types.is_dict_like(obj)", "intent": "Check if the object is dict-like . With arguments `obj`.", "question_id": 42975},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "random.Generator.power(a)", "intent": "Draws samples in [ 0 , 1 ] from `a` power distribution with positive exponent a - 1 .", "question_id": 16090},
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "urllib.request.FTPHandler", "intent": "Open FTP URLs.", "question_id": 11812},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "Series.to_csv(sep=',')", "intent": "Write object to a comma-separated values ( csv ) file . With arguments `sep`.", "question_id": 41458},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "DataFrame.stack()", "intent": "Stack the prescribed `level` ( s ) from columns to index .", "question_id": 35119},
{"snippet": "Series.str.cat(join='left')", "intent": "Concatenate strings in the Series/Index with given separator . With arguments `join`.", "question_id": 40862},
{"snippet": "polynomial.chebyshev.chebgauss(deg)", "intent": "Gauss-Chebyshev quadrature . These sample points and weights will correctly integrate polynomials of degree \\ ( 2 * `deg` - 1\\ ) or less over the interval \\ ( [ -1 , 1 ] \\ ) with the weight function \\ ( f ( x ) = 1/\\sqrt { 1 - x^2 } \\ ) .", "question_id": 19526},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "torch.quantization.observer.load_observer_state_dict(mod, obs_dict)", "intent": "Given input model and a state_dict containing model observer stats , load the stats back into the model . With arguments `mod`, `obs_dict`.", "question_id": 50214},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "email_message.get_content_subtype()", "intent": "Return the message \u2019 s sub-content type .", "question_id": 3257},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "DataFrame.sort_index(ascending=True)", "intent": "Sort object by labels ( along an `axis` ) . By default , it sorts in `ascending` order , to sort in descending order , use ascending=False", "question_id": 35034},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "operator.delitem(a, b)", "intent": "Remove the value of `a` at index `b` .", "question_id": 6573},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "distutils.system_info.get_standard_file(fname)", "intent": "Returns a list of files named \u2018 `fname` \u2019 from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ \u2018 HOME \u2019 ] ) 3 ) Local directory", "question_id": 22646},
{"snippet": "char.multiply(a, i)", "intent": "Return ( `a` * `i` ) , that is string multiple concatenation , element-wise .", "question_id": 17318},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "urllib.parse.quote_plus(string)", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL .", "question_id": 11713},
{"snippet": "numpy.sign(x, /, signature)", "intent": "Returns an element-wise indication of the sign of a number . The sign function returns -1 if `x` < 0 , 0 if x==0 , 1 if x > 0. nan is returned for nan inputs . With arguments `/`, `signature`.", "question_id": 18231},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "xml.etree.ElementTree.Element(tag, **extra)", "intent": "Element class . `tag` is the element name . With arguments `**extra`.", "question_id": 12477},
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "ufunc.reduceat(array, indices)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) .", "question_id": 23907},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "py_compile.main()", "intent": "Compile several source files .", "question_id": 7835},
{"snippet": "os.supports_fd", "intent": "A Set object indicating which functions in the os module permit specifying their path parameter as an open file descriptor.", "question_id": 6949},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214},
{"snippet": "io.StringIO()", "intent": "An in-memory stream for text I/O .", "question_id": 5164},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "formatter.pop_style(n=1)", "intent": "Pop the last `n` style specifications passed to push_style ( ) .", "question_id": 3834},
{"snippet": "HTTPHandler.http_open(req)", "intent": "Send an HTTP request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11871},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "stat_result.st_ctime", "intent": "Platform dependent:", "question_id": 6931},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640},
{"snippet": "curses.echo()", "intent": "Enter echo mode .", "question_id": 1931},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "shutil.unregister_unpack_format(name)", "intent": "Unregister an unpack format . `name` is the name of the format .", "question_id": 8369},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "Pattern.groupindex", "intent": "A dictionary mapping any symbolic group names defined by (?P<id>) to group numbers.", "question_id": 7993},
{"snippet": "email_message.get_content_subtype()", "intent": "Return the message \u2019 s sub-content type .", "question_id": 3257},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "ufunc.reduceat(array, indices, dtype=None)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) . With arguments `dtype`.", "question_id": 23909},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "Unpacker.done()", "intent": "Indicates unpack completion .", "question_id": 12289},
{"snippet": "torch.nn.utils.rnn.pad_sequence(sequences, batch_first=False)", "intent": "Pad a list of variable length Tensors with `padding_value` For example , if the input is list of `sequences` with size L x * and if `batch_first` is False , and T x B x * otherwise .", "question_id": 48320},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "POP3.noop()", "intent": "Do nothing .", "question_id": 7614},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "email_message.__str__()", "intent": "Equivalent to as_string ( policy=self.policy.clone ( utf8=True ) ) .", "question_id": 3232},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "torch.nn.RReLU(lower=0.125, upper=0.3333333333333333, inplace=False)", "intent": "Applies the randomized leaky rectified liner unit function , element-wise , as described in the paper : where aaa is randomly sampled from uniform distribution U ( `lower` , `upper` ) \\mathcal { U } ( \\text { lower } , \\text { upper } ) U ( lower , upper ) . With arguments `inplace`.", "question_id": 50709},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110},
{"snippet": "SimpleXMLRPCRequestHandler.rpc_paths", "intent": "An attribute value that must be a tuple listing valid path portions of the URL for receiving XML-RPC requests.", "question_id": 12739},
{"snippet": "os.supports_fd", "intent": "A Set object indicating which functions in the os module permit specifying their path parameter as an open file descriptor.", "question_id": 6949},
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`.", "question_id": 66},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "operator.__iconcat__(a, b)", "intent": "`a` = iconcat ( a , `b` ) is equivalent to a += b for a and b sequences .", "question_id": 6593},
{"snippet": "traceback.format_stack(limit=None)", "intent": "A shorthand for format_list ( extract_stack ( `f` , `limit` ) ) .", "question_id": 10789},
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "torch.linalg.lstsq(A, B, driver=None)", "intent": "Computes a solution to the least squares problem of a system of linear equations . For CUDA input , the only valid driver is \u2018 gels \u2019 , which assumes that `A` is full-rank . Letting K\\mathbb { K } K be R\\mathbb { R } R or C\\mathbb { C } C , the least squares problem for a linear system AX=BAX = BAX=B with A\u2208Km\u00d7n , B\u2208Km\u00d7kA \\in \\mathbb { K } ^ { m \\times n } , `B` \\in \\mathbb { K } ^ { m \\times k } A\u2208Km\u00d7n , B\u2208Km\u00d7k is defined as `driver` chooses the LAPACK/MAGMA function that will be used .", "question_id": 51803},
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "turtle.speed()", "intent": "Set the turtle \u2019 s `speed` to an integer value in the range 0..10 .", "question_id": 10934},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "os.fwalk(top='.')", "intent": "This behaves exactly like walk ( ) , except that it yields a 4-tuple ( dirpath , dirnames , filenames , dirfd ) , and it supports `dir_fd` . With arguments `top`.", "question_id": 6984},
{"snippet": "urllib.parse.unquote(string)", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str .", "question_id": 11723},
{"snippet": "io.StringIO()", "intent": "An in-memory stream for text I/O .", "question_id": 5164},
{"snippet": "io.StringIO()", "intent": "An in-memory stream for text I/O .", "question_id": 5164},
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "Series.swaplevel(i=- 2)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 41411},
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223},
{"snippet": "Unpacker.done()", "intent": "Indicates unpack completion .", "question_id": 12289},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "ufunc.reduceat(array, indices, dtype=None)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) . With arguments `dtype`.", "question_id": 23909},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "linalg.tensorsolve(a, b)", "intent": "Solve the tensor equation `a` x = `b` for x .", "question_id": 19418},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "widget.focus(item=None)", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10631},
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640},
{"snippet": "torch.nn.functional.pairwise_distance(x1, x2)", "intent": "See torch.nn.PairwiseDistance for details With arguments `x1`, `x2`.", "question_id": 49063},
{"snippet": "curses.echo()", "intent": "Enter echo mode .", "question_id": 1931},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "urllib.parse.urljoin(base, url)", "intent": "Construct a full ( \u201c absolute \u201d ) URL by combining a \u201c `base` URL \u201d ( base ) with another URL ( `url` ) .", "question_id": 11695},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "pandas.read_excel(io)", "intent": "Read an Excel file into a pandas DataFrame . With arguments `io`.", "question_id": 46064},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "DataFrameGroupBy.sample(replace=False)", "intent": "Return a random sample of items from each group . With arguments `replace`.", "question_id": 43699},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "pandas.read_csv(filepath_or_buffer, sep=NoDefault.no_default)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `sep`.", "question_id": 46055},
{"snippet": "formatter.pop_style(n=1)", "intent": "Pop the last `n` style specifications passed to push_style ( ) .", "question_id": 3834},
{"snippet": "DataFrame.plot.scatter(x, y, **kwargs, c=None)", "intent": "Create a scatter plot with varying marker point size and color . With arguments `x`, `y`, `**kwargs`, `c`.", "question_id": 34224},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141},
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "widget.focus(item=None)", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10631},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "bisect.insort_left(a, x, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 866},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42129},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "filecmp.dircmp(a, b)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . With arguments `b`.", "question_id": 3760},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "os.sysconf(name)", "intent": "Return integer-valued system configuration values . If the configuration value specified by `name` isn \u2019 t defined , -1 is returned .", "question_id": 7119},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "pandas.read_csv(filepath_or_buffer, delimiter=None)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `delimiter`.", "question_id": 46036},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "email_message.__str__()", "intent": "Equivalent to as_string ( policy=self.policy.clone ( utf8=True ) ) .", "question_id": 3232},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "Series.str.cat(join='left')", "intent": "Concatenate strings in the Series/Index with given separator . With arguments `join`.", "question_id": 40862},
{"snippet": "sequence_matcher.ratio()", "intent": "Return a measure of the sequences \u2019 similarity as a float in the range [ 0 , 1 ] .", "question_id": 2687},
{"snippet": "Tensor.div_(value)", "intent": "In-place version of div ( ) With arguments `value`.", "question_id": 48681},
{"snippet": "Tensor.cpu()", "intent": "Returns a copy of this object in CPU memory .", "question_id": 53222},
{"snippet": "email_message.get_content_subtype()", "intent": "Return the message \u2019 s sub-content type .", "question_id": 3257},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "ma.cov(x)", "intent": "Estimate the covariance matrix . If `x` and `y` have the same shape , a common mask is allocated : if x [ i , j ] is masked , then y [ i , j ] will also be masked .", "question_id": 16259},
{"snippet": "DataFrame.swaplevel(j=- 1)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35247},
{"snippet": "DataFrame.plot.bar(**kwargs)", "intent": "Vertical bar plot . With arguments `**kwargs`.", "question_id": 34110},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "operator.__iconcat__(a, b)", "intent": "`a` = iconcat ( a , `b` ) is equivalent to a += b for a and b sequences .", "question_id": 6593},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "numpy.poly1d(c_or_r, variable=None)", "intent": "A one-dimensional polynomial class . The `variable` used in the string representation of p can be modified , using the variable parameter : With arguments `c_or_r`.", "question_id": 21433},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "linalg.tensorsolve(a, b)", "intent": "Solve the tensor equation `a` x = `b` for x .", "question_id": 19418},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "re.ASCII", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7925},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "DataFrame.swaplevel(j=- 1)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35247},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "ssl.cert_time_to_seconds(cert_time)", "intent": "Return the time in seconds since the Epoch , given the `cert_time` string representing the \u201c notBefore \u201d or \u201c notAfter \u201d date from a certificate in `` % b % d % H : % M : % S % Y % Z '' strptime format ( C locale ) .", "question_id": 8891},
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901},
{"snippet": "Timestamp.replace(hour=None)", "intent": "Implements datetime.replace , handles nanoseconds . Replace `year` and the `hour` :", "question_id": 42426},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474},
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901},
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "IMAP4.search(charset)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .", "question_id": 4728},
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "urllib.parse.urljoin(base, url)", "intent": "Construct a full ( \u201c absolute \u201d ) URL by combining a \u201c `base` URL \u201d ( base ) with another URL ( `url` ) .", "question_id": 11695},
{"snippet": "ufunc.reduceat(array, indices)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) .", "question_id": 23907},
{"snippet": "distutils.system_info.get_standard_file(fname)", "intent": "Returns a list of files named \u2018 `fname` \u2019 from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ \u2018 HOME \u2019 ] ) 3 ) Local directory", "question_id": 22646},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "ufunc.reduceat(array, indices, dtype=None)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) . With arguments `dtype`.", "question_id": 23909},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "torch.nn.functional.elu(input, alpha=1.0)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `alpha`.", "question_id": 49466},
{"snippet": "DataFrame.swaplevel(j=- 1)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35247},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "torch.nn.utils.rnn.pad_sequence(sequences, batch_first=False)", "intent": "Pad a list of variable length Tensors with `padding_value` For example , if the input is list of `sequences` with size L x * and if `batch_first` is False , and T x B x * otherwise .", "question_id": 48320},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "ctypes.c_int16", "intent": "Represents the C 16-bit signed int datatype.", "question_id": 1863},
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026},
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473},
{"snippet": "traceback.format_stack(limit=None)", "intent": "A shorthand for format_list ( extract_stack ( `f` , `limit` ) ) .", "question_id": 10789},
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "MultiIndex.get_loc_level(key, level=0)", "intent": "Get location and sliced index for requested label ( s ) /level ( s ) . With arguments `key`, `level`.", "question_id": 37614},
{"snippet": "operator.__iconcat__(a, b)", "intent": "`a` = iconcat ( a , `b` ) is equivalent to a += b for a and b sequences .", "question_id": 6593},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "turtle.speed()", "intent": "Set the turtle \u2019 s `speed` to an integer value in the range 0..10 .", "question_id": 10934},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "Series.str.cat(join='left')", "intent": "Concatenate strings in the Series/Index with given separator . With arguments `join`.", "question_id": 40862},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "errno.EUSERS", "intent": "Too many users", "question_id": 3592},
{"snippet": "numpy.sign(x, /, signature)", "intent": "Returns an element-wise indication of the sign of a number . The sign function returns -1 if `x` < 0 , 0 if x==0 , 1 if x > 0. nan is returned for nan inputs . With arguments `/`, `signature`.", "question_id": 18231},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "Path.home()", "intent": "Return a new path object representing the user \u2019 s home directory ( as returned by os.path.expanduser ( ) with ~ construct ) :", "question_id": 7266},
{"snippet": "pandas.read_csv(filepath_or_buffer, delimiter=None)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `delimiter`.", "question_id": 46036},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "bool()", "intent": "Return a Boolean value , i.e .", "question_id": 3979},
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "subprocess.getstatusoutput(cmd)", "intent": "Return ( exitcode , output ) of executing `cmd` in a shell .", "question_id": 9689},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "datetime.date(year, month, day)", "intent": "All arguments are required . With arguments `year`, `month`, `day`.", "question_id": 2218},
{"snippet": "ConfigParser.BOOLEAN_STATES", "intent": "By default when using getboolean(), config parsers consider the following values True: '1', 'yes', 'true', 'on' and the following values False: '0', 'no', 'false', 'off'.", "question_id": 1493},
{"snippet": "re.ASCII", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7925},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "Queue.get_nowait()", "intent": "Equivalent to get ( False ) .", "question_id": 7858},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "matlib.repmat(a, m, n)", "intent": "Repeat `a` 0-D to 2-D array or matrix MxN times . With arguments `m`, `n`.", "question_id": 18544},
{"snippet": "datetime.month", "intent": "Between 1 and 12 inclusive.", "question_id": 2273},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "torch.nn.functional.pixel_shuffle(input, upscale_factor)", "intent": "Rearranges elements in a tensor of shape ( \u2217 , C\u00d7r2 , H , W ) ( * , C \\times r^2 , H , W ) ( \u2217 , C\u00d7r2 , H , W ) to a tensor of shape ( \u2217 , C , H\u00d7r , W\u00d7r ) ( * , C , H \\times r , W \\times r ) ( \u2217 , C , H\u00d7r , W\u00d7r ) , where r is the `upscale_factor` . With arguments `input`.", "question_id": 51421},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324},
{"snippet": "torch.linalg.solve(A, B)", "intent": "Computes the solution of a square system of linear equations with a unique solution . Letting K\\mathbb { K } K be R\\mathbb { R } R or C\\mathbb { C } C , this function computes the solution X\u2208Kn\u00d7kX \\in \\mathbb { K } ^ { n \\times k } X\u2208Kn\u00d7k of the linear system associated to A\u2208Kn\u00d7n , B\u2208Km\u00d7kA \\in \\mathbb { K } ^ { n \\times n } , `B` \\in \\mathbb { K } ^ { m \\times k } A\u2208Kn\u00d7n , B\u2208Km\u00d7k , which is defined as With arguments `A`.", "question_id": 49781},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "char.compare_chararrays(a, b, cmp_op, rstrip)", "intent": "Performs element-wise comparison of two string arrays using the comparison operator specified by `cmp_op` . With arguments `a`, `b`, `rstrip`.", "question_id": 21045},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42129},
{"snippet": "Series.swaplevel(i=- 2)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 41411},
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "reversed(seq)", "intent": "Return a reverse iterator . `seq` must be an object which has a __reversed__ ( ) method or supports the sequence protocol ( the __len__ ( ) method and the __getitem__ ( ) method with integer arguments starting at 0 ) .", "question_id": 4099},
{"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "Series.swaplevel(i=- 2)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 41411},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "DataSource.exists(path)", "intent": "Test if `path` exists .", "question_id": 20770},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "DataFrameGroupBy.sample(replace=False)", "intent": "Return a random sample of items from each group . With arguments `replace`.", "question_id": 43699},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471},
{"snippet": "IMAP4.fetch(message_set, message_parts)", "intent": "Fetch ( parts of ) messages . `message_parts` should be a string of message part names enclosed within parentheses , eg : `` ( UID BODY [ TEXT ] ) '' . With arguments `message_set`.", "question_id": 4701},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110},
{"snippet": "curses.echo()", "intent": "Enter echo mode .", "question_id": 1931},
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "test.support.TEST_SUPPORT_DIR", "intent": "Set to the top level directory that contains test.support.", "question_id": 10126},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "email_message.get_content_subtype()", "intent": "Return the message \u2019 s sub-content type .", "question_id": 3257},
{"snippet": "math.log2(x)", "intent": "Return the base-2 logarithm of `x` .", "question_id": 5910},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "IMAP4.fetch(message_set, message_parts)", "intent": "Fetch ( parts of ) messages . `message_parts` should be a string of message part names enclosed within parentheses , eg : `` ( UID BODY [ TEXT ] ) '' . With arguments `message_set`.", "question_id": 4701},
{"snippet": "Unpacker.done()", "intent": "Indicates unpack completion .", "question_id": 12289},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "math.log2(x)", "intent": "Return the base-2 logarithm of `x` .", "question_id": 5910},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735},
{"snippet": "fancy_ur_lopener.prompt_user_passwd(host, realm)", "intent": "Return information needed to authenticate the user at the given `host` in the specified security `realm` .", "question_id": 11906},
{"snippet": "operator.__iconcat__(a, b)", "intent": "`a` = iconcat ( a , `b` ) is equivalent to a += b for a and b sequences .", "question_id": 6593},
{"snippet": "date.ctime()", "intent": "Return a string representing the date , for example date ( 2002 , 12 , 4 ) .ctime ( ) == 'Wed Dec 4 00:00:00 2002 ' .", "question_id": 2244},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "polynomial.polyutils.mapdomain(x, old, new)", "intent": "Apply linear map to input points . The linear map offset + scale * `x` that maps the domain `old` to the domain `new` is applied to the points x .", "question_id": 22969},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "DataFrameGroupBy.sample(replace=False)", "intent": "Return a random sample of items from each group . With arguments `replace`.", "question_id": 43699},
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "random.choice(a, replace=True)", "intent": "Generates `a` random sample from a given 1-D array With arguments `replace`.", "question_id": 18794},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "DataFrame.swaplevel(j=- 1)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35247},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "operator.add(a, b)", "intent": "Return `a` + `b` , for a and b numbers .", "question_id": 6532},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "ufunc.reduceat(array, indices, axis=0, dtype=None)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) . With arguments `dtype`.", "question_id": 23911},
{"snippet": "formatter.pop_style(n=1)", "intent": "Pop the last `n` style specifications passed to push_style ( ) .", "question_id": 3834},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "formatter.pop_style(n=1)", "intent": "Pop the last `n` style specifications passed to push_style ( ) .", "question_id": 3834},
{"snippet": "pandas.read_csv(filepath_or_buffer, delimiter=None)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `delimiter`.", "question_id": 46036},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223},
{"snippet": "os.supports_fd", "intent": "A Set object indicating which functions in the os module permit specifying their path parameter as an open file descriptor.", "question_id": 6949},
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42129},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "imp.find_module(name)", "intent": "Try to find the module `name` .", "question_id": 4763},
{"snippet": "list(iterable)", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4045},
{"snippet": "importlib.util.source_from_cache(path)", "intent": "Given the `path` to a PEP 3147 file name , return the associated source code file path .", "question_id": 4925},
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032},
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324},
{"snippet": "Tensor.div_(value)", "intent": "In-place version of div ( ) With arguments `value`.", "question_id": 48681},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "os.path.lexists(path)", "intent": "Return True if `path` refers to an existing path .", "question_id": 7148},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "distutils.system_info.get_standard_file(fname)", "intent": "Returns a list of files named \u2018 `fname` \u2019 from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ \u2018 HOME \u2019 ] ) 3 ) Local directory", "question_id": 22646},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "TarInfo.isreg()", "intent": "Same as isfile ( ) .", "question_id": 9993},
{"snippet": "email_message.__str__()", "intent": "Equivalent to as_string ( policy=self.policy.clone ( utf8=True ) ) .", "question_id": 3232},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42129},
{"snippet": "wsgi_request_handler.handle()", "intent": "Process the HTTP request .", "question_id": 12234},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "ufunc.reduceat(array, indices)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) .", "question_id": 23907},
{"snippet": "i_pv4_address.version", "intent": "The appropriate version number: 4 for IPv4, 6 for IPv6.", "question_id": 5175},
{"snippet": "Unpacker.done()", "intent": "Indicates unpack completion .", "question_id": 12289},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "globals()", "intent": "Return a dictionary representing the current global symbol table .", "question_id": 4027},
{"snippet": "imp.find_module(name)", "intent": "Try to find the module `name` .", "question_id": 4763},
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445},
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "traceback.format_stack(limit=None)", "intent": "A shorthand for format_list ( extract_stack ( `f` , `limit` ) ) .", "question_id": 10789},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472},
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162},
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "traceback.format_stack(limit=None)", "intent": "A shorthand for format_list ( extract_stack ( `f` , `limit` ) ) .", "question_id": 10789},
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472},
{"snippet": "pandas.read_csv(filepath_or_buffer, delimiter=None)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `delimiter`.", "question_id": 46036},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "curses.echo()", "intent": "Enter echo mode .", "question_id": 1931},
{"snippet": "random.bytes(length)", "intent": "Return random bytes . With arguments `length`.", "question_id": 20805},
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "random.Generator.power(a)", "intent": "Draws samples in [ 0 , 1 ] from `a` power distribution with positive exponent a - 1 .", "question_id": 16090},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "simple_http_request_handler.do_HEAD()", "intent": "This method serves the 'HEAD ' request type : it sends the headers it would send for the equivalent GET request .", "question_id": 4664},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "numpy.sign(x, /, signature)", "intent": "Returns an element-wise indication of the sign of a number . The sign function returns -1 if `x` < 0 , 0 if x==0 , 1 if x > 0. nan is returned for nan inputs . With arguments `/`, `signature`.", "question_id": 18231},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "ufunc.reduceat(array, indices, axis=0, dtype=None)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) . With arguments `dtype`.", "question_id": 23911},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899},
{"snippet": "torch.nn.utils.rnn.pad_sequence(sequences, batch_first=False)", "intent": "Pad a list of variable length Tensors with `padding_value` For example , if the input is list of `sequences` with size L x * and if `batch_first` is False , and T x B x * otherwise .", "question_id": 48320},
{"snippet": "torch.vander(x)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 .", "question_id": 48635},
{"snippet": "ssl.cert_time_to_seconds(cert_time)", "intent": "Return the time in seconds since the Epoch , given the `cert_time` string representing the \u201c notBefore \u201d or \u201c notAfter \u201d date from a certificate in `` % b % d % H : % M : % S % Y % Z '' strptime format ( C locale ) .", "question_id": 8891},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "DataFrame.reset_index(level=None)", "intent": "Reset the index , or a `level` of it .", "question_id": 34634},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "linalg.tensorsolve(a, b)", "intent": "Solve the tensor equation `a` x = `b` for x .", "question_id": 19418},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "DataFrame.sort_index(ascending=True)", "intent": "Sort object by labels ( along an `axis` ) . By default , it sorts in `ascending` order , to sort in descending order , use ascending=False", "question_id": 35034},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "msilib.CreateRecord(count)", "intent": "Return a new record object by calling MSICreateRecord ( ) . `count` is the number of fields of the record .", "question_id": 6061},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "py_compile.main()", "intent": "Compile several source files .", "question_id": 7835},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "torch.nn.TripletMarginLoss()", "intent": "Creates a criterion that measures the triplet loss given an input tensors x1x1x1 , x2x2x2 , x3x3x3 and a `margin` with a value greater than 000 .", "question_id": 51402},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "numpy.column_stack(tup)", "intent": "Stack 1-D arrays as columns into a 2-D array . With arguments `tup`.", "question_id": 20745},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "operator.__iconcat__(a, b)", "intent": "`a` = iconcat ( a , `b` ) is equivalent to a += b for a and b sequences .", "question_id": 6593},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "polynomial.chebyshev.chebpts1(npts)", "intent": "Chebyshev points of the first kind . The Chebyshev points of the first kind are the points cos ( x ) , where x = [ pi * ( k + .5 ) /npts for k in range ( `npts` ) ] .", "question_id": 16906},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "urllib.parse.urljoin(base, url)", "intent": "Construct a full ( \u201c absolute \u201d ) URL by combining a \u201c `base` URL \u201d ( base ) with another URL ( `url` ) .", "question_id": 11695},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "TarInfo.uname", "intent": "User name.", "question_id": 9989},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "smtp_channel.received_lines", "intent": "Holds a list of the line strings (decoded using UTF-8) received from the client.", "question_id": 8440},
{"snippet": "random.choice(a, size=None)", "intent": "Generates `a` random sample from a given 1-D array Generate a uniform random sample from np.arange ( 5 ) of `size` 3 :", "question_id": 18793},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "linalg.tensorsolve(a, b)", "intent": "Solve the tensor equation `a` x = `b` for x .", "question_id": 19418},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "matlib.repmat(a, m, n)", "intent": "Repeat `a` 0-D to 2-D array or matrix MxN times . With arguments `m`, `n`.", "question_id": 18544},
{"snippet": "torch.nn.utils.rnn.pad_sequence(sequences, batch_first=False)", "intent": "Pad a list of variable length Tensors with `padding_value` For example , if the input is list of `sequences` with size L x * and if `batch_first` is False , and T x B x * otherwise .", "question_id": 48320},
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "test.support.TEST_SUPPORT_DIR", "intent": "Set to the top level directory that contains test.support.", "question_id": 10126},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "os.path.lexists(path)", "intent": "Return True if `path` refers to an existing path .", "question_id": 7148},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "ctypes.c_int16", "intent": "Represents the C 16-bit signed int datatype.", "question_id": 1863},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "xml.etree.ElementTree.Comment(text=None)", "intent": "Comment element factory . `text` is a string containing the comment string .", "question_id": 12435},
{"snippet": "pandas.read_csv(filepath_or_buffer, delimiter=None)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `delimiter`.", "question_id": 46036},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "ctypes.c_int16", "intent": "Represents the C 16-bit signed int datatype.", "question_id": 1863},
{"snippet": "PurePath.match(pattern)", "intent": "Match this path against the provided glob-style `pattern` .", "question_id": 7258},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "Series.str.cat(join='left')", "intent": "Concatenate strings in the Series/Index with given separator . With arguments `join`.", "question_id": 40862},
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247},
{"snippet": "site.getuserbase()", "intent": "Return the path of the user base directory , USER_BASE .", "question_id": 8410},
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238},
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825},
{"snippet": "shutil.unregister_unpack_format(name)", "intent": "Unregister an unpack format . `name` is the name of the format .", "question_id": 8369},
{"snippet": "numpy.histogramdd(sample, bins=10, range=None)", "intent": "Compute the multidimensional histogram of some data . With arguments `sample`, `bins`, `range`.", "question_id": 20899},
{"snippet": "Series.str.rsplit(pat=None)", "intent": "Split strings around given separator/delimiter . The `pat` parameter can be used to split by other characters .", "question_id": 41203},
{"snippet": "os.fwalk(top='.')", "intent": "This behaves exactly like walk ( ) , except that it yields a 4-tuple ( dirpath , dirnames , filenames , dirfd ) , and it supports `dir_fd` . With arguments `top`.", "question_id": 6984},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "numpy.angle(z)", "intent": "Return the angle of the complex argument . With arguments `z`.", "question_id": 19435},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "urllib.parse.urljoin(base, url)", "intent": "Construct a full ( \u201c absolute \u201d ) URL by combining a \u201c `base` URL \u201d ( base ) with another URL ( `url` ) .", "question_id": 11695},
{"snippet": "numpy.sin(x, /, signature, where=True)", "intent": "Trigonometric sine , element-wise . It ranges from -1 for \\ ( x=3\\pi `/` 2\\ ) to +1 for \\ ( \\pi / 2.\\ ) The function has zeroes `where` the angle is a multiple of \\ ( \\pi\\ ) . With arguments `x`, `signature`.", "question_id": 18056},
{"snippet": "datetime.max", "intent": "The latest representable datetime, datetime(MAXYEAR, 12, 31, 23, 59, 59, 999999, tzinfo=None).", "question_id": 2270},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "Series.reset_index(drop=False)", "intent": "Generate a new DataFrame or Series with the index reset . To generate a new Series with the default set `drop` to True .", "question_id": 40315},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "mailbox.NoSuchMailboxError", "intent": "Raised when a mailbox is expected but is not found, such as when instantiating a Mailbox subclass with a path that does not exist (and with the create parameter set to False), or when opening a folder that does not exist.", "question_id": 5857},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "Unpacker.done()", "intent": "Indicates unpack completion .", "question_id": 12289},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "Timestamp.replace(hour=None)", "intent": "Implements datetime.replace , handles nanoseconds . Replace `year` and the `hour` :", "question_id": 42426},
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324},
{"snippet": "Series.str.rsplit(pat=None)", "intent": "Split strings around given separator/delimiter . The `pat` parameter can be used to split by other characters .", "question_id": 41203},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "xml.etree.ElementTree.Comment(text=None)", "intent": "Comment element factory . `text` is a string containing the comment string .", "question_id": 12435},
{"snippet": "Series.str.rsplit(pat=None)", "intent": "Split strings around given separator/delimiter . The `pat` parameter can be used to split by other characters .", "question_id": 41203},
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445},
{"snippet": "ufunc.reduceat(array, indices)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) .", "question_id": 23907},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "email_message.__str__()", "intent": "Equivalent to as_string ( policy=self.policy.clone ( utf8=True ) ) .", "question_id": 3232},
{"snippet": "Morsel.value", "intent": "The value of the cookie.", "question_id": 4596},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141},
{"snippet": "string.capwords(s)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . With arguments `s`.", "question_id": 9529},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "test.support.script_helper.spawn_python(*args, **kw, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`, `stdout`, `stderr`.", "question_id": 10306},
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901},
{"snippet": "pandas.read_csv(filepath_or_buffer, delimiter=None)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `delimiter`.", "question_id": 46036},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "Unpacker.done()", "intent": "Indicates unpack completion .", "question_id": 12289},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901},
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825},
{"snippet": "Index.sort_values(ascending=True, key=None)", "intent": "Return a sorted copy of the index . Sort values in `ascending` order ( default behavior ) . With arguments `key`.", "question_id": 37058},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "polynomial.legendre.Legendre.linspace(n=100, domain=None)", "intent": "Return x , y values at equally spaced points in `domain` . Returns the x , y values at `n` linearly spaced points across the domain .", "question_id": 16680},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "Unpacker.done()", "intent": "Indicates unpack completion .", "question_id": 12289},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "DataFrame.plot.bar(**kwargs)", "intent": "Vertical bar plot . With arguments `**kwargs`.", "question_id": 34110},
{"snippet": "errno.EUSERS", "intent": "Too many users", "question_id": 3592},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "reversed(seq)", "intent": "Return a reverse iterator . `seq` must be an object which has a __reversed__ ( ) method or supports the sequence protocol ( the __len__ ( ) method and the __getitem__ ( ) method with integer arguments starting at 0 ) .", "question_id": 4099},
{"snippet": "Series.str.rsplit(pat=None)", "intent": "Split strings around given separator/delimiter . The `pat` parameter can be used to split by other characters .", "question_id": 41203},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "email_message.__str__()", "intent": "Equivalent to as_string ( policy=self.policy.clone ( utf8=True ) ) .", "question_id": 3232},
{"snippet": "date.ctime()", "intent": "Return a string representing the date , for example date ( 2002 , 12 , 4 ) .ctime ( ) == 'Wed Dec 4 00:00:00 2002 ' .", "question_id": 2244},
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474},
{"snippet": "ma.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 22287},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "Unpacker.done()", "intent": "Indicates unpack completion .", "question_id": 12289},
{"snippet": "distutils.system_info.get_standard_file(fname)", "intent": "Returns a list of files named \u2018 `fname` \u2019 from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ \u2018 HOME \u2019 ] ) 3 ) Local directory", "question_id": 22646},
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "Styler.format(decimal='.')", "intent": "Format the text display value of cells . With arguments `decimal`.", "question_id": 45064},
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "torch.linalg.solve(A, B)", "intent": "Computes the solution of a square system of linear equations with a unique solution . Letting K\\mathbb { K } K be R\\mathbb { R } R or C\\mathbb { C } C , this function computes the solution X\u2208Kn\u00d7kX \\in \\mathbb { K } ^ { n \\times k } X\u2208Kn\u00d7k of the linear system associated to A\u2208Kn\u00d7n , B\u2208Km\u00d7kA \\in \\mathbb { K } ^ { n \\times n } , `B` \\in \\mathbb { K } ^ { m \\times k } A\u2208Kn\u00d7n , B\u2208Km\u00d7k , which is defined as With arguments `A`.", "question_id": 49781},
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294},
{"snippet": "inspect.getmembers(object)", "intent": "Return all the members of an `object` in a list of ( name , value ) pairs sorted by name .", "question_id": 4946},
{"snippet": "DataFrame.to_csv()", "intent": "Write object to a comma-separated values ( csv ) file .", "question_id": 35291},
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "Tensor.tril_(k=0)", "intent": "In-place version of tril ( ) With arguments `k`.", "question_id": 51997},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "smtp_channel.received_lines", "intent": "Holds a list of the line strings (decoded using UTF-8) received from the client.", "question_id": 8440},
{"snippet": "MultiIndex.get_locs(seq)", "intent": "Get location for a sequence of labels . With arguments `seq`.", "question_id": 37625},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "email_message.__str__()", "intent": "Equivalent to as_string ( policy=self.policy.clone ( utf8=True ) ) .", "question_id": 3232},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "Series.swaplevel(i=- 2)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 41411},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "Series.swaplevel(i=- 2)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 41411},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111},
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "torch.linalg.solve(A, B)", "intent": "Computes the solution of a square system of linear equations with a unique solution . Letting K\\mathbb { K } K be R\\mathbb { R } R or C\\mathbb { C } C , this function computes the solution X\u2208Kn\u00d7kX \\in \\mathbb { K } ^ { n \\times k } X\u2208Kn\u00d7k of the linear system associated to A\u2208Kn\u00d7n , B\u2208Km\u00d7kA \\in \\mathbb { K } ^ { n \\times n } , `B` \\in \\mathbb { K } ^ { m \\times k } A\u2208Kn\u00d7n , B\u2208Km\u00d7k , which is defined as With arguments `A`.", "question_id": 49781},
{"snippet": "email_message.__str__()", "intent": "Equivalent to as_string ( policy=self.policy.clone ( utf8=True ) ) .", "question_id": 3232},
{"snippet": "datetime.second", "intent": "In range(60).", "question_id": 2277},
{"snippet": "torch.nn.utils.rnn.pad_sequence(sequences, batch_first=False)", "intent": "Pad a list of variable length Tensors with `padding_value` For example , if the input is list of `sequences` with size L x * and if `batch_first` is False , and T x B x * otherwise .", "question_id": 48320},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "email_message.get_content_subtype()", "intent": "Return the message \u2019 s sub-content type .", "question_id": 3257},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474},
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "Series.to_dict()", "intent": "Convert Series to { label - > value } dict or dict-like object .", "question_id": 41486},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "IMAP4.search(charset)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .", "question_id": 4728},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473},
{"snippet": "py_compile.main()", "intent": "Compile several source files .", "question_id": 7835},
{"snippet": "curses.ascii.isdigit(c)", "intent": "Checks for an ASCII decimal digit , ' 0 ' through ' 9 ' . This is equivalent to `c` in string.digits .", "question_id": 1904},
{"snippet": "Styler.format(escape=None)", "intent": "Format the text display value of cells . Using a formatter with HTML `escape` and na_rep .", "question_id": 45086},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "locale.ALT_DIGITS", "intent": "Get a representation of up to 100 values used to represent the values 0 to 99.", "question_id": 5372},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "Timestamp.combine(date, time)", "intent": "Combine `date` , `time` into datetime with same date and time fields .", "question_id": 42281},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "test.support.script_helper.make_script(script_dir, script_basename, source, omit_suffix=False)", "intent": "Create script containing `source` in path `script_dir` and `script_basename` . If `omit_suffix` is False , append .py to the name .", "question_id": 10309},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "datetime.ctime()", "intent": "Return a string representing the date and time , for example datetime ( 2002 , 12 , 4 , 20 , 30 , 40 ) .ctime ( ) == 'Wed Dec 4 20:30:40 2002 ' .", "question_id": 2311},
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200},
{"snippet": "pandas.Grouper(*args, **kwargs)", "intent": "A Grouper allows the user to specify a groupby instruction for an object . With arguments `*args`, `**kwargs`.", "question_id": 36371},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "winreg.KEY_ENUMERATE_SUB_KEYS", "intent": "Required to enumerate the subkeys of a registry key.", "question_id": 12169},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207},
{"snippet": "os.supports_fd", "intent": "A Set object indicating which functions in the os module permit specifying their path parameter as an open file descriptor.", "question_id": 6949},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "torch.nn.utils.rnn.pad_sequence(sequences)", "intent": "Pad a list of variable length Tensors with `padding_value` For example , if the input is list of `sequences` with size L x * and if `batch_first` is False , and T x B x * otherwise .", "question_id": 48319},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "tree_builder.doctype(name, pubid, system)", "intent": "Handles a doctype declaration . `name` is the doctype name . `pubid` is the public identifier . `system` is the system identifier .", "question_id": 12545},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "compileall.compile_path()", "intent": "Byte-compile all the .py files found along sys.path .", "question_id": 1429},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "imp.find_module(name)", "intent": "Try to find the module `name` .", "question_id": 4763},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "NNTP.newgroups(date)", "intent": "Send a NEWGROUPS command . The `date` argument should be a datetime.date or datetime.datetime object .", "question_id": 6461},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "globals()", "intent": "Return a dictionary representing the current global symbol table .", "question_id": 4027},
{"snippet": "base_server.serve_forever(poll_interval=0.5)", "intent": "Handle requests until an explicit shutdown ( ) request . Poll for shutdown every `poll_interval` seconds .", "question_id": 8763},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "curses.napms(ms)", "intent": "Sleep for `ms` milliseconds .", "question_id": 1956},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "date.ctime()", "intent": "Return a string representing the date , for example date ( 2002 , 12 , 4 ) .ctime ( ) == 'Wed Dec 4 00:00:00 2002 ' .", "question_id": 2244},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "date.ctime()", "intent": "Return a string representing the date , for example date ( 2002 , 12 , 4 ) .ctime ( ) == 'Wed Dec 4 00:00:00 2002 ' .", "question_id": 2244},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "os.path.splitext(path)", "intent": "Split the pathname `path` into a pair ( root , ext ) such that root + ext == path , and ext is empty or begins with a period and contains at most one period .", "question_id": 7171},
{"snippet": "numpy.angle(z)", "intent": "Return the angle of the complex argument . With arguments `z`.", "question_id": 19435},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "readline.get_completer_delims()", "intent": "Set or get the word delimiters for completion .", "question_id": 8047},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "re.ASCII", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7925},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982},
{"snippet": "traceback.format_stack(limit=None)", "intent": "A shorthand for format_list ( extract_stack ( `f` , `limit` ) ) .", "question_id": 10789},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200},
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "date.ctime()", "intent": "Return a string representing the date , for example date ( 2002 , 12 , 4 ) .ctime ( ) == 'Wed Dec 4 00:00:00 2002 ' .", "question_id": 2244},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324},
{"snippet": "formatter.pop_style(n=1)", "intent": "Pop the last `n` style specifications passed to push_style ( ) .", "question_id": 3834},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171},
{"snippet": "datetime.max", "intent": "The latest representable datetime, datetime(MAXYEAR, 12, 31, 23, 59, 59, 999999, tzinfo=None).", "question_id": 2270},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "char.compare_chararrays(a, b, cmp_op, rstrip)", "intent": "Performs element-wise comparison of two string arrays using the comparison operator specified by `cmp_op` . With arguments `a`, `b`, `rstrip`.", "question_id": 21045},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "IMAP4.fetch(message_set, message_parts)", "intent": "Fetch ( parts of ) messages . `message_parts` should be a string of message part names enclosed within parentheses , eg : `` ( UID BODY [ TEXT ] ) '' . With arguments `message_set`.", "question_id": 4701},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "torch.nn.functional.pixel_shuffle(input, upscale_factor)", "intent": "Rearranges elements in a tensor of shape ( \u2217 , C\u00d7r2 , H , W ) ( * , C \\times r^2 , H , W ) ( \u2217 , C\u00d7r2 , H , W ) to a tensor of shape ( \u2217 , C , H\u00d7r , W\u00d7r ) ( * , C , H \\times r , W \\times r ) ( \u2217 , C , H\u00d7r , W\u00d7r ) , where r is the `upscale_factor` . With arguments `input`.", "question_id": 51421},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "curses.ascii.isdigit(c)", "intent": "Checks for an ASCII decimal digit , ' 0 ' through ' 9 ' . This is equivalent to `c` in string.digits .", "question_id": 1904},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "ufunc.reduceat(array, indices)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) .", "question_id": 23907},
{"snippet": "NNTP.newgroups(date)", "intent": "Send a NEWGROUPS command . The `date` argument should be a datetime.date or datetime.datetime object .", "question_id": 6461},
{"snippet": "random.Generator.power(a)", "intent": "Draws samples in [ 0 , 1 ] from `a` power distribution with positive exponent a - 1 .", "question_id": 16090},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "operator.delitem(a, b)", "intent": "Remove the value of `a` at index `b` .", "question_id": 6573},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "Match.string", "intent": "The string passed to match() or search().", "question_id": 8014},
{"snippet": "email_message.get_content_subtype()", "intent": "Return the message \u2019 s sub-content type .", "question_id": 3257},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "numpy.histogramdd(sample, range=None)", "intent": "Compute the multidimensional histogram of some data . With arguments `sample`, `range`.", "question_id": 20895},
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42129},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "ssl.SSLSession", "intent": "Session object used by session.", "question_id": 9060},
{"snippet": "Tensor.div_(value)", "intent": "In-place version of div ( ) With arguments `value`.", "question_id": 48681},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "importlib.util.source_from_cache(path)", "intent": "Given the `path` to a PEP 3147 file name , return the associated source code file path .", "question_id": 4925},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "polynomial.polyutils.trimcoef(c, tol=0)", "intent": "Remove \u201c small \u201d \u201c trailing \u201d coefficients from a polynomial . \u201c Small \u201d means \u201c small in absolute value \u201d and is controlled by the parameter `tol` ; \u201c trailing \u201d means highest order coefficient ( s ) , e.g. , in [ 0 , 1 , 1 , 0 , 0 ] ( which represents 0 + x + x * * 2 + 0 * x * * 3 + 0 * x * * 4 ) both the 3-rd and 4-th order coefficients would be \u201c trimmed . \u201d With arguments `c`.", "question_id": 22535},
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "ufunc.reduceat(array, indices)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) .", "question_id": 23907},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42128},
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "softplus.prune(t)", "intent": "Computes and returns a pruned version of input tensor `t` according to the pruning rule specified in compute_mask ( ) .", "question_id": 50894},
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "random.choice(a, replace=True)", "intent": "Generates `a` random sample from a given 1-D array With arguments `replace`.", "question_id": 18794},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "curses.echo()", "intent": "Enter echo mode .", "question_id": 1931},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472},
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "Series.swaplevel(i=- 2)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 41411},
{"snippet": "ma.MaskedArray.__len__(/)", "intent": "Return len ( self ) . With arguments `/`.", "question_id": 22971},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "ufunc.reduceat(array, indices, axis=0, dtype=None)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) . With arguments `dtype`.", "question_id": 23911},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "numpy.column_stack(tup)", "intent": "Stack 1-D arrays as columns into a 2-D array . With arguments `tup`.", "question_id": 20745},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "Match.string", "intent": "The string passed to match() or search().", "question_id": 8014},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "chararray.find(sub)", "intent": "For each element , return the lowest index in the string where substring `sub` is found .", "question_id": 16811},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "torch.nn.functional.pixel_shuffle(input, upscale_factor)", "intent": "Rearranges elements in a tensor of shape ( \u2217 , C\u00d7r2 , H , W ) ( * , C \\times r^2 , H , W ) ( \u2217 , C\u00d7r2 , H , W ) to a tensor of shape ( \u2217 , C , H\u00d7r , W\u00d7r ) ( * , C , H \\times r , W \\times r ) ( \u2217 , C , H\u00d7r , W\u00d7r ) , where r is the `upscale_factor` . With arguments `input`.", "question_id": 51421},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "operator.__iconcat__(a, b)", "intent": "`a` = iconcat ( a , `b` ) is equivalent to a += b for a and b sequences .", "question_id": 6593},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "os.supports_fd", "intent": "A Set object indicating which functions in the os module permit specifying their path parameter as an open file descriptor.", "question_id": 6949},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "string.punctuation", "intent": "String of ASCII characters which are considered punctuation characters in the C locale.", "question_id": 9513},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "numpy.shape(a)", "intent": "Return the shape of an array . With arguments `a`.", "question_id": 22805},
{"snippet": "filecmp.dircmp(a, b)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . With arguments `b`.", "question_id": 3760},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "distutils.system_info.get_standard_file(fname)", "intent": "Returns a list of files named \u2018 `fname` \u2019 from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ \u2018 HOME \u2019 ] ) 3 ) Local directory", "question_id": 22646},
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "softplus.prune(t)", "intent": "Computes and returns a pruned version of input tensor `t` according to the pruning rule specified in compute_mask ( ) .", "question_id": 50894},
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050},
{"snippet": "test.support.script_helper.spawn_python(*args, **kw, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`, `stdout`, `stderr`.", "question_id": 10306},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "HTTPHandler.http_open(req)", "intent": "Send an HTTP request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11871},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "Tensor.symeig(upper=True)", "intent": "See torch.symeig ( ) With arguments `upper`.", "question_id": 52128},
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296},
{"snippet": "filecmp.dircmp(a, b)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . With arguments `b`.", "question_id": 3760},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42128},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "os.supports_fd", "intent": "A Set object indicating which functions in the os module permit specifying their path parameter as an open file descriptor.", "question_id": 6949},
{"snippet": "io.StringIO()", "intent": "An in-memory stream for text I/O .", "question_id": 5164},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "curses.ascii.isdigit(c)", "intent": "Checks for an ASCII decimal digit , ' 0 ' through ' 9 ' . This is equivalent to `c` in string.digits .", "question_id": 1904},
{"snippet": "formatter.pop_style(n=1)", "intent": "Pop the last `n` style specifications passed to push_style ( ) .", "question_id": 3834},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "ssl.SSLSession", "intent": "Session object used by session.", "question_id": 9060},
{"snippet": "operator.add(a, b)", "intent": "Return `a` + `b` , for a and b numbers .", "question_id": 6532},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "DataFrame.merge(right, '_y'), how='inner')", "intent": "Merge DataFrame or named Series objects with a database-style join . Merge DataFrames df1 and df2 with specified left and `right` suffixes appended to any overlapping columns . With arguments `'_y')`, `how`.", "question_id": 33800},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "DataFrame.sort_index(ascending=True)", "intent": "Sort object by labels ( along an `axis` ) . By default , it sorts in `ascending` order , to sort in descending order , use ascending=False", "question_id": 35034},
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200},
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141},
{"snippet": "email_message.get_content_subtype()", "intent": "Return the message \u2019 s sub-content type .", "question_id": 3257},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "math.log2(x)", "intent": "Return the base-2 logarithm of `x` .", "question_id": 5910},
{"snippet": "widget.tag_has(tagname, item=None)", "intent": "If `item` is specified , returns 1 or 0 depending on whether the specified item has the given `tagname` .", "question_id": 10669},
{"snippet": "pandas.read_csv(filepath_or_buffer, delimiter=None)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `delimiter`.", "question_id": 46036},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "NNTP.newgroups(date)", "intent": "Send a NEWGROUPS command . The `date` argument should be a datetime.date or datetime.datetime object .", "question_id": 6461},
{"snippet": "Series.str.split(expand=False)", "intent": "Split strings around given separator/delimiter . When using expand=True , the split elements will `expand` out into separate columns .", "question_id": 41275},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "distutils.system_info.get_standard_file(fname)", "intent": "Returns a list of files named \u2018 `fname` \u2019 from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ \u2018 HOME \u2019 ] ) 3 ) Local directory", "question_id": 22646},
{"snippet": "DataFrameGroupBy.sample(replace=False)", "intent": "Return a random sample of items from each group . With arguments `replace`.", "question_id": 43699},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200},
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "torch.vander(x)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 .", "question_id": 48635},
{"snippet": "ma.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 22287},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "window.bkgdset(ch, attr)", "intent": "Set the window \u2019 s background . With arguments `ch`, `attr`.", "question_id": 2017},
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "numpy.info(toplevel='numpy')", "intent": "Get help information for a function , class , or module . With arguments `toplevel`.", "question_id": 22067},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "date.ctime()", "intent": "Return a string representing the date , for example date ( 2002 , 12 , 4 ) .ctime ( ) == 'Wed Dec 4 00:00:00 2002 ' .", "question_id": 2244},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "numpy.sign(x, /, signature)", "intent": "Returns an element-wise indication of the sign of a number . The sign function returns -1 if `x` < 0 , 0 if x==0 , 1 if x > 0. nan is returned for nan inputs . With arguments `/`, `signature`.", "question_id": 18231},
{"snippet": "distutils.system_info.get_standard_file(fname)", "intent": "Returns a list of files named \u2018 `fname` \u2019 from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ \u2018 HOME \u2019 ] ) 3 ) Local directory", "question_id": 22646},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "io.StringIO()", "intent": "An in-memory stream for text I/O .", "question_id": 5164},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "numpy.column_stack(tup)", "intent": "Stack 1-D arrays as columns into a 2-D array . With arguments `tup`.", "question_id": 20745},
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "pandas.api.types.is_dict_like(obj)", "intent": "Check if the object is dict-like . With arguments `obj`.", "question_id": 42975},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "DataFrame.boxplot(**kwargs, ax=None)", "intent": "Make a box plot from DataFrame columns . With arguments `**kwargs`, `ax`.", "question_id": 32498},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "errno.EL3HLT", "intent": "Level 3 halted", "question_id": 3551},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "iter(context)", "intent": "Return an iterator over the variables stored in the `context` object .", "question_id": 1656},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "DataFrame.swaplevel(i=- 2)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35254},
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "locale.strcoll(string1, string2)", "intent": "Compares two strings according to the current LC_COLLATE setting . As any other compare function , returns a negative , or a positive value , or 0 , depending on whether `string1` collates before or after `string2` or is equal to it .", "question_id": 5382},
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640},
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903},
{"snippet": "operator.__iconcat__(a, b)", "intent": "`a` = iconcat ( a , `b` ) is equivalent to a += b for a and b sequences .", "question_id": 6593},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445},
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435},
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "traceback.format_stack(limit=None)", "intent": "A shorthand for format_list ( extract_stack ( `f` , `limit` ) ) .", "question_id": 10789},
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124},
{"snippet": "math.expm1(x)", "intent": "Return e raised to the power `x` , minus 1 .", "question_id": 5906},
{"snippet": "re.ASCII", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7925},
{"snippet": "HTTPHandler.http_open(req)", "intent": "Send an HTTP request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11871},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "torch.linalg.vector_norm(A, ord=2)", "intent": "Computes a vector norm . If `A` is complex valued , it computes the norm of A.abs ( ) `ord` defines the vector norm that is computed .", "question_id": 49285},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "DataSource.exists(path)", "intent": "Test if `path` exists .", "question_id": 20770},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134},
{"snippet": "matlib.repmat(a, m, n)", "intent": "Repeat `a` 0-D to 2-D array or matrix MxN times . With arguments `m`, `n`.", "question_id": 18544},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "curses.echo()", "intent": "Enter echo mode .", "question_id": 1931},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "ufunc.reduceat(array, indices)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) .", "question_id": 23907},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "DataSource.exists(path)", "intent": "Test if `path` exists .", "question_id": 20770},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "Series.swaplevel(i=- 2)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 41411},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "DataFrame.swaplevel(j=- 1)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35247},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472},
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474},
{"snippet": "pandas.read_csv(filepath_or_buffer, delimiter=None)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `delimiter`.", "question_id": 46036},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "numpy.histogramdd(sample, range=None)", "intent": "Compute the multidimensional histogram of some data . With arguments `sample`, `range`.", "question_id": 20895},
{"snippet": "torch.nn.utils.rnn.pad_sequence(sequences, batch_first=False)", "intent": "Pad a list of variable length Tensors with `padding_value` For example , if the input is list of `sequences` with size L x * and if `batch_first` is False , and T x B x * otherwise .", "question_id": 48320},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "MultiIndex.from_frame(df, names=None)", "intent": "Make a MultiIndex from a DataFrame . Using explicit `names` , instead of the column names With arguments `df`.", "question_id": 37554},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "os.supports_fd", "intent": "A Set object indicating which functions in the os module permit specifying their path parameter as an open file descriptor.", "question_id": 6949},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "msvcrt.getwch()", "intent": "Wide char variant of getch ( ) , returning a Unicode value .", "question_id": 6157},
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982},
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "polynomial.polyutils.mapdomain(x, old, new)", "intent": "Apply linear map to input points . The linear map offset + scale * `x` that maps the domain `old` to the domain `new` is applied to the points x .", "question_id": 22969},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "distutils.system_info.get_standard_file(fname)", "intent": "Returns a list of files named \u2018 `fname` \u2019 from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ \u2018 HOME \u2019 ] ) 3 ) Local directory", "question_id": 22646},
{"snippet": "operator.delitem(a, b)", "intent": "Remove the value of `a` at index `b` .", "question_id": 6573},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223},
{"snippet": "ma.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 22287},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "torch.nn.utils.rnn.pack_sequence(sequences, enforce_sorted=True)", "intent": "Packs a list of variable length Tensors `sequences` should be a list of Tensors of size L x * , where L is the length of a sequence and * is any number of trailing dimensions , including zero . For unsorted sequences , use `enforce_sorted` = False .", "question_id": 53089},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200},
{"snippet": "torch.tril_indices(row, col)", "intent": "Returns the indices of the lower triangular part of a row-by- `col` matrix in a 2-by-N Tensor , where the first `row` contains row coordinates of all indices and the second row contains column coordinates .", "question_id": 51255},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "xml.sax.saxutils.escape(data)", "intent": "Escape ' & ' , ' < ' , and ' > ' in a string of `data` .", "question_id": 12652},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "test.support.TEST_SUPPORT_DIR", "intent": "Set to the top level directory that contains test.support.", "question_id": 10126},
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "sequence_matcher.ratio()", "intent": "Return a measure of the sequences \u2019 similarity as a float in the range [ 0 , 1 ] .", "question_id": 2687},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "DataFrame.merge(right, '_y'), how='inner')", "intent": "Merge DataFrame or named Series objects with a database-style join . Merge DataFrames df1 and df2 with specified left and `right` suffixes appended to any overlapping columns . With arguments `'_y')`, `how`.", "question_id": 33800},
{"snippet": "datetime.max", "intent": "The latest representable datetime, datetime(MAXYEAR, 12, 31, 23, 59, 59, 999999, tzinfo=None).", "question_id": 2270},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "Unpacker.done()", "intent": "Indicates unpack completion .", "question_id": 12289},
{"snippet": "ma.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 22287},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "torch.baddbmm(input, batch1, batch2, out=None)", "intent": "Performs a batch matrix-matrix product of matrices in `batch1` and `batch2` . `input` is added to the final result . If batch1 is a ( b\u00d7n\u00d7m ) ( b \\times n \\times m ) ( b\u00d7n\u00d7m ) tensor , batch2 is a ( b\u00d7m\u00d7p ) ( b \\times m \\times p ) ( b\u00d7m\u00d7p ) tensor , then input must be broadcastable with a ( b\u00d7n\u00d7p ) ( b \\times n \\times p ) ( b\u00d7n\u00d7p ) tensor and `out` will be a ( b\u00d7n\u00d7p ) ( b \\times n \\times p ) ( b\u00d7n\u00d7p ) tensor .", "question_id": 48134},
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162},
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472},
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "errno.EUSERS", "intent": "Too many users", "question_id": 3592},
{"snippet": "urllib.parse.unquote(string)", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str .", "question_id": 11723},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "formatter.pop_style(n=1)", "intent": "Pop the last `n` style specifications passed to push_style ( ) .", "question_id": 3834},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "numpy.lexsort(keys, axis=- 1)", "intent": "Perform an indirect stable sort using a sequence of `keys` . With arguments `axis`.", "question_id": 21552},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "DataFrame.swaplevel(j=- 1)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35247},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "email_message.get_content_subtype()", "intent": "Return the message \u2019 s sub-content type .", "question_id": 3257},
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901},
{"snippet": "distutils.system_info.get_standard_file(fname)", "intent": "Returns a list of files named \u2018 `fname` \u2019 from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ \u2018 HOME \u2019 ] ) 3 ) Local directory", "question_id": 22646},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "numpy.vdot(a, b)", "intent": "Return the dot product of two vectors . The vdot ( `a` , `b` ) function handles complex numbers differently than dot ( a , b ) .", "question_id": 20244},
{"snippet": "DataFrameGroupBy.sample(replace=False)", "intent": "Return a random sample of items from each group . With arguments `replace`.", "question_id": 43699},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "ufunc.reduceat(array, indices)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) .", "question_id": 23907},
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "numpy.info(toplevel='numpy')", "intent": "Get help information for a function , class , or module . With arguments `toplevel`.", "question_id": 22067},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "urllib.parse.SplitResult.geturl()", "intent": "Return the re-combined version of the original URL as a string .", "question_id": 11698},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "Series.to_dict()", "intent": "Convert Series to { label - > value } dict or dict-like object .", "question_id": 41486},
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901},
{"snippet": "Unpacker.done()", "intent": "Indicates unpack completion .", "question_id": 12289},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "random.Generator.power(a)", "intent": "Draws samples in [ 0 , 1 ] from `a` power distribution with positive exponent a - 1 .", "question_id": 16090},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "numpy.diff(a, append=<no value>)", "intent": "Calculate the n-th discrete difference along the given `axis` . The first difference is given by out [ i ] = `a` [ i+1 ] - a [ i ] along the given axis , higher differences are calculated by using diff recursively . With arguments `append`.", "question_id": 24471},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "thread.start()", "intent": "Start the thread \u2019 s activity .", "question_id": 10362},
{"snippet": "DataFrame.sort_index(ascending=True)", "intent": "Sort object by labels ( along an `axis` ) . By default , it sorts in `ascending` order , to sort in descending order , use ascending=False", "question_id": 35034},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "ma.MaskedArray.__len__(/)", "intent": "Return len ( self ) . With arguments `/`.", "question_id": 22971},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "ufunc.reduceat(array, indices, axis=0, dtype=None)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) . With arguments `dtype`.", "question_id": 23911},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "operator.__iconcat__(a, b)", "intent": "`a` = iconcat ( a , `b` ) is equivalent to a += b for a and b sequences .", "question_id": 6593},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "urllib.parse.urljoin(base, url)", "intent": "Construct a full ( \u201c absolute \u201d ) URL by combining a \u201c `base` URL \u201d ( base ) with another URL ( `url` ) .", "question_id": 11695},
{"snippet": "matlib.repmat(a, m, n)", "intent": "Repeat `a` 0-D to 2-D array or matrix MxN times . With arguments `m`, `n`.", "question_id": 18544},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "pandas.read_csv(filepath_or_buffer, delimiter=None)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `delimiter`.", "question_id": 46036},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982},
{"snippet": "datetime.ctime()", "intent": "Return a string representing the date and time , for example datetime ( 2002 , 12 , 4 , 20 , 30 , 40 ) .ctime ( ) == 'Wed Dec 4 20:30:40 2002 ' .", "question_id": 2311},
{"snippet": "ZipInfo.flag_bits", "intent": "ZIP flag bits.", "question_id": 12872},
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072},
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "locale.strcoll(string1, string2)", "intent": "Compares two strings according to the current LC_COLLATE setting . As any other compare function , returns a negative , or a positive value , or 0 , depending on whether `string1` collates before or after `string2` or is equal to it .", "question_id": 5382},
{"snippet": "Index.sort_values(ascending=True, key=None)", "intent": "Return a sorted copy of the index . Sort values in `ascending` order ( default behavior ) . With arguments `key`.", "question_id": 37058},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063},
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899},
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008},
{"snippet": "context.get(var)", "intent": "Return the value for `var` if var has the value in the context object .", "question_id": 1655},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "DataFrame.merge(right, '_y'), how='inner')", "intent": "Merge DataFrame or named Series objects with a database-style join . Merge DataFrames df1 and df2 with specified left and `right` suffixes appended to any overlapping columns . With arguments `'_y')`, `how`.", "question_id": 33800},
{"snippet": "importlib.util.source_from_cache(path)", "intent": "Given the `path` to a PEP 3147 file name , return the associated source code file path .", "question_id": 4925},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "DataFrame.ffill(inplace=False)", "intent": "Synonym for DataFrame.fillna ( ) with method='ffill ' . With arguments `inplace`.", "question_id": 33063},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "turtle.speed()", "intent": "Set the turtle \u2019 s `speed` to an integer value in the range 0..10 .", "question_id": 10934},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "ssl.SSLSession", "intent": "Session object used by session.", "question_id": 9060},
{"snippet": "random.Generator.power(a)", "intent": "Draws samples in [ 0 , 1 ] from `a` power distribution with positive exponent a - 1 .", "question_id": 16090},
{"snippet": "DataFrameGroupBy.sample(replace=False)", "intent": "Return a random sample of items from each group . With arguments `replace`.", "question_id": 43699},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "numpy.diag_indices(n)", "intent": "Return the indices to access the main diagonal of an array . This returns a tuple of indices that can be used to access the main diagonal of an array a with a.ndim > = 2 dimensions and shape ( `n` , n , \u2026 , n ) .", "question_id": 23803},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "smtp_channel.received_lines", "intent": "Holds a list of the line strings (decoded using UTF-8) received from the client.", "question_id": 8440},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "traceback.format_stack(limit=None)", "intent": "A shorthand for format_list ( extract_stack ( `f` , `limit` ) ) .", "question_id": 10789},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565},
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "widget.focus(item=None)", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10631},
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474},
{"snippet": "Series.to_dict()", "intent": "Convert Series to { label - > value } dict or dict-like object .", "question_id": 41486},
{"snippet": "ZipInfo.flag_bits", "intent": "ZIP flag bits.", "question_id": 12872},
{"snippet": "Timestamp.combine(date, time)", "intent": "Combine `date` , `time` into datetime with same date and time fields .", "question_id": 42281},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "email_message.get_content_subtype()", "intent": "Return the message \u2019 s sub-content type .", "question_id": 3257},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901},
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238},
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "urllib.request.FTPHandler", "intent": "Open FTP URLs.", "question_id": 11812},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "random.choice(a, replace=True)", "intent": "Generates `a` random sample from a given 1-D array With arguments `replace`.", "question_id": 18794},
{"snippet": "DataFrame.at_time(time)", "intent": "Select values at particular `time` of day ( e.g. , 9:30AM ) .", "question_id": 32400},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610},
{"snippet": "softplus.prune(t)", "intent": "Computes and returns a pruned version of input tensor `t` according to the pruning rule specified in compute_mask ( ) .", "question_id": 50894},
{"snippet": "numpy.frombuffer(buffer, count=- 1, like=None)", "intent": "Interpret a `buffer` as a 1-dimensional array . With arguments `count`, `like`.", "question_id": 17024},
{"snippet": "wsgiref.util.application_uri(environ)", "intent": "Similar to request_uri ( ) , except that the PATH_INFO and QUERY_STRING variables are ignored . With arguments `environ`.", "question_id": 12213},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "context.exp(x)", "intent": "Returns e ** `x` .", "question_id": 2530},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "TarInfo.isreg()", "intent": "Same as isfile ( ) .", "question_id": 9993},
{"snippet": "time.fold", "intent": "In [0, 1].", "question_id": 2332},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "bool()", "intent": "Return a Boolean value , i.e .", "question_id": 3979},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078},
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "NNTP.newgroups(date)", "intent": "Send a NEWGROUPS command . The `date` argument should be a datetime.date or datetime.datetime object .", "question_id": 6461},
{"snippet": "email_message.get_content_subtype()", "intent": "Return the message \u2019 s sub-content type .", "question_id": 3257},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982},
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977},
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200},
{"snippet": "globals()", "intent": "Return a dictionary representing the current global symbol table .", "question_id": 4027},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735},
{"snippet": "char.chararray.itemset(*args)", "intent": "Insert scalar into an array ( scalar is cast to array \u2019 s dtype , if possible ) With arguments `*args`.", "question_id": 17179},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "polynomial.polynomial.polygrid3d(x, y, z, c)", "intent": "Evaluate a 3-D polynomial on the Cartesian product of `x` , `y` and `z` . where the points ( a , b , `c` ) consist of all triples formed by taking a from x , b from y , and c from z .", "question_id": 22496},
{"snippet": "DataFrame.swaplevel(i=- 2)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35254},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "curses.napms(ms)", "intent": "Sleep for `ms` milliseconds .", "question_id": 1956},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "math.log2(x)", "intent": "Return the base-2 logarithm of `x` .", "question_id": 5910},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "Series.swaplevel(i=- 2)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 41411},
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640},
{"snippet": "re.ASCII", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7925},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "ufunc.reduceat(array, indices)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) .", "question_id": 23907},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "xml.sax.saxutils.escape(data)", "intent": "Escape ' & ' , ' < ' , and ' > ' in a string of `data` .", "question_id": 12652},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "email_message.__str__()", "intent": "Equivalent to as_string ( policy=self.policy.clone ( utf8=True ) ) .", "question_id": 3232},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "torch.quantization.observer.load_observer_state_dict(mod, obs_dict)", "intent": "Given input model and a state_dict containing model observer stats , load the stats back into the model . With arguments `mod`, `obs_dict`.", "question_id": 50214},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "linalg.tensorsolve(a, b)", "intent": "Solve the tensor equation `a` x = `b` for x .", "question_id": 19418},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223},
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026},
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "numpy.sign(x, /, signature)", "intent": "Returns an element-wise indication of the sign of a number . The sign function returns -1 if `x` < 0 , 0 if x==0 , 1 if x > 0. nan is returned for nan inputs . With arguments `/`, `signature`.", "question_id": 18231},
{"snippet": "matlib.repmat(a, m, n)", "intent": "Repeat `a` 0-D to 2-D array or matrix MxN times . With arguments `m`, `n`.", "question_id": 18544},
{"snippet": "PurePath.match(pattern)", "intent": "Match this path against the provided glob-style `pattern` .", "question_id": 7258},
{"snippet": "DataFrame.sort_index(ascending=True)", "intent": "Sort object by labels ( along an `axis` ) . By default , it sorts in `ascending` order , to sort in descending order , use ascending=False", "question_id": 35034},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "DataFrame.merge(right, '_y'), how='inner')", "intent": "Merge DataFrame or named Series objects with a database-style join . Merge DataFrames df1 and df2 with specified left and `right` suffixes appended to any overlapping columns . With arguments `'_y')`, `how`.", "question_id": 33800},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "ZipInfo.flag_bits", "intent": "ZIP flag bits.", "question_id": 12872},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445},
{"snippet": "distutils.system_info.get_standard_file(fname)", "intent": "Returns a list of files named \u2018 `fname` \u2019 from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ \u2018 HOME \u2019 ] ) 3 ) Local directory", "question_id": 22646},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "NNTP.newgroups(date)", "intent": "Send a NEWGROUPS command . The `date` argument should be a datetime.date or datetime.datetime object .", "question_id": 6461},
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "pandas.read_csv(filepath_or_buffer, sep=NoDefault.no_default)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `sep`.", "question_id": 46055},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "numpy.info(toplevel='numpy')", "intent": "Get help information for a function , class , or module . With arguments `toplevel`.", "question_id": 22067},
{"snippet": "NNTP.newgroups(date)", "intent": "Send a NEWGROUPS command . The `date` argument should be a datetime.date or datetime.datetime object .", "question_id": 6461},
{"snippet": "DataFrame.merge(right, '_y'), how='inner')", "intent": "Merge DataFrame or named Series objects with a database-style join . Merge DataFrames df1 and df2 with specified left and `right` suffixes appended to any overlapping columns . With arguments `'_y')`, `how`.", "question_id": 33800},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901},
{"snippet": "torch.linalg.solve(A, B)", "intent": "Computes the solution of a square system of linear equations with a unique solution . Letting K\\mathbb { K } K be R\\mathbb { R } R or C\\mathbb { C } C , this function computes the solution X\u2208Kn\u00d7kX \\in \\mathbb { K } ^ { n \\times k } X\u2208Kn\u00d7k of the linear system associated to A\u2208Kn\u00d7n , B\u2208Km\u00d7kA \\in \\mathbb { K } ^ { n \\times n } , `B` \\in \\mathbb { K } ^ { m \\times k } A\u2208Kn\u00d7n , B\u2208Km\u00d7k , which is defined as With arguments `A`.", "question_id": 49781},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899},
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110},
{"snippet": "polynomial.polyutils.as_series(alist)", "intent": "Return argument as a list of 1-d arrays . With arguments `alist`.", "question_id": 21617},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "context.exp(x)", "intent": "Returns e ** `x` .", "question_id": 2530},
{"snippet": "DataFrame.plot.scatter(x, y, **kwargs, c=None)", "intent": "Create a scatter plot with varying marker point size and color . With arguments `x`, `y`, `**kwargs`, `c`.", "question_id": 34224},
{"snippet": "torch.nn.MultiMarginLoss(p=1)", "intent": "Creates a criterion that optimizes a multi-class classification hinge loss ( margin-based loss ) between input xxx ( a 2D mini-batch Tensor ) and output yyy ( which is a 1D tensor of target class indices , 0\u2264y\u2264x.size ( 1 ) \u221210 \\leq y \\leq \\text { x.size } ( 1 ) -10\u2264y\u2264x.size ( 1 ) \u22121 ) : With arguments `p`.", "question_id": 48060},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "os.supports_fd", "intent": "A Set object indicating which functions in the os module permit specifying their path parameter as an open file descriptor.", "question_id": 6949},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223},
{"snippet": "polynomial.legendre.Legendre.linspace(n=100, domain=None)", "intent": "Return x , y values at equally spaced points in `domain` . Returns the x , y values at `n` linearly spaced points across the domain .", "question_id": 16680},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "py_compile.main()", "intent": "Compile several source files .", "question_id": 7835},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "email_message.get_content_subtype()", "intent": "Return the message \u2019 s sub-content type .", "question_id": 3257},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "NNTP.newgroups(date)", "intent": "Send a NEWGROUPS command . The `date` argument should be a datetime.date or datetime.datetime object .", "question_id": 6461},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435},
{"snippet": "shutil.unregister_unpack_format(name)", "intent": "Unregister an unpack format . `name` is the name of the format .", "question_id": 8369},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "math.log2(x)", "intent": "Return the base-2 logarithm of `x` .", "question_id": 5910},
{"snippet": "random.Generator.power(a)", "intent": "Draws samples in [ 0 , 1 ] from `a` power distribution with positive exponent a - 1 .", "question_id": 16090},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "math.log10(x)", "intent": "Return the base-10 logarithm of `x` .", "question_id": 5911},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "urllib.request.Request(url, headers={})", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . If no Content-Length nor Transfer-Encoding header field has been provided , HTTPHandler will set these `headers` according to the type of data .", "question_id": 11770},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "pandas.io.json.read_json(numpy=False)", "intent": "Convert a JSON string to pandas object . With arguments `numpy`.", "question_id": 45541},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "json.JSONDecoder(object_hook=None, parse_float=None)", "intent": "Simple JSON decoder . `object_hook` , if specified , will be called with the result of every JSON object decoded and its return value will be used in place of the given dict . `parse_float` , if specified , will be called with the string of every JSON float to be decoded .", "question_id": 5317},
{"snippet": "datagram_handler.send(s)", "intent": "Send a pickled byte-string to a socket . With arguments `s`.", "question_id": 5493},
{"snippet": "subprocess.check_call(args, shell=False)", "intent": "Run command with arguments . With arguments `args`, `shell`.", "question_id": 9673},
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207},
{"snippet": "xml.parsers.expat.errors.XML_ERROR_INCOMPLETE_PE", "intent": "A parameter entity contained incomplete markup.", "question_id": 7812},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "email_message.__str__()", "intent": "Equivalent to as_string ( policy=self.policy.clone ( utf8=True ) ) .", "question_id": 3232},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42129},
{"snippet": "torch.nn.MultiMarginLoss(p=1)", "intent": "Creates a criterion that optimizes a multi-class classification hinge loss ( margin-based loss ) between input xxx ( a 2D mini-batch Tensor ) and output yyy ( which is a 1D tensor of target class indices , 0\u2264y\u2264x.size ( 1 ) \u221210 \\leq y \\leq \\text { x.size } ( 1 ) -10\u2264y\u2264x.size ( 1 ) \u22121 ) : With arguments `p`.", "question_id": 48060},
{"snippet": "torch.linalg.solve(A, B)", "intent": "Computes the solution of a square system of linear equations with a unique solution . Letting K\\mathbb { K } K be R\\mathbb { R } R or C\\mathbb { C } C , this function computes the solution X\u2208Kn\u00d7kX \\in \\mathbb { K } ^ { n \\times k } X\u2208Kn\u00d7k of the linear system associated to A\u2208Kn\u00d7n , B\u2208Km\u00d7kA \\in \\mathbb { K } ^ { n \\times n } , `B` \\in \\mathbb { K } ^ { m \\times k } A\u2208Kn\u00d7n , B\u2208Km\u00d7k , which is defined as With arguments `A`.", "question_id": 49781},
{"snippet": "Series.str.rsplit(pat=None)", "intent": "Split strings around given separator/delimiter . The `pat` parameter can be used to split by other characters .", "question_id": 41203},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "numpy.tril_indices_from(arr, k=0)", "intent": "Return the indices for the lower-triangle of `arr` . With arguments `k`.", "question_id": 21469},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "Unpacker.done()", "intent": "Indicates unpack completion .", "question_id": 12289},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "PurePath.match(pattern)", "intent": "Match this path against the provided glob-style `pattern` .", "question_id": 7258},
{"snippet": "datetime.ctime()", "intent": "Return a string representing the date and time , for example datetime ( 2002 , 12 , 4 , 20 , 30 , 40 ) .ctime ( ) == 'Wed Dec 4 20:30:40 2002 ' .", "question_id": 2311},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "test.support.script_helper.make_script(script_dir, script_basename, source, omit_suffix=False)", "intent": "Create script containing `source` in path `script_dir` and `script_basename` . If `omit_suffix` is False , append .py to the name .", "question_id": 10309},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "chararray.find(sub)", "intent": "For each element , return the lowest index in the string where substring `sub` is found .", "question_id": 16811},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "chararray.find(sub)", "intent": "For each element , return the lowest index in the string where substring `sub` is found .", "question_id": 16811},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "Series.reset_index(drop=False)", "intent": "Generate a new DataFrame or Series with the index reset . To generate a new Series with the default set `drop` to True .", "question_id": 40315},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "py_compile.main()", "intent": "Compile several source files .", "question_id": 7835},
{"snippet": "Timedelta.nanoseconds", "intent": "Return the number of nanoseconds (n), where 0 <= n < 1 microsecond.", "question_id": 42135},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "random.Generator.power(a)", "intent": "Draws samples in [ 0 , 1 ] from `a` power distribution with positive exponent a - 1 .", "question_id": 16090},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "curses.napms(ms)", "intent": "Sleep for `ms` milliseconds .", "question_id": 1956},
{"snippet": "os.supports_fd", "intent": "A Set object indicating which functions in the os module permit specifying their path parameter as an open file descriptor.", "question_id": 6949},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "numpy.fromstring(string, count=- 1)", "intent": "A new 1-D array initialized from text data in a `string` . With arguments `count`.", "question_id": 21478},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "locale.setlocale(category, locale=None)", "intent": "If `locale` is given and not None , setlocale ( ) modifies the locale setting for the `category` .", "question_id": 5351},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "os.supports_fd", "intent": "A Set object indicating which functions in the os module permit specifying their path parameter as an open file descriptor.", "question_id": 6949},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110},
{"snippet": "Series.str.rsplit(pat=None)", "intent": "Split strings around given separator/delimiter . The `pat` parameter can be used to split by other characters .", "question_id": 41203},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "widget.tag_has(tagname, item=None)", "intent": "If `item` is specified , returns 1 or 0 depending on whether the specified item has the given `tagname` .", "question_id": 10669},
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "wsgiref.simple_server.demo_app(environ, start_response)", "intent": "This function is a small but complete WSGI application that returns a text page containing the message \u201c Hello world ! \u201d and a list of the key/value pairs provided in the `environ` parameter . With arguments `start_response`.", "question_id": 12227},
{"snippet": "urllib.parse.quote_plus(string)", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL .", "question_id": 11713},
{"snippet": "email.headerregistry.DateHeader", "intent": "RFC 5322 specifies a very specific format for dates within email headers.", "question_id": 3156},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "dialog.text(name, x, y, width, height, attributes, text)", "intent": "Add and return a Text control . With arguments `name`, `x`, `y`, `width`, `height`, `attributes`, `text`.", "question_id": 6137},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640},
{"snippet": "Tensor.div_(value)", "intent": "In-place version of div ( ) With arguments `value`.", "question_id": 48681},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "os.fwalk(top='.')", "intent": "This behaves exactly like walk ( ) , except that it yields a 4-tuple ( dirpath , dirnames , filenames , dirfd ) , and it supports `dir_fd` . With arguments `top`.", "question_id": 6984},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "matlib.repmat(a, m, n)", "intent": "Repeat `a` 0-D to 2-D array or matrix MxN times . With arguments `m`, `n`.", "question_id": 18544},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "linalg.tensorsolve(a, b)", "intent": "Solve the tensor equation `a` x = `b` for x .", "question_id": 19418},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072},
{"snippet": "tixCommand.tix_cget(option)", "intent": "Returns the current value of the configuration `option` given by option .", "question_id": 10582},
{"snippet": "PurePath.match(pattern)", "intent": "Match this path against the provided glob-style `pattern` .", "question_id": 7258},
{"snippet": "widget.focus(item=None)", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10631},
{"snippet": "ssl.cert_time_to_seconds(cert_time)", "intent": "Return the time in seconds since the Epoch , given the `cert_time` string representing the \u201c notBefore \u201d or \u201c notAfter \u201d date from a certificate in `` % b % d % H : % M : % S % Y % Z '' strptime format ( C locale ) .", "question_id": 8891},
{"snippet": "re.ASCII", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7925},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "collections.abc.Coroutine", "intent": "ABC for coroutine compatible classes.", "question_id": 1331},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "Series.swaplevel(i=- 2)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 41411},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "ssl.SSLSession", "intent": "Session object used by session.", "question_id": 9060},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42128},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "HTTPHandler.http_open(req)", "intent": "Send an HTTP request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11871},
{"snippet": "Unpacker.done()", "intent": "Indicates unpack completion .", "question_id": 12289},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "widget.xview(*args)", "intent": "Query or modify horizontal position of the treeview . With arguments `*args`.", "question_id": 10670},
{"snippet": "torch.vander(x, N=None)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . With arguments `N`.", "question_id": 48636},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "softplus.prune(t)", "intent": "Computes and returns a pruned version of input tensor `t` according to the pruning rule specified in compute_mask ( ) .", "question_id": 50894},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "pandas.read_csv(filepath_or_buffer, sep=NoDefault.no_default)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `sep`.", "question_id": 46055},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162},
{"snippet": "set.add(elem)", "intent": "Add element `elem` to the set .", "question_id": 9462},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072},
{"snippet": "curses.echo()", "intent": "Enter echo mode .", "question_id": 1931},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "DataFrame.to_csv()", "intent": "Write object to a comma-separated values ( csv ) file .", "question_id": 35291},
{"snippet": "Unpacker.done()", "intent": "Indicates unpack completion .", "question_id": 12289},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277},
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "torch.vander(x)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 .", "question_id": 48635},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735},
{"snippet": "distutils.system_info.get_standard_file(fname)", "intent": "Returns a list of files named \u2018 `fname` \u2019 from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ \u2018 HOME \u2019 ] ) 3 ) Local directory", "question_id": 22646},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "TarInfo.uname", "intent": "User name.", "question_id": 9989},
{"snippet": "re.ASCII", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7925},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "errno.EL3HLT", "intent": "Level 3 halted", "question_id": 3551},
{"snippet": "ma.outerproduct(a, b)", "intent": "Compute the outer product of two vectors . Given two vectors , `a` = [ a0 , a1 , ... , aM ] and `b` = [ b0 , b1 , ... , bN ] , the outer product [ 1 ] is :", "question_id": 18756},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "date.ctime()", "intent": "Return a string representing the date , for example date ( 2002 , 12 , 4 ) .ctime ( ) == 'Wed Dec 4 00:00:00 2002 ' .", "question_id": 2244},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "DataFrame.reset_index(level=None)", "intent": "Reset the index , or a `level` of it .", "question_id": 34634},
{"snippet": "fft.rfft2(a, - 1), s=None)", "intent": "Compute the 2-dimensional FFT of `a` real array . With arguments `- 1)`, `s`.", "question_id": 18531},
{"snippet": "email_message.__str__()", "intent": "Equivalent to as_string ( policy=self.policy.clone ( utf8=True ) ) .", "question_id": 3232},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "operator.__iconcat__(a, b)", "intent": "`a` = iconcat ( a , `b` ) is equivalent to a += b for a and b sequences .", "question_id": 6593},
{"snippet": "polynomial.chebyshev.chebpts1(npts)", "intent": "Chebyshev points of the first kind . The Chebyshev points of the first kind are the points cos ( x ) , where x = [ pi * ( k + .5 ) /npts for k in range ( `npts` ) ] .", "question_id": 16906},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640},
{"snippet": "time.fold", "intent": "In [0, 1].", "question_id": 2332},
{"snippet": "pandas.read_csv(filepath_or_buffer, sep=NoDefault.no_default)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `sep`.", "question_id": 46055},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "Tensor.div_(value)", "intent": "In-place version of div ( ) With arguments `value`.", "question_id": 48681},
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735},
{"snippet": "wsgiref.util.application_uri(environ)", "intent": "Similar to request_uri ( ) , except that the PATH_INFO and QUERY_STRING variables are ignored . With arguments `environ`.", "question_id": 12213},
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324},
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032},
{"snippet": "torch.vander(x)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 .", "question_id": 48635},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473},
{"snippet": "ufunc.reduceat(array, indices)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) .", "question_id": 23907},
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "ma.cov(x)", "intent": "Estimate the covariance matrix . If `x` and `y` have the same shape , a common mask is allocated : if x [ i , j ] is masked , then y [ i , j ] will also be masked .", "question_id": 16259},
{"snippet": "bdb.clear_bpbynumber(arg)", "intent": "Delete the breakpoint which has the index `arg` in the Breakpoint.bpbynumber .", "question_id": 796},
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "PurePath.match(pattern)", "intent": "Match this path against the provided glob-style `pattern` .", "question_id": 7258},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "Series.str.rsplit(pat=None)", "intent": "Split strings around given separator/delimiter . The `pat` parameter can be used to split by other characters .", "question_id": 41203},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "ma.cov(x)", "intent": "Estimate the covariance matrix . If `x` and `y` have the same shape , a common mask is allocated : if x [ i , j ] is masked , then y [ i , j ] will also be masked .", "question_id": 16259},
{"snippet": "date.__format__(format)", "intent": "Same as date.strftime ( ) . This makes it possible to specify a `format` string for a date object in formatted string literals and when using str.format ( ) .", "question_id": 2246},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "dialog.text(name, x, y, width, height, attributes, text)", "intent": "Add and return a Text control . With arguments `name`, `x`, `y`, `width`, `height`, `attributes`, `text`.", "question_id": 6137},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "numpy.mean(a, where=<no value>)", "intent": "Compute the arithmetic mean along the specified `axis` . Specifying `a` higher-precision accumulator using the `dtype` keyword can alleviate this issue . Specifying a `where` argument : > > > a = np.array ( [ [ 5 , 9 , 13 ] , [ 14 , 10 , 12 ] , [ 11 , 15 , 19 ] ] ) > > > np.mean ( a ) 12.0 > > > np.mean ( a , where= [ [ True ] , [ False ] , [ False ] ] ) 9.0", "question_id": 17639},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903},
{"snippet": "torch.lstsq(input, A)", "intent": "Computes the solution to the least squares and least norm problems for a full rank matrix AAA of size ( m\u00d7n ) ( m \\times n ) ( m\u00d7n ) and a matrix BBB of size ( m\u00d7k ) ( m \\times k ) ( m\u00d7k ) . With arguments `input`, `A`.", "question_id": 51237},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "context.exp(x)", "intent": "Returns e ** `x` .", "question_id": 2530},
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "NNTP.newgroups(date)", "intent": "Send a NEWGROUPS command . The `date` argument should be a datetime.date or datetime.datetime object .", "question_id": 6461},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "Series.str.rsplit(pat=None)", "intent": "Split strings around given separator/delimiter . The `pat` parameter can be used to split by other characters .", "question_id": 41203},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "matlib.repmat(a, m, n)", "intent": "Repeat `a` 0-D to 2-D array or matrix MxN times . With arguments `m`, `n`.", "question_id": 18544},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "time.fold", "intent": "In [0, 1].", "question_id": 2332},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "globals()", "intent": "Return a dictionary representing the current global symbol table .", "question_id": 4027},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445},
{"snippet": "numpy.angle(z)", "intent": "Return the angle of the complex argument . With arguments `z`.", "question_id": 19435},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "reversed(seq)", "intent": "Return a reverse iterator . `seq` must be an object which has a __reversed__ ( ) method or supports the sequence protocol ( the __len__ ( ) method and the __getitem__ ( ) method with integer arguments starting at 0 ) .", "question_id": 4099},
{"snippet": "ma.MaskedArray.__len__(/)", "intent": "Return len ( self ) . With arguments `/`.", "question_id": 22971},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42129},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "ZipInfo.flag_bits", "intent": "ZIP flag bits.", "question_id": 12872},
{"snippet": "torch.nn.functional.pixel_shuffle(input, upscale_factor)", "intent": "Rearranges elements in a tensor of shape ( \u2217 , C\u00d7r2 , H , W ) ( * , C \\times r^2 , H , W ) ( \u2217 , C\u00d7r2 , H , W ) to a tensor of shape ( \u2217 , C , H\u00d7r , W\u00d7r ) ( * , C , H \\times r , W \\times r ) ( \u2217 , C , H\u00d7r , W\u00d7r ) , where r is the `upscale_factor` . With arguments `input`.", "question_id": 51421},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "ZipInfo.flag_bits", "intent": "ZIP flag bits.", "question_id": 12872},
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137},
{"snippet": "struct.Struct(format)", "intent": "Return a new Struct object which writes and reads binary data according to the `format` string format .", "question_id": 9558},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "test.support.script_helper.spawn_python(*args, **kw, stdout=subprocess.PIPE)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`, `stdout`.", "question_id": 10304},
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "numpy.sin(x, /, signature, out=None, where=True)", "intent": "Trigonometric sine , element-wise . It ranges from -1 for \\ ( x=3\\pi `/` 2\\ ) to +1 for \\ ( \\pi / 2.\\ ) The function has zeroes `where` the angle is a multiple of \\ ( \\pi\\ ) . With arguments `x`, `signature`, `out`.", "question_id": 18061},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "Tensor.put_(index, source)", "intent": "Copies the elements from `source` into the positions specified by `index` .", "question_id": 53398},
{"snippet": "mime_types.readfp(fp)", "intent": "Load MIME type information from an open file `fp` .", "question_id": 5972},
{"snippet": "bisect.insort_left(a, x, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 866},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "base_server.serve_forever(poll_interval=0.5)", "intent": "Handle requests until an explicit shutdown ( ) request . Poll for shutdown every `poll_interval` seconds .", "question_id": 8763},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "py_compile.main()", "intent": "Compile several source files .", "question_id": 7835},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "urllib.parse.SplitResult.geturl()", "intent": "Return the re-combined version of the original URL as a string .", "question_id": 11698},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "re.ASCII", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7925},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "char.compare_chararrays(a, b, cmp_op, rstrip)", "intent": "Performs element-wise comparison of two string arrays using the comparison operator specified by `cmp_op` . With arguments `a`, `b`, `rstrip`.", "question_id": 21045},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42128},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "DataFrame.sort_index(ascending=True)", "intent": "Sort object by labels ( along an `axis` ) . By default , it sorts in `ascending` order , to sort in descending order , use ascending=False", "question_id": 35034},
{"snippet": "ufunc.reduceat(array, indices, axis=0, dtype=None)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) . With arguments `dtype`.", "question_id": 23911},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474},
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "char.compare_chararrays(a, b, cmp_op, rstrip)", "intent": "Performs element-wise comparison of two string arrays using the comparison operator specified by `cmp_op` . With arguments `a`, `b`, `rstrip`.", "question_id": 21045},
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "DataFrame.swaplevel(i=- 2)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35254},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "operator.__iconcat__(a, b)", "intent": "`a` = iconcat ( a , `b` ) is equivalent to a += b for a and b sequences .", "question_id": 6593},
{"snippet": "base_server.serve_forever(poll_interval=0.5)", "intent": "Handle requests until an explicit shutdown ( ) request . Poll for shutdown every `poll_interval` seconds .", "question_id": 8763},
{"snippet": "traceback.format_stack(limit=None)", "intent": "A shorthand for format_list ( extract_stack ( `f` , `limit` ) ) .", "question_id": 10789},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "DataFrame.sort_index(ascending=True)", "intent": "Sort object by labels ( along an `axis` ) . By default , it sorts in `ascending` order , to sort in descending order , use ascending=False", "question_id": 35034},
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982},
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "numpy.histogramdd(sample, range=None)", "intent": "Compute the multidimensional histogram of some data . With arguments `sample`, `range`.", "question_id": 20895},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "char.multiply(a, i)", "intent": "Return ( `a` * `i` ) , that is string multiple concatenation , element-wise .", "question_id": 17318},
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472},
{"snippet": "email_message.get_content_subtype()", "intent": "Return the message \u2019 s sub-content type .", "question_id": 3257},
{"snippet": "os.path.lexists(path)", "intent": "Return True if `path` refers to an existing path .", "question_id": 7148},
{"snippet": "Series.str.findall(pat)", "intent": "Find all occurrences of pattern or regular expression in the Series/Index . With arguments `pat`.", "question_id": 40958},
{"snippet": "Series.str.rsplit(pat=None)", "intent": "Split strings around given separator/delimiter . The `pat` parameter can be used to split by other characters .", "question_id": 41203},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "calendar.weekday(year, month, day)", "intent": "Returns the `day` of the week ( 0 is Monday ) for `year` ( 1970\u2013\u2026 ) , `month` ( 1\u201312 ) , day ( 1\u201331 ) .", "question_id": 989},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "numpy.histogramdd(sample, range=None)", "intent": "Compute the multidimensional histogram of some data . With arguments `sample`, `range`.", "question_id": 20895},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "imp.find_module(name)", "intent": "Try to find the module `name` .", "question_id": 4763},
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "random.Generator.power(a)", "intent": "Draws samples in [ 0 , 1 ] from `a` power distribution with positive exponent a - 1 .", "question_id": 16090},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "ufunc.reduceat(array, indices, axis=0, dtype=None)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) . With arguments `dtype`.", "question_id": 23911},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "torch.nn.functional.gaussian_nll_loss(input, target, var)", "intent": "Gaussian negative log likelihood loss . With arguments `input`, `target`, `var`.", "question_id": 53352},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "ExtensionArray.astype(dtype)", "intent": "Cast to a NumPy array with \u2018 `dtype` \u2019 .", "question_id": 42663},
{"snippet": "process.terminate()", "intent": "Terminate the process .", "question_id": 6186},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "date.__format__(format)", "intent": "Same as date.strftime ( ) . This makes it possible to specify a `format` string for a date object in formatted string literals and when using str.format ( ) .", "question_id": 2246},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "Styler.format(escape=None)", "intent": "Format the text display value of cells . Using a formatter with HTML `escape` and na_rep .", "question_id": 45086},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "xml.sax.saxutils.XMLGenerator(encoding='iso-8859-1')", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' .", "question_id": 12660},
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223},
{"snippet": "context.exp(x)", "intent": "Returns e ** `x` .", "question_id": 2530},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "DataFrame.plot.scatter(x, y, **kwargs, c=None)", "intent": "Create a scatter plot with varying marker point size and color . With arguments `x`, `y`, `**kwargs`, `c`.", "question_id": 34224},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "ma.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 22287},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "operator.__iconcat__(a, b)", "intent": "`a` = iconcat ( a , `b` ) is equivalent to a += b for a and b sequences .", "question_id": 6593},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "DataFrame.plot.bar(**kwargs)", "intent": "Vertical bar plot . With arguments `**kwargs`.", "question_id": 34110},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "ufunc.reduceat(array, indices)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) .", "question_id": 23907},
{"snippet": "DataFrame.sort_index(ascending=True)", "intent": "Sort object by labels ( along an `axis` ) . By default , it sorts in `ascending` order , to sort in descending order , use ascending=False", "question_id": 35034},
{"snippet": "pandas.read_csv(filepath_or_buffer, sep=NoDefault.no_default)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `sep`.", "question_id": 46055},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "widget.focus(item=None)", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10631},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "property()", "intent": "Return a property attribute .", "question_id": 4085},
{"snippet": "winsound.SND_MEMORY", "intent": "The sound parameter to PlaySound() is a memory image of a WAV file, as a bytes-like object.", "question_id": 12199},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124},
{"snippet": "Series.str.split(expand=False)", "intent": "Split strings around given separator/delimiter . When using expand=True , the split elements will `expand` out into separate columns .", "question_id": 41275},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "pandas.read_csv(filepath_or_buffer, delimiter=None)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `delimiter`.", "question_id": 46036},
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296},
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "math.log2(x)", "intent": "Return the base-2 logarithm of `x` .", "question_id": 5910},
{"snippet": "ma.MaskedArray.__setitem__(indx, value)", "intent": "x.__setitem__ ( i , y ) < == > x [ i ] =y If `value` is masked , masks those locations . With arguments `indx`.", "question_id": 20719},
{"snippet": "Series.swaplevel(i=- 2)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 41411},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "ufunc.reduceat(array, indices)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) .", "question_id": 23907},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "POP3.noop()", "intent": "Do nothing .", "question_id": 7614},
{"snippet": "email_message.get_content_subtype()", "intent": "Return the message \u2019 s sub-content type .", "question_id": 3257},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "polynomial.chebyshev.chebtrim(c)", "intent": "Remove \u201c small \u201d \u201c trailing \u201d coefficients from a polynomial . With arguments `c`.", "question_id": 21491},
{"snippet": "py_compile.main()", "intent": "Compile several source files .", "question_id": 7835},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "bisect.bisect_right(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 858},
{"snippet": "linalg.tensorsolve(a, b)", "intent": "Solve the tensor equation `a` x = `b` for x .", "question_id": 19418},
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "sequence_matcher.ratio()", "intent": "Return a measure of the sequences \u2019 similarity as a float in the range [ 0 , 1 ] .", "question_id": 2687},
{"snippet": "torch.nn.functional.gaussian_nll_loss(input, target, var)", "intent": "Gaussian negative log likelihood loss . With arguments `input`, `target`, `var`.", "question_id": 53352},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "test.support.script_helper.make_script(script_dir, script_basename, source, omit_suffix=False)", "intent": "Create script containing `source` in path `script_dir` and `script_basename` . If `omit_suffix` is False , append .py to the name .", "question_id": 10309},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "polynomial.polyutils.trimcoef(c, tol=0)", "intent": "Remove \u201c small \u201d \u201c trailing \u201d coefficients from a polynomial . \u201c Small \u201d means \u201c small in absolute value \u201d and is controlled by the parameter `tol` ; \u201c trailing \u201d means highest order coefficient ( s ) , e.g. , in [ 0 , 1 , 1 , 0 , 0 ] ( which represents 0 + x + x * * 2 + 0 * x * * 3 + 0 * x * * 4 ) both the 3-rd and 4-th order coefficients would be \u201c trimmed . \u201d With arguments `c`.", "question_id": 22535},
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324},
{"snippet": "PurePath.match(pattern)", "intent": "Match this path against the provided glob-style `pattern` .", "question_id": 7258},
{"snippet": "Series.str.rsplit(pat=None)", "intent": "Split strings around given separator/delimiter . The `pat` parameter can be used to split by other characters .", "question_id": 41203},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022},
{"snippet": "numpy.info(toplevel='numpy')", "intent": "Get help information for a function , class , or module . With arguments `toplevel`.", "question_id": 22067},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "errno.EUSERS", "intent": "Too many users", "question_id": 3592},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "random.Generator.power(a)", "intent": "Draws samples in [ 0 , 1 ] from `a` power distribution with positive exponent a - 1 .", "question_id": 16090},
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296},
{"snippet": "numpy.sign(x, /, signature)", "intent": "Returns an element-wise indication of the sign of a number . The sign function returns -1 if `x` < 0 , 0 if x==0 , 1 if x > 0. nan is returned for nan inputs . With arguments `/`, `signature`.", "question_id": 18231},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "ConfigParser.BOOLEAN_STATES", "intent": "By default when using getboolean(), config parsers consider the following values True: '1', 'yes', 'true', 'on' and the following values False: '0', 'no', 'false', 'off'.", "question_id": 1493},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "os.supports_fd", "intent": "A Set object indicating which functions in the os module permit specifying their path parameter as an open file descriptor.", "question_id": 6949},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "ufunc.reduceat(array, indices, dtype=None)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) . With arguments `dtype`.", "question_id": 23909},
{"snippet": "numpy.fromstring(string, count=- 1)", "intent": "A new 1-D array initialized from text data in a `string` . With arguments `count`.", "question_id": 21478},
{"snippet": "Tensor.div_(value)", "intent": "In-place version of div ( ) With arguments `value`.", "question_id": 48681},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "bool()", "intent": "Return a Boolean value , i.e .", "question_id": 3979},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "sys.call_tracing(func, args)", "intent": "Call `func` ( *args ) , while tracing is enabled . With arguments `args`.", "question_id": 9772},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "pandas.read_csv(filepath_or_buffer, delimiter=None)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `delimiter`.", "question_id": 46036},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "numpy.angle(z)", "intent": "Return the angle of the complex argument . With arguments `z`.", "question_id": 19435},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "base_http_request_handler.handle_expect_100()", "intent": "When a HTTP/1.1 compliant server receives an Expect : 100-continue request header it responds back with a 100 Continue followed by 200 OK headers .", "question_id": 4636},
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735},
{"snippet": "list(iterable)", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4045},
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474},
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238},
{"snippet": "email_message.__str__()", "intent": "Equivalent to as_string ( policy=self.policy.clone ( utf8=True ) ) .", "question_id": 3232},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "numpy.fromstring(string, count=- 1)", "intent": "A new 1-D array initialized from text data in a `string` . With arguments `count`.", "question_id": 21478},
{"snippet": "date.ctime()", "intent": "Return a string representing the date , for example date ( 2002 , 12 , 4 ) .ctime ( ) == 'Wed Dec 4 00:00:00 2002 ' .", "question_id": 2244},
{"snippet": "Unpacker.done()", "intent": "Indicates unpack completion .", "question_id": 12289},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "ma.append(a, b)", "intent": "Append values to the end of an array . With arguments `a`, `b`.", "question_id": 23229},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "property()", "intent": "Return a property attribute .", "question_id": 4085},
{"snippet": "distutils.system_info.get_standard_file(fname)", "intent": "Returns a list of files named \u2018 `fname` \u2019 from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ \u2018 HOME \u2019 ] ) 3 ) Local directory", "question_id": 22646},
{"snippet": "urllib.request.Request(url)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL .", "question_id": 11768},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "torch.nn.utils.rnn.pad_sequence(sequences, batch_first=False)", "intent": "Pad a list of variable length Tensors with `padding_value` For example , if the input is list of `sequences` with size L x * and if `batch_first` is False , and T x B x * otherwise .", "question_id": 48320},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "xml.etree.ElementTree.fromstring(text, parser=None)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data . `parser` is an optional parser instance .", "question_id": 12438},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "traceback.format_stack(limit=None)", "intent": "A shorthand for format_list ( extract_stack ( `f` , `limit` ) ) .", "question_id": 10789},
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "email_message.get_content_subtype()", "intent": "Return the message \u2019 s sub-content type .", "question_id": 3257},
{"snippet": "Match.string", "intent": "The string passed to match() or search().", "question_id": 8014},
{"snippet": "globals()", "intent": "Return a dictionary representing the current global symbol table .", "question_id": 4027},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "base_server.serve_forever(poll_interval=0.5)", "intent": "Handle requests until an explicit shutdown ( ) request . Poll for shutdown every `poll_interval` seconds .", "question_id": 8763},
{"snippet": "numpy.histogramdd(sample, range=None)", "intent": "Compute the multidimensional histogram of some data . With arguments `sample`, `range`.", "question_id": 20895},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "char.multiply(a, i)", "intent": "Return ( `a` * `i` ) , that is string multiple concatenation , element-wise .", "question_id": 17318},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "ctypes.c_int16", "intent": "Represents the C 16-bit signed int datatype.", "question_id": 1863},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42129},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "Series.swaplevel(i=- 2)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 41411},
{"snippet": "bool()", "intent": "Return a Boolean value , i.e .", "question_id": 3979},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825},
{"snippet": "Series.str.rsplit(pat=None)", "intent": "Split strings around given separator/delimiter . The `pat` parameter can be used to split by other characters .", "question_id": 41203},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "operator.__iconcat__(a, b)", "intent": "`a` = iconcat ( a , `b` ) is equivalent to a += b for a and b sequences .", "question_id": 6593},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "struct.Struct(format)", "intent": "Return a new Struct object which writes and reads binary data according to the `format` string format .", "question_id": 9558},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "os.supports_fd", "intent": "A Set object indicating which functions in the os module permit specifying their path parameter as an open file descriptor.", "question_id": 6949},
{"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "Series.str.cat(join='left')", "intent": "Concatenate strings in the Series/Index with given separator . With arguments `join`.", "question_id": 40862},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "torch.nn.RReLU(lower=0.125, upper=0.3333333333333333, inplace=False)", "intent": "Applies the randomized leaky rectified liner unit function , element-wise , as described in the paper : where aaa is randomly sampled from uniform distribution U ( `lower` , `upper` ) \\mathcal { U } ( \\text { lower } , \\text { upper } ) U ( lower , upper ) . With arguments `inplace`.", "question_id": 50709},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "DataFrameGroupBy.sample(replace=False)", "intent": "Return a random sample of items from each group . With arguments `replace`.", "question_id": 43699},
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899},
{"snippet": "Series.swaplevel(i=- 2)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 41411},
{"snippet": "resource.getpagesize()", "intent": "Returns the number of bytes in a system page .", "question_id": 8096},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "numpy.fromstring(string, count=- 1)", "intent": "A new 1-D array initialized from text data in a `string` . With arguments `count`.", "question_id": 21478},
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`.", "question_id": 66},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "distutils.system_info.get_standard_file(fname)", "intent": "Returns a list of files named \u2018 `fname` \u2019 from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ \u2018 HOME \u2019 ] ) 3 ) Local directory", "question_id": 22646},
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032},
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "py_compile.main()", "intent": "Compile several source files .", "question_id": 7835},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "os.path.splitext(path)", "intent": "Split the pathname `path` into a pair ( root , ext ) such that root + ext == path , and ext is empty or begins with a period and contains at most one period .", "question_id": 7171},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "wsgiref.util.application_uri(environ)", "intent": "Similar to request_uri ( ) , except that the PATH_INFO and QUERY_STRING variables are ignored . With arguments `environ`.", "question_id": 12213},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "xml.sax.saxutils.escape(data)", "intent": "Escape ' & ' , ' < ' , and ' > ' in a string of `data` .", "question_id": 12652},
{"snippet": "bisect.insort_left(a, x, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 866},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "torch.mm(input, mat2, out=None)", "intent": "Performs a matrix multiplication of the matrices `input` and `mat2` . If input is a ( n\u00d7m ) ( n \\times m ) ( n\u00d7m ) tensor , mat2 is a ( m\u00d7p ) ( m \\times p ) ( m\u00d7p ) tensor , `out` will be a ( n\u00d7p ) ( n \\times p ) ( n\u00d7p ) tensor .", "question_id": 51902},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111},
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223},
{"snippet": "distutils.system_info.get_standard_file(fname)", "intent": "Returns a list of files named \u2018 `fname` \u2019 from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ \u2018 HOME \u2019 ] ) 3 ) Local directory", "question_id": 22646},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "site.getuserbase()", "intent": "Return the path of the user base directory , USER_BASE .", "question_id": 8410},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "Tensor.div_(value)", "intent": "In-place version of div ( ) With arguments `value`.", "question_id": 48681},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "HTTPHandler.http_open(req)", "intent": "Send an HTTP request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11871},
{"snippet": "chararray.find(sub)", "intent": "For each element , return the lowest index in the string where substring `sub` is found .", "question_id": 16811},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "io.StringIO()", "intent": "An in-memory stream for text I/O .", "question_id": 5164},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42128},
{"snippet": "Series.str.rsplit(pat=None)", "intent": "Split strings around given separator/delimiter . The `pat` parameter can be used to split by other characters .", "question_id": 41203},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "torch.lstsq(input, A)", "intent": "Computes the solution to the least squares and least norm problems for a full rank matrix AAA of size ( m\u00d7n ) ( m \\times n ) ( m\u00d7n ) and a matrix BBB of size ( m\u00d7k ) ( m \\times k ) ( m\u00d7k ) . With arguments `input`, `A`.", "question_id": 51237},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "datetime.date(year, month, day)", "intent": "All arguments are required . With arguments `year`, `month`, `day`.", "question_id": 2218},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`.", "question_id": 66},
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "pandas.read_csv(filepath_or_buffer, delimiter=None)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `delimiter`.", "question_id": 46036},
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "torch.nn.utils.rnn.pad_sequence(sequences, batch_first=False)", "intent": "Pad a list of variable length Tensors with `padding_value` For example , if the input is list of `sequences` with size L x * and if `batch_first` is False , and T x B x * otherwise .", "question_id": 48320},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "pandas.read_csv(filepath_or_buffer, delimiter=None)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `delimiter`.", "question_id": 46036},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "os.supports_fd", "intent": "A Set object indicating which functions in the os module permit specifying their path parameter as an open file descriptor.", "question_id": 6949},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "datetime.second", "intent": "In range(60).", "question_id": 2277},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "Series.str.rsplit(pat=None)", "intent": "Split strings around given separator/delimiter . The `pat` parameter can be used to split by other characters .", "question_id": 41203},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "date.ctime()", "intent": "Return a string representing the date , for example date ( 2002 , 12 , 4 ) .ctime ( ) == 'Wed Dec 4 00:00:00 2002 ' .", "question_id": 2244},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "Series.swaplevel(i=- 2)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 41411},
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "numpy.insert(arr, obj, values)", "intent": "Insert `values` along the given `axis` before the given indices . Note that for higher dimensional inserts obj=0 behaves very different from obj= [ 0 ] just like `arr` [ : ,0 , : ] = values is different from arr [ : , [ 0 ] , : ] = values . With arguments `obj`.", "question_id": 20396},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "polynomial.polynomial.polygrid3d(x, y, z, c)", "intent": "Evaluate a 3-D polynomial on the Cartesian product of `x` , `y` and `z` . where the points ( a , b , `c` ) consist of all triples formed by taking a from x , b from y , and c from z .", "question_id": 22496},
{"snippet": "Tensor.div_(value)", "intent": "In-place version of div ( ) With arguments `value`.", "question_id": 48681},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "Series.str.rsplit(pat=None)", "intent": "Split strings around given separator/delimiter . The `pat` parameter can be used to split by other characters .", "question_id": 41203},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "importlib.import_module(name)", "intent": "Import a module . The `name` argument specifies what module to import in absolute or relative terms ( e.g .", "question_id": 4793},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "io.StringIO()", "intent": "An in-memory stream for text I/O .", "question_id": 5164},
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134},
{"snippet": "random.Generator.power(a)", "intent": "Draws samples in [ 0 , 1 ] from `a` power distribution with positive exponent a - 1 .", "question_id": 16090},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "future.cancelled()", "intent": "Return True if the call was successfully cancelled .", "question_id": 1469},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "msvcrt.getwch()", "intent": "Wide char variant of getch ( ) , returning a Unicode value .", "question_id": 6157},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "matlib.repmat(a, m, n)", "intent": "Repeat `a` 0-D to 2-D array or matrix MxN times . With arguments `m`, `n`.", "question_id": 18544},
{"snippet": "char.compare_chararrays(a, b, cmp_op, rstrip)", "intent": "Performs element-wise comparison of two string arrays using the comparison operator specified by `cmp_op` . With arguments `a`, `b`, `rstrip`.", "question_id": 21045},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "os.rename(src, dst)", "intent": "Rename the file or directory `src` to `dst` .", "question_id": 6892},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "subprocess.PIPE", "intent": "Special value that can be used as the stdin, stdout or stderr argument to Popen and indicates that a pipe to the standard stream should be opened.", "question_id": 9584},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "traceback.format_stack(limit=None)", "intent": "A shorthand for format_list ( extract_stack ( `f` , `limit` ) ) .", "question_id": 10789},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735},
{"snippet": "wsgiref.handlers.IISCGIHandler", "intent": "A specialized alternative to CGIHandler, for use when deploying on Microsoft\u2019s IIS web server, without having set the config allowPathInfo option (IIS>=7) or metabase allowPathInfoForScriptMappings (IIS<7).", "question_id": 12237},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "Tensor.div_(value)", "intent": "In-place version of div ( ) With arguments `value`.", "question_id": 48681},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "chararray.find(sub)", "intent": "For each element , return the lowest index in the string where substring `sub` is found .", "question_id": 16811},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "Tensor.div_(value)", "intent": "In-place version of div ( ) With arguments `value`.", "question_id": 48681},
{"snippet": "base64.a85decode(b, ignorechars=b' \\t\\n\\r\\v')", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `ignorechars` should be a bytes-like object or ASCII string containing characters to ignore from the input .", "question_id": 739},
{"snippet": "char.multiply(a, i)", "intent": "Return ( `a` * `i` ) , that is string multiple concatenation , element-wise .", "question_id": 17318},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "filecmp.dircmp(a, b)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . With arguments `b`.", "question_id": 3760},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735},
{"snippet": "polynomial.polyutils.trimcoef(c, tol=0)", "intent": "Remove \u201c small \u201d \u201c trailing \u201d coefficients from a polynomial . \u201c Small \u201d means \u201c small in absolute value \u201d and is controlled by the parameter `tol` ; \u201c trailing \u201d means highest order coefficient ( s ) , e.g. , in [ 0 , 1 , 1 , 0 , 0 ] ( which represents 0 + x + x * * 2 + 0 * x * * 3 + 0 * x * * 4 ) both the 3-rd and 4-th order coefficients would be \u201c trimmed . \u201d With arguments `c`.", "question_id": 22535},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564},
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903},
{"snippet": "torch.repeat_interleave(input, repeats)", "intent": "Repeat elements of a tensor . If the `repeats` is tensor ( [ n1 , n2 , n3 , \u2026 ] ) , then the output will be tensor ( [ 0 , 0 , \u2026 , 1 , 1 , \u2026 , 2 , 2 , \u2026 , \u2026 ] ) where 0 appears n1 times , 1 appears n2 times , 2 appears n3 times , etc . With arguments `input`.", "question_id": 50355},
{"snippet": "softplus.prune(t)", "intent": "Computes and returns a pruned version of input tensor `t` according to the pruning rule specified in compute_mask ( ) .", "question_id": 50894},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42128},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "test.support.script_helper.spawn_python(*args, **kw, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`, `stdout`, `stderr`.", "question_id": 10306},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "Timedelta.nanoseconds", "intent": "Return the number of nanoseconds (n), where 0 <= n < 1 microsecond.", "question_id": 42135},
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445},
{"snippet": "FTP.retrlines(cmd)", "intent": "Retrieve a file or directory listing in ASCII transfer mode . `cmd` should be an appropriate RETR command ( see retrbinary ( ) ) or a command such as LIST or NLST ( usually just the string 'LIST ' ) .", "question_id": 3930},
{"snippet": "formatter.pop_style(n=1)", "intent": "Pop the last `n` style specifications passed to push_style ( ) .", "question_id": 3834},
{"snippet": "winreg.DeleteKeyEx(key, sub_key)", "intent": "Deletes the specified `key` . `sub_key` is a string that must be a subkey of the key identified by the key parameter .", "question_id": 12128},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "Index.set_value(arr, key, value)", "intent": "Fast lookup of `value` from 1-dimensional ndarray . With arguments `arr`, `key`.", "question_id": 36973},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207},
{"snippet": "numpy.vdot(a, b)", "intent": "Return the dot product of two vectors . The vdot ( `a` , `b` ) function handles complex numbers differently than dot ( a , b ) .", "question_id": 20244},
{"snippet": "Series.str.rsplit(pat=None)", "intent": "Split strings around given separator/delimiter . The `pat` parameter can be used to split by other characters .", "question_id": 41203},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "base_server.serve_forever(poll_interval=0.5)", "intent": "Handle requests until an explicit shutdown ( ) request . Poll for shutdown every `poll_interval` seconds .", "question_id": 8763},
{"snippet": "distutils.system_info.get_standard_file(fname)", "intent": "Returns a list of files named \u2018 `fname` \u2019 from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ \u2018 HOME \u2019 ] ) 3 ) Local directory", "question_id": 22646},
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "DataFrame.reset_index(level=None)", "intent": "Reset the index , or a `level` of it .", "question_id": 34634},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "set.add(elem)", "intent": "Add element `elem` to the set .", "question_id": 9462},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "chararray.find(sub)", "intent": "For each element , return the lowest index in the string where substring `sub` is found .", "question_id": 16811},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42129},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "random.RandomState.choice(a, size=None)", "intent": "Generates `a` random sample from a given 1-D array Generate a uniform random sample from np.arange ( 5 ) of `size` 3 :", "question_id": 18903},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "torch.vander(x)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 .", "question_id": 48635},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "HTTPHandler.http_open(req)", "intent": "Send an HTTP request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11871},
{"snippet": "Unpacker.done()", "intent": "Indicates unpack completion .", "question_id": 12289},
{"snippet": "datetime.ctime()", "intent": "Return a string representing the date and time , for example datetime ( 2002 , 12 , 4 , 20 , 30 , 40 ) .ctime ( ) == 'Wed Dec 4 20:30:40 2002 ' .", "question_id": 2311},
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324},
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "base64.a85decode(b, ignorechars=b' \\t\\n\\r\\v')", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `ignorechars` should be a bytes-like object or ASCII string containing characters to ignore from the input .", "question_id": 739},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "polynomial.polyutils.mapdomain(x, old, new)", "intent": "Apply linear map to input points . The linear map offset + scale * `x` that maps the domain `old` to the domain `new` is applied to the points x .", "question_id": 22969},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "numpy.gradient(f, *varargs)", "intent": "Return the gradient of an N-dimensional array . By substituting \\ ( `f` ( x_ { i } + h_ { d } ) \\ ) and \\ ( f ( x_ { i } - h_ { s } ) \\ ) with their Taylor series expansion , this translates into solving the following the linear system : With arguments `*varargs`.", "question_id": 17438},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "formatter.pop_style(n=1)", "intent": "Pop the last `n` style specifications passed to push_style ( ) .", "question_id": 3834},
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207},
{"snippet": "char.compare_chararrays(a, b, cmp_op, rstrip)", "intent": "Performs element-wise comparison of two string arrays using the comparison operator specified by `cmp_op` . With arguments `a`, `b`, `rstrip`.", "question_id": 21045},
{"snippet": "re.ASCII", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7925},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "numpy.info(toplevel='numpy')", "intent": "Get help information for a function , class , or module . With arguments `toplevel`.", "question_id": 22067},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "email_message.__str__()", "intent": "Equivalent to as_string ( policy=self.policy.clone ( utf8=True ) ) .", "question_id": 3232},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "tuple()", "intent": "Tuples may be constructed in a number of ways :", "question_id": 9161},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "matlib.repmat(a, m, n)", "intent": "Repeat `a` 0-D to 2-D array or matrix MxN times . With arguments `m`, `n`.", "question_id": 18544},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "Series.str.rsplit(pat=None)", "intent": "Split strings around given separator/delimiter . The `pat` parameter can be used to split by other characters .", "question_id": 41203},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472},
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "tkinter.tix.Select", "intent": "The Select widget is a container of button subwidgets.", "question_id": 10561},
{"snippet": "DataFrame.plot.scatter(x, y, **kwargs, c=None)", "intent": "Create a scatter plot with varying marker point size and color . With arguments `x`, `y`, `**kwargs`, `c`.", "question_id": 34224},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "pandas.arrays.DatetimeArray()", "intent": "Pandas ExtensionArray for tz-naive or tz-aware datetime data .", "question_id": 43115},
{"snippet": "MultiIndex.from_frame(df, names=None)", "intent": "Make a MultiIndex from a DataFrame . Using explicit `names` , instead of the column names With arguments `df`.", "question_id": 37554},
{"snippet": "numpy.mean(a, where=<no value>)", "intent": "Compute the arithmetic mean along the specified `axis` . Specifying `a` higher-precision accumulator using the `dtype` keyword can alleviate this issue . Specifying a `where` argument : > > > a = np.array ( [ [ 5 , 9 , 13 ] , [ 14 , 10 , 12 ] , [ 11 , 15 , 19 ] ] ) > > > np.mean ( a ) 12.0 > > > np.mean ( a , where= [ [ True ] , [ False ] , [ False ] ] ) 9.0", "question_id": 17639},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735},
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "PurePath.match(pattern)", "intent": "Match this path against the provided glob-style `pattern` .", "question_id": 7258},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "polynomial.chebyshev.chebtrim(c)", "intent": "Remove \u201c small \u201d \u201c trailing \u201d coefficients from a polynomial . With arguments `c`.", "question_id": 21491},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "Series.str.cat(join='left')", "intent": "Concatenate strings in the Series/Index with given separator . With arguments `join`.", "question_id": 40862},
{"snippet": "context.get(var)", "intent": "Return the value for `var` if var has the value in the context object .", "question_id": 1655},
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026},
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474},
{"snippet": "torch.svd_lowrank(A, q=6)", "intent": "Return the singular value decomposition ( U , S , V ) of a matrix , batches of matrices , or a sparse matrix AAA such that A\u2248Udiag ( S ) VTA \\approx U diag ( S ) V^TA\u2248Udiag ( S ) VT . With arguments `A`, `q`.", "question_id": 51147},
{"snippet": "torch.nn.MultiMarginLoss(p=1)", "intent": "Creates a criterion that optimizes a multi-class classification hinge loss ( margin-based loss ) between input xxx ( a 2D mini-batch Tensor ) and output yyy ( which is a 1D tensor of target class indices , 0\u2264y\u2264x.size ( 1 ) \u221210 \\leq y \\leq \\text { x.size } ( 1 ) -10\u2264y\u2264x.size ( 1 ) \u22121 ) : With arguments `p`.", "question_id": 48060},
{"snippet": "text_calendar.pryear(theyear, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`.", "question_id": 948},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "filecmp.dircmp(a, b)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . With arguments `b`.", "question_id": 3760},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020},
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42128},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "torch.nn.functional.tanh(input)", "intent": "Applies element-wise , Tanh ( x ) =tanh\u2061 ( x ) =exp\u2061 ( x ) \u2212exp\u2061 ( \u2212x ) exp\u2061 ( x ) +exp\u2061 ( \u2212x ) \\text { Tanh } ( x ) = \\tanh ( x ) = \\frac { \\exp ( x ) - \\exp ( -x ) } { \\exp ( x ) + \\exp ( -x ) } Tanh ( x ) =tanh ( x ) =exp ( x ) +exp ( \u2212x ) exp ( x ) \u2212exp ( \u2212x ) \u200b With arguments `input`.", "question_id": 49901},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "curses.putp(str)", "intent": "Equivalent to tputs ( `str` , 1 , putchar ) ; emit the value of a specified terminfo capability for the current terminal .", "question_id": 1968},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "urllib.parse.urljoin(base, url)", "intent": "Construct a full ( \u201c absolute \u201d ) URL by combining a \u201c `base` URL \u201d ( base ) with another URL ( `url` ) .", "question_id": 11695},
{"snippet": "Option.TYPED_ACTIONS", "intent": "\u201ctyped\u201d actions are additionally listed here.", "question_id": 6653},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026},
{"snippet": "datetime.fold", "intent": "In [0, 1].", "question_id": 2280},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "ufunc.reduceat(array, indices, dtype=None)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) . With arguments `dtype`.", "question_id": 23909},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "operator.__iconcat__(a, b)", "intent": "`a` = iconcat ( a , `b` ) is equivalent to a += b for a and b sequences .", "question_id": 6593},
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026},
{"snippet": "string.capwords(s)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . With arguments `s`.", "question_id": 9529},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "torch.repeat_interleave(input, repeats)", "intent": "Repeat elements of a tensor . If the `repeats` is tensor ( [ n1 , n2 , n3 , \u2026 ] ) , then the output will be tensor ( [ 0 , 0 , \u2026 , 1 , 1 , \u2026 , 2 , 2 , \u2026 , \u2026 ] ) where 0 appears n1 times , 1 appears n2 times , 2 appears n3 times , etc . With arguments `input`.", "question_id": 50355},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "torch.nn.RReLU(lower=0.125)", "intent": "Applies the randomized leaky rectified liner unit function , element-wise , as described in the paper : where aaa is randomly sampled from uniform distribution U ( `lower` , `upper` ) \\mathcal { U } ( \\text { lower } , \\text { upper } ) U ( lower , upper ) .", "question_id": 50703},
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "os.supports_fd", "intent": "A Set object indicating which functions in the os module permit specifying their path parameter as an open file descriptor.", "question_id": 6949},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "filter.filename_pattern", "intent": "Filename pattern of the filter (str).", "question_id": 10865},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735},
{"snippet": "re.finditer(pattern, string)", "intent": "Return an iterator yielding match objects over all non-overlapping matches for the RE `pattern` in `string` .", "question_id": 7949},
{"snippet": "datetime.ctime()", "intent": "Return a string representing the date and time , for example datetime ( 2002 , 12 , 4 , 20 , 30 , 40 ) .ctime ( ) == 'Wed Dec 4 20:30:40 2002 ' .", "question_id": 2311},
{"snippet": "filecmp.dircmp(a, b)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . With arguments `b`.", "question_id": 3760},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "Series.str.rsplit(pat=None)", "intent": "Split strings around given separator/delimiter . The `pat` parameter can be used to split by other characters .", "question_id": 41203},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247},
{"snippet": "sys._debugmallocstats()", "intent": "Print low-level information to stderr about the state of CPython \u2019 s memory allocator .", "question_id": 9777},
{"snippet": "ctypes.c_int16", "intent": "Represents the C 16-bit signed int datatype.", "question_id": 1863},
{"snippet": "torch.nn.functional.pixel_shuffle(input, upscale_factor)", "intent": "Rearranges elements in a tensor of shape ( \u2217 , C\u00d7r2 , H , W ) ( * , C \\times r^2 , H , W ) ( \u2217 , C\u00d7r2 , H , W ) to a tensor of shape ( \u2217 , C , H\u00d7r , W\u00d7r ) ( * , C , H \\times r , W \\times r ) ( \u2217 , C , H\u00d7r , W\u00d7r ) , where r is the `upscale_factor` . With arguments `input`.", "question_id": 51421},
{"snippet": "torch.vander(x)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 .", "question_id": 48635},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "DataFrame.swaplevel(i=- 2)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35254},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "email_message.__str__()", "intent": "Equivalent to as_string ( policy=self.policy.clone ( utf8=True ) ) .", "question_id": 3232},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072},
{"snippet": "DataFrame.merge(right, '_y'), how='inner')", "intent": "Merge DataFrame or named Series objects with a database-style join . Merge DataFrames df1 and df2 with specified left and `right` suffixes appended to any overlapping columns . With arguments `'_y')`, `how`.", "question_id": 33800},
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640},
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026},
{"snippet": "traceback.format_stack(limit=None)", "intent": "A shorthand for format_list ( extract_stack ( `f` , `limit` ) ) .", "question_id": 10789},
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640},
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "HTTPHandler.http_open(req)", "intent": "Send an HTTP request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11871},
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435},
{"snippet": "distutils.system_info.get_standard_file(fname)", "intent": "Returns a list of files named \u2018 `fname` \u2019 from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ \u2018 HOME \u2019 ] ) 3 ) Local directory", "question_id": 22646},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "numpy.trace(a)", "intent": "Return the sum along diagonals of the array . If `a` is 2-D , the sum along its diagonal with the given `offset` is returned , i.e. , the sum of elements a [ i , i+offset ] for all i .", "question_id": 24541},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "linalg.tensorsolve(a, b)", "intent": "Solve the tensor equation `a` x = `b` for x .", "question_id": 19418},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`.", "question_id": 66},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "test.support.script_helper.make_script(script_dir, script_basename, source, omit_suffix=False)", "intent": "Create script containing `source` in path `script_dir` and `script_basename` . If `omit_suffix` is False , append .py to the name .", "question_id": 10309},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "ZipInfo.flag_bits", "intent": "ZIP flag bits.", "question_id": 12872},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "io.StringIO()", "intent": "An in-memory stream for text I/O .", "question_id": 5164},
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032},
{"snippet": "ufunc.reduceat(array, indices, dtype=None)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) . With arguments `dtype`.", "question_id": 23909},
{"snippet": "test_loader.testNamePatterns", "intent": "List of Unix shell-style wildcard test name patterns that test methods have to match to be included in test suites (see -v option).", "question_id": 11506},
{"snippet": "ufunc.reduceat(array, indices, dtype=None)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) . With arguments `dtype`.", "question_id": 23909},
{"snippet": "ma.cov(x)", "intent": "Estimate the covariance matrix . If `x` and `y` have the same shape , a common mask is allocated : if x [ i , j ] is masked , then y [ i , j ] will also be masked .", "question_id": 16259},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "curses.init_color(color_number, r, g, b)", "intent": "Change the definition of a color , taking the number of the color to be changed followed by three RGB values ( for the amounts of red , green , and blue components ) . The value of `color_number` must be between 0 and COLORS . Each of `r` , `g` , `b` , must be a value between 0 and 1000 .", "question_id": 1945},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "DataFrame.sort_index(ascending=True)", "intent": "Sort object by labels ( along an `axis` ) . By default , it sorts in `ascending` order , to sort in descending order , use ascending=False", "question_id": 35034},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "Match.string", "intent": "The string passed to match() or search().", "question_id": 8014},
{"snippet": "date.ctime()", "intent": "Return a string representing the date , for example date ( 2002 , 12 , 4 ) .ctime ( ) == 'Wed Dec 4 00:00:00 2002 ' .", "question_id": 2244},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "bisect.bisect_right(a, x, lo=0, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 859},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "recarray.searchsorted(v)", "intent": "Find indices where elements of `v` should be inserted in a to maintain order .", "question_id": 18001},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "random.choice(a, replace=True)", "intent": "Generates `a` random sample from a given 1-D array With arguments `replace`.", "question_id": 18794},
{"snippet": "distutils.system_info.get_standard_file(fname)", "intent": "Returns a list of files named \u2018 `fname` \u2019 from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ \u2018 HOME \u2019 ] ) 3 ) Local directory", "question_id": 22646},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "pandas.read_csv(filepath_or_buffer, delimiter=None)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `delimiter`.", "question_id": 46036},
{"snippet": "DataFrameGroupBy.rank(ascending=True)", "intent": "Provide the rank of values within each group . With arguments `ascending`.", "question_id": 43665},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "writer.send_flowing_data(data)", "intent": "Output character `data` which may be word-wrapped and re-flowed as needed .", "question_id": 3850},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "abs(x)", "intent": "Return the absolute value of a number . With arguments `x`.", "question_id": 3973},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "polynomial.polyutils.mapparms(old, new)", "intent": "Linear map parameters between domains . Return the parameters of the linear map offset + scale * x that maps `old` to `new` such that old [ i ] - > new [ i ] , i = 0 , 1 .", "question_id": 20245},
{"snippet": "ZipInfo.flag_bits", "intent": "ZIP flag bits.", "question_id": 12872},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "math.log2(x)", "intent": "Return the base-2 logarithm of `x` .", "question_id": 5910},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "pandas.read_csv(filepath_or_buffer, names=NoDefault.no_default)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `names`.", "question_id": 46048},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "PurePath.match(pattern)", "intent": "Match this path against the provided glob-style `pattern` .", "question_id": 7258},
{"snippet": "torch.lstsq(input, A)", "intent": "Computes the solution to the least squares and least norm problems for a full rank matrix AAA of size ( m\u00d7n ) ( m \\times n ) ( m\u00d7n ) and a matrix BBB of size ( m\u00d7k ) ( m \\times k ) ( m\u00d7k ) . With arguments `input`, `A`.", "question_id": 51237},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "stat.S_ISGID", "intent": "Set-group-ID bit.", "question_id": 9095},
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "tkinter.tix.Select", "intent": "The Select widget is a container of button subwidgets.", "question_id": 10561},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "mmap.mmap(fileno, length, access=ACCESS_DEFAULT)", "intent": "( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object . With arguments `access`.", "question_id": 5982},
{"snippet": "torch.vander(x)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 .", "question_id": 48635},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "py_compile.main()", "intent": "Compile several source files .", "question_id": 7835},
{"snippet": "SimpleQueue.put_nowait(item)", "intent": "Equivalent to put ( `item` ) , provided for compatibility with Queue.put_nowait ( ) .", "question_id": 7867},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "ma.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 22287},
{"snippet": "linalg.eigvalsh(a, UPLO='L')", "intent": "Compute the eigenvalues of `a` complex Hermitian or real symmetric matrix . With arguments `UPLO`.", "question_id": 17352},
{"snippet": "ufunc.reduceat(array, indices)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) .", "question_id": 23907},
{"snippet": "re.LOCALE", "intent": "Make \\w, \\W, \\b, \\B and case-insensitive matching dependent on the current locale.", "question_id": 7930},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435},
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "curses.ascii.isdigit(c)", "intent": "Checks for an ASCII decimal digit , ' 0 ' through ' 9 ' . This is equivalent to `c` in string.digits .", "question_id": 1904},
{"snippet": "random.Generator.power(a)", "intent": "Draws samples in [ 0 , 1 ] from `a` power distribution with positive exponent a - 1 .", "question_id": 16090},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "date.ctime()", "intent": "Return a string representing the date , for example date ( 2002 , 12 , 4 ) .ctime ( ) == 'Wed Dec 4 00:00:00 2002 ' .", "question_id": 2244},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "formatter.pop_style(n=1)", "intent": "Pop the last `n` style specifications passed to push_style ( ) .", "question_id": 3834},
{"snippet": "Series.swaplevel(i=- 2)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 41411},
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "torch.lstsq(input, A)", "intent": "Computes the solution to the least squares and least norm problems for a full rank matrix AAA of size ( m\u00d7n ) ( m \\times n ) ( m\u00d7n ) and a matrix BBB of size ( m\u00d7k ) ( m \\times k ) ( m\u00d7k ) . With arguments `input`, `A`.", "question_id": 51237},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "datetime.ctime()", "intent": "Return a string representing the date and time , for example datetime ( 2002 , 12 , 4 , 20 , 30 , 40 ) .ctime ( ) == 'Wed Dec 4 20:30:40 2002 ' .", "question_id": 2311},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "DataFrame.at_time(time)", "intent": "Select values at particular `time` of day ( e.g. , 9:30AM ) .", "question_id": 32400},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "bisect.insort_left(a, x, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 866},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "re.ASCII", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7925},
{"snippet": "Series.str.cat(join='left')", "intent": "Concatenate strings in the Series/Index with given separator . With arguments `join`.", "question_id": 40862},
{"snippet": "imp.find_module(name)", "intent": "Try to find the module `name` .", "question_id": 4763},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "numpy.flip(m)", "intent": "Reverse the order of elements in an array along the given `axis` . flip ( `m` , 0 ) is equivalent to flipud ( m ) .", "question_id": 23988},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "context.get(var)", "intent": "Return the value for `var` if var has the value in the context object .", "question_id": 1655},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223},
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42128},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "test_case.assertRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11441},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "torch.linalg.solve(A, B)", "intent": "Computes the solution of a square system of linear equations with a unique solution . Letting K\\mathbb { K } K be R\\mathbb { R } R or C\\mathbb { C } C , this function computes the solution X\u2208Kn\u00d7kX \\in \\mathbb { K } ^ { n \\times k } X\u2208Kn\u00d7k of the linear system associated to A\u2208Kn\u00d7n , B\u2208Km\u00d7kA \\in \\mathbb { K } ^ { n \\times n } , `B` \\in \\mathbb { K } ^ { m \\times k } A\u2208Kn\u00d7n , B\u2208Km\u00d7k , which is defined as With arguments `A`.", "question_id": 49781},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "ma.MaskedArray.__setitem__(indx, value)", "intent": "x.__setitem__ ( i , y ) < == > x [ i ] =y If `value` is masked , masks those locations . With arguments `indx`.", "question_id": 20719},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "errno.EAGAIN", "intent": "Try again", "question_id": 3516},
{"snippet": "ssl.cert_time_to_seconds(cert_time)", "intent": "Return the time in seconds since the Epoch , given the `cert_time` string representing the \u201c notBefore \u201d or \u201c notAfter \u201d date from a certificate in `` % b % d % H : % M : % S % Y % Z '' strptime format ( C locale ) .", "question_id": 8891},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "matlib.repmat(a, m, n)", "intent": "Repeat `a` 0-D to 2-D array or matrix MxN times . With arguments `m`, `n`.", "question_id": 18544},
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "Series.to_dict()", "intent": "Convert Series to { label - > value } dict or dict-like object .", "question_id": 41486},
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903},
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "counter.most_common(n)", "intent": "Return a list of the `n` most common elements and their counts from the most common to the least .", "question_id": 1343},
{"snippet": "random.choice(a, replace=True)", "intent": "Generates `a` random sample from a given 1-D array With arguments `replace`.", "question_id": 18794},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "operator.__iconcat__(a, b)", "intent": "`a` = iconcat ( a , `b` ) is equivalent to a += b for a and b sequences .", "question_id": 6593},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "os.fwalk(top='.')", "intent": "This behaves exactly like walk ( ) , except that it yields a 4-tuple ( dirpath , dirnames , filenames , dirfd ) , and it supports `dir_fd` . With arguments `top`.", "question_id": 6984},
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162},
{"snippet": "sys.__stderr__", "intent": "These objects contain the original values of stdin, stderr and stdout at the start of the program.", "question_id": 9849},
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223},
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "torch.nn.utils.rnn.pad_sequence(sequences, batch_first=False)", "intent": "Pad a list of variable length Tensors with `padding_value` For example , if the input is list of `sequences` with size L x * and if `batch_first` is False , and T x B x * otherwise .", "question_id": 48320},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "torch.vander(x)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 .", "question_id": 48635},
{"snippet": "ssl.cert_time_to_seconds(cert_time)", "intent": "Return the time in seconds since the Epoch , given the `cert_time` string representing the \u201c notBefore \u201d or \u201c notAfter \u201d date from a certificate in `` % b % d % H : % M : % S % Y % Z '' strptime format ( C locale ) .", "question_id": 8891},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445},
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "Unpacker.done()", "intent": "Indicates unpack completion .", "question_id": 12289},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "fft.rfft2(a, - 1), s=None)", "intent": "Compute the 2-dimensional FFT of `a` real array . With arguments `- 1)`, `s`.", "question_id": 18531},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "MultiIndex.get_locs(seq)", "intent": "Get location for a sequence of labels . With arguments `seq`.", "question_id": 37625},
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565},
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445},
{"snippet": "torch.lstsq(input, A)", "intent": "Computes the solution to the least squares and least norm problems for a full rank matrix AAA of size ( m\u00d7n ) ( m \\times n ) ( m\u00d7n ) and a matrix BBB of size ( m\u00d7k ) ( m \\times k ) ( m\u00d7k ) . With arguments `input`, `A`.", "question_id": 51237},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "math.log2(x)", "intent": "Return the base-2 logarithm of `x` .", "question_id": 5910},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "matlib.repmat(a, m, n)", "intent": "Repeat `a` 0-D to 2-D array or matrix MxN times . With arguments `m`, `n`.", "question_id": 18544},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "subprocess.check_call(args, shell=False)", "intent": "Run command with arguments . With arguments `args`, `shell`.", "question_id": 9673},
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "char.multiply(a, i)", "intent": "Return ( `a` * `i` ) , that is string multiple concatenation , element-wise .", "question_id": 17318},
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "base_server.serve_forever(poll_interval=0.5)", "intent": "Handle requests until an explicit shutdown ( ) request . Poll for shutdown every `poll_interval` seconds .", "question_id": 8763},
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "time.fold", "intent": "In [0, 1].", "question_id": 2332},
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735},
{"snippet": "Match.string", "intent": "The string passed to match() or search().", "question_id": 8014},
{"snippet": "slice(stop)", "intent": "Return a slice object representing the set of indices specified by range ( start , `stop` , step ) .", "question_id": 4105},
{"snippet": "io.StringIO()", "intent": "An in-memory stream for text I/O .", "question_id": 5164},
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008},
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "torch.nn.functional.relu6(input)", "intent": "Applies the element-wise function ReLU6 ( x ) =min\u2061 ( max\u2061 ( 0 , x ) ,6 ) \\text { ReLU6 } ( x ) = \\min ( \\max ( 0 , x ) , 6 ) ReLU6 ( x ) =min ( max ( 0 , x ) ,6 ) . With arguments `input`.", "question_id": 48552},
{"snippet": "re.ASCII", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7925},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "HTTPHandler.http_open(req)", "intent": "Send an HTTP request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11871},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42128},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "numpy.amin(a)", "intent": "Return the minimum of an array or minimum along an `axis` . Don \u2019 t use amin for element-wise comparison of 2 arrays ; when a.shape [ 0 ] is 2 , minimum ( `a` [ 0 ] , a [ 1 ] ) is faster than amin ( a , axis=0 ) .", "question_id": 16364},
{"snippet": "operator.__iconcat__(a, b)", "intent": "`a` = iconcat ( a , `b` ) is equivalent to a += b for a and b sequences .", "question_id": 6593},
{"snippet": "os.supports_fd", "intent": "A Set object indicating which functions in the os module permit specifying their path parameter as an open file descriptor.", "question_id": 6949},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "os.supports_fd", "intent": "A Set object indicating which functions in the os module permit specifying their path parameter as an open file descriptor.", "question_id": 6949},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "bisect.bisect_right(a, x, lo=0, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 859},
{"snippet": "SSLSocket.verify_client_post_handshake()", "intent": "Requests post-handshake authentication ( PHA ) from a TLS 1.3 client .", "question_id": 8987},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474},
{"snippet": "webbrowser.open(url)", "intent": "Display `url` using the default browser .", "question_id": 12102},
{"snippet": "ctypes.c_int16", "intent": "Represents the C 16-bit signed int datatype.", "question_id": 1863},
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008},
{"snippet": "numpy.gradient(f, *varargs)", "intent": "Return the gradient of an N-dimensional array . By substituting \\ ( `f` ( x_ { i } + h_ { d } ) \\ ) and \\ ( f ( x_ { i } - h_ { s } ) \\ ) with their Taylor series expansion , this translates into solving the following the linear system : With arguments `*varargs`.", "question_id": 17438},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032},
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487},
{"snippet": "Series.str.cat(join='left')", "intent": "Concatenate strings in the Series/Index with given separator . With arguments `join`.", "question_id": 40862},
{"snippet": "numpy.column_stack(tup)", "intent": "Stack 1-D arrays as columns into a 2-D array . With arguments `tup`.", "question_id": 20745},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "bisect.insort_left(a, x, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 866},
{"snippet": "widget.selection_toggle(*items)", "intent": "Toggle the selection state of each item in items . With arguments `*items`.", "question_id": 10657},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "ufunc.reduceat(array, indices, dtype=None, out=None)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) . With arguments `dtype`, `out`.", "question_id": 23913},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735},
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977},
{"snippet": "Unpacker.done()", "intent": "Indicates unpack completion .", "question_id": 12289},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "py_compile.main()", "intent": "Compile several source files .", "question_id": 7835},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "torch.nn.RReLU(lower=0.125, upper=0.3333333333333333, inplace=False)", "intent": "Applies the randomized leaky rectified liner unit function , element-wise , as described in the paper : where aaa is randomly sampled from uniform distribution U ( `lower` , `upper` ) \\mathcal { U } ( \\text { lower } , \\text { upper } ) U ( lower , upper ) . With arguments `inplace`.", "question_id": 50709},
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473},
{"snippet": "POP3.stat()", "intent": "Get mailbox status .", "question_id": 7608},
{"snippet": "Match.string", "intent": "The string passed to match() or search().", "question_id": 8014},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "filecmp.dircmp(a, b)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . With arguments `b`.", "question_id": 3760},
{"snippet": "urllib.parse.urljoin(base, url)", "intent": "Construct a full ( \u201c absolute \u201d ) URL by combining a \u201c `base` URL \u201d ( base ) with another URL ( `url` ) .", "question_id": 11695},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124},
{"snippet": "MultiIndex.swaplevel(j=- 1)", "intent": "Swap level `i` with level `j` .", "question_id": 37738},
{"snippet": "ufunc.reduceat(array, indices, axis=0, dtype=None)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) . With arguments `dtype`.", "question_id": 23911},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "random.Generator.power(a)", "intent": "Draws samples in [ 0 , 1 ] from `a` power distribution with positive exponent a - 1 .", "question_id": 16090},
{"snippet": "email_message.get_content_subtype()", "intent": "Return the message \u2019 s sub-content type .", "question_id": 3257},
{"snippet": "zipfile.PyZipFile(file, mode='r')", "intent": "Instances have one method in addition to those of ZipFile objects : With arguments `file`, `mode`.", "question_id": 12847},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "ssl.SSLSession", "intent": "Session object used by session.", "question_id": 9060},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "email_message.get_content_subtype()", "intent": "Return the message \u2019 s sub-content type .", "question_id": 3257},
{"snippet": "winreg.REG_DWORD", "intent": "32-bit number.", "question_id": 12175},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "json.JSONEncoder()", "intent": "Extensible JSON encoder for Python data structures .", "question_id": 5322},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "urllib.parse.urljoin(base, url)", "intent": "Construct a full ( \u201c absolute \u201d ) URL by combining a \u201c `base` URL \u201d ( base ) with another URL ( `url` ) .", "question_id": 11695},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473},
{"snippet": "traceback.format_stack(limit=None)", "intent": "A shorthand for format_list ( extract_stack ( `f` , `limit` ) ) .", "question_id": 10789},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "softplus.prune(t)", "intent": "Computes and returns a pruned version of input tensor `t` according to the pruning rule specified in compute_mask ( ) .", "question_id": 50894},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "urllib.parse.urljoin(base, url)", "intent": "Construct a full ( \u201c absolute \u201d ) URL by combining a \u201c `base` URL \u201d ( base ) with another URL ( `url` ) .", "question_id": 11695},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "email_message.get_content_subtype()", "intent": "Return the message \u2019 s sub-content type .", "question_id": 3257},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072},
{"snippet": "GroupBy.ngroup()", "intent": "Number each group from 0 to the number of groups - 1 .", "question_id": 43894},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "Unpacker.done()", "intent": "Indicates unpack completion .", "question_id": 12289},
{"snippet": "curses.ascii.isdigit(c)", "intent": "Checks for an ASCII decimal digit , ' 0 ' through ' 9 ' . This is equivalent to `c` in string.digits .", "question_id": 1904},
{"snippet": "re.ASCII", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7925},
{"snippet": "Morsel.value", "intent": "The value of the cookie.", "question_id": 4596},
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472},
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`.", "question_id": 66},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "formatter.pop_style(n=1)", "intent": "Pop the last `n` style specifications passed to push_style ( ) .", "question_id": 3834},
{"snippet": "matlib.repmat(a, m, n)", "intent": "Repeat `a` 0-D to 2-D array or matrix MxN times . With arguments `m`, `n`.", "question_id": 18544},
{"snippet": "ZipInfo.flag_bits", "intent": "ZIP flag bits.", "question_id": 12872},
{"snippet": "curses.echo()", "intent": "Enter echo mode .", "question_id": 1931},
{"snippet": "os.walk(top)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) .", "question_id": 6975},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982},
{"snippet": "Series.str.rsplit(pat=None)", "intent": "Split strings around given separator/delimiter . The `pat` parameter can be used to split by other characters .", "question_id": 41203},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "random.Generator.power(a)", "intent": "Draws samples in [ 0 , 1 ] from `a` power distribution with positive exponent a - 1 .", "question_id": 16090},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "reversed(seq)", "intent": "Return a reverse iterator . `seq` must be an object which has a __reversed__ ( ) method or supports the sequence protocol ( the __len__ ( ) method and the __getitem__ ( ) method with integer arguments starting at 0 ) .", "question_id": 4099},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "torch.nn.functional.pixel_shuffle(input, upscale_factor)", "intent": "Rearranges elements in a tensor of shape ( \u2217 , C\u00d7r2 , H , W ) ( * , C \\times r^2 , H , W ) ( \u2217 , C\u00d7r2 , H , W ) to a tensor of shape ( \u2217 , C , H\u00d7r , W\u00d7r ) ( * , C , H \\times r , W \\times r ) ( \u2217 , C , H\u00d7r , W\u00d7r ) , where r is the `upscale_factor` . With arguments `input`.", "question_id": 51421},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "DataFrame.sort_index(ascending=True)", "intent": "Sort object by labels ( along an `axis` ) . By default , it sorts in `ascending` order , to sort in descending order , use ascending=False", "question_id": 35034},
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "Series.str.rsplit(pat=None)", "intent": "Split strings around given separator/delimiter . The `pat` parameter can be used to split by other characters .", "question_id": 41203},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "ma.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 22287},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "DataFrame.__iter__()", "intent": "Iterate over info axis .", "question_id": 32135},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "Unpacker.done()", "intent": "Indicates unpack completion .", "question_id": 12289},
{"snippet": "os.supports_fd", "intent": "A Set object indicating which functions in the os module permit specifying their path parameter as an open file descriptor.", "question_id": 6949},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022},
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "core.records.fromarrays(arrayList)", "intent": "Create a record array from a ( flat ) list of arrays With arguments `arrayList`.", "question_id": 20259},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "NNTP.newgroups(date)", "intent": "Send a NEWGROUPS command . The `date` argument should be a datetime.date or datetime.datetime object .", "question_id": 6461},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "widget.focus(item=None)", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10631},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "filecmp.dircmp(a, b)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . With arguments `b`.", "question_id": 3760},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42128},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "ZipInfo.flag_bits", "intent": "ZIP flag bits.", "question_id": 12872},
{"snippet": "ufunc.reduceat(array, indices, axis=0, dtype=None)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) . With arguments `dtype`.", "question_id": 23911},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "Tensor.new_ones(size)", "intent": "Returns a Tensor of `size` size filled with 1 .", "question_id": 52980},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42128},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "widget.focus(item=None)", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10631},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "re.LOCALE", "intent": "Make \\w, \\W, \\b, \\B and case-insensitive matching dependent on the current locale.", "question_id": 7930},
{"snippet": "Series.str.rsplit(pat=None)", "intent": "Split strings around given separator/delimiter . The `pat` parameter can be used to split by other characters .", "question_id": 41203},
{"snippet": "random.choice(a, replace=True)", "intent": "Generates `a` random sample from a given 1-D array With arguments `replace`.", "question_id": 18794},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "urllib.request.HTTPCookieProcessor()", "intent": "A class to handle HTTP Cookies .", "question_id": 11782},
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214},
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296},
{"snippet": "polynomial.chebyshev.chebtrim(c)", "intent": "Remove \u201c small \u201d \u201c trailing \u201d coefficients from a polynomial . With arguments `c`.", "question_id": 21491},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "torch.nn.utils.rnn.pad_sequence(sequences, batch_first=False)", "intent": "Pad a list of variable length Tensors with `padding_value` For example , if the input is list of `sequences` with size L x * and if `batch_first` is False , and T x B x * otherwise .", "question_id": 48320},
{"snippet": "reversed(seq)", "intent": "Return a reverse iterator . `seq` must be an object which has a __reversed__ ( ) method or supports the sequence protocol ( the __len__ ( ) method and the __getitem__ ( ) method with integer arguments starting at 0 ) .", "question_id": 4099},
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "fileinput.hook_compressed(filename, mode)", "intent": "Transparently opens files compressed with gzip and bzip2 ( recognized by the extensions '.gz ' and '.bz2 ' ) using the gzip and bz2 modules . If the `filename` extension is not '.gz ' or '.bz2 ' , the file is opened normally ( ie , using open ( ) without any decompression ) . With arguments `mode`.", "question_id": 3810},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "re.LOCALE", "intent": "Make \\w, \\W, \\b, \\B and case-insensitive matching dependent on the current locale.", "question_id": 7930},
{"snippet": "matlib.repmat(a, m, n)", "intent": "Repeat `a` 0-D to 2-D array or matrix MxN times . With arguments `m`, `n`.", "question_id": 18544},
{"snippet": "linalg.tensorsolve(a, b)", "intent": "Solve the tensor equation `a` x = `b` for x .", "question_id": 19418},
{"snippet": "test.support.TEST_SUPPORT_DIR", "intent": "Set to the top level directory that contains test.support.", "question_id": 10126},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "Unpacker.done()", "intent": "Indicates unpack completion .", "question_id": 12289},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "torch.repeat_interleave(input, repeats)", "intent": "Repeat elements of a tensor . If the `repeats` is tensor ( [ n1 , n2 , n3 , \u2026 ] ) , then the output will be tensor ( [ 0 , 0 , \u2026 , 1 , 1 , \u2026 , 2 , 2 , \u2026 , \u2026 ] ) where 0 appears n1 times , 1 appears n2 times , 2 appears n3 times , etc . With arguments `input`.", "question_id": 50355},
{"snippet": "operator.__iconcat__(a, b)", "intent": "`a` = iconcat ( a , `b` ) is equivalent to a += b for a and b sequences .", "question_id": 6593},
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214},
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214},
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "matlib.repmat(a, m, n)", "intent": "Repeat `a` 0-D to 2-D array or matrix MxN times . With arguments `m`, `n`.", "question_id": 18544},
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207},
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "DataFrame.reset_index(level=None)", "intent": "Reset the index , or a `level` of it .", "question_id": 34634},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "ctypes.c_int16", "intent": "Represents the C 16-bit signed int datatype.", "question_id": 1863},
{"snippet": "ma.cov(x)", "intent": "Estimate the covariance matrix . If `x` and `y` have the same shape , a common mask is allocated : if x [ i , j ] is masked , then y [ i , j ] will also be masked .", "question_id": 16259},
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "char.multiply(a, i)", "intent": "Return ( `a` * `i` ) , that is string multiple concatenation , element-wise .", "question_id": 17318},
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032},
{"snippet": "curses.echo()", "intent": "Enter echo mode .", "question_id": 1931},
{"snippet": "PurePath.match(pattern)", "intent": "Match this path against the provided glob-style `pattern` .", "question_id": 7258},
{"snippet": "operator.delitem(a, b)", "intent": "Remove the value of `a` at index `b` .", "question_id": 6573},
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "Series.str.rsplit(pat=None)", "intent": "Split strings around given separator/delimiter . The `pat` parameter can be used to split by other characters .", "question_id": 41203},
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "smtp_channel.received_lines", "intent": "Holds a list of the line strings (decoded using UTF-8) received from the client.", "question_id": 8440},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "datetime.date(year, month, day)", "intent": "All arguments are required . With arguments `year`, `month`, `day`.", "question_id": 2218},
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640},
{"snippet": "linalg.tensorsolve(a, b)", "intent": "Solve the tensor equation `a` x = `b` for x .", "question_id": 19418},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "set.add(elem)", "intent": "Add element `elem` to the set .", "question_id": 9462},
{"snippet": "decimal.ROUND_05UP", "intent": "Round away from zero if last digit after rounding towards zero would have been 0 or 5; otherwise round towards zero.", "question_id": 2584},
{"snippet": "email_message.__str__()", "intent": "Equivalent to as_string ( policy=self.policy.clone ( utf8=True ) ) .", "question_id": 3232},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "ufunc.reduceat(array, indices, dtype=None)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) . With arguments `dtype`.", "question_id": 23909},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141},
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "bdb.clear_bpbynumber(arg)", "intent": "Delete the breakpoint which has the index `arg` in the Breakpoint.bpbynumber .", "question_id": 796},
{"snippet": "fft.fftshift(x)", "intent": "Shift the zero-frequency component to the center of the spectrum . Note that y [ 0 ] is the Nyquist component only if len ( `x` ) is even .", "question_id": 18922},
{"snippet": "torch.stft(input, n_fft, return_complex=None)", "intent": "Short-time Fourier transform ( STFT ) . The STFT computes the Fourier transform of short overlapping windows of the `input` . where mmm is the index of the sliding `window` , and \u03c9\\omega\u03c9 is the frequency 0\u2264\u03c9 < n_fft0 \\leq \\omega < \\text { n\\_fft } 0\u2264\u03c9 < `n_fft` for onesided=False , or 0\u2264\u03c9 < \u230an_fft/2\u230b+10 \\leq \\omega < \\lfloor \\text { n\\_fft } / 2 \\rfloor + 10\u2264\u03c9 < \u230an_fft/2\u230b+1 for onesided=True . Returns either a complex tensor of size ( \u2217\u00d7N\u00d7T ) ( * \\times N \\times T ) ( \u2217\u00d7N\u00d7T ) if `return_complex` is true , or a real tensor of size ( \u2217\u00d7N\u00d7T\u00d72 ) ( * \\times N \\times T \\times 2 ) ( \u2217\u00d7N\u00d7T\u00d72 ) .", "question_id": 51557},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "Unpacker.done()", "intent": "Indicates unpack completion .", "question_id": 12289},
{"snippet": "pandas.read_csv(filepath_or_buffer, delimiter=None)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `delimiter`.", "question_id": 46036},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "numpy.base_repr(number)", "intent": "Return a string representation of a `number` in the given `base` system .", "question_id": 21216},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474},
{"snippet": "py_compile.main()", "intent": "Compile several source files .", "question_id": 7835},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "errno.EL3HLT", "intent": "Level 3 halted", "question_id": 3551},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "pandas.read_csv(filepath_or_buffer, delimiter=None)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `delimiter`.", "question_id": 46036},
{"snippet": "Timestamp.combine(date, time)", "intent": "Combine `date` , `time` into datetime with same date and time fields .", "question_id": 42281},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207},
{"snippet": "__import__(name, globals=None)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context .", "question_id": 4136},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "inspect.getmro(cls)", "intent": "Return a tuple of class `cls` \u2019 s base classes , including cls , in method resolution order .", "question_id": 5018},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487},
{"snippet": "Series.str.cat(join='left')", "intent": "Concatenate strings in the Series/Index with given separator . With arguments `join`.", "question_id": 40862},
{"snippet": "ufunc.reduceat(array, indices)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) .", "question_id": 23907},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "Unpacker.done()", "intent": "Indicates unpack completion .", "question_id": 12289},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "filecmp.dircmp(a, b)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . With arguments `b`.", "question_id": 3760},
{"snippet": "curses.echo()", "intent": "Enter echo mode .", "question_id": 1931},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "ma.mr_", "intent": "Translate slice objects to concatenation along the first axis.", "question_id": 24150},
{"snippet": "ufunc.reduceat(array, indices)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) .", "question_id": 23907},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "fraction.from_float(flt)", "intent": "This class method constructs a Fraction representing the exact value of `flt` , which must be a float .", "question_id": 3869},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050},
{"snippet": "context.exp(x)", "intent": "Returns e ** `x` .", "question_id": 2530},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "Series.str.split(expand=False)", "intent": "Split strings around given separator/delimiter . When using expand=True , the split elements will `expand` out into separate columns .", "question_id": 41275},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "distutils.system_info.get_standard_file(fname)", "intent": "Returns a list of files named \u2018 `fname` \u2019 from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ \u2018 HOME \u2019 ] ) 3 ) Local directory", "question_id": 22646},
{"snippet": "writer.send_flowing_data(data)", "intent": "Output character `data` which may be word-wrapped and re-flowed as needed .", "question_id": 3850},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "polynomial.hermite_e.hermetrim(c, tol=0)", "intent": "Remove \u201c small \u201d \u201c trailing \u201d coefficients from a polynomial . \u201c Small \u201d means \u201c small in absolute value \u201d and is controlled by the parameter `tol` ; \u201c trailing \u201d means highest order coefficient ( s ) , e.g. , in [ 0 , 1 , 1 , 0 , 0 ] ( which represents 0 + x + x * * 2 + 0 * x * * 3 + 0 * x * * 4 ) both the 3-rd and 4-th order coefficients would be \u201c trimmed . \u201d With arguments `c`.", "question_id": 16569},
{"snippet": "matrix.choose(choices)", "intent": "Use an index array to construct a new array from a set of `choices` .", "question_id": 20105},
{"snippet": "MultiIndex.from_tuples(tuples)", "intent": "Convert list of `tuples` to MultiIndex .", "question_id": 37572},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "urllib.parse.urljoin(base, url)", "intent": "Construct a full ( \u201c absolute \u201d ) URL by combining a \u201c `base` URL \u201d ( base ) with another URL ( `url` ) .", "question_id": 11695},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "polynomial.chebyshev.chebpts1(npts)", "intent": "Chebyshev points of the first kind . The Chebyshev points of the first kind are the points cos ( x ) , where x = [ pi * ( k + .5 ) /npts for k in range ( `npts` ) ] .", "question_id": 16906},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "TarInfo.isreg()", "intent": "Same as isfile ( ) .", "question_id": 9993},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "Styler.format(escape=None)", "intent": "Format the text display value of cells . Using a formatter with HTML `escape` and na_rep .", "question_id": 45086},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "io.StringIO()", "intent": "An in-memory stream for text I/O .", "question_id": 5164},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "PurePath.match(pattern)", "intent": "Match this path against the provided glob-style `pattern` .", "question_id": 7258},
{"snippet": "NNTP.newgroups(date)", "intent": "Send a NEWGROUPS command . The `date` argument should be a datetime.date or datetime.datetime object .", "question_id": 6461},
{"snippet": "imp.find_module(name)", "intent": "Try to find the module `name` .", "question_id": 4763},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "Series.str.rsplit(pat=None)", "intent": "Split strings around given separator/delimiter . The `pat` parameter can be used to split by other characters .", "question_id": 41203},
{"snippet": "NNTP.newgroups(date)", "intent": "Send a NEWGROUPS command . The `date` argument should be a datetime.date or datetime.datetime object .", "question_id": 6461},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "os.path.lexists(path)", "intent": "Return True if `path` refers to an existing path .", "question_id": 7148},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "ma.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 22287},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "xml.etree.ElementTree.Element(tag, **extra)", "intent": "Element class . `tag` is the element name . With arguments `**extra`.", "question_id": 12477},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "softplus.prune(t)", "intent": "Computes and returns a pruned version of input tensor `t` according to the pruning rule specified in compute_mask ( ) .", "question_id": 50894},
{"snippet": "char.multiply(a, i)", "intent": "Return ( `a` * `i` ) , that is string multiple concatenation , element-wise .", "question_id": 17318},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "py_compile.main()", "intent": "Compile several source files .", "question_id": 7835},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "Series.dt.hour", "intent": "The hours of the datetime.", "question_id": 38772},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "random.Generator.power(a)", "intent": "Draws samples in [ 0 , 1 ] from `a` power distribution with positive exponent a - 1 .", "question_id": 16090},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "errno.EUSERS", "intent": "Too many users", "question_id": 3592},
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "re.ASCII", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7925},
{"snippet": "tuple()", "intent": "Tuples may be constructed in a number of ways :", "question_id": 9161},
{"snippet": "formatter.pop_style(n=1)", "intent": "Pop the last `n` style specifications passed to push_style ( ) .", "question_id": 3834},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "reversed(seq)", "intent": "Return a reverse iterator . `seq` must be an object which has a __reversed__ ( ) method or supports the sequence protocol ( the __len__ ( ) method and the __getitem__ ( ) method with integer arguments starting at 0 ) .", "question_id": 4099},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "pandas.read_csv(filepath_or_buffer, sep=NoDefault.no_default)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `sep`.", "question_id": 46055},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899},
{"snippet": "SMTP.login(user, password, initial_response_ok=True)", "intent": "Log in on an SMTP server that requires authentication . The arguments are the username and the `password` to authenticate with . `initial_response_ok` is passed through to auth ( ) . With arguments `user`.", "question_id": 8523},
{"snippet": "DataFrame.reset_index(level=None)", "intent": "Reset the index , or a `level` of it .", "question_id": 34634},
{"snippet": "os.EX_NOHOST", "intent": "Exit code that means a specified host did not exist.", "question_id": 7023},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "DataSource.exists(path)", "intent": "Test if `path` exists .", "question_id": 20770},
{"snippet": "softplus.prune(t)", "intent": "Computes and returns a pruned version of input tensor `t` according to the pruning rule specified in compute_mask ( ) .", "question_id": 50894},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "ma.cov(x)", "intent": "Estimate the covariance matrix . If `x` and `y` have the same shape , a common mask is allocated : if x [ i , j ] is masked , then y [ i , j ] will also be masked .", "question_id": 16259},
{"snippet": "email_message.get_content_subtype()", "intent": "Return the message \u2019 s sub-content type .", "question_id": 3257},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "typing.Callable", "intent": "Callable type; Callable[[int], str] is a function of (int) -> str.", "question_id": 11336},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "Pattern.groupindex", "intent": "A dictionary mapping any symbolic group names defined by (?P<id>) to group numbers.", "question_id": 7993},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "polynomial.polyutils.as_series(alist)", "intent": "Return argument as a list of 1-d arrays . With arguments `alist`.", "question_id": 21617},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473},
{"snippet": "pandas.read_csv(filepath_or_buffer, sep=NoDefault.no_default)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `sep`.", "question_id": 46055},
{"snippet": "softplus.prune(t)", "intent": "Computes and returns a pruned version of input tensor `t` according to the pruning rule specified in compute_mask ( ) .", "question_id": 50894},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "bound_arguments.kwargs", "intent": "A dict of keyword arguments values.", "question_id": 5005},
{"snippet": "distutils.system_info.get_standard_file(fname)", "intent": "Returns a list of files named \u2018 `fname` \u2019 from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ \u2018 HOME \u2019 ] ) 3 ) Local directory", "question_id": 22646},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "ctypes.c_int16", "intent": "Represents the C 16-bit signed int datatype.", "question_id": 1863},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "numpy.info(toplevel='numpy')", "intent": "Get help information for a function , class , or module . With arguments `toplevel`.", "question_id": 22067},
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473},
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "re.finditer(pattern, string)", "intent": "Return an iterator yielding match objects over all non-overlapping matches for the RE `pattern` in `string` .", "question_id": 7949},
{"snippet": "curses.napms(ms)", "intent": "Sleep for `ms` milliseconds .", "question_id": 1956},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "datetime.ctime()", "intent": "Return a string representing the date and time , for example datetime ( 2002 , 12 , 4 , 20 , 30 , 40 ) .ctime ( ) == 'Wed Dec 4 20:30:40 2002 ' .", "question_id": 2311},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "date.ctime()", "intent": "Return a string representing the date , for example date ( 2002 , 12 , 4 ) .ctime ( ) == 'Wed Dec 4 00:00:00 2002 ' .", "question_id": 2244},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "pandas.read_csv(filepath_or_buffer, delimiter=None)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `delimiter`.", "question_id": 46036},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "Timestamp.combine(date, time)", "intent": "Combine `date` , `time` into datetime with same date and time fields .", "question_id": 42281},
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "numpy.gradient(f, *varargs)", "intent": "Return the gradient of an N-dimensional array . By substituting \\ ( `f` ( x_ { i } + h_ { d } ) \\ ) and \\ ( f ( x_ { i } - h_ { s } ) \\ ) with their Taylor series expansion , this translates into solving the following the linear system : With arguments `*varargs`.", "question_id": 17438},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200},
{"snippet": "ma.MaskedArray.__len__(/)", "intent": "Return len ( self ) . With arguments `/`.", "question_id": 22971},
{"snippet": "widget.tag_has(tagname, item=None)", "intent": "If `item` is specified , returns 1 or 0 depending on whether the specified item has the given `tagname` .", "question_id": 10669},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "ctypes.c_int16", "intent": "Represents the C 16-bit signed int datatype.", "question_id": 1863},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "pandas.read_csv(filepath_or_buffer, delimiter=None)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `delimiter`.", "question_id": 46036},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42128},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "base_http_request_handler.MessageClass", "intent": "Specifies an email.message.Message-like class to parse HTTP headers.", "question_id": 4632},
{"snippet": "email_message.get_content_subtype()", "intent": "Return the message \u2019 s sub-content type .", "question_id": 3257},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "lambda_lr.load_state_dict(state_dict)", "intent": "Loads the schedulers state . With arguments `state_dict`.", "question_id": 50616},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "numpy.sign(x, /, signature)", "intent": "Returns an element-wise indication of the sign of a number . The sign function returns -1 if `x` < 0 , 0 if x==0 , 1 if x > 0. nan is returned for nan inputs . With arguments `/`, `signature`.", "question_id": 18231},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "filecmp.dircmp(a, b)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . With arguments `b`.", "question_id": 3760},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "Match.string", "intent": "The string passed to match() or search().", "question_id": 8014},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "ufunc.reduceat(array, indices)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) .", "question_id": 23907},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324},
{"snippet": "ma.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 22287},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "email.headerregistry.DateHeader", "intent": "RFC 5322 specifies a very specific format for dates within email headers.", "question_id": 3156},
{"snippet": "linalg.tensorsolve(a, b)", "intent": "Solve the tensor equation `a` x = `b` for x .", "question_id": 19418},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "random.RandomState.choice(a, size=None)", "intent": "Generates `a` random sample from a given 1-D array Generate a uniform random sample from np.arange ( 5 ) of `size` 3 :", "question_id": 18903},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "polynomial.polyutils.mapdomain(x, old, new)", "intent": "Apply linear map to input points . The linear map offset + scale * `x` that maps the domain `old` to the domain `new` is applied to the points x .", "question_id": 22969},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "pandas.read_csv(filepath_or_buffer, sep=NoDefault.no_default)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `sep`.", "question_id": 46055},
{"snippet": "test.support.findfile(filename)", "intent": "Return the path to the file named `filename` .", "question_id": 10151},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "date.ctime()", "intent": "Return a string representing the date , for example date ( 2002 , 12 , 4 ) .ctime ( ) == 'Wed Dec 4 00:00:00 2002 ' .", "question_id": 2244},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "random.randint(a, b)", "intent": "Return `a` random integer N such that a < = N < = b. Alias for randrange ( a , b+1 ) . With arguments `b`.", "question_id": 7893},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "curses.ascii.isdigit(c)", "intent": "Checks for an ASCII decimal digit , ' 0 ' through ' 9 ' . This is equivalent to `c` in string.digits .", "question_id": 1904},
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "locale.strcoll(string1, string2)", "intent": "Compares two strings according to the current LC_COLLATE setting . As any other compare function , returns a negative , or a positive value , or 0 , depending on whether `string1` collates before or after `string2` or is equal to it .", "question_id": 5382},
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "torch.vander(x)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 .", "question_id": 48635},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "test.support.TEST_SUPPORT_DIR", "intent": "Set to the top level directory that contains test.support.", "question_id": 10126},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473},
{"snippet": "pandas.read_csv(filepath_or_buffer, delimiter=None)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `delimiter`.", "question_id": 46036},
{"snippet": "email_message.__str__()", "intent": "Equivalent to as_string ( policy=self.policy.clone ( utf8=True ) ) .", "question_id": 3232},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610},
{"snippet": "random.Generator.power(a)", "intent": "Draws samples in [ 0 , 1 ] from `a` power distribution with positive exponent a - 1 .", "question_id": 16090},
{"snippet": "pandas.read_csv(filepath_or_buffer, sep=NoDefault.no_default)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `sep`.", "question_id": 46055},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "wsgiref.util.application_uri(environ)", "intent": "Similar to request_uri ( ) , except that the PATH_INFO and QUERY_STRING variables are ignored . With arguments `environ`.", "question_id": 12213},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "email_message.__str__()", "intent": "Equivalent to as_string ( policy=self.policy.clone ( utf8=True ) ) .", "question_id": 3232},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "pandas.read_csv(filepath_or_buffer, delimiter=None)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `delimiter`.", "question_id": 46036},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "random.Generator.power(a)", "intent": "Draws samples in [ 0 , 1 ] from `a` power distribution with positive exponent a - 1 .", "question_id": 16090},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42128},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "re.ASCII", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7925},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "DataFrame.sort_index(ascending=True)", "intent": "Sort object by labels ( along an `axis` ) . By default , it sorts in `ascending` order , to sort in descending order , use ascending=False", "question_id": 35034},
{"snippet": "datetime.second", "intent": "In range(60).", "question_id": 2277},
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137},
{"snippet": "py_compile.main()", "intent": "Compile several source files .", "question_id": 7835},
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "numpy.sign(x, /, signature)", "intent": "Returns an element-wise indication of the sign of a number . The sign function returns -1 if `x` < 0 , 0 if x==0 , 1 if x > 0. nan is returned for nan inputs . With arguments `/`, `signature`.", "question_id": 18231},
{"snippet": "compileall.compile_path()", "intent": "Byte-compile all the .py files found along sys.path .", "question_id": 1429},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "numpy.tril_indices_from(arr, k=0)", "intent": "Return the indices for the lower-triangle of `arr` . With arguments `k`.", "question_id": 21469},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "formatter.pop_style(n=1)", "intent": "Pop the last `n` style specifications passed to push_style ( ) .", "question_id": 3834},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "multiprocessing.log_to_stderr()", "intent": "This function performs a call to get_logger ( ) but in addition to returning the logger created by get_logger , it adds a handler which sends output to sys.stderr using format ' [ % ( levelname ) s/ % ( processName ) s ] % ( message ) s ' .", "question_id": 6383},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "ConfigParser.BOOLEAN_STATES", "intent": "By default when using getboolean(), config parsers consider the following values True: '1', 'yes', 'true', 'on' and the following values False: '0', 'no', 'false', 'off'.", "question_id": 1493},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "torch.nn.functional.tanh(input)", "intent": "Applies element-wise , Tanh ( x ) =tanh\u2061 ( x ) =exp\u2061 ( x ) \u2212exp\u2061 ( \u2212x ) exp\u2061 ( x ) +exp\u2061 ( \u2212x ) \\text { Tanh } ( x ) = \\tanh ( x ) = \\frac { \\exp ( x ) - \\exp ( -x ) } { \\exp ( x ) + \\exp ( -x ) } Tanh ( x ) =tanh ( x ) =exp ( x ) +exp ( \u2212x ) exp ( x ) \u2212exp ( \u2212x ) \u200b With arguments `input`.", "question_id": 49901},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277},
{"snippet": "formatter.pop_style(n=1)", "intent": "Pop the last `n` style specifications passed to push_style ( ) .", "question_id": 3834},
{"snippet": "numpy.fromstring(string, count=- 1)", "intent": "A new 1-D array initialized from text data in a `string` . With arguments `count`.", "question_id": 21478},
{"snippet": "matlib.repmat(a, m, n)", "intent": "Repeat `a` 0-D to 2-D array or matrix MxN times . With arguments `m`, `n`.", "question_id": 18544},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "torch.nn.functional.elu(input, alpha=1.0)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `alpha`.", "question_id": 49466},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "smtp_channel.received_lines", "intent": "Holds a list of the line strings (decoded using UTF-8) received from the client.", "question_id": 8440},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "email_message.__str__()", "intent": "Equivalent to as_string ( policy=self.policy.clone ( utf8=True ) ) .", "question_id": 3232},
{"snippet": "gc.get_objects()", "intent": "Returns a list of all objects tracked by the collector , excluding the list returned .", "question_id": 4174},
{"snippet": "io.StringIO()", "intent": "An in-memory stream for text I/O .", "question_id": 5164},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077},
{"snippet": "locale.strcoll(string1, string2)", "intent": "Compares two strings according to the current LC_COLLATE setting . As any other compare function , returns a negative , or a positive value , or 0 , depending on whether `string1` collates before or after `string2` or is equal to it .", "question_id": 5382},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "numpy.sign(x, /, signature)", "intent": "Returns an element-wise indication of the sign of a number . The sign function returns -1 if `x` < 0 , 0 if x==0 , 1 if x > 0. nan is returned for nan inputs . With arguments `/`, `signature`.", "question_id": 18231},
{"snippet": "gc.get_objects()", "intent": "Returns a list of all objects tracked by the collector , excluding the list returned .", "question_id": 4174},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "DataFrameGroupBy.sample(replace=False)", "intent": "Return a random sample of items from each group . With arguments `replace`.", "question_id": 43699},
{"snippet": "torch.stft(input, n_fft, return_complex=None)", "intent": "Short-time Fourier transform ( STFT ) . The STFT computes the Fourier transform of short overlapping windows of the `input` . where mmm is the index of the sliding `window` , and \u03c9\\omega\u03c9 is the frequency 0\u2264\u03c9 < n_fft0 \\leq \\omega < \\text { n\\_fft } 0\u2264\u03c9 < `n_fft` for onesided=False , or 0\u2264\u03c9 < \u230an_fft/2\u230b+10 \\leq \\omega < \\lfloor \\text { n\\_fft } / 2 \\rfloor + 10\u2264\u03c9 < \u230an_fft/2\u230b+1 for onesided=True . Returns either a complex tensor of size ( \u2217\u00d7N\u00d7T ) ( * \\times N \\times T ) ( \u2217\u00d7N\u00d7T ) if `return_complex` is true , or a real tensor of size ( \u2217\u00d7N\u00d7T\u00d72 ) ( * \\times N \\times T \\times 2 ) ( \u2217\u00d7N\u00d7T\u00d72 ) .", "question_id": 51557},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "numpy.sign(x, /, signature)", "intent": "Returns an element-wise indication of the sign of a number . The sign function returns -1 if `x` < 0 , 0 if x==0 , 1 if x > 0. nan is returned for nan inputs . With arguments `/`, `signature`.", "question_id": 18231},
{"snippet": "base_server.serve_forever(poll_interval=0.5)", "intent": "Handle requests until an explicit shutdown ( ) request . Poll for shutdown every `poll_interval` seconds .", "question_id": 8763},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "wsgi_request_handler.handle()", "intent": "Process the HTTP request .", "question_id": 12234},
{"snippet": "HTTPHandler.http_open(req)", "intent": "Send an HTTP request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11871},
{"snippet": "random.choice(a, replace=True)", "intent": "Generates `a` random sample from a given 1-D array With arguments `replace`.", "question_id": 18794},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610},
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247},
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640},
{"snippet": "context.exp(x)", "intent": "Returns e ** `x` .", "question_id": 2530},
{"snippet": "email.headerregistry.DateHeader", "intent": "RFC 5322 specifies a very specific format for dates within email headers.", "question_id": 3156},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "numpy.angle(z)", "intent": "Return the angle of the complex argument . With arguments `z`.", "question_id": 19435},
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "polynomial.polyutils.trimcoef(c, tol=0)", "intent": "Remove \u201c small \u201d \u201c trailing \u201d coefficients from a polynomial . \u201c Small \u201d means \u201c small in absolute value \u201d and is controlled by the parameter `tol` ; \u201c trailing \u201d means highest order coefficient ( s ) , e.g. , in [ 0 , 1 , 1 , 0 , 0 ] ( which represents 0 + x + x * * 2 + 0 * x * * 3 + 0 * x * * 4 ) both the 3-rd and 4-th order coefficients would be \u201c trimmed . \u201d With arguments `c`.", "question_id": 22535},
{"snippet": "Unpacker.done()", "intent": "Indicates unpack completion .", "question_id": 12289},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "distutils.system_info.get_standard_file(fname)", "intent": "Returns a list of files named \u2018 `fname` \u2019 from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ \u2018 HOME \u2019 ] ) 3 ) Local directory", "question_id": 22646},
{"snippet": "Series.str.rsplit(pat=None)", "intent": "Split strings around given separator/delimiter . The `pat` parameter can be used to split by other characters .", "question_id": 41203},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435},
{"snippet": "os.supports_fd", "intent": "A Set object indicating which functions in the os module permit specifying their path parameter as an open file descriptor.", "question_id": 6949},
{"snippet": "re.ASCII", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7925},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982},
{"snippet": "IMAP4.login_cram_md5(user, password)", "intent": "Force use of CRAM-MD5 authentication when identifying the client to protect the `password` . With arguments `user`.", "question_id": 4710},
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "DataFrame.insert(loc, column, value)", "intent": "Insert `column` into DataFrame at specified location . Notice that pandas uses index alignment in case of `value` from type Series : With arguments `loc`.", "question_id": 33403},
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "torch.optim.LBFGS(params)", "intent": "Implements L-BFGS algorithm , heavily inspired by minFunc . With arguments `params`.", "question_id": 50136},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "curses.echo()", "intent": "Enter echo mode .", "question_id": 1931},
{"snippet": "ufunc.reduceat(array, indices)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) .", "question_id": 23907},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "operator.__iconcat__(a, b)", "intent": "`a` = iconcat ( a , `b` ) is equivalent to a += b for a and b sequences .", "question_id": 6593},
{"snippet": "DataSource.exists(path)", "intent": "Test if `path` exists .", "question_id": 20770},
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032},
{"snippet": "formatter.pop_style(n=1)", "intent": "Pop the last `n` style specifications passed to push_style ( ) .", "question_id": 3834},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062},
{"snippet": "datetime.ctime()", "intent": "Return a string representing the date and time , for example datetime ( 2002 , 12 , 4 , 20 , 30 , 40 ) .ctime ( ) == 'Wed Dec 4 20:30:40 2002 ' .", "question_id": 2311},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "datetime.ctime()", "intent": "Return a string representing the date and time , for example datetime ( 2002 , 12 , 4 , 20 , 30 , 40 ) .ctime ( ) == 'Wed Dec 4 20:30:40 2002 ' .", "question_id": 2311},
{"snippet": "torch.optim.LBFGS(params)", "intent": "Implements L-BFGS algorithm , heavily inspired by minFunc . With arguments `params`.", "question_id": 50136},
{"snippet": "numpy.shape(a)", "intent": "Return the shape of an array . With arguments `a`.", "question_id": 22805},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296},
{"snippet": "io.StringIO()", "intent": "An in-memory stream for text I/O .", "question_id": 5164},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825},
{"snippet": "os.supports_fd", "intent": "A Set object indicating which functions in the os module permit specifying their path parameter as an open file descriptor.", "question_id": 6949},
{"snippet": "TarInfo.uname", "intent": "User name.", "question_id": 9989},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124},
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032},
{"snippet": "Series.str.rsplit(pat=None)", "intent": "Split strings around given separator/delimiter . The `pat` parameter can be used to split by other characters .", "question_id": 41203},
{"snippet": "text_calendar.pryear(theyear, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`.", "question_id": 948},
{"snippet": "numpy.column_stack(tup)", "intent": "Stack 1-D arrays as columns into a 2-D array . With arguments `tup`.", "question_id": 20745},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "Series.str.rsplit(pat=None)", "intent": "Split strings around given separator/delimiter . The `pat` parameter can be used to split by other characters .", "question_id": 41203},
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "writer.send_flowing_data(data)", "intent": "Output character `data` which may be word-wrapped and re-flowed as needed .", "question_id": 3850},
{"snippet": "date.ctime()", "intent": "Return a string representing the date , for example date ( 2002 , 12 , 4 ) .ctime ( ) == 'Wed Dec 4 00:00:00 2002 ' .", "question_id": 2244},
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "os.path.splitext(path)", "intent": "Split the pathname `path` into a pair ( root , ext ) such that root + ext == path , and ext is empty or begins with a period and contains at most one period .", "question_id": 7171},
{"snippet": "DataFrame.to_csv()", "intent": "Write object to a comma-separated values ( csv ) file .", "question_id": 35291},
{"snippet": "io.StringIO()", "intent": "An in-memory stream for text I/O .", "question_id": 5164},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "decimal.ROUND_05UP", "intent": "Round away from zero if last digit after rounding towards zero would have been 0 or 5; otherwise round towards zero.", "question_id": 2584},
{"snippet": "ma.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 22287},
{"snippet": "pandas.read_csv(filepath_or_buffer, delimiter=None)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `delimiter`.", "question_id": 46036},
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445},
{"snippet": "datetime.month", "intent": "Between 1 and 12 inclusive.", "question_id": 2273},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "Unpacker.done()", "intent": "Indicates unpack completion .", "question_id": 12289},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "email_message.__str__()", "intent": "Equivalent to as_string ( policy=self.policy.clone ( utf8=True ) ) .", "question_id": 3232},
{"snippet": "xml.sax.saxutils.escape(data)", "intent": "Escape ' & ' , ' < ' , and ' > ' in a string of `data` .", "question_id": 12652},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "stat.S_ISGID", "intent": "Set-group-ID bit.", "question_id": 9095},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "DataFrame.insert(loc, column, value)", "intent": "Insert `column` into DataFrame at specified location . Notice that pandas uses index alignment in case of `value` from type Series : With arguments `loc`.", "question_id": 33403},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "date.fromordinal(ordinal)", "intent": "Return the date corresponding to the proleptic Gregorian `ordinal` , where January 1 of year 1 has ordinal 1 .", "question_id": 2221},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "os.path.lexists(path)", "intent": "Return True if `path` refers to an existing path .", "question_id": 7148},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42128},
{"snippet": "random.choice(a, replace=True)", "intent": "Generates `a` random sample from a given 1-D array With arguments `replace`.", "question_id": 18794},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "errno.EUSERS", "intent": "Too many users", "question_id": 3592},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "test.support.script_helper.spawn_python(*args, **kw, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`, `stdout`, `stderr`.", "question_id": 10306},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42128},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "random.choice(a, replace=True)", "intent": "Generates `a` random sample from a given 1-D array With arguments `replace`.", "question_id": 18794},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "formatter.AbstractFormatter(writer)", "intent": "The standard formatter . With arguments `writer`.", "question_id": 3840},
{"snippet": "os.supports_fd", "intent": "A Set object indicating which functions in the os module permit specifying their path parameter as an open file descriptor.", "question_id": 6949},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "test.support.findfile(filename)", "intent": "Return the path to the file named `filename` .", "question_id": 10151},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472},
{"snippet": "torch.vander(x)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 .", "question_id": 48635},
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "turtle.speed()", "intent": "Set the turtle \u2019 s `speed` to an integer value in the range 0..10 .", "question_id": 10934},
{"snippet": "POP3.stat()", "intent": "Get mailbox status .", "question_id": 7608},
{"snippet": "torch.lstsq(input, A)", "intent": "Computes the solution to the least squares and least norm problems for a full rank matrix AAA of size ( m\u00d7n ) ( m \\times n ) ( m\u00d7n ) and a matrix BBB of size ( m\u00d7k ) ( m \\times k ) ( m\u00d7k ) . With arguments `input`, `A`.", "question_id": 51237},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "os.supports_fd", "intent": "A Set object indicating which functions in the os module permit specifying their path parameter as an open file descriptor.", "question_id": 6949},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "ma.MaskedArray.__setitem__(indx, value)", "intent": "x.__setitem__ ( i , y ) < == > x [ i ] =y If `value` is masked , masks those locations . With arguments `indx`.", "question_id": 20719},
{"snippet": "tarfile.is_tarfile(name)", "intent": "Return True if `name` is a tar archive file , that the tarfile module can read .", "question_id": 9901},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "char.multiply(a, i)", "intent": "Return ( `a` * `i` ) , that is string multiple concatenation , element-wise .", "question_id": 17318},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "date.ctime()", "intent": "Return a string representing the date , for example date ( 2002 , 12 , 4 ) .ctime ( ) == 'Wed Dec 4 00:00:00 2002 ' .", "question_id": 2244},
{"snippet": "DataFrame.rolling(window, center=False)", "intent": "Provide rolling `window` calculations . This can be changed to the `center` of the window by setting center=True .", "question_id": 34737},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "chararray.find(sub)", "intent": "For each element , return the lowest index in the string where substring `sub` is found .", "question_id": 16811},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "DataFrame.set_index(keys, append=False)", "intent": "Set the DataFrame index using existing columns . With arguments `keys`, `append`.", "question_id": 34921},
{"snippet": "HTTPHandler.http_open(req)", "intent": "Send an HTTP request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11871},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "DataFrame.nsmallest(n, columns)", "intent": "Return the first `n` rows ordered by `columns` in ascending order .", "question_id": 33959},
{"snippet": "numpy.fliplr(m)", "intent": "Reverse the order of elements along axis 1 ( left/right ) . Equivalent to `m` [ : , : :-1 ] or np.flip ( m , axis=1 ) .", "question_id": 22728},
{"snippet": "Timedelta.nanoseconds", "intent": "Return the number of nanoseconds (n), where 0 <= n < 1 microsecond.", "question_id": 42135},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "formatter.AbstractFormatter(writer)", "intent": "The standard formatter . With arguments `writer`.", "question_id": 3840},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "datetime.min", "intent": "The earliest representable datetime, datetime(MINYEAR, 1, 1, tzinfo=None).", "question_id": 2269},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "os.wait3(options)", "intent": "Similar to waitpid ( ) , except no process id argument is given and a 3-element tuple containing the child \u2019 s process id , exit status indication , and resource usage information is returned . With arguments `options`.", "question_id": 7083},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "io.StringIO()", "intent": "An in-memory stream for text I/O .", "question_id": 5164},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610},
{"snippet": "datetime.ctime()", "intent": "Return a string representing the date and time , for example datetime ( 2002 , 12 , 4 , 20 , 30 , 40 ) .ctime ( ) == 'Wed Dec 4 20:30:40 2002 ' .", "question_id": 2311},
{"snippet": "matlib.repmat(a, m, n)", "intent": "Repeat `a` 0-D to 2-D array or matrix MxN times . With arguments `m`, `n`.", "question_id": 18544},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "torch.randperm(n)", "intent": "Returns a random permutation of integers from 0 to `n` - 1 .", "question_id": 51967},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "polynomial.polyutils.trimcoef(c, tol=0)", "intent": "Remove \u201c small \u201d \u201c trailing \u201d coefficients from a polynomial . \u201c Small \u201d means \u201c small in absolute value \u201d and is controlled by the parameter `tol` ; \u201c trailing \u201d means highest order coefficient ( s ) , e.g. , in [ 0 , 1 , 1 , 0 , 0 ] ( which represents 0 + x + x * * 2 + 0 * x * * 3 + 0 * x * * 4 ) both the 3-rd and 4-th order coefficients would be \u201c trimmed . \u201d With arguments `c`.", "question_id": 22535},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565},
{"snippet": "email_message.get_content_subtype()", "intent": "Return the message \u2019 s sub-content type .", "question_id": 3257},
{"snippet": "Series.str.rsplit(pat=None)", "intent": "Split strings around given separator/delimiter . The `pat` parameter can be used to split by other characters .", "question_id": 41203},
{"snippet": "DataFrameGroupBy.sample(replace=False)", "intent": "Return a random sample of items from each group . With arguments `replace`.", "question_id": 43699},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "random.choice(a, size=None)", "intent": "Generates `a` random sample from a given 1-D array Generate a uniform random sample from np.arange ( 5 ) of `size` 3 :", "question_id": 18793},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42128},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "email_message.__str__()", "intent": "Equivalent to as_string ( policy=self.policy.clone ( utf8=True ) ) .", "question_id": 3232},
{"snippet": "numpy.info(toplevel='numpy')", "intent": "Get help information for a function , class , or module . With arguments `toplevel`.", "question_id": 22067},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "wsgiref.util.application_uri(environ)", "intent": "Similar to request_uri ( ) , except that the PATH_INFO and QUERY_STRING variables are ignored . With arguments `environ`.", "question_id": 12213},
{"snippet": "base64.a85decode(b, ignorechars=b' \\t\\n\\r\\v')", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `ignorechars` should be a bytes-like object or ASCII string containing characters to ignore from the input .", "question_id": 739},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "matlib.repmat(a, m, n)", "intent": "Repeat `a` 0-D to 2-D array or matrix MxN times . With arguments `m`, `n`.", "question_id": 18544},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "DataFrameGroupBy.sample(replace=False)", "intent": "Return a random sample of items from each group . With arguments `replace`.", "question_id": 43699},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "polynomial.polyutils.trimcoef(c, tol=0)", "intent": "Remove \u201c small \u201d \u201c trailing \u201d coefficients from a polynomial . \u201c Small \u201d means \u201c small in absolute value \u201d and is controlled by the parameter `tol` ; \u201c trailing \u201d means highest order coefficient ( s ) , e.g. , in [ 0 , 1 , 1 , 0 , 0 ] ( which represents 0 + x + x * * 2 + 0 * x * * 3 + 0 * x * * 4 ) both the 3-rd and 4-th order coefficients would be \u201c trimmed . \u201d With arguments `c`.", "question_id": 22535},
{"snippet": "context.exp(x)", "intent": "Returns e ** `x` .", "question_id": 2530},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "stat.S_ISGID", "intent": "Set-group-ID bit.", "question_id": 9095},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "ufunc.reduceat(array, indices, axis=0, dtype=None)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) . With arguments `dtype`.", "question_id": 23911},
{"snippet": "distutils.system_info.get_standard_file(fname)", "intent": "Returns a list of files named \u2018 `fname` \u2019 from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ \u2018 HOME \u2019 ] ) 3 ) Local directory", "question_id": 22646},
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124},
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657},
{"snippet": "DataFrame.__iter__()", "intent": "Iterate over info axis .", "question_id": 32135},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "numpy.fromstring(string, count=- 1)", "intent": "A new 1-D array initialized from text data in a `string` . With arguments `count`.", "question_id": 21478},
{"snippet": "Timedelta.nanoseconds", "intent": "Return the number of nanoseconds (n), where 0 <= n < 1 microsecond.", "question_id": 42135},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207},
{"snippet": "random.choice(a, replace=True)", "intent": "Generates `a` random sample from a given 1-D array With arguments `replace`.", "question_id": 18794},
{"snippet": "HTTPHandler.http_open(req)", "intent": "Send an HTTP request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11871},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "torch.nn.MultiMarginLoss(p=1)", "intent": "Creates a criterion that optimizes a multi-class classification hinge loss ( margin-based loss ) between input xxx ( a 2D mini-batch Tensor ) and output yyy ( which is a 1D tensor of target class indices , 0\u2264y\u2264x.size ( 1 ) \u221210 \\leq y \\leq \\text { x.size } ( 1 ) -10\u2264y\u2264x.size ( 1 ) \u22121 ) : With arguments `p`.", "question_id": 48060},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "email_message.get_content_subtype()", "intent": "Return the message \u2019 s sub-content type .", "question_id": 3257},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141},
{"snippet": "argparse.ArgumentParser()", "intent": "Create a new ArgumentParser object .", "question_id": 38},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "torch.nn.utils.rnn.pad_sequence(sequences, batch_first=False)", "intent": "Pad a list of variable length Tensors with `padding_value` For example , if the input is list of `sequences` with size L x * and if `batch_first` is False , and T x B x * otherwise .", "question_id": 48320},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "email_message.get_content_subtype()", "intent": "Return the message \u2019 s sub-content type .", "question_id": 3257},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "softplus.prune(t)", "intent": "Computes and returns a pruned version of input tensor `t` according to the pruning rule specified in compute_mask ( ) .", "question_id": 50894},
{"snippet": "char.compare_chararrays(a, b, cmp_op, rstrip)", "intent": "Performs element-wise comparison of two string arrays using the comparison operator specified by `cmp_op` . With arguments `a`, `b`, `rstrip`.", "question_id": 21045},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "curses.echo()", "intent": "Enter echo mode .", "question_id": 1931},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "compileall.compile_path()", "intent": "Byte-compile all the .py files found along sys.path .", "question_id": 1429},
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200},
{"snippet": "string.capwords(s)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . With arguments `s`.", "question_id": 9529},
{"snippet": "curses.ascii.isdigit(c)", "intent": "Checks for an ASCII decimal digit , ' 0 ' through ' 9 ' . This is equivalent to `c` in string.digits .", "question_id": 1904},
{"snippet": "polynomial.polyutils.mapdomain(x, old, new)", "intent": "Apply linear map to input points . The linear map offset + scale * `x` that maps the domain `old` to the domain `new` is applied to the points x .", "question_id": 22969},
{"snippet": "Series.swaplevel(i=- 2)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 41411},
{"snippet": "DataFrame.to_csv(header=True)", "intent": "Write object to a comma-separated values ( csv ) file . With arguments `header`.", "question_id": 35317},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "datetime.max", "intent": "The latest representable datetime, datetime(MAXYEAR, 12, 31, 23, 59, 59, 999999, tzinfo=None).", "question_id": 2270},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022},
{"snippet": "widget.focus(item=None)", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10631},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "Series.swaplevel(i=- 2)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 41411},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "char.multiply(a, i)", "intent": "Return ( `a` * `i` ) , that is string multiple concatenation , element-wise .", "question_id": 17318},
{"snippet": "IMAP4.error", "intent": "Exception raised on any errors.", "question_id": 4673},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "winreg.REG_DWORD", "intent": "32-bit number.", "question_id": 12175},
{"snippet": "resource_reader.resource_path(resource)", "intent": "Returns the file system path to the `resource` .", "question_id": 4820},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "re.finditer(pattern, string)", "intent": "Return an iterator yielding match objects over all non-overlapping matches for the RE `pattern` in `string` .", "question_id": 7949},
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "pandas.read_csv(filepath_or_buffer, sep=NoDefault.no_default)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `sep`.", "question_id": 46055},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "Index.sortlevel()", "intent": "For internal compatibility with the Index API .", "question_id": 37079},
{"snippet": "date.fromordinal(ordinal)", "intent": "Return the date corresponding to the proleptic Gregorian `ordinal` , where January 1 of year 1 has ordinal 1 .", "question_id": 2221},
{"snippet": "formatter.AbstractFormatter(writer)", "intent": "The standard formatter . With arguments `writer`.", "question_id": 3840},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "datetime.fold", "intent": "In [0, 1].", "question_id": 2280},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "calendar.calendar(year, l=1, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`, `m`.", "question_id": 1020},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "Series.str.rsplit(pat=None)", "intent": "Split strings around given separator/delimiter . The `pat` parameter can be used to split by other characters .", "question_id": 41203},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "char.compare_chararrays(a, b, cmp_op, rstrip)", "intent": "Performs element-wise comparison of two string arrays using the comparison operator specified by `cmp_op` . With arguments `a`, `b`, `rstrip`.", "question_id": 21045},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171},
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "struct.Struct(format)", "intent": "Return a new Struct object which writes and reads binary data according to the `format` string format .", "question_id": 9558},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "wsgi_request_handler.handle()", "intent": "Process the HTTP request .", "question_id": 12234},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "distutils.system_info.get_standard_file(fname)", "intent": "Returns a list of files named \u2018 `fname` \u2019 from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ \u2018 HOME \u2019 ] ) 3 ) Local directory", "question_id": 22646},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "curses.echo()", "intent": "Enter echo mode .", "question_id": 1931},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "HTTPHandler.http_open(req)", "intent": "Send an HTTP request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11871},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "torch.sparse.softmax(input, dim)", "intent": "Applies a softmax function . It is applied to all slices along `dim` , and will re-scale them so that the elements lie in the range [ 0 , 1 ] and sum to 1 . With arguments `input`.", "question_id": 48377},
{"snippet": "formatter.push_font((size, italic, bold, teletype))", "intent": "Change some or all font properties of the writer object . With arguments `(size`, `italic`, `bold`, `teletype)`.", "question_id": 3828},
{"snippet": "ma.MaskedArray.__setitem__(indx, value)", "intent": "x.__setitem__ ( i , y ) < == > x [ i ] =y If `value` is masked , masks those locations . With arguments `indx`.", "question_id": 20719},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640},
{"snippet": "Queue.get_nowait()", "intent": "Equivalent to get ( False ) .", "question_id": 7858},
{"snippet": "shutil.unregister_unpack_format(name)", "intent": "Unregister an unpack format . `name` is the name of the format .", "question_id": 8369},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "polynomial.polyutils.trimcoef(c, tol=0)", "intent": "Remove \u201c small \u201d \u201c trailing \u201d coefficients from a polynomial . \u201c Small \u201d means \u201c small in absolute value \u201d and is controlled by the parameter `tol` ; \u201c trailing \u201d means highest order coefficient ( s ) , e.g. , in [ 0 , 1 , 1 , 0 , 0 ] ( which represents 0 + x + x * * 2 + 0 * x * * 3 + 0 * x * * 4 ) both the 3-rd and 4-th order coefficients would be \u201c trimmed . \u201d With arguments `c`.", "question_id": 22535},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346},
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "numpy.sign(x, /, signature)", "intent": "Returns an element-wise indication of the sign of a number . The sign function returns -1 if `x` < 0 , 0 if x==0 , 1 if x > 0. nan is returned for nan inputs . With arguments `/`, `signature`.", "question_id": 18231},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474},
{"snippet": "polynomial.chebyshev.chebpts1(npts)", "intent": "Chebyshev points of the first kind . The Chebyshev points of the first kind are the points cos ( x ) , where x = [ pi * ( k + .5 ) /npts for k in range ( `npts` ) ] .", "question_id": 16906},
{"snippet": "datetime.fold", "intent": "In [0, 1].", "question_id": 2280},
{"snippet": "pandas.read_csv(filepath_or_buffer, delimiter=None)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `delimiter`.", "question_id": 46036},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42129},
{"snippet": "binascii.crc_hqx(data, value)", "intent": "Compute a 16-bit CRC `value` of `data` , starting with value as the initial CRC , and return the result .", "question_id": 840},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "Series.str.rsplit(pat=None)", "intent": "Split strings around given separator/delimiter . The `pat` parameter can be used to split by other characters .", "question_id": 41203},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "Unpacker.done()", "intent": "Indicates unpack completion .", "question_id": 12289},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "pandas.pivot_table(data, aggfunc='mean')", "intent": "Create a spreadsheet-style pivot table as a DataFrame . With arguments `data`, `aggfunc`.", "question_id": 45765},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "Tensor.div_(value)", "intent": "In-place version of div ( ) With arguments `value`.", "question_id": 48681},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565},
{"snippet": "math.log2(x)", "intent": "Return the base-2 logarithm of `x` .", "question_id": 5910},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "ufunc.reduceat(array, indices, axis=0, dtype=None)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) . With arguments `dtype`.", "question_id": 23911},
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026},
{"snippet": "ssl.cert_time_to_seconds(cert_time)", "intent": "Return the time in seconds since the Epoch , given the `cert_time` string representing the \u201c notBefore \u201d or \u201c notAfter \u201d date from a certificate in `` % b % d % H : % M : % S % Y % Z '' strptime format ( C locale ) .", "question_id": 8891},
{"snippet": "compileall.compile_path()", "intent": "Byte-compile all the .py files found along sys.path .", "question_id": 1429},
{"snippet": "linalg.tensorsolve(a, b)", "intent": "Solve the tensor equation `a` x = `b` for x .", "question_id": 19418},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "ctypes.c_int16", "intent": "Represents the C 16-bit signed int datatype.", "question_id": 1863},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42129},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "numpy.column_stack(tup)", "intent": "Stack 1-D arrays as columns into a 2-D array . With arguments `tup`.", "question_id": 20745},
{"snippet": "DataFrame.reset_index(level=None)", "intent": "Reset the index , or a `level` of it .", "question_id": 34634},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "base_server.serve_forever(poll_interval=0.5)", "intent": "Handle requests until an explicit shutdown ( ) request . Poll for shutdown every `poll_interval` seconds .", "question_id": 8763},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "linalg.tensorsolve(a, b)", "intent": "Solve the tensor equation `a` x = `b` for x .", "question_id": 19418},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "traceback.format_stack(limit=None)", "intent": "A shorthand for format_list ( extract_stack ( `f` , `limit` ) ) .", "question_id": 10789},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899},
{"snippet": "linalg.tensorsolve(a, b)", "intent": "Solve the tensor equation `a` x = `b` for x .", "question_id": 19418},
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "tuple()", "intent": "Tuples may be constructed in a number of ways :", "question_id": 9161},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "formatter.pop_style(n=1)", "intent": "Pop the last `n` style specifications passed to push_style ( ) .", "question_id": 3834},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "email_message.__str__()", "intent": "Equivalent to as_string ( policy=self.policy.clone ( utf8=True ) ) .", "question_id": 3232},
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "re.ASCII", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7925},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "globals()", "intent": "Return a dictionary representing the current global symbol table .", "question_id": 4027},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200},
{"snippet": "date.ctime()", "intent": "Return a string representing the date , for example date ( 2002 , 12 , 4 ) .ctime ( ) == 'Wed Dec 4 00:00:00 2002 ' .", "question_id": 2244},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42129},
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825},
{"snippet": "distutils.system_info.get_standard_file(fname)", "intent": "Returns a list of files named \u2018 `fname` \u2019 from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ \u2018 HOME \u2019 ] ) 3 ) Local directory", "question_id": 22646},
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134},
{"snippet": "errno.EL3HLT", "intent": "Level 3 halted", "question_id": 3551},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "os.rename(src, dst)", "intent": "Rename the file or directory `src` to `dst` .", "question_id": 6892},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "Series.str.rsplit(pat=None)", "intent": "Split strings around given separator/delimiter . The `pat` parameter can be used to split by other characters .", "question_id": 41203},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "lambda_lr.load_state_dict(state_dict)", "intent": "Loads the schedulers state . With arguments `state_dict`.", "question_id": 50616},
{"snippet": "numpy.column_stack(tup)", "intent": "Stack 1-D arrays as columns into a 2-D array . With arguments `tup`.", "question_id": 20745},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "turtle.mode(mode=None)", "intent": "Set turtle `mode` ( \u201c standard \u201d , \u201c logo \u201d or \u201c world \u201d ) and perform reset .", "question_id": 11093},
{"snippet": "date.ctime()", "intent": "Return a string representing the date , for example date ( 2002 , 12 , 4 ) .ctime ( ) == 'Wed Dec 4 00:00:00 2002 ' .", "question_id": 2244},
{"snippet": "os.supports_fd", "intent": "A Set object indicating which functions in the os module permit specifying their path parameter as an open file descriptor.", "question_id": 6949},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "float.fromhex(s)", "intent": "Class method to return the float represented by a hexadecimal string s. The string `s` may have leading and trailing whitespace .", "question_id": 9150},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "Series.dt.hour", "intent": "The hours of the datetime.", "question_id": 38772},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "random.Generator.choice(a, replace=True)", "intent": "Generates `a` random sample from a given array With arguments `replace`.", "question_id": 23918},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "importlib.util.source_from_cache(path)", "intent": "Given the `path` to a PEP 3147 file name , return the associated source code file path .", "question_id": 4925},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "ZipInfo.flag_bits", "intent": "ZIP flag bits.", "question_id": 12872},
{"snippet": "NNTP.newgroups(date)", "intent": "Send a NEWGROUPS command . The `date` argument should be a datetime.date or datetime.datetime object .", "question_id": 6461},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "bisect.insort_left(a, x, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 866},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "NNTP.newgroups(date)", "intent": "Send a NEWGROUPS command . The `date` argument should be a datetime.date or datetime.datetime object .", "question_id": 6461},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "re.ASCII", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7925},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "distutils.system_info.get_standard_file(fname)", "intent": "Returns a list of files named \u2018 `fname` \u2019 from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ \u2018 HOME \u2019 ] ) 3 ) Local directory", "question_id": 22646},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "numpy.tril_indices_from(arr, k=0)", "intent": "Return the indices for the lower-triangle of `arr` . With arguments `k`.", "question_id": 21469},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "random.Generator.power(a)", "intent": "Draws samples in [ 0 , 1 ] from `a` power distribution with positive exponent a - 1 .", "question_id": 16090},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "numpy.fliplr(m)", "intent": "Reverse the order of elements along axis 1 ( left/right ) . Equivalent to `m` [ : , : :-1 ] or np.flip ( m , axis=1 ) .", "question_id": 22728},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "numpy.column_stack(tup)", "intent": "Stack 1-D arrays as columns into a 2-D array . With arguments `tup`.", "question_id": 20745},
{"snippet": "DataFrame.reset_index(level=None)", "intent": "Reset the index , or a `level` of it .", "question_id": 34634},
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "numpy.sign(x, /, signature)", "intent": "Returns an element-wise indication of the sign of a number . The sign function returns -1 if `x` < 0 , 0 if x==0 , 1 if x > 0. nan is returned for nan inputs . With arguments `/`, `signature`.", "question_id": 18231},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "formatter.pop_style(n=1)", "intent": "Pop the last `n` style specifications passed to push_style ( ) .", "question_id": 3834},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "random.choice(a, replace=True)", "intent": "Generates `a` random sample from a given 1-D array With arguments `replace`.", "question_id": 18794},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "numpy.fliplr(m)", "intent": "Reverse the order of elements along axis 1 ( left/right ) . Equivalent to `m` [ : , : :-1 ] or np.flip ( m , axis=1 ) .", "question_id": 22728},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "datetime.ctime()", "intent": "Return a string representing the date and time , for example datetime ( 2002 , 12 , 4 , 20 , 30 , 40 ) .ctime ( ) == 'Wed Dec 4 20:30:40 2002 ' .", "question_id": 2311},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "random.choice(a, replace=True)", "intent": "Generates `a` random sample from a given 1-D array With arguments `replace`.", "question_id": 18794},
{"snippet": "re.finditer(pattern, string)", "intent": "Return an iterator yielding match objects over all non-overlapping matches for the RE `pattern` in `string` .", "question_id": 7949},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473},
{"snippet": "pandas.read_csv(filepath_or_buffer, sep=NoDefault.no_default)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `sep`.", "question_id": 46055},
{"snippet": "random.RandomState.choice(a, size=None)", "intent": "Generates `a` random sample from a given 1-D array Generate a uniform random sample from np.arange ( 5 ) of `size` 3 :", "question_id": 18903},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "date.__format__(format)", "intent": "Same as date.strftime ( ) . This makes it possible to specify a `format` string for a date object in formatted string literals and when using str.format ( ) .", "question_id": 2246},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "filecmp.dircmp(a, b)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . With arguments `b`.", "question_id": 3760},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "tkinter.tix.Form", "intent": "The Form geometry manager based on attachment rules for all Tk widgets.", "question_id": 10578},
{"snippet": "compileall.compile_path()", "intent": "Byte-compile all the .py files found along sys.path .", "question_id": 1429},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "DataFrame.plot.bar(**kwargs)", "intent": "Vertical bar plot . With arguments `**kwargs`.", "question_id": 34110},
{"snippet": "Match.expand(template)", "intent": "Return the string obtained by doing backslash substitution on the `template` string template , as done by the sub ( ) method .", "question_id": 7995},
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445},
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435},
{"snippet": "Series.str.findall(pat)", "intent": "Find all occurrences of pattern or regular expression in the Series/Index . With arguments `pat`.", "question_id": 40958},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435},
{"snippet": "ssl.cert_time_to_seconds(cert_time)", "intent": "Return the time in seconds since the Epoch , given the `cert_time` string representing the \u201c notBefore \u201d or \u201c notAfter \u201d date from a certificate in `` % b % d % H : % M : % S % Y % Z '' strptime format ( C locale ) .", "question_id": 8891},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "Series.str.rsplit(pat=None)", "intent": "Split strings around given separator/delimiter . The `pat` parameter can be used to split by other characters .", "question_id": 41203},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "re.ASCII", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7925},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "subprocess.getstatusoutput(cmd)", "intent": "Return ( exitcode , output ) of executing `cmd` in a shell .", "question_id": 9689},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "torch.vander(x, N=None)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . With arguments `N`.", "question_id": 48636},
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130},
{"snippet": "Tensor.clamp(min=None, max=None)", "intent": "See torch.clamp ( ) With arguments `min`, `max`.", "question_id": 51755},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "ufunc.reduceat(array, indices)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) .", "question_id": 23907},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "distutils.system_info.get_standard_file(fname)", "intent": "Returns a list of files named \u2018 `fname` \u2019 from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ \u2018 HOME \u2019 ] ) 3 ) Local directory", "question_id": 22646},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "traceback.format_stack(limit=None)", "intent": "A shorthand for format_list ( extract_stack ( `f` , `limit` ) ) .", "question_id": 10789},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445},
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "DataFrame.set_axis(labels)", "intent": "Assign desired index to given `axis` . Indexes for column or row `labels` can be changed by assigning a list-like or Index .", "question_id": 34899},
{"snippet": "core.records.fromarrays(arrayList)", "intent": "Create a record array from a ( flat ) list of arrays With arguments `arrayList`.", "question_id": 20259},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "bz2.open(filename)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 876},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032},
{"snippet": "bisect.insort_left(a, x, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 866},
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110},
{"snippet": "email_message.__str__()", "intent": "Equivalent to as_string ( policy=self.policy.clone ( utf8=True ) ) .", "question_id": 3232},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "distutils.system_info.get_standard_file(fname)", "intent": "Returns a list of files named \u2018 `fname` \u2019 from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ \u2018 HOME \u2019 ] ) 3 ) Local directory", "question_id": 22646},
{"snippet": "TarInfo.isreg()", "intent": "Same as isfile ( ) .", "question_id": 9993},
{"snippet": "DataFrame.ffill(inplace=False)", "intent": "Synonym for DataFrame.fillna ( ) with method='ffill ' . With arguments `inplace`.", "question_id": 33063},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "DataFrame.hist(**kwargs, grid=True)", "intent": "Make a histogram of the DataFrame \u2019 s columns . With arguments `**kwargs`, `grid`.", "question_id": 33294},
{"snippet": "urllib.parse.unquote(string, encoding='utf-8', errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11726},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "i_pv4_address.version", "intent": "The appropriate version number: 4 for IPv4, 6 for IPv6.", "question_id": 5175},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "io.StringIO()", "intent": "An in-memory stream for text I/O .", "question_id": 5164},
{"snippet": "bool()", "intent": "Return a Boolean value , i.e .", "question_id": 3979},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471},
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "numpy.issubclass_(arg1, arg2)", "intent": "Determine if a class is a subclass of a second class . With arguments `arg1`, `arg2`.", "question_id": 19519},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "matlib.repmat(a, m, n)", "intent": "Repeat `a` 0-D to 2-D array or matrix MxN times . With arguments `m`, `n`.", "question_id": 18544},
{"snippet": "operator.is_not(a, b)", "intent": "Return `a` is not `b` .", "question_id": 6529},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032},
{"snippet": "distutils.system_info.get_standard_file(fname)", "intent": "Returns a list of files named \u2018 `fname` \u2019 from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ \u2018 HOME \u2019 ] ) 3 ) Local directory", "question_id": 22646},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "torch.lstsq(input, A)", "intent": "Computes the solution to the least squares and least norm problems for a full rank matrix AAA of size ( m\u00d7n ) ( m \\times n ) ( m\u00d7n ) and a matrix BBB of size ( m\u00d7k ) ( m \\times k ) ( m\u00d7k ) . With arguments `input`, `A`.", "question_id": 51237},
{"snippet": "widget.focus(item=None)", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10631},
{"snippet": "ufunc.reduceat(array, indices, dtype=None)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) . With arguments `dtype`.", "question_id": 23909},
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124},
{"snippet": "date.ctime()", "intent": "Return a string representing the date , for example date ( 2002 , 12 , 4 ) .ctime ( ) == 'Wed Dec 4 00:00:00 2002 ' .", "question_id": 2244},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "email_message.__str__()", "intent": "Equivalent to as_string ( policy=self.policy.clone ( utf8=True ) ) .", "question_id": 3232},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "curses.echo()", "intent": "Enter echo mode .", "question_id": 1931},
{"snippet": "ssl.cert_time_to_seconds(cert_time)", "intent": "Return the time in seconds since the Epoch , given the `cert_time` string representing the \u201c notBefore \u201d or \u201c notAfter \u201d date from a certificate in `` % b % d % H : % M : % S % Y % Z '' strptime format ( C locale ) .", "question_id": 8891},
{"snippet": "ZipInfo.flag_bits", "intent": "ZIP flag bits.", "question_id": 12872},
{"snippet": "Timedelta.nanoseconds", "intent": "Return the number of nanoseconds (n), where 0 <= n < 1 microsecond.", "question_id": 42135},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "distutils.system_info.get_standard_file(fname)", "intent": "Returns a list of files named \u2018 `fname` \u2019 from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ \u2018 HOME \u2019 ] ) 3 ) Local directory", "question_id": 22646},
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735},
{"snippet": "ssl.enum_certificates(store_name)", "intent": "Retrieve certificates from Windows \u2019 system cert store . `store_name` may be one of CA , ROOT or MY .", "question_id": 8899},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "pandas.tseries.offsets.FY5253Quarter", "intent": "DateOffset increments between business quarter dates for 52-53 week fiscal year (also known as a 4-4-5 calendar).", "question_id": 47021},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014},
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "text_calendar.pryear(theyear, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`.", "question_id": 948},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "Timedelta.nanoseconds", "intent": "Return the number of nanoseconds (n), where 0 <= n < 1 microsecond.", "question_id": 42135},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "frame.filename", "intent": "Filename (str).", "question_id": 10868},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`.", "question_id": 66},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "ZipInfo.flag_bits", "intent": "ZIP flag bits.", "question_id": 12872},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982},
{"snippet": "SimpleXMLRPCRequestHandler.rpc_paths", "intent": "An attribute value that must be a tuple listing valid path portions of the URL for receiving XML-RPC requests.", "question_id": 12739},
{"snippet": "os.supports_fd", "intent": "A Set object indicating which functions in the os module permit specifying their path parameter as an open file descriptor.", "question_id": 6949},
{"snippet": "Series.str.rsplit(pat=None)", "intent": "Split strings around given separator/delimiter . The `pat` parameter can be used to split by other characters .", "question_id": 41203},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "tkinter.tix.Select", "intent": "The Select widget is a container of button subwidgets.", "question_id": 10561},
{"snippet": "test.support.script_helper.spawn_python(*args, **kw, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`, `stdout`, `stderr`.", "question_id": 10306},
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "Series.str.cat(join='left')", "intent": "Concatenate strings in the Series/Index with given separator . With arguments `join`.", "question_id": 40862},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473},
{"snippet": "ufunc.reduceat(array, indices)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) .", "question_id": 23907},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "compileall.compile_path()", "intent": "Byte-compile all the .py files found along sys.path .", "question_id": 1429},
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "ZipInfo.flag_bits", "intent": "ZIP flag bits.", "question_id": 12872},
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982},
{"snippet": "IMAP4.fetch(message_set, message_parts)", "intent": "Fetch ( parts of ) messages . `message_parts` should be a string of message part names enclosed within parentheses , eg : `` ( UID BODY [ TEXT ] ) '' . With arguments `message_set`.", "question_id": 4701},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "MultiIndex.from_frame(df, names=None)", "intent": "Make a MultiIndex from a DataFrame . Using explicit `names` , instead of the column names With arguments `df`.", "question_id": 37554},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "Path.write_text(data)", "intent": "Open the file pointed to in text mode , write `data` to it , and close the file :", "question_id": 7323},
{"snippet": "HTTPHandler.http_open(req)", "intent": "Send an HTTP request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11871},
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565},
{"snippet": "os.path.normpath(path)", "intent": "Normalize a pathname by collapsing redundant separators and up-level references so that A//B , A/B/ , A/./B and A/foo/../B all become A/B . This string manipulation may change the meaning of a `path` that contains symbolic links .", "question_id": 7162},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "distutils.system_info.get_standard_file(fname)", "intent": "Returns a list of files named \u2018 `fname` \u2019 from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ \u2018 HOME \u2019 ] ) 3 ) Local directory", "question_id": 22646},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "ssl.cert_time_to_seconds(cert_time)", "intent": "Return the time in seconds since the Epoch , given the `cert_time` string representing the \u201c notBefore \u201d or \u201c notAfter \u201d date from a certificate in `` % b % d % H : % M : % S % Y % Z '' strptime format ( C locale ) .", "question_id": 8891},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977},
{"snippet": "HDFStore.append(key, value, append=True)", "intent": "Append to Table in file . With arguments `key`, `value`, `append`.", "question_id": 36388},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "PurePath.match(pattern)", "intent": "Match this path against the provided glob-style `pattern` .", "question_id": 7258},
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296},
{"snippet": "date.ctime()", "intent": "Return a string representing the date , for example date ( 2002 , 12 , 4 ) .ctime ( ) == 'Wed Dec 4 00:00:00 2002 ' .", "question_id": 2244},
{"snippet": "torch.lstsq(input, A)", "intent": "Computes the solution to the least squares and least norm problems for a full rank matrix AAA of size ( m\u00d7n ) ( m \\times n ) ( m\u00d7n ) and a matrix BBB of size ( m\u00d7k ) ( m \\times k ) ( m\u00d7k ) . With arguments `input`, `A`.", "question_id": 51237},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "date.ctime()", "intent": "Return a string representing the date , for example date ( 2002 , 12 , 4 ) .ctime ( ) == 'Wed Dec 4 00:00:00 2002 ' .", "question_id": 2244},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "string.capwords(s)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . With arguments `s`.", "question_id": 9529},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "random.Generator.power(a)", "intent": "Draws samples in [ 0 , 1 ] from `a` power distribution with positive exponent a - 1 .", "question_id": 16090},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "polynomial.chebyshev.chebgauss(deg)", "intent": "Gauss-Chebyshev quadrature . These sample points and weights will correctly integrate polynomials of degree \\ ( 2 * `deg` - 1\\ ) or less over the interval \\ ( [ -1 , 1 ] \\ ) with the weight function \\ ( f ( x ) = 1/\\sqrt { 1 - x^2 } \\ ) .", "question_id": 19526},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "torch.nn.utils.rnn.pad_sequence(sequences, batch_first=False)", "intent": "Pad a list of variable length Tensors with `padding_value` For example , if the input is list of `sequences` with size L x * and if `batch_first` is False , and T x B x * otherwise .", "question_id": 48320},
{"snippet": "Series.str.cat(join='left')", "intent": "Concatenate strings in the Series/Index with given separator . With arguments `join`.", "question_id": 40862},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42129},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "context.get(var)", "intent": "Return the value for `var` if var has the value in the context object .", "question_id": 1655},
{"snippet": "widget.focus(item=None)", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10631},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42129},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "distutils.exec_command.find_executable(exe)", "intent": "Return full `path` of a executable or None . With arguments `exe`.", "question_id": 21529},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "pandas.read_csv(filepath_or_buffer, delimiter=None)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `delimiter`.", "question_id": 46036},
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032},
{"snippet": "os.WIFEXITED(status)", "intent": "Return True if the process exited using the exit ( 2 ) system call , otherwise return False . With arguments `status`.", "question_id": 7092},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "datetime.second", "intent": "In range(60).", "question_id": 2277},
{"snippet": "matlib.repmat(a, m, n)", "intent": "Repeat `a` 0-D to 2-D array or matrix MxN times . With arguments `m`, `n`.", "question_id": 18544},
{"snippet": "numpy.column_stack(tup)", "intent": "Stack 1-D arrays as columns into a 2-D array . With arguments `tup`.", "question_id": 20745},
{"snippet": "filecmp.dircmp(a, b)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . With arguments `b`.", "question_id": 3760},
{"snippet": "os.supports_fd", "intent": "A Set object indicating which functions in the os module permit specifying their path parameter as an open file descriptor.", "question_id": 6949},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "random.Generator.power(a)", "intent": "Draws samples in [ 0 , 1 ] from `a` power distribution with positive exponent a - 1 .", "question_id": 16090},
{"snippet": "softplus.prune(t)", "intent": "Computes and returns a pruned version of input tensor `t` according to the pruning rule specified in compute_mask ( ) .", "question_id": 50894},
{"snippet": "operator.__iconcat__(a, b)", "intent": "`a` = iconcat ( a , `b` ) is equivalent to a += b for a and b sequences .", "question_id": 6593},
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "polynomial.chebyshev.chebtrim(c)", "intent": "Remove \u201c small \u201d \u201c trailing \u201d coefficients from a polynomial . With arguments `c`.", "question_id": 21491},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445},
{"snippet": "numpy.base_repr(number)", "intent": "Return a string representation of a `number` in the given `base` system .", "question_id": 21216},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "DataFrame.sort_index(ascending=True)", "intent": "Sort object by labels ( along an `axis` ) . By default , it sorts in `ascending` order , to sort in descending order , use ascending=False", "question_id": 35034},
{"snippet": "numpy.sign(x, /, signature)", "intent": "Returns an element-wise indication of the sign of a number . The sign function returns -1 if `x` < 0 , 0 if x==0 , 1 if x > 0. nan is returned for nan inputs . With arguments `/`, `signature`.", "question_id": 18231},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "base_server.serve_forever(poll_interval=0.5)", "intent": "Handle requests until an explicit shutdown ( ) request . Poll for shutdown every `poll_interval` seconds .", "question_id": 8763},
{"snippet": "base64.a85decode(b, ignorechars=b' \\t\\n\\r\\v')", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `ignorechars` should be a bytes-like object or ASCII string containing characters to ignore from the input .", "question_id": 739},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "email_message.__str__()", "intent": "Equivalent to as_string ( policy=self.policy.clone ( utf8=True ) ) .", "question_id": 3232},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "email_message.__str__()", "intent": "Equivalent to as_string ( policy=self.policy.clone ( utf8=True ) ) .", "question_id": 3232},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "pandas.read_csv(filepath_or_buffer, delimiter=None)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `delimiter`.", "question_id": 46036},
{"snippet": "ma.cov(x)", "intent": "Estimate the covariance matrix . If `x` and `y` have the same shape , a common mask is allocated : if x [ i , j ] is masked , then y [ i , j ] will also be masked .", "question_id": 16259},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899},
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "date.ctime()", "intent": "Return a string representing the date , for example date ( 2002 , 12 , 4 ) .ctime ( ) == 'Wed Dec 4 00:00:00 2002 ' .", "question_id": 2244},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "random.Generator.choice(a, replace=True)", "intent": "Generates `a` random sample from a given array With arguments `replace`.", "question_id": 23918},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "Series.str.rsplit(pat=None)", "intent": "Split strings around given separator/delimiter . The `pat` parameter can be used to split by other characters .", "question_id": 41203},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "Timestamp.combine(date, time)", "intent": "Combine `date` , `time` into datetime with same date and time fields .", "question_id": 42281},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825},
{"snippet": "os.supports_fd", "intent": "A Set object indicating which functions in the os module permit specifying their path parameter as an open file descriptor.", "question_id": 6949},
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "ufunc.reduceat(array, indices)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) .", "question_id": 23907},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "ast._fields", "intent": "Each concrete class has an attribute _fields which gives the names of all child nodes.", "question_id": 142},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "io.StringIO()", "intent": "An in-memory stream for text I/O .", "question_id": 5164},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "polynomial.polyutils.mapparms(old, new)", "intent": "Linear map parameters between domains . Return the parameters of the linear map offset + scale * x that maps `old` to `new` such that old [ i ] - > new [ i ] , i = 0 , 1 .", "question_id": 20245},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "ctypes.c_int16", "intent": "Represents the C 16-bit signed int datatype.", "question_id": 1863},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42128},
{"snippet": "os.path.lexists(path)", "intent": "Return True if `path` refers to an existing path .", "question_id": 7148},
{"snippet": "Series.swaplevel(i=- 2)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 41411},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "torch.nn.functional.pixel_shuffle(input, upscale_factor)", "intent": "Rearranges elements in a tensor of shape ( \u2217 , C\u00d7r2 , H , W ) ( * , C \\times r^2 , H , W ) ( \u2217 , C\u00d7r2 , H , W ) to a tensor of shape ( \u2217 , C , H\u00d7r , W\u00d7r ) ( * , C , H \\times r , W \\times r ) ( \u2217 , C , H\u00d7r , W\u00d7r ) , where r is the `upscale_factor` . With arguments `input`.", "question_id": 51421},
{"snippet": "random.Generator.power(a)", "intent": "Draws samples in [ 0 , 1 ] from `a` power distribution with positive exponent a - 1 .", "question_id": 16090},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "widget.focus(item=None)", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10631},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "Styler.format(decimal='.')", "intent": "Format the text display value of cells . With arguments `decimal`.", "question_id": 45064},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "email.utils.decode_rfc2231(s)", "intent": "Decode the string `s` according to RFC 2231 .", "question_id": 3478},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901},
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072},
{"snippet": "curses.echo()", "intent": "Enter echo mode .", "question_id": 1931},
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "time.daylight", "intent": "Nonzero if a DST timezone is defined.", "question_id": 10473},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735},
{"snippet": "readline.get_completer_delims()", "intent": "Set or get the word delimiters for completion .", "question_id": 8047},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "numpy.angle(z)", "intent": "Return the angle of the complex argument . With arguments `z`.", "question_id": 19435},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "test.support.TEST_SUPPORT_DIR", "intent": "Set to the top level directory that contains test.support.", "question_id": 10126},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "counter.most_common(n)", "intent": "Return a list of the `n` most common elements and their counts from the most common to the least .", "question_id": 1343},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "datetime.date(year, month, day)", "intent": "All arguments are required . With arguments `year`, `month`, `day`.", "question_id": 2218},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "datetime.max", "intent": "The latest representable datetime, datetime(MAXYEAR, 12, 31, 23, 59, 59, 999999, tzinfo=None).", "question_id": 2270},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "NNTP.newgroups(date)", "intent": "Send a NEWGROUPS command . The `date` argument should be a datetime.date or datetime.datetime object .", "question_id": 6461},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "stat.S_ISGID", "intent": "Set-group-ID bit.", "question_id": 9095},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42128},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "DataFrame.reset_index(level=None)", "intent": "Reset the index , or a `level` of it .", "question_id": 34634},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141},
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072},
{"snippet": "importlib.util.source_from_cache(path)", "intent": "Given the `path` to a PEP 3147 file name , return the associated source code file path .", "question_id": 4925},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "context.exp(x)", "intent": "Returns e ** `x` .", "question_id": 2530},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "ZipInfo.flag_bits", "intent": "ZIP flag bits.", "question_id": 12872},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "ssl.SSLSession", "intent": "Session object used by session.", "question_id": 9060},
{"snippet": "string.capwords(s)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . With arguments `s`.", "question_id": 9529},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "email_message.__str__()", "intent": "Equivalent to as_string ( policy=self.policy.clone ( utf8=True ) ) .", "question_id": 3232},
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "DataFrame.swaplevel(i=- 2)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35254},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "DataFrame.swaplevel(i=- 2)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35254},
{"snippet": "traceback.format_stack(limit=None)", "intent": "A shorthand for format_list ( extract_stack ( `f` , `limit` ) ) .", "question_id": 10789},
{"snippet": "torch.vander(x)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 .", "question_id": 48635},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "Series.str.rsplit(pat=None)", "intent": "Split strings around given separator/delimiter . The `pat` parameter can be used to split by other characters .", "question_id": 41203},
{"snippet": "curses.echo()", "intent": "Enter echo mode .", "question_id": 1931},
{"snippet": "numpy.fromstring(string, count=- 1)", "intent": "A new 1-D array initialized from text data in a `string` . With arguments `count`.", "question_id": 21478},
{"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "Timedelta.nanoseconds", "intent": "Return the number of nanoseconds (n), where 0 <= n < 1 microsecond.", "question_id": 42135},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "polynomial.chebyshev.chebpts1(npts)", "intent": "Chebyshev points of the first kind . The Chebyshev points of the first kind are the points cos ( x ) , where x = [ pi * ( k + .5 ) /npts for k in range ( `npts` ) ] .", "question_id": 16906},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825},
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "random.choice(a, replace=True)", "intent": "Generates `a` random sample from a given 1-D array With arguments `replace`.", "question_id": 18794},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "struct.Struct(format)", "intent": "Return a new Struct object which writes and reads binary data according to the `format` string format .", "question_id": 9558},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435},
{"snippet": "numpy.gradient(f, *varargs)", "intent": "Return the gradient of an N-dimensional array . By substituting \\ ( `f` ( x_ { i } + h_ { d } ) \\ ) and \\ ( f ( x_ { i } - h_ { s } ) \\ ) with their Taylor series expansion , this translates into solving the following the linear system : With arguments `*varargs`.", "question_id": 17438},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "numpy.sign(x, /, signature)", "intent": "Returns an element-wise indication of the sign of a number . The sign function returns -1 if `x` < 0 , 0 if x==0 , 1 if x > 0. nan is returned for nan inputs . With arguments `/`, `signature`.", "question_id": 18231},
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207},
{"snippet": "cgitb.enable(display=1, format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1066},
{"snippet": "ma.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 22287},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "date.ctime()", "intent": "Return a string representing the date , for example date ( 2002 , 12 , 4 ) .ctime ( ) == 'Wed Dec 4 00:00:00 2002 ' .", "question_id": 2244},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "pandas.read_csv(filepath_or_buffer, sep=NoDefault.no_default)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `sep`.", "question_id": 46055},
{"snippet": "torch.tril_indices(row, col)", "intent": "Returns the indices of the lower triangular part of a row-by- `col` matrix in a 2-by-N Tensor , where the first `row` contains row coordinates of all indices and the second row contains column coordinates .", "question_id": 51255},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474},
{"snippet": "shutil.unregister_unpack_format(name)", "intent": "Unregister an unpack format . `name` is the name of the format .", "question_id": 8369},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "numpy.column_stack(tup)", "intent": "Stack 1-D arrays as columns into a 2-D array . With arguments `tup`.", "question_id": 20745},
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825},
{"snippet": "Tensor.div_(value)", "intent": "In-place version of div ( ) With arguments `value`.", "question_id": 48681},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "Series.swaplevel(i=- 2)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 41411},
{"snippet": "bz2.open(filename)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 876},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "context.exp(x)", "intent": "Returns e ** `x` .", "question_id": 2530},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "text_calendar.pryear(theyear, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`.", "question_id": 948},
{"snippet": "torch.nn.RReLU(lower=0.125, upper=0.3333333333333333, inplace=False)", "intent": "Applies the randomized leaky rectified liner unit function , element-wise , as described in the paper : where aaa is randomly sampled from uniform distribution U ( `lower` , `upper` ) \\mathcal { U } ( \\text { lower } , \\text { upper } ) U ( lower , upper ) . With arguments `inplace`.", "question_id": 50709},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "formatter.pop_style(n=1)", "intent": "Pop the last `n` style specifications passed to push_style ( ) .", "question_id": 3834},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "operator.delitem(a, b)", "intent": "Remove the value of `a` at index `b` .", "question_id": 6573},
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162},
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42129},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "struct.Struct(format)", "intent": "Return a new Struct object which writes and reads binary data according to the `format` string format .", "question_id": 9558},
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901},
{"snippet": "mmap.mmap(fileno, length, access=ACCESS_DEFAULT)", "intent": "( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object . With arguments `access`.", "question_id": 5982},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "DataFrame.sort_index(ascending=True)", "intent": "Sort object by labels ( along an `axis` ) . By default , it sorts in `ascending` order , to sort in descending order , use ascending=False", "question_id": 35034},
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223},
{"snippet": "numpy.shape(a)", "intent": "Return the shape of an array . With arguments `a`.", "question_id": 22805},
{"snippet": "char.chararray.itemset(*args)", "intent": "Insert scalar into an array ( scalar is cast to array \u2019 s dtype , if possible ) With arguments `*args`.", "question_id": 17179},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899},
{"snippet": "random.Generator.power(a)", "intent": "Draws samples in [ 0 , 1 ] from `a` power distribution with positive exponent a - 1 .", "question_id": 16090},
{"snippet": "DataFrame.sort_index(ascending=True)", "intent": "Sort object by labels ( along an `axis` ) . By default , it sorts in `ascending` order , to sort in descending order , use ascending=False", "question_id": 35034},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "matlib.repmat(a, m, n)", "intent": "Repeat `a` 0-D to 2-D array or matrix MxN times . With arguments `m`, `n`.", "question_id": 18544},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "softplus.prune(t)", "intent": "Computes and returns a pruned version of input tensor `t` according to the pruning rule specified in compute_mask ( ) .", "question_id": 50894},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "os.supports_fd", "intent": "A Set object indicating which functions in the os module permit specifying their path parameter as an open file descriptor.", "question_id": 6949},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "calendar.itermonthdates(year, month)", "intent": "Return an iterator for the `month` month ( 1\u201312 ) in the `year` year .", "question_id": 912},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435},
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "curses.echo()", "intent": "Enter echo mode .", "question_id": 1931},
{"snippet": "HTTPHandler.http_open(req)", "intent": "Send an HTTP request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11871},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "xml.sax.saxutils.XMLGenerator(encoding='iso-8859-1')", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' .", "question_id": 12660},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "widget.focus(item=None)", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10631},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "stat.S_ISGID", "intent": "Set-group-ID bit.", "question_id": 9095},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42129},
{"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "distutils.system_info.get_standard_file(fname)", "intent": "Returns a list of files named \u2018 `fname` \u2019 from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ \u2018 HOME \u2019 ] ) 3 ) Local directory", "question_id": 22646},
{"snippet": "context.get(var)", "intent": "Return the value for `var` if var has the value in the context object .", "question_id": 1655},
{"snippet": "random.Generator.power(a)", "intent": "Draws samples in [ 0 , 1 ] from `a` power distribution with positive exponent a - 1 .", "question_id": 16090},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "email_message.__str__()", "intent": "Equivalent to as_string ( policy=self.policy.clone ( utf8=True ) ) .", "question_id": 3232},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "sequence_matcher.ratio()", "intent": "Return a measure of the sequences \u2019 similarity as a float in the range [ 0 , 1 ] .", "question_id": 2687},
{"snippet": "ma.polyfit(x, y, deg)", "intent": "Least squares polynomial fit . Fit a polynomial p ( `x` ) = p [ 0 ] * x * * `deg` + ... + p [ deg ] of degree deg to points ( x , `y` ) .", "question_id": 16605},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "ordered_dict.popitem()", "intent": "The popitem ( ) method for ordered dictionaries returns and removes a ( key , value ) pair .", "question_id": 1391},
{"snippet": "date.ctime()", "intent": "Return a string representing the date , for example date ( 2002 , 12 , 4 ) .ctime ( ) == 'Wed Dec 4 00:00:00 2002 ' .", "question_id": 2244},
{"snippet": "DataFrameGroupBy.sample(replace=False)", "intent": "Return a random sample of items from each group . With arguments `replace`.", "question_id": 43699},
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "turtle.speed()", "intent": "Set the turtle \u2019 s `speed` to an integer value in the range 0..10 .", "question_id": 10934},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "email.message.EmailMessage(policy=default)", "intent": "If `policy` is specified use the rules it specifies to update and serialize the representation of the message .", "question_id": 3223},
{"snippet": "numpy.column_stack(tup)", "intent": "Stack 1-D arrays as columns into a 2-D array . With arguments `tup`.", "question_id": 20745},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "wsgiref.util.application_uri(environ)", "intent": "Similar to request_uri ( ) , except that the PATH_INFO and QUERY_STRING variables are ignored . With arguments `environ`.", "question_id": 12213},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "io.StringIO()", "intent": "An in-memory stream for text I/O .", "question_id": 5164},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657},
{"snippet": "numpy.arange(start, stop)", "intent": "Return evenly spaced values within a given interval . Values are generated within the half-open interval [ `start` , `stop` ) ( in other words , the interval including start but excluding stop ) .", "question_id": 17622},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "GroupBy.prod()", "intent": "Compute prod of group values .", "question_id": 43950},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "calendar.itermonthdates(year, month)", "intent": "Return an iterator for the `month` month ( 1\u201312 ) in the `year` year .", "question_id": 912},
{"snippet": "Series.str.rsplit(pat=None)", "intent": "Split strings around given separator/delimiter . The `pat` parameter can be used to split by other characters .", "question_id": 41203},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "ZipInfo.flag_bits", "intent": "ZIP flag bits.", "question_id": 12872},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "MultiIndex.get_locs(seq)", "intent": "Get location for a sequence of labels . With arguments `seq`.", "question_id": 37625},
{"snippet": "torch.nn.functional.tanh(input)", "intent": "Applies element-wise , Tanh ( x ) =tanh\u2061 ( x ) =exp\u2061 ( x ) \u2212exp\u2061 ( \u2212x ) exp\u2061 ( x ) +exp\u2061 ( \u2212x ) \\text { Tanh } ( x ) = \\tanh ( x ) = \\frac { \\exp ( x ) - \\exp ( -x ) } { \\exp ( x ) + \\exp ( -x ) } Tanh ( x ) =tanh ( x ) =exp ( x ) +exp ( \u2212x ) exp ( x ) \u2212exp ( \u2212x ) \u200b With arguments `input`.", "question_id": 49901},
{"snippet": "webbrowser.open_new(url)", "intent": "Open `url` in a new window of the default browser , if possible , otherwise , open url in the only browser window .", "question_id": 12106},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "torch.vander(x)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 .", "question_id": 48635},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "curses.echo()", "intent": "Enter echo mode .", "question_id": 1931},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "Match.string", "intent": "The string passed to match() or search().", "question_id": 8014},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "Unpacker.done()", "intent": "Indicates unpack completion .", "question_id": 12289},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "os.supports_fd", "intent": "A Set object indicating which functions in the os module permit specifying their path parameter as an open file descriptor.", "question_id": 6949},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207},
{"snippet": "test.support.script_helper.make_script(script_dir, script_basename, source, omit_suffix=False)", "intent": "Create script containing `source` in path `script_dir` and `script_basename` . If `omit_suffix` is False , append .py to the name .", "question_id": 10309},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296},
{"snippet": "py_compile.main()", "intent": "Compile several source files .", "question_id": 7835},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42128},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "Series.reset_index(drop=False)", "intent": "Generate a new DataFrame or Series with the index reset . To generate a new Series with the default set `drop` to True .", "question_id": 40315},
{"snippet": "email_message.get_content_subtype()", "intent": "Return the message \u2019 s sub-content type .", "question_id": 3257},
{"snippet": "context.scaleb(x, y)", "intent": "Returns the first operand after adding the second value its exp . With arguments `x`, `y`.", "question_id": 2569},
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "DataFrame.swaplevel(i=- 2)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35254},
{"snippet": "typing.Callable", "intent": "Callable type; Callable[[int], str] is a function of (int) -> str.", "question_id": 11336},
{"snippet": "compileall.compile_path()", "intent": "Byte-compile all the .py files found along sys.path .", "question_id": 1429},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "email_message.get_content_subtype()", "intent": "Return the message \u2019 s sub-content type .", "question_id": 3257},
{"snippet": "widget.focus(item=None)", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10631},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "ufunc.reduceat(array, indices, axis=0, dtype=None)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) . With arguments `dtype`.", "question_id": 23911},
{"snippet": "maildir_message.set_info(info)", "intent": "Set \u201c `info` \u201d to info , which should be a string .", "question_id": 5822},
{"snippet": "filecmp.dircmp(a, b)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . With arguments `b`.", "question_id": 3760},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "urllib.request.FTPHandler", "intent": "Open FTP URLs.", "question_id": 11812},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "numpy.sign(x, /, signature)", "intent": "Returns an element-wise indication of the sign of a number . The sign function returns -1 if `x` < 0 , 0 if x==0 , 1 if x > 0. nan is returned for nan inputs . With arguments `/`, `signature`.", "question_id": 18231},
{"snippet": "operator.__truediv__(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6565},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "fft.fftshift(x)", "intent": "Shift the zero-frequency component to the center of the spectrum . Note that y [ 0 ] is the Nyquist component only if len ( `x` ) is even .", "question_id": 18922},
{"snippet": "email.message.EmailMessage(policy=default)", "intent": "If `policy` is specified use the rules it specifies to update and serialize the representation of the message .", "question_id": 3223},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "torch.stft(input, n_fft, return_complex=None)", "intent": "Short-time Fourier transform ( STFT ) . The STFT computes the Fourier transform of short overlapping windows of the `input` . where mmm is the index of the sliding `window` , and \u03c9\\omega\u03c9 is the frequency 0\u2264\u03c9 < n_fft0 \\leq \\omega < \\text { n\\_fft } 0\u2264\u03c9 < `n_fft` for onesided=False , or 0\u2264\u03c9 < \u230an_fft/2\u230b+10 \\leq \\omega < \\lfloor \\text { n\\_fft } / 2 \\rfloor + 10\u2264\u03c9 < \u230an_fft/2\u230b+1 for onesided=True . Returns either a complex tensor of size ( \u2217\u00d7N\u00d7T ) ( * \\times N \\times T ) ( \u2217\u00d7N\u00d7T ) if `return_complex` is true , or a real tensor of size ( \u2217\u00d7N\u00d7T\u00d72 ) ( * \\times N \\times T \\times 2 ) ( \u2217\u00d7N\u00d7T\u00d72 ) .", "question_id": 51557},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "ma.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 22287},
{"snippet": "PurePath.match(pattern)", "intent": "Match this path against the provided glob-style `pattern` .", "question_id": 7258},
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825},
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223},
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "maildir_message.set_info(info)", "intent": "Set \u201c `info` \u201d to info , which should be a string .", "question_id": 5822},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "window.mvderwin(y, x)", "intent": "Move the window inside its parent window . With arguments `y`, `x`.", "question_id": 2094},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "ufunc.reduceat(array, indices, dtype=None)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) . With arguments `dtype`.", "question_id": 23909},
{"snippet": "datetime.date(year, month, day)", "intent": "All arguments are required . With arguments `year`, `month`, `day`.", "question_id": 2218},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "string.capwords(s)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . With arguments `s`.", "question_id": 9529},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "random.Generator.power(a)", "intent": "Draws samples in [ 0 , 1 ] from `a` power distribution with positive exponent a - 1 .", "question_id": 16090},
{"snippet": "email_message.__str__()", "intent": "Equivalent to as_string ( policy=self.policy.clone ( utf8=True ) ) .", "question_id": 3232},
{"snippet": "property()", "intent": "Return a property attribute .", "question_id": 4085},
{"snippet": "numpy.histogramdd(sample, bins=10, range=None)", "intent": "Compute the multidimensional histogram of some data . With arguments `sample`, `bins`, `range`.", "question_id": 20899},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "date.ctime()", "intent": "Return a string representing the date , for example date ( 2002 , 12 , 4 ) .ctime ( ) == 'Wed Dec 4 00:00:00 2002 ' .", "question_id": 2244},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "operator.add(a, b)", "intent": "Return `a` + `b` , for a and b numbers .", "question_id": 6532},
{"snippet": "random.choice(a, replace=True)", "intent": "Generates `a` random sample from a given 1-D array With arguments `replace`.", "question_id": 18794},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "DataFrame.swaplevel(i=- 2)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35254},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223},
{"snippet": "base_server.serve_forever(poll_interval=0.5)", "intent": "Handle requests until an explicit shutdown ( ) request . Poll for shutdown every `poll_interval` seconds .", "question_id": 8763},
{"snippet": "json_decoder.decode(s)", "intent": "Return the Python representation of `s` ( a str instance containing a JSON document ) .", "question_id": 5320},
{"snippet": "compileall.compile_path()", "intent": "Byte-compile all the .py files found along sys.path .", "question_id": 1429},
{"snippet": "random.Generator.power(a)", "intent": "Draws samples in [ 0 , 1 ] from `a` power distribution with positive exponent a - 1 .", "question_id": 16090},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "bisect.bisect_right(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 858},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "DataFrame.swaplevel(i=- 2)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35254},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "formatter.pop_style(n=1)", "intent": "Pop the last `n` style specifications passed to push_style ( ) .", "question_id": 3834},
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223},
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "numpy.fromstring(string, count=- 1)", "intent": "A new 1-D array initialized from text data in a `string` . With arguments `count`.", "question_id": 21478},
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "Series.replace(regex=False)", "intent": "Replace values given in `to_replace` with `value` . With arguments `regex`.", "question_id": 40268},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "sys._debugmallocstats()", "intent": "Print low-level information to stderr about the state of CPython \u2019 s memory allocator .", "question_id": 9777},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "date.isoweekday()", "intent": "Return the day of the week as an integer , where Monday is 1 and Sunday is 7 .", "question_id": 2240},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "Tensor.div_(value)", "intent": "In-place version of div ( ) With arguments `value`.", "question_id": 48681},
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899},
{"snippet": "DataFrame.ffill(inplace=False)", "intent": "Synonym for DataFrame.fillna ( ) with method='ffill ' . With arguments `inplace`.", "question_id": 33063},
{"snippet": "random.choice(a, replace=True)", "intent": "Generates `a` random sample from a given 1-D array With arguments `replace`.", "question_id": 18794},
{"snippet": "random.Generator.power(a)", "intent": "Draws samples in [ 0 , 1 ] from `a` power distribution with positive exponent a - 1 .", "question_id": 16090},
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "linalg.LinAlgError", "intent": "Generic Python-exception-derived object raised by linalg functions.", "question_id": 16660},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050},
{"snippet": "reversed(seq)", "intent": "Return a reverse iterator . `seq` must be an object which has a __reversed__ ( ) method or supports the sequence protocol ( the __len__ ( ) method and the __getitem__ ( ) method with integer arguments starting at 0 ) .", "question_id": 4099},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "numpy.info(toplevel='numpy')", "intent": "Get help information for a function , class , or module . With arguments `toplevel`.", "question_id": 22067},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296},
{"snippet": "pandas.read_csv(filepath_or_buffer, delimiter=None)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `delimiter`.", "question_id": 46036},
{"snippet": "GroupBy.prod()", "intent": "Compute prod of group values .", "question_id": 43950},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "property()", "intent": "Return a property attribute .", "question_id": 4085},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "distutils.system_info.get_standard_file(fname)", "intent": "Returns a list of files named \u2018 `fname` \u2019 from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ \u2018 HOME \u2019 ] ) 3 ) Local directory", "question_id": 22646},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "random.Generator.power(a)", "intent": "Draws samples in [ 0 , 1 ] from `a` power distribution with positive exponent a - 1 .", "question_id": 16090},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "random.Generator.power(a)", "intent": "Draws samples in [ 0 , 1 ] from `a` power distribution with positive exponent a - 1 .", "question_id": 16090},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "test.support.script_helper.spawn_python(*args, **kw, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`, `stdout`, `stderr`.", "question_id": 10306},
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "DataFrameGroupBy.sample(replace=False)", "intent": "Return a random sample of items from each group . With arguments `replace`.", "question_id": 43699},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "email.contentmanager.set_content(msg, <'str'>, disposition=None)", "intent": "Add `headers` and payload to `msg` : If `disposition` is set , use it as the value of the Content-Disposition header . With arguments `<'str'>`.", "question_id": 3042},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "importlib.util.source_from_cache(path)", "intent": "Given the `path` to a PEP 3147 file name , return the associated source code file path .", "question_id": 4925},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "date.ctime()", "intent": "Return a string representing the date , for example date ( 2002 , 12 , 4 ) .ctime ( ) == 'Wed Dec 4 00:00:00 2002 ' .", "question_id": 2244},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "DataFrame.__iter__()", "intent": "Iterate over info axis .", "question_id": 32135},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "softplus.prune(t)", "intent": "Computes and returns a pruned version of input tensor `t` according to the pruning rule specified in compute_mask ( ) .", "question_id": 50894},
{"snippet": "Series.str.rsplit(pat=None)", "intent": "Split strings around given separator/delimiter . The `pat` parameter can be used to split by other characters .", "question_id": 41203},
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171},
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982},
{"snippet": "matlib.repmat(a, m, n)", "intent": "Repeat `a` 0-D to 2-D array or matrix MxN times . With arguments `m`, `n`.", "question_id": 18544},
{"snippet": "Series.str.rsplit(pat=None)", "intent": "Split strings around given separator/delimiter . The `pat` parameter can be used to split by other characters .", "question_id": 41203},
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445},
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825},
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110},
{"snippet": "torch.nn.RReLU(lower=0.125)", "intent": "Applies the randomized leaky rectified liner unit function , element-wise , as described in the paper : where aaa is randomly sampled from uniform distribution U ( `lower` , `upper` ) \\mathcal { U } ( \\text { lower } , \\text { upper } ) U ( lower , upper ) .", "question_id": 50703},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "re.finditer(pattern, string, flags=0)", "intent": "Return an iterator yielding match objects over all non-overlapping matches for the RE `pattern` in `string` . With arguments `flags`.", "question_id": 7950},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "operator.delitem(a, b)", "intent": "Remove the value of `a` at index `b` .", "question_id": 6573},
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "torch.nn.RReLU(lower=0.125)", "intent": "Applies the randomized leaky rectified liner unit function , element-wise , as described in the paper : where aaa is randomly sampled from uniform distribution U ( `lower` , `upper` ) \\mathcal { U } ( \\text { lower } , \\text { upper } ) U ( lower , upper ) .", "question_id": 50703},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "ssl.cert_time_to_seconds(cert_time)", "intent": "Return the time in seconds since the Epoch , given the `cert_time` string representing the \u201c notBefore \u201d or \u201c notAfter \u201d date from a certificate in `` % b % d % H : % M : % S % Y % Z '' strptime format ( C locale ) .", "question_id": 8891},
{"snippet": "DataFrame.merge(right, '_y'), how='inner')", "intent": "Merge DataFrame or named Series objects with a database-style join . Merge DataFrames df1 and df2 with specified left and `right` suffixes appended to any overlapping columns . With arguments `'_y')`, `how`.", "question_id": 33800},
{"snippet": "numpy.sign(x, /, signature)", "intent": "Returns an element-wise indication of the sign of a number . The sign function returns -1 if `x` < 0 , 0 if x==0 , 1 if x > 0. nan is returned for nan inputs . With arguments `/`, `signature`.", "question_id": 18231},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "char.compare_chararrays(a, b, cmp_op, rstrip)", "intent": "Performs element-wise comparison of two string arrays using the comparison operator specified by `cmp_op` . With arguments `a`, `b`, `rstrip`.", "question_id": 21045},
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "DataFrame.swaplevel()", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35237},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "datetime.ctime()", "intent": "Return a string representing the date and time , for example datetime ( 2002 , 12 , 4 , 20 , 30 , 40 ) .ctime ( ) == 'Wed Dec 4 20:30:40 2002 ' .", "question_id": 2311},
{"snippet": "polynomial.chebyshev.chebpts1(npts)", "intent": "Chebyshev points of the first kind . The Chebyshev points of the first kind are the points cos ( x ) , where x = [ pi * ( k + .5 ) /npts for k in range ( `npts` ) ] .", "question_id": 16906},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899},
{"snippet": "email_message.__str__()", "intent": "Equivalent to as_string ( policy=self.policy.clone ( utf8=True ) ) .", "question_id": 3232},
{"snippet": "HTTPHandler.http_open(req)", "intent": "Send an HTTP request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11871},
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124},
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "DataFrameGroupBy.sample(replace=False)", "intent": "Return a random sample of items from each group . With arguments `replace`.", "question_id": 43699},
{"snippet": "email_message.__str__()", "intent": "Equivalent to as_string ( policy=self.policy.clone ( utf8=True ) ) .", "question_id": 3232},
{"snippet": "ssl.cert_time_to_seconds(cert_time)", "intent": "Return the time in seconds since the Epoch , given the `cert_time` string representing the \u201c notBefore \u201d or \u201c notAfter \u201d date from a certificate in `` % b % d % H : % M : % S % Y % Z '' strptime format ( C locale ) .", "question_id": 8891},
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487},
{"snippet": "curses.echo()", "intent": "Enter echo mode .", "question_id": 1931},
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296},
{"snippet": "GroupBy.__iter__()", "intent": "Groupby iterator .", "question_id": 43751},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "Tensor.div_(value)", "intent": "In-place version of div ( ) With arguments `value`.", "question_id": 48681},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "torch.nn.functional.prelu(input, weight)", "intent": "Applies element-wise the function PReLU ( x ) =max\u2061 ( 0 , x ) +weight\u2217min\u2061 ( 0 , x ) \\text { PReLU } ( x ) = \\max ( 0 , x ) + \\text { `weight` } * \\min ( 0 , x ) PReLU ( x ) =max ( 0 , x ) +weight\u2217min ( 0 , x ) where weight is a learnable parameter . With arguments `input`.", "question_id": 51355},
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487},
{"snippet": "DataFrame.swaplevel(i=- 2)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35254},
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032},
{"snippet": "os.fwalk(top='.')", "intent": "This behaves exactly like walk ( ) , except that it yields a 4-tuple ( dirpath , dirnames , filenames , dirfd ) , and it supports `dir_fd` . With arguments `top`.", "question_id": 6984},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "DataFrame.swaplevel(i=- 2)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35254},
{"snippet": "os.supports_fd", "intent": "A Set object indicating which functions in the os module permit specifying their path parameter as an open file descriptor.", "question_id": 6949},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "ssl.SSLSession", "intent": "Session object used by session.", "question_id": 9060},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "email_message.__str__()", "intent": "Equivalent to as_string ( policy=self.policy.clone ( utf8=True ) ) .", "question_id": 3232},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "distutils.system_info.get_standard_file(fname)", "intent": "Returns a list of files named \u2018 `fname` \u2019 from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ \u2018 HOME \u2019 ] ) 3 ) Local directory", "question_id": 22646},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "turtle.speed()", "intent": "Set the turtle \u2019 s `speed` to an integer value in the range 0..10 .", "question_id": 10934},
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "DataFrame.ffill(inplace=False)", "intent": "Synonym for DataFrame.fillna ( ) with method='ffill ' . With arguments `inplace`.", "question_id": 33063},
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "polynomial.hermite_e.hermetrim(c, tol=0)", "intent": "Remove \u201c small \u201d \u201c trailing \u201d coefficients from a polynomial . \u201c Small \u201d means \u201c small in absolute value \u201d and is controlled by the parameter `tol` ; \u201c trailing \u201d means highest order coefficient ( s ) , e.g. , in [ 0 , 1 , 1 , 0 , 0 ] ( which represents 0 + x + x * * 2 + 0 * x * * 3 + 0 * x * * 4 ) both the 3-rd and 4-th order coefficients would be \u201c trimmed . \u201d With arguments `c`.", "question_id": 16569},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "locale.strcoll(string1, string2)", "intent": "Compares two strings according to the current LC_COLLATE setting . As any other compare function , returns a negative , or a positive value , or 0 , depending on whether `string1` collates before or after `string2` or is equal to it .", "question_id": 5382},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "ma.MaskedArray.__len__(/)", "intent": "Return len ( self ) . With arguments `/`.", "question_id": 22971},
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162},
{"snippet": "torch.nn.functional.gaussian_nll_loss(input, target, var)", "intent": "Gaussian negative log likelihood loss . With arguments `input`, `target`, `var`.", "question_id": 53352},
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296},
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977},
{"snippet": "email_message.get_content_subtype()", "intent": "Return the message \u2019 s sub-content type .", "question_id": 3257},
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "email_message.__str__()", "intent": "Equivalent to as_string ( policy=self.policy.clone ( utf8=True ) ) .", "question_id": 3232},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "curses.ascii.isdigit(c)", "intent": "Checks for an ASCII decimal digit , ' 0 ' through ' 9 ' . This is equivalent to `c` in string.digits .", "question_id": 1904},
{"snippet": "linalg.tensorsolve(a, b)", "intent": "Solve the tensor equation `a` x = `b` for x .", "question_id": 19418},
{"snippet": "context.exp(x)", "intent": "Returns e ** `x` .", "question_id": 2530},
{"snippet": "Series.swaplevel(i=- 2)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 41411},
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "char.multiply(a, i)", "intent": "Return ( `a` * `i` ) , that is string multiple concatenation , element-wise .", "question_id": 17318},
{"snippet": "polynomial.hermite_e.hermegrid3d(x, y, z, c)", "intent": "Evaluate a 3-D HermiteE series on the Cartesian product of `x` , `y` , and `z` . where the points ( a , b , `c` ) consist of all triples formed by taking a from x , b from y , and c from z .", "question_id": 23407},
{"snippet": "torch.repeat_interleave(input, repeats)", "intent": "Repeat elements of a tensor . If the `repeats` is tensor ( [ n1 , n2 , n3 , \u2026 ] ) , then the output will be tensor ( [ 0 , 0 , \u2026 , 1 , 1 , \u2026 , 2 , 2 , \u2026 , \u2026 ] ) where 0 appears n1 times , 1 appears n2 times , 2 appears n3 times , etc . With arguments `input`.", "question_id": 50355},
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472},
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "torch.nn.functional.elu(input, alpha=1.0)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `alpha`.", "question_id": 49466},
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063},
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "compileall.compile_path()", "intent": "Byte-compile all the .py files found along sys.path .", "question_id": 1429},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "Tensor.symeig(upper=True)", "intent": "See torch.symeig ( ) With arguments `upper`.", "question_id": 52128},
{"snippet": "formatter.AbstractFormatter(writer)", "intent": "The standard formatter . With arguments `writer`.", "question_id": 3840},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008},
{"snippet": "DataFrame.__iter__()", "intent": "Iterate over info axis .", "question_id": 32135},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "DataSource.exists(path)", "intent": "Test if `path` exists .", "question_id": 20770},
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471},
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "torch.vander(x, increasing=False)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 . If `increasing` is True , the order of the columns is reversed x0 , x1 , ... , x ( N\u22121 ) x^0 , x^1 , ... , x^ { ( N-1 ) } x0 , x1 , ... , x ( N\u22121 ) .", "question_id": 48637},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "linalg.LinAlgError", "intent": "Generic Python-exception-derived object raised by linalg functions.", "question_id": 16660},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "ma.MaskedArray.__setitem__(indx, value)", "intent": "x.__setitem__ ( i , y ) < == > x [ i ] =y If `value` is masked , masks those locations . With arguments `indx`.", "question_id": 20719},
{"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "smtplib.SMTP()", "intent": "An SMTP instance encapsulates an SMTP connection .", "question_id": 8458},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "recarray.searchsorted(v)", "intent": "Find indices where elements of `v` should be inserted in a to maintain order .", "question_id": 18001},
{"snippet": "datetime.ctime()", "intent": "Return a string representing the date and time , for example datetime ( 2002 , 12 , 4 , 20 , 30 , 40 ) .ctime ( ) == 'Wed Dec 4 20:30:40 2002 ' .", "question_id": 2311},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "reversed(seq)", "intent": "Return a reverse iterator . `seq` must be an object which has a __reversed__ ( ) method or supports the sequence protocol ( the __len__ ( ) method and the __getitem__ ( ) method with integer arguments starting at 0 ) .", "question_id": 4099},
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "Timedelta.nanoseconds", "intent": "Return the number of nanoseconds (n), where 0 <= n < 1 microsecond.", "question_id": 42135},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "curses.ascii.isdigit(c)", "intent": "Checks for an ASCII decimal digit , ' 0 ' through ' 9 ' . This is equivalent to `c` in string.digits .", "question_id": 1904},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "bz2.open(filename)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 876},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "test.support.TEST_SUPPORT_DIR", "intent": "Set to the top level directory that contains test.support.", "question_id": 10126},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "Unpacker.done()", "intent": "Indicates unpack completion .", "question_id": 12289},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "distutils.system_info.get_standard_file(fname)", "intent": "Returns a list of files named \u2018 `fname` \u2019 from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ \u2018 HOME \u2019 ] ) 3 ) Local directory", "question_id": 22646},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "Index.set_value(arr, key, value)", "intent": "Fast lookup of `value` from 1-dimensional ndarray . With arguments `arr`, `key`.", "question_id": 36973},
{"snippet": "imp.find_module(name)", "intent": "Try to find the module `name` .", "question_id": 4763},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124},
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200},
{"snippet": "widget.focus(item=None)", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10631},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "email.contentmanager.set_content(msg, <'str'>, disposition=None)", "intent": "Add `headers` and payload to `msg` : If `disposition` is set , use it as the value of the Content-Disposition header . With arguments `<'str'>`.", "question_id": 3042},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "json_decoder.decode(s)", "intent": "Return the Python representation of `s` ( a str instance containing a JSON document ) .", "question_id": 5320},
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474},
{"snippet": "DataFrame.ewm(com=None)", "intent": "Provide exponential weighted ( EW ) functions . Exactly one parameter : `com` , `span` , `halflife` , or `alpha` must be provided .", "question_id": 32976},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "re.ASCII", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7925},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "numpy.lexsort(keys, axis=- 1)", "intent": "Perform an indirect stable sort using a sequence of `keys` . With arguments `axis`.", "question_id": 21552},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "polynomial.chebyshev.chebgauss(deg)", "intent": "Gauss-Chebyshev quadrature . These sample points and weights will correctly integrate polynomials of degree \\ ( 2 * `deg` - 1\\ ) or less over the interval \\ ( [ -1 , 1 ] \\ ) with the weight function \\ ( f ( x ) = 1/\\sqrt { 1 - x^2 } \\ ) .", "question_id": 19526},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42129},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901},
{"snippet": "matlib.repmat(a, m, n)", "intent": "Repeat `a` 0-D to 2-D array or matrix MxN times . With arguments `m`, `n`.", "question_id": 18544},
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "ast._fields", "intent": "Each concrete class has an attribute _fields which gives the names of all child nodes.", "question_id": 142},
{"snippet": "operator.__iconcat__(a, b)", "intent": "`a` = iconcat ( a , `b` ) is equivalent to a += b for a and b sequences .", "question_id": 6593},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "random.Generator.power(a)", "intent": "Draws samples in [ 0 , 1 ] from `a` power distribution with positive exponent a - 1 .", "question_id": 16090},
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "bool()", "intent": "Return a Boolean value , i.e .", "question_id": 3979},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "Series.swaplevel(i=- 2)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 41411},
{"snippet": "pandas.read_csv(filepath_or_buffer, sep=NoDefault.no_default)", "intent": "Read a comma-separated values ( csv ) file into DataFrame . With arguments `filepath_or_buffer`, `sep`.", "question_id": 46055},
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038},
{"snippet": "email_message.get_body('html', 'plain'))", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . With arguments `'html'`, `'plain')`.", "question_id": 3286},
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "DataFrame.swaplevel(i=- 2)", "intent": "Swap levels `i` and `j` in a MultiIndex .", "question_id": 35254},
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942},
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214},
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977},
{"snippet": "Series.str.rsplit(pat=None)", "intent": "Split strings around given separator/delimiter . The `pat` parameter can be used to split by other characters .", "question_id": 41203},
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "context.get(var)", "intent": "Return the value for `var` if var has the value in the context object .", "question_id": 1655},
{"snippet": "Series.str.cat(join='left')", "intent": "Concatenate strings in the Series/Index with given separator . With arguments `join`.", "question_id": 40862},
{"snippet": "DataFrame.reset_index(level=None)", "intent": "Reset the index , or a `level` of it .", "question_id": 34634},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "torch.vander(x)", "intent": "Generates a Vandermonde matrix . The columns of the output matrix are elementwise powers of the input vector `x` ( N\u22121 ) , x ( N\u22122 ) , ... , x0x^ { ( N-1 ) } , x^ { ( N-2 ) } , ... , x^0x ( N\u22121 ) , x ( N\u22122 ) , ... , x0 .", "question_id": 48635},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "char.multiply(a, i)", "intent": "Return ( `a` * `i` ) , that is string multiple concatenation , element-wise .", "question_id": 17318},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "list(iterable)", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4045},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "typing.Tuple", "intent": "Tuple type; Tuple[X, Y] is the type of a tuple of two items with the first item of type X and the second of type Y.", "question_id": 11335},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "DataFrame.duplicated(subset=None)", "intent": "Return boolean Series denoting duplicate rows . To find duplicates on specific column ( s ) , use `subset` .", "question_id": 32947},
{"snippet": "math.log2(x)", "intent": "Return the base-2 logarithm of `x` .", "question_id": 5910},
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "PurePath.match(pattern)", "intent": "Match this path against the provided glob-style `pattern` .", "question_id": 7258},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "property()", "intent": "Return a property attribute .", "question_id": 4085},
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657},
{"snippet": "Series.str.rsplit(pat=None)", "intent": "Split strings around given separator/delimiter . The `pat` parameter can be used to split by other characters .", "question_id": 41203},
{"snippet": "errno.ELIBSCN", "intent": ".lib section in a.out corrupted", "question_id": 3586},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "ast._fields", "intent": "Each concrete class has an attribute _fields which gives the names of all child nodes.", "question_id": 142},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "os.path.lexists(path)", "intent": "Return True if `path` refers to an existing path .", "question_id": 7148},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "DataFrame.merge(right, '_y'), right_index=False)", "intent": "Merge DataFrame or named Series objects with a database-style join . Merge DataFrames df1 and df2 with specified left and `right` suffixes appended to any overlapping columns . With arguments `'_y')`, `right_index`.", "question_id": 33795},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "torch.nn.functional.elu(input, inplace=False)", "intent": "Applies element-wise , ELU ( x ) =max\u2061 ( 0 , x ) +min\u2061 ( 0 , \u03b1\u2217 ( exp\u2061 ( x ) \u22121 ) ) \\text { ELU } ( x ) = \\max ( 0 , x ) + \\min ( 0 , \\alpha * ( \\exp ( x ) - 1 ) ) ELU ( x ) =max ( 0 , x ) +min ( 0 , \u03b1\u2217 ( exp ( x ) \u22121 ) ) . With arguments `input`, `inplace`.", "question_id": 49467},
{"snippet": "Series.str.get(i)", "intent": "Extract element from each component at specified position . With arguments `i`.", "question_id": 40990},
{"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608},
{"snippet": "reversed(seq)", "intent": "Return a reverse iterator . `seq` must be an object which has a __reversed__ ( ) method or supports the sequence protocol ( the __len__ ( ) method and the __getitem__ ( ) method with integer arguments starting at 0 ) .", "question_id": 4099},
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075},
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346},
{"snippet": "io.StringIO()", "intent": "An in-memory stream for text I/O .", "question_id": 5164},
{"snippet": "curses.echo()", "intent": "Enter echo mode .", "question_id": 1931},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674},
{"snippet": "re.ASCII", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7925},
{"snippet": "torch.nn.functional.leaky_relu(input)", "intent": "Applies element-wise , LeakyReLU ( x ) =max\u2061 ( 0 , x ) +negative_slope\u2217min\u2061 ( 0 , x ) \\text { LeakyReLU } ( x ) = \\max ( 0 , x ) + \\text { negative\\_slope } * \\min ( 0 , x ) LeakyReLU ( x ) =max ( 0 , x ) +negative_slope\u2217min ( 0 , x ) With arguments `input`.", "question_id": 53317},
{"snippet": "Timestamp.replace(hour=None)", "intent": "Implements datetime.replace , handles nanoseconds . Replace `year` and the `hour` :", "question_id": 42426},
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108},
{"snippet": "ufunc.reduceat(array, indices, axis=0, dtype=None)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) . With arguments `dtype`.", "question_id": 23911},
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694},
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "torch.nn.functional.sigmoid(input)", "intent": "Applies the element-wise function Sigmoid ( x ) =11+exp\u2061 ( \u2212x ) \\text { Sigmoid } ( x ) = \\frac { 1 } { 1 + \\exp ( -x ) } Sigmoid ( x ) =1+exp ( \u2212x ) 1\u200b With arguments `input`.", "question_id": 48218},
{"snippet": "Template.copy(infile, outfile)", "intent": "Copy `infile` to `outfile` through the pipe .", "question_id": 7434},
{"snippet": "ufunc.reduceat(array, indices)", "intent": "Performs a ( local ) reduce with specified slices over a single `axis` . For i in range ( len ( `indices` ) ) , reduceat computes ufunc.reduce ( `array` [ indices [ i ] : indices [ i+1 ] ] ) , which becomes the i-th generalized \u201c row \u201d parallel to axis in the final result ( i.e. , in a 2-D array , for example , if axis = 0 , it becomes the i-th row , but if axis = 1 , it becomes the i-th column ) .", "question_id": 23907},
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129},
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170},
{"snippet": "Series.sort_values(key=None)", "intent": "Sort by the values . Sort using a `key` function .", "question_id": 40728},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42128},
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109},
{"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924},
{"snippet": "tkinter.tix.Select", "intent": "The Select widget is a container of button subwidgets.", "question_id": 10561},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "widget.selection_toggle(*items)", "intent": "Toggle the selection state of each item in items . With arguments `*items`.", "question_id": 10657},
{"snippet": "curses.ascii.isdigit(c)", "intent": "Checks for an ASCII decimal digit , ' 0 ' through ' 9 ' . This is equivalent to `c` in string.digits .", "question_id": 1904},
{"snippet": "numpy.fliplr(m)", "intent": "Reverse the order of elements along axis 1 ( left/right ) . Equivalent to `m` [ : , : :-1 ] or np.flip ( m , axis=1 ) .", "question_id": 22728},
{"snippet": "Pattern.findall(string, pos, endpos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7981},
{"snippet": "NNTP.newgroups(date)", "intent": "Send a NEWGROUPS command . The `date` argument should be a datetime.date or datetime.datetime object .", "question_id": 6461},
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "Series.str.rsplit(pat=None)", "intent": "Split strings around given separator/delimiter . The `pat` parameter can be used to split by other characters .", "question_id": 41203},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "os.rename(src, dst)", "intent": "Rename the file or directory `src` to `dst` .", "question_id": 6892},
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115},
{"snippet": "numpy.diag(v, k=0)", "intent": "Extract a diagonal or construct a diagonal array . With arguments `v`, `k`.", "question_id": 24298},
{"snippet": "torch.nn.ChannelShuffle(groups)", "intent": "Divide the channels in a tensor of shape ( \u2217 , C , H , W ) ( * , C , H , W ) ( \u2217 , C , H , W ) into g `groups` and rearrange them as ( \u2217 , Cg , g , H , W ) ( * , C \\frac g , g , H , W ) ( \u2217 , C , g\u200bg , H , W ) , while keeping the original tensor shape .", "question_id": 50859},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "random.chisquare(df)", "intent": "Draw samples from a chi-square distribution . When `df` independent random variables , each with standard normal distributions ( mean 0 , variance 1 ) , are squared and summed , the resulting distribution is chi-square ( see Notes ) .", "question_id": 20743},
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "operator.__iconcat__(a, b)", "intent": "`a` = iconcat ( a , `b` ) is equivalent to a += b for a and b sequences .", "question_id": 6593},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "random.Generator.power(a)", "intent": "Draws samples in [ 0 , 1 ] from `a` power distribution with positive exponent a - 1 .", "question_id": 16090},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310},
{"snippet": "Unpacker.done()", "intent": "Indicates unpack completion .", "question_id": 12289},
{"snippet": "smtp_channel.received_data", "intent": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".", "question_id": 8445},
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017},
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110},
{"snippet": "MultiIndex.from_frame(df)", "intent": "Make a MultiIndex from a DataFrame . With arguments `df`.", "question_id": 37544},
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032},
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162},
{"snippet": "os.supports_fd", "intent": "A Set object indicating which functions in the os module permit specifying their path parameter as an open file descriptor.", "question_id": 6949},
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716},
{"snippet": "math.atan2(y, x)", "intent": "Return atan ( `y` / `x` ) , in radians .", "question_id": 5917},
{"snippet": "traceback.format_stack(limit=None)", "intent": "A shorthand for format_list ( extract_stack ( `f` , `limit` ) ) .", "question_id": 10789},
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735},
{"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42128},
{"snippet": "torch.squeeze(input, out=None)", "intent": "Returns a tensor with all the dimensions of `input` of size 1 removed . For example , if input is of shape : ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) ( A \\times 1 \\times B \\times C \\times 1 \\times D ) ( A\u00d71\u00d7B\u00d7C\u00d71\u00d7D ) then the `out` tensor will be of shape : ( A\u00d7B\u00d7C\u00d7D ) ( A \\times B \\times C \\times D ) ( A\u00d7B\u00d7C\u00d7D ) .", "question_id": 53528},
{"snippet": "test.support.script_helper.make_script(script_dir, script_basename, source, omit_suffix=False)", "intent": "Create script containing `source` in path `script_dir` and `script_basename` . If `omit_suffix` is False , append .py to the name .", "question_id": 10309},
{"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133},
{"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223},
{"snippet": "Timedelta.isoformat()", "intent": "Format Timedelta as ISO 8601 Duration like P [ n ] Y [ n ] M [ n ] DT [ n ] H [ n ] M [ n ] S , where the [ n ] s are replaced by the values .", "question_id": 42129},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "numpy.tril_indices_from(arr, k=0)", "intent": "Return the indices for the lower-triangle of `arr` . With arguments `k`.", "question_id": 21469},
{"snippet": "numpy.info(toplevel='numpy')", "intent": "Get help information for a function , class , or module . With arguments `toplevel`.", "question_id": 22067},
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475},
{"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333},
{"snippet": "random.RandomState.standard_t(df)", "intent": "Draw samples from a standard Student \u2019 s t distribution with `df` degrees of freedom .", "question_id": 21273},
{"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268},
